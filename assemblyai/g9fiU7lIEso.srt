1
00:00:20,650 --> 00:00:23,950
Hi, my name is Sharon Yelenik. I'm API, API and Devex

2
00:00:24,020 --> 00:00:27,426
content writer Cloudinary. And today I'm going to talk to you about personalizing

3
00:00:27,458 --> 00:00:29,910
your images with aipowered features.

4
00:00:30,650 --> 00:00:34,680
So first I want to touch on how you handle your images today.

5
00:00:35,210 --> 00:00:38,530
Could be that you handle your images with a graphic designer.

6
00:00:38,690 --> 00:00:41,946
If you only have a few images on your website, it's very likely that you

7
00:00:41,968 --> 00:00:44,854
have a graphic designer who looks through every image,

8
00:00:44,982 --> 00:00:48,774
crops it properly, adds the proper text, maybe localizes

9
00:00:48,822 --> 00:00:50,880
it per country that you service,

10
00:00:51,810 --> 00:00:56,158
maybe puts a proper logo on it to

11
00:00:56,244 --> 00:01:00,526
watermark your images. And basically the

12
00:01:00,548 --> 00:01:03,906
graphic designer has their eye on every single image in

13
00:01:03,928 --> 00:01:08,082
order to prepare it for delivery. The problem is

14
00:01:08,136 --> 00:01:11,278
that when you have a website with lots

15
00:01:11,294 --> 00:01:14,946
and lots of images, then it becomes really impossible to have

16
00:01:14,968 --> 00:01:18,946
a graphic designer or yourself go through every single image

17
00:01:19,058 --> 00:01:22,102
and personalize it individually. Also,

18
00:01:22,156 --> 00:01:25,894
if you have user generated content on your website, you also

19
00:01:26,012 --> 00:01:30,262
can't really go through every single image because most likely it just goes directly

20
00:01:30,326 --> 00:01:33,820
from user upload to be delivered on your website.

21
00:01:34,670 --> 00:01:38,186
And if you have any of these scenarios where you either have a lot

22
00:01:38,208 --> 00:01:41,978
of images or you have user generated content appearing

23
00:01:41,994 --> 00:01:45,550
on your website, you probably have to up your game and do something

24
00:01:45,620 --> 00:01:49,578
else besides going through every single image manually

25
00:01:49,674 --> 00:01:53,230
in order to prepare it for delivery. And most likely

26
00:01:53,310 --> 00:01:56,594
you're using some sort of AI to handle those

27
00:01:56,632 --> 00:01:59,986
images for you. Now, AI can help you

28
00:02:00,008 --> 00:02:04,222
manage your images by analyzing the image and returning

29
00:02:04,286 --> 00:02:08,882
all the information for you that you need in order to make programmatic decisions

30
00:02:09,026 --> 00:02:13,218
based on the information that's given. So I'm

31
00:02:13,234 --> 00:02:16,966
going to go through a list of a few types of information that

32
00:02:16,988 --> 00:02:21,238
you can get which will really help you to programmatically handle

33
00:02:21,334 --> 00:02:24,940
and automatically handle all the images on your website.

34
00:02:25,310 --> 00:02:29,302
So first of all, moderation, especially if you're using user generated

35
00:02:29,366 --> 00:02:32,782
content, you need some way to automatically moderate each

36
00:02:32,836 --> 00:02:36,714
image and make sure that there's nothing unlawful or inappropriate

37
00:02:36,842 --> 00:02:38,510
going on your websites.

38
00:02:39,250 --> 00:02:43,222
So AI can do that for you. It can automatically moderate

39
00:02:43,306 --> 00:02:46,654
your images so that you can feel comfortable that everything that you're

40
00:02:46,702 --> 00:02:49,010
showing on your website is appropriate.

41
00:02:49,510 --> 00:02:53,202
Object detection. So AI can actually

42
00:02:53,256 --> 00:02:57,158
go through each image and figure out which objects are

43
00:02:57,324 --> 00:03:01,094
appearing in it. And as you can see in this little example here,

44
00:03:01,132 --> 00:03:04,520
in this image, we've got a bounding box around car,

45
00:03:06,010 --> 00:03:09,382
lady, jacket, bag, and each

46
00:03:09,436 --> 00:03:13,622
object actually has a bounding box. And you can actually get the coordinates

47
00:03:13,766 --> 00:03:17,542
so that you can know not only what images

48
00:03:17,606 --> 00:03:20,862
or what objects are in the image, but you can even know where those

49
00:03:20,916 --> 00:03:23,070
objects are located in the image.

50
00:03:23,970 --> 00:03:27,934
Auto tagging is probably a

51
00:03:27,972 --> 00:03:31,214
twin of object detection because how

52
00:03:31,252 --> 00:03:34,494
am I going to access the information later that I

53
00:03:34,532 --> 00:03:37,794
detected which objects are in the image, but how am I going to access that

54
00:03:37,832 --> 00:03:41,534
information later? So you can auto tag the image

55
00:03:41,662 --> 00:03:44,722
based on all of the objects that are there.

56
00:03:44,856 --> 00:03:48,934
And basically auto tagging will save that information as

57
00:03:48,972 --> 00:03:52,886
a tag on each of your images. So, for example, this image would be

58
00:03:52,908 --> 00:03:56,200
tagged with all of these objects that have been found in it.

59
00:03:56,570 --> 00:04:00,042
Face detection. It might be very important for you to know

60
00:04:00,096 --> 00:04:03,382
which images have faces and which images don't have faces.

61
00:04:03,446 --> 00:04:07,530
And you might handle images with faces and without faces differently.

62
00:04:08,830 --> 00:04:12,054
You can also get the information of how many faces

63
00:04:12,102 --> 00:04:15,646
are in the image. And you can also, again, get the same sort

64
00:04:15,668 --> 00:04:19,550
of coordinates and bounding box for each face that's detected.

65
00:04:20,050 --> 00:04:23,380
Now, I'm going to show you an app in a few minutes,

66
00:04:24,150 --> 00:04:28,110
something that kind of demonstrates how we can receive

67
00:04:28,190 --> 00:04:31,634
all this analysis on our image and then use

68
00:04:31,672 --> 00:04:35,474
that information in our program. And we're actually

69
00:04:35,512 --> 00:04:38,994
going to do something playful and we're going to detect which images

70
00:04:39,042 --> 00:04:42,246
have faces and put sunglasses on each of

71
00:04:42,268 --> 00:04:46,226
those faces that are found. Another very useful

72
00:04:46,258 --> 00:04:49,830
piece of information that you can get is color detection.

73
00:04:50,430 --> 00:04:54,246
You can automatically, with AI, receive information about what the predominant

74
00:04:54,278 --> 00:04:57,898
colors are in the picture and act accordingly. Maybe you want to

75
00:04:57,904 --> 00:05:01,690
group the pictures with similar colors together for aesthetics.

76
00:05:01,850 --> 00:05:05,486
Maybe you want to add a background of the

77
00:05:05,508 --> 00:05:09,278
predominant color or a border of that color. And finally,

78
00:05:09,364 --> 00:05:13,438
OCR AI can detect any

79
00:05:13,524 --> 00:05:17,298
text that's in the image and can give that information

80
00:05:17,384 --> 00:05:20,722
to you so that you can save it and programmatically make

81
00:05:20,776 --> 00:05:24,562
decisions based on that later. And of course, there's lots more,

82
00:05:24,616 --> 00:05:28,306
there's lots more analysis that AI can do on your

83
00:05:28,328 --> 00:05:31,080
images. These are just an example of a few.

84
00:05:31,850 --> 00:05:35,714
So now that we've discussed a little bit about how to use AI to handle

85
00:05:35,762 --> 00:05:39,634
our images better in our websites and apps, let's take a look at a sample

86
00:05:39,682 --> 00:05:42,218
app, a little demo, and we're going to look at the code for it a

87
00:05:42,224 --> 00:05:46,630
little bit later to see how to put those concepts into practice.

88
00:05:46,790 --> 00:05:50,458
So in this demo, we're going to request user generated content. We're going

89
00:05:50,464 --> 00:05:53,978
to perform analysis on the uploaded images, and then we're

90
00:05:53,994 --> 00:05:57,294
going to display them according to the analysis that was

91
00:05:57,332 --> 00:06:00,734
made on upload. So let's take a look.

92
00:06:00,772 --> 00:06:04,234
We're going to upload the images and the analysis

93
00:06:04,282 --> 00:06:07,538
is being done as we speak. And we're going to click

94
00:06:07,624 --> 00:06:10,802
show details to see the images displayed based

95
00:06:10,856 --> 00:06:15,150
on the analysis that was done. So, first of all, we've got two categories.

96
00:06:15,230 --> 00:06:18,546
We've got people and we've got shoes.

97
00:06:18,738 --> 00:06:22,342
So according to the object analysis that was done,

98
00:06:22,396 --> 00:06:26,086
the people are placed in the area for people,

99
00:06:26,188 --> 00:06:28,650
and the shoes are placed in the area for shoes.

100
00:06:29,630 --> 00:06:32,906
And if you can just take a look at the images in

101
00:06:32,928 --> 00:06:38,218
particular, you'll see that each image is

102
00:06:38,304 --> 00:06:41,706
transformed according to the analysis

103
00:06:41,738 --> 00:06:45,790
that was done on it. So all of the people are now

104
00:06:45,860 --> 00:06:49,470
wearing sunglasses. None of the shoes are wearing sunglasses.

105
00:06:50,050 --> 00:06:53,566
Also, we've chosen the predominant color in each image, and we've

106
00:06:53,598 --> 00:06:56,450
put a border of that color around the image.

107
00:06:57,350 --> 00:07:00,962
We have information underneath each images that

108
00:07:01,016 --> 00:07:03,860
describes what we found out about it.

109
00:07:04,710 --> 00:07:08,246
If there are any words, then it tells us what

110
00:07:08,268 --> 00:07:11,986
the word is that was detected, the number of faces

111
00:07:12,098 --> 00:07:15,890
and the coordinates of those faces, the orientation

112
00:07:15,970 --> 00:07:19,626
of the picture, and the predominant color. One other

113
00:07:19,648 --> 00:07:23,100
thing that I just want you to pay attention to is that

114
00:07:23,550 --> 00:07:27,034
if you see, we actually

115
00:07:27,152 --> 00:07:30,314
changed these images from being whatever shape they are,

116
00:07:30,352 --> 00:07:33,930
portrait or landscape, and we made all the pictures

117
00:07:34,010 --> 00:07:36,942
square. Now, there's a risk in doing that.

118
00:07:37,076 --> 00:07:40,494
When you change the bounding box, when you change

119
00:07:40,532 --> 00:07:43,614
the size and the aspect ratio of images,

120
00:07:43,742 --> 00:07:47,618
you run the risk of either chopping off part of the important

121
00:07:47,704 --> 00:07:51,358
part within the crop, or distorting the images.

122
00:07:51,534 --> 00:07:55,474
And here we've used AI to do something else.

123
00:07:55,672 --> 00:07:59,314
We put the picture into the shape that is requested,

124
00:07:59,362 --> 00:08:03,218
in this case, a square. And we've out painted the picture

125
00:08:03,314 --> 00:08:06,982
according to AI in order to make the picture fit

126
00:08:07,036 --> 00:08:10,730
into the requested area. So you see that

127
00:08:10,880 --> 00:08:13,900
in the original picture, we didn't have this content,

128
00:08:14,270 --> 00:08:17,606
and actually this picture within a picture

129
00:08:17,638 --> 00:08:21,098
was extended and AI was based

130
00:08:21,184 --> 00:08:24,560
to fill out the picture in the best way possible

131
00:08:25,010 --> 00:08:28,986
so that we don't have any distortions or false image

132
00:08:29,018 --> 00:08:33,134
sizes. And here we see that the same thing is with the

133
00:08:33,172 --> 00:08:36,962
shoes. The same information has been extracted with the shoes, the same

134
00:08:37,016 --> 00:08:40,514
formatting, the same color detection. And last

135
00:08:40,552 --> 00:08:44,286
but not least, please take note that the very relevant titles on each image

136
00:08:44,318 --> 00:08:47,894
are comprised by the auto tagging that we added in

137
00:08:47,932 --> 00:08:51,734
our image analysis on upload. So let's move on to

138
00:08:51,772 --> 00:08:55,314
talking about how. How do we use AI to handle our images

139
00:08:55,362 --> 00:08:58,898
better on our websites and apps? The solution that I

140
00:08:58,924 --> 00:09:03,002
want to talk to you about today is with cloudinary. And actually, cloudinary is

141
00:09:03,056 --> 00:09:06,700
what was powering the demo app that you just saw before.

142
00:09:07,630 --> 00:09:11,646
So what is cloudinary? Cloudinary provides you with a cloud to store all

143
00:09:11,668 --> 00:09:14,942
your images and videos and any other type of file that you want to store

144
00:09:14,996 --> 00:09:18,862
there. And cloudinary handles your images from

145
00:09:18,916 --> 00:09:21,594
end to end, meaning from uploading,

146
00:09:21,722 --> 00:09:25,150
analyzing, storing, managing, editing,

147
00:09:25,230 --> 00:09:29,026
all the way to delivering your images and videos for your

148
00:09:29,048 --> 00:09:33,026
websites and apps. So how do

149
00:09:33,048 --> 00:09:37,222
we access cloudinary? You want to make a free account,

150
00:09:37,356 --> 00:09:40,934
go to cloudinary.com and sign up for free and follow the

151
00:09:40,972 --> 00:09:45,062
instructions there. And when you actually

152
00:09:45,196 --> 00:09:48,762
get into your own account, you will see that you

153
00:09:48,816 --> 00:09:52,282
get this very nice UI. We're going to

154
00:09:52,336 --> 00:09:55,750
make sure that we're in the programmable media section

155
00:09:55,910 --> 00:10:00,090
and that will give us access to our cloud

156
00:10:00,160 --> 00:10:03,722
name, our API key, our API secret, and the environment

157
00:10:03,786 --> 00:10:07,038
variable, which provides the credentials that we need

158
00:10:07,124 --> 00:10:11,018
in order to get into it from our code that we're

159
00:10:11,034 --> 00:10:14,682
going to write. So please, if you want to follow along,

160
00:10:14,756 --> 00:10:18,402
you could copy the API environment variable for future use.

161
00:10:18,456 --> 00:10:20,740
We're going to get to that in just a few minutes.

162
00:10:22,390 --> 00:10:25,606
In addition, I want to show you the nice UI that you

163
00:10:25,628 --> 00:10:28,790
get along with cloudinary.

164
00:10:29,450 --> 00:10:33,126
And this actually allows you to see visually all the images that

165
00:10:33,148 --> 00:10:37,000
were uploaded and everything that you can do

166
00:10:37,950 --> 00:10:41,146
with your images and videos visually. You can

167
00:10:41,168 --> 00:10:43,580
also do programmatically, pretty much.

168
00:10:44,430 --> 00:10:47,882
So here are all your images. Let's double down

169
00:10:47,936 --> 00:10:52,014
and open a single image to manage it. And you can see

170
00:10:52,052 --> 00:10:55,262
that every single image has a public id, which is its

171
00:10:55,316 --> 00:10:59,006
unique identifier. And you can also open the

172
00:10:59,028 --> 00:11:02,650
image in a browser window using its delivery URL.

173
00:11:02,810 --> 00:11:06,514
And this is the delivery URL that you can use to

174
00:11:06,712 --> 00:11:10,174
deliver the image on your website or app anytime

175
00:11:10,222 --> 00:11:13,666
and any place. So the last step that I need

176
00:11:13,688 --> 00:11:17,970
to go through before I can actually go into the app code is

177
00:11:18,040 --> 00:11:22,210
to install cloudinary. So I'm going to install cloudinary here in my terminal.

178
00:11:22,370 --> 00:11:25,446
And also if you don't have it yet installed, if you don't, just use

179
00:11:25,468 --> 00:11:28,902
it in your own apps. For this particular app

180
00:11:28,956 --> 00:11:32,200
demonstration, we're going to use the env

181
00:11:32,510 --> 00:11:36,342
library in order to import my credentials from a nv

182
00:11:36,406 --> 00:11:40,058
file. So you can install that as well if you

183
00:11:40,064 --> 00:11:42,300
want to follow along with this particular app.

184
00:11:43,490 --> 00:11:47,550
So here we're going into my actual code, and in my app,

185
00:11:47,620 --> 00:11:50,958
I decided to name the main file demo py. Of course you can

186
00:11:50,964 --> 00:11:54,674
name it whatever you want. And the first thing that I do is I

187
00:11:54,712 --> 00:11:58,994
import the environment variable from the M

188
00:11:59,192 --> 00:12:02,366
file using the MV library.

189
00:12:02,478 --> 00:12:06,182
And if we take a look at the M file, you see that that's my

190
00:12:06,236 --> 00:12:09,558
environment variable that I copied from the dashboard a

191
00:12:09,564 --> 00:12:13,366
few minutes ago. And in my demo

192
00:12:13,468 --> 00:12:16,918
py file, the first thing that I need to do is to

193
00:12:17,004 --> 00:12:21,114
create an upload preset. Now, this upload preset should

194
00:12:21,152 --> 00:12:25,386
only be created once. And so if

195
00:12:25,408 --> 00:12:29,354
you're actually running this app and doing it exactly as

196
00:12:29,392 --> 00:12:32,926
it is here, you want to comment it out before you run the app a

197
00:12:32,948 --> 00:12:36,350
second time. Now of course you might want to run this separately in just

198
00:12:36,420 --> 00:12:39,838
another script if

199
00:12:40,004 --> 00:12:42,990
you're going to do it in your apps on a regular basis.

200
00:12:44,290 --> 00:12:47,010
Okay, so let's take a look at the upload preset.

201
00:12:48,950 --> 00:12:51,234
So the first thing that I'm going to do is I'm going to call the

202
00:12:51,272 --> 00:12:55,290
upload preset cloudinary API create upload preset,

203
00:12:55,470 --> 00:12:58,630
and in order to use this, I have to import cloudinary.

204
00:12:59,050 --> 00:13:03,106
Other libraries that I have to import from cloudinary are the uploader

205
00:13:03,138 --> 00:13:05,110
and the API libraries.

206
00:13:06,410 --> 00:13:10,546
And within the upload preset, I'm going to pass a bunch of parameters.

207
00:13:10,658 --> 00:13:13,100
First of all, the name. I'm going to name it.

208
00:13:14,190 --> 00:13:16,602
I'm going to give it a certain name. Of course you can name it whatever

209
00:13:16,656 --> 00:13:20,498
you want. I'm going to make it an unsigned preset.

210
00:13:20,614 --> 00:13:24,442
This enables me to upload all of the images

211
00:13:24,586 --> 00:13:29,566
from the client side without any signatures and

212
00:13:29,748 --> 00:13:33,614
without having to use my API key and secret use

213
00:13:33,652 --> 00:13:37,458
file. Name equals true. That means that whatever the image name

214
00:13:37,544 --> 00:13:41,810
is that I upload, that's also going to be its public id name within cloudinary.

215
00:13:42,470 --> 00:13:46,182
And I'm specifying the folder that it's going to be uploaded to within

216
00:13:46,236 --> 00:13:49,558
the UI, and I'm giving it a certain tag so that I

217
00:13:49,564 --> 00:13:53,350
know that each image that's uploaded with this preset has come from

218
00:13:53,420 --> 00:13:55,720
this computer vision demo,

219
00:13:56,490 --> 00:14:00,422
and the remainder of the parameters that I'm passing are actually activating

220
00:14:00,486 --> 00:14:03,946
the analysis. Color equals true means that I'm going

221
00:14:03,968 --> 00:14:07,594
to track the predominant color of the images that I upload with

222
00:14:07,632 --> 00:14:11,226
this preset. Faces equals true means that I'm

223
00:14:11,258 --> 00:14:15,406
going to detect the faces, I'm going to count them, I'm going to return the

224
00:14:15,508 --> 00:14:17,360
coordinates for each face.

225
00:14:18,370 --> 00:14:21,786
Customization equals Google tagging means that I'm

226
00:14:21,818 --> 00:14:25,438
going to detect objects in the images that

227
00:14:25,444 --> 00:14:29,218
are uploaded, with auto tagging being 0.7.

228
00:14:29,304 --> 00:14:33,566
That means that everything that was detected, any object that was detected

229
00:14:33,678 --> 00:14:37,106
with a confidence of 70% is going to be based

230
00:14:37,138 --> 00:14:41,282
as a tag on that image. Ocr this parameter

231
00:14:41,346 --> 00:14:43,830
activates my text detection,

232
00:14:44,650 --> 00:14:48,890
my Alphabet detection, my word detection and

233
00:14:48,960 --> 00:14:52,550
moderation means that I'm activating AWS

234
00:14:52,630 --> 00:14:56,186
recognition that add on to actually

235
00:14:56,368 --> 00:14:59,882
monitor my pictures and make sure that I'm not

236
00:14:59,936 --> 00:15:03,760
including any inappropriate content or anything illegal there.

237
00:15:04,210 --> 00:15:07,706
So let's take a look at how I apply the upload preset to the images

238
00:15:07,738 --> 00:15:11,402
that I upload. So let's go to the index HTML

239
00:15:11,466 --> 00:15:15,566
file and take a look. I'm going to create an upload

240
00:15:15,678 --> 00:15:19,300
widget and let me remind you what that upload widget was.

241
00:15:19,910 --> 00:15:24,658
In my demo, I clicked upload files and there

242
00:15:24,744 --> 00:15:28,146
appeared this nice little UI that allowed

243
00:15:28,178 --> 00:15:31,606
me to browse my local files and upload the images of

244
00:15:31,628 --> 00:15:35,590
my choice. So the button with id

245
00:15:35,660 --> 00:15:38,986
upload widget calls the Javascript in

246
00:15:39,008 --> 00:15:42,006
order to instantiate that upload widget.

247
00:15:42,198 --> 00:15:46,058
Now I need to add this script from

248
00:15:46,144 --> 00:15:50,522
Javascript and then I

249
00:15:50,576 --> 00:15:54,174
need to instantiate my upload widget with a cloud name and

250
00:15:54,212 --> 00:15:57,150
the name of the upload preset that I had just created.

251
00:15:58,130 --> 00:16:01,646
On success I'm going to display the

252
00:16:01,668 --> 00:16:05,746
images that were uploaded and then

253
00:16:05,848 --> 00:16:09,774
I'm going to follow through and display

254
00:16:09,902 --> 00:16:13,940
the next button that will bring me to

255
00:16:14,310 --> 00:16:17,886
my output. So when I click the show details

256
00:16:17,918 --> 00:16:21,782
button I'm going to submit the form and that's going to route me to

257
00:16:21,836 --> 00:16:24,950
the output function in my demo py file.

258
00:16:25,690 --> 00:16:28,680
Let's take a look at what happens in the output function.

259
00:16:29,290 --> 00:16:32,486
So first of all, I'm going to get a list of all the assets,

260
00:16:32,598 --> 00:16:35,894
all the images that I uploaded using the upload

261
00:16:35,942 --> 00:16:38,620
preset and labeled as computer vision demo.

262
00:16:39,230 --> 00:16:42,862
Next, I'm going to loop through every single one of those assets and get

263
00:16:42,916 --> 00:16:45,994
all of the details that I gathered using the analysis

264
00:16:46,042 --> 00:16:50,202
that I set in the upload preset. Cloudinary API resources

265
00:16:50,266 --> 00:16:53,886
actually returns a JSON object which contains all the information that

266
00:16:53,908 --> 00:16:58,594
we gathered on analysis, and it also includes the

267
00:16:58,792 --> 00:17:02,546
images delivery URL. And here you can see an example of

268
00:17:02,568 --> 00:17:05,858
what that might look like. Now let's take a look at the parameters that we

269
00:17:05,864 --> 00:17:09,346
use in that method. I'm going to call each image

270
00:17:09,378 --> 00:17:12,870
by its public id. That's how I'm going to specify the image.

271
00:17:13,690 --> 00:17:16,994
And faces equals true means that I'm going to gather

272
00:17:17,042 --> 00:17:20,634
all the information that I got on the faces. Color equals true means

273
00:17:20,672 --> 00:17:23,820
I'm gathering all the information that I got on the predominant color.

274
00:17:24,670 --> 00:17:28,394
First thing I'm going to do is I'm only going to display the

275
00:17:28,432 --> 00:17:32,394
image if the moderation status is approved,

276
00:17:32,522 --> 00:17:36,586
meaning that any image that wasn't deemed to be appropriate or wasn't

277
00:17:36,618 --> 00:17:40,320
deemed to be legal is going to not appear on my website.

278
00:17:42,210 --> 00:17:45,826
The next thing that I'm going to do is I'm going to save the

279
00:17:45,848 --> 00:17:49,570
delivery URL of the particular images

280
00:17:51,270 --> 00:17:54,942
in the variable URL. Now, I didn't discuss this earlier,

281
00:17:55,006 --> 00:17:58,354
but you should know that one of the hallmark collateral

282
00:17:58,402 --> 00:18:02,418
functionalities is that I can actually do edits and transformations

283
00:18:02,594 --> 00:18:06,594
on the images by adding details, by adding parameters

284
00:18:06,722 --> 00:18:10,966
to its delivery URL. Meaning if I want to crop

285
00:18:11,078 --> 00:18:14,134
or add an effect or add an overlay,

286
00:18:14,182 --> 00:18:18,326
all I have to do is programmatically change its delivery URL

287
00:18:18,438 --> 00:18:22,790
and voila, you'll see it affecting how the image actually is displayed.

288
00:18:22,870 --> 00:18:26,494
So we're going to look at that in a second. The next

289
00:18:26,532 --> 00:18:29,274
thing that I'm going to do is I'm going to build the title.

290
00:18:29,402 --> 00:18:33,118
Now, how am I going to build the title? If you remember,

291
00:18:33,284 --> 00:18:36,898
I used object detection in my upload parameter and

292
00:18:36,984 --> 00:18:40,338
I auto tagged each image based on the objects that

293
00:18:40,344 --> 00:18:43,534
were detected. So I'm going to retrieve those tags

294
00:18:43,582 --> 00:18:46,978
and that's how I'm going to build what I display in my title

295
00:18:46,994 --> 00:18:49,926
for each image. Now,

296
00:18:49,948 --> 00:18:53,510
the message on the bottom, all the information that I displayed

297
00:18:54,010 --> 00:18:57,926
underneath each picture, I'm also going to build that. So first of

298
00:18:57,948 --> 00:19:01,146
all, the object detection, if it detected some sort

299
00:19:01,168 --> 00:19:04,586
of phrase, it's going to display that in the message. If there

300
00:19:04,608 --> 00:19:07,898
was no message, if there's no text detected, then it's going

301
00:19:07,904 --> 00:19:10,890
to tell me that also faces,

302
00:19:11,870 --> 00:19:15,230
if I don't detect any faces, I'm going to display the message.

303
00:19:15,300 --> 00:19:18,574
There aren't any faces, but if I do

304
00:19:18,612 --> 00:19:21,914
detect one or more faces, then I'm going to display

305
00:19:21,962 --> 00:19:25,534
that and I'm going to also print out the coordinates of the detected

306
00:19:25,582 --> 00:19:29,970
faces. I'm going to also be able to output

307
00:19:31,190 --> 00:19:35,810
whether the image is landscape or portrait

308
00:19:35,970 --> 00:19:39,782
orientation by dividing the width and height of

309
00:19:39,836 --> 00:19:42,710
the image as detected by the analysis.

310
00:19:43,450 --> 00:19:46,600
I'm going to take the predominant colors and print that out.

311
00:19:47,130 --> 00:19:50,634
And finally, and most excitingly, I'm going to take the

312
00:19:50,672 --> 00:19:54,426
deliver URL and I'm going to create a transformation out of that.

313
00:19:54,608 --> 00:19:58,154
Okay, in the deliver URL, I'm going to

314
00:19:58,192 --> 00:20:02,038
say that I want to have a width of 600, a height

315
00:20:02,054 --> 00:20:05,454
of 600, making it square. I'm going to

316
00:20:05,492 --> 00:20:08,250
set it to paint out the background.

317
00:20:08,410 --> 00:20:11,918
Remember what we said, that I don't want to squash my image, I don't want

318
00:20:11,924 --> 00:20:15,586
to distort it, I don't want to crop off any parts of it. What I

319
00:20:15,608 --> 00:20:19,460
want to do is I want to fill in the parts that

320
00:20:19,910 --> 00:20:23,394
are kind of left blank when

321
00:20:23,432 --> 00:20:27,574
I shrunk it to fit into a square. And I'm going to fill that

322
00:20:27,612 --> 00:20:31,218
in with AI so that actually the picture is automatically

323
00:20:31,314 --> 00:20:35,240
and beautifully painted out to fit the bounding box of a square.

324
00:20:36,330 --> 00:20:40,054
This is where I overlay the sunglasses onto each face and

325
00:20:40,092 --> 00:20:43,338
if I do say so myself, it actually did quite a

326
00:20:43,344 --> 00:20:47,274
good job in placing those sunglasses right on top of the eyes of

327
00:20:47,312 --> 00:20:51,138
every single image that was of every single face that was detected

328
00:20:51,174 --> 00:20:54,398
in the image. I'm going to create a

329
00:20:54,404 --> 00:20:57,934
border out of the predominant color and the

330
00:20:57,972 --> 00:21:01,502
last thing that I'm going to do within the transformation is

331
00:21:01,556 --> 00:21:05,074
also something that is a cloudinary feature which is

332
00:21:05,112 --> 00:21:08,702
optimizing each image. Quality equals

333
00:21:08,766 --> 00:21:12,014
auto and fetch format equals auto.

334
00:21:12,062 --> 00:21:15,506
Actually optimize your image so that the loading

335
00:21:15,538 --> 00:21:18,774
time for your website is reduced and your web

336
00:21:18,812 --> 00:21:22,360
performance is increased by a ton.

337
00:21:22,890 --> 00:21:26,562
So what quality equals auto does is it compresses

338
00:21:26,626 --> 00:21:29,994
all of your images automatically so that you've got the

339
00:21:30,032 --> 00:21:33,402
best compression versus keeping your

340
00:21:33,456 --> 00:21:36,986
images as clear and as high quality visually as

341
00:21:37,008 --> 00:21:40,430
possible. What fetch format does

342
00:21:40,500 --> 00:21:44,554
is it delivers the image in the optimal format

343
00:21:44,602 --> 00:21:48,880
for the requesting browser so that each time you automatically get

344
00:21:50,050 --> 00:21:54,254
the image compressed and delivered

345
00:21:54,302 --> 00:21:57,886
in the best format and compression possible for that image

346
00:21:57,918 --> 00:22:01,538
for the requesting browser. Finally,

347
00:22:01,624 --> 00:22:05,726
we finished with our transformations. We finished appending our messages

348
00:22:05,918 --> 00:22:09,718
and the last thing that we want to do is we want to sort through

349
00:22:09,884 --> 00:22:14,114
based on the tags and the auto tagging that we saved

350
00:22:14,162 --> 00:22:17,910
for each image. And we want to make sure that we take the people

351
00:22:17,980 --> 00:22:21,238
and we put them in the people category and the shoes and we put

352
00:22:21,244 --> 00:22:24,086
them in the shoe category. And of course you can go on and on and

353
00:22:24,108 --> 00:22:28,022
on and you can build this out to whatever your needs are,

354
00:22:28,076 --> 00:22:31,994
whether you're displaying accessories or clothes

355
00:22:32,042 --> 00:22:34,874
or shirts or dresses or menswear or women's wear,

356
00:22:34,922 --> 00:22:38,798
children's wear, whatever you want. You can definitely

357
00:22:38,884 --> 00:22:42,826
use the AI and the auto tagging to display the

358
00:22:42,868 --> 00:22:46,274
images in the proper location. And of course,

359
00:22:46,312 --> 00:22:50,194
the outcome of this function is to render output HTML where

360
00:22:50,232 --> 00:22:54,094
all our images are delivered, using the analysis

361
00:22:54,142 --> 00:22:57,334
and applying it to them appropriately as we instructed on our

362
00:22:57,372 --> 00:23:00,994
program. So hopefully

363
00:23:01,122 --> 00:23:04,898
you've gained a little bit of insight and a little bit of inspiration

364
00:23:04,994 --> 00:23:08,194
from this app. You've gotten a taste of what AI

365
00:23:08,242 --> 00:23:12,042
can do for you and how it can help you handle your images and

366
00:23:12,096 --> 00:23:15,686
videos in your websites or apps when you're using a large volume

367
00:23:15,718 --> 00:23:17,980
of images or user generated content.

368
00:23:20,430 --> 00:23:24,314
And feel free to take any of these features

369
00:23:24,362 --> 00:23:27,470
that we've shown here on our little demo

370
00:23:27,620 --> 00:23:31,118
and use them as appropriate for your use case and your website

371
00:23:31,204 --> 00:23:34,526
or app. This code is available on GitHub and I've

372
00:23:34,558 --> 00:23:38,206
provided a link in the corresponding presentation. Now I've

373
00:23:38,238 --> 00:23:41,474
also provided a few links that you can go ahead and

374
00:23:41,512 --> 00:23:44,926
learn some more in our documentation,

375
00:23:45,118 --> 00:23:49,750
including seeing AI in action transformations,

376
00:23:50,170 --> 00:23:53,526
you've got a listing, a full listing of all the transformations that are

377
00:23:53,548 --> 00:23:56,806
available, all the parameters that you can add and all

378
00:23:56,828 --> 00:24:00,710
the effects that you can add, all of the optimizations

379
00:24:00,790 --> 00:24:04,602
and transformations and

380
00:24:04,736 --> 00:24:08,762
cropping methods that you can utilize just

381
00:24:08,816 --> 00:24:12,330
by adding parameters inside your delivery URL.

382
00:24:12,490 --> 00:24:16,014
Of course, the optimization make sure that compression for your

383
00:24:16,052 --> 00:24:19,706
images are optimal, meaning that they are the smallest

384
00:24:19,738 --> 00:24:23,426
size they could be, while not losing any visual quality

385
00:24:23,608 --> 00:24:27,330
that you're delivering your images in the

386
00:24:27,480 --> 00:24:30,770
optimal format for the requesting browser.

387
00:24:31,110 --> 00:24:34,450
All of the options that you can set on your upload presets.

388
00:24:35,030 --> 00:24:37,480
We've seen just a few of them in this app.

389
00:24:38,330 --> 00:24:41,878
Images analysis, all the features, all the ways in

390
00:24:41,964 --> 00:24:45,506
which you can ask AI to analyze your images,

391
00:24:45,698 --> 00:24:49,560
and of course the upload widget, which is a cute little UI for

392
00:24:49,930 --> 00:24:53,750
user generated content on your e commerce websites.

393
00:24:54,170 --> 00:24:57,366
So I hope you enjoyed this presentation, and I hope you

394
00:24:57,388 --> 00:25:01,230
enjoy the rest of the talks in content reference 42.

395
00:25:01,380 --> 00:25:05,770
And please, I welcome you and I encourage you to experiment

396
00:25:05,930 --> 00:25:09,706
with your new free account in cloudinary and let us know how you've

397
00:25:09,738 --> 00:25:12,220
used cloudinary in our community and Discord Channel.

