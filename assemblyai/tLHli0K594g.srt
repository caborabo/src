1
00:00:27,160 --> 00:00:30,360
Hello and welcome to unlocking LLM potential

2
00:00:30,542 --> 00:00:34,660
a journey with APIs. My name is Ricardo Covo

3
00:00:34,772 --> 00:00:38,540
and I'm a principal consultant on the app dev and

4
00:00:38,572 --> 00:00:41,344
modernization practice at Centralogic.

5
00:00:42,404 --> 00:00:45,740
My LinkedIn is my main forum of social

6
00:00:45,812 --> 00:00:49,204
media, so please feel free to reach

7
00:00:49,244 --> 00:00:50,744
out if you want to connect.

8
00:00:52,604 --> 00:00:56,300
Today we're gonna be following this agenda.

9
00:00:56,372 --> 00:00:59,820
I'm gonna do first an environment overview. I'm gonna show

10
00:00:59,852 --> 00:01:03,732
you what I'm going to be using during the presentation.

11
00:01:03,788 --> 00:01:07,492
There's going to be a lot of demos, we're going to come and

12
00:01:07,628 --> 00:01:10,904
cover the basics just so we have

13
00:01:11,724 --> 00:01:14,384
common terminology and understanding.

14
00:01:15,124 --> 00:01:18,684
We're going to follow that with a demo, then we're going to go

15
00:01:18,724 --> 00:01:22,604
into the meat of it, which is chat completion with tools.

16
00:01:22,644 --> 00:01:26,876
So tools, APIs, functions are

17
00:01:26,940 --> 00:01:30,644
tools that you can augment the chat with.

18
00:01:31,304 --> 00:01:34,880
And then there is a new feature, at least on the

19
00:01:34,912 --> 00:01:37,920
Azure OpenAI, which is the assistance,

20
00:01:38,032 --> 00:01:41,984
and I'll cover a little bit, I'll do a small overview,

21
00:01:42,064 --> 00:01:45,644
but a lot of the concepts will translate into that.

22
00:01:47,864 --> 00:01:51,928
So environment, we're going to be using OpenAI

23
00:01:52,016 --> 00:01:54,724
as our AI service.

24
00:01:55,524 --> 00:01:58,932
I have some sample web APIs that I'm going

25
00:01:58,948 --> 00:02:02,476
to use and then there is a

26
00:02:02,580 --> 00:02:06,144
visual studio project that we're going to be working with

27
00:02:06,644 --> 00:02:10,744
to develop this project.

28
00:02:11,604 --> 00:02:14,504
So let's check that out.

29
00:02:16,244 --> 00:02:17,824
So from,

30
00:02:20,464 --> 00:02:24,040
from the Azure perspective. So I

31
00:02:24,072 --> 00:02:27,684
am using an OpenAI service.

32
00:02:29,104 --> 00:02:31,084
Once you go into it,

33
00:02:32,824 --> 00:02:36,504
it's gonna ask you to go to the

34
00:02:36,624 --> 00:02:40,368
Azure AI studio to actually do your

35
00:02:40,416 --> 00:02:44,216
work. So I'm gonna click on that. A brand

36
00:02:44,280 --> 00:02:47,988
new browser is going to open.

37
00:02:48,116 --> 00:02:52,068
It's kind of like a different tool. So we're going

38
00:02:52,076 --> 00:02:54,424
to give it a little second for it to load.

39
00:02:55,244 --> 00:02:58,892
And one of the things that you can start looking

40
00:02:58,948 --> 00:03:03,156
in here is if I go into resource

41
00:03:03,220 --> 00:03:06,504
management keys and endpoints,

42
00:03:08,044 --> 00:03:11,084
this is pretty much the service, the endpoint

43
00:03:11,124 --> 00:03:14,754
of the service and the keys that I'm going to have

44
00:03:14,794 --> 00:03:18,546
to feed my client on the code to actually

45
00:03:18,610 --> 00:03:23,122
have access to this functionality on OpenAI

46
00:03:23,218 --> 00:03:26,890
Studio. Here's where you have your

47
00:03:26,922 --> 00:03:30,794
shad, your completions, the assistance that we're going to, so the different

48
00:03:30,874 --> 00:03:33,734
services that are available from OpenAI,

49
00:03:34,034 --> 00:03:36,894
but also important is the models,

50
00:03:37,274 --> 00:03:41,694
so you can deploy different type of models. So I have

51
00:03:42,194 --> 00:03:46,226
deployed only a GPT 35

52
00:03:46,290 --> 00:03:50,506
turbo is more than enough for the

53
00:03:50,530 --> 00:03:54,314
demo that we're going to be doing. So this name

54
00:03:54,354 --> 00:03:58,374
is important because from the code I will also reference.

55
00:03:59,114 --> 00:04:03,014
So that's what you need to know here from the Azure part,

56
00:04:04,994 --> 00:04:08,410
from the web API, the sample web API

57
00:04:08,442 --> 00:04:12,010
that I created is in a container app. And we're

58
00:04:12,042 --> 00:04:17,802
going to simulate creating timesheets for

59
00:04:17,978 --> 00:04:21,314
a project or projects. So I've

60
00:04:21,354 --> 00:04:24,562
called the timesheets API and here in postman you

61
00:04:24,578 --> 00:04:28,534
can see how I can get the different projects,

62
00:04:30,154 --> 00:04:33,794
or I could add hours to a project. So getting

63
00:04:33,834 --> 00:04:37,734
the project is a simple get. It's taking a little bit

64
00:04:37,774 --> 00:04:44,254
because it's probably a cold in

65
00:04:44,294 --> 00:04:48,190
the container app. I have it set up that it can go up to zero

66
00:04:48,262 --> 00:04:51,902
instances. So it takes a little bit to come up, but you

67
00:04:51,918 --> 00:04:55,350
can see here that it returned an

68
00:04:55,382 --> 00:04:59,062
array of projects in adding hours to

69
00:04:59,078 --> 00:05:02,350
a project involved doing a

70
00:05:02,382 --> 00:05:06,834
post with a certain payload

71
00:05:06,994 --> 00:05:10,934
and a certain specific URL.

72
00:05:12,114 --> 00:05:15,774
So this is where we're going to eventually going to be using.

73
00:05:17,154 --> 00:05:20,402
And those are the three things that you, the two things that

74
00:05:20,418 --> 00:05:24,674
you need to know. Like in Azure,

75
00:05:24,834 --> 00:05:28,774
it's where you have your endpoint, your keys and your deployment.

76
00:05:29,354 --> 00:05:32,794
And from postman I've been,

77
00:05:32,874 --> 00:05:35,254
this is how I can test the APIs.

78
00:05:36,954 --> 00:05:40,654
Let's go now and show you

79
00:05:41,154 --> 00:05:45,010
visual studio. So I have an application

80
00:05:45,082 --> 00:05:48,594
running that it looks like this. It's like the

81
00:05:48,634 --> 00:05:53,490
simplest shot you're ever seeing. And then we're

82
00:05:53,522 --> 00:05:57,678
gonna be playing with some code here. It's a blazor application

83
00:05:57,726 --> 00:06:01,214
that is already running, but that's what we're going to be using for

84
00:06:01,254 --> 00:06:05,062
the demo. All right, so let's continue

85
00:06:05,198 --> 00:06:08,486
here. So some

86
00:06:08,550 --> 00:06:12,406
basics. So the service is whatever service is providing

87
00:06:12,470 --> 00:06:16,174
dialm, you could be, it could have been deployed

88
00:06:16,214 --> 00:06:18,434
locally or it could be,

89
00:06:19,974 --> 00:06:23,834
in this case I'm going to be using Azure OpenAI, but it could go

90
00:06:24,204 --> 00:06:26,984
on the chat on OpenAI itself.

91
00:06:28,164 --> 00:06:30,184
And then when you create,

92
00:06:31,284 --> 00:06:35,252
to use that service, you kind of create a client on your code

93
00:06:35,308 --> 00:06:39,116
and initiate it with some options. The chat is

94
00:06:39,140 --> 00:06:41,424
kind of the conversation that is happening.

95
00:06:42,764 --> 00:06:46,524
Roles are who is participating on that

96
00:06:46,564 --> 00:06:50,076
conversation. It could be the system is kind of like

97
00:06:50,100 --> 00:06:54,308
the assistant setup and then whoever

98
00:06:54,436 --> 00:06:58,084
is. So the end user is a user, the assistant is that

99
00:06:58,124 --> 00:07:01,116
reply coming from the service.

100
00:07:01,300 --> 00:07:04,996
And then tool and functions is another type

101
00:07:05,020 --> 00:07:08,716
of role that you can have and we

102
00:07:08,740 --> 00:07:12,372
will get into. So when you

103
00:07:12,508 --> 00:07:16,332
are having a conversation with the chat, you send a request

104
00:07:16,428 --> 00:07:19,974
message that includes the role, the content

105
00:07:20,794 --> 00:07:24,650
in the history, and then the service is

106
00:07:24,682 --> 00:07:28,574
going to send you back a response message

107
00:07:29,434 --> 00:07:32,898
and it has the response content and some

108
00:07:32,946 --> 00:07:36,338
other indicators, for example, whether you need to

109
00:07:36,426 --> 00:07:37,574
call functions.

110
00:07:41,714 --> 00:07:45,298
So this is how typically a chat conversation will

111
00:07:45,466 --> 00:07:48,988
start. A user will say something to the

112
00:07:49,036 --> 00:07:53,316
application and the first thing this application

113
00:07:53,380 --> 00:07:56,788
is going to say is, I'm going to set up

114
00:07:56,836 --> 00:08:00,844
my system and the system is

115
00:08:00,964 --> 00:08:05,224
context that you're giving to this chat conversation.

116
00:08:05,644 --> 00:08:09,260
And in this case you're setting up the system to be a helpful

117
00:08:09,372 --> 00:08:13,492
assistant. And then what is the actual message

118
00:08:13,548 --> 00:08:16,504
that the user is sending is hi there.

119
00:08:17,524 --> 00:08:21,164
Now the service is going to respond

120
00:08:21,244 --> 00:08:25,812
to you with some answer.

121
00:08:25,908 --> 00:08:29,484
In this case. How can I help? Now on

122
00:08:29,524 --> 00:08:33,100
your next step, you want to say, hey, I want ideas

123
00:08:33,172 --> 00:08:36,904
for a talk on Genai.

124
00:08:37,724 --> 00:08:41,716
Well, you have to send all the conversation back

125
00:08:41,820 --> 00:08:45,158
into the service because remember the service,

126
00:08:45,246 --> 00:08:47,634
if you don't provide them a context,

127
00:08:48,134 --> 00:08:51,830
then they're not really, they're not

128
00:08:51,862 --> 00:08:55,342
really smart. They respond based on a context

129
00:08:55,438 --> 00:08:58,950
that you're providing. So you have to send all the

130
00:08:58,982 --> 00:09:02,510
conversation if you want the conversation to evolve

131
00:09:02,582 --> 00:09:03,994
in a natural way.

132
00:09:06,254 --> 00:09:09,742
All right, so let's look at

133
00:09:09,758 --> 00:09:14,058
a demo. And the demo is going to look like this.

134
00:09:14,186 --> 00:09:17,418
So the code that we're going to look actually generates

135
00:09:17,466 --> 00:09:21,138
to this. So there is a space

136
00:09:21,186 --> 00:09:24,974
for the conversation, an input and a submit and a reset.

137
00:09:25,754 --> 00:09:27,454
Let's look at the code.

138
00:09:29,514 --> 00:09:32,850
I'm going to collapse some of these things. You can see

139
00:09:32,922 --> 00:09:36,074
here. The conversation is going to loop through messages and

140
00:09:36,114 --> 00:09:40,070
display them. And then down

141
00:09:40,142 --> 00:09:43,670
here is where you have your prompt and you either send

142
00:09:43,702 --> 00:09:47,558
a prompt or reset the chat right away.

143
00:09:47,606 --> 00:09:52,422
I can tell you that reset the chat is basically eliminating

144
00:09:52,518 --> 00:09:56,366
all the history of the messages that you have. And that basically

145
00:09:56,430 --> 00:09:58,714
means a new conversation.

146
00:10:00,734 --> 00:10:04,474
But let's see what happens when the page is

147
00:10:04,514 --> 00:10:07,730
started. I'm going to read the endpoint and

148
00:10:07,762 --> 00:10:11,290
the key from the configuration file and I'm

149
00:10:11,322 --> 00:10:15,378
going to initiate my client. Now. When I

150
00:10:15,426 --> 00:10:16,814
send the prompt,

151
00:10:18,714 --> 00:10:22,494
I'm going to do some state management here.

152
00:10:22,874 --> 00:10:26,174
I'm going to actually display the message.

153
00:10:27,434 --> 00:10:31,076
But here is where I say, hey,

154
00:10:31,140 --> 00:10:34,824
from my API client,

155
00:10:35,684 --> 00:10:39,264
get a chat completions async.

156
00:10:39,844 --> 00:10:44,860
Now chat completions is a very specific

157
00:10:44,932 --> 00:10:49,188
terminology. If I go back to here,

158
00:10:49,316 --> 00:10:52,876
you can say here completion, right? So that's kind of

159
00:10:52,900 --> 00:10:55,144
what you're initiating over there.

160
00:10:57,544 --> 00:11:01,564
So I'm going to go back and see that.

161
00:11:01,904 --> 00:11:06,244
To initiate that, I'm building a track completion option.

162
00:11:06,784 --> 00:11:10,604
This is important because this is where you actually set up

163
00:11:12,064 --> 00:11:15,360
your assistant for your conversation. You're going to say the

164
00:11:15,392 --> 00:11:18,440
deployment name is GPT 35.

165
00:11:18,632 --> 00:11:22,328
Remember in azure AI studio I

166
00:11:22,376 --> 00:11:25,884
had that deployment name and I'm setting

167
00:11:25,924 --> 00:11:29,324
the system message. And here I went

168
00:11:29,364 --> 00:11:33,604
a little funny with it and say, you are a helpful assistant

169
00:11:33,764 --> 00:11:35,664
that is obsessed with cookies.

170
00:11:37,404 --> 00:11:41,076
It's very simple setup, but I'm also here

171
00:11:41,140 --> 00:11:44,844
if there is any messages on that conversation, I'm going to

172
00:11:44,924 --> 00:11:48,756
actually set them as messages on

173
00:11:48,900 --> 00:11:53,124
the options. So I am sending that context

174
00:11:53,204 --> 00:11:56,940
back. So that is

175
00:11:56,972 --> 00:12:00,860
basically the base use case. So I can say hello

176
00:12:00,932 --> 00:12:07,220
there right

177
00:12:07,252 --> 00:12:10,064
now. I. Oh, there he goes.

178
00:12:10,524 --> 00:12:13,796
How can I assist you today? Are you in need some cookie related?

179
00:12:13,860 --> 00:12:17,428
So it's showing the cookie thing right on my face, even though I had

180
00:12:17,476 --> 00:12:20,982
no context for it. Why are you

181
00:12:21,038 --> 00:12:22,794
talking about cookies?

182
00:12:24,854 --> 00:12:28,574
Submit that. And it's just

183
00:12:28,614 --> 00:12:33,398
gonna, it's just gonna respond

184
00:12:33,446 --> 00:12:37,434
in some, in some ways. I'm just gonna reset that. It's gonna clear it.

185
00:12:37,854 --> 00:12:41,314
Clear the chat.

186
00:12:42,574 --> 00:12:46,454
All right, let's go back to the, to the presentation.

187
00:12:47,154 --> 00:12:50,026
So we introduce the concept of tools,

188
00:12:50,090 --> 00:12:53,514
and it basically gives the chat the assistance that you're

189
00:12:53,554 --> 00:12:56,634
creating, access to tool like coding,

190
00:12:56,674 --> 00:13:00,674
interpreter or knowledge retrieval. But it also

191
00:13:00,794 --> 00:13:04,178
is, and more importantly for the context of this

192
00:13:04,226 --> 00:13:08,058
presentation, is allowing me to build tools

193
00:13:08,106 --> 00:13:14,538
using my function calling in

194
00:13:14,586 --> 00:13:18,434
here. What would happen is I'm

195
00:13:18,474 --> 00:13:22,134
still going to send a system configuration,

196
00:13:23,394 --> 00:13:25,770
the message from the user,

197
00:13:25,842 --> 00:13:29,650
but in addition, I'm going to send it some tools

198
00:13:29,802 --> 00:13:33,134
and those tools are going to define the functions

199
00:13:33,554 --> 00:13:36,614
that I am providing to the assistant.

200
00:13:37,014 --> 00:13:40,214
The assistant is smart to know that you need to call some

201
00:13:40,254 --> 00:13:44,342
functions. So it's going to say, hey, you need to call functions

202
00:13:44,438 --> 00:13:47,754
and it's going to give you an id that you can use for,

203
00:13:48,654 --> 00:13:53,206
that you will use for reference. Now you

204
00:13:53,230 --> 00:13:57,354
know that you need to call functions. So you do call the functions.

205
00:13:57,654 --> 00:14:01,278
So the service is not going to call your APIs or your functions

206
00:14:01,406 --> 00:14:04,678
on its own. It's going to tell you to call it,

207
00:14:04,726 --> 00:14:08,294
and then you perform the actual function calling and

208
00:14:08,334 --> 00:14:11,886
give them a response. So when

209
00:14:11,910 --> 00:14:13,554
you respond to it,

210
00:14:15,694 --> 00:14:19,766
you're gonna say, hey, I did call this function with this id

211
00:14:19,910 --> 00:14:21,794
and this is the response.

212
00:14:23,454 --> 00:14:27,714
And then it's, and then it's gonna generate a natural

213
00:14:28,094 --> 00:14:31,408
language response. So in this case, you're asking,

214
00:14:31,456 --> 00:14:35,272
what projects do I have? So imagine if you're

215
00:14:35,368 --> 00:14:38,824
doing your timesheets, you first need to know, hey, what projects are

216
00:14:38,864 --> 00:14:41,928
available to me? And then you add hours to it.

217
00:14:41,976 --> 00:14:45,280
So that's the first thing that we're going to do is going to ask,

218
00:14:45,472 --> 00:14:48,924
what projects do I have? And then

219
00:14:50,264 --> 00:14:53,568
it's going to tell me, hey, you need to call a function for that.

220
00:14:53,736 --> 00:14:57,504
And I'm going to call the function and I'm going to tell the system

221
00:14:57,584 --> 00:15:01,274
what the response was and then I'm gonna,

222
00:15:02,374 --> 00:15:07,758
and then it's gonna send me a nice natural

223
00:15:07,806 --> 00:15:11,030
language response for it. Right?

224
00:15:11,102 --> 00:15:13,994
So let's look at the demo for that,

225
00:15:15,334 --> 00:15:18,646
it's very similar to the previous one that I have.

226
00:15:18,710 --> 00:15:22,474
You can see the same kind of chat.

227
00:15:23,334 --> 00:15:27,554
But in here, when I defining

228
00:15:29,614 --> 00:15:35,878
my completion now, I went a little more serious

229
00:15:36,006 --> 00:15:40,190
like standard with it. You're a helpful assistant. You will help employees

230
00:15:40,262 --> 00:15:43,766
fill their timesheets. But when it's time

231
00:15:43,950 --> 00:15:47,566
to define the tools, I'm going to say, hey, there is

232
00:15:47,590 --> 00:15:51,102
a gets projects function in a definition kind

233
00:15:51,118 --> 00:15:55,148
of looks like this. It has its own type. And then

234
00:15:55,316 --> 00:15:59,172
you give it the name of the project, give it

235
00:15:59,188 --> 00:16:02,584
a nice description. That's kind of like the prompt that does.

236
00:16:03,884 --> 00:16:07,436
It's kind of like the hint that

237
00:16:07,460 --> 00:16:11,584
we're giving the assistant of when to use

238
00:16:12,444 --> 00:16:18,020
this particular function. So you

239
00:16:18,092 --> 00:16:21,324
here will define. In this case, there are

240
00:16:21,364 --> 00:16:25,464
no properties that are required for this particular function.

241
00:16:25,624 --> 00:16:29,176
So I have configured

242
00:16:29,320 --> 00:16:32,644
my chat

243
00:16:32,984 --> 00:16:35,844
to know that there is a gets project functions.

244
00:16:36,824 --> 00:16:40,760
The rest gonna remain the same. I'll show you this when we

245
00:16:40,832 --> 00:16:41,764
call it.

246
00:16:44,704 --> 00:16:48,500
The other difference, when I'm processing the chat completely

247
00:16:48,592 --> 00:16:52,228
completion, I'm going to look for

248
00:16:52,356 --> 00:16:56,224
the finish recent on the response.

249
00:16:57,164 --> 00:17:00,436
And if it's two calls, that means that

250
00:17:00,460 --> 00:17:03,644
the assistants have determined that you need to make some

251
00:17:03,684 --> 00:17:07,180
calls. And then you actually have

252
00:17:07,212 --> 00:17:10,584
to go ahead and do that call yourself.

253
00:17:11,004 --> 00:17:14,588
So what I'm going to do is put a stop sign around

254
00:17:14,676 --> 00:17:18,234
here, and I'm just gonna

255
00:17:18,274 --> 00:17:20,654
go and say hello.

256
00:17:24,834 --> 00:17:27,334
You can see here the finish reason.

257
00:17:27,674 --> 00:17:29,614
If I go into here,

258
00:17:30,554 --> 00:17:33,814
hopefully let's do this here.

259
00:17:35,554 --> 00:17:39,574
If you go up, sorry, that didn't work very well.

260
00:17:41,934 --> 00:17:45,950
But if you go into here, you can say that

261
00:17:45,982 --> 00:17:49,674
we have a finish recent stop. That means

262
00:17:49,974 --> 00:17:54,086
you have nothing to do. Just continue running and

263
00:17:54,270 --> 00:17:58,222
yeah, how can I assist you today? And I'm just gonna ask

264
00:17:58,398 --> 00:18:01,874
it, can you show me my project,

265
00:18:02,374 --> 00:18:06,278
please? All right,

266
00:18:06,326 --> 00:18:10,494
so now if I do the same thing, the finished

267
00:18:10,534 --> 00:18:13,834
reason is, hey, you have some tools to call.

268
00:18:15,334 --> 00:18:19,150
So he's going to go in here, it's going to do

269
00:18:19,182 --> 00:18:22,782
some management of the state, and then you can have multiple

270
00:18:22,838 --> 00:18:26,354
tool calls. So I put them on a for each.

271
00:18:26,934 --> 00:18:30,694
And this function right here is going to

272
00:18:30,734 --> 00:18:34,526
process that call. So I think I'm

273
00:18:34,550 --> 00:18:38,488
going to put a stop sign right

274
00:18:38,536 --> 00:18:39,404
here now.

275
00:18:41,464 --> 00:18:45,104
And I can see here that the

276
00:18:45,144 --> 00:18:46,964
function that I need to call,

277
00:18:48,904 --> 00:18:52,840
I'm going to say, hey, it is if projects

278
00:18:52,872 --> 00:18:56,164
function get project functions. And it is.

279
00:18:57,224 --> 00:19:01,156
And here we have successfully called a

280
00:19:01,180 --> 00:19:05,924
function. So it's just that right now I have it hard coded

281
00:19:06,084 --> 00:19:08,824
just to show you the different stages.

282
00:19:09,524 --> 00:19:13,244
When you set up functions, it's up to you how the function

283
00:19:13,284 --> 00:19:16,804
gets executed. It could be executed in

284
00:19:16,844 --> 00:19:20,424
line like in here, or it could be a DLl call,

285
00:19:20,964 --> 00:19:22,904
or it could be some,

286
00:19:24,324 --> 00:19:27,748
a web API call, which is what we eventually want to do.

287
00:19:27,916 --> 00:19:31,764
So in here, I'm just saying, I'm just simulating

288
00:19:31,844 --> 00:19:35,940
that this is going to be my response and

289
00:19:36,052 --> 00:19:39,900
I have to send back that tool call

290
00:19:39,972 --> 00:19:43,180
id because that's how the assistant is

291
00:19:43,212 --> 00:19:46,784
going to reconcile. It's going to say, hey, I asked you to do something,

292
00:19:47,084 --> 00:19:50,676
did you do it or not? So when I go back,

293
00:19:50,740 --> 00:19:54,480
you say it

294
00:19:54,512 --> 00:19:58,232
went back again and this time it was stopped.

295
00:19:58,368 --> 00:20:01,880
So it was project blue, green and yellow.

296
00:20:02,032 --> 00:20:05,084
So it is exactly what I have here.

297
00:20:05,824 --> 00:20:09,592
Right? So that is

298
00:20:09,688 --> 00:20:13,336
basically our first iteration

299
00:20:13,440 --> 00:20:16,804
in calling a function call.

300
00:20:17,864 --> 00:20:21,776
Alright, so let's continue here. So I have changed,

301
00:20:21,920 --> 00:20:25,856
so I've been doing this, I paused the recording and

302
00:20:25,880 --> 00:20:29,320
doing so it's faster, but I have changed

303
00:20:29,352 --> 00:20:33,024
to my branch of API function call. And in

304
00:20:33,064 --> 00:20:36,240
here, what I want to show you is that the get projects,

305
00:20:36,392 --> 00:20:40,164
it kind of remains the same. There's no change here

306
00:20:40,624 --> 00:20:43,884
that is going to do anything.

307
00:20:45,224 --> 00:20:48,400
But I did added a second function,

308
00:20:48,472 --> 00:20:51,580
a second tool definition. And what this

309
00:20:51,652 --> 00:20:54,852
does is add hours to projects.

310
00:20:55,028 --> 00:20:58,300
This is the description. And again,

311
00:20:58,412 --> 00:21:01,572
if you can graph the description in a

312
00:21:01,588 --> 00:21:05,292
way that is very, very descriptive,

313
00:21:05,388 --> 00:21:09,064
with little words, that's going to be best because

314
00:21:09,524 --> 00:21:13,796
you're not going to use as many tokens as required

315
00:21:13,860 --> 00:21:17,432
as otherwise you would. But in here

316
00:21:17,528 --> 00:21:21,208
I do have to define parameters

317
00:21:21,256 --> 00:21:24,768
and it is an object, it has a project

318
00:21:24,856 --> 00:21:28,360
id, a project, a number of hours,

319
00:21:28,432 --> 00:21:32,096
a description in an entry date.

320
00:21:32,280 --> 00:21:36,272
Oh, and here I

321
00:21:36,288 --> 00:21:40,168
want to show you that when I set up my

322
00:21:40,256 --> 00:21:44,250
system, I actually gave him context on

323
00:21:44,352 --> 00:21:47,694
what that they would, that what the current

324
00:21:47,774 --> 00:21:51,510
date is, because I'm going to be saying things like please

325
00:21:51,582 --> 00:21:56,270
add 2 hours for projects x for

326
00:21:56,302 --> 00:21:59,406
today, and it needs to know what today is.

327
00:21:59,550 --> 00:22:03,274
If you don't set this up, the assistant,

328
00:22:04,094 --> 00:22:07,662
I think it gives a weird 2022

329
00:22:07,718 --> 00:22:11,200
kind of date. So make sure

330
00:22:11,232 --> 00:22:14,324
that you set up the right context for that.

331
00:22:14,864 --> 00:22:18,104
And in this, so this is the

332
00:22:18,144 --> 00:22:21,456
required fields are hours, description and

333
00:22:21,480 --> 00:22:24,496
entry date. So pretty much anything,

334
00:22:24,560 --> 00:22:28,568
everything. Project id in truth should

335
00:22:28,616 --> 00:22:32,120
be one. Then the

336
00:22:32,152 --> 00:22:33,404
chat completion.

337
00:22:35,144 --> 00:22:40,204
I am now giving multiple tools for

338
00:22:40,244 --> 00:22:42,704
it to be able to determine what to call.

339
00:22:43,684 --> 00:22:47,324
And let me show you

340
00:22:47,404 --> 00:22:52,420
here what happens when the

341
00:22:52,452 --> 00:22:55,904
function name is equal to get project functions.

342
00:22:56,284 --> 00:22:59,756
What is going to do is going to go and I just have a

343
00:22:59,780 --> 00:23:03,752
very quick get

344
00:23:03,808 --> 00:23:07,984
projects implementation. It's just an HTTP client, it's an API

345
00:23:08,024 --> 00:23:11,824
wrapper HTTP client. It goes into projects

346
00:23:11,864 --> 00:23:14,684
and does a response,

347
00:23:16,624 --> 00:23:20,144
but if it is our add hours to

348
00:23:20,184 --> 00:23:21,244
project name,

349
00:23:23,064 --> 00:23:26,528
it actually goes and sends all the arguments

350
00:23:26,616 --> 00:23:29,044
because get projects didn't have arguments.

351
00:23:29,424 --> 00:23:33,432
But add

352
00:23:33,488 --> 00:23:37,544
hours to projects does have arguments in the

353
00:23:37,584 --> 00:23:40,952
function call, which is something that is coming from the chat completion.

354
00:23:41,008 --> 00:23:44,720
Actually tried to determine what the arguments were

355
00:23:44,912 --> 00:23:48,416
and is good. And I'm just going to send it to my project and what

356
00:23:48,440 --> 00:23:51,488
I'm going to do that because these arguments

357
00:23:51,536 --> 00:23:55,370
are going to come as adjacent. I'm going to, I created a small

358
00:23:55,552 --> 00:23:59,394
add hours model. I'm going to deserialize into that

359
00:23:59,734 --> 00:24:03,294
and I'm just going to make the right

360
00:24:03,374 --> 00:24:06,758
URL and post it. So get

361
00:24:06,806 --> 00:24:10,230
projects is a get and add hours to project is

362
00:24:10,262 --> 00:24:13,518
a post. The rest kind of remain

363
00:24:13,566 --> 00:24:18,430
the same. So let's see how that works. I'm going to go here

364
00:24:18,542 --> 00:24:23,306
and I kind of say web project are

365
00:24:23,370 --> 00:24:25,054
available to me.

366
00:24:28,394 --> 00:24:31,014
So this is kind of the same that we did before.

367
00:24:31,514 --> 00:24:35,386
It's going to say, hey, you need a

368
00:24:35,450 --> 00:24:39,374
function call and

369
00:24:40,794 --> 00:24:44,778
it's going to go and say yes,

370
00:24:44,826 --> 00:24:48,010
you probably need the get projects

371
00:24:48,042 --> 00:24:51,774
results. And this is going to go and hit my API.

372
00:24:51,894 --> 00:24:53,954
It's going to take a little bit, I guess.

373
00:24:57,414 --> 00:25:01,318
And if you see the project results, you can see here

374
00:25:01,486 --> 00:25:04,918
that I'm saying Phoenix, Griffin, Kraken is what

375
00:25:04,966 --> 00:25:11,254
we saw in the

376
00:25:11,294 --> 00:25:14,222
call over here. Phoenix,

377
00:25:14,278 --> 00:25:17,760
Griffin and Kraken. And I'm just gonna

378
00:25:17,792 --> 00:25:21,264
let it go now and see what happens

379
00:25:21,304 --> 00:25:25,368
the next time that it comes. The finished reason is gonna be stopped

380
00:25:25,416 --> 00:25:28,568
because there was a function call and I already did it,

381
00:25:28,616 --> 00:25:33,824
I sent it back. So now

382
00:25:33,944 --> 00:25:37,840
I go here and say, hey, these are the projects that are available for

383
00:25:37,872 --> 00:25:41,144
you. Alright, so I'm gonna

384
00:25:41,184 --> 00:25:45,314
say something like add 2 hours

385
00:25:45,434 --> 00:25:47,894
to Project Phoenix.

386
00:25:48,954 --> 00:25:52,214
There you go. Phoenix for today.

387
00:25:53,234 --> 00:25:57,250
I'm going to submit it and it's

388
00:25:57,282 --> 00:26:01,018
going to say, hey, you have some functions

389
00:26:01,066 --> 00:26:04,498
to call. So I'm going to go inside

390
00:26:04,626 --> 00:26:08,614
of tool called response message

391
00:26:08,944 --> 00:26:12,416
in here is going to say yes,

392
00:26:12,480 --> 00:26:14,924
you need to add hours to the project.

393
00:26:15,664 --> 00:26:19,320
And then here is something very cool that

394
00:26:19,352 --> 00:26:22,704
I want to show. So even

395
00:26:22,744 --> 00:26:26,752
though I said add projects to Phoenix because

396
00:26:26,808 --> 00:26:30,984
I'm sending all the contacts and it has all the information, it knows

397
00:26:31,024 --> 00:26:33,444
that the id for Phoenix is one.

398
00:26:34,444 --> 00:26:38,836
He knows that I'm

399
00:26:38,860 --> 00:26:42,308
saying 2 hours. I didn't put a description. So it just

400
00:26:42,356 --> 00:26:45,452
said working on task and entry

401
00:26:45,508 --> 00:26:49,004
date is today. So I'm just gonna

402
00:26:49,084 --> 00:26:51,944
close this and let it go. And it's gonna go.

403
00:26:53,484 --> 00:26:56,196
Okay, so let me just not stop here.

404
00:26:56,300 --> 00:26:57,584
I'll just go.

405
00:27:01,824 --> 00:27:05,040
It's gonna come back and the finish reason now

406
00:27:05,072 --> 00:27:08,664
is gonna be stopped. So let's see.

407
00:27:08,824 --> 00:27:12,600
Hey, 2 hours have been successfully added to pre phoenix for

408
00:27:12,632 --> 00:27:15,764
today. Let's, let's do another like

409
00:27:18,664 --> 00:27:22,804
add an hour to Kraken

410
00:27:23,424 --> 00:27:24,964
for yesterday.

411
00:27:26,564 --> 00:27:31,564
Description should be working

412
00:27:31,684 --> 00:27:34,916
on weekend. So let's

413
00:27:34,940 --> 00:27:37,064
see what, what that, what that does.

414
00:27:38,324 --> 00:27:41,964
So response is going to say, you have a tool

415
00:27:42,004 --> 00:27:45,884
call. That's fine. I'm just gonna

416
00:27:45,964 --> 00:27:49,204
stop here and let's see

417
00:27:49,244 --> 00:27:50,424
the arguments.

418
00:27:54,904 --> 00:27:58,120
If I view the arguments, project id three.

419
00:27:58,232 --> 00:28:02,368
I said project Kraken it is. Id 3 hours,

420
00:28:02,456 --> 00:28:06,656
one working on weekend. And I said yesterday. So because

421
00:28:06,720 --> 00:28:10,272
the assistant has the context of what day is today,

422
00:28:10,448 --> 00:28:13,896
it knows how to calculate yesterday. So that's

423
00:28:13,920 --> 00:28:17,260
great. So I'm just gonna go and do

424
00:28:17,292 --> 00:28:17,864
that.

425
00:28:21,604 --> 00:28:25,900
And it says, an hour has been successfully added

426
00:28:26,092 --> 00:28:29,844
to Project Kraken for yesterday. Actually gave me like a nice

427
00:28:29,924 --> 00:28:33,508
indication. Now, if I try to

428
00:28:33,556 --> 00:28:39,988
repeat this, my service

429
00:28:40,076 --> 00:28:44,084
has an error that doesn't allow you to add twice for

430
00:28:44,164 --> 00:28:46,504
the same day. So let's see,

431
00:28:48,324 --> 00:28:50,024
it's gonna say again,

432
00:28:51,844 --> 00:28:54,144
two calls, it's fine.

433
00:28:55,524 --> 00:28:58,304
And put this here.

434
00:29:05,964 --> 00:29:09,292
So the hour results was error, error that

435
00:29:09,348 --> 00:29:13,856
request. I'm gonna send that back to

436
00:29:13,880 --> 00:29:17,484
the assistant and see what

437
00:29:17,904 --> 00:29:21,240
the message is now. It says, I apologize,

438
00:29:21,392 --> 00:29:24,544
but there was an error and could not add that. Now,

439
00:29:24,584 --> 00:29:28,368
if I had, if my API

440
00:29:28,416 --> 00:29:33,280
have given a more descriptive error, then I

441
00:29:33,312 --> 00:29:36,600
could have sent it to the assistant to provide more

442
00:29:36,672 --> 00:29:39,932
input. But as it is, it just being

443
00:29:39,988 --> 00:29:44,012
very apologetic and putting some nice wording

444
00:29:44,068 --> 00:29:47,484
around it. So that's it. That's how you

445
00:29:47,564 --> 00:29:51,692
use functions with your LLM

446
00:29:51,788 --> 00:29:55,344
and allow you to call your own APIs.

447
00:29:56,324 --> 00:29:58,824
I hope this was very, very helpful.

448
00:30:00,644 --> 00:30:03,916
When I discovered you could do this. It was

449
00:30:04,020 --> 00:30:08,108
thanks to a colleague of mine that created

450
00:30:08,236 --> 00:30:13,348
this system for us. And for

451
00:30:13,396 --> 00:30:16,804
me, it just opened a world of opportunities.

452
00:30:16,964 --> 00:30:20,108
As I said in the intro, we've been building APIs for

453
00:30:20,156 --> 00:30:23,756
many years for other systems to integrate with

454
00:30:23,780 --> 00:30:27,172
it, but now we can integrate with natural language,

455
00:30:27,228 --> 00:30:30,644
with these APIs. And again, I feel

456
00:30:30,684 --> 00:30:33,144
that it opens a lot of opportunities.

457
00:30:36,774 --> 00:30:40,474
A few lessons learned when I was working on these

458
00:30:40,774 --> 00:30:44,046
demos and this talk. APIs and

459
00:30:44,070 --> 00:30:48,054
SDKs are changing very, very quickly. So be

460
00:30:48,094 --> 00:30:52,182
patient when your

461
00:30:52,238 --> 00:30:55,830
SDK and model versions will make a difference. So if

462
00:30:55,862 --> 00:30:59,422
there are things that are not working and you're wondering why,

463
00:30:59,518 --> 00:31:03,364
just look at that. Optimizing system prompts

464
00:31:03,404 --> 00:31:06,868
and function definition is crucial, and also it

465
00:31:06,876 --> 00:31:10,500
will save you money. And I am a C

466
00:31:10,532 --> 00:31:14,020
sharp guy and I think they've done a nice work with the

467
00:31:14,052 --> 00:31:18,100
API. But to be honest, it does seem like Python

468
00:31:18,212 --> 00:31:22,024
is a first class citizen on

469
00:31:22,604 --> 00:31:27,144
all of this. A lot of the demos sometimes are in Python,

470
00:31:27,474 --> 00:31:30,978
so at the very least learn to read

471
00:31:31,026 --> 00:31:33,334
Python and or use,

472
00:31:34,554 --> 00:31:38,994
or use Shaqpt or copilot to help you with

473
00:31:39,034 --> 00:31:42,098
that. Before I

474
00:31:42,186 --> 00:31:46,094
go though, I did promise to talk about assistant,

475
00:31:46,554 --> 00:31:50,146
so this came into

476
00:31:50,210 --> 00:31:53,986
preview when I was preparing for these demos, and finally

477
00:31:54,010 --> 00:31:57,624
it's available to me. So if you go into assistance,

478
00:31:58,084 --> 00:32:01,788
you can see that it's a little bit like

479
00:32:01,876 --> 00:32:08,636
all the setup that we did, but with

480
00:32:08,660 --> 00:32:11,820
a UI, I could go here and

481
00:32:11,852 --> 00:32:14,864
say, I'm going to open one that I created earlier.

482
00:32:15,404 --> 00:32:18,852
You can see that I'll give it a name and it has his own id.

483
00:32:18,988 --> 00:32:21,944
So when the client in the client,

484
00:32:22,764 --> 00:32:26,708
the new way of doing it would be that you request an instance

485
00:32:26,756 --> 00:32:30,548
of your assistant, aid your assistant by providing

486
00:32:30,596 --> 00:32:34,172
the assistant id, you create the instructions. This is

487
00:32:34,188 --> 00:32:37,860
kind of like the system message that you

488
00:32:37,892 --> 00:32:40,828
did, and then you set up the functions right here.

489
00:32:40,876 --> 00:32:45,012
You can see here that I have get projects and it's very similar

490
00:32:45,108 --> 00:32:48,670
to what I have in the code. I would create one

491
00:32:48,702 --> 00:32:51,958
for add hours to projects and then instead of having

492
00:32:52,006 --> 00:32:55,758
to send it with every call, that instance

493
00:32:55,806 --> 00:32:58,662
of your assistant will have it.

494
00:32:58,758 --> 00:33:02,446
So this is something that I think will be the future

495
00:33:02,550 --> 00:33:07,118
for this kind of implementation.

496
00:33:07,206 --> 00:33:10,114
So it is good to keep an eye on it.

497
00:33:11,054 --> 00:33:14,854
And with that, I hope that you have enjoyed

498
00:33:14,934 --> 00:33:18,682
this set of demos. And again,

499
00:33:18,778 --> 00:33:22,610
if you have any questions, feel free to reach out

500
00:33:22,682 --> 00:33:25,414
and I will make myself available,

501
00:33:28,034 --> 00:33:31,578
have a great conference and enjoy all the other

502
00:33:31,626 --> 00:33:31,914
talks.

