1
00:00:28,664 --> 00:00:32,392
Hello, Avypress here. Thanks for joining me. We're going to talk about the lessons that

2
00:00:32,408 --> 00:00:36,064
we've learned from doing the data analysis on 1 billion

3
00:00:36,184 --> 00:00:39,084
downloads of open source software on our platform at Scarf.

4
00:00:39,704 --> 00:00:43,192
All right, so let's dive in quick.

5
00:00:43,368 --> 00:00:47,080
Some stuff about me here. So I'm the founder and CEO of Scarf,

6
00:00:47,232 --> 00:00:51,152
based in Oakland, California. And my background is as a

7
00:00:51,288 --> 00:00:53,604
software engineer and open source maintainer.

8
00:00:54,864 --> 00:00:58,464
Scarf, on the other hand, we're about a four year old startup, it's about 16

9
00:00:58,544 --> 00:01:02,044
people. And what we do is we provide usage metrics,

10
00:01:03,024 --> 00:01:06,568
marketing and sales intelligence for commercial open source businesses.

11
00:01:06,736 --> 00:01:10,672
And so a lot of projects and companies will distribute

12
00:01:10,728 --> 00:01:14,232
their software through our gateway from any given

13
00:01:14,288 --> 00:01:17,648
package and container registry. This data

14
00:01:17,696 --> 00:01:22,080
set comes from both commercial open source projects as well as non commercial

15
00:01:22,272 --> 00:01:26,414
open source projects. A bit skewed more towards the commercial

16
00:01:26,454 --> 00:01:29,542
side. They tend to have more of a reason to want to

17
00:01:29,558 --> 00:01:33,462
get the kind of metrics that we provide. But by and large

18
00:01:33,638 --> 00:01:37,342
we're here to try to promote open source sustainability by

19
00:01:37,398 --> 00:01:41,074
offering kind of, you know, by offering responsible

20
00:01:41,414 --> 00:01:45,030
anonymized analytics for businesses that have a, you know,

21
00:01:45,142 --> 00:01:48,674
resting stake in that usage of their open source.

22
00:01:50,174 --> 00:01:53,286
So today, let's see. So we're

23
00:01:53,310 --> 00:01:56,202
going to talk about just at a high level, like what the data is and

24
00:01:56,218 --> 00:01:59,746
how we collected it. We'll talk about the trends that

25
00:01:59,770 --> 00:02:02,778
we see in the data and then what we can learn from it and why

26
00:02:02,866 --> 00:02:06,122
you should care. So the

27
00:02:06,178 --> 00:02:10,386
data comes from the distribution of about 2500

28
00:02:10,490 --> 00:02:14,094
software, open source packages. These packages

29
00:02:14,434 --> 00:02:18,090
come from a variety of different ecosystems. A lot of them are Docker containers

30
00:02:18,162 --> 00:02:22,210
or helm charts. There's a lot of binaries

31
00:02:22,282 --> 00:02:25,894
and tarballs and just other kinds of files for download,

32
00:02:26,304 --> 00:02:28,884
things like artifacts and GitHub releases,

33
00:02:29,224 --> 00:02:33,488
downloads from a download page on

34
00:02:33,496 --> 00:02:36,800
a website, files out of s three these kinds of

35
00:02:36,832 --> 00:02:39,912
things. There's also NPM packages, python packages,

36
00:02:39,968 --> 00:02:43,776
terraform modules and just kind of a long tail of other kind of artifact

37
00:02:43,840 --> 00:02:46,604
that people will distribute through our gateway.

38
00:02:48,104 --> 00:02:52,004
The maintainers of this software that is being distributed.

39
00:02:53,374 --> 00:02:56,390
Like I said, it's commercial and non commercial open source.

40
00:02:56,582 --> 00:03:00,894
Some of it is single vendor, some of it is multi vendor. And a significant

41
00:03:01,014 --> 00:03:05,014
amount of these artifacts are actually open

42
00:03:05,054 --> 00:03:08,358
source projects that are hosted by various open

43
00:03:08,406 --> 00:03:11,694
source foundations. So whether that's the Apache Software foundation, the Linux

44
00:03:11,734 --> 00:03:14,950
foundation, cloud native Computing foundation and

45
00:03:15,062 --> 00:03:18,566
a variety of others. So this comes

46
00:03:18,630 --> 00:03:21,878
from a pretty wide range of types of open

47
00:03:21,926 --> 00:03:25,532
source that we are looking at. Our title is

48
00:03:25,548 --> 00:03:28,148
a little bit misleading. We actually looked at more than a billion downloads. But we

49
00:03:28,156 --> 00:03:31,612
just figured we would look at what we had at the time of this analysis,

50
00:03:31,668 --> 00:03:35,796
which was a bit earlier in the year, but it's about

51
00:03:35,860 --> 00:03:38,824
19 million anonymized origin ids,

52
00:03:39,324 --> 00:03:43,300
which we'll talk about what that means. The metadata around these

53
00:03:43,332 --> 00:03:47,028
IP addresses comes from a variety of different partners

54
00:03:47,076 --> 00:03:50,548
that we work with, but this is coming from IP

55
00:03:50,596 --> 00:03:53,844
metadata providers like Clearbit and six Sense and a couple of others,

56
00:03:53,924 --> 00:03:57,546
but also more even things that are basic as

57
00:03:57,610 --> 00:04:01,334
whois records, if you just do a whois on the domain.

58
00:04:03,674 --> 00:04:06,930
And so we collect this data from a few different

59
00:04:06,962 --> 00:04:11,074
ways, but kind of the most novel thing that we do is we host a

60
00:04:11,234 --> 00:04:14,706
package and container registry gateway. And so what that means is if you are

61
00:04:14,730 --> 00:04:18,890
pushing containers to Docker hub or you're pushing Python packages to pypi,

62
00:04:19,042 --> 00:04:23,122
Scarf has made it easy to distribute all those kinds of artifacts from

63
00:04:23,178 --> 00:04:26,866
one central place. Scarf is just redirecting the traffic to

64
00:04:26,890 --> 00:04:30,456
wherever the artifact is actually hosted. But the thing that we

65
00:04:30,480 --> 00:04:35,004
can do by sitting in between the user and the registry,

66
00:04:35,464 --> 00:04:39,000
by sitting in the middle, we can passively look at that traffic as it flows

67
00:04:39,032 --> 00:04:42,256
through and do this kind of data analysis for

68
00:04:42,320 --> 00:04:48,208
the maintainer, for our customer, for any given distributor

69
00:04:48,256 --> 00:04:49,524
of open source.

70
00:04:51,104 --> 00:04:54,744
That's the main way the registry level insights. With Scarf Gateway,

71
00:04:54,784 --> 00:04:58,244
we also collect data a few other ways. We do collect

72
00:04:58,544 --> 00:05:02,310
post install telemetry in certain cases. So we have a

73
00:05:02,342 --> 00:05:05,834
NPM library called Scruff JS, which will send post install hooks.

74
00:05:06,694 --> 00:05:10,686
But once the data about a download is collected, we'll process the

75
00:05:10,710 --> 00:05:14,166
metadata associated with the IP address that we see and then we

76
00:05:14,190 --> 00:05:17,686
anonymize it. So we will delete the IP address itself,

77
00:05:17,790 --> 00:05:21,662
any other associated PII, and just keep the metadata and

78
00:05:21,718 --> 00:05:24,154
use that for this analysis.

79
00:05:26,594 --> 00:05:29,962
Yeah, the total volume of this data was

80
00:05:30,018 --> 00:05:33,322
kind of increasing quarter over quarter. And this does speak more to kind

81
00:05:33,338 --> 00:05:37,226
of the growth of scarf than it does to most of the software that is

82
00:05:37,250 --> 00:05:40,682
being distributed on scarf. But this is the data that we

83
00:05:40,698 --> 00:05:44,294
are looking at. Back in q one of this year,

84
00:05:44,634 --> 00:05:49,010
we hit about 670 million downloads

85
00:05:49,162 --> 00:05:52,826
of open source packages that was increasing

86
00:05:52,890 --> 00:05:56,190
quarter over quarter. Um, but these are the volumes

87
00:05:56,222 --> 00:05:59,598
we were looking at. And so earlier in the talk,

88
00:05:59,686 --> 00:06:03,534
I said that we were looking at about 19 million uniques,

89
00:06:03,614 --> 00:06:07,022
um, unique users. And, you know, when we talk about,

90
00:06:07,038 --> 00:06:10,406
like, what a user actually is in this context, it's actually not a very

91
00:06:10,470 --> 00:06:13,678
straightforward question. Um, and so, you know, if, if,

92
00:06:13,846 --> 00:06:16,958
you know, an open source package or an open source project says,

93
00:06:17,006 --> 00:06:19,634
oh, look, we've been downloaded a million times,

94
00:06:20,514 --> 00:06:23,722
you know, what does that mean? Was that a million downloads from one person?

95
00:06:23,778 --> 00:06:27,746
Or was that a million downloads from a million different people? You generally

96
00:06:27,810 --> 00:06:31,186
don't really know. And because the user's

97
00:06:31,210 --> 00:06:34,890
not signing in, you will never know exactly what those

98
00:06:34,922 --> 00:06:38,506
real numbers are. But in Scarf's

99
00:06:38,570 --> 00:06:42,354
system, we have different ways of getting at what

100
00:06:42,394 --> 00:06:46,744
this number actually is. And so we talk about two different kinds of identifiers.

101
00:06:46,914 --> 00:06:50,148
We talk about an endpoint id, which is essentially just an IP address.

102
00:06:50,276 --> 00:06:53,224
We will hash that IP address and just store hashes.

103
00:06:53,604 --> 00:06:56,972
And then we also have the notion of an origin id.

104
00:06:57,108 --> 00:07:00,292
And that's where we start to include other

105
00:07:00,348 --> 00:07:03,916
bits of information in the hash that can further try

106
00:07:03,980 --> 00:07:07,788
to give uniqueness

107
00:07:07,836 --> 00:07:11,476
to any given source of traffic. And so typically that

108
00:07:11,500 --> 00:07:15,148
will be the IP address, it will also be a user agent and any

109
00:07:15,196 --> 00:07:19,458
other kinds of headers that we can find that will help

110
00:07:19,626 --> 00:07:24,322
continue to identify. And so these

111
00:07:24,378 --> 00:07:27,834
two different metrics will overcount and undercount in different

112
00:07:27,874 --> 00:07:32,098
ways. So if you have one corporate

113
00:07:32,146 --> 00:07:35,946
VPN, you might have thousands

114
00:07:35,970 --> 00:07:39,426
and thousands of different people all sending traffic out of

115
00:07:39,490 --> 00:07:43,386
one single egress point. And so you might have thousands of

116
00:07:43,410 --> 00:07:46,922
people on one IP address. Similarly,

117
00:07:47,098 --> 00:07:50,418
one person will have multiple ips throughout their

118
00:07:50,466 --> 00:07:54,426
life. They might look at a webpage from home,

119
00:07:54,610 --> 00:07:57,850
they might go to a coffee shop and work from there, maybe download a package

120
00:07:57,882 --> 00:08:00,914
from there. Then they go into the office, and at

121
00:08:00,954 --> 00:08:04,010
each step of the way their ip is changing, and they're going to have

122
00:08:04,042 --> 00:08:08,054
both different endpoint ids and different origin ids. And so,

123
00:08:09,914 --> 00:08:13,426
user agents, all these combination of things, basically,

124
00:08:13,530 --> 00:08:17,146
they might get to various distinct programs that are doing the downloading

125
00:08:17,170 --> 00:08:20,516
or the viewing or whatever kind of event that we are looking at.

126
00:08:20,650 --> 00:08:25,240
But endpoint ids are largely going to undercount

127
00:08:25,312 --> 00:08:28,912
pretty consistent in general. And origin ids will often

128
00:08:28,968 --> 00:08:32,720
overcount. And so whenever we talk

129
00:08:32,752 --> 00:08:36,296
about like a user in this context, we'll typically talk about kind

130
00:08:36,320 --> 00:08:39,752
of both of these metrics. And if you want to

131
00:08:39,768 --> 00:08:41,964
know kind of the user count, it's somewhere in the middle.

132
00:08:44,304 --> 00:08:47,828
So at the scarf

133
00:08:47,876 --> 00:08:51,412
gateway level, we're talking about registry level analytics.

134
00:08:51,468 --> 00:08:55,028
And so whether you're distributing on NPM or

135
00:08:55,076 --> 00:08:57,700
Docker hub or GitHub packages,

136
00:08:57,892 --> 00:09:01,180
pYPi whatever, what do those registers actually

137
00:09:01,252 --> 00:09:05,476
see? Well, they see things from the

138
00:09:05,500 --> 00:09:08,684
web, requests that come in to download stuff.

139
00:09:08,804 --> 00:09:12,028
And so the registry is going to see what got downloaded. They're going

140
00:09:12,036 --> 00:09:15,556
to see, when it got downloaded, the user agent

141
00:09:15,580 --> 00:09:19,402
of the downloads. So was this coming from curl or a browser

142
00:09:19,498 --> 00:09:23,054
or a package manager or what have you,

143
00:09:23,434 --> 00:09:27,050
and then any other headers that might be included. So there might be things like

144
00:09:27,082 --> 00:09:30,170
auth tokens, there might be things like

145
00:09:30,202 --> 00:09:34,134
other kinds of settings that may be fingerprinting,

146
00:09:34,914 --> 00:09:38,570
and ultimately they'll see the ip address of the request. And that's largely

147
00:09:38,602 --> 00:09:40,614
what the registry is working with.

148
00:09:42,594 --> 00:09:46,010
And so just from that kind of analysis

149
00:09:46,042 --> 00:09:49,786
at the registry level, one immediate lesson that we see is that

150
00:09:49,810 --> 00:09:52,724
open source is being used virtually everywhere.

151
00:09:53,184 --> 00:09:56,912
Now, Scarf is an american company, and so our

152
00:09:57,048 --> 00:09:59,884
user and customer base does skew american.

153
00:10:00,624 --> 00:10:03,936
But in general, the usage of open source is pretty

154
00:10:04,000 --> 00:10:08,008
much in every country. There were very

155
00:10:08,096 --> 00:10:09,964
notable exceptions,

156
00:10:11,384 --> 00:10:15,752
western Sahara, french and southern antarctic lands, but otherwise every

157
00:10:15,808 --> 00:10:19,530
single country is represented in those

158
00:10:19,562 --> 00:10:23,826
couple billion downloads. And interestingly,

159
00:10:23,970 --> 00:10:27,874
even the most remote, remote areas we're seeing as well.

160
00:10:27,954 --> 00:10:31,986
Actually here, let me move myself out

161
00:10:32,010 --> 00:10:35,642
of here so we can kind of see that. So we

162
00:10:35,658 --> 00:10:40,834
can see the points here. So very, very pretty

163
00:10:40,874 --> 00:10:43,734
close to the North Pole. Pretty close to the south pole.

164
00:10:44,624 --> 00:10:48,048
Open source is being used in the most extreme and remote parts of

165
00:10:48,056 --> 00:10:52,440
the world, which is kind of interesting. Cool. Let's keep going

166
00:10:52,592 --> 00:10:56,124
an interesting, I'm going to move myself back here really quick.

167
00:10:56,984 --> 00:11:00,136
Governments around the world also use open source.

168
00:11:00,280 --> 00:11:04,048
And so one thing that we see, and maybe I

169
00:11:04,056 --> 00:11:06,644
have a note on this on the next slide. Okay,

170
00:11:06,984 --> 00:11:10,324
so for any given type of,

171
00:11:10,704 --> 00:11:14,216
for any given IP address that comes in, there is typically what is

172
00:11:14,240 --> 00:11:17,758
called a connection type that will be associated that IP address. So that connection,

173
00:11:17,846 --> 00:11:20,542
that IP address can be owned by a business, it can be owned by an

174
00:11:20,558 --> 00:11:24,478
educational institution, a government, a hosting provider.

175
00:11:24,526 --> 00:11:27,814
So that would be like an EC two instance, a GCP machine,

176
00:11:27,854 --> 00:11:31,982
these kinds of things, or as an ISP Internet service

177
00:11:32,038 --> 00:11:35,662
provider from someone on their home network. And any given IP address that

178
00:11:35,678 --> 00:11:38,726
we see is going to fall into these categories. And so to jump back for

179
00:11:38,750 --> 00:11:42,062
a sec, what we see is IP

180
00:11:42,118 --> 00:11:45,634
addresses where the connection type is government. And we see

181
00:11:46,214 --> 00:11:49,452
government traffic coming in around

182
00:11:49,508 --> 00:11:53,292
the world. Definitely not every country, but most countries

183
00:11:53,388 --> 00:11:57,676
have some kind of open source consumption footprint

184
00:11:57,860 --> 00:12:02,108
from the public sector. We definitely see by far the

185
00:12:02,156 --> 00:12:06,260
most number of organizations, public sector organizations

186
00:12:06,292 --> 00:12:09,932
coming from the United States. Brazil is another notable

187
00:12:10,108 --> 00:12:13,544
frontrunner in terms of just overall traffic,

188
00:12:13,844 --> 00:12:17,260
Australia being kind of another high one as well.

189
00:12:17,452 --> 00:12:21,294
But otherwise we see pretty consistently across Europe,

190
00:12:21,634 --> 00:12:25,370
Asia, South America, Australia and parts of Africa where

191
00:12:25,482 --> 00:12:29,882
there is fairly widespread open source usage from

192
00:12:29,938 --> 00:12:33,034
the government. And so I think this is one of those

193
00:12:33,074 --> 00:12:36,642
things where on GitHub we don't see a lot of issues

194
00:12:36,698 --> 00:12:40,610
being created by people coming from the government, but they're very much using the software.

195
00:12:40,642 --> 00:12:44,898
And that's pretty cool to see in the data the

196
00:12:44,946 --> 00:12:48,260
overall volume, the overall

197
00:12:48,292 --> 00:12:51,620
volume of downloads that we are seeing. A lot

198
00:12:51,652 --> 00:12:55,876
of that stuff is coming from just plain old ISP

199
00:12:55,940 --> 00:12:59,444
networks. We do see a pretty high volume of hosting

200
00:12:59,484 --> 00:13:02,700
provider based downloads as

201
00:13:02,732 --> 00:13:06,228
well. This is just a lot of automated systems that are

202
00:13:06,356 --> 00:13:09,504
in AWS or GCP or what have you.

203
00:13:10,164 --> 00:13:13,244
Then the next

204
00:13:13,324 --> 00:13:16,852
highest category is businesses. I think it's

205
00:13:16,908 --> 00:13:20,074
definitely the case that a lot of the ISP and hosting

206
00:13:20,114 --> 00:13:23,334
traffic actually do kind of, you know, indirectly,

207
00:13:24,194 --> 00:13:27,930
you know, come for business purposes. But this is kind of the

208
00:13:28,002 --> 00:13:31,594
breakdown of IP address ownership

209
00:13:31,754 --> 00:13:33,134
that we have been seeing.

210
00:13:35,674 --> 00:13:40,254
So overall in this data, we see about 1.2 million

211
00:13:41,554 --> 00:13:45,094
different corporate associated endpoint ids.

212
00:13:45,514 --> 00:13:48,818
So a few things about this. So what we mean by this is that,

213
00:13:48,866 --> 00:13:52,220
you know, for any given IP address, if it, it belongs to a business,

214
00:13:52,292 --> 00:13:56,844
we're going to see a domain associated with it. So like a

215
00:13:56,884 --> 00:14:00,596
business identity. So we'll know the organization that was behind the IP address.

216
00:14:00,700 --> 00:14:04,612
And we've seen about 1.2 million different businesses.

217
00:14:04,748 --> 00:14:08,036
So I think one thing that

218
00:14:08,100 --> 00:14:12,004
is really, really gleamingly obvious from this is that there's a lot

219
00:14:12,044 --> 00:14:16,156
of data here that can support commercial, open source businesses.

220
00:14:16,260 --> 00:14:19,028
If you are a business commercializing open source,

221
00:14:19,076 --> 00:14:22,784
like you sell products and services on top of this software,

222
00:14:23,274 --> 00:14:26,614
the businesses using your open source

223
00:14:27,154 --> 00:14:30,930
are often potential customers. And so this is one of the

224
00:14:30,962 --> 00:14:34,834
main reasons that scarf has a business here to begin with, is that our customers

225
00:14:34,914 --> 00:14:37,694
really, really value this data.

226
00:14:38,194 --> 00:14:41,658
But more broadly is that in general, most open

227
00:14:41,706 --> 00:14:44,938
source maintainers do not have access to this data

228
00:14:44,986 --> 00:14:48,534
because the registries don't provide it by default. In general,

229
00:14:49,154 --> 00:14:53,010
I don't know of any that do, unless you're paying a pretty substantial amount for

230
00:14:53,042 --> 00:14:56,490
it. But yeah, 1.2 million businesses

231
00:14:56,522 --> 00:15:00,754
in the data from those 1.2

232
00:15:00,794 --> 00:15:03,906
million businesses, that also represents 95% of the Fortune

233
00:15:03,930 --> 00:15:07,658
500. And so literally just from these 2500

234
00:15:07,746 --> 00:15:11,334
packages that are being distributed on Scarf's platform,

235
00:15:11,994 --> 00:15:15,306
the vast majority of the Fortune 500 was seen

236
00:15:15,410 --> 00:15:20,034
showing up, downloading these artifacts. And so it's

237
00:15:20,074 --> 00:15:23,892
very, I think there's a lot of surveys out there, there's a lot of

238
00:15:24,068 --> 00:15:27,140
corroborating evidence of this, where people report like,

239
00:15:27,172 --> 00:15:31,220
hey, we use open source at our massive enterprise, but this

240
00:15:31,252 --> 00:15:34,748
is a really nice independent

241
00:15:34,796 --> 00:15:38,212
verification of that where there's no self reporting going

242
00:15:38,268 --> 00:15:42,624
on here. This is literally just watching the traffic of live production,

243
00:15:43,804 --> 00:15:48,012
download traffic, and seeing that indeed most

244
00:15:48,068 --> 00:15:51,504
of the largest companies in the world are leveraging open source

245
00:15:53,844 --> 00:15:58,564
in terms of the public cloud. So this is connection type equals hosting

246
00:15:58,724 --> 00:16:02,564
that we see on the platform. AWS dominates

247
00:16:02,684 --> 00:16:04,784
the traffic by a huge margin.

248
00:16:06,324 --> 00:16:10,260
Again, because Scarf is a public. Because scarf is

249
00:16:10,332 --> 00:16:12,824
not public, because Scarf is an american company.

250
00:16:14,564 --> 00:16:18,428
That is the, you know, we will skew more

251
00:16:18,476 --> 00:16:21,974
towards the american providers for

252
00:16:22,394 --> 00:16:26,370
public clouds. And so, interestingly, like Hetzner,

253
00:16:26,442 --> 00:16:29,954
which comes in at number three, a more european

254
00:16:30,034 --> 00:16:33,290
based public cloud. But if scarf was really

255
00:16:33,362 --> 00:16:37,294
catering more, if we were based in Europe, we'd probably see Hetzner be

256
00:16:37,714 --> 00:16:41,682
quite a bit more prominent. But notably, Aws really

257
00:16:41,738 --> 00:16:44,694
dominated even more than Google.

258
00:16:44,994 --> 00:16:48,306
So I think that's kind of an interesting thing in the traffic where just like,

259
00:16:48,330 --> 00:16:51,416
if you're getting a lot of downloads of your artifacts and you, you know,

260
00:16:51,440 --> 00:16:54,568
do a lot of open source, you may want to, you know,

261
00:16:54,616 --> 00:16:58,960
if you're wondering who you should partner with, wondering who you should try to optimize

262
00:16:59,032 --> 00:17:02,744
for in terms of, you know, fixing bugs or whatever, whatever that might look

263
00:17:02,784 --> 00:17:06,084
like, this is the breakdown as we have witnessed it,

264
00:17:08,144 --> 00:17:12,248
I think a really interesting one. So we, like I said earlier,

265
00:17:12,336 --> 00:17:16,688
a lot of the artifacts in this set of 2500

266
00:17:16,736 --> 00:17:19,284
packages, they definitely skew,

267
00:17:20,824 --> 00:17:25,016
skew towards docker containers being kind of not

268
00:17:25,040 --> 00:17:28,336
the majority, but the plurality of packages that we are

269
00:17:28,360 --> 00:17:32,744
talking about. And Scarf can redirect container

270
00:17:32,784 --> 00:17:36,404
downloads to any registry.

271
00:17:37,744 --> 00:17:40,444
What we see here is the,

272
00:17:41,784 --> 00:17:46,120
what we're able to see is just the market share of different container

273
00:17:46,152 --> 00:17:49,304
registries. What we've been seeing is that Docker hub,

274
00:17:49,424 --> 00:17:52,164
I think, unsurprisingly to many,

275
00:17:54,614 --> 00:17:58,574
is the dominating container registry.

276
00:17:58,734 --> 00:18:02,350
And interestingly, okay, the interesting thing here as

277
00:18:02,382 --> 00:18:05,958
well is that this market share is actually also trending towards

278
00:18:06,006 --> 00:18:09,310
Docker hub actually eating more of it. So I

279
00:18:09,342 --> 00:18:13,054
don't have slides for this, but earlier

280
00:18:13,174 --> 00:18:16,822
on in Scarf's trajectory, we saw GHCR

281
00:18:16,878 --> 00:18:20,604
actually very, very quickly eating up that market share

282
00:18:20,644 --> 00:18:24,744
and becoming one of the primary registries

283
00:18:26,764 --> 00:18:30,188
we're now starting to see. Docker hub is starting to push

284
00:18:30,236 --> 00:18:33,684
back and continue to take more of that download

285
00:18:33,724 --> 00:18:37,668
share. Key IO Quay IO,

286
00:18:37,716 --> 00:18:41,084
depending on how you like to pronounce it, is the third most

287
00:18:41,124 --> 00:18:43,544
popular container registry that we see.

288
00:18:44,634 --> 00:18:48,298
And every other registry out there kind of makes a

289
00:18:48,346 --> 00:18:52,274
really, really kind of negligible portion

290
00:18:52,314 --> 00:18:55,694
of this pie otherwise. So if you are wondering

291
00:18:56,554 --> 00:19:00,826
where you should publish your containers or which registries

292
00:19:00,890 --> 00:19:03,834
you might want to support if you're integrating to these other things, this is the

293
00:19:03,874 --> 00:19:07,014
general traffic patterns that we see.

294
00:19:09,034 --> 00:19:12,354
One question that we actually get a fair amount with this kind of

295
00:19:12,394 --> 00:19:15,402
IP address metadata is. Well, what about VPN's?

296
00:19:15,498 --> 00:19:18,904
VPN's will kind of mess all this up, won't they? And one of the really

297
00:19:18,944 --> 00:19:22,080
nice things is that a lot of the metadata providers actually are able to detect

298
00:19:22,152 --> 00:19:25,040
if a connection is on a VPN. And what we've seen in practice is that

299
00:19:25,072 --> 00:19:28,888
about 2% of the downloads that we see are through

300
00:19:28,936 --> 00:19:29,924
a VPN.

301
00:19:32,144 --> 00:19:35,416
The VPN providers do vary in terms of how easy they are to

302
00:19:35,440 --> 00:19:39,520
detect. So I think this will hit a lot of the more

303
00:19:39,712 --> 00:19:43,488
retail VPN's or if you're a big company rolling your own VPN

304
00:19:43,536 --> 00:19:46,392
that may or may not get detected by some of these metadata providers. But this

305
00:19:46,408 --> 00:19:50,238
is generally what we are seeing, the percentage.

306
00:19:50,286 --> 00:19:54,194
So I would say that the percent is at least 2.2%.

307
00:19:54,734 --> 00:19:58,622
It's probably not a ton more than that, but these are

308
00:19:58,638 --> 00:20:01,394
kind of the ballpark figures that we're looking at.

309
00:20:03,294 --> 00:20:07,558
I think one of the biggest surprises for most scarf

310
00:20:07,606 --> 00:20:11,158
users is that your total

311
00:20:11,246 --> 00:20:15,622
downloads versus your unique users often

312
00:20:15,678 --> 00:20:19,390
look very different than the data would look

313
00:20:19,422 --> 00:20:23,326
like if you're just looking at downloads alone. So here we

314
00:20:23,350 --> 00:20:26,814
see the red line is representing the total

315
00:20:26,934 --> 00:20:30,702
number of unique users that are being seen. And that is

316
00:20:30,718 --> 00:20:34,310
in millions. On the right hand side and then on the left, we just see

317
00:20:34,422 --> 00:20:38,086
the total raw number of downloads. And so the

318
00:20:38,150 --> 00:20:41,430
ratio here as you're seeing is about 100

319
00:20:41,502 --> 00:20:44,998
to one is like the average. And so if you're looking

320
00:20:45,126 --> 00:20:48,412
across any given in open source package and

321
00:20:48,428 --> 00:20:52,524
they say, hey, we have 1000 downloads or a million downloads,

322
00:20:52,564 --> 00:20:56,604
and I think a lot of people will immediately jump into

323
00:20:56,644 --> 00:20:59,796
wondering, sure, but how many users actually, what,

324
00:20:59,820 --> 00:21:03,948
like, how many active users do you have? How many distinct

325
00:21:03,996 --> 00:21:07,220
sources of traffic did that come from your back of envelope

326
00:21:07,252 --> 00:21:10,580
math? You can just divide by 100 and that'll give you some

327
00:21:10,652 --> 00:21:12,624
kind of reasonable approximation.

328
00:21:14,104 --> 00:21:18,192
Um, however, you know, we, that it depends

329
00:21:18,288 --> 00:21:22,104
on the package, right? Like this is not, these are the averages across.

330
00:21:22,264 --> 00:21:25,632
We will see other packages, uh, where, you know,

331
00:21:25,688 --> 00:21:29,040
other projects where the ratio is actually closer to 15 to

332
00:21:29,072 --> 00:21:32,664
one. And so this kind of thing really just depends on the, um,

333
00:21:32,704 --> 00:21:36,296
the type of software that you're dealing with, kind of what usage patterns

334
00:21:36,320 --> 00:21:39,370
tend to look like. You know, obviously, I think where,

335
00:21:39,432 --> 00:21:42,726
where something is in CI pipelines that will tend

336
00:21:42,750 --> 00:21:46,070
to explode, the numbers and the metrics that you might

337
00:21:46,102 --> 00:21:49,950
see in terms of those total downloads versus uniques. But it really just depends on

338
00:21:50,062 --> 00:21:52,354
the type of thing that you are looking at.

339
00:21:53,294 --> 00:21:57,102
Often for something like an application, a full blown standalone

340
00:21:57,158 --> 00:22:01,070
application that you spin up as an internal tool is going to have very

341
00:22:01,142 --> 00:22:04,454
different usage patterns than say a library where every

342
00:22:04,534 --> 00:22:08,158
automated system in your infrastructure is going to be downloading it every time you

343
00:22:08,166 --> 00:22:12,128
spin it up, up. And so

344
00:22:12,256 --> 00:22:15,496
what that means is that many surges in the

345
00:22:15,520 --> 00:22:19,644
downloads that you might see, if you're looking at like your NPM metrics,

346
00:22:20,104 --> 00:22:23,880
your cargo metrics, whatever you might be looking at,

347
00:22:24,072 --> 00:22:27,736
if you see surges in your growth, they might be totally

348
00:22:27,920 --> 00:22:31,736
not real. And one of

349
00:22:31,760 --> 00:22:35,000
our users published a really great blog post about this.

350
00:22:35,112 --> 00:22:38,964
So Linux server IO, for those who are not familiar,

351
00:22:39,404 --> 00:22:43,424
it is a completely non commercial organization.

352
00:22:44,324 --> 00:22:48,372
Basically what they do is they repackage a lot of popular

353
00:22:48,468 --> 00:22:52,076
applications as Docker containers. They dockerize a lot of different

354
00:22:52,140 --> 00:22:55,820
things to make it really easy for anyone to spin them up on just arbitrary

355
00:22:56,012 --> 00:22:59,424
machines. It's a really cool project. Highly recommend checking them out.

356
00:23:00,284 --> 00:23:03,820
They've serviced. I think they're probably well over this

357
00:23:03,852 --> 00:23:08,092
by now. But it was coming up on 20 billion downloads of docker containers

358
00:23:08,148 --> 00:23:12,002
that they are maintaining.

359
00:23:12,138 --> 00:23:15,546
And they used scarf to track the metrics around these downloads.

360
00:23:15,570 --> 00:23:19,146
And what they found was that the correlation

361
00:23:19,250 --> 00:23:22,650
between unique users and total downloads did

362
00:23:22,682 --> 00:23:26,466
indeed vary across different applications. And some of

363
00:23:26,490 --> 00:23:29,534
them, they vary wildly. And so

364
00:23:29,834 --> 00:23:33,574
what you can see on the top here,

365
00:23:34,274 --> 00:23:37,514
what you can see on the top here for Wireguard is that there were

366
00:23:37,554 --> 00:23:41,474
multiple kind of spikes of, of total

367
00:23:41,554 --> 00:23:45,234
downloads, very little movement on unique users.

368
00:23:45,274 --> 00:23:49,034
And what they said was that about half of the polls could be attributed

369
00:23:49,074 --> 00:23:52,554
to 20 users. And those 20 users probably had misconfigured or overly

370
00:23:52,594 --> 00:23:56,538
aggressive update services. So in the Docker world,

371
00:23:56,586 --> 00:24:00,506
there's tools like Watchtower and Diune and kind

372
00:24:00,530 --> 00:24:04,330
of some of these others where all they're doing is they're just pulling and pulling

373
00:24:04,362 --> 00:24:07,906
and pulling, and they're just trying to make sure that they have the latest version

374
00:24:07,930 --> 00:24:12,020
of the software. And so what

375
00:24:12,052 --> 00:24:15,676
happens is the numbers get super, super inflated. And that's just the case on a

376
00:24:15,700 --> 00:24:18,704
lot of different registries that you might look at.

377
00:24:20,564 --> 00:24:25,068
And the really interesting thing to think about is that in

378
00:24:25,076 --> 00:24:28,940
the venture capital world, millions and millions of dollars

379
00:24:29,012 --> 00:24:32,804
are deployed to open source projects,

380
00:24:32,844 --> 00:24:36,332
turning into companies that just have really exciting download figures.

381
00:24:36,508 --> 00:24:40,156
And what we're showing with some of these metrics is that

382
00:24:40,180 --> 00:24:43,796
these download graphs are not reliable in any way, shape or

383
00:24:43,820 --> 00:24:47,492
form. When we think about the companies that

384
00:24:47,508 --> 00:24:51,064
have been started, the tens of millions of dollars that have been deployed,

385
00:24:51,364 --> 00:24:54,744
all basically garbage download metrics.

386
00:24:56,324 --> 00:24:59,628
It's an unfortunate reality to understand,

387
00:24:59,716 --> 00:25:01,744
but that is what the data shows.

388
00:25:04,194 --> 00:25:07,698
Like I said, a lot of the downloads that you may have as an open

389
00:25:07,746 --> 00:25:11,242
source maintainer, they come from totally automated systems.

390
00:25:11,418 --> 00:25:14,706
Some automated systems are very real signals and others are much less

391
00:25:14,730 --> 00:25:18,482
so. Like I said, container agents that are continually

392
00:25:18,578 --> 00:25:21,378
monitoring for updates. You have CI CD pipelines,

393
00:25:21,506 --> 00:25:24,834
you have artifact mirrors that are just trying to mirror

394
00:25:24,874 --> 00:25:27,694
any given registry and make sure that they're always up to date.

395
00:25:29,184 --> 00:25:32,784
If you have a link to your artifact on a

396
00:25:32,824 --> 00:25:35,804
website, there's web crawlers as well,

397
00:25:36,144 --> 00:25:39,536
web crawlers from all different companies that are just crawling your

398
00:25:39,560 --> 00:25:43,392
pages and downloading all your downloads. And those

399
00:25:43,448 --> 00:25:46,960
are all inflating your stats. In the

400
00:25:46,992 --> 00:25:50,720
top clients that we've seen, there's a lot of repetitive

401
00:25:50,792 --> 00:25:53,936
downloaders. Renovate bot, Scopio, Diyun uptime robot,

402
00:25:53,960 --> 00:25:57,724
renovate bot. These are all, these are all very low

403
00:25:57,804 --> 00:26:01,148
signal, but very, very high volume

404
00:26:01,276 --> 00:26:04,988
user agents. And so for most maintainers,

405
00:26:05,116 --> 00:26:08,852
this is noise, this is not relevant, but they will really impact

406
00:26:08,908 --> 00:26:09,984
your stats.

407
00:26:12,364 --> 00:26:15,300
And so like we were saying that the,

408
00:26:15,412 --> 00:26:18,692
you know that these user agents, there's quite a lot of rich

409
00:26:18,748 --> 00:26:21,988
information in those user agents, and it's actually even,

410
00:26:22,076 --> 00:26:25,772
it's a little bit more complex than that, where some user agents

411
00:26:25,868 --> 00:26:29,860
send tons and tons of information about the program

412
00:26:29,932 --> 00:26:33,516
that is doing the downloading and others less so. But one

413
00:26:33,620 --> 00:26:36,916
really standout piece of software is Pip,

414
00:26:37,060 --> 00:26:41,004
the Python package manager. It does an exceptional job

415
00:26:41,164 --> 00:26:44,780
where the user agent actually contains a human readable JSON

416
00:26:44,852 --> 00:26:48,516
blob with all the various information about it. Literally a point

417
00:26:48,540 --> 00:26:52,350
of telling you cpu architecture

418
00:26:52,532 --> 00:26:55,874
and right at the top, a CI flag telling the,

419
00:26:55,914 --> 00:26:59,706
you know, telling the server if this Pip install

420
00:26:59,770 --> 00:27:03,734
is running from within CI or not, incredibly helpful.

421
00:27:04,554 --> 00:27:07,594
There's build information, there's system information, there's dynamic

422
00:27:07,634 --> 00:27:10,650
dependency information. Humans can read it,

423
00:27:10,722 --> 00:27:13,894
machines can read it. It's incredible. Hats off to pip.

424
00:27:14,194 --> 00:27:19,370
We'd love to see more programs

425
00:27:19,442 --> 00:27:23,106
include this kind of very rich information in

426
00:27:23,130 --> 00:27:27,026
their user agents because it's really, really beneficial for open source maintainers

427
00:27:27,130 --> 00:27:29,214
that rely on this kind of data.

428
00:27:32,114 --> 00:27:35,370
And we see this in a lot of other places, like homebrew does a pretty

429
00:27:35,402 --> 00:27:39,506
good job of this. Docker does a great job of this. Even showing you

430
00:27:39,610 --> 00:27:42,898
different upstream from Docker, downstream from Docker. And that's really

431
00:27:42,946 --> 00:27:47,154
awesome. But then we see a lot of user agents that are not

432
00:27:47,194 --> 00:27:51,162
super helpful. We are looking at you go HTTP

433
00:27:51,218 --> 00:27:54,416
client, which for the go developer, this is

434
00:27:54,440 --> 00:27:58,056
not really, they did exactly the right thing.

435
00:27:58,160 --> 00:28:01,736
But for the folks that are using go HP client under the hood,

436
00:28:01,800 --> 00:28:05,352
which is most of this traffic, it's not usually coming from raw go.

437
00:28:05,408 --> 00:28:09,136
It might be coming from helm or kubernetes or

438
00:28:09,240 --> 00:28:13,016
what have you. A lot of other platforms

439
00:28:13,040 --> 00:28:16,792
that include very little information about the actual client that

440
00:28:16,808 --> 00:28:20,704
is making the request. I would love to see more

441
00:28:20,784 --> 00:28:25,518
pips and dockers and fewer kubernetes

442
00:28:25,606 --> 00:28:28,902
and just raw go HTTP client that give very little

443
00:28:28,958 --> 00:28:31,274
info on who's making the requests.

444
00:28:34,054 --> 00:28:37,718
Let's see. Another big piece of info that has come

445
00:28:37,766 --> 00:28:41,966
from these trends is that scarf users

446
00:28:41,990 --> 00:28:46,310
and customers are often very surprised that people do not upgrade versions

447
00:28:46,502 --> 00:28:48,274
in the way that you might expect.

448
00:28:49,294 --> 00:28:52,818
Excuse me. So in the container

449
00:28:52,866 --> 00:28:56,706
world, the default tag, the version of the artifact

450
00:28:56,730 --> 00:29:00,642
that you're publishing is just latest. That's kind of the default

451
00:29:00,698 --> 00:29:04,290
automatic tag that gets applied. And so if

452
00:29:04,322 --> 00:29:07,442
you try to download a container, you don't specify a

453
00:29:07,458 --> 00:29:12,066
version. It's going to use latest, it's just going to download the latest. And unsurprisingly,

454
00:29:12,210 --> 00:29:16,002
that is by far the most downloaded version across all

455
00:29:16,018 --> 00:29:21,032
the different packages on our platform, latest is by far the most popular.

456
00:29:21,088 --> 00:29:24,896
So more than three quarters of the packages latest

457
00:29:24,960 --> 00:29:26,404
is their top version.

458
00:29:28,264 --> 00:29:32,272
But interestingly, most users will

459
00:29:32,328 --> 00:29:35,524
never download a second version once they get one.

460
00:29:36,664 --> 00:29:40,764
And so if you see someone that downloads a stable release,

461
00:29:41,704 --> 00:29:44,832
getting them to upgrade will be very tricky. So it's kind of weird. We have

462
00:29:44,848 --> 00:29:47,656
a lot of people who are just going to use the bleeding edge of whatever

463
00:29:47,720 --> 00:29:51,474
is the default, and everyone and most other

464
00:29:51,554 --> 00:29:55,026
people are never going to grab something again, no matter how much

465
00:29:55,050 --> 00:29:58,618
you nag them to do it. And this is why a

466
00:29:58,626 --> 00:30:02,282
lot of software you use is begging you to upgrade to the latest version if

467
00:30:02,298 --> 00:30:06,138
there are security updates or these kinds of things, because in practice, people don't really

468
00:30:06,186 --> 00:30:09,554
do it. That's the world that we live in.

469
00:30:09,714 --> 00:30:13,434
If you are a maintainer and you have pushed a security patch and you think,

470
00:30:13,474 --> 00:30:17,222
oh great, everything is fine, we push a patch. Well,

471
00:30:17,358 --> 00:30:20,566
maybe not, because just because you push the patch doesn't mean that

472
00:30:20,590 --> 00:30:24,474
anyone is using it. And that is the reality.

473
00:30:25,534 --> 00:30:29,150
And so, you know, we've, we've talked about

474
00:30:29,182 --> 00:30:32,350
a lot of random, you know, learnings and

475
00:30:32,382 --> 00:30:35,394
trends here, but who cares? You know, why does this matter?

476
00:30:36,534 --> 00:30:40,654
There's a few big reasons why this stuff is important for

477
00:30:40,694 --> 00:30:44,246
anyone who has done open source work on their own, anyone who's

478
00:30:44,270 --> 00:30:47,944
been an open source maintainer or, you know, an auth, creator of a project,

479
00:30:49,524 --> 00:30:54,544
you probably know that you're often working in the dark about

480
00:30:55,244 --> 00:30:58,224
how your work is actually being used in general.

481
00:30:59,924 --> 00:31:03,236
These kinds, any work that you're doing, whether it's

482
00:31:03,260 --> 00:31:06,388
making a decision about what to work on, what not to work

483
00:31:06,436 --> 00:31:09,836
on, what to prioritize, what not to prioritize. You can do that

484
00:31:09,860 --> 00:31:13,144
more effectively if you understand how the software is actually being used.

485
00:31:15,434 --> 00:31:18,794
Interestingly, when we first got started working

486
00:31:18,834 --> 00:31:22,330
on scarf, the attitudes, the open source community

487
00:31:22,402 --> 00:31:26,050
were quite a bit different around collecting

488
00:31:26,082 --> 00:31:29,514
any kind of usage metrics. So that's changed quite a bit since

489
00:31:29,554 --> 00:31:30,534
we've been around.

490
00:31:33,074 --> 00:31:36,650
But the reason that this is really important for all of us is that we

491
00:31:36,682 --> 00:31:39,482
do look at some data. It's not like we don't use any data.

492
00:31:39,578 --> 00:31:43,266
We have these kinds of metrics. We have some download metrics in most

493
00:31:43,290 --> 00:31:47,236
of our registries, but these metrics are

494
00:31:47,260 --> 00:31:50,924
very misleading. And to make it worse is that the registries actually

495
00:31:50,964 --> 00:31:54,260
already have the data. All the stuff that we've shown here today

496
00:31:54,332 --> 00:31:58,020
from scarf, whether it's uniques or version adoption or what have

497
00:31:58,052 --> 00:32:01,364
you, the registries have that information already.

498
00:32:01,444 --> 00:32:05,100
We're just the first to show it to you. That's problematic,

499
00:32:05,172 --> 00:32:08,676
because that means that there's things that would be

500
00:32:08,700 --> 00:32:12,108
helpful to maintainers that are just locked away, that they don't have access

501
00:32:12,156 --> 00:32:15,858
to, even though they're kind of the rightful owners

502
00:32:15,906 --> 00:32:17,934
of the data in the first place.

503
00:32:19,594 --> 00:32:23,002
And so if you want to see fewer

504
00:32:23,058 --> 00:32:25,694
companies ditch open source licenses,

505
00:32:27,034 --> 00:32:30,370
the trend that we see is that you have all these companies that they kind

506
00:32:30,402 --> 00:32:32,974
of hit a wall with how much they can grow.

507
00:32:33,554 --> 00:32:37,226
Because whether it's that they're competing with their open source,

508
00:32:37,290 --> 00:32:41,420
whether it's at their community and their business, or not properly aligned

509
00:32:41,452 --> 00:32:44,636
with one another, one way

510
00:32:44,660 --> 00:32:48,700
or another, these businesses and their communities are kind of skewing apart

511
00:32:48,772 --> 00:32:52,292
in their interests. And that causes the businesses to, you know, they do

512
00:32:52,308 --> 00:32:54,980
what they need to do, and they sometimes that means they need to change their

513
00:32:55,012 --> 00:32:58,300
license. If we want to see less of this. I know

514
00:32:58,332 --> 00:33:01,260
I do. I know a lot of you listening. Probably also, do we have to

515
00:33:01,292 --> 00:33:04,652
support open source businesses more systemically, more holistically,

516
00:33:04,708 --> 00:33:08,252
make it easier to build a sustainable company around a successful piece

517
00:33:08,268 --> 00:33:12,084
of open source software? And so analytics and

518
00:33:12,124 --> 00:33:15,812
better metrics, better data observability, is,

519
00:33:15,988 --> 00:33:19,484
in our opinion, a very crucial part of this equation. If companies

520
00:33:19,564 --> 00:33:22,804
better understand how their software is used, they can more effectively commercialize.

521
00:33:22,844 --> 00:33:26,548
And if they can more effectively commercialize, they might reach for

522
00:33:26,596 --> 00:33:28,664
license changes less often.

523
00:33:30,044 --> 00:33:33,892
And I think we all want to see a world where more companies are successful

524
00:33:33,948 --> 00:33:37,944
doing open source, and that open source becomes the more dominant

525
00:33:38,804 --> 00:33:42,384
way to build software, period.

526
00:33:43,724 --> 00:33:47,144
Yeah. And so a few takeaways here

527
00:33:47,604 --> 00:33:51,284
from the data that we've learned today. So one is that open source,

528
00:33:51,444 --> 00:33:55,024
many of you already know this open source really is everywhere. And so

529
00:33:56,164 --> 00:33:59,144
maintaining open source is sometimes a pretty thankless job.

530
00:33:59,564 --> 00:34:02,664
A lot of times people only come to you when they have a problem,

531
00:34:03,364 --> 00:34:06,688
you know, when they run into issues, when they're upset, when they

532
00:34:06,696 --> 00:34:08,124
have something to complain about.

533
00:34:09,704 --> 00:34:13,008
But your work as a maintainer actually has a huge impact

534
00:34:13,056 --> 00:34:16,936
on the world. It affects big companies, it affects governments,

535
00:34:17,120 --> 00:34:21,168
universities, people all over the world in the most populated and

536
00:34:21,176 --> 00:34:24,944
the most remote parts of the globe. And that's pretty cool. Even if people

537
00:34:24,984 --> 00:34:28,176
are not coming to you and thanking you, at least you can know

538
00:34:28,200 --> 00:34:30,884
that your software is probably getting used more than you think.

539
00:34:32,554 --> 00:34:35,994
If you are building a business or you have a business that is

540
00:34:36,034 --> 00:34:39,538
around the open source that you build, tracking the usage

541
00:34:39,586 --> 00:34:43,298
of that software can be critical to

542
00:34:43,346 --> 00:34:45,574
building and maintaining that thriving business.

543
00:34:47,074 --> 00:34:51,186
If you are reporting metrics around the usage of your

544
00:34:51,290 --> 00:34:55,346
open source software project, just remember that download counts can

545
00:34:55,370 --> 00:34:58,828
be highly misleading. So our recommendation

546
00:34:58,876 --> 00:35:02,100
is to always pair raw download numbers with

547
00:35:02,172 --> 00:35:05,508
some notion of uniqueness, if you can, because there's huge

548
00:35:05,556 --> 00:35:08,668
outliers in traffic and bursts from one person.

549
00:35:08,836 --> 00:35:12,596
There's lots of bots, there's lots of redownloads, there's a lot of things that

550
00:35:12,740 --> 00:35:15,704
really screw up those numbers.

551
00:35:17,484 --> 00:35:21,544
If you maintain any kind of package manager or

552
00:35:22,524 --> 00:35:25,938
program that is making requests on the Internet, please, please,

553
00:35:25,986 --> 00:35:28,774
please put rich information at the user agent.

554
00:35:29,914 --> 00:35:33,014
Others in the community will be very, very appreciative.

555
00:35:35,274 --> 00:35:39,090
Maintainers should keep

556
00:35:39,122 --> 00:35:42,506
in mind what the behaviors of users actually is when it comes to

557
00:35:42,530 --> 00:35:46,058
upgrading towards new versions, and to keep a little bit of a more

558
00:35:46,106 --> 00:35:48,134
pessimistic eye about that.

559
00:35:49,434 --> 00:35:53,290
And I think the last and final thing is that

560
00:35:53,482 --> 00:35:56,908
open source usage metrics can indeed

561
00:35:57,026 --> 00:36:00,808
help the ecosystem. They can be collected responsibly.

562
00:36:00,856 --> 00:36:04,364
And I think that this is something that we as a community need to,

563
00:36:05,384 --> 00:36:08,632
over time, embrace more and more and not shy away

564
00:36:08,688 --> 00:36:12,004
from, because the data is already being collected,

565
00:36:12,544 --> 00:36:15,992
whether we like it or not, by the registries are going to

566
00:36:16,008 --> 00:36:19,776
collect the data, whether or not we want them to. And so it's not a

567
00:36:19,800 --> 00:36:23,460
matter of should or should we not collect this data, is is how should we

568
00:36:23,492 --> 00:36:27,252
use it? Who should have access to it? That's a topic for a

569
00:36:27,268 --> 00:36:31,180
whole other talk, a talk that I've given in other places. And so feel

570
00:36:31,212 --> 00:36:34,516
free to check out my website for

571
00:36:34,540 --> 00:36:37,304
other links to discussions about that.

572
00:36:38,444 --> 00:36:41,580
Yeah. So thank you for your time. Thank you for listening.

573
00:36:41,612 --> 00:36:44,988
I hope you learned something you can find

574
00:36:45,076 --> 00:36:48,180
me kind of all over online. You can find scarf

575
00:36:48,212 --> 00:36:51,820
at scarf sh. If you want to learn more about the

576
00:36:51,852 --> 00:36:55,410
metrics that we collect, how you can collect your own. If you

577
00:36:55,522 --> 00:36:58,774
have an open source project you want to know more about the usage for.

578
00:36:59,154 --> 00:37:02,386
So yeah, please don't hesitate to reach out and get

579
00:37:02,410 --> 00:37:04,354
in touch. And thank you so much for listening.

