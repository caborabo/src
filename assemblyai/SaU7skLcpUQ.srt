1
00:00:20,640 --> 00:00:24,686
Hey everyone, welcome to Conf 42. Thank you for tuning in to listen

2
00:00:24,790 --> 00:00:28,342
my talk. Today I'll be presenting on optimizing performance

3
00:00:28,438 --> 00:00:31,683
and security and building a robust API in go.

4
00:00:31,853 --> 00:00:35,879
So we'll look into different ways how we can

5
00:00:35,991 --> 00:00:38,599
make our API much more performant,

6
00:00:38,671 --> 00:00:42,263
fast and secure. So let's do a

7
00:00:42,303 --> 00:00:46,639
quick introduction about myself

8
00:00:46,711 --> 00:00:50,287
yeah, so I'm currently working as a senior SRE at Capsule.

9
00:00:50,455 --> 00:00:53,735
I'm also a docker captain and apart from that my

10
00:00:53,759 --> 00:00:57,363
work revolves around backend container systems and security.

11
00:00:57,804 --> 00:01:01,588
So let's get started. There are one building

12
00:01:01,636 --> 00:01:04,556
an API. There are a couple of things that we wanted our API to be.

13
00:01:04,660 --> 00:01:07,556
One is we want it to be secure, we want it to be fast,

14
00:01:07,620 --> 00:01:11,220
and we want it to be robust. So in this talk we'll look into how

15
00:01:11,252 --> 00:01:14,820
we can, how we can address each

16
00:01:14,852 --> 00:01:17,184
of those using different techniques.

17
00:01:17,724 --> 00:01:21,188
So first let's see how we can make our API

18
00:01:21,236 --> 00:01:24,904
secure. There are a couple of things that need

19
00:01:24,944 --> 00:01:28,408
to be done when you're working with security and

20
00:01:28,456 --> 00:01:31,952
authentication and authorization. First of all, like if you

21
00:01:31,968 --> 00:01:35,920
are using conventional username password, it's best to use token based

22
00:01:35,952 --> 00:01:39,604
authentication as it is more secure and also

23
00:01:39,944 --> 00:01:43,840
know when like what type of token to use. In what kind of scenario

24
00:01:43,912 --> 00:01:47,504
like access token or id token, you could use

25
00:01:47,544 --> 00:01:50,744
something like assigned JWT with strong algorithm and

26
00:01:50,784 --> 00:01:55,408
strong secret. However, we all know that JWT

27
00:01:55,456 --> 00:01:58,968
comes with its own set of issues, mostly regarding

28
00:01:59,016 --> 00:02:03,208
misconfiguration. This is where the newer newer way newer

29
00:02:03,376 --> 00:02:07,376
newer tech like pistol comes in, where it is more opinionated and

30
00:02:07,480 --> 00:02:10,896
leaves less room for errors. If you are using SSO,

31
00:02:10,960 --> 00:02:14,344
using Oauth, it's good. If you like, it's good to choose

32
00:02:14,384 --> 00:02:17,008
like Oauth 2.0 with proper authentication.

33
00:02:17,136 --> 00:02:21,204
Sorry, the overflows like

34
00:02:21,244 --> 00:02:24,956
when you're working with microservices authentication and authorization,

35
00:02:25,100 --> 00:02:28,612
you need to use like you it's good to use access token and

36
00:02:28,628 --> 00:02:31,716
refresh token. So it depends on the

37
00:02:31,740 --> 00:02:34,964
company and the team. The other thing that we can make our API more

38
00:02:35,004 --> 00:02:37,852
secure is use a proper course configuration.

39
00:02:38,028 --> 00:02:42,076
A lot of time we see people using leaving course configuration

40
00:02:42,140 --> 00:02:45,332
as default, which leaves API open to different,

41
00:02:45,388 --> 00:02:47,064
different problems.

42
00:02:48,514 --> 00:02:52,282
And, and most of the time when we store cookie s or so

43
00:02:52,338 --> 00:02:55,698
store token, we store it as a cookie. And in order

44
00:02:55,746 --> 00:02:58,890
to make our cookie robust or secure, there are a couple of things

45
00:02:58,922 --> 00:03:02,442
that we could do. One is enabling secure and

46
00:03:02,458 --> 00:03:06,194
HTTP only flag. Basically what this says is our

47
00:03:06,234 --> 00:03:09,818
cookies can be transmitted only if the connection is using

48
00:03:09,866 --> 00:03:13,914
TL's and means SDP. Only flag

49
00:03:14,034 --> 00:03:17,214
tells that JavaScript cannot interact with the cookie.

50
00:03:17,794 --> 00:03:21,154
We also need to store our cookie. It's good to encrypt it.

51
00:03:21,274 --> 00:03:25,210
There are a couple of different ways, but one of the widely used is

52
00:03:25,322 --> 00:03:29,058
HMAC with salt. People use salt and pepper,

53
00:03:29,106 --> 00:03:32,786
but it's HMAC with strong secrets as

54
00:03:32,810 --> 00:03:36,426
a salt should we should be good enough when we're working

55
00:03:36,490 --> 00:03:40,474
or whenever. When we are developing locally. We use SEM site policy as

56
00:03:40,514 --> 00:03:44,378
a bit relax or lax, but people forget to change the

57
00:03:44,426 --> 00:03:47,334
configuration in production to be more streamlined.

58
00:03:48,034 --> 00:03:51,778
It's good to use principle of list privilege when you're working with authentication

59
00:03:51,826 --> 00:03:55,202
and authorization. And the other thing that I

60
00:03:55,218 --> 00:03:58,610
like to do when working with API is I like to re

61
00:03:58,642 --> 00:04:02,250
authenticate user before any kind of critical change, whether it's the email

62
00:04:02,322 --> 00:04:06,042
change or password or update profile, profile update

63
00:04:06,178 --> 00:04:09,650
basically, even if they are logged in. So any

64
00:04:09,682 --> 00:04:13,554
kind of change they are trying to do should be,

65
00:04:13,594 --> 00:04:17,778
should be checked against. Is the user authenticated to the do the operation

66
00:04:17,866 --> 00:04:20,694
and also is the user are authorized to do it? Again,

67
00:04:21,154 --> 00:04:24,778
this is kind of extra guardrail we can add in

68
00:04:24,946 --> 00:04:28,586
when working with API. The other thing or

69
00:04:28,610 --> 00:04:32,386
the next thing that I wanted I'd like to do is validate inputs.

70
00:04:32,530 --> 00:04:36,354
It's good to validate and sanitize all the inputs coming in so that we protect

71
00:04:36,394 --> 00:04:40,534
ourselves from injection attacks like SQL, NoSQL or XSS.

72
00:04:41,234 --> 00:04:44,490
You could roll your own utility functions to do

73
00:04:44,522 --> 00:04:48,426
this stuff. But there are other better test libraries which you

74
00:04:48,450 --> 00:04:52,422
can leverage like validated and blue Monday. Here's an example which uses

75
00:04:52,518 --> 00:04:56,262
validators. Let's go to

76
00:04:56,278 --> 00:04:59,958
the other one. I like to create

77
00:05:00,006 --> 00:05:03,734
an audit trail of user activity. This is like, this is interesting

78
00:05:03,774 --> 00:05:07,382
because how it works is first we define set of

79
00:05:07,438 --> 00:05:10,710
activity that user is allowed to do and create.

80
00:05:10,902 --> 00:05:14,302
Then, then for users activity we create

81
00:05:14,438 --> 00:05:17,910
audit or log trail. And if user tries

82
00:05:17,982 --> 00:05:21,302
to perform any kind of activity which is outside

83
00:05:21,398 --> 00:05:24,062
its defined baseline, we alert, or,

84
00:05:24,158 --> 00:05:28,022
or basically alert the user.

85
00:05:28,078 --> 00:05:31,806
Like administrator example would be user who

86
00:05:31,830 --> 00:05:35,694
is a customer should not be trying to log into the portal. Like, so basically

87
00:05:35,814 --> 00:05:39,758
this, this like having a trail would

88
00:05:39,806 --> 00:05:43,270
help us in the retrospect of the

89
00:05:43,302 --> 00:05:47,214
things that you as a user was trying to access also, and also helps us

90
00:05:47,254 --> 00:05:51,554
proactively protect us from malicious actors.

91
00:05:53,174 --> 00:05:56,790
The next thing that I, it's good to do is

92
00:05:56,902 --> 00:06:00,022
use appropriate response as part of the, as part of

93
00:06:00,038 --> 00:06:03,422
the API response. Because let's see an

94
00:06:03,438 --> 00:06:07,074
example here. When like if in the above example we can see

95
00:06:07,414 --> 00:06:10,494
if the user doesn't exist, we say user doesn't exist,

96
00:06:10,534 --> 00:06:13,654
right? However, with this error message,

97
00:06:13,734 --> 00:06:17,598
the attacker can enumerate whether the user

98
00:06:17,646 --> 00:06:20,726
actually exists on the system or not based on the response.

99
00:06:20,830 --> 00:06:24,790
However, in order. Like instead of explicitly

100
00:06:24,822 --> 00:06:27,394
saying whether user exists or user doesn't exist,

101
00:06:28,294 --> 00:06:31,598
it's good to have a generic response for everything

102
00:06:31,726 --> 00:06:35,558
so that people cannot run like malicious actor cannot run

103
00:06:35,646 --> 00:06:39,798
enumeration attacks. So password

104
00:06:39,846 --> 00:06:43,422
management is also one of the key thing that you need to be careful when

105
00:06:43,478 --> 00:06:46,766
working with API security. It's good to use one way

106
00:06:46,790 --> 00:06:50,516
hash functions so that while storing the password and

107
00:06:50,540 --> 00:06:54,064
also while comparing them, one of the most widely used is bcrypt.

108
00:06:54,844 --> 00:06:58,756
The other thing that I like to do when working with passwords is I don't,

109
00:06:58,940 --> 00:07:02,508
I don't allow certain consecutive characters from user

110
00:07:02,556 --> 00:07:06,420
email or any of their field in their password. So what

111
00:07:06,452 --> 00:07:09,980
this does is basically eliminates attackers trying to do

112
00:07:10,012 --> 00:07:13,116
brute force based on previous known knowledge of

113
00:07:13,140 --> 00:07:16,700
their like emails or something. And the other thing, interesting thing

114
00:07:16,732 --> 00:07:20,572
that we, we can do is check user's password against

115
00:07:20,708 --> 00:07:24,604
a list of like one hundred k a million probably

116
00:07:24,684 --> 00:07:28,028
common most common password. And if it falls

117
00:07:28,076 --> 00:07:31,100
on one of those range, we just deny it.

118
00:07:31,292 --> 00:07:34,692
It's good to do that. So here is

119
00:07:34,708 --> 00:07:38,580
an example I'm checking a password to in like

120
00:07:38,692 --> 00:07:42,172
checking the request password in if

121
00:07:42,348 --> 00:07:45,764
it falls on the range of common most common use password

122
00:07:45,804 --> 00:07:49,000
and if it's, if it false, then we say password to common and send

123
00:07:49,032 --> 00:07:52,584
a status bad request. Other than that, what we could do

124
00:07:52,664 --> 00:07:56,064
is we could check for complexity. So they're making sure that

125
00:07:56,104 --> 00:07:59,736
user password has consist of certain healthy amount of

126
00:07:59,760 --> 00:08:02,680
alpha numeric characters, a string or and,

127
00:08:02,712 --> 00:08:06,880
and numbers and different like uppercase and lowercase

128
00:08:06,952 --> 00:08:10,936
list. And we make sure like certain length is also fulfilled.

129
00:08:11,080 --> 00:08:14,152
We don't want the password to be too short so that it could, it is

130
00:08:14,208 --> 00:08:16,444
easily breakable using brute force.

131
00:08:18,284 --> 00:08:22,284
And the next thing that we could do to secure IPA is

132
00:08:22,364 --> 00:08:26,004
like using passing secret to config file instead of environment

133
00:08:26,084 --> 00:08:29,364
variables. Personally I don't like using environment

134
00:08:29,444 --> 00:08:33,260
variables, like are using secrets using on like

135
00:08:33,292 --> 00:08:36,940
passing secrets through environment variable. The main reason being

136
00:08:37,092 --> 00:08:40,972
they can be accessed from any part of the program. Like people can just go

137
00:08:41,068 --> 00:08:44,780
like to osgod like get amp and then

138
00:08:44,932 --> 00:08:48,554
fetch the secrets. Instead of that you could just pass

139
00:08:48,594 --> 00:08:51,722
the secret from environment where like config file.

140
00:08:51,898 --> 00:08:55,698
Because now when you load the config file and pass it to each

141
00:08:55,746 --> 00:08:58,986
functions which require it to like direct argument or

142
00:08:59,010 --> 00:09:03,066
dependency injection, like you are basically the single

143
00:09:03,090 --> 00:09:06,482
like single instance of that configuration is being passed around throughout the

144
00:09:06,498 --> 00:09:10,370
program. And also you can lock the like

145
00:09:10,442 --> 00:09:14,318
lock the file with file system permissions as well.

146
00:09:14,446 --> 00:09:17,646
So it's like, I find it much much more like

147
00:09:17,790 --> 00:09:20,878
what you call gated compared to environment variables.

148
00:09:21,046 --> 00:09:25,478
So here's an example of server struct which, which has configuration

149
00:09:25,526 --> 00:09:29,118
as a dependency and you can pass it using like

150
00:09:29,166 --> 00:09:30,714
pointer receiver.

151
00:09:32,814 --> 00:09:37,070
The next thing that we can do to make our API more secured is

152
00:09:37,262 --> 00:09:40,554
secure is masking sensitive data.

153
00:09:41,114 --> 00:09:44,666
Basically we want, we want to mask

154
00:09:44,730 --> 00:09:49,162
any kind of sensitive data which might reveal user information while

155
00:09:49,258 --> 00:09:53,234
either it's in transit or address. So there are different techniques

156
00:09:53,314 --> 00:09:56,906
like just using the masking data masking technique where you

157
00:09:56,930 --> 00:10:00,614
could just like encrypt the data as well or use to organization

158
00:10:01,714 --> 00:10:06,010
depending on the circumstances. So next

159
00:10:06,042 --> 00:10:09,254
thing that we could do to implement is implement rate limiting.

160
00:10:09,594 --> 00:10:13,226
People get confused like how limiting actually

161
00:10:13,290 --> 00:10:17,082
helps in security, but, but it helps us to prevent abuse and

162
00:10:17,098 --> 00:10:21,402
protection using DDoS attack. So basically

163
00:10:21,458 --> 00:10:24,882
we don't want people like malicious actors

164
00:10:24,938 --> 00:10:28,538
slamming our API endpoint and, and like dosing

165
00:10:28,586 --> 00:10:32,258
it, right? So it's good to implement rate limiting

166
00:10:32,306 --> 00:10:35,946
algorithm. There are different algorithm like fixed window account,

167
00:10:36,090 --> 00:10:39,294
leaky bucket and token bucket. However,

168
00:10:39,714 --> 00:10:43,418
implementing rate limiting, we need to consider a couple of things as well.

169
00:10:43,506 --> 00:10:46,666
One is we need to plan for burst. There might be some situation

170
00:10:46,730 --> 00:10:50,090
where certain source of traffic might come, like example

171
00:10:50,122 --> 00:10:53,586
salesbitting problem. Or we

172
00:10:53,610 --> 00:10:57,162
need to make sure like we need

173
00:10:57,178 --> 00:11:00,978
to make sure like each endpoint are different and each

174
00:11:01,026 --> 00:11:04,654
endpoint like traffic on each endpoint come

175
00:11:04,734 --> 00:11:07,246
at different rate. For example,

176
00:11:07,390 --> 00:11:11,014
password reset API endpoint might not receive same

177
00:11:11,094 --> 00:11:14,614
amount of requests, same number of requests per like per

178
00:11:14,734 --> 00:11:19,094
minute or per second compared to get orders or list

179
00:11:19,254 --> 00:11:22,734
items, right. So we need to make sure like each of

180
00:11:22,774 --> 00:11:26,634
them have like specific rate limiting policies applied to it.

181
00:11:27,014 --> 00:11:31,032
And what I like to do is implement like respond

182
00:11:31,128 --> 00:11:34,244
the rate limit as part of the response metadata.

183
00:11:34,744 --> 00:11:38,584
For example, here I am responding the total limit

184
00:11:38,624 --> 00:11:42,840
of the request and the remaining amount of rate

185
00:11:42,992 --> 00:11:47,448
limit. And also like when the next time the like

186
00:11:47,576 --> 00:11:52,728
rate limit window would be re

187
00:11:52,856 --> 00:11:57,032
initiated. Basically this is, this is the next time

188
00:11:57,208 --> 00:12:00,564
the rate limit would be reset.

189
00:12:02,984 --> 00:12:06,776
Next thing that we could do to secure our API is having

190
00:12:06,840 --> 00:12:10,024
us like HTTPs connection between client and the server

191
00:12:10,064 --> 00:12:13,564
or API. And we could also implement

192
00:12:14,344 --> 00:12:17,136
API to support TL's natively.

193
00:12:17,320 --> 00:12:20,976
This is like kind of good practice because not always we

194
00:12:21,000 --> 00:12:24,368
will have some kind of proxy sitting in front of our API

195
00:12:24,416 --> 00:12:28,410
to terminate the TL's. It's good to have

196
00:12:28,442 --> 00:12:32,534
the functionality where you can natively support TL's if need be.

197
00:12:33,874 --> 00:12:37,330
And other thing that we need to be very careful

198
00:12:37,402 --> 00:12:41,242
is we can't build everything on our own, right? There are

199
00:12:41,338 --> 00:12:44,770
instances where we need to use external libraries.

200
00:12:44,962 --> 00:12:48,410
This is where staying on top of your patch management is

201
00:12:48,482 --> 00:12:52,018
a must. And I use tools like a sneak GitHub

202
00:12:52,066 --> 00:12:55,398
dependable and even if it's too noisy, this, it gives,

203
00:12:55,446 --> 00:12:59,110
it gives you at least like helps you stay on top of your patch

204
00:12:59,142 --> 00:13:02,302
management. And, and using tools like CSM,

205
00:13:02,358 --> 00:13:06,154
like CSM, tools like Wiz is like added benefit.

206
00:13:07,414 --> 00:13:11,206
So we talked about how we can make our API secure. Let's see how

207
00:13:11,230 --> 00:13:14,422
we can make it fast. I had

208
00:13:14,438 --> 00:13:17,830
to put it here like there are countless instances

209
00:13:17,902 --> 00:13:21,178
I've seen developers using select asterisk to get

210
00:13:21,226 --> 00:13:25,214
in the data and then perform the conditional queries.

211
00:13:26,314 --> 00:13:30,122
However, the problem with this type of query or this query

212
00:13:30,218 --> 00:13:33,338
is it loads everything into the memory

213
00:13:33,386 --> 00:13:37,730
and then performs the logical operation instead

214
00:13:37,762 --> 00:13:41,522
of that. If you know what are the fields that you are looking after

215
00:13:41,578 --> 00:13:44,706
or looking for, you can explicitly define okay,

216
00:13:44,730 --> 00:13:48,216
I need this column from this database where, where the

217
00:13:48,240 --> 00:13:52,224
details is this. And, and basically what this does is it reduces

218
00:13:52,264 --> 00:13:56,764
the total amount or optimizes your query. And, and basically

219
00:13:57,184 --> 00:14:00,896
the, the load or like resource load on

220
00:14:00,920 --> 00:14:04,776
the database would be much much smaller. And if

221
00:14:04,800 --> 00:14:08,400
you find like multiple column, like same column being requested a lot

222
00:14:08,432 --> 00:14:11,874
of time we could, what we could do is implement indexing

223
00:14:11,984 --> 00:14:15,434
so that it is more efficient and optimized.

224
00:14:16,414 --> 00:14:20,326
The other thing that we could do is minimize redundant queries within our API as

225
00:14:20,350 --> 00:14:20,914
well.

226
00:14:24,974 --> 00:14:28,342
So next thing that we can do to make our API fast is implement

227
00:14:28,398 --> 00:14:30,834
caching. I think this is a no brainer.

228
00:14:31,214 --> 00:14:34,590
If the same thing is being repeated again and again without being changed,

229
00:14:34,622 --> 00:14:38,512
it's good to cache it, right? Because it has a

230
00:14:38,528 --> 00:14:42,264
lot of benefit. One is like it reduces the latency.

231
00:14:42,424 --> 00:14:46,120
The next thing is it maybe like it

232
00:14:46,192 --> 00:14:49,328
puts lesser load on the database as well because

233
00:14:49,416 --> 00:14:53,160
now API doesn't need to actually like talk to the database,

234
00:14:53,192 --> 00:14:56,928
database doesn't need to do the processing and return the value. There are different

235
00:14:56,976 --> 00:15:00,344
ways you can cast one is in memory, or you can use external key value

236
00:15:00,384 --> 00:15:03,768
stories like Redis and I like to

237
00:15:03,856 --> 00:15:07,230
respond, respond with like cache

238
00:15:07,302 --> 00:15:10,982
cache control headers like etag or cache control so that

239
00:15:11,078 --> 00:15:14,526
client can cache certain data for like on

240
00:15:14,630 --> 00:15:18,758
if they have the capacity to do that. And leveraging

241
00:15:18,806 --> 00:15:22,550
CDN for static contents like images binaries is

242
00:15:22,582 --> 00:15:26,350
also a good idea. The next

243
00:15:26,382 --> 00:15:30,114
thing that we can do to improve our API performance is pagination.

244
00:15:30,454 --> 00:15:34,286
Basically, instead of returning all the data and trying to

245
00:15:34,310 --> 00:15:37,752
organize into group, what we say is I only need

246
00:15:37,808 --> 00:15:41,328
this much like this first ten data

247
00:15:41,496 --> 00:15:45,344
and, and then you request the next ten data. What this

248
00:15:45,384 --> 00:15:48,944
does is it reduces the data transfer size and which,

249
00:15:48,984 --> 00:15:52,240
which ultimately makes our query much faster and,

250
00:15:52,272 --> 00:15:55,976
and if it like effectively makes our like reduces the latency as

251
00:15:56,000 --> 00:15:59,032
well. So pagination, like using pagination,

252
00:15:59,088 --> 00:16:02,760
we can make our API like pagination is not

253
00:16:02,792 --> 00:16:06,072
just for what you call you. You don't have to use pagination

254
00:16:06,128 --> 00:16:10,150
just for like making it look nice, but it also actually helps

255
00:16:10,182 --> 00:16:13,206
in making your API much fast.

256
00:16:13,390 --> 00:16:16,950
You can use different techniques like cursor based pagination or offset based.

257
00:16:17,022 --> 00:16:20,886
Here I'm using offset based pagination where I specify

258
00:16:20,950 --> 00:16:23,434
the page number and the total page size I want.

259
00:16:25,574 --> 00:16:29,334
And I think everybody seen this coming. If your application is

260
00:16:29,374 --> 00:16:32,994
too large, it's good to break it into smaller services.

261
00:16:34,134 --> 00:16:37,454
Breaking your application into microservices helps you make it

262
00:16:37,494 --> 00:16:40,646
like make the application independently scalable, maintainable,

263
00:16:40,710 --> 00:16:44,674
update able. Like it will be resilient to failure

264
00:16:45,174 --> 00:16:48,086
if you make it right and future proof as well.

265
00:16:48,150 --> 00:16:50,686
So microservice is good. However,

266
00:16:50,790 --> 00:16:54,766
microservice is also a double edged sword like sword.

267
00:16:54,870 --> 00:16:58,714
A lot of time we see people implementing microservice just because

268
00:16:59,164 --> 00:17:02,772
things like they think it is good. However, like do

269
00:17:02,788 --> 00:17:06,556
not just go about converting your app into micro service just because you

270
00:17:06,580 --> 00:17:09,700
can, right? For personally, I think what I think

271
00:17:09,732 --> 00:17:13,700
is microservice is only required if each business

272
00:17:13,772 --> 00:17:17,196
unit or each domain of your

273
00:17:17,260 --> 00:17:21,196
app is handled by separate teams. An example would be like fulfillment,

274
00:17:21,300 --> 00:17:26,043
order processing or payment. So yeah,

275
00:17:26,743 --> 00:17:30,279
now we talked about how we can make our API secure. We talked

276
00:17:30,311 --> 00:17:33,623
about how we can make it fast. Let's, let's see how

277
00:17:33,663 --> 00:17:37,471
we can make our API robust. The one thing

278
00:17:37,487 --> 00:17:41,775
that I follow is fail early, fail fast approach. Basically what

279
00:17:41,839 --> 00:17:46,135
it says like what this means is we fail immediately

280
00:17:46,199 --> 00:17:50,055
if something, some condition are not satisfied. Like we don't wait until,

281
00:17:50,119 --> 00:17:53,654
until, until the actual like resource is, is required.

282
00:17:54,074 --> 00:17:57,826
This helps to reduce cascading failures and also helps

283
00:17:57,850 --> 00:18:01,250
us quickly identify different issues issues before they

284
00:18:01,282 --> 00:18:05,194
become a major concern. And in general it makes the API

285
00:18:05,234 --> 00:18:08,130
more robust and stable. So here's an example.

286
00:18:08,282 --> 00:18:11,482
Since our server is dependent on configuration

287
00:18:11,578 --> 00:18:15,378
from past configuration like protocol or

288
00:18:15,426 --> 00:18:18,478
TL's passed from the config file, we,

289
00:18:18,546 --> 00:18:22,046
we first check whether config file is present. If it's not,

290
00:18:22,190 --> 00:18:25,662
we just feel like immediately return the error and fail.

291
00:18:25,798 --> 00:18:29,114
So this is a good example of fail fast and fail early.

292
00:18:30,814 --> 00:18:34,742
Let's look at the next slide. Yeah. The other thing

293
00:18:34,878 --> 00:18:38,310
which we can do to make our API more robust is

294
00:18:38,422 --> 00:18:41,154
use appropriate status code based on the situation.

295
00:18:42,014 --> 00:18:45,614
So like, let's see an example here.

296
00:18:46,634 --> 00:18:50,074
Here we have to get responses to API admin.

297
00:18:50,234 --> 00:18:54,370
One returns 401 unauthorized and the other one responds with

298
00:18:54,442 --> 00:18:58,094
403 forbidden. Now suppose,

299
00:18:58,474 --> 00:19:02,474
suppose user logs in the credential are correct,

300
00:19:02,554 --> 00:19:06,642
but the user is not allowed to access the page. Now which,

301
00:19:06,698 --> 00:19:10,394
which response code do you think is the correct

302
00:19:10,434 --> 00:19:14,238
one? This is the like correct

303
00:19:14,326 --> 00:19:17,750
and more more readable one, right? Because you

304
00:19:17,902 --> 00:19:21,126
401 unauthorized means like credential

305
00:19:21,190 --> 00:19:25,486
was correct but user is not authorized to do something. So basically what?

306
00:19:25,550 --> 00:19:29,478
Like basically using appropriate status code, it helps us like add

307
00:19:29,526 --> 00:19:32,534
more clarity and understandability to your API as well.

308
00:19:32,574 --> 00:19:35,634
And also it helps us to easily detect the error.

309
00:19:35,974 --> 00:19:39,526
However, we don't want to, as discussed previously as

310
00:19:39,550 --> 00:19:43,134
well, we don't want to reveal too much information which would be,

311
00:19:43,174 --> 00:19:46,174
which can be used against us to compromise our security.

312
00:19:46,254 --> 00:19:49,874
So we need to find that sweet spot between security and robustness.

313
00:19:53,174 --> 00:19:56,670
And yeah, I think every, like all

314
00:19:56,702 --> 00:20:00,014
the groupers know this, don't just check errors,

315
00:20:00,054 --> 00:20:03,714
handle them gracefully because just returning

316
00:20:03,754 --> 00:20:08,250
nil. Okay, looks like I did a typo over here. It shouldn't be capital like,

317
00:20:08,282 --> 00:20:12,050
please forgive me. However, like don't just return error

318
00:20:12,082 --> 00:20:15,170
like this. They call it naked, naked error

319
00:20:15,202 --> 00:20:18,362
or something like that. It doesn't have any

320
00:20:18,418 --> 00:20:21,954
information. It doesn't give you more idea what actually happened and caused

321
00:20:21,994 --> 00:20:25,254
the error. So adding context to error is a good idea.

322
00:20:26,274 --> 00:20:30,814
So what I, what I personally try to do is I only

323
00:20:30,894 --> 00:20:34,406
panic on the main function and any function outside the

324
00:20:34,430 --> 00:20:37,194
main or any of the modules,

325
00:20:37,614 --> 00:20:40,990
I return the error back to the main function and

326
00:20:41,062 --> 00:20:45,070
return them up the call stack. So basically, suppose if something,

327
00:20:45,222 --> 00:20:48,518
some error occurred, I would return, create an error

328
00:20:48,566 --> 00:20:52,142
and then return it, return it up the call stack so that it

329
00:20:52,158 --> 00:20:55,894
can be printed with a nice, nice context around

330
00:20:55,934 --> 00:20:56,514
it.

331
00:21:00,084 --> 00:21:03,460
So the next thing that we could do to make our API

332
00:21:03,492 --> 00:21:06,660
robust is passing context. Context as in here,

333
00:21:06,692 --> 00:21:09,948
I mean, request id require, like passing request

334
00:21:09,996 --> 00:21:13,828
id on each request helps in tracing and debugging here.

335
00:21:13,916 --> 00:21:17,620
Let's look an example over here. Right? So somebody did a post request

336
00:21:17,692 --> 00:21:21,316
and the request id is this. And let's,

337
00:21:21,380 --> 00:21:24,824
let's assume the request came in and

338
00:21:25,324 --> 00:21:28,196
the request was successful, but the client,

339
00:21:28,260 --> 00:21:31,436
like we sent a response, client was not able to get

340
00:21:31,460 --> 00:21:35,180
the response for some reason, and it tried to retry again with the same request

341
00:21:35,212 --> 00:21:39,024
id. Now if we pass the request id,

342
00:21:39,484 --> 00:21:43,316
we can check whether this id is already seen or not. And if

343
00:21:43,340 --> 00:21:46,804
it's already seen, we can actually ignore

344
00:21:46,924 --> 00:21:50,490
or don't don't take any action on this request.

345
00:21:50,652 --> 00:21:54,534
So it's really good idea to pass id request

346
00:21:54,574 --> 00:21:58,126
id when you are dealing with APIs and there

347
00:21:58,150 --> 00:22:01,830
are other benefits as well, it helps you to correlate between different logs.

348
00:22:01,862 --> 00:22:06,910
Because when we aggregate log all the log into single

349
00:22:06,942 --> 00:22:10,454
location, we know like not

350
00:22:10,494 --> 00:22:14,046
all logs comes at the same time. And it helps like using request id helps

351
00:22:14,070 --> 00:22:17,480
us correlate. And also you can pass it with the

352
00:22:17,512 --> 00:22:21,248
tools like JQ, right? It's your integration

353
00:22:21,296 --> 00:22:24,608
with tools like Sentry, Jaeger and like

354
00:22:24,656 --> 00:22:26,604
in general maintain idem potency.

355
00:22:29,784 --> 00:22:31,364
Let's go next one.

356
00:22:33,104 --> 00:22:36,848
Yeah, so the other thing that we can do to make our API more

357
00:22:36,896 --> 00:22:39,680
robust is make it acid compliant.

358
00:22:39,832 --> 00:22:43,284
What? Acid compliant? I'm like, what I mean by that is

359
00:22:44,384 --> 00:22:48,104
our database transaction from our API should be either

360
00:22:48,184 --> 00:22:51,656
all or nothing. So suppose if you are using, if you are

361
00:22:51,680 --> 00:22:57,392
using a banking, like creating a banking application where user

362
00:22:57,448 --> 00:23:02,084
was charged, the user bought something and

363
00:23:02,744 --> 00:23:06,136
when user buys something, some amount needs to be deducted

364
00:23:06,160 --> 00:23:09,624
from their account, right? But for some reason the account got

365
00:23:09,664 --> 00:23:13,438
like amount got deducted but the checkout

366
00:23:13,486 --> 00:23:16,846
was not successful. There should be some

367
00:23:16,910 --> 00:23:20,750
mechanism where you set up so that if the order fails

368
00:23:20,902 --> 00:23:25,214
the transaction for reducing like deducting the amount should also be rolled back.

369
00:23:25,334 --> 00:23:29,318
So this is where like using context and transaction makes the operation

370
00:23:29,406 --> 00:23:33,150
more asset compliant. And it is more like

371
00:23:33,302 --> 00:23:36,654
making API asset compliance is much really important when you are working

372
00:23:36,694 --> 00:23:40,382
with multicultural collection updates because

373
00:23:40,438 --> 00:23:43,198
updating to one collection might work,

374
00:23:43,246 --> 00:23:47,394
whereas might not work for the other one. So it's good idea.

375
00:23:51,054 --> 00:23:54,486
Let's make it next. Yeah, the next thing that we

376
00:23:54,510 --> 00:23:58,486
could do is use structured log. Like as said

377
00:23:58,550 --> 00:24:01,566
in request id are passing context.

378
00:24:01,670 --> 00:24:05,340
Context request id using structured log helps you

379
00:24:05,372 --> 00:24:09,060
maintain and it helps you to like debug and search search

380
00:24:09,092 --> 00:24:13,660
your logs easier as well. Using structured log you can directly

381
00:24:13,772 --> 00:24:17,900
integrate with tools like low key or other different observability

382
00:24:18,012 --> 00:24:21,540
tools. The next thing that we could

383
00:24:21,572 --> 00:24:25,852
do to make our application more robust is implement health check.

384
00:24:26,028 --> 00:24:29,000
Here's an example of readiness and liveliness.

385
00:24:29,092 --> 00:24:32,696
Uh, health check response. So basically

386
00:24:32,800 --> 00:24:36,376
health checks has a lot of benefit,

387
00:24:36,560 --> 00:24:40,080
mainly be being like, you know, whether your application is

388
00:24:40,112 --> 00:24:43,576
running or not and also whether the application is ready to receive the

389
00:24:43,600 --> 00:24:46,484
workload or not. So this is like,

390
00:24:47,184 --> 00:24:50,728
this concept is like it is already used in

391
00:24:50,776 --> 00:24:54,216
containers or docker containers as well. However,

392
00:24:54,320 --> 00:24:57,502
there's no reason for us to not not use the same in

393
00:24:57,518 --> 00:25:00,830
our APIs as well. It like you can use it for service discovery,

394
00:25:00,862 --> 00:25:03,874
you can use it for auto scaling and load balancing.

395
00:25:04,254 --> 00:25:08,102
So here this is the example of readiness,

396
00:25:08,238 --> 00:25:11,526
sorry, liveliness probe. So liveliness response or health

397
00:25:11,550 --> 00:25:14,566
check where we like see,

398
00:25:14,670 --> 00:25:18,214
check whether the server is running or not with with like commit

399
00:25:18,254 --> 00:25:22,264
id, branch and tag. And here we are checking whether the

400
00:25:22,344 --> 00:25:25,928
services that the API depend on are okay and the connection

401
00:25:25,976 --> 00:25:29,712
is successful or not. This is where like we, we verify whether the

402
00:25:29,728 --> 00:25:32,684
application is ready to receive the workload.

403
00:25:34,904 --> 00:25:38,712
The other thing that we could do to make our API more robust is

404
00:25:38,768 --> 00:25:41,804
handle retries really gracefully.

405
00:25:42,744 --> 00:25:46,280
So let's imagine like some

406
00:25:46,392 --> 00:25:49,662
client got booked and it kept on retrying the

407
00:25:49,678 --> 00:25:52,954
same request again and again. Like we call it retry storm.

408
00:25:53,694 --> 00:25:57,254
Other than like having a bad user experience,

409
00:25:57,374 --> 00:26:00,950
it adds loads to the load to the server because it

410
00:26:00,982 --> 00:26:04,998
like we are effectively trying dosing our server,

411
00:26:05,166 --> 00:26:08,374
our API. The, the way we could resolve

412
00:26:08,414 --> 00:26:11,894
this is using a technique called exponential backup where client like

413
00:26:11,934 --> 00:26:15,950
progressively awaits longer time. Like longer

414
00:26:15,982 --> 00:26:19,518
time is like longer each time like

415
00:26:19,606 --> 00:26:23,326
backup limit is reached. So this makes API

416
00:26:23,390 --> 00:26:26,870
more fault tolerant and also more reliable. And it helps

417
00:26:26,902 --> 00:26:30,030
in resource utilization as well because now API

418
00:26:30,062 --> 00:26:33,314
doesn't need to handle all those like bogus retries.

419
00:26:36,094 --> 00:26:38,154
Why is it going to, yeah,

420
00:26:41,074 --> 00:26:44,090
so yeah, as I mentioned before,

421
00:26:44,282 --> 00:26:49,018
while handling retries as well, you could use appropriate status

422
00:26:49,066 --> 00:26:52,890
code. I like to use 429 and 503 for

423
00:26:52,922 --> 00:26:56,362
scenarios like this. And also I like to respond

424
00:26:56,418 --> 00:27:00,130
with retry after header. So basically now client knows

425
00:27:00,242 --> 00:27:03,134
after like how long to wait before trying again.

426
00:27:05,774 --> 00:27:09,310
The other thing that we could do to make our API more, more robust

427
00:27:09,382 --> 00:27:13,742
is expose metrics. Basically exposing time series metrics

428
00:27:13,798 --> 00:27:17,406
of your application. It helps you like it

429
00:27:17,430 --> 00:27:20,966
helps you, exposing your metrics helps you to set up

430
00:27:20,990 --> 00:27:24,874
a baseline and then compare, compare that baseline with

431
00:27:25,374 --> 00:27:29,142
when the application starts to receive the metrics. And now

432
00:27:29,198 --> 00:27:32,862
that comparison can be used for a lot of different benefits such as

433
00:27:32,918 --> 00:27:36,846
like detecting anomalies. Like if there anything suspicious going

434
00:27:36,910 --> 00:27:40,374
on on the application with the application we can use it for planning,

435
00:27:40,414 --> 00:27:43,846
like capacity planning. We could use it to set up SLA's

436
00:27:43,870 --> 00:27:47,326
with other team or our customers. And also,

437
00:27:47,390 --> 00:27:50,614
yeah, in the identify like use that

438
00:27:50,694 --> 00:27:52,674
as part of the root cause analysis.

439
00:27:58,474 --> 00:28:02,050
And the next thing that we could do to make our API more robust is

440
00:28:02,122 --> 00:28:05,546
version them. I think we all are aware of it. Making versioning

441
00:28:05,570 --> 00:28:09,314
our API makes our like makes it more maintainable,

442
00:28:09,474 --> 00:28:13,026
stable and flexible. And like it makes the

443
00:28:13,050 --> 00:28:16,450
API adaptable as well. Like we have. We want to make our

444
00:28:16,522 --> 00:28:20,418
API to be backward compatible as well because some

445
00:28:20,506 --> 00:28:24,348
provider or some client or some customers of our API might not

446
00:28:24,506 --> 00:28:28,520
be interested in upgrading to a newer version because they have implemented

447
00:28:28,552 --> 00:28:32,040
the solution in such a way that they can't use the newer feature that was

448
00:28:32,072 --> 00:28:35,824
released. So version your API is really good idea for making

449
00:28:35,864 --> 00:28:39,904
it more robust. In conclusion,

450
00:28:39,944 --> 00:28:43,776
building a robust API is trying to like watch a movie in this nineties

451
00:28:43,840 --> 00:28:48,204
tv, right? We twist and turn the norms to find the sweet spot and

452
00:28:49,464 --> 00:28:53,610
where we are happy with brightness, jitter and sound and picture quality.

453
00:28:53,722 --> 00:28:57,282
So it's all about finding that sweet spot.

454
00:28:57,458 --> 00:29:01,210
So thank you for watching. Thank you for

455
00:29:01,242 --> 00:29:04,970
listening to me. You can scan this QR code to reach out to me

456
00:29:05,002 --> 00:29:08,290
directly. Really appreciate you listening

457
00:29:08,322 --> 00:29:11,074
to the talk and enjoy the rest of the conference. Thank you.

