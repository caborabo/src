1
00:00:24,570 --> 00:00:29,000
Alright everyone, let's kick off the session with a brief introduction about

2
00:00:29,690 --> 00:00:33,446
what AWS code pipeline is and what are

3
00:00:33,468 --> 00:00:36,726
the advantages of AWS codepipeline. Some of the

4
00:00:36,748 --> 00:00:40,066
key components involved and how a sample

5
00:00:40,098 --> 00:00:43,366
pipeline looks like. And then we can jump off to

6
00:00:43,388 --> 00:00:46,870
our demo session, we can go to the AWS

7
00:00:47,450 --> 00:00:50,846
console, and then we can see how we

8
00:00:50,868 --> 00:00:53,390
can create a simple codepipeline.

9
00:00:54,210 --> 00:00:57,934
First things first, let's talk a little bit

10
00:00:57,972 --> 00:01:01,502
about AWS codepipeline background and why

11
00:01:01,556 --> 00:01:04,994
it's advantages to use it and what

12
00:01:05,032 --> 00:01:08,594
are some of the stages involved. So the AWS code

13
00:01:08,632 --> 00:01:12,094
pipeline is a fully managed, continuous integration

14
00:01:12,222 --> 00:01:14,340
and continuous delivery service.

15
00:01:14,890 --> 00:01:18,818
So it's a cloud native solution, fully managed by AWS

16
00:01:18,914 --> 00:01:22,226
and highly configurable by users. It helps

17
00:01:22,258 --> 00:01:25,798
automate release deployment pipelines for fast and

18
00:01:25,884 --> 00:01:29,450
reliable application and infrastructure updates.

19
00:01:29,790 --> 00:01:33,594
Traditionally, a large number of organizations use

20
00:01:33,632 --> 00:01:36,970
third party tools like Jenkins for software development.

21
00:01:37,390 --> 00:01:41,522
So code pipeline offers native solutions to those organizations

22
00:01:41,606 --> 00:01:44,714
which are already heavily invested in AWS

23
00:01:44,762 --> 00:01:49,466
ecosystem. Coming to the advantages of AWS

24
00:01:49,578 --> 00:01:53,234
codepipeline, first and foremost is obviously the

25
00:01:53,272 --> 00:01:56,494
integration with AWS services. It offers

26
00:01:56,542 --> 00:01:59,954
a native out of box integration with many

27
00:01:59,992 --> 00:02:02,734
of AWS services like lambda,

28
00:02:02,862 --> 00:02:05,830
EC, two, S three and cloud formation.

29
00:02:06,810 --> 00:02:10,454
Now, I'm just comparing it with one of the popular third

30
00:02:10,492 --> 00:02:14,770
party tool Jenkins throughout this session.

31
00:02:14,850 --> 00:02:18,414
So if I were to contrast it with Jenkins,

32
00:02:18,562 --> 00:02:22,266
the main difference would be that while the integration with the cloud services

33
00:02:22,368 --> 00:02:26,650
is possible, it usually requires third party plugins and

34
00:02:26,720 --> 00:02:30,398
additional setup, potentially introducing more points of failure or

35
00:02:30,484 --> 00:02:33,790
compatibility issues. Coming to the next

36
00:02:33,860 --> 00:02:36,910
crucial aspect is obviously scalability.

37
00:02:37,890 --> 00:02:41,946
Since it's part of the AWS suite, it natively scales according

38
00:02:41,978 --> 00:02:45,426
to the demands of the deployment pipeline, so there's no

39
00:02:45,448 --> 00:02:49,518
need for manual intervention, which in itself kind of like ensuring

40
00:02:49,614 --> 00:02:53,010
consistent performance even during peak loads.

41
00:02:53,510 --> 00:02:57,062
Jenkins on the other side requires some

42
00:02:57,116 --> 00:03:00,722
adjustments, such as like adding agent nodes or reallocating

43
00:03:00,786 --> 00:03:04,642
resources, which is both time consuming and resource

44
00:03:04,706 --> 00:03:08,106
intensive since we

45
00:03:08,128 --> 00:03:11,340
need some dedicated personnel taking care of that.

46
00:03:12,270 --> 00:03:15,782
Continuing with the other advantages of AWS

47
00:03:15,846 --> 00:03:19,414
code pipeline, we are going to touch upon the maintenance,

48
00:03:19,542 --> 00:03:22,880
security, the pricing and long term value.

49
00:03:23,410 --> 00:03:25,470
So maintenance wise,

50
00:03:26,290 --> 00:03:29,598
since AWS code pipeline is a managed service,

51
00:03:29,764 --> 00:03:33,774
AWS handles all the updates, patches and backups.

52
00:03:33,902 --> 00:03:37,554
So this ensures that the latest features and

53
00:03:37,672 --> 00:03:41,122
security patches are always in place without us having

54
00:03:41,176 --> 00:03:44,974
to do much there and us

55
00:03:45,032 --> 00:03:48,040
having to not manually intervene there.

56
00:03:48,650 --> 00:03:52,434
Jenkins, on the other hand, requires periodic manual

57
00:03:52,482 --> 00:03:55,110
updates, backups and patching,

58
00:03:55,850 --> 00:03:59,094
which can kind of introduce compatibility issues

59
00:03:59,212 --> 00:04:03,602
or security vulnerabilities, which kind of

60
00:04:03,756 --> 00:04:06,970
demand regular monitoring and adjustments.

61
00:04:08,110 --> 00:04:11,706
Coming to the security aspect of the deployment pipelines.

62
00:04:11,818 --> 00:04:15,166
So one of the advantages of

63
00:04:15,268 --> 00:04:18,890
using AWS solution here is the comprehensive

64
00:04:18,970 --> 00:04:22,526
security model, which we are able to leverage the

65
00:04:22,548 --> 00:04:26,702
features like IAM roles, secrets, managers and

66
00:04:26,756 --> 00:04:30,130
other fine brained controls like service roles.

67
00:04:30,550 --> 00:04:35,146
So all these can be natively tied up to the code pipeline

68
00:04:35,198 --> 00:04:39,410
itself, which kind of ensures robust security standards

69
00:04:39,490 --> 00:04:43,426
along with your other tools. So on the Jenkins

70
00:04:43,458 --> 00:04:46,534
side, if you were to achieve a similar security

71
00:04:46,652 --> 00:04:49,930
level, it requires additional configurations,

72
00:04:50,270 --> 00:04:53,402
plugins and tools, which in itself can again

73
00:04:53,456 --> 00:04:56,794
sometimes introduce more vulnerabilities and

74
00:04:56,912 --> 00:05:00,474
unnecessary complexities and the pricing and

75
00:05:00,512 --> 00:05:03,782
long term value. Since AWS operates

76
00:05:03,846 --> 00:05:07,454
on like a pay as you go model, you only pay for what you

77
00:05:07,492 --> 00:05:10,538
use. So this can be cost effective,

78
00:05:10,714 --> 00:05:15,010
especially if we have variable workloads.

79
00:05:15,750 --> 00:05:18,882
On the Jenkins side, the software itself is open

80
00:05:18,936 --> 00:05:22,782
source, but however, maintaining the Jenkins infrastructure,

81
00:05:22,926 --> 00:05:26,406
accounting for all the patching and keeping it up

82
00:05:26,428 --> 00:05:29,542
to date itself can add up over a long

83
00:05:29,596 --> 00:05:33,682
period of time when you consider the time and resources

84
00:05:33,746 --> 00:05:36,870
invested into it. So that kind of

85
00:05:36,940 --> 00:05:40,614
wraps up on the key advantages of

86
00:05:40,652 --> 00:05:44,698
AWS code pipelines. Now we can briefly discuss

87
00:05:44,784 --> 00:05:48,410
into the working of code pipeline and then

88
00:05:48,480 --> 00:05:51,466
we can jump off to a demo session.

89
00:05:51,658 --> 00:05:55,280
So the key components involved in a codepipeline are

90
00:05:55,970 --> 00:05:59,422
the conceptually similar to any other deployment tool

91
00:05:59,476 --> 00:06:02,718
where you have a source stage. You either have

92
00:06:02,804 --> 00:06:06,450
your application artifact or some deployment assets

93
00:06:07,190 --> 00:06:10,354
which are going to run and deploy the source code,

94
00:06:10,472 --> 00:06:14,062
and then you have a build stage, which is an optional stage,

95
00:06:14,126 --> 00:06:17,718
kind of like for compilation and an object

96
00:06:17,804 --> 00:06:20,870
generation which is eventually going to be deployed.

97
00:06:21,210 --> 00:06:24,902
So the example is AWS code build here,

98
00:06:25,036 --> 00:06:28,582
and then you have the deploy stage. It's the main deployment

99
00:06:28,646 --> 00:06:31,830
stage where the generated artifact

100
00:06:31,910 --> 00:06:35,770
that you supplied or the output of the code build stage

101
00:06:36,190 --> 00:06:39,046
is kind of like deployed in this main stage.

102
00:06:39,238 --> 00:06:43,514
Again, AWS offers multiple tools

103
00:06:43,562 --> 00:06:47,290
that can be plugged into this stage. So code deploy

104
00:06:47,370 --> 00:06:50,446
is one such tool that we are going to look at today for

105
00:06:50,468 --> 00:06:53,770
the demo. So code deploy

106
00:06:53,930 --> 00:06:57,666
ECs blue green deployments are some of these things that can be

107
00:06:57,688 --> 00:07:01,774
plugged into this particular stage. So this is how a sample

108
00:07:01,822 --> 00:07:04,898
pipeline looks like we are going to look at the demo

109
00:07:04,984 --> 00:07:08,758
and get a closer look of it. But the bottom part

110
00:07:08,844 --> 00:07:12,710
is what makes up a code pipeline code

111
00:07:12,780 --> 00:07:16,454
commit action. And the code repository is being pushed here to

112
00:07:16,492 --> 00:07:19,820
an Amazon ECS, the elastic container service,

113
00:07:20,270 --> 00:07:23,974
and which is eventually deployed via

114
00:07:24,022 --> 00:07:27,706
a code deploy ECS blue green action in this

115
00:07:27,808 --> 00:07:31,806
pipeline. So now let's jump on to

116
00:07:31,828 --> 00:07:35,246
the AWS console, and then we

117
00:07:35,268 --> 00:07:38,670
can see how we can create a simple pipeline.

118
00:07:39,090 --> 00:07:43,620
All right, this is the AWS console home.

119
00:07:44,230 --> 00:07:48,526
So you have a list of all these tools here. So let's

120
00:07:48,558 --> 00:07:50,850
go to the AWS code pipeline.

121
00:07:51,270 --> 00:07:55,906
So on the left side if you see it shows like multiple

122
00:07:56,098 --> 00:07:59,794
substages that are kind of associated with the code pipeline,

123
00:07:59,922 --> 00:08:03,926
like the source, the build stage, and the

124
00:08:03,948 --> 00:08:08,294
deploy stage. So it gives us the ability to configure

125
00:08:08,342 --> 00:08:12,262
those stages using these sources

126
00:08:12,326 --> 00:08:16,358
here. So the first thing like we discussed is setting

127
00:08:16,374 --> 00:08:21,210
up the source repository or the deployment artifact.

128
00:08:21,650 --> 00:08:25,086
So I already have an S three bucket that I

129
00:08:25,108 --> 00:08:27,760
created and I have an object there.

130
00:08:28,290 --> 00:08:32,206
So we'll be using that. For the

131
00:08:32,228 --> 00:08:35,922
purpose of this demo, we are going to skip the build stage since we

132
00:08:35,976 --> 00:08:39,890
essentially don't have any compilation or object generation,

133
00:08:40,470 --> 00:08:44,142
but the code deploy stage is necessary

134
00:08:44,206 --> 00:08:47,330
stage. So let's spend a couple of minutes

135
00:08:47,400 --> 00:08:50,674
on the building a code deploy stage, which then

136
00:08:50,712 --> 00:08:53,270
we'll later plug into the code pipeline.

137
00:08:53,610 --> 00:08:57,378
So for the code deploy. So we need to

138
00:08:57,484 --> 00:09:00,650
create an application configuration.

139
00:09:01,550 --> 00:09:05,114
So let's go to the applications. So right

140
00:09:05,152 --> 00:09:08,842
now we don't have any applications, so we can just

141
00:09:08,896 --> 00:09:12,506
create a sample application, say Java

142
00:09:12,538 --> 00:09:16,046
application and the compute platform. As an

143
00:09:16,068 --> 00:09:20,314
EC two, the application configuration

144
00:09:20,362 --> 00:09:23,714
is created and now within the application we need to

145
00:09:23,752 --> 00:09:27,246
create a deployment group. So the deployment

146
00:09:27,278 --> 00:09:30,962
group essentially kind of like configures which

147
00:09:31,016 --> 00:09:34,674
all EC two instances you want to deploy. So that

148
00:09:34,712 --> 00:09:38,280
is determined using this deployment group.

149
00:09:41,690 --> 00:09:45,126
You can add more settings like how many EC two instances you want

150
00:09:45,148 --> 00:09:48,774
to deploy at a time and what would like a failure scenario

151
00:09:48,822 --> 00:09:51,606
look like. Those are like more advanced settings,

152
00:09:51,798 --> 00:09:55,130
but you can explore this on the code deploy

153
00:09:55,790 --> 00:09:59,922
resource page. Let's enter a sample

154
00:10:00,086 --> 00:10:01,440
deployments group.

155
00:10:04,770 --> 00:10:08,366
So the service role essentially needs to have the

156
00:10:08,388 --> 00:10:11,486
code deploy access, which I already created one,

157
00:10:11,588 --> 00:10:14,914
but you can fine tune based upon the level of security

158
00:10:15,032 --> 00:10:17,810
you want for your deployments codepipeline.

159
00:10:18,150 --> 00:10:22,130
And all these are environment configurations.

160
00:10:22,950 --> 00:10:26,434
For filtering the EC two instances related to the deployment

161
00:10:26,482 --> 00:10:30,306
group, it's often done using the tag associated

162
00:10:30,338 --> 00:10:33,794
with the EC two instance, for example, like I want to deploy

163
00:10:33,842 --> 00:10:37,334
to all the prod hosts, like Env

164
00:10:37,452 --> 00:10:40,570
is prod, so it filters out all those such

165
00:10:40,640 --> 00:10:43,418
instances and it creates a deployment group.

166
00:10:43,504 --> 00:10:46,826
And at the end of the day the code pipeline deploys to

167
00:10:46,848 --> 00:10:50,238
that. So all these settings, you can leave the

168
00:10:50,244 --> 00:10:54,186
default ones if you don't have any necessary

169
00:10:54,378 --> 00:10:58,240
changes. And then we create the deployment group.

170
00:10:58,690 --> 00:11:02,654
All right, the deployment group is created for a sample application

171
00:11:02,772 --> 00:11:06,402
that we have now we can go and create

172
00:11:06,456 --> 00:11:10,606
the code pipeline. So right now we don't have anything created

173
00:11:10,638 --> 00:11:14,526
in this section. So we are going to create a brand new code pipeline.

174
00:11:14,718 --> 00:11:18,534
Say sample pipeline again,

175
00:11:18,572 --> 00:11:22,440
you can leave the default options here. It's going to create a

176
00:11:22,970 --> 00:11:26,200
service role by default. If you don't give anything,

177
00:11:27,130 --> 00:11:30,570
it looks like the service role already exists.

178
00:11:31,390 --> 00:11:34,794
Let's see if we can delete this so

179
00:11:34,832 --> 00:11:38,938
that there's no conflict. So if you go to the

180
00:11:39,104 --> 00:11:42,606
roles. So this is the IAM page where

181
00:11:42,628 --> 00:11:46,106
you have all your service roles and the policies.

182
00:11:46,218 --> 00:11:48,640
So I'm just going to remove this for now.

183
00:11:49,170 --> 00:11:52,000
It's probably there from a previous time.

184
00:11:52,710 --> 00:11:55,330
So we are just deleting an existing role.

185
00:11:55,830 --> 00:11:59,250
All right, we deleted that. Now I

186
00:11:59,320 --> 00:12:03,650
believe we should be able to create a sample pipeline.

187
00:12:04,310 --> 00:12:07,686
And the source is going to be s three. And the

188
00:12:07,708 --> 00:12:11,046
bucket is going to be this. Just need to

189
00:12:11,068 --> 00:12:14,354
enter the object inside this bucket.

190
00:12:14,482 --> 00:12:17,880
We can quickly take a look what's the object inside there.

191
00:12:18,490 --> 00:12:22,074
If you go to the s three, and if you pull

192
00:12:22,112 --> 00:12:25,466
up the s three bucket, see that there's an object.

193
00:12:25,568 --> 00:12:29,178
So take this and plug it into the object

194
00:12:29,264 --> 00:12:32,382
key here and then build.

195
00:12:32,436 --> 00:12:35,898
We are going to skip. And then the deploy,

196
00:12:35,994 --> 00:12:39,502
we just configured the code deploy right.

197
00:12:39,556 --> 00:12:43,646
So we are just going to plug in all those. We just created the Java

198
00:12:43,678 --> 00:12:47,326
application and the deployment group and that's

199
00:12:47,358 --> 00:12:51,154
pretty much it. So once we hit the create pipeline, it's going

200
00:12:51,192 --> 00:12:55,542
to take a couple of minutes here and

201
00:12:55,596 --> 00:12:58,994
voila, the pipeline has been created.

202
00:12:59,122 --> 00:13:03,574
It triggered the source and this

203
00:13:03,612 --> 00:13:08,066
is how the pipeline looks. So if you have a valid source

204
00:13:08,098 --> 00:13:12,034
artifact, it kind of triggers that and then based upon

205
00:13:12,082 --> 00:13:16,360
the deploy configuration, goes and deploys there.

206
00:13:16,730 --> 00:13:20,810
So this is how a sample pipeline looks. The scope

207
00:13:20,970 --> 00:13:24,202
for this article next would be for the session,

208
00:13:24,266 --> 00:13:27,626
would next be like exploring more on the code deploy

209
00:13:27,658 --> 00:13:29,100
side and what is needed there.

