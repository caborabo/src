1
00:00:23,520 --> 00:00:27,266
Hello. Hi, I'm Alex Harris and I'm the founder of Adelaide.com dot. What we

2
00:00:27,290 --> 00:00:30,650
do is that we are a developer tool. We empower high performing

3
00:00:30,682 --> 00:00:34,694
developer teams to reach their full potential with analytics, insights and recommendations.

4
00:00:35,234 --> 00:00:38,186
I'm going to take you through today a bit of a presentation as to how

5
00:00:38,250 --> 00:00:41,770
you can use data to help developers and also

6
00:00:41,802 --> 00:00:45,682
become a better developer yourself. And I'm going to start with an example from a

7
00:00:45,698 --> 00:00:49,306
completely different field. So developers actually have

8
00:00:49,330 --> 00:00:52,946
a lot in common with athletes. Now, if you are like me and

9
00:00:52,970 --> 00:00:56,594
you grew up in the nineties and you've seen enough movies from the, the US,

10
00:00:56,714 --> 00:01:00,154
you'll be thinking that actually, you know, the jocks and the nerds

11
00:01:00,234 --> 00:01:03,322
are fundamentally different. They sit in different tables and

12
00:01:03,378 --> 00:01:06,946
they don't really talk to each other, but in reality, they have much more in

13
00:01:06,970 --> 00:01:10,610
common than you think. And we're going to start with the athletes.

14
00:01:10,642 --> 00:01:14,254
In fact, now, if we talk about athletic performance,

15
00:01:14,554 --> 00:01:18,026
most people think that athletic performance, you know, starts poor when

16
00:01:18,050 --> 00:01:21,346
somebody's a beginner and they just start a sport.

17
00:01:21,490 --> 00:01:25,392
They then over time become intermediate and after

18
00:01:25,448 --> 00:01:29,280
that they become advanced in what they do. So essentially it's a curve, but it

19
00:01:29,312 --> 00:01:33,004
follows a pretty kind of straightforward curve at that.

20
00:01:34,024 --> 00:01:37,520
However, that's a very simplistic view. And in reality,

21
00:01:37,592 --> 00:01:40,736
performance looks a little bit more like this. There is

22
00:01:40,760 --> 00:01:44,256
actually a huge amount of ups and downs,

23
00:01:44,440 --> 00:01:48,080
which tends to happen. And this isn't just for

24
00:01:48,192 --> 00:01:51,408
anybody kind of average doing sports,

25
00:01:51,576 --> 00:01:54,832
but even professionals like Serena Williams,

26
00:01:54,928 --> 00:01:58,448
top athlete in her field, are actually experiencing

27
00:01:58,536 --> 00:02:02,416
something very, very similar to that. So you can see here there's

28
00:02:02,440 --> 00:02:05,712
been a lot of up and ups and downs. You can see where, you know,

29
00:02:05,728 --> 00:02:09,592
she hit her peak, but you can see that after that

30
00:02:09,728 --> 00:02:13,800
there's been some other wins as well and some

31
00:02:13,832 --> 00:02:16,924
kind of big drops too. Now,

32
00:02:17,244 --> 00:02:21,876
the similar thing can actually happen if you look at performance

33
00:02:21,980 --> 00:02:25,716
for developers, and specifically if you look at the way they

34
00:02:25,780 --> 00:02:28,836
are committing code, but also how much of that code actually

35
00:02:28,900 --> 00:02:32,372
makes it into production error free. And this is

36
00:02:32,388 --> 00:02:36,092
really interesting because if you ask most developers, they will assume they

37
00:02:36,108 --> 00:02:39,628
have a very kind of steady flow, but in reality they have massive

38
00:02:39,676 --> 00:02:43,076
ups and downs. So you can say, for example,

39
00:02:43,260 --> 00:02:45,784
is it even the same person practically,

40
00:02:46,324 --> 00:02:50,188
when we're looking at, you know, I think what's September here versus

41
00:02:50,356 --> 00:02:53,668
the bottom down there? The drops,

42
00:02:53,716 --> 00:02:57,388
it's practically, you know, you might be talking about ten times, you know,

43
00:02:57,396 --> 00:03:00,424
a ten x developer when you're hitting those tops.

44
00:03:00,804 --> 00:03:04,252
So why does this matter? Well, if you've

45
00:03:04,268 --> 00:03:07,852
seen the movie moneyball data

46
00:03:07,908 --> 00:03:10,556
is really king in understanding performance,

47
00:03:10,740 --> 00:03:14,404
but also driving said performance. And this is something that

48
00:03:14,444 --> 00:03:18,066
has revolution sports. So why not the development field?

49
00:03:18,170 --> 00:03:21,426
Right? Let's go back to how data is being

50
00:03:21,450 --> 00:03:25,250
used in sports. So just as a quick example, over 50%

51
00:03:25,282 --> 00:03:28,874
of coaches will use performance analysis tools to provide video clips for other

52
00:03:28,914 --> 00:03:32,154
coaches in their support staff. About 68%

53
00:03:32,194 --> 00:03:35,722
of them collate quantitative game data and just

54
00:03:35,778 --> 00:03:39,242
under half would use some form of live coding analysis during

55
00:03:39,298 --> 00:03:42,698
games. About 40% roughly would also

56
00:03:42,746 --> 00:03:45,932
receive a written match report including game statistics. These are

57
00:03:45,948 --> 00:03:50,252
some quite large numbers. So if we use data, as I said, to revolutionize

58
00:03:50,308 --> 00:03:53,700
the athletic field, why not the

59
00:03:53,732 --> 00:03:57,300
development field? So why is this a problem and an opportunity

60
00:03:57,332 --> 00:04:00,516
as well? Now it's an important problem

61
00:04:00,580 --> 00:04:04,164
to solve because there's about 60 billion of engineering

62
00:04:04,204 --> 00:04:07,524
productivity wasted in the US alone yearly. And whilst

63
00:04:07,644 --> 00:04:11,132
everybody else, pretty much every other kind of profit driving

64
00:04:11,188 --> 00:04:14,418
department, marketing sales, have data

65
00:04:14,546 --> 00:04:18,034
that live in tools like Google Analytics and Salesforce.

66
00:04:18,154 --> 00:04:21,546
Engineering teams are flying blind now in

67
00:04:21,570 --> 00:04:24,738
the same way that you wouldn't expect to go into a sales meeting

68
00:04:24,866 --> 00:04:28,146
and not know why you're hitting or not

69
00:04:28,170 --> 00:04:32,018
hitting your numbers, so do engineering teams

70
00:04:32,186 --> 00:04:35,170
when they're running a retro, you know, what did we do well? What did we

71
00:04:35,202 --> 00:04:38,786
not do well? What makes us faster? What made us slower? A lot

72
00:04:38,810 --> 00:04:42,156
of that data at the moment is based on perception and impressions,

73
00:04:42,290 --> 00:04:44,804
whilst we need them to be based on fact.

74
00:04:45,664 --> 00:04:48,912
So why hasn't this problem been solved in the past?

75
00:04:49,048 --> 00:04:52,760
There's three reasons why this is very, very difficult to do. The first

76
00:04:52,792 --> 00:04:56,488
thing has to do with a breadth of factors that go into what an engineer

77
00:04:56,536 --> 00:05:00,296
does. So most people outside of the field would think that engineering is all

78
00:05:00,320 --> 00:05:04,264
about coding, but actually it's way, way, way more multifaceted.

79
00:05:04,384 --> 00:05:08,356
So a huge amount of importance goes into preparing,

80
00:05:08,480 --> 00:05:12,300
planning, scoping properly, understanding the requirements. And that's

81
00:05:12,332 --> 00:05:16,068
a lot of the work that is actually invisible most of the time. And especially

82
00:05:16,116 --> 00:05:20,124
when it comes to data capture, it's extremely difficult to try and understand how

83
00:05:20,164 --> 00:05:23,796
did we collaborate, how did we scope, how well did that

84
00:05:23,820 --> 00:05:27,436
process work for us? Secondarily, you have the complexity

85
00:05:27,580 --> 00:05:31,348
of the engineering frameworks and the number 21 is,

86
00:05:31,436 --> 00:05:34,556
for example, how many engineering frameworks like agile,

87
00:05:34,660 --> 00:05:38,450
scrum, Kanban, et cetera are out there? And 21

88
00:05:38,482 --> 00:05:42,434
is the kind of broad number. Like there's about 21 broad frameworks,

89
00:05:42,514 --> 00:05:46,754
but actually, in reality, every single team that

90
00:05:46,874 --> 00:05:49,374
has engineers will have a different flavor.

91
00:05:49,794 --> 00:05:53,394
Nobody implements those frameworks in their purest forms.

92
00:05:53,514 --> 00:05:56,914
Everybody would be working on something slightly different. The third

93
00:05:56,954 --> 00:06:00,962
thing is adoption. So it's really important if you're making anything for

94
00:06:01,018 --> 00:06:04,520
developers that developers need to love what you're making.

95
00:06:04,712 --> 00:06:08,208
And it doesn't just, you know, it can't just be like a

96
00:06:08,296 --> 00:06:11,464
monitoring draw or something like that. It's super important that it's

97
00:06:11,504 --> 00:06:14,444
embraced and it helps the developers,

98
00:06:15,224 --> 00:06:18,884
the people in the trenches, the individual contributors, not just management.

99
00:06:19,664 --> 00:06:22,896
So how do we go about solving for these challenges?

100
00:06:23,040 --> 00:06:26,856
First and foremost, for the challenge of breadth, we take signals

101
00:06:26,960 --> 00:06:30,546
by integrating into a broader set of tools. So we

102
00:06:30,570 --> 00:06:34,282
look at code versioning, GitLab, GitHub, we look at task management

103
00:06:34,418 --> 00:06:37,546
like Jira. We also look at how people are managing their

104
00:06:37,570 --> 00:06:41,210
calendars, Google workspace for example. Outlook is

105
00:06:41,242 --> 00:06:45,322
the other tool. And we'll also look at how people collaborate over

106
00:06:45,378 --> 00:06:49,050
slack. Now, why do we get such a broad view?

107
00:06:49,242 --> 00:06:52,482
Primarily because a lot of the things that cause bad

108
00:06:52,538 --> 00:06:56,770
code or a lot of the things that cause trouble for engineers don't

109
00:06:56,802 --> 00:07:00,018
actually have to do necessarily with coding. It might be, as I mentioned earlier,

110
00:07:00,106 --> 00:07:03,610
scoping, it might be the fact that, you know, they don't have enough focus,

111
00:07:03,682 --> 00:07:06,994
time to focus on writing clean code. And these things are very,

112
00:07:07,034 --> 00:07:10,746
very important. Now, what do we do with this? First and

113
00:07:10,770 --> 00:07:14,594
foremost, we create insights. These can be anything from

114
00:07:14,754 --> 00:07:18,178
understanding where the blockages are in between reviewing

115
00:07:18,226 --> 00:07:22,494
code and committing code, and potentially understanding

116
00:07:23,294 --> 00:07:26,434
as well how the scoping work that I mentioned a couple of times,

117
00:07:27,094 --> 00:07:30,566
and once we have that data, we do a

118
00:07:30,590 --> 00:07:34,318
couple of different kind of processes to it. First and foremost,

119
00:07:34,406 --> 00:07:38,414
we run seven different models per engineer,

120
00:07:38,454 --> 00:07:41,790
per developer. And the purpose of running this model is to understand what

121
00:07:41,822 --> 00:07:45,662
drives positive performance, what drives positive momentum. So think about

122
00:07:45,718 --> 00:07:49,318
this almost like as a coach, looking at the stats of

123
00:07:49,366 --> 00:07:52,824
the back of a game and understanding what did we do right.

124
00:07:53,014 --> 00:07:56,732
So after understanding this, we take the three best performing models,

125
00:07:56,788 --> 00:08:00,276
we average them out, and this process happens daily. What that means is

126
00:08:00,300 --> 00:08:04,420
that for each developer, you have a personalized idea and

127
00:08:04,492 --> 00:08:08,076
also a personalized recommendation off the back of it as

128
00:08:08,100 --> 00:08:11,304
to what drives posted performance and how to improve said performance.

129
00:08:12,364 --> 00:08:15,852
Then finally, once we have their accommodations, we allow individuals

130
00:08:15,868 --> 00:08:19,900
and teams to create their own missions and to

131
00:08:19,972 --> 00:08:23,420
actually basically hit those

132
00:08:23,452 --> 00:08:26,524
goals that they've set for themselves and for the teams.

133
00:08:26,564 --> 00:08:29,944
Off the back of that, the teams and engineers can win rewards,

134
00:08:30,524 --> 00:08:34,836
which just makes the whole process a little bit more fun. So what

135
00:08:34,860 --> 00:08:38,820
does that mean for those developers?

136
00:08:38,892 --> 00:08:42,904
So the individual contributors actually benefit from

137
00:08:43,244 --> 00:08:47,080
being, for example, able to justify their

138
00:08:47,112 --> 00:08:51,032
promotion path or quantify some of the data they might need in

139
00:08:51,048 --> 00:08:54,288
order to have those conversations. This is not to say

140
00:08:54,336 --> 00:08:57,640
that this can be used as a monitoring tool. It's actually the exact opposite.

141
00:08:57,752 --> 00:09:00,856
We give power to the developer themselves to go

142
00:09:00,880 --> 00:09:05,496
into those meetings with that data, but their boss can never look down downstream

143
00:09:05,560 --> 00:09:09,400
and actually basically say,

144
00:09:09,432 --> 00:09:12,376
you know, Alex hasn't been doing any work. That's not how it works. But it

145
00:09:12,400 --> 00:09:15,884
does give the power to the developer to have these conversations and drive them.

146
00:09:16,344 --> 00:09:19,384
Other things like, you know, if I'm a junior developer, am I building the right

147
00:09:19,424 --> 00:09:23,248
habits or am I committing massive amounts of code? How quickly

148
00:09:23,416 --> 00:09:26,824
am I, for example, ramping up after

149
00:09:26,864 --> 00:09:30,416
I've been newly hired? And then how well am I managing my

150
00:09:30,440 --> 00:09:34,240
time? Am I, you know, setting out focus time and keeping that focus time,

151
00:09:34,392 --> 00:09:38,248
or am I struggling with that focus time and I'm getting

152
00:09:38,296 --> 00:09:42,056
distracted? And then finally, as far as managers go,

153
00:09:42,160 --> 00:09:45,512
are we investing the right amount of effort on the right things? It's a very

154
00:09:45,568 --> 00:09:48,572
kind of common threat of questioning.

155
00:09:48,708 --> 00:09:53,356
And then secondarily, what is impacting our

156
00:09:53,380 --> 00:09:56,980
velocity? Thirdly, what is the cost and resource allocation

157
00:09:57,092 --> 00:10:01,516
on the roadmap and technical debt? These are some of the questions that you

158
00:10:01,540 --> 00:10:04,812
might be asking. All right, so after all

159
00:10:04,828 --> 00:10:08,024
this information, we're off to seeing a demo.

160
00:10:09,524 --> 00:10:13,580
Hello, I'm Alex Harris, and this is an overview of the ADA dot

161
00:10:13,612 --> 00:10:17,210
platform. So we're going to start with

162
00:10:17,362 --> 00:10:20,642
this dashboard view. What you might notice here is that we

163
00:10:20,658 --> 00:10:23,890
have three pillars of data. We have work, we have collaboration, and we have well

164
00:10:23,922 --> 00:10:27,642
being. Now, these numbers might not look familiar

165
00:10:27,778 --> 00:10:29,938
to anybody seeing this for the first time,

166
00:10:30,106 --> 00:10:33,322
but there's a good reason why we have them. First and

167
00:10:33,338 --> 00:10:36,666
foremost, you'll see. I'm going to show you in a bit. There's a lot of

168
00:10:36,690 --> 00:10:40,818
detail that hides between all of these different kind of data sets.

169
00:10:40,946 --> 00:10:44,508
And oftentimes what you want to be able to see is how

170
00:10:44,666 --> 00:10:47,872
directionally, how better we are one day after the

171
00:10:47,888 --> 00:10:51,792
other. But also the interplay in between those three factors. Because,

172
00:10:51,888 --> 00:10:55,160
for example, if you're working 24/7 obviously well being is not going to be as

173
00:10:55,192 --> 00:10:58,344
good and you're not going to have enough time to collaborate. So let's take work

174
00:10:58,384 --> 00:11:01,744
as an example and take you through some of the detail that exists behind that

175
00:11:01,784 --> 00:11:05,592
number. So the data here comes from GitLab and

176
00:11:05,608 --> 00:11:09,752
GitHub as well as Jira and in the near future notion.

177
00:11:09,848 --> 00:11:13,506
So as far as the sprints breakdown, here is,

178
00:11:13,570 --> 00:11:16,930
you can see information around. For example, have we re scoped

179
00:11:16,962 --> 00:11:19,898
in the middle of the sprint? How are we spending our time and effort?

180
00:11:20,026 --> 00:11:23,274
Are we investing in building new features? Are we, you know,

181
00:11:23,354 --> 00:11:27,258
having bugs? How are we actually investing into

182
00:11:27,306 --> 00:11:31,098
our engineering? As far as tickets assigned as well, you can see if they're equally

183
00:11:31,146 --> 00:11:34,626
distributed within the team or people have basically an

184
00:11:34,650 --> 00:11:38,474
uneven burden of tickets. Tickets are stuck.

185
00:11:38,854 --> 00:11:42,462
You can also see all of these things here. There's a

186
00:11:42,478 --> 00:11:45,910
lot of data on commits, you have data on deployments which

187
00:11:45,942 --> 00:11:49,902
you can actually configure. So there's a level of customization that

188
00:11:49,918 --> 00:11:53,726
the platform can afford you, as well as pipelines

189
00:11:53,790 --> 00:11:56,854
as well. Just making sure that you can see things like execution time,

190
00:11:56,934 --> 00:12:00,574
overall duration. And these charts are created automatically to fit

191
00:12:00,654 --> 00:12:03,962
exactly your process. Now you

192
00:12:03,978 --> 00:12:07,450
can see where bottlenecks exist in progress, under review, approval to

193
00:12:07,482 --> 00:12:12,634
merge, and you can also look at the health of your essentially

194
00:12:12,754 --> 00:12:16,194
review process. The important thing to note is

195
00:12:16,234 --> 00:12:20,154
that this version is for the individual.

196
00:12:20,194 --> 00:12:24,002
There's also one for the team as well. So you can actually click here

197
00:12:24,138 --> 00:12:28,634
and look at that data. For at the team level, the individual

198
00:12:28,754 --> 00:12:31,778
cannot be monitored by the manager and micromanage.

199
00:12:31,866 --> 00:12:35,392
And what that means from an information architecture point of view

200
00:12:35,528 --> 00:12:39,264
is that the individual has access to their own data, the manager

201
00:12:39,304 --> 00:12:43,376
has access to the aggregate team data. Now the

202
00:12:43,400 --> 00:12:46,432
other thing that we do here is because obviously you can see there's a lot

203
00:12:46,448 --> 00:12:50,632
of numbers, there's a lot of little detail that sits under collaboration.

204
00:12:50,688 --> 00:12:54,136
For example, things like are we communicating publicly? Are we

205
00:12:54,160 --> 00:12:57,760
sharing our knowledge into public channels? In wellbeing, you can look at

206
00:12:57,792 --> 00:13:01,152
things, for example, like focus time. Are we setting that focus time

207
00:13:01,168 --> 00:13:04,760
in the calendar? Are we keeping it? Is our attention, you know, really fragmented?

208
00:13:04,792 --> 00:13:07,736
Do we have a lot of content switching? So there's a lot of data that

209
00:13:07,760 --> 00:13:11,520
sits here. But going back to the kind of original insights

210
00:13:11,552 --> 00:13:15,096
view, how do we know what's making the most impact? And this is

211
00:13:15,120 --> 00:13:17,712
where the recommendations come into play.

212
00:13:17,888 --> 00:13:21,432
So here you can see basically the system will create

213
00:13:21,488 --> 00:13:24,920
recommendations per developer and per team. What will

214
00:13:24,952 --> 00:13:28,688
help them get faster, get better, give them a bit of

215
00:13:28,696 --> 00:13:32,560
a justification here as to why this is important, but also help them set

216
00:13:32,592 --> 00:13:35,440
their missions, which is, you know, a type of goal you can set on the

217
00:13:35,472 --> 00:13:38,912
platform. There's three different levels of difficulty and once you

218
00:13:38,928 --> 00:13:42,480
do that, it's, they're super, super easy to track. You also have another

219
00:13:42,552 --> 00:13:46,304
broader collection of those, of those goals. So those

220
00:13:46,344 --> 00:13:50,016
missions. So for example, if as a team, you always want to make sure that

221
00:13:50,040 --> 00:13:53,432
you're merging, you know, with approval, you can kind of

222
00:13:53,568 --> 00:13:56,946
put that here and you'll be able to set it.

223
00:13:57,090 --> 00:14:00,738
Same thing for developers in the individual level. They can set their own goals and

224
00:14:00,786 --> 00:14:04,850
they can basically drive their own kind of career

225
00:14:04,882 --> 00:14:08,730
and their own development path. In a way, when these

226
00:14:08,762 --> 00:14:13,122
missions are completed, you can win those badges and you

227
00:14:13,138 --> 00:14:16,322
can play that little game in that way.

228
00:14:16,458 --> 00:14:20,106
Now, finally, there's a really interesting new feature

229
00:14:20,170 --> 00:14:23,946
that we are releasing. It's called lead time, and that helps teams to

230
00:14:23,970 --> 00:14:27,824
understand what are the best ways to become faster,

231
00:14:27,984 --> 00:14:30,736
to essentially decrease their lead time.

232
00:14:30,840 --> 00:14:34,248
And this might not have to do with, for example,

233
00:14:34,416 --> 00:14:38,392
purely coding aspects. It might have to do with things like, for example,

234
00:14:38,568 --> 00:14:41,804
are we spending too much time in meetings?

235
00:14:42,144 --> 00:14:45,968
Is our review time or review pickup time helping

236
00:14:46,016 --> 00:14:50,056
us? Or is it holding us back? And if you click generate model, this creates

237
00:14:50,080 --> 00:14:53,776
a completely personalized model for each team. So this

238
00:14:53,800 --> 00:14:57,240
is unique in the market right now, and it's

239
00:14:57,312 --> 00:15:00,936
basically run by a causal AI model which

240
00:15:01,040 --> 00:15:04,152
was first published in 2022. So a

241
00:15:04,168 --> 00:15:08,444
very, very recent kind of scientific evolution in this field.

242
00:15:08,944 --> 00:15:12,336
And with this, I'm going to stop. If you have any questions,

243
00:15:12,480 --> 00:15:14,104
feel free to message us.

