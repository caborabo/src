1
00:00:20,960 --> 00:00:24,286
Hello everyone, I am Sandip Bhat. Today I will be talking about developing

2
00:00:24,310 --> 00:00:27,442
a custom load balancer using go and envoy that is both scalable as

3
00:00:27,458 --> 00:00:30,674
well as fault. All. Before we proceed further, I would like to

4
00:00:30,714 --> 00:00:34,534
quickly introduce myself. I have eight plus years of experience in the industry.

5
00:00:35,394 --> 00:00:38,650
Prior to my current role, I used to work at companies like Walmart, C Square,

6
00:00:38,802 --> 00:00:42,290
Packer, Enterprise. Currently I work as a staff software engineer at

7
00:00:42,322 --> 00:00:45,898
Harness. Harness is a company that operates in the DevOps space and

8
00:00:45,946 --> 00:00:48,854
I'm part of a team that is focused on cloud cost optimization.

9
00:00:49,434 --> 00:00:52,586
As a result of this, I have got exposure to multiple different cloud products

10
00:00:52,650 --> 00:00:54,334
like AWS GCP.

11
00:00:55,304 --> 00:00:59,056
Beyond work well, I love traveling across the world as well as reading

12
00:00:59,080 --> 00:01:02,484
upon different tech and exploring new technologies.

13
00:01:02,784 --> 00:01:06,752
How are we going to go about doing this talk right? So we

14
00:01:06,768 --> 00:01:09,896
will start by discussing some of the basic concepts of load balancing.

15
00:01:10,000 --> 00:01:13,416
We will then see what are the different cloud native options that

16
00:01:13,440 --> 00:01:16,624
we have post that we will discuss about envoy.

17
00:01:16,704 --> 00:01:19,844
What are, what is envoy and what are some of the key features of envoy?

18
00:01:20,364 --> 00:01:23,556
Some of the components of envoy that we will be utilizing in our custom load

19
00:01:23,580 --> 00:01:27,372
balancer. You'll then see what are the different features that we

20
00:01:27,388 --> 00:01:30,676
would want to target using our custom load balancer and we will

21
00:01:30,780 --> 00:01:34,344
discuss about the architecture of the components of a custom load balancer.

22
00:01:34,804 --> 00:01:37,732
Then towards the end of the talk, we'll also see a working demo of a

23
00:01:37,748 --> 00:01:41,024
custom load balance. So what do you mean by load balancing?

24
00:01:41,484 --> 00:01:45,492
Load balancing is a key concept in a distributed computing where

25
00:01:45,668 --> 00:01:48,932
scalability, reliability as well as fault tolerance is is

26
00:01:48,988 --> 00:01:52,652
essential. At the core of it, load balancing is

27
00:01:52,828 --> 00:01:56,244
primarily about routing incoming traffic across multiple different application

28
00:01:56,284 --> 00:02:00,700
servers, ensuring that they are not overwhelmed with requests

29
00:02:00,772 --> 00:02:04,144
and also optimal usage of the resources.

30
00:02:05,084 --> 00:02:08,340
So as you can see in this image, you have multiple different users trying

31
00:02:08,372 --> 00:02:11,548
to access particular service across mean

32
00:02:11,596 --> 00:02:14,772
over the Internet. In this case, you can see a load balancer sitting

33
00:02:14,788 --> 00:02:18,748
in between the the users as well as the application servers routing traffic

34
00:02:18,796 --> 00:02:22,628
across multiple different applications. Some of the key features of

35
00:02:22,756 --> 00:02:26,020
load balancing would be high reliability and availability and

36
00:02:26,052 --> 00:02:29,420
the flexibility to scale. So in this case you can the application

37
00:02:29,452 --> 00:02:33,420
servers can scale by adding more servers and thus

38
00:02:33,572 --> 00:02:37,544
achieve what you call as horizontal scaling. And the

39
00:02:38,084 --> 00:02:42,320
performance of the applications are thus improved when traffic is routed

40
00:02:42,452 --> 00:02:45,724
or distributed evenly across multiple different applications.

41
00:02:46,464 --> 00:02:50,592
Some of the key load balancing algorithms or commonly seen load balancing algorithms are

42
00:02:50,688 --> 00:02:54,496
round robin based load balancing or weighted round robin based

43
00:02:54,640 --> 00:02:58,376
load balancing as well as least connection based load balancing.

44
00:02:58,560 --> 00:03:02,416
So as me, this is a simple example of load

45
00:03:02,440 --> 00:03:05,568
balancing. As you can see on the

46
00:03:05,656 --> 00:03:09,340
left side of the screen like you have multiple clients trying

47
00:03:09,372 --> 00:03:12,948
to access a particular service over Internet.

48
00:03:13,036 --> 00:03:16,300
And the load balancer sees that both applications have healthy and

49
00:03:16,332 --> 00:03:19,384
routes or distributes traffic across both of them evenly.

50
00:03:19,684 --> 00:03:22,276
And on the right you can see that one of the application server has gone

51
00:03:22,300 --> 00:03:25,972
down. Now the load balancer recognizes that and routes all

52
00:03:25,988 --> 00:03:29,612
the traffic to application server. Thus the

53
00:03:29,708 --> 00:03:32,984
clients do not see any difference. They do not know this anything.

54
00:03:33,404 --> 00:03:36,596
So talking about the cloud native options, what are the cloud native options that

55
00:03:36,620 --> 00:03:40,724
we have? AWS has its own offering called

56
00:03:40,764 --> 00:03:44,464
AWCLB, Azure has app Gateway and GCP has its own.

57
00:03:44,804 --> 00:03:48,424
In this case, we are primarily discussing about layer seven load balancing.

58
00:03:48,724 --> 00:03:53,212
We are not going to be discussing about layer four load balancing in

59
00:03:53,228 --> 00:03:56,828
this case. I mean that the core idea of load balancing involves three

60
00:03:56,876 --> 00:04:01,724
major components, or you would have incoming traffic

61
00:04:01,764 --> 00:04:05,420
that is being identified in the or processed on using

62
00:04:05,492 --> 00:04:08,988
rules that define how they have to be acted upon. And then you have

63
00:04:09,116 --> 00:04:13,196
target groups or logically grouped application servers which

64
00:04:13,220 --> 00:04:17,988
are called as target groups, right, which would basically be serving

65
00:04:18,036 --> 00:04:20,464
all the, all those incoming traffic.

66
00:04:21,044 --> 00:04:24,220
Moving on. What is, what do you mean by Envoy? Envoy is a

67
00:04:24,252 --> 00:04:27,956
CNCF graduated project. It evolved out of lib and

68
00:04:28,060 --> 00:04:31,954
primarily Envoy is written using c and

69
00:04:31,994 --> 00:04:35,698
Envoy is a reverse proxy that remind operates in

70
00:04:35,706 --> 00:04:39,202
the layer seven. And it's pretty extensible

71
00:04:39,258 --> 00:04:42,506
in the sense that it's a, it has a filter based mechanism wherein you can

72
00:04:42,530 --> 00:04:45,618
change multiple filters, more like middleware senior

73
00:04:45,666 --> 00:04:48,970
in any API servers, changing them you can, you can

74
00:04:49,002 --> 00:04:52,530
customize onward to your own needs. And as you can see with the commits,

75
00:04:52,562 --> 00:04:56,094
S and s stars, it's a pretty popular topic.

76
00:04:56,414 --> 00:04:59,422
So what are some of the key features of Envoy service?

77
00:04:59,478 --> 00:05:03,278
Discovery load balancing, and I mean

78
00:05:03,366 --> 00:05:07,150
checking wherein you are able, you are able to take certain vms out of rotation

79
00:05:07,302 --> 00:05:10,814
when they are unhealthy. Security Envoy, there is a lot of features around

80
00:05:10,854 --> 00:05:15,054
security observability, wherein you are able to track the different metrics around the

81
00:05:15,094 --> 00:05:18,414
number of requests served and other aspects around

82
00:05:18,574 --> 00:05:22,294
observability, rate limiting, where you are able to ensure that your backend servers

83
00:05:22,334 --> 00:05:26,356
are not overwhelmed by limiting the number of requests

84
00:05:26,500 --> 00:05:30,156
in any given threshold. And it's pretty extensive. As we spoke

85
00:05:30,180 --> 00:05:34,344
before, you can, you can use multiple different filters to customize envoy.

86
00:05:35,004 --> 00:05:37,940
So what are some of the key components of envoy that we would be using

87
00:05:37,972 --> 00:05:41,844
in our custom load balancer? Well, these are some of the key components of envoy.

88
00:05:41,924 --> 00:05:45,104
Listener filters, clusters, secrets and upstream.

89
00:05:45,604 --> 00:05:49,154
Looking at this image here, you see port

90
00:05:49,194 --> 00:05:53,242
443 and port 80. These are these are example for a listener wherein

91
00:05:53,378 --> 00:05:57,250
our load balancer would listen on port 80 as well as port 443

92
00:05:57,282 --> 00:06:00,522
for incoming requests. And there we

93
00:06:00,538 --> 00:06:03,954
could then move the move to set of

94
00:06:03,994 --> 00:06:07,258
chains, filter chains. These filter chains

95
00:06:07,346 --> 00:06:11,214
would include things like domain matching.

96
00:06:12,194 --> 00:06:15,784
I mean custom custom components around.

97
00:06:15,954 --> 00:06:19,396
I mean there could be lower plugins that that you can use

98
00:06:19,420 --> 00:06:22,732
to track incoming requests as less maybe log them or

99
00:06:22,828 --> 00:06:26,252
act on the packet. Once these rules are applied on

100
00:06:26,268 --> 00:06:29,184
the incoming request, they're routed to the appropriate cluster.

101
00:06:29,564 --> 00:06:33,764
The cluster would is nothing but multiple upstreams group of upstreams.

102
00:06:33,884 --> 00:06:37,532
An upstream is is a single vm as an example. It could

103
00:06:37,548 --> 00:06:40,956
be a particular single vm or virtual machine that that

104
00:06:41,100 --> 00:06:44,726
that serves your application. A logical grouping of

105
00:06:44,750 --> 00:06:48,030
these upstreams would be a cluster for a given given domain,

106
00:06:48,102 --> 00:06:51,194
for example, or a given path in a domain.

107
00:06:51,694 --> 00:06:55,054
And secrets would be used for managing the handling the

108
00:06:55,094 --> 00:06:58,702
certificates. This is a sample configuration

109
00:06:58,758 --> 00:07:03,158
of envoy working

110
00:07:03,206 --> 00:07:08,194
example of it wherein in this case we will be routing supporting

111
00:07:08,374 --> 00:07:12,330
traffic coming on port 80. And I mean

112
00:07:12,482 --> 00:07:15,546
in the domain that we are not restricting ourselves to any domain in this,

113
00:07:15,610 --> 00:07:18,954
which means that any traffic coming on port 80 would

114
00:07:19,114 --> 00:07:22,770
adult route path would be routed to the

115
00:07:22,802 --> 00:07:26,490
cluster called some service in this case cluster named some

116
00:07:26,522 --> 00:07:30,434
service. So, and the cluster, some service in this case is

117
00:07:30,594 --> 00:07:34,054
pointing to particular IP address on port 80

118
00:07:34,724 --> 00:07:37,796
with, with health check different, as seen here,

119
00:07:37,940 --> 00:07:42,156
with a timeout of 2 seconds and check being performed at

120
00:07:42,180 --> 00:07:46,116
every interval of 5 seconds. And field health

121
00:07:46,140 --> 00:07:49,812
check would mean that it's taken out of rotation. So what

122
00:07:49,828 --> 00:07:53,196
are the requirements of our custom load balancer? Some of them mean that you

123
00:07:53,220 --> 00:07:57,372
can, you could possibly add more features or more features

124
00:07:57,388 --> 00:08:01,202
that we want to, we could possibly support using our custom load balancer. But to

125
00:08:01,218 --> 00:08:04,534
begin with, we look at some basic features that we want to support.

126
00:08:05,154 --> 00:08:09,294
The primary one would be to distribute traffic amongst multiple different back end targets.

127
00:08:09,834 --> 00:08:14,074
Our custom load balancer should not be limited to any given domain.

128
00:08:14,154 --> 00:08:17,650
We should support supporting multiple domains. We should have one load

129
00:08:17,682 --> 00:08:21,574
balancer that can route traffic to multiple different domains and pass.

130
00:08:22,554 --> 00:08:25,706
It should support health checking. That way we would be able

131
00:08:25,730 --> 00:08:31,638
to take out the application servers that are unhealthy or it

132
00:08:31,646 --> 00:08:35,606
should be cloud agnostic in the sense that we, we should be able to run

133
00:08:35,630 --> 00:08:38,714
our custom load balancer or easily port it across multiple different.

134
00:08:39,694 --> 00:08:43,302
And we are looking at celebrity customization.

135
00:08:43,398 --> 00:08:46,862
I mean, we will see how we are going through. So this is,

136
00:08:46,918 --> 00:08:50,334
this is the design of a custom

137
00:08:50,374 --> 00:08:53,926
load balancer. So we have some different components. As we can see here,

138
00:08:53,990 --> 00:08:57,596
we have a virtual machine which will be, which will be the custom load balancer

139
00:08:57,620 --> 00:09:01,676
that we have. So the idea is we would have a VM in

140
00:09:01,700 --> 00:09:04,996
which we will run our load balancer and our VM. This VM will behave as

141
00:09:05,020 --> 00:09:08,324
the custom load balancer. And by making it cloud

142
00:09:08,364 --> 00:09:11,588
agnostic, you can easily run this vm anywhere. You could run it

143
00:09:11,596 --> 00:09:14,980
on AWS, TCP or even azure. And as you can see

144
00:09:15,012 --> 00:09:18,700
here we have our custom load balancer running within a vm,

145
00:09:18,772 --> 00:09:22,088
but it will be interacting with some other components which are outside the vm,

146
00:09:22,156 --> 00:09:25,264
like in this case an API server as well as a database.

147
00:09:25,424 --> 00:09:30,312
So there will be a database which would basically store the configuration

148
00:09:30,368 --> 00:09:33,520
of our load balancer like the domain, the incoming port,

149
00:09:33,552 --> 00:09:37,248
outgoing port, the IP addresses of the vms,

150
00:09:37,336 --> 00:09:41,760
application vms as well as the, I mean even certificates,

151
00:09:41,872 --> 00:09:44,204
details related to certificates, etcetera.

152
00:09:44,744 --> 00:09:48,480
So we will have an API server that would fetch this data from the database

153
00:09:48,552 --> 00:09:52,232
and be interacting with our load balancer,

154
00:09:52,368 --> 00:09:55,928
which basically be, will be fetching this configuration and passing it

155
00:09:55,976 --> 00:09:59,484
and translating that into something that envoy can understand.

156
00:10:00,064 --> 00:10:03,424
So as you see here, we would have VM that would have

157
00:10:03,464 --> 00:10:07,288
two services that can be run as Linux system CTL services,

158
00:10:07,376 --> 00:10:11,032
for example like we would have envoy running inside the vm and we

159
00:10:11,048 --> 00:10:14,720
will have a control plane, custom control plane return is info that

160
00:10:14,752 --> 00:10:18,744
would be communicating with envoy in the form of JFC communications.

161
00:10:19,084 --> 00:10:23,268
As we discussed before, envoy supports service discovery and

162
00:10:23,356 --> 00:10:25,344
it's going to do, we are going to do that using,

163
00:10:27,084 --> 00:10:30,570
we also have, we'll also be using cloud. Initially we

164
00:10:30,572 --> 00:10:34,588
will come to that. So if you mean this is how a sample

165
00:10:34,716 --> 00:10:39,404
envoy service looks like, you would, I mean you would have the

166
00:10:39,484 --> 00:10:43,356
definition as in, as in like aspect of

167
00:10:43,380 --> 00:10:47,006
this service configuration that we are interested in would be the

168
00:10:47,190 --> 00:10:50,394
configuration that we will be passing to envoy when it boots up.

169
00:10:50,734 --> 00:10:55,222
As you can see here, we would be passing a particular startup config that

170
00:10:55,278 --> 00:10:59,062
Envoy would boot with. That way it knows how to

171
00:10:59,078 --> 00:11:02,950
interact with our, this is the configuration that we would

172
00:11:02,982 --> 00:11:06,422
want to bring up envoy and these are some

173
00:11:06,438 --> 00:11:09,686
of the service discovery components of envoy that we would

174
00:11:09,710 --> 00:11:12,866
want to. In this case LDS config would

175
00:11:12,890 --> 00:11:16,218
be listener Discovery service and CDs would be cluster discovery service.

176
00:11:16,306 --> 00:11:20,170
So our envoy would boot with these two discovery services enabled.

177
00:11:20,282 --> 00:11:23,322
And as you can see here, it would be using GRPC to communicate

178
00:11:23,378 --> 00:11:26,770
and discover the services. And in this case

179
00:11:26,802 --> 00:11:31,034
we are going to tell our envoy that they should be communicating with

180
00:11:31,114 --> 00:11:34,186
XDS cluster, something that we call as XT's cluster here

181
00:11:34,370 --> 00:11:38,216
for fetching the configuration of envoy and

182
00:11:38,240 --> 00:11:42,168
be able to update dynamically without any downtime.

183
00:11:42,336 --> 00:11:45,416
What we mean to say is if ever there were to ever add a new

184
00:11:45,440 --> 00:11:48,960
domain or remove a domain from our load balancing configuration,

185
00:11:49,072 --> 00:11:52,608
we would not want to restart on or have any downtime to update the

186
00:11:52,616 --> 00:11:56,244
configuration. That would happen dynamically. And in this case our

187
00:11:56,664 --> 00:12:00,608
XD's cluster or our control plane would be running on port 18,000 in the

188
00:12:00,656 --> 00:12:04,366
same 127.01s you can see here.

189
00:12:04,550 --> 00:12:08,230
And it can run on any port. As an example here I can

190
00:12:08,302 --> 00:12:11,598
put it into. So our control

191
00:12:11,646 --> 00:12:14,918
plane can look something like this. It can be pretty minimal in the

192
00:12:14,926 --> 00:12:18,846
sense that you have a go routine that would be running the envoy server server

193
00:12:18,870 --> 00:12:22,270
that would basically communicate with envoy through

194
00:12:22,302 --> 00:12:25,470
GRPC and sharing the configuration that envoy has to

195
00:12:25,582 --> 00:12:29,446
update itself. And then we also have a sync server basically that

196
00:12:29,470 --> 00:12:33,172
would periodically talk to the, talk to the

197
00:12:33,188 --> 00:12:36,436
API server and fetch the latest configuration. I mean in this

198
00:12:36,460 --> 00:12:39,684
case we would be polling our API server, but you can, we can even

199
00:12:39,724 --> 00:12:42,304
use websockets to improve the performance.

200
00:12:43,084 --> 00:12:47,132
And this is our, this is the JPC communication with

201
00:12:47,188 --> 00:12:51,340
the, with envoy. Basically the JPC control plan wherein

202
00:12:51,372 --> 00:12:55,380
it will be updating the envoy. This is our scene server.

203
00:12:55,412 --> 00:13:00,226
That would mean it's a basic scene server where we have a for loop that's

204
00:13:00,250 --> 00:13:03,754
running on loop and we have a select construct that basically

205
00:13:03,914 --> 00:13:07,026
uses a timer to periodically sync and get the

206
00:13:07,050 --> 00:13:11,018
configuration. And look, I'm talking about configuration.

207
00:13:11,186 --> 00:13:13,994
This is the basic entry in our database.

208
00:13:14,074 --> 00:13:17,618
Our DB could, would have a JSON V field,

209
00:13:17,746 --> 00:13:20,946
like if you have to use postgres wherein you have some of these fields.

210
00:13:20,970 --> 00:13:24,442
As you can see, the domain that you want to support would

211
00:13:24,458 --> 00:13:28,144
be Sandeepbud code. And these are the different vms

212
00:13:28,684 --> 00:13:32,516
that are going to host this particular domain. And the

213
00:13:32,540 --> 00:13:35,900
incoming port and outgoing port would be port 80 flights. The request would be coming

214
00:13:35,932 --> 00:13:40,092
on port 80 and the vms would be supporting the

215
00:13:40,268 --> 00:13:43,740
same in the port 80 as well. And we have high checks, different as is.

216
00:13:43,852 --> 00:13:48,492
As you can see here basically can have multiple reports

217
00:13:48,548 --> 00:13:51,664
like this for different domains that would be passed by our

218
00:13:52,244 --> 00:13:55,174
load balancer to so this traffic.

219
00:13:56,314 --> 00:13:59,658
So in terms of packaging the cloud init, cloud init is a

220
00:13:59,666 --> 00:14:03,362
key component wherein it's a initialization system or a package installation

221
00:14:03,418 --> 00:14:07,090
system. It supports, supports writing custom scripts and

222
00:14:07,122 --> 00:14:10,538
it's pretty cloud independent as in you can, you can

223
00:14:10,666 --> 00:14:13,334
have cloud unit in AWS, TCP and Azure.

224
00:14:14,074 --> 00:14:17,602
Particular cloud in it script would be the

225
00:14:17,618 --> 00:14:21,506
same script would be supported across multiple different products. So what this

226
00:14:21,530 --> 00:14:25,362
helps us do is like we are able to bring up our custom load balancer

227
00:14:25,458 --> 00:14:29,050
using cloud init. You would have a cloud init script which would run

228
00:14:29,162 --> 00:14:32,898
whenever the system boots up and be able to fetch

229
00:14:32,986 --> 00:14:36,970
envoy and install envoy as a service in the system as well as bring

230
00:14:37,002 --> 00:14:41,082
up download our binary of the control plane

231
00:14:41,098 --> 00:14:44,538
that we designed and get them up and running as

232
00:14:44,626 --> 00:14:48,034
a Linux service. That way you are able to package them together.

233
00:14:48,614 --> 00:14:51,154
A sample cloud init script can look something like this.

234
00:14:52,014 --> 00:14:55,550
The key thing to notice here would be the scripts user. What we

235
00:14:55,582 --> 00:14:58,790
mean to say is we would always want our cloud

236
00:14:58,822 --> 00:15:02,310
init script to run whenever the system and

237
00:15:02,342 --> 00:15:06,566
with that we can even support updating our system as

238
00:15:06,590 --> 00:15:10,270
and when we have a newer version of our control. The script will

239
00:15:10,302 --> 00:15:13,554
go towards the end of the loading script.

240
00:15:13,924 --> 00:15:17,940
With this we are able to now we have a custom load

241
00:15:17,972 --> 00:15:21,268
balancer that basically edges

242
00:15:21,316 --> 00:15:25,380
all these aspects that we see here. We are able to distribute traffic among multiple

243
00:15:25,412 --> 00:15:29,684
different back end targets by orchestrating one and dynamically

244
00:15:29,724 --> 00:15:33,380
without any downtime. And we support multiple different domains checking.

245
00:15:33,412 --> 00:15:36,780
And we are able to be cloud agnostic by using cloud init

246
00:15:36,892 --> 00:15:40,002
and in terms of scalability customization. As we

247
00:15:40,018 --> 00:15:43,306
saw in our design, we can run our custom load balancer on

248
00:15:43,330 --> 00:15:47,814
any virtual machine, which means that if you had to run it on say AWS,

249
00:15:48,194 --> 00:15:51,306
you can run our load balancer on machine

250
00:15:51,330 --> 00:15:54,906
with a lower spec like say t two small or

251
00:15:54,930 --> 00:15:58,514
t two medium. Or you could even run it on a bigger machine like say

252
00:15:58,554 --> 00:16:02,114
t two x large or four x large based on your needs

253
00:16:02,194 --> 00:16:05,862
or based on the traffic needs. Yeah, so I

254
00:16:05,878 --> 00:16:09,798
mean I would also like to do a bit of cost comparison across

255
00:16:09,846 --> 00:16:13,766
AWS LB as well as our customer balance rest and as to why we

256
00:16:13,790 --> 00:16:17,126
would want to use our custom load balancer and how it's beneficial.

257
00:16:17,270 --> 00:16:21,046
AWS ALB has early pricing and it

258
00:16:21,070 --> 00:16:25,502
also has pricing or cost based on different aspects like number of connections,

259
00:16:25,558 --> 00:16:28,830
bytes processed and even that two connections as well as the rules processed.

260
00:16:28,862 --> 00:16:31,950
And if you have to bring that up comparatively, I mean it can look

261
00:16:31,982 --> 00:16:35,672
something like close to $16 per. I mean I'm not

262
00:16:35,688 --> 00:16:39,880
even taking into consideration the cost of traffic or

263
00:16:39,952 --> 00:16:44,240
data processed. I'm only looking at the basic cost components

264
00:16:44,272 --> 00:16:47,512
here. And if you have to look at a custom load balancer, it has early

265
00:16:47,568 --> 00:16:50,564
pricing per instance, right?

266
00:16:50,904 --> 00:16:54,160
The cost of running a VM only pay for

267
00:16:54,192 --> 00:16:58,144
that. And if you are to run a smaller vm, let's say smaller configuration,

268
00:16:58,184 --> 00:17:01,660
exactly to medium or even smaller, you would end up paying lower

269
00:17:01,692 --> 00:17:05,092
amount. And at

270
00:17:05,108 --> 00:17:08,836
the same time you have the if you have to compare the

271
00:17:08,860 --> 00:17:12,356
cost of that, say running our load balancer and d two micro, it would be

272
00:17:12,380 --> 00:17:16,012
close to around $8 per month. Digital micro we have

273
00:17:16,028 --> 00:17:19,948
seen pretty capable of handling traffic to a decently

274
00:17:19,996 --> 00:17:23,876
good enough scale. Now let's, let's take a look at

275
00:17:24,060 --> 00:17:27,652
our demo. As you can see here, I have three

276
00:17:27,788 --> 00:17:31,440
freight terminals here. The one here is running on

277
00:17:31,472 --> 00:17:34,924
Oi, one here is running the API server,

278
00:17:35,304 --> 00:17:38,696
running my API server here, and this

279
00:17:38,720 --> 00:17:42,244
one out here is running the control plane.

280
00:17:43,344 --> 00:17:46,884
So ideally in our load balancer, in any deployed in any

281
00:17:47,504 --> 00:17:50,364
VM virtual machine would have these two components in it.

282
00:17:50,984 --> 00:17:53,560
The one in the top as well as the one in the bottom. And this

283
00:17:53,592 --> 00:17:57,312
one, the APS are, will be running outside the system and or control

284
00:17:57,368 --> 00:18:01,496
plane would be configured to talk to the APC. And I also modified

285
00:18:01,560 --> 00:18:05,592
the etc host file of my system to the

286
00:18:05,608 --> 00:18:08,976
domain sandeepbud.com to my, my own system localhost in space

287
00:18:09,080 --> 00:18:12,632
to aid with this demo. So going back to the demo you

288
00:18:12,648 --> 00:18:16,880
see here, right, I have two vms that are running

289
00:18:17,072 --> 00:18:21,000
in AWS that are running nothing but basic

290
00:18:21,032 --> 00:18:24,300
Nginx server with a custom

291
00:18:24,372 --> 00:18:27,464
HTML file. It basically prints the IP address of the.

292
00:18:27,884 --> 00:18:32,396
And if you see here, currently both of the vms are running and I'm pointing

293
00:18:32,420 --> 00:18:35,436
to my domain Sandeep. So what would happen is when,

294
00:18:35,620 --> 00:18:39,184
when we hit sandipad.com in the go,

295
00:18:39,724 --> 00:18:43,948
as per our etcetera file, it's pointing to the

296
00:18:44,116 --> 00:18:48,292
same system as our system 127.1

297
00:18:48,308 --> 00:18:51,796
in this case, and on port 80, which, which is how our load balancer is

298
00:18:51,820 --> 00:18:55,164
configured now, wherein we are saying, okay, as you can see now

299
00:18:55,204 --> 00:18:56,744
in a previous slide here,

300
00:18:58,004 --> 00:19:01,436
our domain, the domain here is different, but we have configured

301
00:19:01,460 --> 00:19:04,796
it pretty, pretty similar to this one, wherein we are able to route any traffic

302
00:19:04,820 --> 00:19:07,704
coming on port 80 is routed to port 80 on the target.

303
00:19:08,044 --> 00:19:11,804
So when we hit sandybud.com here, it's routed to port

304
00:19:11,844 --> 00:19:15,196
18 in the same system wherein we have our system listening to it and

305
00:19:15,220 --> 00:19:18,716
it routes the traffic to the target vms, the demo

306
00:19:18,740 --> 00:19:22,058
vms one and two. And we'll see the IP address of

307
00:19:22,066 --> 00:19:25,826
the demo vms being printed. So as you can see here, it's routing traffic evenly

308
00:19:25,850 --> 00:19:29,494
across both of them. Now, if you have to bring down one of the vms,

309
00:19:30,154 --> 00:19:34,218
we should pretty, pretty soon see our load balancer routing

310
00:19:34,306 --> 00:19:38,370
all the traffic to the other V. Right. The SJ came

311
00:19:38,402 --> 00:19:41,578
into impact and it's able to identify that the target

312
00:19:41,626 --> 00:19:45,002
VM is another VMS is. And we keep seeing all the requests

313
00:19:45,018 --> 00:19:48,644
go to the same. Thus, I would like to conclude my demo.

314
00:19:49,024 --> 00:19:52,080
Hope you had as much fun as I had while doing this.

315
00:19:52,152 --> 00:19:54,384
Doing this talk. Thanks. Thanks for listening.

