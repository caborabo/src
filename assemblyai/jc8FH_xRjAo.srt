1
00:00:20,970 --> 00:00:24,766
Hi, thank you for coming to my talk. We will look at functions and

2
00:00:24,788 --> 00:00:28,054
how to use them in Python programs. If you

3
00:00:28,092 --> 00:00:31,714
haven't heard of functions before, this talk requires

4
00:00:31,762 --> 00:00:35,814
no prior knowledge of functions or category theory. The talk

5
00:00:35,852 --> 00:00:39,594
is for Python programmers and is designed for ease of

6
00:00:39,632 --> 00:00:43,546
understanding. There will be places where we will choose to

7
00:00:43,568 --> 00:00:47,558
simplify things at the expense of skipping some math details.

8
00:00:47,734 --> 00:00:50,986
The code examples are based on an open source Python

9
00:00:51,018 --> 00:00:55,418
package called Funklift. The links to the GitHub repositories

10
00:00:55,514 --> 00:00:58,926
of funklift and its tutorials are shown on the

11
00:00:58,948 --> 00:01:02,654
slide. Before we move on to the meat of the talk, a quick

12
00:01:02,692 --> 00:01:06,654
introduction of myself. My name is Char Wu. I'm a software

13
00:01:06,702 --> 00:01:10,178
developer, grew up in Taiwan, and I'm based in

14
00:01:10,184 --> 00:01:13,380
the San Francisco Bay area for the past 20 years.

15
00:01:13,750 --> 00:01:17,062
Now, today's agenda is very simple. We will

16
00:01:17,116 --> 00:01:21,218
start with a motivating example and then we will introduce

17
00:01:21,314 --> 00:01:24,466
various functions with even more examples.

18
00:01:24,658 --> 00:01:28,474
Let's start with a simple function, get price, that takes an

19
00:01:28,512 --> 00:01:31,500
item and returns the item's price.

20
00:01:31,870 --> 00:01:35,642
To visualize the code, we can draw types as dots and

21
00:01:35,696 --> 00:01:39,830
functions as arrows. Item is a dot in the diagram

22
00:01:39,910 --> 00:01:43,642
and int is also a dot. Get price is an arrow

23
00:01:43,706 --> 00:01:46,846
that goes from item to int. Now we have

24
00:01:46,868 --> 00:01:50,046
another function is pricey and we can

25
00:01:50,068 --> 00:01:53,442
draw it as an arrow as well. This time

26
00:01:53,496 --> 00:01:57,118
the arrow goes from with those two functions,

27
00:01:57,294 --> 00:02:00,754
what interesting things can we do with them? We can

28
00:02:00,792 --> 00:02:04,100
compose the two functions to form a new function.

29
00:02:04,550 --> 00:02:08,114
The composition of functions corresponds

30
00:02:08,162 --> 00:02:11,590
nicely to the composability of arrows in our diagram.

31
00:02:11,930 --> 00:02:15,126
A diagram like the one we are seeing here represents a

32
00:02:15,148 --> 00:02:17,190
category in category theory.

33
00:02:17,710 --> 00:02:22,054
Essentially, a category consists of dots and arrows,

34
00:02:22,182 --> 00:02:26,410
plus some properties about how arrows compose.

35
00:02:26,910 --> 00:02:30,682
We will call our category here the category

36
00:02:30,746 --> 00:02:34,202
of types. In this category, the dots

37
00:02:34,266 --> 00:02:38,350
are Python types and the arrows are Python functions.

38
00:02:38,770 --> 00:02:42,094
Now let's move on to

39
00:02:42,132 --> 00:02:45,730
see how functions are related to categories.

40
00:02:46,150 --> 00:02:50,210
Here we have a function is even that goes from int to bool

41
00:02:50,630 --> 00:02:54,866
and we have a list of numbers. 1234 we

42
00:02:54,888 --> 00:02:58,726
want to map is even over the numbers. One way

43
00:02:58,748 --> 00:03:02,150
to achieve that is by using this comprehension.

44
00:03:02,490 --> 00:03:06,962
Another way is to use the CDS class of the funklift

45
00:03:07,026 --> 00:03:10,780
package. As you can see from the code here,

46
00:03:11,230 --> 00:03:14,886
the CDis class has a method called fmap.

47
00:03:15,078 --> 00:03:19,014
Fmap takes the function is even and maps

48
00:03:19,062 --> 00:03:22,894
it over the list of numbers behind the scenes. On the

49
00:03:22,932 --> 00:03:26,330
outside, we can think of fmap as lifting

50
00:03:26,410 --> 00:03:29,662
is even to a function that goes from

51
00:03:29,716 --> 00:03:32,830
c list of int to c list of bool.

52
00:03:33,270 --> 00:03:36,354
If we put the is even function and

53
00:03:36,392 --> 00:03:40,066
its lifted counterpart side by side we

54
00:03:40,088 --> 00:03:43,634
can see that c list is actually a mapping from

55
00:03:43,672 --> 00:03:46,230
a source category to a target category.

56
00:03:46,650 --> 00:03:49,894
Such a mapping is called a functor if

57
00:03:49,932 --> 00:03:53,622
it satisfies certain properties. In our case,

58
00:03:53,756 --> 00:03:57,282
C list is a functor. The source category

59
00:03:57,346 --> 00:04:01,386
and the target category of C list are both

60
00:04:01,488 --> 00:04:05,194
the category of types. A functor is called an

61
00:04:05,232 --> 00:04:09,206
functor when its source and target categories

62
00:04:09,318 --> 00:04:13,274
are the same. Now that we've introduced the concepts of

63
00:04:13,312 --> 00:04:17,310
categories and functors, let's see some functions,

64
00:04:17,890 --> 00:04:21,950
and let's also see what problems they solve.

65
00:04:22,290 --> 00:04:25,506
It's common to have code that performs some kind of

66
00:04:25,528 --> 00:04:29,170
input or output. For example, we might have code

67
00:04:29,240 --> 00:04:32,190
that sends a request over a network,

68
00:04:32,350 --> 00:04:35,606
reads a file, or writes a record to a

69
00:04:35,628 --> 00:04:39,858
database. Such I O functions are side effects

70
00:04:39,954 --> 00:04:43,910
that make our code harder to reason about because they break

71
00:04:43,980 --> 00:04:48,426
referential transparency. Here on the side, the function

72
00:04:48,608 --> 00:04:51,882
get number side effect on the left has side

73
00:04:51,936 --> 00:04:55,846
effects because it reads user input from a console.

74
00:04:56,038 --> 00:04:59,702
To avoid such side effect, we can wrap

75
00:04:59,766 --> 00:05:03,520
the I O action into an instance of the I O class

76
00:05:03,970 --> 00:05:07,200
when we call the get number function on the right,

77
00:05:07,650 --> 00:05:10,430
no actual reading from the console.

78
00:05:10,930 --> 00:05:14,706
Rather, we simply get an I O object that represents the

79
00:05:14,728 --> 00:05:18,434
I O action. The code here shows what we can

80
00:05:18,472 --> 00:05:22,420
do with the I O object returned by the get number function,

81
00:05:22,790 --> 00:05:26,086
even though no actual I o has happened yet.

82
00:05:26,188 --> 00:05:30,102
When we call get number, that does not stop us from

83
00:05:30,156 --> 00:05:34,162
mapping the is even function over the nonexistent

84
00:05:34,226 --> 00:05:37,854
number when we are finally ready to incur

85
00:05:37,922 --> 00:05:41,466
the actual I o by coding the

86
00:05:41,568 --> 00:05:44,940
unsafe run method on the I O object.

87
00:05:45,310 --> 00:05:49,146
Although our example here is simple already, it shows that

88
00:05:49,248 --> 00:05:52,894
with the I o function we are able to keep the kernel of

89
00:05:52,932 --> 00:05:56,602
our code free of side effects and push

90
00:05:56,666 --> 00:06:00,320
the actual I o functions to the boundary of our program.

91
00:06:00,850 --> 00:06:04,082
Now let's look at another example here.

92
00:06:04,136 --> 00:06:08,334
At the top we have a function that takes an integer and returns

93
00:06:08,462 --> 00:06:11,650
ten modulo that integer. The function

94
00:06:11,720 --> 00:06:15,418
is a partial function because it's not defined when the input

95
00:06:15,454 --> 00:06:18,758
integer is zero. We can write the function

96
00:06:18,844 --> 00:06:22,594
at the bottom. The function at the bottom is now defined

97
00:06:22,642 --> 00:06:25,382
for all input values. However,

98
00:06:25,516 --> 00:06:29,738
we now have a different issue, and that is the new function

99
00:06:29,824 --> 00:06:33,238
is not very composable with other functions.

100
00:06:33,414 --> 00:06:37,130
Here's an illustration of the lack of composability.

101
00:06:37,710 --> 00:06:40,986
The code on the right tries to compose the two functions

102
00:06:41,018 --> 00:06:45,482
on the left. Because the ten mark by function returns

103
00:06:45,546 --> 00:06:49,134
either an integer or none, it is not very

104
00:06:49,172 --> 00:06:52,854
composable, and we have to use if else statements

105
00:06:53,002 --> 00:06:56,754
when we try to compose it with other functions. Is there

106
00:06:56,792 --> 00:07:00,002
a solution that can turn a

107
00:07:00,056 --> 00:07:03,822
partial function into a total function while retaining

108
00:07:03,886 --> 00:07:07,462
composability. That solution is the

109
00:07:07,516 --> 00:07:11,240
option functions. As the example here shows,

110
00:07:11,690 --> 00:07:15,894
the ten mark by function now returns an option of int.

111
00:07:16,092 --> 00:07:20,154
The option class of the funklift package has

112
00:07:20,192 --> 00:07:23,450
a subclass called nothing and another

113
00:07:23,520 --> 00:07:27,030
subclass called sum. Nothing represents

114
00:07:27,110 --> 00:07:30,714
the absence of a value. Sum represents

115
00:07:30,762 --> 00:07:33,786
the existence of a value. By the magic

116
00:07:33,818 --> 00:07:37,146
of functions and their fmap methods,

117
00:07:37,338 --> 00:07:41,434
we can compose ten map by with other functions,

118
00:07:41,562 --> 00:07:44,160
without any if else statements in the code.

119
00:07:44,530 --> 00:07:47,910
Just like how we visualize c list as a functor,

120
00:07:48,010 --> 00:07:50,850
we can visualize option as a functor.

121
00:07:51,350 --> 00:07:54,858
Map starts and arrows from a source category

122
00:07:54,974 --> 00:07:58,454
to a target category. So far we've been

123
00:07:58,492 --> 00:08:02,374
composing functions. It turns out that we can

124
00:08:02,412 --> 00:08:06,102
compose functions too. This diagram shows

125
00:08:06,156 --> 00:08:09,546
that we can compose the option functor and

126
00:08:09,568 --> 00:08:13,478
the c list function. The result of the composition

127
00:08:13,654 --> 00:08:17,580
is a new function, and we call that new functions

128
00:08:17,950 --> 00:08:22,090
c list after option. Like any other function,

129
00:08:22,240 --> 00:08:26,350
the new functions is a mapping between two categories.

130
00:08:26,690 --> 00:08:30,266
It maps dots to dots and arrows to arrows.

131
00:08:30,458 --> 00:08:33,534
If we can compose functors the way we

132
00:08:33,572 --> 00:08:37,774
compose arrows, does that mean functions are arrows

133
00:08:37,902 --> 00:08:41,954
in some sort of category? Notice that in this

134
00:08:41,992 --> 00:08:45,206
diagram, each rectangle represents a

135
00:08:45,228 --> 00:08:49,746
category. If we collapse the rectangles into dots,

136
00:08:49,938 --> 00:08:54,530
we will get a category whose dots are smaller categories

137
00:08:54,690 --> 00:08:58,234
and whose arrows are functions. Here's what that

138
00:08:58,272 --> 00:09:01,546
category looks like in a diagram. We call

139
00:09:01,568 --> 00:09:05,034
it the category of small categories. Of course,

140
00:09:05,072 --> 00:09:09,130
we don't just look at theories, we want to see some code,

141
00:09:09,200 --> 00:09:12,910
right? The code example on this slide shows

142
00:09:12,980 --> 00:09:16,222
how to compose functions in Python. Here,

143
00:09:16,276 --> 00:09:20,666
the variable nums is a C list of option objects.

144
00:09:20,858 --> 00:09:24,354
If we call fmap on nums, we will

145
00:09:24,392 --> 00:09:27,810
not be able to map over the numbers inside the option

146
00:09:27,880 --> 00:09:31,726
objects. In order to do that, we need to compose

147
00:09:31,838 --> 00:09:35,494
the two functions first, and we do that by

148
00:09:35,532 --> 00:09:39,190
using the compose class of the funklift package.

149
00:09:39,610 --> 00:09:44,354
Once we have the compose function, we can call fmap

150
00:09:44,402 --> 00:09:47,918
on it, just like we do with any other functions.

151
00:09:48,034 --> 00:09:51,814
This is really fantastic. In this diagram,

152
00:09:51,942 --> 00:09:55,766
capital f denotes a functor. The functions

153
00:09:55,798 --> 00:09:59,446
we've seen so far are called covariant functions.

154
00:09:59,638 --> 00:10:03,070
Here, covariant basically means

155
00:10:03,140 --> 00:10:07,182
that the two vertical arrows in the diagram point

156
00:10:07,236 --> 00:10:10,570
in the same direction. When a functor

157
00:10:10,730 --> 00:10:13,650
maps a source arrow to a target arrow.

158
00:10:14,150 --> 00:10:18,078
If the mapping does not change the direction of the arrows,

159
00:10:18,254 --> 00:10:21,762
then the functions is covariant. If the

160
00:10:21,816 --> 00:10:25,666
two vertical arrows in the diagram point in the opposite

161
00:10:25,698 --> 00:10:30,210
direction, then the function is contravariant.

162
00:10:30,370 --> 00:10:34,258
For contravariant functions, we have the fmap method.

163
00:10:34,434 --> 00:10:38,310
For contravarian functions, we have the cmap method

164
00:10:38,470 --> 00:10:42,246
similar to fmap. The cmap method

165
00:10:42,358 --> 00:10:46,122
lifts a function from type a to type b to

166
00:10:46,176 --> 00:10:50,300
a function that goes from f of b to f of a.

167
00:10:50,610 --> 00:10:54,990
Here's an example of a contravariant function called predicate.

168
00:10:55,410 --> 00:10:59,230
A predicate is something that is either true or false.

169
00:10:59,570 --> 00:11:03,266
In our example, we first have a predicate that

170
00:11:03,288 --> 00:11:07,010
will be true if we give it an even integer,

171
00:11:07,510 --> 00:11:11,358
and as the diagram shows, we can use cmap

172
00:11:11,454 --> 00:11:15,178
to convert that predicate of int into a predicate

173
00:11:15,214 --> 00:11:18,498
of str. With the converted predicate

174
00:11:18,594 --> 00:11:22,066
we can pass it the number six as a string,

175
00:11:22,258 --> 00:11:26,182
and it will tell us if that's an even number

176
00:11:26,236 --> 00:11:30,054
or not. The next type of functions we will look

177
00:11:30,092 --> 00:11:33,990
at is called applicative functions. Before we

178
00:11:34,060 --> 00:11:37,674
introduce applicative function, we need to first get to know

179
00:11:37,712 --> 00:11:41,470
a special kind of categories called closed category.

180
00:11:41,890 --> 00:11:45,230
In the diagram on the side, there are two categories.

181
00:11:45,810 --> 00:11:49,294
The category on the left has a dot for

182
00:11:49,332 --> 00:11:52,834
type a and a dot for type b. If the

183
00:11:52,872 --> 00:11:56,514
category also has a dot in gray for

184
00:11:56,552 --> 00:11:58,820
the function type a to b,

185
00:11:59,350 --> 00:12:02,594
plus some other properties, then the

186
00:12:02,632 --> 00:12:06,626
category is called a closed category. An example

187
00:12:06,728 --> 00:12:10,674
of a function type is into bool, as shown

188
00:12:10,722 --> 00:12:14,246
in the blue box. Now let's turn our attention to

189
00:12:14,268 --> 00:12:17,778
the category on the right. The category has a

190
00:12:17,804 --> 00:12:21,546
dot for the type f of a and a

191
00:12:21,568 --> 00:12:25,766
dot for the type f of b. Because it's also a closed

192
00:12:25,798 --> 00:12:30,254
category, it has a dot for the function type f

193
00:12:30,292 --> 00:12:33,120
of a to f of b in green.

194
00:12:33,650 --> 00:12:37,594
Between the two categories we have a functions that maps

195
00:12:37,642 --> 00:12:41,406
dots to dots and arrows to arrows. In particular,

196
00:12:41,588 --> 00:12:44,914
the functor maps the gray dot a to

197
00:12:44,952 --> 00:12:48,386
b on the left, f of a to b on

198
00:12:48,408 --> 00:12:52,286
the right. In blue, it may be the case that the blue

199
00:12:52,318 --> 00:12:55,766
dot and the green dot are not related at

200
00:12:55,788 --> 00:13:00,146
all if they happen to be one and the same dot.

201
00:13:00,338 --> 00:13:04,166
Then we say that the functor preserves the structure of

202
00:13:04,188 --> 00:13:07,654
the source category, and we call the functor a

203
00:13:07,692 --> 00:13:11,674
strict requiring the blue dot and the green dot to be

204
00:13:11,712 --> 00:13:14,890
the same dot is a rather strict condition.

205
00:13:15,230 --> 00:13:18,906
A somewhat more relaxed not require the

206
00:13:18,928 --> 00:13:22,666
two dots to be the same, we merely require that there's

207
00:13:22,698 --> 00:13:26,062
an arrow between the two dots. We call

208
00:13:26,116 --> 00:13:32,270
the functions a lex closed functions another

209
00:13:32,340 --> 00:13:36,542
name for lax closed functor is applicative

210
00:13:36,606 --> 00:13:40,606
functions, the arrow between the blue dot

211
00:13:40,798 --> 00:13:44,874
and the green dot app. That's a lot of theory.

212
00:13:45,022 --> 00:13:48,994
Let's see an example in code. Here we have a curried

213
00:13:49,042 --> 00:13:51,346
function for summing two integers.

214
00:13:51,538 --> 00:13:55,426
Currying means if a function takes multiple arguments,

215
00:13:55,618 --> 00:13:59,580
then the current function will take one argument at a time.

216
00:13:59,950 --> 00:14:04,220
In this example, we start with sum of 20.

217
00:14:04,910 --> 00:14:08,380
Then we f map the current function.

218
00:14:08,990 --> 00:14:12,286
What we end up with is an option of int

219
00:14:12,308 --> 00:14:16,266
to int, which is shown as the blue

220
00:14:16,298 --> 00:14:19,886
dot in the diagram. Because our option functions

221
00:14:19,988 --> 00:14:23,854
is an applicative function, we have the app arrow

222
00:14:23,982 --> 00:14:27,554
that takes us from the blue dot. The green dot is

223
00:14:27,592 --> 00:14:30,914
essentially a function that takes n and

224
00:14:30,952 --> 00:14:34,226
returns another option of int. So if we

225
00:14:34,248 --> 00:14:37,574
give that functions sum of 30, we will

226
00:14:37,612 --> 00:14:40,440
get back sum of 50 as the result.

227
00:14:41,130 --> 00:14:44,694
Next, let's turn our attention to a kind of functions called

228
00:14:44,732 --> 00:14:48,122
functors. If we have a type a and a type

229
00:14:48,176 --> 00:14:51,754
c, we can form the tuple type

230
00:14:51,872 --> 00:14:55,722
a comma c. If we have a type b and a type

231
00:14:55,776 --> 00:14:59,100
d, we can form a tuple type.

232
00:14:59,550 --> 00:15:02,654
And if there's an arrow from a to

233
00:15:02,692 --> 00:15:06,222
b and another arrow from c to d,

234
00:15:06,356 --> 00:15:09,546
we can take those two arrows and form a tuple

235
00:15:09,578 --> 00:15:13,120
of arrows that goes from a comma c.

236
00:15:13,730 --> 00:15:17,602
Now, if we have a functor that maps a comma c

237
00:15:17,736 --> 00:15:21,490
to f of a comma c and b comma d

238
00:15:21,560 --> 00:15:24,922
to f of b comma d, and the functor

239
00:15:25,006 --> 00:15:28,482
also maps the tuple of arrows to a lifted

240
00:15:28,546 --> 00:15:32,326
tuple of arrows, then we call such functions a

241
00:15:32,348 --> 00:15:35,954
functor. In python code, a functor

242
00:15:36,002 --> 00:15:39,846
class takes only one type argument, whereas a

243
00:15:39,868 --> 00:15:42,998
functor class takes two type arguments.

244
00:15:43,174 --> 00:15:46,986
Let's see an example of a functor. The functor in the

245
00:15:47,008 --> 00:15:51,070
example is the either class from the funk devt package.

246
00:15:51,490 --> 00:15:55,294
As its name suggests, either represents one of

247
00:15:55,332 --> 00:15:58,494
two possibilities. We represent those two

248
00:15:58,532 --> 00:16:01,982
possibilities with two classes left and

249
00:16:02,036 --> 00:16:04,340
right. In the co example,

250
00:16:05,030 --> 00:16:08,930
we take two functions, add one and negate.

251
00:16:09,670 --> 00:16:13,858
We by map them over an either

252
00:16:13,944 --> 00:16:17,960
object. Because the either object is a write object,

253
00:16:18,410 --> 00:16:22,294
the negate function will have no effect, and the add one

254
00:16:22,332 --> 00:16:25,560
function will be applied to the number five.

255
00:16:26,010 --> 00:16:30,318
Like functor, there's a kind of functions called profunctors

256
00:16:30,434 --> 00:16:34,186
that also takes two type arguments. The difference

257
00:16:34,288 --> 00:16:37,670
is a functor is covariant

258
00:16:37,750 --> 00:16:41,578
in both of its type arguments, whereas a profunctors

259
00:16:41,674 --> 00:16:45,050
is contravariant in the first type argument

260
00:16:45,210 --> 00:16:48,666
and covariant in the second type argument.

261
00:16:48,858 --> 00:16:52,658
The diagram here is very similar to the diagram we

262
00:16:52,664 --> 00:16:56,594
saw earlier. For functors, the only difference is

263
00:16:56,632 --> 00:17:01,060
that the arrow between type a and type b

264
00:17:01,510 --> 00:17:05,682
a. Perhaps very helpful way for visualizing how a profunctors

265
00:17:05,746 --> 00:17:09,960
works is through a diagram like the one at the bottom.

266
00:17:10,410 --> 00:17:14,134
We can visualize a profunctors p

267
00:17:14,252 --> 00:17:17,706
of a comma c as a box that

268
00:17:17,728 --> 00:17:22,166
takes an a and outputs a c. When we call dimap

269
00:17:22,278 --> 00:17:25,706
under profunctors. We get back a

270
00:17:25,728 --> 00:17:29,194
new profunctors and outputs a d.

271
00:17:29,392 --> 00:17:33,710
There are many different profunctors. One of them is called forget

272
00:17:34,130 --> 00:17:37,840
it always returns some value of type r,

273
00:17:38,290 --> 00:17:42,094
type of input value you give it. Star and

274
00:17:42,132 --> 00:17:45,230
costar are two other kinds of profunctors.

275
00:17:45,670 --> 00:17:49,060
The symbol f here represents a functions.

276
00:17:49,510 --> 00:17:53,566
So star f takes an a and returns

277
00:17:53,598 --> 00:17:57,350
an f of c. When you die map on it,

278
00:17:57,500 --> 00:18:01,222
you can turn it into a new star f that

279
00:18:01,276 --> 00:18:04,520
takes a b and returns an f of d.

280
00:18:04,890 --> 00:18:08,630
Here's a co example of the star profunctors.

281
00:18:08,970 --> 00:18:11,770
The star profunctors takes an integer.

282
00:18:12,350 --> 00:18:16,166
If we give it integer three, it will give us sum

283
00:18:16,198 --> 00:18:19,740
of one because ten mod by three is one.

284
00:18:20,110 --> 00:18:23,914
If we pass zero to the profunctors, it will

285
00:18:23,952 --> 00:18:27,246
give us nothing because ten mod by zero is not

286
00:18:27,268 --> 00:18:31,498
a valid operation. We can take the star profunctors

287
00:18:31,594 --> 00:18:35,300
and die map on it with the

288
00:18:35,910 --> 00:18:40,130
stir to int function on the way in is even

289
00:18:40,200 --> 00:18:43,794
function on the way out. What we end up with is

290
00:18:43,832 --> 00:18:47,554
a new profunctors that takes a string and returns

291
00:18:47,602 --> 00:18:51,320
an option of bool. The code example we have

292
00:18:52,090 --> 00:18:55,618
starts to look like some sort of data pipelines

293
00:18:55,794 --> 00:18:59,320
that can be chained and composed in flexible ways,

294
00:18:59,850 --> 00:19:03,458
and that's indeed a good application of profunctors.

295
00:19:03,634 --> 00:19:06,840
Congratulations for making it to this point.

296
00:19:07,210 --> 00:19:10,446
We've covered a lot in a fairly short amount of

297
00:19:10,468 --> 00:19:13,630
time. We've introduced the concept,

298
00:19:13,970 --> 00:19:16,266
then we covered covariant,

299
00:19:16,378 --> 00:19:19,882
contravariant applicative functions,

300
00:19:20,026 --> 00:19:23,150
as well as functors and profunctors.

301
00:19:23,490 --> 00:19:25,740
Hope you all enjoyed the talk. Thank you.

