1
00:00:25,250 --> 00:00:28,486
Everybody. My name is Mardente, I'm a

2
00:00:28,508 --> 00:00:32,326
principal engineer at Cisco Systems and my

3
00:00:32,348 --> 00:00:36,450
talk today is about scaling secrets in Kubernetes,

4
00:00:36,530 --> 00:00:40,760
a secure multi cluster approach, essentially how to manage

5
00:00:41,290 --> 00:00:44,882
secrets when you are dealing with a fleet of Kubernetes

6
00:00:44,946 --> 00:00:49,142
clusters, data security is

7
00:00:49,196 --> 00:00:53,786
critical as we and that includes keeping secrets

8
00:00:53,818 --> 00:00:57,502
confidential. So first of all, what is a secret? A secrets can be anything

9
00:00:57,556 --> 00:01:01,322
like APIs, keys, password, certificates,

10
00:01:01,466 --> 00:01:04,978
SSH keys, and if those falls into the

11
00:01:04,984 --> 00:01:07,810
wrong ends, it can have serious consequences.

12
00:01:08,150 --> 00:01:12,206
Secrets management system address this problem by storing

13
00:01:12,238 --> 00:01:15,010
your secrets in a secure encrypted format,

14
00:01:15,370 --> 00:01:19,426
which makes it more difficult for attackers

15
00:01:19,458 --> 00:01:23,320
to steal them. And also the secrets management system also

16
00:01:23,690 --> 00:01:27,234
provides a simple and secure way for authorized

17
00:01:27,282 --> 00:01:31,002
user to use this information. So there are a lot of benefits of using

18
00:01:31,056 --> 00:01:34,458
a secrets management system. As I

19
00:01:34,464 --> 00:01:37,562
mentioned before, security secrets is never

20
00:01:37,616 --> 00:01:41,150
stored like in plain text. Secret is always stored like using

21
00:01:41,220 --> 00:01:44,394
strong encryption. And only authorized user

22
00:01:44,442 --> 00:01:47,642
can access this information. Convenience,

23
00:01:47,706 --> 00:01:51,118
because you have a single place where you can go and

24
00:01:51,284 --> 00:01:54,154
create, update or delete your secrets.

25
00:01:54,282 --> 00:01:57,438
Doesn't matter wherever you are, as long as you have access to the secrets

26
00:01:57,454 --> 00:02:01,170
management system, you can do that. And the secrets management system

27
00:02:01,240 --> 00:02:04,786
provides you with detailed audit logs so you

28
00:02:04,808 --> 00:02:08,166
know who has access what and when. And this is

29
00:02:08,188 --> 00:02:12,370
important because it helps you comply with security regulations.

30
00:02:12,530 --> 00:02:16,774
And also if an incident happens

31
00:02:16,892 --> 00:02:20,386
now you know where to start from, you know what information has been accessed by

32
00:02:20,428 --> 00:02:24,380
whom, and so you can start from us tracking from there.

33
00:02:24,830 --> 00:02:28,218
What if your applications are running in a Kubernetes cluster? How do

34
00:02:28,224 --> 00:02:32,742
you manage your secret? In that case, we listed

35
00:02:32,886 --> 00:02:36,334
the benefits of using a secret management system, which means

36
00:02:36,372 --> 00:02:40,634
clearly we want to use a secrets managing system. But the secrets management

37
00:02:40,682 --> 00:02:43,650
system does not run in your Kubernetes cluster.

38
00:02:44,070 --> 00:02:47,298
So you need an application running

39
00:02:47,384 --> 00:02:50,610
within your Kubernetes cluster that can access

40
00:02:50,680 --> 00:02:53,806
the information present in the secrets

41
00:02:53,838 --> 00:02:57,890
management system and makes it available to the application running

42
00:02:57,960 --> 00:03:01,670
in your Kubernetes cluster. External secrets operator is

43
00:03:01,740 --> 00:03:04,930
one of those tools. It's an open source tool. It integrates

44
00:03:05,010 --> 00:03:07,960
with AWS, SQL manager, Azure Control,

45
00:03:08,410 --> 00:03:11,626
Azure, Google SQL Manager, IBM Cloud and

46
00:03:11,648 --> 00:03:15,130
many more. And what it does, it synchronize the content

47
00:03:15,200 --> 00:03:18,678
that is present in the secrets in the secrets

48
00:03:18,694 --> 00:03:21,746
management system into your Kubernetes cluster.

49
00:03:21,798 --> 00:03:25,086
So let's see how that is done. In this example,

50
00:03:25,188 --> 00:03:28,522
we have a cluster and the external secret operator

51
00:03:28,586 --> 00:03:32,930
is running within this cluster and we do have a Google Cloud

52
00:03:33,000 --> 00:03:36,206
secret manager and the external

53
00:03:36,238 --> 00:03:39,602
secrets operator has been provided with the confidential and

54
00:03:39,656 --> 00:03:42,770
information to access the Google secrets manager.

55
00:03:43,750 --> 00:03:47,654
The external secret operator detects that there is a secret in

56
00:03:47,692 --> 00:03:51,814
the Google Cloud secret manager and syncs it into

57
00:03:51,932 --> 00:03:55,682
the Kubernetes cluster. And it does it by creating a Kubernetes

58
00:03:55,746 --> 00:03:59,926
secrets into the Kubernetes cluster. Now the content of this Kubernetes secret

59
00:04:00,118 --> 00:04:04,214
matches the content of the secret

60
00:04:04,262 --> 00:04:07,130
present in the Google Cloud secret manager,

61
00:04:08,110 --> 00:04:11,882
which means another ten point like any application running in the Kubernetes cluster

62
00:04:11,946 --> 00:04:15,614
can access this

63
00:04:15,652 --> 00:04:19,262
information. But the external secret operator doesn't stop

64
00:04:19,316 --> 00:04:23,310
here. Let's say that we update the secret

65
00:04:23,390 --> 00:04:27,394
in the Google cloud secret manager because that's the only place where we want

66
00:04:27,432 --> 00:04:30,130
to create, update or delete our secret.

67
00:04:31,110 --> 00:04:34,258
Now the external secret operator detects that

68
00:04:34,424 --> 00:04:37,746
a change has been made. It knows that at this

69
00:04:37,768 --> 00:04:41,522
point the cooperative secrets is out of sync compared

70
00:04:41,586 --> 00:04:45,110
with the content that is present in the Google Cloud

71
00:04:45,180 --> 00:04:49,006
secret manager. And so it updates. And now your Kubernetes

72
00:04:49,058 --> 00:04:52,666
secrets thanks to the external secret operator is back in

73
00:04:52,688 --> 00:04:56,170
sync with whatever you have in the Google Cloud secret manager.

74
00:04:56,510 --> 00:05:00,166
Now this works perfectly if you have one cluster,

75
00:05:00,278 --> 00:05:03,920
but what if you have a fleet of Kubernetes clusters to manage?

76
00:05:04,850 --> 00:05:09,386
Well you may think that you want to install external

77
00:05:09,418 --> 00:05:13,406
secret operator, deploy external secret operator in each one of the clusters that

78
00:05:13,428 --> 00:05:16,674
you manage, but that is the wrong approach. It's not

79
00:05:16,712 --> 00:05:20,020
scalable and error prone. Think about the case where

80
00:05:21,270 --> 00:05:24,562
first of all you have to configure the external secret operator like in times.

81
00:05:24,616 --> 00:05:28,440
But think about the case where you want to change

82
00:05:28,970 --> 00:05:32,994
the credentials used by the external secret

83
00:05:33,042 --> 00:05:36,626
operator to use to access your secrets

84
00:05:36,658 --> 00:05:40,154
management system. Now there are place where you have to go and

85
00:05:40,192 --> 00:05:43,606
update this information. So if we have a fleet

86
00:05:43,638 --> 00:05:47,482
of cluster, this is where Sveltos can come and

87
00:05:47,536 --> 00:05:51,754
help. Sveltos is a Kubernetes add on controller.

88
00:05:51,882 --> 00:05:55,642
So if you have a fleet of Kubernetes clusters using Sveltos,

89
00:05:55,706 --> 00:05:59,214
you can programmatically deploy add

90
00:05:59,252 --> 00:06:02,270
ons and application in this fleet of clusters.

91
00:06:03,250 --> 00:06:07,186
How does Sveltos work it run in

92
00:06:07,368 --> 00:06:11,490
management cluster. So you have a Kubernetes cluster which you use a management cluster.

93
00:06:11,990 --> 00:06:16,020
Sveltos is running there cluster profile is the

94
00:06:16,710 --> 00:06:20,370
custom resource definition which is used to tell Sveltos

95
00:06:20,730 --> 00:06:23,894
which add ons and application to deploy where on

96
00:06:23,932 --> 00:06:27,362
which clusters and then you have a fleet of Kubernetes

97
00:06:27,426 --> 00:06:30,674
clusters. Those can be cluster API power clusters.

98
00:06:30,802 --> 00:06:34,682
Veltos has built in support for clusters API power cluster which means

99
00:06:34,736 --> 00:06:38,086
that if you create a cluster using cluster API,

100
00:06:38,118 --> 00:06:41,306
there is nothing else that you have to do as Sveltos automatically

101
00:06:41,338 --> 00:06:45,466
detects those clusters and can manage application and advance in those clusters.

102
00:06:45,578 --> 00:06:48,442
But then you can have any other type of cluster,

103
00:06:48,506 --> 00:06:51,230
GKE cluster, Sivo cluster, rancher,

104
00:06:52,210 --> 00:06:56,846
any type of clusters you can easily register to

105
00:06:56,868 --> 00:07:00,526
be managing by Sveltos. The only things that Sveltos

106
00:07:00,558 --> 00:07:03,934
require is that there is a network connectivity from the management

107
00:07:03,982 --> 00:07:06,950
cluster to the cluster that you want to be managed by Sveltos.

108
00:07:08,010 --> 00:07:11,494
Cluster profile as I mentioned, it's the

109
00:07:11,532 --> 00:07:14,934
CRD that is used to tell Sveltos what to do

110
00:07:15,052 --> 00:07:18,298
and it contains like few sections in the spec.

111
00:07:18,464 --> 00:07:22,122
The clusters selector field

112
00:07:22,176 --> 00:07:26,074
is a Kubernetes label selector which selects all a set

113
00:07:26,112 --> 00:07:30,022
of clusters. In this case it's selecting all the clusters which have label

114
00:07:30,086 --> 00:07:33,566
environment set to a theme which stands for

115
00:07:33,588 --> 00:07:36,794
functional application. Then it has an helm chart section.

116
00:07:36,922 --> 00:07:40,382
In these helm charts you can put one or more helm charts and

117
00:07:40,436 --> 00:07:44,334
what Sveltos will do, it will take each one of those and will

118
00:07:44,372 --> 00:07:47,826
deploy those in every cluster matching the cluster selector. In this case

119
00:07:47,848 --> 00:07:51,454
we only have Caverno. So Sveltos will deploy Caverno version

120
00:07:51,502 --> 00:07:55,294
2.6.0 in every cluster matching the cluster selector environment.

121
00:07:55,342 --> 00:07:58,658
Functional application. Then you have a customization

122
00:07:58,754 --> 00:08:05,926
ref section and you

123
00:08:05,948 --> 00:08:09,914
have a list of customization configuration. Here each one

124
00:08:09,952 --> 00:08:13,302
of those entry points to a directory

125
00:08:13,366 --> 00:08:16,666
which contains customized files. What Sveltos will

126
00:08:16,688 --> 00:08:19,962
do will run the customized SDK on top of those.

127
00:08:20,096 --> 00:08:24,122
We'll take the output which is set

128
00:08:24,176 --> 00:08:27,934
of Kubernetes resources and we'll deploy those Kubernetes resources in every

129
00:08:27,972 --> 00:08:32,606
cluster that matches the cluster selector. And finally you

130
00:08:32,628 --> 00:08:36,414
can put the Kubernetes

131
00:08:36,462 --> 00:08:40,030
resources you want to be deployed in a secret. So in a config map,

132
00:08:40,110 --> 00:08:43,726
both secrets and config map have a data section

133
00:08:43,838 --> 00:08:47,522
and so in that data section you can put one or more Kubernetes resources.

134
00:08:47,586 --> 00:08:49,830
You can use both Yaml or Json.

135
00:08:51,290 --> 00:08:54,946
What Sveltos will do we'll take the content of any secrets and config

136
00:08:54,978 --> 00:08:58,346
map that is referencing and will deploy in every cluster which is

137
00:08:58,368 --> 00:09:05,660
matching the cluster selector. Now another

138
00:09:06,590 --> 00:09:11,158
strong point for using Sveltos is that anything

139
00:09:11,264 --> 00:09:15,434
that you want to be deployed can be expressed as a template. And Sveltos

140
00:09:15,482 --> 00:09:19,054
has the ability of instantiating these templates using

141
00:09:19,092 --> 00:09:22,350
resources which are present in the management cluster

142
00:09:22,690 --> 00:09:26,038
at the time of deployment. So in this example we're telling Sveltos

143
00:09:26,074 --> 00:09:29,666
take the content which is present in the config map into the full name

144
00:09:29,688 --> 00:09:34,398
space called info. Know that this is a template

145
00:09:34,574 --> 00:09:38,180
and instantiate it using the

146
00:09:38,950 --> 00:09:42,406
content which is present in this secrets in

147
00:09:42,428 --> 00:09:45,746
the management cluster in the default namespace called autoscaler.

148
00:09:45,938 --> 00:09:50,066
So let's see how we can integrate together external

149
00:09:50,098 --> 00:09:53,820
secret operator on Sveltos to efficiently manage

150
00:09:56,670 --> 00:09:59,210
secrets in a fleet of Kubernetes clusters.

151
00:09:59,630 --> 00:10:02,894
Well, it's very easy to do. So we'll start creating one

152
00:10:02,932 --> 00:10:07,146
management cluster and in this management cluster we deploy both Sveltos

153
00:10:07,178 --> 00:10:10,574
and the external secret operator. Then in this

154
00:10:10,612 --> 00:10:14,274
example we have two managed clusters, one GK cluster and one

155
00:10:14,312 --> 00:10:18,194
cluster API power cluster. We have a

156
00:10:18,232 --> 00:10:22,206
Google Cloud secrets manager and we configure external

157
00:10:22,238 --> 00:10:25,986
secret operator to synchronize

158
00:10:26,098 --> 00:10:30,438
whatever information, whatever secrets is present in the Google cloud

159
00:10:30,524 --> 00:10:33,846
secret manager. So what external secret operator will

160
00:10:33,868 --> 00:10:37,362
do? In this case, it detects that there is a secret

161
00:10:37,426 --> 00:10:41,062
called Sveltos secrets in the Google Cloud secrets manager.

162
00:10:41,206 --> 00:10:45,222
It takes this information and creates a secrets in the Kubernetes cluster.

163
00:10:45,286 --> 00:10:48,458
In the management cluster, Sveltos has been

164
00:10:48,544 --> 00:10:51,440
instructed to watch for this information,

165
00:10:51,970 --> 00:10:55,514
take this information and pass it to every managed cluster.

166
00:10:55,562 --> 00:10:59,310
So at this point you are secret.

167
00:10:59,970 --> 00:11:03,730
You added your secret in a single place, the Google

168
00:11:03,800 --> 00:11:07,054
Cloud secrets manager and you're using the external secret

169
00:11:07,102 --> 00:11:10,754
operator to sync that information into your

170
00:11:10,792 --> 00:11:14,306
management cluster. And then you're using Sveltos to propagate this information

171
00:11:14,408 --> 00:11:17,558
to every cluster that you manage.

172
00:11:17,724 --> 00:11:20,310
What happens if the secrets gets updated?

173
00:11:20,650 --> 00:11:25,410
We go and update the secret in the Google cloud secret manager

174
00:11:25,570 --> 00:11:28,620
well, external secrets operator, as we saw,

175
00:11:29,150 --> 00:11:32,762
detects that there was a change

176
00:11:32,896 --> 00:11:36,694
and updates by updating the Kubernetes

177
00:11:36,742 --> 00:11:40,586
secrets management cluster. And now Sveltos detects that

178
00:11:40,608 --> 00:11:44,670
the external secret operator has updated the secrets that they manage and

179
00:11:44,740 --> 00:11:48,442
it takes the content and updates the content like in every managed cluster.

180
00:11:48,506 --> 00:11:52,958
So it's very easy and programmatical way of

181
00:11:53,124 --> 00:11:56,846
efficiently managing secrets in a fleet of

182
00:11:56,868 --> 00:12:00,590
Kubernetes clusters. If you want more info,

183
00:12:01,570 --> 00:12:04,966
you can check this Sveltos repo, this GitHub.com project,

184
00:12:05,028 --> 00:12:08,146
expanders and or the external secrets

185
00:12:08,178 --> 00:12:11,826
operator Repo, which is again on GitHub external

186
00:12:11,858 --> 00:12:15,046
secrets external secrets thank

187
00:12:15,068 --> 00:12:17,940
you so much. That's all for me. Thanks a lot.

