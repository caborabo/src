{"language_code": "en_us", "audio_url": "https://cdn.assemblyai.com/upload/a63e93c8-e88d-409f-9d45-2e38398ddd0a", "punctuate": true, "format_text": true, "dual_channel": null, "webhook_url": null, "webhook_auth_header_name": null, "webhook_auth_header_value": null, "audio_start_from": null, "audio_end_at": null, "word_boost": ["based", "be", "bug", "burning", "close", "conf fourty two", "hundreds", "incidents", "operations", "problem", "restoring", "richard finlay tweed", "senior site reliability engineer", "years"], "boost_param": "high", "filter_profanity": false, "redact_pii": false, "redact_pii_audio": false, "redact_pii_policies": null, "redact_pii_sub": null, "speaker_labels": false, "speakers_expected": null, "content_safety": false, "content_safety_confidence": null, "iab_categories": false, "custom_spelling": null, "disfluencies": false, "sentiment_analysis": false, "auto_chapters": false, "entity_detection": false, "summarization": true, "summary_model": "informative", "summary_type": "bullets_verbose", "auto_highlights": true, "language_detection": false, "speech_threshold": null, "speech_model": null, "id": "1720c96b-ef71-4ce6-9d03-ecb1c73d3515", "status": "completed", "error": null, "text": "This is why repair a burning house with me Richard Tweed this is a collection of hard won learnings from hundreds of software incidents. It is not a guide to the process of incidents management. At the end of this, there'll be some links to examples of those. Think of this as common behaviors and challenges I see for folks during incidents. Also, try and guess which book influenced these slides and send me a message afterwards. Key takeaways from this are going to be mitigate don't fix clear communication and ownership learn from mistakes. Things go wrong all the time and should I declare an incident? Yes. What is an incident? Why have I written this? An incident is a coordinated response to mitigate an issue. Now that we know what an incident is, we should know what to do. So for our burning house, this would be declaring an incidents to put out the fire and get everyone to safety, clear communication and ownership. During incidents, someone should know what's going on, and everybody involved should know what they're meant to be doing and when. Depending on what happens during that incident and how critical a problem it is, you'll either have the bystander effect, somebody else is already fixing this right? Or you'll encounter the exact opposite where everyone's trying to be a hero, trying to help, but they only succeed in getting in everyone else's way. These can usually be avoided by having clear responsibility for coordinating the response. This is normally done by a role called the incident manager. You will also have someone who is hands on keyboard for the mitigation, often called the operations lead. Another way that you can avoid these issues is by clearly telling somebody what you want done and when you want updates. The person organizing the incident manager should not be the one fixing anything. They should be focused on making sure everyone else has what they need and that at least they know what's going on. During an incident, you should also do explicit handovers, so at the beginning there'll only be one person, but over time you'll have more people doing more things. So whenever you're handing over those responsibilities, do it explicitly. For example, say you need a break, which you will. You can go to the person who you're handing it over to and say, will you take over as incident manager? Okay, you are now the incident manager. I will see you in. So in our house fire example, the incident manager would be the person who finds the fire. They would then hand over that responsibility to the firefighters. Once they arrive, they would then brief them about how many people are expected to be in the building, how far the fire has spread, and any other relevant information at that point. Similarly, it's very common for decision paralysis to set in, burning important incidents to reduce this what you're going to do and ask whether they disagree. Don't just ask open ended questions of what should we do. If you're having trouble getting decisions from people. Engineers and developers love correcting something or someone that's wrong, please, please write things down. Having a record of who thought what, what was done and why is invaluable for getting people who join later up to speed and getting them effective promptly. It's also very useful for the write up afterwards and seeing what can be improved before the next incident. Don't fix most developers, when faced with an issue, will dive directly into the source code to try and find the bug and create a fix. Sorry to break it to you, but this is a complete waste of your time in these situations, especially at the start of an incident. If it's long running, there may be some cause for this. But yeah, during an incident your focus must be on preventing things getting worse and mitigating the existing issue. Regardless of how fast your CI system is and how robust you're testing, developing a fix and testing it to the standards of your team will take too long. It also ignores the very real possibilities that the fix makes things worse. An incident is not an excuse to ignore everything you've learned about safe code practices. If you need help from other teams, don't be afraid to ask for it. Page them if you need to and ask for help. The priority is mitigation. To use the burning house analogy, you shouldn't be installing a replacement wooden stairwell while it's still on fire. Put the fire out. Then you can plan your rebuild or your remodel. Things go wrong all the time. When an incident is declared, there can be an instinct to panic or to rush to conclusions. The best thing you can do is take a moment to work out what's actually going on and coordinate with others to actually investigate the issue and eventually mitigate it. If you see a fire, it is better by far to check how far it has spread and whether there are any extinguishers of the correct type nearby. Rather than blindly grabbing the closest one and using a water extinguisher on an oil fire, have a look at a video of that. It's pretty dramatic. So for our house example, everyone burns toast, drops a bug and throws a switch remote at the TV. Okay, maybe just me for the last one. Learn from mistakes once the incident has based learn everything you can from an incident. Don't just fix the bug. They're a tremendous way to learn how your systems work, how your processes work. What's people's natural instincts? They aren't necessarily what you would expect from talking to people during the normal nine to five. You could learn, for example, that your silence and escalate buttons are too close together for your 04:00 a.m.. Brain. And now you've woken up a director. Or you could find out that your runbooks, your readmes, your documentation, your training only references the old name of the service rather than the new one. So you had to spend half an hour or an hour trying to work out what this thing could possibly be. We learned to use the switch remote straps. Also, it's incredibly likely in an incident that many of your preparations, maybe even all of them, will be forgotten in the heat of the moment. Try and remember that fact. Then try and remember your training and experience. As long as you get back on track, it doesn't matter if you started on the wrong foot for a house fire, you might be so preoccupied with the flames that you see that you forget to get out of the house to get out of the fire. Should I declare an incident? If you're wondering whether to declare an incident, do. The fact you're wondering at all means it's worthy of investigation. As mentioned before, if an incident is called and turns out to be unnecessary, then delve into why. Use the five whys technique. It's another opportunity to learn and improve. If your dashboards are always red because you misconfigured a threshold, fix it so that you're not in that situation again. A fire alarm screaming because you burn toast is far better than the alarm not going off when there's a real electrical fire. Just to repeat, the key takeaways from this were mitigate. Don't fix clear communication and ownership. Learn from mistakes. Things go wrong all the time. And should I declare an incident? If you're wondering, yes. Here are some useful resources. There are entire books written about this, so if it's something you're interested in, do.", "words": [], "utterances": null, "confidence": 0.946253833718249, "audio_duration": 569.0, "webhook_status_code": null, "webhook_auth": false, "summary": "- This is a collection of hard won learnings from hundreds of software incidents. Key takeaways are clear communication and ownership. An incident is a coordinated response to mitigate an issue. Focus must be on preventing things getting worse and mitigating the existing issue.", "auto_highlights_result": {"status": "success", "results": [{"count": 5, "rank": 0.09, "text": "incident manager", "timestamps": [{"start": 141728, "end": 142970}, {"start": 163928, "end": 165102}, {"start": 201396, "end": 202750}, {"start": 204788, "end": 205786}, {"start": 211348, "end": 212106}]}, {"count": 1, "rank": 0.08, "text": "important incidents", "timestamps": [{"start": 234380, "end": 235910}]}, {"count": 1, "rank": 0.08, "text": "incidents management", "timestamps": [{"start": 37628, "end": 38946}]}, {"count": 1, "rank": 0.08, "text": "software incidents", "timestamps": [{"start": 33868, "end": 34930}]}, {"count": 1, "rank": 0.06, "text": "more people", "timestamps": [{"start": 185052, "end": 185558}]}, {"count": 1, "rank": 0.06, "text": "more things", "timestamps": [{"start": 185996, "end": 187094}]}, {"count": 3, "rank": 0.05, "text": "clear communication", "timestamps": [{"start": 63670, "end": 65022}, {"start": 97150, "end": 98214}, {"start": 549610, "end": 550794}]}, {"count": 1, "rank": 0.05, "text": "clear responsibility", "timestamps": [{"start": 136476, "end": 137598}]}, {"count": 1, "rank": 0.05, "text": "next incident", "timestamps": [{"start": 281148, "end": 282470}]}, {"count": 1, "rank": 0.04, "text": "other teams", "timestamps": [{"start": 342672, "end": 343654}]}, {"count": 1, "rank": 0.04, "text": "house fire example", "timestamps": [{"start": 209620, "end": 210878}]}, {"count": 1, "rank": 0.04, "text": "hard won learnings", "timestamps": [{"start": 30972, "end": 32402}]}, {"count": 1, "rank": 0.04, "text": "open ended questions", "timestamps": [{"start": 244976, "end": 245850}]}, {"count": 1, "rank": 0.04, "text": "decision paralysis", "timestamps": [{"start": 231932, "end": 233122}]}, {"count": 1, "rank": 0.04, "text": "burning house analogy", "timestamps": [{"start": 351568, "end": 353158}]}]}, "content_safety_labels": null, "iab_categories_result": null, "chapters": null, "sentiment_analysis_results": null, "entities": null}