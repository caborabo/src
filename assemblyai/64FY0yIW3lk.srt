1
00:00:27,894 --> 00:00:31,366
Hi, my name's Justin Shear and I'm accompanied by

2
00:00:31,430 --> 00:00:35,406
Justin Snyder. We both belong to Northwestern Mutual,

3
00:00:35,470 --> 00:00:38,834
and today we're going to talk about restifying open telemetry.

4
00:00:42,374 --> 00:00:46,554
As I said, I'm Justin Scheer. I'm a lead software engineer at Northwestern Mutual.

5
00:00:47,134 --> 00:00:50,390
I belong to an internal consulting group where we help move tech

6
00:00:50,422 --> 00:00:53,914
initiatives forward. We basically provide acceleration

7
00:00:55,114 --> 00:00:58,534
to moving a bunch of things forward.

8
00:00:59,514 --> 00:01:03,266
Yep, and I'm Justin Snyder. I am a software engineering manager on one of our

9
00:01:03,290 --> 00:01:06,538
cloud native applications that regularly works with the

10
00:01:06,626 --> 00:01:10,786
team that Justin is on to pilot and proof of concepts some of those technology

11
00:01:10,890 --> 00:01:11,694
initiatives.

12
00:01:15,954 --> 00:01:19,954
So, as I say in the beginning, we're going to be talking about rectifying

13
00:01:19,994 --> 00:01:23,436
open telemetry. But for those that maybe are not familiar with

14
00:01:23,460 --> 00:01:27,224
open telemetry, or you're familiar with it because it's been

15
00:01:27,564 --> 00:01:31,428
used around your APM tooling, but maybe you don't really know

16
00:01:31,476 --> 00:01:35,004
too much in depth about it. Open telemetry. It's an

17
00:01:35,044 --> 00:01:38,492
open source both protocol set of SDKs for all

18
00:01:38,508 --> 00:01:41,044
of your telemetry pieces of data.

19
00:01:41,204 --> 00:01:44,364
So your usual traces and metrics

20
00:01:44,524 --> 00:01:48,398
allows you to easily ingest those into your APM tooling. But then

21
00:01:48,446 --> 00:01:52,174
also your, I would say, non typical telemetry

22
00:01:52,214 --> 00:01:55,030
toolings, at least in the past few years.

23
00:01:55,182 --> 00:01:58,910
So allow you to easily ingest your logs into your APM tooling.

24
00:01:59,022 --> 00:02:02,782
And just because of the helpful open search,

25
00:02:02,918 --> 00:02:06,782
we can now even get code profiling loaded

26
00:02:06,838 --> 00:02:10,670
into APM. It's very open source and extensible.

27
00:02:10,822 --> 00:02:14,222
We'll showcase how we kind of did that with our tooling.

28
00:02:14,358 --> 00:02:18,326
And also it's something you could just pull down yourself and

29
00:02:18,390 --> 00:02:21,662
create your own tooling like we did. It supports a lot of popular

30
00:02:21,718 --> 00:02:25,134
languages, so everything from like C, C sharp, Java to,

31
00:02:25,214 --> 00:02:28,942
you know, maybe you're a little bit more not used

32
00:02:28,998 --> 00:02:32,430
as much tooling. So stuff like Erlang or Elixir, and there's

33
00:02:32,462 --> 00:02:36,142
popular integrations with all of your favorite cloud native

34
00:02:36,198 --> 00:02:40,714
tooling to even stuff that maybe is more tailored for on premise systems.

35
00:02:41,714 --> 00:02:42,534
Yeah,

36
00:02:47,514 --> 00:02:50,946
but with all of that said, we laid out that

37
00:02:51,010 --> 00:02:54,578
it's this open source piece of tooling, that there's

38
00:02:54,746 --> 00:02:58,378
integrations across the board, but there's still many

39
00:02:58,426 --> 00:03:01,174
issues facing the open telemetry ecosystem.

40
00:03:02,034 --> 00:03:05,306
It's very easy for developers like Justin

41
00:03:05,330 --> 00:03:08,882
and myself to easily put this stuff in. We're in code almost every

42
00:03:08,938 --> 00:03:12,364
day, so for us, it seems

43
00:03:12,404 --> 00:03:15,900
very simple. Oh, I just add these couple of lines and everything's done.

44
00:03:16,012 --> 00:03:19,652
But for anyone else that looks at it, it's arcane, it's something

45
00:03:19,708 --> 00:03:23,348
that they're just not going to understand. And to me I

46
00:03:23,356 --> 00:03:26,804
should say to us, this is a limitation of open

47
00:03:26,844 --> 00:03:30,132
telemetry. Number two is the integration

48
00:03:30,188 --> 00:03:34,284
into legacy technologies. It's very sparse. If you are interested,

49
00:03:34,324 --> 00:03:38,846
you are mainframe users. Check out open mainframe. They have some tips

50
00:03:38,870 --> 00:03:43,078
and tricks to get this loaded into your mainframe systems,

51
00:03:43,206 --> 00:03:46,686
but there's still plenty of legacy tooling out there that

52
00:03:46,750 --> 00:03:50,438
is not mainframe. I mean, the first one that comes to my mind

53
00:03:50,486 --> 00:03:54,318
right now is actionscript. It's something that Adobe

54
00:03:54,366 --> 00:03:58,030
basically said, we're not going to support this thing anymore, we're ripping it all out.

55
00:03:58,142 --> 00:04:01,470
But there are companies out there that still use actionscript and they

56
00:04:01,502 --> 00:04:05,742
are basically APM tool lists into that entire

57
00:04:05,798 --> 00:04:09,156
ecosystem. Then finally manual and

58
00:04:09,180 --> 00:04:12,636
human processes. You have everything from someone needing to accept or

59
00:04:12,660 --> 00:04:15,304
decline some type of system.

60
00:04:15,724 --> 00:04:19,884
I think personally a four eye system. So one

61
00:04:19,924 --> 00:04:22,836
person says, yeah, this is good. They need to then send it off to a

62
00:04:22,860 --> 00:04:26,828
manager, and they also need to accept and decline. How do you add that into

63
00:04:26,876 --> 00:04:30,068
your APM tooling? There are solutions out there,

64
00:04:30,156 --> 00:04:33,558
but what if we could use the open source ecosystem that

65
00:04:33,606 --> 00:04:37,190
has been built out? This led to the question that Justin

66
00:04:37,222 --> 00:04:41,326
and I thought of, how could we provide a simple to use system

67
00:04:41,470 --> 00:04:44,614
to develop traces for all of this data that's out

68
00:04:44,654 --> 00:04:48,674
there and all of the use cases or problems that we saw.

69
00:04:51,694 --> 00:04:55,278
So the big problem that we saw with trying to integrate all of these use

70
00:04:55,326 --> 00:04:59,066
cases was it's not very easy to ingest

71
00:04:59,130 --> 00:05:02,666
your data with these ingestion APIs in the absence of

72
00:05:02,730 --> 00:05:05,974
an instrumentation module that you can easily include in your codebase.

73
00:05:06,314 --> 00:05:10,122
The solution that we came up with was obfuscating that instrumentation

74
00:05:10,178 --> 00:05:14,018
behind an open interface that more processes can more readily

75
00:05:14,106 --> 00:05:17,494
interact with an API service or a module.

76
00:05:18,314 --> 00:05:22,194
This particular implementation solves two, three ish

77
00:05:22,274 --> 00:05:25,786
pretty large issues that come up with the attempt

78
00:05:25,850 --> 00:05:29,254
to ingest data through the ingestion API.

79
00:05:29,414 --> 00:05:33,206
First, the ingestion API calls for some pretty complicated

80
00:05:33,270 --> 00:05:36,830
request formatting that a lot of processes just might not even

81
00:05:36,862 --> 00:05:40,582
be able to format their request into to be

82
00:05:40,598 --> 00:05:44,422
able to send that request off. So protocol buffers and complicated

83
00:05:44,518 --> 00:05:47,766
API responses make interacting with the API difficult.

84
00:05:47,910 --> 00:05:51,598
This handles that by obfuscating that interaction. And finally,

85
00:05:51,646 --> 00:05:54,958
to be able to interact with that API, you also need to maintain an

86
00:05:55,006 --> 00:05:59,080
internal set of schemas that open telemetry has produced

87
00:05:59,182 --> 00:06:02,836
for everybody to use when they're interacting with an ingestion API.

88
00:06:02,980 --> 00:06:06,428
These get updated over time, and maintaining those updates within

89
00:06:06,476 --> 00:06:10,204
your own code base is with another level of maintenance activity

90
00:06:10,244 --> 00:06:13,972
that you have to do to be able to maintain the traces being pushed up

91
00:06:13,988 --> 00:06:17,068
to that ingestion API. By obfuscating this,

92
00:06:17,156 --> 00:06:20,668
you solve these issues before this obfuscation.

93
00:06:20,716 --> 00:06:24,364
What it looks like is you have your node JS application and in some cases

94
00:06:24,444 --> 00:06:27,610
you might have some instrumentation that you can easily pull in

95
00:06:27,732 --> 00:06:31,222
that predefines where your traces are coming from and what you're capturing.

96
00:06:31,318 --> 00:06:34,686
So if you want to have custom traces outside of the basic

97
00:06:34,750 --> 00:06:38,182
instrumentation, you have to do all of this instrumentation yourself to

98
00:06:38,198 --> 00:06:41,954
be able to get that to the backend. With this implementation,

99
00:06:42,454 --> 00:06:45,966
you now get the instrumentation and the connection to

100
00:06:45,990 --> 00:06:49,758
your observability backend broken off as its own single point

101
00:06:49,846 --> 00:06:53,126
of ingestion. Now you have a more

102
00:06:53,230 --> 00:06:56,994
simple interface that all of these other processes can interact with

103
00:06:57,034 --> 00:07:00,458
and push that data up in the form of traces and spans. So you

104
00:07:00,466 --> 00:07:03,794
can do node JS applications or whatever programming language you use

105
00:07:03,834 --> 00:07:07,122
that has the instrumentation or custom traces. You can

106
00:07:07,138 --> 00:07:10,642
do manual human processes or CI processes.

107
00:07:10,738 --> 00:07:13,978
Basically anything that can send out an HTTP request now

108
00:07:14,066 --> 00:07:17,298
is now able to send trace data to your observability

109
00:07:17,386 --> 00:07:21,486
back ends with

110
00:07:21,510 --> 00:07:25,342
that architecture in mind. This is introducing what we

111
00:07:25,478 --> 00:07:29,806
developed and what we're really here to showcase. And it's the Otel rest trace service.

112
00:07:29,990 --> 00:07:32,750
And I really want to really quick, before we move on,

113
00:07:32,862 --> 00:07:36,846
highlight some of the nomenclature

114
00:07:36,950 --> 00:07:40,262
Justin just spoke of, of this trace pusher.

115
00:07:40,398 --> 00:07:44,494
There is an excellent GitHub project out there that is literally called

116
00:07:44,534 --> 00:07:48,224
Trace Pusher. And I will say that was the kind of

117
00:07:48,414 --> 00:07:51,604
the start for us. We started off utilizing it.

118
00:07:51,644 --> 00:07:55,316
There were some things that we wanted to extend on

119
00:07:55,340 --> 00:07:59,028
it, but also for us to internally understand. And that's really

120
00:07:59,076 --> 00:08:02,756
what bred our rush trace service project. So thank you

121
00:08:02,780 --> 00:08:06,824
to the developer that wrote Trace Pusher and for those that also

122
00:08:08,324 --> 00:08:12,100
used it as their inspiration and their thought process

123
00:08:12,172 --> 00:08:13,704
in building their own tooling,

124
00:08:18,344 --> 00:08:21,124
we showcase this, we showcase the problems.

125
00:08:21,824 --> 00:08:25,724
We showed the architecture of what the restraint service would be

126
00:08:26,664 --> 00:08:30,096
really. Let's highlight those use cases. Again, I really want

127
00:08:30,120 --> 00:08:33,960
this to be a point that people think about, because it's something

128
00:08:34,032 --> 00:08:37,856
that we maybe don't think needs to

129
00:08:37,880 --> 00:08:40,524
be in our APM tooling, but it does.

130
00:08:40,944 --> 00:08:44,088
So the first really big use case is

131
00:08:44,136 --> 00:08:47,844
hooking into technology that just doesn't have an SDK built out for it.

132
00:08:48,184 --> 00:08:51,432
By utilizing simple rest calls, we're able to

133
00:08:51,448 --> 00:08:55,304
now to hook into potentially languages that don't utilize or

134
00:08:55,344 --> 00:08:58,232
don't have an SDK built out yet for it. Or number two,

135
00:08:58,288 --> 00:09:02,096
for very esoteric technologies that maybe no

136
00:09:02,120 --> 00:09:06,400
one really is using and was in house built at your tech

137
00:09:06,432 --> 00:09:09,882
firm. If you're able to make a simple rest call,

138
00:09:09,978 --> 00:09:13,330
you can use this. Number two, manual processes

139
00:09:13,362 --> 00:09:16,690
can now be tracked. I talked about that for I system, but delivery

140
00:09:16,722 --> 00:09:19,794
services, phone call for by support. All of these

141
00:09:19,834 --> 00:09:22,762
systems now could be loaded into your APM tooling.

142
00:09:22,858 --> 00:09:26,946
You now don't just have your DevOps loaded into APM,

143
00:09:27,010 --> 00:09:30,650
you also have bizops loaded in. Number three,

144
00:09:30,722 --> 00:09:33,994
no code solutions. So a lot of startups,

145
00:09:34,114 --> 00:09:38,048
even larger companies, they need to PoC something or create an MVP,

146
00:09:38,226 --> 00:09:42,380
they turn to a no code solution. Well, you lost

147
00:09:42,452 --> 00:09:46,588
some observability because you utilize that no code solution.

148
00:09:46,716 --> 00:09:50,092
Maybe your no code solution has an APM that's provided, but it's not the one

149
00:09:50,108 --> 00:09:53,532
you want to utilize. Well now with your no code solution you

150
00:09:53,548 --> 00:09:57,340
can make some rest calls. You now have your observability added into

151
00:09:57,372 --> 00:10:00,804
a no code. And finally, CI CD pipelines, you use

152
00:10:00,844 --> 00:10:03,944
Jenkins, you use GitLab, you use GitHub, Circleci,

153
00:10:04,084 --> 00:10:07,632
all of these tooling maybe? Yeah. Again, there's a

154
00:10:07,648 --> 00:10:11,600
proprietary way that they can ingest it in. Well now you can get it

155
00:10:11,712 --> 00:10:13,924
again through simple rest calls.

156
00:10:17,624 --> 00:10:20,832
So to demonstrate some of those use cases, we're going to go through a

157
00:10:20,848 --> 00:10:24,568
couple of code level demos that just go through very simple

158
00:10:24,656 --> 00:10:28,264
processes that help demonstrate how you can easily just

159
00:10:28,304 --> 00:10:32,200
inject a couple of lines of code to make those calls, to generate traces and

160
00:10:32,232 --> 00:10:36,064
spans and add as much information as you could possibly shove

161
00:10:36,104 --> 00:10:39,528
into the one trace as you can. First is going to be

162
00:10:39,536 --> 00:10:43,120
the node JS implementation. As you can see here, we're going to be working within

163
00:10:43,192 --> 00:10:46,944
an express implementation. There is open telemetry

164
00:10:47,024 --> 00:10:50,288
express implementation or instrumentation

165
00:10:50,376 --> 00:10:53,872
already available in the form of a package. But the idea

166
00:10:53,928 --> 00:10:58,616
here is to present that we can actually extend that instrumentation

167
00:10:58,720 --> 00:11:02,226
by placing trace creation

168
00:11:02,330 --> 00:11:06,050
or traces throughout our code strategically

169
00:11:06,202 --> 00:11:09,174
where it makes more sense for our processes.

170
00:11:09,474 --> 00:11:13,194
Within this we have a particular API that

171
00:11:13,234 --> 00:11:16,490
handles a particular business logic process,

172
00:11:16,602 --> 00:11:20,050
very generic, very complicated. I know in

173
00:11:20,082 --> 00:11:23,706
this we can create a trace that tracks that entire process

174
00:11:23,850 --> 00:11:27,188
and then has spans within each sub element of that process.

175
00:11:27,386 --> 00:11:29,684
Dive deeper into each of those pieces.

176
00:11:30,544 --> 00:11:34,248
When we enter in this API, we make our first call, which is to just

177
00:11:34,336 --> 00:11:38,000
start the trace. And when we make that call, note that we do

178
00:11:38,032 --> 00:11:41,904
pull out a trace id from that. That is very important because the

179
00:11:41,944 --> 00:11:45,656
main requirement of using this tool is just making sure that that trace id

180
00:11:45,720 --> 00:11:49,360
is available everywhere in your process. And beyond that it's just

181
00:11:49,392 --> 00:11:52,776
making those HTTP requests with that trace id in mute.

182
00:11:52,880 --> 00:11:56,430
So we start the trace and then we go into our first bit

183
00:11:56,462 --> 00:11:58,754
of logic, business logic a.

184
00:11:59,774 --> 00:12:03,062
But we make that function call. We pass in trace id as

185
00:12:03,118 --> 00:12:06,678
a parameter to that function to make sure that trace id is available to

186
00:12:06,726 --> 00:12:10,366
that new context that we're shifting to. And similarly,

187
00:12:10,470 --> 00:12:14,350
as we go into this sub process, we start a span with

188
00:12:14,382 --> 00:12:17,830
that span. The span id is the return call or return from that

189
00:12:17,862 --> 00:12:21,390
call. And the same logic applies where we got to make sure that that span

190
00:12:21,422 --> 00:12:24,798
is available within the entire context where we want to make the span.

191
00:12:24,966 --> 00:12:28,622
Luckily it's a lot simpler for spans because spans usually are contained in

192
00:12:28,638 --> 00:12:32,774
a single context. But that doesn't have to be the case. This is very flexible.

193
00:12:32,894 --> 00:12:36,006
As long as you can access that span id and make the request, you can

194
00:12:36,030 --> 00:12:39,494
make that as large or small as you want. So we start the span,

195
00:12:39,614 --> 00:12:42,742
we inject some information about the span that we're creating.

196
00:12:42,838 --> 00:12:46,622
So we have a name. We're adding a couple of properties which will manifest as

197
00:12:46,678 --> 00:12:50,542
attributes in the observability backend. And then we do our business

198
00:12:50,598 --> 00:12:54,286
process process part one, follow the steps, we log out

199
00:12:54,310 --> 00:12:57,710
the message, and then we close the span to signify that this

200
00:12:57,742 --> 00:13:01,474
particular sub process has been completed. And then we return our function.

201
00:13:02,014 --> 00:13:06,054
So we go back to that main operating context

202
00:13:06,174 --> 00:13:09,606
and we move into the next function. The next function is going

203
00:13:09,630 --> 00:13:13,462
to look eerily similar to business process part

204
00:13:13,518 --> 00:13:16,862
one, but it's part two. And we do the exact same things where we

205
00:13:16,878 --> 00:13:20,286
start up another span. To capture this second sub process,

206
00:13:20,470 --> 00:13:24,182
we close that span and then we return to the main function.

207
00:13:24,318 --> 00:13:27,494
Then in that main function, now that we have gone through our entire business

208
00:13:27,574 --> 00:13:31,006
logic, it is time to end that trace. When we make this final

209
00:13:31,070 --> 00:13:35,046
call to the trace or the rest trace service end

210
00:13:35,070 --> 00:13:38,598
the trace, it'll now package that all up and send it up to your observability

211
00:13:38,686 --> 00:13:42,446
backend. Then at this point, that information from

212
00:13:42,510 --> 00:13:45,926
the end to end trace and with all of its fans will now be

213
00:13:45,950 --> 00:13:49,224
viewable in whatever observability backend you're using.

214
00:13:49,644 --> 00:13:52,812
Dustin and I, we use dynatrace within our day to day.

215
00:13:52,868 --> 00:13:56,180
So what you're seeing is a dynatrace trace and the

216
00:13:56,212 --> 00:13:59,748
two spans. So at the top you can see the nice bundling of

217
00:13:59,796 --> 00:14:03,684
all of those spans. The timing, how long one or business process

218
00:14:03,764 --> 00:14:06,900
part one took, how long business process part two took.

219
00:14:07,012 --> 00:14:10,548
And then you can drill down into each of those fans to find those attributes

220
00:14:10,596 --> 00:14:14,212
that you specified within that call. So if there's any information

221
00:14:14,308 --> 00:14:17,932
that you want to make sure gets tracked within the observability

222
00:14:18,028 --> 00:14:22,076
backend. This is where you'll be able to view that. And most backends

223
00:14:22,100 --> 00:14:24,836
have ways that you can query on these attributes and you can do a lot

224
00:14:24,860 --> 00:14:28,304
of cool visualizations and monitoring and alerting off of them.

225
00:14:29,644 --> 00:14:33,980
So as Justin mentioned, there's more use cases than just APIs and services.

226
00:14:34,132 --> 00:14:38,124
You can actually interact with non standard trace services

227
00:14:38,244 --> 00:14:42,422
like your CI CD. So again we use GitLab CI. So the,

228
00:14:42,598 --> 00:14:45,942
so the context of this particular code level demo is going to be in that,

229
00:14:46,038 --> 00:14:49,414
but this would apply to any of the CI frameworks that Justin

230
00:14:49,454 --> 00:14:52,302
mentioned, as well as any like human processes.

231
00:14:52,358 --> 00:14:55,194
Again, as long as you can make that HTTP request.

232
00:14:55,894 --> 00:14:59,374
So I'm going to go through this one a little bit faster because the

233
00:14:59,414 --> 00:15:02,886
thought process is pretty much the same. But I essentially

234
00:15:02,950 --> 00:15:06,736
you start your trace in your initial free stage

235
00:15:06,800 --> 00:15:10,072
of your pipeline. You start that trace, you put the trace

236
00:15:10,128 --> 00:15:13,520
id into a file that gets passed between each of these jobs to

237
00:15:13,552 --> 00:15:16,924
make sure that you can access it and continue to update that trace.

238
00:15:17,504 --> 00:15:20,824
So you get into the first step of your pipeline, which is a build.

239
00:15:20,984 --> 00:15:24,440
You add that span to that trace, you do your build

240
00:15:24,512 --> 00:15:27,800
and then you close that span, and then you continue on to the next

241
00:15:27,832 --> 00:15:31,304
step of your pipeline, which is the test. Exact same

242
00:15:31,344 --> 00:15:34,730
thing as the build where you do your Spanish, execute your

243
00:15:34,762 --> 00:15:37,898
test, and then you create your afterscript that has all of the information about

244
00:15:37,946 --> 00:15:41,414
how your test panned out. One thing to note though,

245
00:15:41,714 --> 00:15:45,218
right in here it says that test is complete. Doesn't add any context

246
00:15:45,266 --> 00:15:49,010
about whether or not the test was successful or failed. But in this

247
00:15:49,122 --> 00:15:52,722
span closure, you could actually change the success

248
00:15:52,778 --> 00:15:56,674
or failure status of that span. You can inject a ton of information

249
00:15:56,834 --> 00:16:01,298
into this particular context is dependent on the previous execution,

250
00:16:01,346 --> 00:16:04,534
so there's a lot of flexibility in how you can use this tool.

251
00:16:04,714 --> 00:16:08,382
Then finally, as the final step of our pipeline, we close

252
00:16:08,438 --> 00:16:11,886
that trace and then the rest trace service will push that off to your

253
00:16:11,910 --> 00:16:15,446
observability backend where you can see the trace yet again.

254
00:16:15,510 --> 00:16:18,782
And this looks exactly the same as the other trace that

255
00:16:18,798 --> 00:16:22,174
we just looked at. And that's awesome, because with

256
00:16:22,214 --> 00:16:25,822
this then what you can start to do is you can link these traces together

257
00:16:25,918 --> 00:16:29,758
from all of these disparate contexts and have a full end to

258
00:16:29,806 --> 00:16:33,280
end picture of all of these processes working together,

259
00:16:33,472 --> 00:16:37,256
even if each of those processes live in very different contexts.

260
00:16:37,360 --> 00:16:40,936
That's fine. You can now visualize all of this by linking on this

261
00:16:40,960 --> 00:16:44,856
shared data across all of these traces. So we've

262
00:16:44,880 --> 00:16:48,248
looked at a couple of things that we can do with this tool, how flexible

263
00:16:48,296 --> 00:16:51,384
it is, but there's still a little bit more to do.

264
00:16:51,504 --> 00:16:55,096
Justin's going to talk about that. Yep. So what are the

265
00:16:55,120 --> 00:16:59,128
next steps for our tool? Well, we need to standardize

266
00:16:59,176 --> 00:17:03,240
around trace creation right now within our organization.

267
00:17:03,392 --> 00:17:07,160
Everyone's doing it their own way because we're still exploring it.

268
00:17:07,192 --> 00:17:10,904
Well, we need to start standardizing around what needs

269
00:17:10,944 --> 00:17:14,312
to be a trace, what doesn't need to be a trace, what goes into the

270
00:17:14,328 --> 00:17:18,256
APM tooling, what doesn't go into the APM tooling. Number two

271
00:17:18,280 --> 00:17:21,784
is ease of use. Right now, a lot of the properties

272
00:17:21,824 --> 00:17:25,582
that you send via the rest calls, they're one to one mappings to

273
00:17:25,598 --> 00:17:29,014
otelkeys. Some of these make sense, but some of them, we should

274
00:17:29,054 --> 00:17:32,582
probably change the language a little bit to help those that

275
00:17:32,598 --> 00:17:36,206
are not maybe familiar with the open telemetry tooling,

276
00:17:36,390 --> 00:17:40,094
and also to make sure that we're not all saying our own

277
00:17:40,134 --> 00:17:43,574
thing with it. We don't need to go into our APM and have a million

278
00:17:43,654 --> 00:17:47,262
different attributes because we didn't standardize on

279
00:17:47,358 --> 00:17:51,102
what we were going to do. Then finally, we're looking at

280
00:17:51,118 --> 00:17:55,358
open sourcing our tooling. We're going to be working with our

281
00:17:55,406 --> 00:17:58,692
organization and trying and hopefully bring this out to everyone so that

282
00:17:58,708 --> 00:18:02,824
way you can use it and hopefully you can help us out by

283
00:18:03,164 --> 00:18:04,784
adding on new use cases.

284
00:18:08,004 --> 00:18:11,700
And I like to say thank you. This was our talk, our pretty quick

285
00:18:11,732 --> 00:18:15,596
talk on the rest tooling, and kind of our start

286
00:18:15,660 --> 00:18:19,060
into this whole ecosystem. Any other final words,

287
00:18:19,092 --> 00:18:22,972
Justin? No. Just want to say that it was a lot of fun getting to

288
00:18:22,988 --> 00:18:26,004
this point. I'm really excited to see the future of this tool and the open

289
00:18:26,044 --> 00:18:28,894
telemetry project as a whole. Thanks.

290
00:18:29,834 --> 00:18:30,194
Thanks,

