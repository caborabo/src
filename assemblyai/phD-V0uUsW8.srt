1
00:00:27,240 --> 00:00:30,674
Today I want to discuss with you how to work with stateless

2
00:00:30,714 --> 00:00:34,042
microservices, how to scale them, and what to

3
00:00:34,058 --> 00:00:37,826
do if your microservices is not stateless. In modern technology

4
00:00:37,930 --> 00:00:41,178
companies, a huge number of requests are processed daily,

5
00:00:41,346 --> 00:00:44,810
making the optimization of system performance and reliability

6
00:00:44,922 --> 00:00:48,866
critically important. Microservice architecture has established itself

7
00:00:48,930 --> 00:00:52,890
as one of the most effective approaches to developing scalable

8
00:00:52,962 --> 00:00:56,310
and resilient systems. However, to achieve

9
00:00:56,342 --> 00:01:00,398
the best results, it is important to properly utilize and implement

10
00:01:00,486 --> 00:01:04,934
microservices. Today, we will explore what stateless microservices

11
00:01:05,054 --> 00:01:09,046
are and why they play a key role in handling requests in high load

12
00:01:09,110 --> 00:01:13,286
systems. We will discuss their advantages regarding scalability

13
00:01:13,390 --> 00:01:17,278
and reliability, Kdesign principles, and implementation

14
00:01:17,446 --> 00:01:21,702
strategies. I will also share practical advice and examples

15
00:01:21,758 --> 00:01:25,960
to help you optimize your systems performance and ensure their resilience

16
00:01:26,032 --> 00:01:29,464
to higher loads. Lets begin our exploration of this

17
00:01:29,504 --> 00:01:33,336
important aspect. In recent years, distributed systems

18
00:01:33,360 --> 00:01:36,928
and microservice architecture have become the standards for developing

19
00:01:36,976 --> 00:01:40,024
modern applications. These approaches enable companies

20
00:01:40,104 --> 00:01:43,928
to create flexible, scalable and reliable solutions

21
00:01:44,096 --> 00:01:47,504
capable of handling high loads and rapid changes in

22
00:01:47,544 --> 00:01:51,264
requirements. Containers such as docker and

23
00:01:51,304 --> 00:01:55,416
orchestration. Platforms like kubernetes have become integral

24
00:01:55,520 --> 00:01:59,234
to the development and deployment of microservices.

25
00:01:59,694 --> 00:02:03,126
They provide isolation and scalability and simplify

26
00:02:03,190 --> 00:02:05,714
the management of application lifecycles,

27
00:02:06,094 --> 00:02:10,174
DevOps and continuous integrations. Continuous deployment

28
00:02:10,294 --> 00:02:13,354
approaches facilitate the automation of development,

29
00:02:13,654 --> 00:02:17,238
testing and deployment processes. This enables

30
00:02:17,286 --> 00:02:20,862
faster delivery of new features that fixes enhancing overall

31
00:02:20,918 --> 00:02:25,294
development efficiencies. Cloud platforms such as Amazon

32
00:02:25,334 --> 00:02:29,510
Web Services, Google Cloud, and Microsoft Azure offer tools

33
00:02:29,542 --> 00:02:33,814
and services for developing, deploying and managing microservices.

34
00:02:33,974 --> 00:02:37,734
This allows companies to quickly scale resources according to

35
00:02:37,774 --> 00:02:41,310
current needs. Observability and monitoring

36
00:02:41,422 --> 00:02:44,950
a crucial element of managing distributed systems is ensuring

37
00:02:45,022 --> 00:02:49,234
observability and monitoring. Tools like promises and

38
00:02:49,314 --> 00:02:52,914
Grafana help track the system state and respond

39
00:02:52,954 --> 00:02:55,174
promptly to emerging issues.

40
00:02:55,914 --> 00:02:59,426
I will leave security topics outside of the scope of this

41
00:02:59,490 --> 00:03:02,498
presentation as they require separate coverage.

42
00:03:02,666 --> 00:03:06,074
Obvious stateless microservices do not store

43
00:03:06,114 --> 00:03:10,282
any state between requests. In the context of each request,

44
00:03:10,338 --> 00:03:13,474
all necessary information is transmitted and processed

45
00:03:13,514 --> 00:03:17,486
without retaining any data or state within the microservices

46
00:03:17,570 --> 00:03:21,582
itself. This means that each request is handled independently

47
00:03:21,678 --> 00:03:25,518
of previous requests. TL's microservices significantly

48
00:03:25,566 --> 00:03:29,254
simplify her horizontal scaling since no state

49
00:03:29,294 --> 00:03:33,102
is retained, microservices instances can be easily added

50
00:03:33,238 --> 00:03:36,794
or removed to handle increasing or decreasing loads.

51
00:03:37,094 --> 00:03:41,694
In the event of a failure of one instance of a microservice,

52
00:03:41,814 --> 00:03:45,054
its request can be redirected to other instances without

53
00:03:45,134 --> 00:03:47,424
any loss of data or state.

54
00:03:48,084 --> 00:03:51,944
This enhances the overall fault tolerance of the system.

55
00:03:52,284 --> 00:03:56,332
Stateless microservices are easy to deploy and manage because

56
00:03:56,388 --> 00:04:00,196
they do not depend on storage state. They reduce complicity

57
00:04:00,260 --> 00:04:04,264
and the number of years during the deployment and updating of services.

58
00:04:04,644 --> 00:04:08,332
Since each microservice instance can handle any request,

59
00:04:08,468 --> 00:04:12,412
load balancing systems can effectively distribute requests among

60
00:04:12,508 --> 00:04:15,994
all available instances, improving the

61
00:04:16,034 --> 00:04:20,466
systems overall performance and response speed. Stateless microservices

62
00:04:20,530 --> 00:04:26,306
simplifies the implementation of security measures such as authentication

63
00:04:26,450 --> 00:04:30,122
and authorization. Each request can be independently

64
00:04:30,178 --> 00:04:35,098
verified and process, reducing the risk of data breaches and unauthorized

65
00:04:35,266 --> 00:04:38,810
access due to their independence

66
00:04:38,882 --> 00:04:42,632
from the state status may serve simplified development and testing.

67
00:04:42,778 --> 00:04:46,404
The servo teams to develop, test, and deploy microservices

68
00:04:46,484 --> 00:04:49,892
more quickly and efficiently. I want to provide

69
00:04:49,948 --> 00:04:53,100
some examples of stateless microservices. First of all,

70
00:04:53,132 --> 00:04:56,676
API API gateways as a central

71
00:04:56,780 --> 00:05:00,932
entry point for all client requests and distribute them to the appropriate

72
00:05:00,988 --> 00:05:04,516
microservices. They do not retain state between requests,

73
00:05:04,540 --> 00:05:07,804
which allows them to be flexible and scalable. For example,

74
00:05:07,844 --> 00:05:11,656
when a user requests profile data, the API gateway

75
00:05:11,820 --> 00:05:15,856
direct the request to the corresponding microservice, which processes

76
00:05:15,880 --> 00:05:18,044
the request and returns the data.

77
00:05:19,264 --> 00:05:23,464
Authorization and all authentication servers the servers verify

78
00:05:23,504 --> 00:05:27,136
users credentials and create access tokens.

79
00:05:27,280 --> 00:05:31,256
They also do not store state between requests. Each authentication

80
00:05:31,320 --> 00:05:34,696
request is proceeded independently. For instance. For instance,

81
00:05:34,760 --> 00:05:38,408
all our servers generate access tokens based on credentials

82
00:05:38,456 --> 00:05:41,792
provided with each request and do not retain usual state

83
00:05:41,848 --> 00:05:46,010
between sessions. Load balancer distribute incoming

84
00:05:46,082 --> 00:05:49,386
requests among multiply instances of microservices.

85
00:05:49,570 --> 00:05:52,690
They download, store information about previous requests,

86
00:05:52,762 --> 00:05:56,594
but simply direct each new request to the list loaded

87
00:05:56,634 --> 00:06:00,594
or nearest server. This ensures even load distribution

88
00:06:00,674 --> 00:06:04,694
and prevents individual servers from becoming overloaded.

89
00:06:06,194 --> 00:06:09,746
Another example notification service says that sent alerts to users

90
00:06:09,770 --> 00:06:13,240
can be stateless. Each request to send a notification is

91
00:06:13,272 --> 00:06:16,464
processed independently. For example, a service might

92
00:06:16,504 --> 00:06:20,568
accept requests to send SMS or email notifications,

93
00:06:20,656 --> 00:06:24,696
process them, and send the appropriate message without needing to

94
00:06:24,720 --> 00:06:27,324
store information about previous notifications.

95
00:06:28,984 --> 00:06:32,024
Another good example, per trained model services,

96
00:06:32,144 --> 00:06:35,960
services that host pretrained machine learning models process

97
00:06:36,032 --> 00:06:39,600
requests to make prediction or classification without retaining state between

98
00:06:39,672 --> 00:06:43,150
requests. For example, a service using a pre trained model for

99
00:06:43,182 --> 00:06:46,174
image recognition accepts an image input,

100
00:06:46,294 --> 00:06:50,046
processes this, and returns a specification result. Each MS is

101
00:06:50,070 --> 00:06:53,630
processed independently, allowing the

102
00:06:53,662 --> 00:06:57,674
service to easily scale as a number of request increases.

103
00:06:58,854 --> 00:07:01,234
But what to do with stateful services?

104
00:07:01,894 --> 00:07:06,214
One of the possible decisions is hybrid services. Hybrid microservices

105
00:07:06,294 --> 00:07:10,070
represent an approach where the functionality of a service is divided

106
00:07:10,142 --> 00:07:12,944
into stateful and stateless components.

107
00:07:13,104 --> 00:07:16,816
This approach allows for efficient management of the state and

108
00:07:16,840 --> 00:07:20,840
scaling of services. Lets explore how this works.

109
00:07:20,992 --> 00:07:24,712
Stateless companions handle incoming requests. They perform

110
00:07:24,808 --> 00:07:28,400
computations, data processing, validation, and other

111
00:07:28,432 --> 00:07:32,184
operations that do not require state retention between requests.

112
00:07:32,304 --> 00:07:35,848
These components are easily scalable because they do not depend on

113
00:07:35,896 --> 00:07:39,770
state. They can be deployed in large numbers, allowing them to

114
00:07:39,802 --> 00:07:43,354
handle a high volume of requests in parallel and evenly

115
00:07:43,394 --> 00:07:47,250
distribute the load. Stateful companions are responsible for

116
00:07:47,282 --> 00:07:50,626
storing and managing state. They handle operations

117
00:07:50,730 --> 00:07:54,562
related to state changes and ensure long term data storage.

118
00:07:54,738 --> 00:07:58,498
These companions can use specialized data storage systems and

119
00:07:58,546 --> 00:08:01,334
ensure data consistently and integrity.

120
00:08:01,794 --> 00:08:05,570
You can hold all your microservice code bytes inside one repository and

121
00:08:05,602 --> 00:08:09,502
create different prompts or files to start stateless or stateful

122
00:08:09,558 --> 00:08:12,990
components. Moreover, you can have more than one unique

123
00:08:13,062 --> 00:08:16,710
instance of the stateful or stateless components depending on your

124
00:08:16,742 --> 00:08:20,294
needs. Again, the key trait of the stateless

125
00:08:20,334 --> 00:08:23,966
component is scalability. It should have an opportunity

126
00:08:24,030 --> 00:08:28,142
to be run in any number of instances without losing functionality

127
00:08:28,278 --> 00:08:32,158
and without possible race conditions. I will discuss race conditions

128
00:08:32,246 --> 00:08:35,994
later. Common query responsible segregation

129
00:08:36,114 --> 00:08:39,506
or securities is a pattern that separates

130
00:08:39,570 --> 00:08:43,650
read and write operations, allowing for more efficient state management

131
00:08:43,842 --> 00:08:47,066
in the context of microservice architecture. This pattern can be

132
00:08:47,090 --> 00:08:50,826
implemented as you need to separate all requests

133
00:08:50,850 --> 00:08:55,330
to your microservices in two types. First is commands

134
00:08:55,442 --> 00:08:58,914
write operations that modifies the system state or data.

135
00:08:59,074 --> 00:09:02,770
The separation are handled by stateful components and

136
00:09:02,802 --> 00:09:06,210
queries read operations that retrieves data from the system.

137
00:09:06,322 --> 00:09:09,298
These operations are handled by stateless components.

138
00:09:09,426 --> 00:09:13,202
The CQRS pattern allows read and write

139
00:09:13,378 --> 00:09:16,866
operations to be scaled independently. This is especially

140
00:09:16,970 --> 00:09:20,802
useful in systems with high read or write

141
00:09:20,858 --> 00:09:24,194
loads. Data reads can be optimized for quick access

142
00:09:24,274 --> 00:09:27,570
and scaling, while write operations can focus on

143
00:09:27,642 --> 00:09:31,388
ensuring data integrity and consistency. The separation

144
00:09:31,436 --> 00:09:35,220
of operations allows for the use of different data models for

145
00:09:35,252 --> 00:09:39,100
reading and writing, which can simplify development and improve

146
00:09:39,172 --> 00:09:42,924
performance. Running a large number of stateless components

147
00:09:43,004 --> 00:09:46,780
compared to stateful components is a key strategy for

148
00:09:46,812 --> 00:09:49,664
ensuring high system scalability and performance.

149
00:09:50,084 --> 00:09:53,132
Stateless components, which do not retain state

150
00:09:53,188 --> 00:09:56,172
between requests, are easily horizontally scalable,

151
00:09:56,348 --> 00:10:00,386
allowing for the handling of a large volume of incoming requests in

152
00:10:00,410 --> 00:10:04,170
parallel and distributing the load evenly.

153
00:10:04,322 --> 00:10:08,218
Meanwhile, stateful components which manage states and data

154
00:10:08,346 --> 00:10:12,026
usually require more complex management and synchronization,

155
00:10:12,130 --> 00:10:14,414
limiting the horizontal scalability.

156
00:10:15,594 --> 00:10:19,010
Let's talk about the interaction between stateless and

157
00:10:19,042 --> 00:10:22,538
stateful components. Synchronous interaction

158
00:10:22,626 --> 00:10:25,726
I will call it sync interactions instead.

159
00:10:25,850 --> 00:10:28,634
It would be much easier for me to handle this world.

160
00:10:29,054 --> 00:10:32,630
How it works the stateless component initiates

161
00:10:32,662 --> 00:10:36,342
a request. The stateful component processes the request and returns the

162
00:10:36,358 --> 00:10:39,662
result. The stateless component receives a

163
00:10:39,678 --> 00:10:43,154
response and completes the request. Processing simple

164
00:10:43,454 --> 00:10:47,394
this type of interaction gives us several advantages

165
00:10:47,854 --> 00:10:51,590
sync interaction via HTTP or RPC is

166
00:10:51,622 --> 00:10:55,242
easy to implement. Integral integrate into existing

167
00:10:55,298 --> 00:10:58,482
infrastructure. Clients receive an immediate

168
00:10:58,578 --> 00:11:02,130
response useful for operations requiring real time

169
00:11:02,162 --> 00:11:06,370
confirmations. It is easy to track data flow and interaction between

170
00:11:06,482 --> 00:11:09,842
components, but everything has a price.

171
00:11:10,018 --> 00:11:13,626
If the stateful component is unavailable, a request from

172
00:11:13,650 --> 00:11:18,214
the stateless component cannot be proceed, leading to delays and failures.

173
00:11:19,614 --> 00:11:22,830
500 crawls can

174
00:11:22,862 --> 00:11:26,870
become a bottleneck under high loads as each request requires

175
00:11:26,982 --> 00:11:30,918
immediate processing. SIM calls can increase latency,

176
00:11:31,006 --> 00:11:34,214
especially if their stateful component processes

177
00:11:34,254 --> 00:11:38,694
complex operations. Some practical recommendations

178
00:11:38,814 --> 00:11:43,806
use load balancers to distribute requests among multiple instances

179
00:11:43,870 --> 00:11:47,294
of stateful components. You can use remote procedure calls

180
00:11:47,334 --> 00:11:50,940
using a message broker like RabbitMQ. Unfortunately,

181
00:11:51,012 --> 00:11:54,412
it is not always possible to run multiplier instances of stateful

182
00:11:54,468 --> 00:11:58,004
components, and it would limit your ability to scale your

183
00:11:58,044 --> 00:12:01,508
application. It would be useful to

184
00:12:01,556 --> 00:12:04,628
configure the mouse and retry mechanism

185
00:12:04,676 --> 00:12:08,452
to handle errors and temporary failures. Not every

186
00:12:08,508 --> 00:12:11,996
request can be retrieved in case of retry. We do not

187
00:12:12,060 --> 00:12:15,620
know the status of the previous attempts processing. In such

188
00:12:15,652 --> 00:12:19,672
cases, it is necessary. It is easy to organize an independent

189
00:12:19,728 --> 00:12:23,200
request system where a repeated request will not change the

190
00:12:23,232 --> 00:12:26,400
state of the state.

191
00:12:26,592 --> 00:12:30,648
Auto abandon the idea of enterprise

192
00:12:30,696 --> 00:12:35,536
rate condition it's my favorite part source of my daily headache.

193
00:12:35,720 --> 00:12:39,888
Rate condition occurs when two or more components or processes

194
00:12:40,016 --> 00:12:44,080
compete foxes to a shared resource, such as data or state

195
00:12:44,152 --> 00:12:48,204
at the same time, leading to unpredictable or incorrect results.

196
00:12:48,614 --> 00:12:52,510
In other words, when multiplying stateless components at the same time send

197
00:12:52,542 --> 00:12:56,062
requests to a single multiply stateful component, a situation

198
00:12:56,158 --> 00:13:00,074
can arise where they try to update the same state or data.

199
00:13:00,534 --> 00:13:04,198
If the stateful component does not properly manage access to the data,

200
00:13:04,286 --> 00:13:08,394
it can lead to incorrect updates and an inconsistent state.

201
00:13:09,054 --> 00:13:12,374
Several solutions to prevent race conditions first of all,

202
00:13:12,414 --> 00:13:16,358
locks implement locking mechanism in stateful components

203
00:13:16,406 --> 00:13:19,782
to control access to charge resources. For example, a use

204
00:13:19,838 --> 00:13:23,294
database that supports transactions to ensure data

205
00:13:23,374 --> 00:13:26,718
integrity. Most SQL databases do it.

206
00:13:26,846 --> 00:13:31,270
Combine operations into transactions to ensure ultimate execution

207
00:13:31,382 --> 00:13:35,022
are all or nothing. You can try to achieve

208
00:13:35,158 --> 00:13:38,502
depotency. Ensure that all operations can be

209
00:13:38,518 --> 00:13:41,806
safely repeated without altering the result.

210
00:13:41,990 --> 00:13:45,508
Strategies include using unique identifiers,

211
00:13:45,596 --> 00:13:49,276
design inherently independent operations,

212
00:13:49,420 --> 00:13:53,164
employing transactional cementing, utilizing conditional

213
00:13:53,204 --> 00:13:56,460
requests, communication with appropriate response coders

214
00:13:56,492 --> 00:13:59,716
and others and others. The potency is

215
00:13:59,740 --> 00:14:03,772
a big deal to vintage companies. They really like it because

216
00:14:03,828 --> 00:14:07,556
it helps them avoid spending money twice. You can also

217
00:14:07,620 --> 00:14:11,246
try data versioning. Users record version

218
00:14:11,310 --> 00:14:14,790
eg version fields to check the currency of data before

219
00:14:14,862 --> 00:14:18,518
performing updates. Version checks before

220
00:14:18,566 --> 00:14:21,966
attempting an update. Each request verifies the data

221
00:14:22,070 --> 00:14:25,526
version has not changed since it was read.

222
00:14:25,710 --> 00:14:29,550
If the version has changed, the request is registered and can be

223
00:14:29,582 --> 00:14:33,438
retrieved. Another effective solution

224
00:14:33,526 --> 00:14:38,036
is to move from a sync interaction to async interruption.

225
00:14:38,180 --> 00:14:41,268
You don't need to waste stateful component fire

226
00:14:41,316 --> 00:14:44,544
and forget. Some advice is how to implement it.

227
00:14:45,804 --> 00:14:50,064
You can use message queues. Our goal is to ensure

228
00:14:50,644 --> 00:14:54,948
reliable message delivery between stateless and stateful components

229
00:14:55,076 --> 00:14:57,664
and increase system resilience to failures.

230
00:14:58,124 --> 00:15:01,852
Queues like RabbitMQ or Kafka can be used to transmit

231
00:15:01,908 --> 00:15:05,594
commands. There is an old joke that no

232
00:15:05,634 --> 00:15:08,786
one has ever been fired for choosing Revitmq as

233
00:15:08,810 --> 00:15:11,814
a message broker. Ok, return to process.

234
00:15:12,114 --> 00:15:15,138
Messages placed in the queue are guaranteed to be

235
00:15:15,186 --> 00:15:19,074
delivered and processed by stateful components and if

236
00:15:19,114 --> 00:15:22,954
temporary, failure occur, how it works an example of some

237
00:15:22,994 --> 00:15:27,018
online shop stateless component receives a request to create

238
00:15:27,066 --> 00:15:29,854
a new order and performs necessary checks.

239
00:15:31,174 --> 00:15:34,446
It forms a command to create the order and place it in the

240
00:15:34,470 --> 00:15:38,494
message queue. The message is stored in the queue and awaits processing

241
00:15:38,534 --> 00:15:41,998
by the stateful component. Stateful component retrieves

242
00:15:42,046 --> 00:15:45,782
the message from the queue, processing it, and sends a new order data in

243
00:15:45,798 --> 00:15:49,366
the database. If necessary, the stateful component can send

244
00:15:49,390 --> 00:15:53,158
a confirmation back to the queue for subsequent processing,

245
00:15:53,246 --> 00:15:57,304
but better to avoid it. A huge percentage percentage of

246
00:15:57,344 --> 00:16:00,712
our request successfully proceed, so if

247
00:16:00,728 --> 00:16:04,512
the situation allows, our stateless component

248
00:16:04,648 --> 00:16:08,680
can respond with a positive answer without awaiting the stateful

249
00:16:08,752 --> 00:16:12,484
component. It names an optimistic response.

250
00:16:13,064 --> 00:16:16,400
Another step is event driven architecture.

251
00:16:16,552 --> 00:16:20,488
Separate operations enhance system flexibility by allowing

252
00:16:20,536 --> 00:16:24,036
stateful components response to events

253
00:16:24,140 --> 00:16:28,356
generated by stateless components. How it works stateless

254
00:16:28,420 --> 00:16:32,036
components generate events in a response to specific actions

255
00:16:32,060 --> 00:16:35,756
or requests. Stateful components subscribe to events and process

256
00:16:35,860 --> 00:16:39,652
them, updating their state accordingly. It will work similar

257
00:16:39,748 --> 00:16:43,508
to the previous example with the added benefit

258
00:16:43,556 --> 00:16:46,956
of additional handlers. Other components or

259
00:16:46,980 --> 00:16:51,026
even microservices such as notification systems or analytics

260
00:16:51,100 --> 00:16:54,782
can also subscribe to this event and perform

261
00:16:54,878 --> 00:16:58,710
their actions, for example, sending an order confirmation

262
00:16:58,782 --> 00:17:02,222
to the client or updating seller statistic.

263
00:17:02,358 --> 00:17:05,742
It allows us to use optimistic responses by design,

264
00:17:05,878 --> 00:17:09,078
with async interactions, a stateless component

265
00:17:09,126 --> 00:17:13,078
may not wait for immediate response from a stateful component,

266
00:17:13,206 --> 00:17:16,730
but can probably notify the client that they request

267
00:17:16,862 --> 00:17:20,890
has been accepted. The notification can include preliminary

268
00:17:20,962 --> 00:17:24,970
default data or simply a message confirming the requests.

269
00:17:25,002 --> 00:17:28,426
Successful processing this approach ensures faster system

270
00:17:28,490 --> 00:17:32,634
response to requests, improves user experience and more efficiency,

271
00:17:32,674 --> 00:17:34,774
distributes the service load.

272
00:17:35,514 --> 00:17:39,650
Advantages of async interaction message queues

273
00:17:39,802 --> 00:17:43,754
ensure a reliable delivery and processing of commands.

274
00:17:43,874 --> 00:17:47,614
Enhancing system resilience a sync interaction facilitates

275
00:17:48,114 --> 00:17:51,954
easy scaling of individual components without the

276
00:17:52,034 --> 00:17:56,058
blockages and delays associated with sync calls.

277
00:17:56,186 --> 00:17:59,930
Ever driven architecture simplifies, adding new functionalities

278
00:18:00,002 --> 00:18:03,386
and components as new subscribers can be added without

279
00:18:03,450 --> 00:18:07,154
altering existing producing components. Some practical

280
00:18:07,234 --> 00:18:11,470
recommendations it would be nice to implement monitoring alert

281
00:18:11,542 --> 00:18:14,902
systems to track the status of queues and event processing,

282
00:18:15,038 --> 00:18:18,582
ensuring timely identification and resolution of the

283
00:18:18,598 --> 00:18:22,374
use. Pay particular attention to the number of unprocessed

284
00:18:22,414 --> 00:18:26,094
messages in the queue. If this number grows, something may be

285
00:18:26,134 --> 00:18:29,758
wrong. Also, it is important to establish clear contrast

286
00:18:29,806 --> 00:18:33,310
between components and document events and commands to

287
00:18:33,342 --> 00:18:37,622
ensure consistency and simplify the integration

288
00:18:37,678 --> 00:18:41,712
of new components. Okay, let's finalize

289
00:18:41,848 --> 00:18:45,592
the discussed aspects demonstrate the importance of

290
00:18:45,648 --> 00:18:49,456
using stateless microservices and hybrid strategies

291
00:18:49,520 --> 00:18:53,056
to create scalable and reliable distributed systems.

292
00:18:53,120 --> 00:18:56,304
Stateless microservices significantly simplify with tau

293
00:18:56,344 --> 00:19:00,088
scaling as it does not retain the state between requests.

294
00:19:00,216 --> 00:19:04,320
This means that instance of microservices can be easily added or

295
00:19:04,352 --> 00:19:08,306
removed depending of the current load, ensuring high performance

296
00:19:08,410 --> 00:19:12,538
and fault tolerance of the system, especially with orchestration

297
00:19:12,626 --> 00:19:16,378
like kubernetes. Consequently, load balancing

298
00:19:16,426 --> 00:19:20,722
systems can effectively

299
00:19:20,818 --> 00:19:24,362
distribute requests among all available instances,

300
00:19:24,498 --> 00:19:27,814
improving overall performance and response speed.

301
00:19:29,154 --> 00:19:33,388
Hybrid microservices in turn enable efficient state

302
00:19:33,476 --> 00:19:37,500
management and scaling by dividing the services functionality

303
00:19:37,572 --> 00:19:42,036
into stateful and stateless components. Stateless components

304
00:19:42,100 --> 00:19:45,572
handle requirements, perform computations, validate data,

305
00:19:45,708 --> 00:19:49,476
and carry out other operations that do not require

306
00:19:49,540 --> 00:19:52,820
state retention, making them easy to scale.

307
00:19:53,012 --> 00:19:56,340
Stateful components, on the other hand, manage data

308
00:19:56,452 --> 00:20:00,342
persistence and long term state storage, which requires

309
00:20:00,398 --> 00:20:04,494
more complex management and synchronization, but ensures

310
00:20:04,534 --> 00:20:08,314
data integrity and consistent consistency.

311
00:20:08,894 --> 00:20:12,406
Applying the CQRS pattern allows for

312
00:20:12,430 --> 00:20:16,286
the separation of printed write operations, enhancing the efficiency

313
00:20:16,310 --> 00:20:19,470
of state management. Data reads are performed by

314
00:20:19,502 --> 00:20:23,582
stateless components while writes and handlers by stateful

315
00:20:23,638 --> 00:20:27,770
components, allowing this operation to be scaled independently and

316
00:20:27,802 --> 00:20:32,106
optimizing system performance. I sync interactions through message

317
00:20:32,170 --> 00:20:36,426
queues and venn driving architecture ensures reliable,

318
00:20:36,490 --> 00:20:39,874
common delivery and enhanced system resilience to

319
00:20:39,914 --> 00:20:42,906
failures. Message queues such as Raybeat,

320
00:20:42,930 --> 00:20:46,690
MQ or Kafka guarantee that commands are delivered

321
00:20:46,722 --> 00:20:49,730
and proceed by stateful components even

322
00:20:49,802 --> 00:20:53,338
if temporary failure. Secure, event driven architecture

323
00:20:53,386 --> 00:20:56,828
allows stateful components to react to events generated

324
00:20:56,876 --> 00:21:00,116
by stateless components, simplifying the additions

325
00:21:00,140 --> 00:21:03,340
of new functionality and components

326
00:21:03,412 --> 00:21:06,860
to the system. I greatly appreciate

327
00:21:06,932 --> 00:21:10,620
your attention and the time you taken to engage with me.

328
00:21:10,772 --> 00:21:12,364
Thankful your consideration.

