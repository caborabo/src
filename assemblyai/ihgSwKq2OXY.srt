1
00:00:24,570 --> 00:00:27,686
Hi everyone. One thank you for coming to my presentation. Today we'll be

2
00:00:27,708 --> 00:00:30,738
talking about Hono, a multi runtime web framework for the edges.

3
00:00:30,834 --> 00:00:33,926
But first let me take a moment to introduce myself. My name

4
00:00:33,948 --> 00:00:37,426
is Nikolay Pryanishnikov. I'm a full stack engineer at Station Labs.

5
00:00:37,458 --> 00:00:41,186
We develop some cool stuff on the blockchain with NFTs and regular

6
00:00:41,218 --> 00:00:45,122
tokens. In my free time I like to contribute to open source projects

7
00:00:45,186 --> 00:00:48,406
and develop my own. I also do security

8
00:00:48,508 --> 00:00:52,110
research, some bugbal, TCTF and things like that.

9
00:00:52,180 --> 00:00:56,154
Previously I was an original full stack contributor at Lido Finance,

10
00:00:56,282 --> 00:00:59,914
one of the largest blockchain projects by TVL.

11
00:01:00,042 --> 00:01:03,614
Before that I was a startup founder and the founder of a small web

12
00:01:03,652 --> 00:01:07,810
development studio. What's common between all of my developer experience

13
00:01:07,960 --> 00:01:11,918
is that I've been building a lot of APIs. Recently I stumbled upon

14
00:01:12,014 --> 00:01:15,666
a really cool new web framework called Hono. Today we'll be taking a look

15
00:01:15,688 --> 00:01:19,746
at it, and I'll explain to you how it's able to run on different runtimes

16
00:01:19,778 --> 00:01:22,966
and different cloud services. So the plan for today will

17
00:01:22,988 --> 00:01:26,482
be in two parts. First, we are going to be discussing JS

18
00:01:26,546 --> 00:01:30,362
runtimes. We'll understand the differences between a JS engine and

19
00:01:30,416 --> 00:01:34,086
runtimes. We'll have some examples of standalone

20
00:01:34,118 --> 00:01:37,782
and cloud runtimes, and we'll be discussing API interpretation

21
00:01:37,846 --> 00:01:41,430
of runtimes in general. Then we'll be switching to hono.

22
00:01:41,510 --> 00:01:45,006
I'll explain to you what Hono is, why it's awesome, and why

23
00:01:45,028 --> 00:01:48,654
you should consider building your next project with Hono. So let's begin

24
00:01:48,692 --> 00:01:53,086
with JS runtimes. First we need to understand what

25
00:01:53,108 --> 00:01:56,370
a JS engine is, and this is quite simple.

26
00:01:56,520 --> 00:01:59,442
An engine is a software that executes your code.

27
00:01:59,576 --> 00:02:02,740
However, it's not enough for a good developer experience,

28
00:02:03,350 --> 00:02:06,662
and a runtime is the environment in which code

29
00:02:06,716 --> 00:02:10,230
is being executed. It provides some nice features for us, like the event

30
00:02:10,300 --> 00:02:14,646
loop, so we don't have to manually schedule when

31
00:02:14,668 --> 00:02:18,054
a code is being executed. Then it

32
00:02:18,092 --> 00:02:21,386
provides some runtimes libraries for us and APIs. So for

33
00:02:21,408 --> 00:02:25,286
example, we don't have to write low level code to access the file

34
00:02:25,318 --> 00:02:28,554
system. The most popular engine is V eight,

35
00:02:28,592 --> 00:02:32,526
pictured here. On the left it powers Chrome. On the

36
00:02:32,548 --> 00:02:36,314
right we have at the top JavaScript core, which powers

37
00:02:36,442 --> 00:02:39,726
Safari on iOS and macOS for example. And then

38
00:02:39,748 --> 00:02:43,746
we have Spidermonkey, which powers Firefox for

39
00:02:43,768 --> 00:02:47,842
runtimes, in this case the standalone runtimes you probably heard

40
00:02:47,896 --> 00:02:51,314
about node Js. It's the most popular and the

41
00:02:51,352 --> 00:02:54,542
oldest runtimes. But we also have newer,

42
00:02:54,606 --> 00:02:57,894
more modern runtimes. On the right here at the top we have

43
00:02:57,932 --> 00:03:01,174
Dino and the newest one at the bottom,

44
00:03:01,372 --> 00:03:03,880
bun node Js runs V eight,

45
00:03:04,570 --> 00:03:08,650
Dino runs V eight as well, and bun runs JavaScript core.

46
00:03:09,070 --> 00:03:12,182
Then we have a lot of service runtimes,

47
00:03:12,326 --> 00:03:15,718
and your service needs at least one runtimes

48
00:03:15,814 --> 00:03:19,594
to execute your code. AWS actually has two

49
00:03:19,792 --> 00:03:23,686
lambdas and lambdas at the edge, Cloudflare has their worker

50
00:03:23,718 --> 00:03:26,694
D runtime for their workers offering,

51
00:03:26,742 --> 00:03:30,474
and Purcell also has two runtimes, the code

52
00:03:30,522 --> 00:03:34,942
Js runtimes and the edges runtime runtimes

53
00:03:35,006 --> 00:03:38,014
will have different APIs, and it's clearly visible

54
00:03:38,142 --> 00:03:40,980
for standalone runtimes. In this example,

55
00:03:41,510 --> 00:03:45,086
we are trying to open a file for node

56
00:03:45,118 --> 00:03:48,646
Js. You will have to import a module called read file. You will

57
00:03:48,668 --> 00:03:52,630
have to specify the file and the encoding for Dino situation

58
00:03:52,700 --> 00:03:55,560
is different. Dino is globally available,

59
00:03:56,010 --> 00:03:59,382
and you also have some nice helpers. So for example,

60
00:03:59,436 --> 00:04:03,290
you have a read text file helper, so you don't have to specify encoding.

61
00:04:03,870 --> 00:04:08,042
In our case, service runtime APIs are

62
00:04:08,096 --> 00:04:11,950
also different. So for AWS Lambda

63
00:04:12,290 --> 00:04:16,222
for the handler you will have an event object and a context object,

64
00:04:16,356 --> 00:04:20,206
and in order to return some data to the

65
00:04:20,228 --> 00:04:23,706
user, you need to use a return. For Versailles Node

66
00:04:23,738 --> 00:04:27,554
JS runtimes, you have a request and response object. To return some

67
00:04:27,592 --> 00:04:32,100
data, you need to call send on the response object.

68
00:04:32,630 --> 00:04:35,870
Ideally you would want to return here as well, but it's not necessary.

69
00:04:35,950 --> 00:04:39,414
It's going to be working either way. Next, we are

70
00:04:39,452 --> 00:04:42,742
getting a problem that one service does not actually equal one

71
00:04:42,796 --> 00:04:46,418
runtime. So Versaille, for example, has two runtimes,

72
00:04:46,514 --> 00:04:49,862
and you can't migrate from one to the other without code

73
00:04:49,916 --> 00:04:53,282
changes. Node JS is an

74
00:04:53,356 --> 00:04:57,146
older runtime. Edges is a newer runtime built on

75
00:04:57,168 --> 00:05:00,314
modern web technologies, but it's also more limited.

76
00:05:00,362 --> 00:05:04,510
And speaking about limitations, one of the service

77
00:05:04,580 --> 00:05:07,870
runtimes limitations is limited NPM package access.

78
00:05:08,020 --> 00:05:11,742
Back in the day there were runtimes when you couldn't even

79
00:05:11,796 --> 00:05:15,540
import NPM packages at all. Today's situation is much different.

80
00:05:16,470 --> 00:05:19,794
NPM package access can still be a problem. For example,

81
00:05:19,832 --> 00:05:24,082
you could be importing an NPM package which tries to access some

82
00:05:24,136 --> 00:05:27,366
API which is not available at the runtime. Which brings us

83
00:05:27,388 --> 00:05:31,778
to the second point, limited API set. Modern runtimes

84
00:05:31,874 --> 00:05:34,680
potentially can have web standard APIs only,

85
00:05:35,610 --> 00:05:38,620
which we'll be talking more about in a moment.

86
00:05:39,550 --> 00:05:43,606
Also, for service runtimes,

87
00:05:43,798 --> 00:05:46,890
direct database access might not be possible

88
00:05:46,960 --> 00:05:50,566
at all. So if you wanted to directly

89
00:05:50,598 --> 00:05:54,206
connect to your database and get some data from it

90
00:05:54,228 --> 00:05:57,678
or insert some new data, it might not be possible. You would need a

91
00:05:57,684 --> 00:06:01,706
proxy, or you can migrate to different runtimes.

92
00:06:01,898 --> 00:06:04,500
For Versailles edges as an example,

93
00:06:05,110 --> 00:06:09,250
we clearly see that although you can import NPM packages,

94
00:06:09,750 --> 00:06:12,830
you can only import ESM packages,

95
00:06:12,990 --> 00:06:17,270
not CGS. So if you're relying on CGS

96
00:06:17,690 --> 00:06:23,974
dependencies, then you are out of luck. You will have to change

97
00:06:24,012 --> 00:06:27,646
your runtimes from Versaille Edge to Versaille Node JS runtime,

98
00:06:27,778 --> 00:06:31,242
and then it wouldn't be using the latest web technologies and

99
00:06:31,296 --> 00:06:34,874
it's a separate problem. So Windows G came

100
00:06:34,912 --> 00:06:38,534
along. It's a community group created

101
00:06:38,582 --> 00:06:42,074
with all the industry leaders

102
00:06:42,202 --> 00:06:45,930
in the space from Cloudflare to Vercell.

103
00:06:46,090 --> 00:06:49,818
From standalone runtimes we have Dino, we have Node JS,

104
00:06:49,994 --> 00:06:53,426
and they have their mission as

105
00:06:53,528 --> 00:06:57,074
increasing the interoperability of runtimes. And for the

106
00:06:57,112 --> 00:07:01,042
end user, it means that ideally you would have the same

107
00:07:01,096 --> 00:07:04,910
code being able to run on different

108
00:07:05,000 --> 00:07:08,566
runtimes, different cloud services. If you

109
00:07:08,588 --> 00:07:12,146
don't like one service, you could easily

110
00:07:12,178 --> 00:07:16,246
migrate from one to the other, and so on and so forth. But how

111
00:07:16,268 --> 00:07:20,374
is it possible? And it's possible using the web standard APIs,

112
00:07:20,502 --> 00:07:24,154
and those are these standard APIs which will be

113
00:07:24,192 --> 00:07:27,274
available across runtimes. So you can

114
00:07:27,312 --> 00:07:31,054
have the same code running everywhere. And examples of such

115
00:07:31,092 --> 00:07:33,710
APIs is fetch.

116
00:07:34,370 --> 00:07:37,754
You can bun fetch not only on the standalone

117
00:07:37,802 --> 00:07:41,738
runtimes, not only on services, but also in the browser.

118
00:07:41,914 --> 00:07:45,170
You can write your code once and run it everywhere.

119
00:07:45,670 --> 00:07:49,554
We're talking about fetch specifically because it has the request and

120
00:07:49,592 --> 00:07:53,374
response object which you can now reuse in modern

121
00:07:53,422 --> 00:07:58,178
runtimes. So for

122
00:07:58,264 --> 00:08:01,986
Versailles, in this case, for the code JS

123
00:08:02,098 --> 00:08:05,666
runtime, you would get the API with a request and a response

124
00:08:05,698 --> 00:08:09,514
object. You would be setting up a status code for

125
00:08:09,552 --> 00:08:12,614
the response. You would sending some data and returning

126
00:08:12,742 --> 00:08:16,614
with the newer API for their edges runtime,

127
00:08:16,742 --> 00:08:19,866
you will actually get the request in form of the request you

128
00:08:19,888 --> 00:08:23,406
are familiar with from fetch. It's the same request in order

129
00:08:23,428 --> 00:08:26,942
to respond, you will be creating a new response object,

130
00:08:27,076 --> 00:08:31,120
the same from fetch, and you're going to be returning it

131
00:08:31,810 --> 00:08:36,066
inside. You can specify the thing to return to

132
00:08:36,088 --> 00:08:40,338
your users, you can specify the status code, and you can specify options

133
00:08:40,424 --> 00:08:43,922
like headers, for example. This API is much

134
00:08:43,976 --> 00:08:47,346
cleaner, it's much more error prone,

135
00:08:47,458 --> 00:08:51,430
and it's much better to use it. One example

136
00:08:51,580 --> 00:08:55,606
why it's better is the situation I

137
00:08:55,708 --> 00:08:59,434
ran into multiple times, even myself,

138
00:08:59,552 --> 00:09:03,206
even with workplaces I've

139
00:09:03,238 --> 00:09:06,860
been working at. What would happen is that you would be

140
00:09:07,470 --> 00:09:11,494
setting a status code, returning, setting some data

141
00:09:11,632 --> 00:09:15,182
to be returning, but then you would forget a return and then

142
00:09:15,236 --> 00:09:18,574
the rest of the code will be executed and in production you will

143
00:09:18,612 --> 00:09:22,826
run into errors and your

144
00:09:22,868 --> 00:09:26,482
handlers won't be working as expected. So you would have to spend

145
00:09:26,536 --> 00:09:29,780
time finding out the handlers which have this problem,

146
00:09:30,310 --> 00:09:35,586
debugging, fixing it, and just adding a return after

147
00:09:35,688 --> 00:09:38,962
the logic and adding an if statement.

148
00:09:39,106 --> 00:09:42,578
The newer API prevents this completely. If you are returning,

149
00:09:42,674 --> 00:09:46,582
you must return something, and if you're returning something then

150
00:09:46,636 --> 00:09:50,554
execution will stop and this situation will no longer happen.

151
00:09:50,752 --> 00:09:54,922
Let's switch to Hono. Hono is a new web framework built

152
00:09:54,976 --> 00:09:59,082
on the latest web standard APIs. That's how it's able

153
00:09:59,136 --> 00:10:02,650
to run on multiple runtimes and on multiple

154
00:10:03,230 --> 00:10:06,830
cloud services. Hono is flaming Japanese.

155
00:10:07,170 --> 00:10:10,366
It was created by Yusukiwada, a developer advocate at

156
00:10:10,388 --> 00:10:13,714
Cloudflare, and we've been talking about its

157
00:10:13,752 --> 00:10:16,066
flexibility, but it's actually very simple.

158
00:10:16,248 --> 00:10:19,278
It's small, it's fast, and it provides

159
00:10:19,294 --> 00:10:23,086
just a fantastic developer experience. Overall, it's been gaining

160
00:10:23,118 --> 00:10:27,106
a lot of popularity, and I think that's because so many developers

161
00:10:27,138 --> 00:10:30,742
are finding out about it and starting migrating their

162
00:10:30,796 --> 00:10:34,134
projects to Hono and developing new projects with

163
00:10:34,172 --> 00:10:37,526
Hono. Hono API is very simple.

164
00:10:37,708 --> 00:10:41,546
You simply import Hono, you initialize your app and

165
00:10:41,568 --> 00:10:44,794
you can start straight away setting up

166
00:10:44,832 --> 00:10:48,566
the endpoints. So in this case for our app, we are setting

167
00:10:48,598 --> 00:10:52,382
up a get endpoint at hello and we are

168
00:10:52,436 --> 00:10:55,578
setting up a handler

169
00:10:55,674 --> 00:10:59,246
which would return some Json. In this case we are returning a

170
00:10:59,268 --> 00:11:03,034
message with a simple string hello. As you can see, the API

171
00:11:03,082 --> 00:11:05,970
is very straightforward, it's very easy to get started.

172
00:11:06,120 --> 00:11:09,682
And if you are migrating your old project

173
00:11:09,736 --> 00:11:13,586
to Hono, there's basically nothing new to learn. It's so simple that

174
00:11:13,608 --> 00:11:17,350
you can get started straight away. Now let's get to the main

175
00:11:17,420 --> 00:11:20,978
points why it's awesome and you should use it ideally.

176
00:11:21,154 --> 00:11:24,930
First, it's very flexible. We've been talking about flexibility

177
00:11:25,010 --> 00:11:28,706
a lot, but Hono can actually migrate from server

178
00:11:28,738 --> 00:11:33,190
to serverless environments and vice versa. You can switch standalone runtimes,

179
00:11:33,270 --> 00:11:36,586
so you can migrate from node JS to Deno, for example if you

180
00:11:36,608 --> 00:11:40,282
want to, and back. And you can also switch hosting services.

181
00:11:40,416 --> 00:11:43,646
So if for some reason you don't like AWS, you can

182
00:11:43,668 --> 00:11:47,246
migrate to Cloudflare or the other way around. One of my

183
00:11:47,268 --> 00:11:51,226
favorite flexibility points is that it's so flexible that you can actually embed

184
00:11:51,258 --> 00:11:54,482
it in your next JS project and you will have one

185
00:11:54,536 --> 00:11:57,954
repository where you would have your front end and

186
00:11:57,992 --> 00:12:02,020
your backend in the API folder versaill will deploy everything for you.

187
00:12:02,470 --> 00:12:05,858
If for some reason tomorrow you decide that Versaille is

188
00:12:05,864 --> 00:12:09,446
not the best platform for your API, you can just take all

189
00:12:09,468 --> 00:12:12,838
the code from the API folder and deploy it

190
00:12:12,924 --> 00:12:15,922
in a standalone way without any code changes whatsoever.

191
00:12:15,986 --> 00:12:19,334
It's fantastic. So for flexibility you can

192
00:12:19,372 --> 00:12:22,854
deploy hono. You can run it on node JS,

193
00:12:22,902 --> 00:12:26,790
on Dino, on bun, pretty much any standalone runtime.

194
00:12:26,950 --> 00:12:30,826
And for services you can choose from a

195
00:12:30,848 --> 00:12:34,638
lot of different runtimes. So for AWS it even

196
00:12:34,724 --> 00:12:38,382
works on both the lambda and lambda at the edge. Same goes for

197
00:12:38,436 --> 00:12:42,560
cell. You can run it on the node JS runtime and

198
00:12:43,410 --> 00:12:47,194
the at runtime. For node JS runtime you will have to use an adapter,

199
00:12:47,242 --> 00:12:51,120
but it's simply one edit dependency and

200
00:12:52,530 --> 00:12:56,550
one or two change code lines.

201
00:12:57,290 --> 00:13:00,754
Hono is very fast. It's got the fastest

202
00:13:00,802 --> 00:13:04,182
router for cloud web workers and for Dina. Also,

203
00:13:04,236 --> 00:13:08,042
if you're using a node JS adapter, it's still going to be three

204
00:13:08,096 --> 00:13:11,530
times faster than express, so massive performance gains.

205
00:13:12,030 --> 00:13:16,198
Hono has different routers for different applications.

206
00:13:16,294 --> 00:13:19,674
By default, a smart router number three will be

207
00:13:19,712 --> 00:13:24,382
used here, which will automatically select the best router for you from

208
00:13:24,436 --> 00:13:27,978
a regular expression router and the tree router. Regular expression

209
00:13:27,994 --> 00:13:32,042
router is the fastest in the JavaScript world. Tree router

210
00:13:32,106 --> 00:13:35,810
is slower, but it supports all patterns.

211
00:13:36,150 --> 00:13:39,902
If you are running Hono in a one shot environment,

212
00:13:39,966 --> 00:13:43,182
in serverless environment, for example like fastly compute,

213
00:13:43,326 --> 00:13:46,150
then it's best to use a linear router.

214
00:13:46,970 --> 00:13:50,230
If you're using Hono in an environment with

215
00:13:50,300 --> 00:13:54,102
very limited resources, it's best to use a pattern router number

216
00:13:54,156 --> 00:13:58,242
five, it's the smallest one. One of my favorite features

217
00:13:58,386 --> 00:14:02,426
of Hono is that it's completely type safe. Everything you

218
00:14:02,448 --> 00:14:06,374
do, everything you touch has got types.

219
00:14:06,502 --> 00:14:10,026
It's very easy to see what kind of data you

220
00:14:10,048 --> 00:14:14,622
are dealing with. We're going to be talking about data

221
00:14:14,676 --> 00:14:18,206
validation as well. It's very easy to do with Hono as well.

222
00:14:18,308 --> 00:14:22,454
Everything inside Hono will be typesafe. It's a very good developer

223
00:14:22,522 --> 00:14:26,174
experience because it completed typesafe.

224
00:14:26,222 --> 00:14:30,738
It can deduct types for your application and you can create

225
00:14:30,824 --> 00:14:33,630
an auto generated client with Hono.

226
00:14:33,790 --> 00:14:37,510
Just in my mind, it's the killer feature of Hono.

227
00:14:38,010 --> 00:14:41,160
You would set up your app just as you would

228
00:14:41,930 --> 00:14:45,462
with other clients. Then you could deduct the types in here.

229
00:14:45,516 --> 00:14:49,420
App type from the app and this will

230
00:14:50,030 --> 00:14:53,430
store all the information about your API,

231
00:14:53,510 --> 00:14:57,290
all the endpoints, all the inputs and outputs

232
00:14:57,870 --> 00:15:01,946
of your endpoints as well. Then you would import a

233
00:15:01,968 --> 00:15:05,694
Hono client, initialize it with the app type,

234
00:15:05,812 --> 00:15:09,246
specify the base API path and you will have

235
00:15:09,348 --> 00:15:13,818
a completely typesafe client for

236
00:15:13,844 --> 00:15:17,810
your API with all the inputs, outputs, all the endpoints

237
00:15:18,230 --> 00:15:21,778
in a completely type safe manner. With my example

238
00:15:21,864 --> 00:15:25,518
with next JS you can actually have your API

239
00:15:25,694 --> 00:15:28,866
and your front end in one project and you

240
00:15:28,888 --> 00:15:32,326
can generate a client and use it on the front end. So you can

241
00:15:32,348 --> 00:15:36,034
interact with your APIs very easily and when you change your API

242
00:15:36,082 --> 00:15:40,586
it will be synced automatically. Nothing to do to

243
00:15:40,608 --> 00:15:44,426
your front end and you can change the way you interact with

244
00:15:44,448 --> 00:15:48,362
the API. Also, if you have a public API, that also

245
00:15:48,416 --> 00:15:52,446
means that you can export your client as

246
00:15:52,468 --> 00:15:56,398
a separate package so user can install it from NPM and get

247
00:15:56,484 --> 00:15:59,982
going straight away. It providers a very

248
00:16:00,036 --> 00:16:03,394
cool web developer experience. All the

249
00:16:03,432 --> 00:16:07,922
endpoints of your API get autocomplete and

250
00:16:07,976 --> 00:16:11,794
you never have to worry about what type of data is

251
00:16:11,832 --> 00:16:15,054
my API returning. Let's talk about

252
00:16:15,112 --> 00:16:18,690
middleware, one of the most important features

253
00:16:18,770 --> 00:16:22,550
of any API library.

254
00:16:23,770 --> 00:16:27,586
Hono has a very simple API for middleware.

255
00:16:27,698 --> 00:16:30,650
If you just want to use a login service,

256
00:16:30,720 --> 00:16:34,746
for example, you can just say app use and specify the

257
00:16:34,768 --> 00:16:38,214
middleware logger. In this case you can also specify the path

258
00:16:38,342 --> 00:16:41,134
where your middleware should apply to.

259
00:16:41,252 --> 00:16:44,880
In this case we are setting some course headers for post

260
00:16:45,330 --> 00:16:48,910
and you cloud also specify the method and pass.

261
00:16:48,980 --> 00:16:54,046
In this case we are setting basic authorization for

262
00:16:54,148 --> 00:16:57,910
just the post request. So get request

263
00:16:58,010 --> 00:17:02,114
will not apply this middleware, but post ones would.

264
00:17:02,312 --> 00:17:06,002
Middleware is very easy to develop with

265
00:17:06,056 --> 00:17:09,958
Hono and you get a lot out of the box. Here is a

266
00:17:09,964 --> 00:17:13,654
huge list. So the included middleware is

267
00:17:13,692 --> 00:17:17,694
everything you want to do with authentication, caching course headers,

268
00:17:17,842 --> 00:17:21,382
logging and so on. And there's a lot of third party

269
00:17:21,526 --> 00:17:24,970
middleware as well, like sentry error integrations,

270
00:17:26,110 --> 00:17:29,354
zot validation, open API and stuff

271
00:17:29,392 --> 00:17:32,894
like that. Pretty much everything you would need has already been

272
00:17:32,932 --> 00:17:36,142
developed and you can use today.

273
00:17:36,276 --> 00:17:40,014
But if you don't actually find something that you

274
00:17:40,052 --> 00:17:43,266
want, you can easily create it. All that you need

275
00:17:43,288 --> 00:17:47,262
to do is to have one function with the context

276
00:17:47,326 --> 00:17:50,802
and the next function. In the first example,

277
00:17:50,936 --> 00:17:54,142
you can lock anything from the request

278
00:17:54,206 --> 00:17:57,350
or the response objects. When you're done

279
00:17:57,420 --> 00:18:01,206
in this case dealing with the request object,

280
00:18:01,308 --> 00:18:04,806
you just call next. So the next middleware will

281
00:18:04,828 --> 00:18:07,800
be triggered or the request will end.

282
00:18:08,350 --> 00:18:12,234
It's very easy to adjust some

283
00:18:12,272 --> 00:18:15,738
headers, for example AWS. In the second example

284
00:18:15,904 --> 00:18:19,450
you just need to call next and set the headers you want.

285
00:18:19,520 --> 00:18:23,754
It's very easy. You can get even very complex middleware

286
00:18:23,802 --> 00:18:26,080
done with Hono in a very easy way.

287
00:18:27,090 --> 00:18:30,462
Another one of the most important features of

288
00:18:30,516 --> 00:18:33,954
API libraries is validation. And basically you

289
00:18:33,992 --> 00:18:37,860
don't want to be dealing with data,

290
00:18:38,950 --> 00:18:42,274
you don't know what's inside of.

291
00:18:42,472 --> 00:18:46,246
And it's best to use a validator. You can

292
00:18:46,268 --> 00:18:49,970
use zod. It's the gold standard for data validation

293
00:18:50,050 --> 00:18:53,234
in the JavaScript world. Hono provides a zod validator

294
00:18:53,282 --> 00:18:57,160
for you. Here is just my personal example.

295
00:18:57,610 --> 00:19:01,242
What I like to do is to specify the schema. First I will say that

296
00:19:01,296 --> 00:19:02,700
I'm expecting an object,

297
00:19:05,550 --> 00:19:08,714
a name, we see string type.

298
00:19:08,912 --> 00:19:12,554
Then I would set up my hono endpoint.

299
00:19:12,602 --> 00:19:16,030
I will say that the endpoint will be hello,

300
00:19:16,180 --> 00:19:20,190
I'm specifying the middleware here, in this case that validator,

301
00:19:20,850 --> 00:19:24,578
and I'm specifying the schema I just created. And you need

302
00:19:24,584 --> 00:19:28,690
to also specify the part of the request you are actually checking.

303
00:19:29,270 --> 00:19:32,782
If the format is wrong, users will get immediately an error

304
00:19:32,846 --> 00:19:36,406
so they can correct the data. But inside the handler you

305
00:19:36,428 --> 00:19:39,766
see the data is already validated, you just need to

306
00:19:39,788 --> 00:19:43,942
access it from the context request valid and

307
00:19:43,996 --> 00:19:47,254
specify which part of the request you

308
00:19:47,292 --> 00:19:51,254
are checking. And then it's going to be completely typesafe.

309
00:19:51,382 --> 00:19:55,046
So the name we're accessing here, it will be deducted

310
00:19:55,078 --> 00:19:59,034
that it's going to be a string. And we can say another

311
00:19:59,232 --> 00:20:02,766
major features of API Libraries has

312
00:20:02,868 --> 00:20:06,074
automatically generated documentation hono

313
00:20:06,122 --> 00:20:09,754
covers you here completely. You can just import the open APIs

314
00:20:09,802 --> 00:20:13,354
Hono package module.

315
00:20:13,402 --> 00:20:16,942
In this case you would initialize open APIs hono the same

316
00:20:16,996 --> 00:20:21,106
way you would do with regular hono. But then every

317
00:20:21,208 --> 00:20:24,946
route you set up will actually save the

318
00:20:24,968 --> 00:20:28,918
information. So like in this case we are returning an ID,

319
00:20:29,004 --> 00:20:32,934
an age which is a number, and a name which will be

320
00:20:33,132 --> 00:20:36,440
a string or the exact thing over here.

321
00:20:36,970 --> 00:20:40,694
Then you would set up a documentation on the dock endpoint.

322
00:20:40,742 --> 00:20:44,060
You'll specify some metadata and that's it.

323
00:20:44,590 --> 00:20:47,926
The documentation will be available on this endpoint.

324
00:20:48,038 --> 00:20:51,710
Users will just have to go there and everything will be present to them.

325
00:20:51,780 --> 00:20:55,130
You don't have to run any generation steps.

326
00:20:55,210 --> 00:20:58,800
Everything will work out of the box. Nothing left to do.

327
00:20:59,410 --> 00:21:02,046
Here are some takeaways from this presentation. First,

328
00:21:02,148 --> 00:21:04,500
standardized web APIs are great.

329
00:21:05,270 --> 00:21:08,562
We are using in our handlers for our

330
00:21:08,616 --> 00:21:12,126
server software the same request and response

331
00:21:12,158 --> 00:21:16,378
objects from fetch. We are just completely reusing

332
00:21:16,414 --> 00:21:20,166
them. Developers are already familiar with them, so they know what

333
00:21:20,188 --> 00:21:24,754
to do with them. This increases interoperability

334
00:21:24,882 --> 00:21:28,460
of runtimes. This means that you can migrate your

335
00:21:29,470 --> 00:21:32,746
API or your handlers from one service to

336
00:21:32,768 --> 00:21:36,422
another, from one standalone runtimes

337
00:21:36,486 --> 00:21:40,858
to the other. Thank you very much Windowsig for Hono

338
00:21:41,034 --> 00:21:45,322
it runs everywhere. It's very easy to migrate

339
00:21:45,466 --> 00:21:48,974
from runtimes or services

340
00:21:49,092 --> 00:21:52,938
without any code requirements, code changes requirements.

341
00:21:53,034 --> 00:21:55,540
It's got excellent developer developer experience.

342
00:21:56,310 --> 00:22:00,286
Everything is typesafe. Data validation is excellent.

343
00:22:00,398 --> 00:22:04,082
It's very easy to get going or even migrate your

344
00:22:04,216 --> 00:22:07,000
existing projects. Because API is so simple,

345
00:22:07,610 --> 00:22:10,978
it's easily extendable. So if you don't see a middleware

346
00:22:11,074 --> 00:22:13,720
you like, you can easily develop it.

347
00:22:14,410 --> 00:22:18,186
Please go and try hono. It's fantastic. It makes your

348
00:22:18,208 --> 00:22:22,426
life easier. And in case you

349
00:22:22,448 --> 00:22:25,594
don't like a service, for example, where you've been

350
00:22:25,632 --> 00:22:28,300
running Hono, you can easily migrate to another one.

351
00:22:29,070 --> 00:22:32,880
If you want to know more about Hono, here are

352
00:22:33,250 --> 00:22:36,746
some links. First three are for the Hono

353
00:22:36,778 --> 00:22:40,510
project. The last one is for Yosuke, the creator of

354
00:22:40,580 --> 00:22:43,790
Hono. Thank you very much for listening to this presentation.

355
00:22:44,370 --> 00:22:47,930
In case you have any questions about the presentation,

356
00:22:48,010 --> 00:22:51,390
or any feedback or any questions about Hono,

357
00:22:52,050 --> 00:22:55,894
please reach out to me and I will share my experience with.

