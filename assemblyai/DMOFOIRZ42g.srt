1
00:00:20,640 --> 00:00:24,366
Hello everyone, my name is Dmitry Karolev and today I will tell you

2
00:00:24,390 --> 00:00:27,870
about popular mistakes in Golang and show you the reasons why

3
00:00:27,902 --> 00:00:31,014
they occur and help you to understand how to avoid them.

4
00:00:31,174 --> 00:00:34,374
We will start with one of the basic concepts, arrays and

5
00:00:34,414 --> 00:00:37,630
slices. An array is a

6
00:00:37,662 --> 00:00:40,654
sequence of elements of a certain type and fixed lengths.

7
00:00:40,734 --> 00:00:44,182
An array is an immutable data structure and its capacity is

8
00:00:44,238 --> 00:00:47,742
always equal to its length. Slices in turn are a

9
00:00:47,798 --> 00:00:51,646
superstructure on top of arrays with the ability to change the length.

10
00:00:51,790 --> 00:00:55,438
To better understand the principles of how slices work, you need to know

11
00:00:55,486 --> 00:00:57,954
what the slice structure itself looks like.

12
00:00:58,814 --> 00:01:02,614
In the structure we see the fields dedicated to the length and

13
00:01:02,654 --> 00:01:06,454
capacity of the slice, so they are both obtained

14
00:01:06,494 --> 00:01:09,918
in O one, as well as a pointer to the array

15
00:01:09,966 --> 00:01:13,526
on which the slice is built. There are two things to remember about

16
00:01:13,590 --> 00:01:17,334
length and capacity. When creating a new slice, its length

17
00:01:17,374 --> 00:01:20,694
equals to its capacity, unless you specify a different value

18
00:01:20,774 --> 00:01:23,990
with the make function. And the second thing is the rate

19
00:01:24,022 --> 00:01:27,814
of growth of slice slice capacity. Since in Golang all

20
00:01:27,854 --> 00:01:31,870
arguments are passed to functions by value. When passing a slice, the value

21
00:01:31,942 --> 00:01:35,542
of the slice structure itself, which is now visible on the slide,

22
00:01:35,598 --> 00:01:39,518
is passed as an argument. In other words, only the reference

23
00:01:39,566 --> 00:01:43,414
to the array on which the slice is built is copied and

24
00:01:43,454 --> 00:01:46,870
not the array data itself. So you

25
00:01:46,902 --> 00:01:50,558
might end up with unexpected results if you are not aware

26
00:01:50,606 --> 00:01:53,394
that only the reference is copied, not the following.

27
00:01:54,094 --> 00:01:57,542
Consider this example. Here we have a slice

28
00:01:57,598 --> 00:02:00,474
consisting of ten declared in the main.

29
00:02:00,894 --> 00:02:04,878
We print this slice and as expected see zero.

30
00:02:05,046 --> 00:02:09,034
After that we call the changeslice values function where we write

31
00:02:09,334 --> 00:02:13,374
one to the zero index of the slice. Further, we print

32
00:02:13,414 --> 00:02:16,862
the slice in the main again and as expected see

33
00:02:16,958 --> 00:02:21,004
one. So far nothing unexpected has happened.

34
00:02:21,134 --> 00:02:24,976
The value of the first element of the slice changed as we wanted.

35
00:02:25,160 --> 00:02:28,360
Now lets play a little with what happens

36
00:02:28,432 --> 00:02:32,592
in the changesize values function. As before, we will insert a one

37
00:02:32,648 --> 00:02:36,264
into the zero index, then append a two and

38
00:02:36,304 --> 00:02:39,696
finally write a three into the zero index

39
00:02:39,800 --> 00:02:43,640
again. And now the things that are happening may

40
00:02:43,672 --> 00:02:47,032
seem more unexpected for some reason. The second print

41
00:02:47,088 --> 00:02:50,808
in the main displays the same value that it displayed in the previous

42
00:02:50,896 --> 00:02:54,280
example. That is, one unit the size of

43
00:02:54,312 --> 00:02:57,416
the slice did not change despite the presence of a pen,

44
00:02:57,520 --> 00:03:01,416
and the second write to the zero element of the slice did not occur.

45
00:03:01,600 --> 00:03:04,800
In fact, everything becomes quite simple if you remember the

46
00:03:04,832 --> 00:03:08,368
information about slices that we discussed above. At the very

47
00:03:08,416 --> 00:03:12,528
beginning we set a slice with length equals to capacity equals

48
00:03:12,576 --> 00:03:16,232
to one, and when change slice values, function is called the value

49
00:03:16,288 --> 00:03:20,170
of the slice structure itself itself is passed as an argument and

50
00:03:20,202 --> 00:03:23,906
the slice inside the function points to the same underlying

51
00:03:23,970 --> 00:03:27,378
array as the slice outside. For this reason, the first

52
00:03:27,426 --> 00:03:30,474
write to zero index is applied on the original array,

53
00:03:30,594 --> 00:03:33,938
which was created when the slice was initialized

54
00:03:33,986 --> 00:03:37,706
in main. Next we do append since the slice inside the

55
00:03:37,730 --> 00:03:42,306
function has its length equals to its capacity, Golang runtime

56
00:03:42,410 --> 00:03:46,044
reallocates memory for a new array, and the slice inside

57
00:03:46,084 --> 00:03:49,388
the function begins to point to it. This has no

58
00:03:49,436 --> 00:03:53,308
effect on the original slice in the main function. The next

59
00:03:53,396 --> 00:03:56,684
write already occurs in the new array pointed to by

60
00:03:56,724 --> 00:04:00,980
the slice inside the function, which again does not affect the original

61
00:04:01,052 --> 00:04:04,844
data. You can also encounter the same problem

62
00:04:04,924 --> 00:04:08,020
when trying to copy a slice. In this example,

63
00:04:08,132 --> 00:04:11,980
data from the structure of the original slice was copied into the

64
00:04:12,012 --> 00:04:15,900
new slice variable, including a pointer to an array

65
00:04:15,972 --> 00:04:16,824
with data.

66
00:04:19,164 --> 00:04:23,276
Thus, when executing a pen, we erase the data in the original

67
00:04:23,380 --> 00:04:27,212
array. Go has a special built in copy function

68
00:04:27,268 --> 00:04:31,028
that allows you to safely copy any slices on the

69
00:04:31,076 --> 00:04:34,196
slide. We can see that by using copy

70
00:04:34,260 --> 00:04:38,132
we transferred the elements from the original slice to the new one,

71
00:04:38,228 --> 00:04:42,326
and now we can safely append the elements to the new slice without

72
00:04:42,430 --> 00:04:45,830
fear of raising the data. However, there are

73
00:04:45,862 --> 00:04:49,502
not all the problems you may encounter when working with slices.

74
00:04:49,638 --> 00:04:51,834
Lets look at one more example.

75
00:04:52,454 --> 00:04:55,902
Suppose we aim to parse a news portal and

76
00:04:55,958 --> 00:05:00,046
for each new article store the first 100 characters

77
00:05:00,190 --> 00:05:04,086
of the news content in a memory cache. This would allow us to

78
00:05:04,110 --> 00:05:07,866
provide users with a preview of article. In this

79
00:05:07,890 --> 00:05:11,578
example, we basically see the logic described in a continuous

80
00:05:11,626 --> 00:05:15,642
loop. We fetch new articles, extract the first 100

81
00:05:15,698 --> 00:05:19,066
runes from each and pass them to a specific

82
00:05:19,130 --> 00:05:22,570
function. Store article Preview this function

83
00:05:22,642 --> 00:05:26,810
is responsible for storing these previews in the in memory cache.

84
00:05:26,922 --> 00:05:30,574
However, the problem is that when we launch our service,

85
00:05:30,914 --> 00:05:34,112
to our surprise, it will eat up much more

86
00:05:34,168 --> 00:05:37,976
ram than we planned, all because we have allowed

87
00:05:38,080 --> 00:05:41,528
for a memory leak. Here. The operation of obtaining the first 100

88
00:05:41,576 --> 00:05:45,672
runes from a use creates a slice of 100 elements long.

89
00:05:45,848 --> 00:05:49,792
However, its capacity remains the same as that of the original

90
00:05:49,848 --> 00:05:53,536
size. The entire array with the news text remains in memory,

91
00:05:53,600 --> 00:05:57,296
even if ultimately only a link to the first 100 of

92
00:05:57,320 --> 00:06:01,020
its elements is stored. By the way, why use runes

93
00:06:01,092 --> 00:06:04,500
instead of directly slicing the first 100 elements from

94
00:06:04,532 --> 00:06:08,476
the string? Why the need to convert to a rune array?

95
00:06:08,620 --> 00:06:12,028
Lets examine a few examples and compare slicing

96
00:06:12,076 --> 00:06:15,188
on a rune array versus directly on the string.

97
00:06:15,236 --> 00:06:18,668
To understand the differences here we take

98
00:06:18,716 --> 00:06:22,460
the standard line hello world, make a separate

99
00:06:22,532 --> 00:06:26,054
variable with the runes of this line and print slices from

100
00:06:26,084 --> 00:06:29,202
from the first five characters. According to

101
00:06:29,218 --> 00:06:33,042
the idea, it should be the word hello in three forms,

102
00:06:33,098 --> 00:06:36,170
as runes, as runes, convert back to a string,

103
00:06:36,242 --> 00:06:40,114
and as a direct string slice. In the output,

104
00:06:40,194 --> 00:06:44,002
nothing unusual appears. As we expected, hello is represented

105
00:06:44,058 --> 00:06:47,930
in both runes and bytes. Now let's

106
00:06:47,962 --> 00:06:51,662
try to say hello in Chinese and print the same thing.

107
00:06:51,818 --> 00:06:54,894
As planned, the first two hieroglyphs should be displayed,

108
00:06:54,934 --> 00:06:58,206
meaning hello. But something goes wrong in

109
00:06:58,230 --> 00:07:01,830
the option with regular line slicing, the hieroglyphs are

110
00:07:01,862 --> 00:07:05,694
not displayed. Basically because strings in go are made

111
00:07:05,734 --> 00:07:09,214
up of UTF eight characters. These characters can

112
00:07:09,254 --> 00:07:12,982
be more than one byte long. Slicing a string means you

113
00:07:12,998 --> 00:07:15,994
are working with bytes, not the characters themselves.

114
00:07:16,494 --> 00:07:20,406
So when we tried to get the first two charities of the string, we actually

115
00:07:20,470 --> 00:07:23,484
just got the first two bytes. In general,

116
00:07:23,604 --> 00:07:27,620
working with strings may bring a few surprises, since the work of string

117
00:07:27,692 --> 00:07:31,252
slicing and the LAN method work for it with bytes,

118
00:07:31,388 --> 00:07:35,452
and the for loop on a string will use the byte index s index

119
00:07:35,508 --> 00:07:38,708
I, but the variable C will contain a rune,

120
00:07:38,796 --> 00:07:41,384
which starts at this index.

121
00:07:42,404 --> 00:07:45,580
Therefore, it is often much easier to convert a string to

122
00:07:45,612 --> 00:07:49,164
a slice of runes and work with it. But dont forget about the

123
00:07:49,204 --> 00:07:52,348
overhead, which in this case we generally get.

124
00:07:52,476 --> 00:07:56,036
For each line there will be two variables, one of which

125
00:07:56,100 --> 00:07:59,380
stores the original line and the second stores an array

126
00:07:59,412 --> 00:08:02,836
of runes. If there are a lot of lines and the long,

127
00:08:02,900 --> 00:08:05,996
this may matter. Next we will

128
00:08:06,020 --> 00:08:09,540
talk about channels. Channels are a synchronization primitive that

129
00:08:09,572 --> 00:08:13,722
provides the ability for one coroutine to send data to another coroutine

130
00:08:13,828 --> 00:08:17,274
and provide secure concurrent access to shared data.

131
00:08:17,654 --> 00:08:21,318
When working with channels, two questions always who should close

132
00:08:21,366 --> 00:08:25,214
them, and whether this should be done at all. To answer

133
00:08:25,254 --> 00:08:28,934
them correctly, you need to know what can happen when working with a closed

134
00:08:28,974 --> 00:08:32,686
channel. There is a wonderful tablet that describes what

135
00:08:32,710 --> 00:08:36,294
we get when performing various operations on the channel in different

136
00:08:36,374 --> 00:08:39,942
states. Let's pay attention to the operations on the channel in

137
00:08:39,958 --> 00:08:43,368
the closets state reading from a closed channel works fine,

138
00:08:43,416 --> 00:08:47,104
but trying to write one or closing it again causes

139
00:08:47,144 --> 00:08:50,768
a panic. This leads to a clear guideline. The goroutine

140
00:08:50,816 --> 00:08:54,040
responsible for writing should be the one to close the channel.

141
00:08:54,152 --> 00:08:57,408
This way we minimize the risk of attempting to write to

142
00:08:57,456 --> 00:09:00,800
close the channel, which would lead to panic. Now let's

143
00:09:00,832 --> 00:09:04,192
try to answer the question, why close the channel? To do this,

144
00:09:04,248 --> 00:09:07,732
let's turn to the documentation and see needs a line.

145
00:09:07,828 --> 00:09:11,660
A sender can close a channel to indicate that no more values

146
00:09:11,692 --> 00:09:15,708
will be sent. If the sender closes the channel, it means that

147
00:09:15,756 --> 00:09:20,092
someone other than him may need it. For example, a channel reader.

148
00:09:20,268 --> 00:09:23,924
Let's look at an example where

149
00:09:24,004 --> 00:09:27,820
this might be useful. Here we can see the function

150
00:09:27,892 --> 00:09:31,356
write to chain in which writing is done to a channel.

151
00:09:31,540 --> 00:09:34,956
Surprise, surprise. Then, in the main part of

152
00:09:34,980 --> 00:09:38,918
the code, there is a loop that reads values from this channel. If you forget

153
00:09:38,966 --> 00:09:42,382
to close the channel, the loop will keep running forever, causing a

154
00:09:42,398 --> 00:09:46,374
deadlock. It is worth remembering that you should close the channel only

155
00:09:46,414 --> 00:09:50,718
in situations where the reader must somehow react to it.

156
00:09:50,846 --> 00:09:54,798
There is nothing wrong with leaving the channel unclosed. The garbage collector

157
00:09:54,846 --> 00:09:57,554
will be able to get rid of it in this state.

158
00:09:58,094 --> 00:10:01,822
Since we have discussed working with channels, it is also worth discussing

159
00:10:01,878 --> 00:10:05,596
the traps that structures using channels have prepared for us.

160
00:10:05,740 --> 00:10:08,996
One such structure is time after. It can

161
00:10:09,020 --> 00:10:12,852
lead to some unexpected situations. Time after in Go is

162
00:10:12,868 --> 00:10:16,500
a function that returns a channel that will close after a specified

163
00:10:16,572 --> 00:10:20,068
time delay. It is commonly used to create timers or set

164
00:10:20,116 --> 00:10:24,064
timeouts for certain logic to be executed in programs.

165
00:10:24,484 --> 00:10:27,764
Imagine a basic scenario where we receive

166
00:10:27,844 --> 00:10:31,422
events from a channel. If we don't receive any

167
00:10:31,478 --> 00:10:34,798
events from this channel within 15 minutes,

168
00:10:34,846 --> 00:10:38,390
we print a warning saying that we haven't received any

169
00:10:38,422 --> 00:10:42,030
events for a while. While this code may seem fine and

170
00:10:42,102 --> 00:10:45,910
run without issues, if we are monitoring memory consumption and

171
00:10:45,942 --> 00:10:49,486
there is a large number of events, we might detect a

172
00:10:49,550 --> 00:10:53,950
memory leak with an average flow of a million events.

173
00:10:54,062 --> 00:10:57,928
In 15 minutes, the leak will be about 200 megabytes.

174
00:10:58,056 --> 00:11:01,504
Considering that a single channel in go consumes

175
00:11:01,544 --> 00:11:05,064
around 200 bytes, simple calculations show

176
00:11:05,144 --> 00:11:08,004
that a new channel is created for each event.

177
00:11:08,304 --> 00:11:12,280
You might wonder how this is possible given that after

178
00:11:12,352 --> 00:11:16,216
each select statement, time after should go out of scope and

179
00:11:16,360 --> 00:11:20,112
be cleaned up by the garbage collector. As we discussed

180
00:11:20,168 --> 00:11:23,472
earlier, however, go, while logically structured,

181
00:11:23,528 --> 00:11:27,862
still still hold surprises. With closer inspection of the documentation,

182
00:11:27,918 --> 00:11:31,194
you will find lines that shed light on this behavior.

183
00:11:32,334 --> 00:11:35,838
The underlying timer is not recovered by the garbage collector

184
00:11:35,886 --> 00:11:39,086
until the timer fires. If its efficiency is a concern,

185
00:11:39,190 --> 00:11:42,798
use new timer instead and call timer stop if the timer

186
00:11:42,846 --> 00:11:46,534
is no longer needed. Thus, the channel that we create with

187
00:11:46,574 --> 00:11:50,004
time after will remain hanging in memory as dead weight

188
00:11:50,044 --> 00:11:53,264
for the time we set. That is, for 15 million.

189
00:11:53,604 --> 00:11:56,660
Next, we will talk about goutines. A gorting is

190
00:11:56,692 --> 00:12:00,204
a lightweight thread of execution in user space. While operating

191
00:12:00,284 --> 00:12:04,340
system threads are in kernel space, the fact that they run in user

192
00:12:04,372 --> 00:12:08,260
space means that they are controlled by goroutines

193
00:12:08,412 --> 00:12:12,092
are designed to be more efficient than traditional operating

194
00:12:12,188 --> 00:12:15,876
system threads. There is a common trap that is very easy to

195
00:12:15,900 --> 00:12:19,384
fall for if you are not aware of it. Also, it is not

196
00:12:19,424 --> 00:12:23,008
directly related to gortings. It is most often encountered when

197
00:12:23,056 --> 00:12:26,328
creating gortings in the loop. Lets look at an example.

198
00:12:26,496 --> 00:12:30,160
In this scenario we generate a slice of numbers from one to

199
00:12:30,192 --> 00:12:33,144
five and within a loop we create gurutins.

200
00:12:33,304 --> 00:12:36,632
Each coroutine adds its corresponding number from the size

201
00:12:36,688 --> 00:12:40,264
to a sum variable. You might expect the

202
00:12:40,304 --> 00:12:43,960
output to display the number 15 which is the sum of numbers

203
00:12:43,992 --> 00:12:47,616
from one to. However the actual output will be

204
00:12:47,640 --> 00:12:51,072
different. The discrepancy arises because of closures

205
00:12:51,248 --> 00:12:55,432
which are functions that capture variables from their surroundings.

206
00:12:55,608 --> 00:12:59,480
The peculiarity of their work is in how the captured variable is

207
00:12:59,512 --> 00:13:03,112
used. Gootteans do not capture the values of variables

208
00:13:03,168 --> 00:13:06,616
at the time they are created, they capture a reference to the

209
00:13:06,640 --> 00:13:10,584
variable. Therefore, when the coroutine starts executing, the loop has

210
00:13:10,664 --> 00:13:14,120
often already passed and the value variable has the

211
00:13:14,152 --> 00:13:17,912
last value from the slice through which we are iterating.

212
00:13:18,088 --> 00:13:21,720
Also, there is no guarantee that the loop will end before one of

213
00:13:21,752 --> 00:13:24,952
coroutines starts working. It leads to the fact

214
00:13:25,008 --> 00:13:29,400
that the value in the sum variable is not 15 this

215
00:13:29,432 --> 00:13:33,424
is such a common problem that go maintainers decided to change the semantics

216
00:13:33,464 --> 00:13:37,416
of for loop variables to prevent them from being unintentionally

217
00:13:37,480 --> 00:13:41,640
used in closures and and coroutines at every iteration. In version

218
00:13:41,752 --> 00:13:44,864
1.21 a corresponding experiment

219
00:13:44,904 --> 00:13:48,536
appeared, and since version 1.22 this

220
00:13:48,560 --> 00:13:52,440
problem has completely stopped reproducing. But since version

221
00:13:52,512 --> 00:13:56,240
1.22 is fresh, and probably not everyone

222
00:13:56,312 --> 00:13:59,992
has managed to update it, take note of this feature of how thezures

223
00:14:00,048 --> 00:14:03,808
work. Next we will talk about

224
00:14:03,896 --> 00:14:06,184
sync and atomic pair packages.

225
00:14:07,044 --> 00:14:10,132
In the previous example, we used sync weight group to wait for

226
00:14:10,148 --> 00:14:13,540
the coroutines to execute. And by the way, we did

227
00:14:13,572 --> 00:14:16,700
it wrong. Admit it. Who didn't notice it is

228
00:14:16,732 --> 00:14:20,668
worth paying attention to where we do weight group add and think

229
00:14:20,716 --> 00:14:24,204
about what their risks are. Let's figure

230
00:14:24,244 --> 00:14:27,884
out look at the weight group struct in the weight group

231
00:14:27,924 --> 00:14:31,344
structure. Interesting things. There are semaphore and

232
00:14:31,444 --> 00:14:35,344
there's certain no copy. First, let's talk about the semaphore.

233
00:14:35,464 --> 00:14:39,064
Or more precisely, about the fact that essentially weight group

234
00:14:39,104 --> 00:14:42,804
is a simple wrapper over a semaphore with three methods.

235
00:14:43,584 --> 00:14:47,480
Add increases the semaphore value, past value done

236
00:14:47,552 --> 00:14:51,832
decreases the semaphore value by one, and wait blocks

237
00:14:51,968 --> 00:14:55,560
execution until the semaphore value becomes zero.

238
00:14:55,752 --> 00:14:59,274
So the problem is, in the Gurtins we launched,

239
00:14:59,734 --> 00:15:03,670
there is no guarantee that the Gurtins start before wait

240
00:15:03,742 --> 00:15:07,038
is called. This means wait might finish before ad

241
00:15:07,086 --> 00:15:10,558
runs. And since gortings can launch in any

242
00:15:10,606 --> 00:15:14,358
order, we might wrongly assume that they are all done when

243
00:15:14,406 --> 00:15:17,598
some havent even started. Now lets talk about

244
00:15:17,646 --> 00:15:20,502
the no copy field in the weight group structure.

245
00:15:20,638 --> 00:15:23,870
Its a type that suggests it cant be copied.

246
00:15:24,022 --> 00:15:27,950
We will find the similar field in many structures of the sync

247
00:15:27,982 --> 00:15:31,514
package. Lets see what happens if we do a copy of it.

248
00:15:33,014 --> 00:15:36,590
In this program we have a counter structure that stores the map as

249
00:15:36,622 --> 00:15:40,750
well as a mutex which is supposed to protect the map from parallel writing.

250
00:15:40,902 --> 00:15:44,054
The mutex, just like Waitroof, has no copy.

251
00:15:44,214 --> 00:15:48,150
There are two methods defined on the counter structure. One increases

252
00:15:48,182 --> 00:15:50,914
the value of a specific key by one,

253
00:15:51,334 --> 00:15:54,966
and the other increases the value immediately by

254
00:15:55,030 --> 00:15:58,238
passed value. Finally there is a main

255
00:15:58,326 --> 00:16:01,542
in which we initialize the counter structure

256
00:16:01,598 --> 00:16:05,514
and launch two gooutines to increase the value of the same key,

257
00:16:06,014 --> 00:16:09,126
make a slip to wait for the Gurtin

258
00:16:09,150 --> 00:16:12,694
to complete and print the values that will end

259
00:16:12,734 --> 00:16:16,646
up in the map of the counter. But unfortunately we

260
00:16:16,670 --> 00:16:20,154
will never see the print because we will for in a panic.

261
00:16:21,294 --> 00:16:24,726
The problem with this code is that whenever increment is

262
00:16:24,750 --> 00:16:27,822
called, our counterc is copied into it,

263
00:16:27,958 --> 00:16:31,430
since increment is defined to be of the type

264
00:16:31,462 --> 00:16:35,006
counter, not pointer counter. In other words,

265
00:16:35,070 --> 00:16:37,686
it is a value receiver, not a pointer receiver.

266
00:16:37,870 --> 00:16:41,710
Therefore the increment cannot change the original counter variables

267
00:16:41,862 --> 00:16:45,166
that we created in the main. Thus with each call to

268
00:16:45,190 --> 00:16:49,820
increment, the counter was copied with all its contents, including mutex.

269
00:16:50,012 --> 00:16:53,564
Now remember that a mutex is essentially just a wrapper over

270
00:16:53,604 --> 00:16:57,180
a semaphore, and when we copy it, we also copy the

271
00:16:57,212 --> 00:17:01,140
semaphore. In this case, the copy and the original can live their

272
00:17:01,212 --> 00:17:05,188
own separate lives and nothing will prevent them from competing

273
00:17:05,316 --> 00:17:08,104
for operations with the same memory block.

274
00:17:08,764 --> 00:17:11,820
Therefore copying a mutex is incorrect.

275
00:17:12,012 --> 00:17:15,676
So thanks to zwery nocopier it is possible to

276
00:17:15,700 --> 00:17:18,604
mark any structure structure as impossible to copy.

277
00:17:18,764 --> 00:17:22,024
Main structures from the sync package are marked as such.

278
00:17:22,404 --> 00:17:26,260
Then using the govt command you can detect places where the marked

279
00:17:26,292 --> 00:17:29,924
structure is copied and finally find

280
00:17:29,964 --> 00:17:33,900
a potential problem in your application code. Now let's

281
00:17:33,932 --> 00:17:37,340
move on to another common synchronization primitive atomics.

282
00:17:37,492 --> 00:17:41,444
They provide secure access to shared memory for reading, writing and modifying

283
00:17:41,484 --> 00:17:45,152
variables. In addition, atomic operations are generally faster than

284
00:17:45,168 --> 00:17:49,364
mutex operations due to use of a specific set of processor instructions.

285
00:17:49,744 --> 00:17:53,400
However, with this advantage comes also a disadvantage that

286
00:17:53,432 --> 00:17:56,696
is periodically forgotten. Operations with

287
00:17:56,760 --> 00:18:00,884
atomics are atomic individually, but not atomic collectively.

288
00:18:01,384 --> 00:18:02,924
Lets look at an example.

289
00:18:04,624 --> 00:18:08,426
In this program, a Gaussian continuously increases a variable num by one

290
00:18:08,520 --> 00:18:12,254
in an endless loop. Meanwhile in the main function there is another

291
00:18:12,334 --> 00:18:15,934
infinite loop that checks if num is even, and if so

292
00:18:16,014 --> 00:18:19,766
it prints it on the screen however, we see that

293
00:18:19,790 --> 00:18:23,486
the number 287 is displayed and surprisingly

294
00:18:23,550 --> 00:18:27,222
its old. This occurs because after Num passes the

295
00:18:27,278 --> 00:18:30,942
parity check, its value isnt protected from further changes.

296
00:18:31,118 --> 00:18:34,662
Consequently, the gorting incrementing num can alter its

297
00:18:34,718 --> 00:18:36,874
value before it's printed to the screen.

298
00:18:41,174 --> 00:18:44,454
And next we will talk about another cool go

299
00:18:44,494 --> 00:18:48,390
conception called defer. Defer allows you to defer execution

300
00:18:48,422 --> 00:18:51,606
of a block of codes until the end of the function in which it was

301
00:18:51,630 --> 00:18:55,686
called. It is typically used to ensure that resources

302
00:18:55,750 --> 00:18:58,886
such as closing a file or unlocking a mutex are

303
00:18:58,910 --> 00:19:02,412
freed, regardless of whether the function exists due to a

304
00:19:02,428 --> 00:19:04,624
normal return, panic or error.

305
00:19:05,324 --> 00:19:09,548
Consider an example. Here we see the profile

306
00:19:09,596 --> 00:19:13,252
structure and several possible types for it, as well as the getbalance

307
00:19:13,308 --> 00:19:17,212
method, in which, depending on the profile type, one or another balance

308
00:19:17,268 --> 00:19:20,772
calculation method is selected. Let's say now we want to

309
00:19:20,788 --> 00:19:24,344
add a log with the final balance obtained during the calculation.

310
00:19:24,884 --> 00:19:28,854
As a result of such log, we will always see the entry profile

311
00:19:29,044 --> 00:19:32,314
balance zero. Why is this so?

312
00:19:32,474 --> 00:19:35,866
Let's take a closer look at what is written about defer in

313
00:19:35,890 --> 00:19:39,570
the language documentation. The arguments to the

314
00:19:39,602 --> 00:19:43,666
deferent function, which includes the receiver if the function is a method evaluated

315
00:19:43,730 --> 00:19:47,454
when the defer executes, not when the call executes.

316
00:19:48,514 --> 00:19:52,218
In our example, at the time of execution of deferred, the default value

317
00:19:52,266 --> 00:19:56,138
in the balance variable is zero. This is the value with which our parentheses

318
00:19:56,186 --> 00:19:59,594
executed in order to achieve the result we wanted to get.

319
00:19:59,714 --> 00:20:03,306
That is, for the final calculation amount to appear in the print,

320
00:20:03,450 --> 00:20:08,314
we can use concepts that we already met. Closures an

321
00:20:08,354 --> 00:20:11,770
anonymous function does not accept any arguments.

322
00:20:11,842 --> 00:20:15,650
The balance variable is defined within the body of the of this

323
00:20:15,682 --> 00:20:19,290
function. As we discussed earlier, a reference to this variable will

324
00:20:19,322 --> 00:20:23,334
be stored and the actual value will be retrieved when the anonymous function function

325
00:20:23,374 --> 00:20:25,914
as executed using the stored reference.

326
00:20:28,094 --> 00:20:31,194
Now it's time to talk about interfaces.

327
00:20:31,654 --> 00:20:35,326
Interfaces in Go provide code flexibility by allowing you

328
00:20:35,350 --> 00:20:39,078
to write generic functions that can work with different data types

329
00:20:39,166 --> 00:20:42,422
that implement the same interface. However, not everything

330
00:20:42,478 --> 00:20:45,474
is smooth with them. Let's look at an example.

331
00:20:47,174 --> 00:20:50,894
Here we see the requester interface and the

332
00:20:50,934 --> 00:20:54,372
concrete requester type, which implements the makerequest

333
00:20:54,428 --> 00:20:57,604
methods of the interface. In addition to it, we see

334
00:20:57,644 --> 00:21:01,660
the makerequesterconstructor with a return value of the

335
00:21:01,692 --> 00:21:05,204
interface type, and finally we see main in which the

336
00:21:05,244 --> 00:21:09,504
constructor is called and several prints occur

337
00:21:10,164 --> 00:21:14,060
unexpectedly. When starting, we get the following output

338
00:21:14,212 --> 00:21:17,300
got requester nil and the requester is not nil.

339
00:21:17,412 --> 00:21:21,012
It turns out. Interesting. To figure it out, we need

340
00:21:21,028 --> 00:21:24,964
to take a closer look at the interfaces, or more precisely,

341
00:21:25,044 --> 00:21:27,624
at how they are arranged under the hood.

342
00:21:29,044 --> 00:21:31,980
Under the hood there are two structures for interfaces,

343
00:21:32,132 --> 00:21:35,796
efe face for an empty interface, and iface

344
00:21:35,860 --> 00:21:39,396
for an interface with a defined set of methods

345
00:21:39,540 --> 00:21:43,292
that the type must adhere to. We are interested

346
00:21:43,348 --> 00:21:47,378
in the common fields, namely the data type,

347
00:21:47,506 --> 00:21:50,866
the interface implements, and the reference to the memory location

348
00:21:50,930 --> 00:21:54,314
where its value is stored. For two interface

349
00:21:54,394 --> 00:21:58,458
variables to be considered equal, both of these fields must match.

350
00:21:58,626 --> 00:22:02,334
Now let's see what exactly lies in these fields

351
00:22:02,674 --> 00:22:05,014
for our requester variable.

352
00:22:05,794 --> 00:22:09,138
Yeah, this is where the legs grow. Despite the fact

353
00:22:09,226 --> 00:22:12,636
that the actual value of the variable is nil, the type

354
00:22:12,660 --> 00:22:16,220
is not, which leads to the fact that the requester not equals

355
00:22:16,292 --> 00:22:20,664
to nil. And next we will talk about rendering peculiarities.

356
00:22:21,004 --> 00:22:24,836
Lets assume that you have created a library in Go in

357
00:22:24,860 --> 00:22:28,532
which some network request must be transmitted. Inside this library

358
00:22:28,588 --> 00:22:32,444
you have implemented a certain client that can make requests, receive some

359
00:22:32,484 --> 00:22:35,932
data in response, and transmit it in the form of a structure

360
00:22:35,988 --> 00:22:39,696
described in the models. Lets try to

361
00:22:39,720 --> 00:22:43,056
integrate this library into a service. We added it to

362
00:22:43,080 --> 00:22:46,952
the Gomod file, ran, Gomode Tidy and Gomoot vendor

363
00:22:47,008 --> 00:22:50,968
in the console. However, after inspecting the vendor directory,

364
00:22:51,016 --> 00:22:54,056
we were surprised to find only portion of the librarys,

365
00:22:54,080 --> 00:22:57,888
files and folders present. For those who have not studied

366
00:22:57,936 --> 00:23:01,240
how vendoring works, and in my experience this is more than half of

367
00:23:01,272 --> 00:23:05,006
developers, this will seem strange. Well, for answers

368
00:23:05,110 --> 00:23:09,674
we go to the language documentation and

369
00:23:10,294 --> 00:23:13,470
again everything falls into places. The vendor

370
00:23:13,502 --> 00:23:17,406
receives only those packages that are necessary for the successful

371
00:23:17,470 --> 00:23:21,150
build and testing of the application. That is, if we

372
00:23:21,222 --> 00:23:25,118
initialize a client from a library somewhere in the service in which we connected

373
00:23:25,166 --> 00:23:28,866
this library, the packages required for this will be pulled up.

374
00:23:29,030 --> 00:23:32,794
In itself, this situation may simply seem just like an unexpected

375
00:23:32,874 --> 00:23:37,050
feature of the language, but in fact this is such a subtle hint

376
00:23:37,122 --> 00:23:40,858
that is possible to bring the implementation of the logic of going

377
00:23:40,946 --> 00:23:44,266
to an external service inside the library. This is not

378
00:23:44,290 --> 00:23:47,746
the best idea because in this way we increase the

379
00:23:47,850 --> 00:23:51,738
coherence of the logic as well as we reduce the capabilities of

380
00:23:51,786 --> 00:23:56,182
consumer services in terms of customizing the interaction

381
00:23:56,238 --> 00:23:58,634
of the library with external services.

382
00:24:00,494 --> 00:24:04,558
And that's all. We have taken a close look at several common mistakes

383
00:24:04,606 --> 00:24:07,566
when programming can go and discussed how you can avoid them.

384
00:24:07,670 --> 00:24:11,206
I hope this brief excursion through the complexities of slices,

385
00:24:11,270 --> 00:24:15,022
channels, go routines and other aspects help you strengthen

386
00:24:15,158 --> 00:24:18,950
your knowledge of language and provide valuable insights.

387
00:24:19,142 --> 00:24:22,358
But don't forget that go as a language does not stand still

388
00:24:22,446 --> 00:24:26,242
and and is constantly evolving. So I wish you to

389
00:24:26,258 --> 00:24:29,274
develop with it and hope that you liked this report. Thank you.

