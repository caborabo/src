1
00:00:21,210 --> 00:00:24,000
Welcome back to my talk about software security.

2
00:00:24,610 --> 00:00:28,006
You my name is Marco Valon and I'm going to

3
00:00:28,028 --> 00:00:32,434
talk to you from the perspective of a Gitops

4
00:00:32,482 --> 00:00:35,762
DevOps cloud container engineer.

5
00:00:35,826 --> 00:00:39,720
Give it a name. But just for the record, I'm not real.

6
00:00:41,770 --> 00:00:45,554
I am very passionate about software dough and hence

7
00:00:45,682 --> 00:00:47,800
that's why I'd like to talk about it.

8
00:00:49,450 --> 00:00:54,078
What want to do today is to discuss

9
00:00:54,164 --> 00:00:57,678
with you the ability to reveal the

10
00:00:57,764 --> 00:01:01,114
safety of software without revealing

11
00:01:01,162 --> 00:01:04,906
application logic. Even if you're developing

12
00:01:04,938 --> 00:01:07,714
open source software, for many people,

13
00:01:07,912 --> 00:01:12,082
analyzing the code and judging it is

14
00:01:12,136 --> 00:01:16,306
way too complex. They need other means to identify

15
00:01:16,498 --> 00:01:19,510
whether or not software is safe.

16
00:01:20,090 --> 00:01:23,206
And in this respect, safe does not mean that

17
00:01:23,228 --> 00:01:27,320
it's performing well. The quality of your product is

18
00:01:27,930 --> 00:01:31,226
something totally different. I hope

19
00:01:31,248 --> 00:01:34,058
to create a bit of awareness about the tools available,

20
00:01:34,144 --> 00:01:37,514
the techniques available, and I'd like to encourage you

21
00:01:37,632 --> 00:01:40,380
to adopt this in your workflow as well.

22
00:01:42,610 --> 00:01:46,366
And in order to do so, I want to make a

23
00:01:46,388 --> 00:01:50,270
sidestep to another industry which has similar challenges.

24
00:01:51,010 --> 00:01:54,818
But before we do so, I'm going to present you a QR code

25
00:01:54,984 --> 00:01:59,010
which you can scan and you can use it to

26
00:01:59,160 --> 00:02:02,482
have a look at the presentation. Later on.

27
00:02:02,536 --> 00:02:05,590
It will be online behind the

28
00:02:05,740 --> 00:02:08,440
link that is shown in the QR code.

29
00:02:12,260 --> 00:02:16,140
In the context of a talk like this for Python

30
00:02:16,220 --> 00:02:19,776
developers, we have to start, of course, with the

31
00:02:19,798 --> 00:02:23,552
code. It all starts with the code, and eventually

32
00:02:23,616 --> 00:02:26,020
the code ends up in production somewhere,

33
00:02:29,080 --> 00:02:33,080
whether it's in an appliance, or on a host, or inside

34
00:02:33,150 --> 00:02:36,836
a container. Could be a mobile phone, it doesn't

35
00:02:36,868 --> 00:02:40,404
really matter. The code is where it all starts.

36
00:02:40,452 --> 00:02:43,080
And if the code is unsafe,

37
00:02:44,060 --> 00:02:47,196
this will propagate all the way down

38
00:02:47,218 --> 00:02:50,540
the line. In order to demonstrate what is happening

39
00:02:50,610 --> 00:02:54,216
down the line, I'm going to use an application which is written by Jerome

40
00:02:54,248 --> 00:02:58,260
Petazo. It's an application called Worker

41
00:02:58,360 --> 00:03:02,492
Py, and it's used to demonstrate some techniques inside Kubernetes

42
00:03:02,556 --> 00:03:06,384
clusters. Its function is not

43
00:03:06,422 --> 00:03:10,324
relevant for today, but the nice thing is,

44
00:03:10,442 --> 00:03:13,940
it has a flaw. Only one,

45
00:03:14,090 --> 00:03:17,380
but it's just enough for demonstration purposes.

46
00:03:18,680 --> 00:03:22,532
We do not care about the application logic. We only

47
00:03:22,586 --> 00:03:26,820
want to make sure that the application does not contain too many cfes.

48
00:03:26,980 --> 00:03:30,410
And the big question is, how can we do this?

49
00:03:31,420 --> 00:03:35,336
We want to make sure to our colleagues that they can safely

50
00:03:35,368 --> 00:03:36,430
use this application.

51
00:03:39,920 --> 00:03:43,068
An industry that is facing similar challenges is the

52
00:03:43,074 --> 00:03:46,808
food industry. The food industry has to prove to you

53
00:03:46,994 --> 00:03:49,840
that food is safe to consume.

54
00:03:50,420 --> 00:03:52,530
Then you could ask yourself the question,

55
00:03:54,260 --> 00:03:57,820
would you consume this? It's an unlabeled

56
00:03:57,900 --> 00:04:01,856
empty jar. It could

57
00:04:01,878 --> 00:04:05,056
be sweet, it could be sour on the inside,

58
00:04:05,238 --> 00:04:08,240
it could be dog food, it could be delicious.

59
00:04:10,180 --> 00:04:13,210
Nobody knows up front it.

60
00:04:14,460 --> 00:04:16,570
Or would you consume this?

61
00:04:18,300 --> 00:04:22,068
Maybe you would, maybe you wouldn't. It depends on allergies.

62
00:04:22,164 --> 00:04:25,820
Or maybe you're a vegetarian and you don't want to consume anything

63
00:04:25,890 --> 00:04:29,420
that contains fish, for instance, or milk.

64
00:04:30,480 --> 00:04:34,952
The food industry has to inform you upfront

65
00:04:35,096 --> 00:04:38,784
about nutritious facts, or they

66
00:04:38,822 --> 00:04:43,280
have to inform you about potential risks if you have an allergy.

67
00:04:45,220 --> 00:04:49,072
And even though you might be very adventurous, some people

68
00:04:49,126 --> 00:04:53,232
would probably open up the unlabeled container and consume

69
00:04:53,296 --> 00:04:57,296
it. There is a risk involved and I'd

70
00:04:57,328 --> 00:05:00,804
like to eliminate the risk as much as possible if it comes down to

71
00:05:00,842 --> 00:05:01,620
software.

72
00:05:03,880 --> 00:05:07,210
So with food, it is nice to know what is inside.

73
00:05:07,740 --> 00:05:11,304
And even if you know what is inside, it doesn't mean you have to

74
00:05:11,422 --> 00:05:15,052
consume it. But in the food industry, they use

75
00:05:15,106 --> 00:05:18,700
food labels to tell you about the contents

76
00:05:20,160 --> 00:05:23,452
and it could look like this. We'll see this picture a bit later.

77
00:05:23,586 --> 00:05:27,128
Again, it tells you all that's

78
00:05:27,144 --> 00:05:30,850
inside, but it doesn't tell you how it tastes. It doesn't tell you

79
00:05:32,100 --> 00:05:34,640
what the recipe is, how it was produced.

80
00:05:35,460 --> 00:05:39,184
It just tells you where it's from. It's from France and

81
00:05:39,222 --> 00:05:41,540
it was sold in Singapore.

82
00:05:44,920 --> 00:05:48,580
Well, we could ask ourselves the question, why do we not

83
00:05:48,650 --> 00:05:52,012
do something similar with whatever we've got? Hardware,

84
00:05:52,096 --> 00:05:55,610
software, SaaS solutions, you name it.

85
00:05:56,060 --> 00:05:59,336
And often it is already done. Many companies

86
00:05:59,438 --> 00:06:03,192
have a CMDP where they

87
00:06:03,246 --> 00:06:06,840
try to manage their assets.

88
00:06:06,920 --> 00:06:11,230
So from a hardware perspective, they often know what they've got,

89
00:06:11,840 --> 00:06:13,870
what the serial numbers are,

90
00:06:15,760 --> 00:06:19,040
what the components are inside, et cetera, et cetera.

91
00:06:20,820 --> 00:06:23,970
If we want to do it for other things,

92
00:06:24,420 --> 00:06:27,200
we might look at other bombs.

93
00:06:27,940 --> 00:06:31,444
Bombs are basically bills of material and

94
00:06:31,482 --> 00:06:33,750
they describe what is inside.

95
00:06:34,840 --> 00:06:38,496
If you want to build a device, you get a bomb,

96
00:06:38,528 --> 00:06:41,750
which is a shopping list, and once you've got all the

97
00:06:42,460 --> 00:06:45,210
components, you can start to assemble it.

98
00:06:46,620 --> 00:06:50,648
Well, if you would follow the URL to GitHub.com,

99
00:06:50,734 --> 00:06:55,320
you'll find some examples from organization called Cyclondx.

100
00:06:56,720 --> 00:07:00,136
They have different examples on file

101
00:07:00,168 --> 00:07:04,156
formats on how you could exchange information

102
00:07:04,338 --> 00:07:08,012
about the bill of materials for hardware, software,

103
00:07:08,076 --> 00:07:11,344
sound solutions, you name it. And during this

104
00:07:11,382 --> 00:07:15,692
talk we'll be focusing on the software bill of materials,

105
00:07:15,756 --> 00:07:17,360
hence the S bomb.

106
00:07:19,140 --> 00:07:21,680
Now why would we use an S bomb?

107
00:07:23,780 --> 00:07:27,924
Basically, we use S bombs to be in control of our software or

108
00:07:27,962 --> 00:07:31,990
to convince others that software is safe to use.

109
00:07:32,780 --> 00:07:36,696
Well, let's look at a few examples and let's see if

110
00:07:36,718 --> 00:07:39,480
we can find other purposes for sbombs,

111
00:07:41,340 --> 00:07:44,924
you might have seen this announcement where

112
00:07:44,962 --> 00:07:49,820
people tell you that there is a flaw in a curl library.

113
00:07:51,200 --> 00:07:54,344
If your application is using the curl

114
00:07:54,392 --> 00:07:57,760
library, you probably

115
00:07:57,830 --> 00:08:01,056
want to be able to easily identify if you

116
00:08:01,238 --> 00:08:03,090
have to fix this or not.

117
00:08:05,780 --> 00:08:10,080
Did you identify whether or not your app was affected and

118
00:08:10,150 --> 00:08:14,164
if so, how did you figure it out? How long did

119
00:08:14,202 --> 00:08:17,748
it take you to figure it out? Was it easy to

120
00:08:17,834 --> 00:08:21,252
figure out? Or were you lucky enough? And could

121
00:08:21,306 --> 00:08:24,936
you simply enter the CVE number into a

122
00:08:24,958 --> 00:08:28,484
database with all bill of materials of the software?

123
00:08:28,532 --> 00:08:33,496
You have to reveal that in

124
00:08:33,518 --> 00:08:37,140
our database there is only one application listed

125
00:08:37,220 --> 00:08:40,440
as vulnerable for this particular CFE.

126
00:08:42,480 --> 00:08:45,772
So once again, here it comes again. A bill

127
00:08:45,826 --> 00:08:49,216
of material tells you what is inside, just like a

128
00:08:49,238 --> 00:08:50,450
food label does.

129
00:08:53,060 --> 00:08:56,864
It only looks different. The most

130
00:08:56,902 --> 00:09:00,160
common formats are JSON and XML,

131
00:09:00,600 --> 00:09:04,628
and if you look at the Sbom snippet in

132
00:09:04,634 --> 00:09:08,980
the presentation, then you see it has a lot of identifiers.

133
00:09:09,800 --> 00:09:13,512
It tells you a bit about the package name, the package type,

134
00:09:13,646 --> 00:09:17,668
the location where it was found. There could be a checksum

135
00:09:17,764 --> 00:09:19,880
involved, et cetera, et cetera.

136
00:09:21,500 --> 00:09:24,956
But just like the food label, it tells you what is

137
00:09:24,978 --> 00:09:27,870
inside and not whether it's harmful or not.

138
00:09:28,880 --> 00:09:32,670
A food label doesn't know about allergies you might have

139
00:09:34,560 --> 00:09:38,140
an Aspom doesn't know much about cfes,

140
00:09:39,540 --> 00:09:43,296
but the trick is to know what you've got and to

141
00:09:43,318 --> 00:09:47,216
compare it to a list of known vulnerabilities that

142
00:09:47,238 --> 00:09:50,550
are presented by different organizations around the world.

143
00:09:51,960 --> 00:09:55,844
And once you know which packages you've got, you can easily match

144
00:09:55,882 --> 00:09:59,316
it against the database of known vulnerabilities. See if there

145
00:09:59,338 --> 00:10:02,936
is a match, and if so, you have to take

146
00:10:02,958 --> 00:10:06,424
appropriate action. That is basically how

147
00:10:06,462 --> 00:10:10,308
every security scanner works internally. They generate asbomb

148
00:10:10,324 --> 00:10:14,288
files and match them against the database.

149
00:10:14,484 --> 00:10:18,456
But there are some advantages to keeping

150
00:10:18,488 --> 00:10:20,780
the asphalt information stored.

151
00:10:24,480 --> 00:10:28,336
One of the reasons why you want to store it separately probably

152
00:10:28,438 --> 00:10:32,304
is that more and more often people present this information on

153
00:10:32,342 --> 00:10:36,400
GitHub or it's a requirement

154
00:10:37,620 --> 00:10:41,670
for purchasing process. For instance, the US government

155
00:10:42,680 --> 00:10:46,544
requires s bomb files prior to purchasing software

156
00:10:46,592 --> 00:10:50,468
nowadays. That allows them to evaluate the quality of

157
00:10:50,474 --> 00:10:53,400
the software without knowing the application logic.

158
00:10:54,300 --> 00:10:57,732
And it will tell them which risks

159
00:10:57,796 --> 00:11:01,624
are involved in installing the software and it

160
00:11:01,662 --> 00:11:05,484
helps them to make a decision to

161
00:11:05,522 --> 00:11:07,150
purchase it or not.

162
00:11:08,560 --> 00:11:12,076
In the example on the screen, you can see a

163
00:11:12,098 --> 00:11:15,640
GitHub repo where somebody is distributing

164
00:11:15,720 --> 00:11:17,260
an s bomb file.

165
00:11:20,420 --> 00:11:23,584
If you want to know the risks involved in installing this

166
00:11:23,622 --> 00:11:27,088
software, you can first download it and then analyze it

167
00:11:27,254 --> 00:11:30,724
instead of the other way around. Downloading it,

168
00:11:30,762 --> 00:11:34,692
installing it and then scanning it is probably not

169
00:11:34,746 --> 00:11:36,470
the best way of doing things.

170
00:11:41,720 --> 00:11:45,304
Once you've got it downloaded, you could upload it in a tool like

171
00:11:45,342 --> 00:11:48,744
this where you've got a GUI that

172
00:11:48,782 --> 00:11:51,992
does a bit of analysis for you. You could also

173
00:11:52,046 --> 00:11:55,656
use command line tools. There are plenty

174
00:11:55,688 --> 00:11:59,310
of choices, and I'm not here to endorse one or the other,

175
00:11:59,680 --> 00:12:03,612
so feel free to do whatever you

176
00:12:03,666 --> 00:12:07,344
think that is best to make this world

177
00:12:07,382 --> 00:12:10,784
a bit safer. But as you can see that

178
00:12:10,902 --> 00:12:14,332
in the example we've got a container images

179
00:12:14,476 --> 00:12:17,984
with 1200 contents, and there

180
00:12:18,022 --> 00:12:21,620
are about 100 vulnerabilities.

181
00:12:23,000 --> 00:12:26,304
Many of them could be fixed. As you can see by the yellow

182
00:12:26,352 --> 00:12:30,180
triangle, the fix is already present. So basically

183
00:12:30,250 --> 00:12:32,020
these components are outdated.

184
00:12:34,220 --> 00:12:37,284
But let's go back to the app I mentioned earlier,

185
00:12:37,412 --> 00:12:41,512
and let's see what the app itself is doing

186
00:12:41,646 --> 00:12:43,770
in regards to security.

187
00:12:45,680 --> 00:12:50,312
And then let's see what happens when we start to containerize

188
00:12:50,376 --> 00:12:53,804
it. Let's bundle it with an image and we might see some

189
00:12:53,842 --> 00:12:56,220
shocking results.

190
00:12:56,980 --> 00:13:00,908
The app by itself is not very sophisticated.

191
00:13:01,004 --> 00:13:04,384
It imports a couple of modules, it has a couple

192
00:13:04,422 --> 00:13:07,980
of loops. No real fancy,

193
00:13:08,140 --> 00:13:12,080
complicated application. We've decided

194
00:13:12,160 --> 00:13:15,316
to distribute this app in a container because that's what

195
00:13:15,338 --> 00:13:18,870
our customer wants, and we have to pick

196
00:13:20,280 --> 00:13:23,930
an image to use as a base.

197
00:13:24,540 --> 00:13:28,600
And the Python latest image is quite popular in this respect.

198
00:13:30,060 --> 00:13:34,200
Almost everything works inside that particular image.

199
00:13:35,100 --> 00:13:38,972
But in order to be on the safe side, we've also tested two

200
00:13:39,026 --> 00:13:43,032
other images. One is the Python Alpine image

201
00:13:43,096 --> 00:13:46,824
based on Alpine, and the 3918 slim

202
00:13:46,872 --> 00:13:49,280
images based on Ubuntu.

203
00:13:52,420 --> 00:13:54,930
Let's see what the differences are.

204
00:13:55,700 --> 00:13:59,388
The build process is always the same. We take a docker

205
00:13:59,404 --> 00:14:02,310
file and the only thing that changes is the front line.

206
00:14:03,240 --> 00:14:06,772
Everything else is similar. And at the end of the build

207
00:14:06,826 --> 00:14:11,076
process we validated that in

208
00:14:11,098 --> 00:14:14,888
all three images, the application is running

209
00:14:14,974 --> 00:14:18,696
fine. So from a consumer perspective or

210
00:14:18,718 --> 00:14:22,264
a user perspective, there is no difference between one or the

211
00:14:22,302 --> 00:14:22,890
other.

212
00:14:26,160 --> 00:14:29,688
The first thing that's interesting to note,

213
00:14:29,784 --> 00:14:33,036
without even going into the cves, is the

214
00:14:33,058 --> 00:14:34,270
difference in size.

215
00:14:37,060 --> 00:14:40,384
The result of a build with the

216
00:14:40,422 --> 00:14:44,380
Alpine based image results

217
00:14:44,460 --> 00:14:48,384
in a container image roughly 110

218
00:14:48,422 --> 00:14:52,550
megabytes in size, which is quite nice.

219
00:14:53,160 --> 00:14:57,556
If you look at the image which is built on

220
00:14:57,578 --> 00:15:01,524
the Python latest image, you'll see that it's more

221
00:15:01,562 --> 00:15:04,890
than ten times as big. It's 1.5 gigs almost.

222
00:15:05,980 --> 00:15:09,064
Well, if you take the difference between the two, then you end

223
00:15:09,102 --> 00:15:12,904
up with more than 1.3 gigs of stuff that

224
00:15:12,942 --> 00:15:16,924
apparently are present in the image, but not required to run the application,

225
00:15:17,122 --> 00:15:20,488
but it might cause all kinds of hassle, as we'll

226
00:15:20,504 --> 00:15:21,870
see later on.

227
00:15:24,080 --> 00:15:27,936
In order to do a bit of an analysis, we've taken a

228
00:15:27,958 --> 00:15:31,920
tool called sift. Sift is used to

229
00:15:31,990 --> 00:15:36,336
create the S bomb file with

230
00:15:36,358 --> 00:15:40,240
all the information about the packages present and required,

231
00:15:41,240 --> 00:15:43,780
and we analyze them with grip.

232
00:15:44,600 --> 00:15:48,464
We don't do this because it's the best tool, but it has the nice output

233
00:15:48,512 --> 00:15:52,392
for this presentation. All the numbers

234
00:15:52,446 --> 00:15:56,200
shown are valid at the time of writing of this presentation,

235
00:15:56,540 --> 00:16:00,148
quite likely. Since then, new cfes have been discovered

236
00:16:00,244 --> 00:16:04,168
and the results probably will be worse over time.

237
00:16:04,334 --> 00:16:08,216
And that's one of the reasons why you might want to keep an SBOM file

238
00:16:08,408 --> 00:16:12,204
at hand, so you can reevaluate it over time and

239
00:16:12,242 --> 00:16:14,110
see if you need to fix your code,

240
00:16:16,400 --> 00:16:19,250
starting with the Python application itself.

241
00:16:20,740 --> 00:16:24,928
Well, we're in pretty good shape. There is one medium CVE found

242
00:16:25,014 --> 00:16:26,530
nothing to worry about.

243
00:16:28,180 --> 00:16:31,936
As an Ops engineer, I'd be more than happy to deploy

244
00:16:31,968 --> 00:16:36,448
this that does not apply to the image

245
00:16:36,624 --> 00:16:40,980
which is built using the Python latest image.

246
00:16:41,800 --> 00:16:45,496
As you can see, we get a bonus of

247
00:16:45,518 --> 00:16:49,000
1699 vulnerabilities

248
00:16:49,420 --> 00:16:53,290
simply by storing it in this particular

249
00:16:54,220 --> 00:16:57,532
image. Even worse is that

250
00:16:57,666 --> 00:17:01,420
a lot of them are criticals and high cves,

251
00:17:02,400 --> 00:17:05,020
which could have a big impact.

252
00:17:06,560 --> 00:17:09,664
Yes, I do realize that it's a containerized application.

253
00:17:09,782 --> 00:17:12,976
It's running isolated, but if you're able

254
00:17:12,998 --> 00:17:16,752
to compromise the application inside the container, you do

255
00:17:16,806 --> 00:17:20,196
have a lot of tools at your disposal, and the

256
00:17:20,218 --> 00:17:24,164
likelihood of getting into the container is quite big

257
00:17:24,202 --> 00:17:27,936
as well, because there are enough vulnerabilities

258
00:17:28,048 --> 00:17:29,220
to abuse.

259
00:17:32,760 --> 00:17:36,756
We could make this a bit safer application, but by simply changing

260
00:17:36,788 --> 00:17:40,650
the base image, we don't have to rewrite any code or whatever.

261
00:17:41,020 --> 00:17:44,848
But by buying the Python 3918

262
00:17:44,964 --> 00:17:49,820
slim image, suddenly we only have 101

263
00:17:49,890 --> 00:17:52,460
vulnerable matches,

264
00:17:53,440 --> 00:17:58,076
which is compared to six to 1700, quite a reduction.

265
00:17:58,268 --> 00:18:00,930
The difference is huge, but we can do better.

266
00:18:01,860 --> 00:18:05,408
If you look at the alpine based

267
00:18:05,494 --> 00:18:10,020
image, then you see that we have only

268
00:18:10,090 --> 00:18:12,420
one high 18 medium,

269
00:18:13,560 --> 00:18:17,140
no criticals or whatsoever,

270
00:18:19,320 --> 00:18:22,180
which means that we are in a pretty good shape.

271
00:18:22,680 --> 00:18:26,792
But we could be even be in a better ishare because the image itself already

272
00:18:26,846 --> 00:18:30,516
is a bit outdated as well. And inside the image

273
00:18:30,548 --> 00:18:33,880
there is already a fix for nine known vulnerabilities.

274
00:18:35,200 --> 00:18:38,590
So if we put this in a table, well,

275
00:18:39,520 --> 00:18:43,624
I think it speaks for itself. You probably can guess which image I prefer

276
00:18:43,672 --> 00:18:47,100
to deploy as an engineer.

277
00:18:49,140 --> 00:18:50,610
Well, like I said,

278
00:18:52,900 --> 00:18:57,280
I always like to keep the SBOM files at hand somewhere.

279
00:18:57,620 --> 00:19:01,172
It allows me to do evaluation over

280
00:19:01,226 --> 00:19:04,500
time, but being a bit lazy,

281
00:19:04,920 --> 00:19:08,516
I leave it up to tools to do it for me.

282
00:19:08,698 --> 00:19:12,890
And one of the tools that's very neat is dependency track.

283
00:19:13,340 --> 00:19:16,600
Basically it is a database in which you can upload

284
00:19:17,660 --> 00:19:21,140
the SBOM files, and dependency

285
00:19:21,220 --> 00:19:24,760
track will do periodic analysis

286
00:19:26,240 --> 00:19:30,520
every 24 hours or so. It will download the newest CVE

287
00:19:30,600 --> 00:19:34,492
databases from different sources and match it

288
00:19:34,546 --> 00:19:37,964
against the SBOM files that are stored inside the database

289
00:19:38,012 --> 00:19:41,552
to see if there are any matches. And if new

290
00:19:41,606 --> 00:19:45,616
cves are discovered, it will create

291
00:19:45,718 --> 00:19:49,892
tickets for you or send you notifications or

292
00:19:49,946 --> 00:19:53,972
whatever, basically helping you to be

293
00:19:54,026 --> 00:19:57,156
on top of the quality of your software with

294
00:19:57,178 --> 00:20:00,276
regards to safety. You could

295
00:20:00,298 --> 00:20:04,072
even consider buying tools like renovate to automatically fix

296
00:20:04,206 --> 00:20:07,668
these vulnerabilities to make sure you're

297
00:20:07,684 --> 00:20:11,140
always in a good ishare. But as you can imagine

298
00:20:11,220 --> 00:20:15,630
that over time you might want to upgrade to different

299
00:20:16,000 --> 00:20:19,804
base images. Alpine will

300
00:20:19,842 --> 00:20:23,468
have a successor every now and then, and then only

301
00:20:23,554 --> 00:20:26,796
by keeping your images up

302
00:20:26,818 --> 00:20:30,304
to date, you keep the application itself safe as

303
00:20:30,342 --> 00:20:33,548
well. Another advantage of having the S bomb

304
00:20:33,564 --> 00:20:37,004
files at hand is that you can convince

305
00:20:37,132 --> 00:20:41,788
customers that your software is safe

306
00:20:41,964 --> 00:20:46,288
from a CFE perspective. A CFE

307
00:20:46,384 --> 00:20:50,640
does not prove that you don't have malicious code somewhere.

308
00:20:50,800 --> 00:20:54,328
It only tells you that the malicious code is executed in a

309
00:20:54,414 --> 00:20:58,084
safe manner. More and more you'll see that tools

310
00:20:58,132 --> 00:21:02,216
like Docker build and others also include the ability to create

311
00:21:02,398 --> 00:21:06,136
these Sbombs and store them in container

312
00:21:06,168 --> 00:21:10,316
registries, which allows users to pull

313
00:21:10,418 --> 00:21:15,020
the S bomb prior to pulling the container image again

314
00:21:15,090 --> 00:21:19,596
in an attempt to be preventive in

315
00:21:19,618 --> 00:21:23,120
the sense that you want to analyze the S bomb first before

316
00:21:23,190 --> 00:21:27,088
you allow your system to deploy it.

317
00:21:27,254 --> 00:21:31,408
And this is quite common and nowadays in Kubernetes clusters

318
00:21:31,504 --> 00:21:35,008
that you analyze the container prior

319
00:21:35,104 --> 00:21:38,896
to deploying it, because once it's deploying

320
00:21:39,008 --> 00:21:42,632
you're often too late. I hope

321
00:21:42,766 --> 00:21:46,692
that I've given you some good reasons to start working with SBOM

322
00:21:46,756 --> 00:21:49,928
files. It's pretty easy to do,

323
00:21:50,094 --> 00:21:54,040
it's easy to integrate in pipelines.

324
00:21:54,960 --> 00:21:59,356
It is a great way to show to your customers that

325
00:21:59,378 --> 00:22:03,420
you're on top of things, that you're updating your software on a regular basis.

326
00:22:05,520 --> 00:22:09,472
But if you enter this world, keep in mind that

327
00:22:09,526 --> 00:22:11,280
there are many scanners,

328
00:22:12,580 --> 00:22:16,464
but there are not all good. Some are

329
00:22:16,502 --> 00:22:20,180
great at only scanning Java packages. Other really focus

330
00:22:20,250 --> 00:22:23,220
on analyzing Python applications.

331
00:22:24,760 --> 00:22:28,356
They'll evaluate the requirements of the. TxT files as

332
00:22:28,378 --> 00:22:30,420
well and take it into consideration.

333
00:22:32,860 --> 00:22:36,692
Other tools are great at doing analysis

334
00:22:36,756 --> 00:22:40,424
of the base OS packages, for instance like

335
00:22:40,462 --> 00:22:44,264
the Debian or the RPM packages, and some try

336
00:22:44,302 --> 00:22:48,588
to do it all. So a bit of benchmarking here

337
00:22:48,754 --> 00:22:52,220
helps to determine what is good for your environment.

338
00:22:54,240 --> 00:22:58,076
In order to make it easy to start, I've got

339
00:22:58,098 --> 00:23:01,904
a couple of risks that I find interesting that I'd like to

340
00:23:01,942 --> 00:23:05,584
share with you. If you visit this application

341
00:23:05,782 --> 00:23:08,944
online, this presentation, then you have the ability to

342
00:23:08,982 --> 00:23:12,804
click on them as well. If you're only

343
00:23:12,842 --> 00:23:15,748
looking at this one, I'm sorry, then you have to type them. But as you

344
00:23:15,754 --> 00:23:19,712
can see, there are many tools listed here to generate

345
00:23:19,776 --> 00:23:23,284
s bombs. Microsoft has some tools.

346
00:23:23,412 --> 00:23:26,936
There are some tools that run inside kubernetes. There are some

347
00:23:26,958 --> 00:23:29,290
tools that you can use from the command line.

348
00:23:32,460 --> 00:23:36,920
There are tools that you can use to store sbombs.

349
00:23:38,620 --> 00:23:41,808
Sbomb OCi means storing an SBOM

350
00:23:41,844 --> 00:23:46,030
file in an OCI container registry which allows you to

351
00:23:46,980 --> 00:23:50,450
evaluate images before you download them.

352
00:23:51,300 --> 00:23:54,912
Dependency track is a nice tool that

353
00:23:54,966 --> 00:23:58,464
fits in the middle of the supply chain that

354
00:23:58,502 --> 00:24:02,168
also analyzes

355
00:24:02,284 --> 00:24:04,180
them on a regular basis.

356
00:24:09,720 --> 00:24:12,580
Trify is well known nowadays.

357
00:24:14,620 --> 00:24:18,040
Trivia is often used in a pipeline because it can do all in one.

358
00:24:18,110 --> 00:24:21,924
It can generate the SBom file for you and do an analysis

359
00:24:21,972 --> 00:24:25,228
of vulnerabilities which allows you to break a

360
00:24:25,234 --> 00:24:29,500
pipeline. If a critical CVE is discovered,

361
00:24:30,240 --> 00:24:33,740
it prevents you from releasing bad software.

362
00:24:34,240 --> 00:24:37,648
Cube clarity is a nice illustration of software that you

363
00:24:37,654 --> 00:24:39,840
can run inside the Kubernetes cluster.

364
00:24:40,980 --> 00:24:44,050
It does basically the same and it will tell you which

365
00:24:44,660 --> 00:24:48,224
container images have to be replaced due to

366
00:24:48,342 --> 00:24:51,536
CVE issues and

367
00:24:51,558 --> 00:24:54,736
that's about it. I hope this

368
00:24:54,758 --> 00:24:57,010
is enough for you to get started.

369
00:24:58,180 --> 00:25:01,010
Like I said earlier, it's not complex at all,

370
00:25:01,620 --> 00:25:05,464
but it's adding great value to all of us in the

371
00:25:05,502 --> 00:25:08,820
industry. So thanks for your attention and good luck.

