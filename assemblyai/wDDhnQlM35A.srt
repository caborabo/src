1
00:00:20,760 --> 00:00:24,854
Hi everyone and welcome to my session. It is called large language

2
00:00:25,014 --> 00:00:28,354
models for better developer learning of your product.

3
00:00:28,944 --> 00:00:32,656
My name is Babur. I'm a Devop advocate at company

4
00:00:32,720 --> 00:00:36,536
called Atacama. Also I am ex Microsoft.

5
00:00:36,680 --> 00:00:39,768
I have been working in Devrel over five

6
00:00:39,896 --> 00:00:43,040
years. I'm also active

7
00:00:43,112 --> 00:00:46,296
open source contributor to Apache Software foundation.

8
00:00:46,480 --> 00:00:50,376
If you would like to have a chat or connect me on LinkedIn

9
00:00:50,480 --> 00:00:54,296
Skord and make a connection, I would be

10
00:00:54,320 --> 00:00:57,636
more than happy to have an online session

11
00:00:57,700 --> 00:01:00,948
to answer your question and address about Devrel and

12
00:01:00,996 --> 00:01:05,364
AI in Devrel how we are leveraging AI in Devrel and

13
00:01:05,444 --> 00:01:09,644
I have been also speaking in many events

14
00:01:09,724 --> 00:01:13,332
last year and this year in 2024 last year

15
00:01:13,348 --> 00:01:17,380
I've been delivered sort of different in person and

16
00:01:17,412 --> 00:01:20,544
online sessions at various conferences.

17
00:01:20,924 --> 00:01:25,064
You can see the pictures depicted from some previous

18
00:01:25,574 --> 00:01:29,434
sessions. So today's agenda is about

19
00:01:30,654 --> 00:01:34,742
how as we know that developers we

20
00:01:34,758 --> 00:01:37,234
are highly interested in AI technologies.

21
00:01:37,934 --> 00:01:41,718
I assume that more than 60% of the developers globally

22
00:01:41,846 --> 00:01:45,702
already working on or learning about AI

23
00:01:45,758 --> 00:01:49,874
and generative AI. In this session we'll discuss how the developer relations

24
00:01:50,294 --> 00:01:54,518
meets generative AI this year and how these

25
00:01:54,566 --> 00:01:58,350
changes AI changes effecting on

26
00:01:58,462 --> 00:02:02,318
dev rail some of the concentration you need to take

27
00:02:02,366 --> 00:02:05,734
into consideration when you are integrating AI tools

28
00:02:05,774 --> 00:02:09,478
into your Devrel strategy. I will also walk you through these

29
00:02:09,606 --> 00:02:13,574
tools and we will try to address the main question is the AI

30
00:02:13,654 --> 00:02:17,110
wave currently going on is a threat

31
00:02:17,222 --> 00:02:20,752
or an opportunity for Devrel teams nowadays

32
00:02:20,808 --> 00:02:24,552
growing so the bunch of records such as legal papers,

33
00:02:24,608 --> 00:02:27,720
academic studies, news, technical guides and books

34
00:02:27,752 --> 00:02:31,464
can be automated using AI. Large language models

35
00:02:31,544 --> 00:02:35,856
can be applied, as we can see, to various use cases and industries.

36
00:02:36,000 --> 00:02:40,168
For example, OpenAI is GPT four, a powerful LLM

37
00:02:40,336 --> 00:02:44,504
used for a wide range of NLP tasks and chart GPTO.

38
00:02:44,584 --> 00:02:48,252
We know that set record the fastest growing user base in

39
00:02:48,268 --> 00:02:51,740
January 2023 prove that large language

40
00:02:51,812 --> 00:02:55,764
models are here to stay with us longer. As I am also a

41
00:02:55,804 --> 00:02:59,484
developer and I have been working with Python

42
00:02:59,644 --> 00:03:04,084
a long time, I decided also to build my own applications

43
00:03:04,244 --> 00:03:07,988
using new AI technologies. What about quickly

44
00:03:08,036 --> 00:03:11,380
summarizing your content? Get the information you need

45
00:03:11,412 --> 00:03:15,084
in real time from private large unstructured documents

46
00:03:15,124 --> 00:03:18,940
in your Dropbox. For example, the same tool can be used with

47
00:03:18,972 --> 00:03:22,588
OneDrive or Google Drive. I decided to make my job

48
00:03:22,636 --> 00:03:26,268
easier when I'm creating invoices or summarizing my

49
00:03:26,316 --> 00:03:29,804
content using my own private tool that

50
00:03:29,844 --> 00:03:33,068
connects a Dropbox and analyze my documents.

51
00:03:33,236 --> 00:03:37,228
Or next. This is another app to

52
00:03:37,316 --> 00:03:41,462
find real time discounts sales prices

53
00:03:41,518 --> 00:03:45,814
from various online markets around the world. I connected to

54
00:03:45,934 --> 00:03:49,758
real time Amazon APIs to fetch some discounts,

55
00:03:49,806 --> 00:03:53,550
deals, coupons, information and then it makes me easier

56
00:03:53,622 --> 00:03:57,094
to find out these discounts I am interested in.

57
00:03:57,214 --> 00:04:01,142
And you can also advance this feature by adding some alerts.

58
00:04:01,198 --> 00:04:05,366
When there is some discounts you can get some discount information from

59
00:04:05,390 --> 00:04:09,098
the AI application. With another application you can think

60
00:04:09,146 --> 00:04:13,098
about LLM app that provides real time alerts for

61
00:04:13,146 --> 00:04:16,890
significant document change or updates. Let's say you are

62
00:04:16,922 --> 00:04:20,530
working with marketing campaigns and this system can monitor various

63
00:04:20,602 --> 00:04:24,490
aspects such as content chains, campaign performance metrics,

64
00:04:24,642 --> 00:04:28,818
or the audience engagement. Real time alerts enables marketing

65
00:04:28,866 --> 00:04:32,250
teams to respond quickly to changes to make sure

66
00:04:32,282 --> 00:04:36,276
that these campaigns remain on track. Or the last one

67
00:04:36,420 --> 00:04:40,900
I would like to demo one of the applications is effortlessly

68
00:04:40,972 --> 00:04:44,676
extracting and organizing unstructured data from PDF's,

69
00:04:44,740 --> 00:04:48,156
Docs or other unsustainable information

70
00:04:48,300 --> 00:04:51,948
more into SQL tables in real time. This example,

71
00:04:52,036 --> 00:04:55,724
as you can see, extracts data from unstructured files and

72
00:04:55,764 --> 00:04:59,356
stores into PostgreSQL table. Also it

73
00:04:59,380 --> 00:05:03,756
transforms a user query into SQL query which is then executed

74
00:05:03,820 --> 00:05:07,180
on postgreSQL tables. So here as you can

75
00:05:07,212 --> 00:05:10,724
see, we are progressing quite fast based on

76
00:05:10,764 --> 00:05:14,500
the four applications I was able to build and it takes

77
00:05:14,532 --> 00:05:18,572
me for each building application like one or 2 hours and it's

78
00:05:18,668 --> 00:05:21,924
already ready to use. Let me know

79
00:05:21,964 --> 00:05:25,500
in the comments if you find this application useful, I will

80
00:05:25,532 --> 00:05:29,224
be more than happy to provide the source code for them and then you can

81
00:05:29,264 --> 00:05:33,400
also give a try yourself. So let's switch our attention back

82
00:05:33,432 --> 00:05:37,152
to the developer relations as we call Schwarz

83
00:05:37,208 --> 00:05:40,736
dev rail. Right, developer relations, exactly what

84
00:05:40,760 --> 00:05:44,000
it means as a marketing policy that

85
00:05:44,152 --> 00:05:47,564
plutoizes some relationship with developers.

86
00:05:47,864 --> 00:05:51,684
And for those who doesn't know in depth, what is a dev?

87
00:05:52,104 --> 00:05:56,010
What are the Devor publicists do? For example, Devrel can act

88
00:05:56,042 --> 00:05:59,178
as a bridge between your company and its

89
00:05:59,226 --> 00:06:02,610
technical audience. Our primary goal is to build a

90
00:06:02,642 --> 00:06:06,178
strong, engaged community around the product or

91
00:06:06,226 --> 00:06:09,362
any developer technology. We provide education,

92
00:06:09,538 --> 00:06:13,362
support and we try to foster the engagement and

93
00:06:13,378 --> 00:06:17,434
we try to simplify the developers learning, experience and challenges they

94
00:06:17,474 --> 00:06:21,106
face. And some people ask like when exactly Devil

95
00:06:21,170 --> 00:06:24,504
can be helpful for the company? Let's assume that

96
00:06:24,584 --> 00:06:27,416
if you're building a developer oriented product,

97
00:06:27,600 --> 00:06:30,960
that's where Devwell can help. Assume that marketing

98
00:06:30,992 --> 00:06:34,472
team cannot reach the right audience when they are demanding

99
00:06:34,528 --> 00:06:38,080
highly technical content and they actively

100
00:06:38,192 --> 00:06:42,360
avoid the usual sales and marketing channels. Because the

101
00:06:42,392 --> 00:06:46,040
rails or the robot is a technical person, they are

102
00:06:46,192 --> 00:06:50,160
more like expertise in providing some examples

103
00:06:50,232 --> 00:06:54,196
and sending messages for your audience. Or another thing is

104
00:06:54,300 --> 00:06:58,116
maybe product managers are struggling to understand the new industry

105
00:06:58,220 --> 00:07:01,596
trends or without being expert in this domain.

106
00:07:01,740 --> 00:07:05,340
Or sometimes engineering teams are super busy in building

107
00:07:05,412 --> 00:07:09,300
a product and maybe they might not have a time or

108
00:07:09,372 --> 00:07:13,444
skills set to do everything that Devrel does. So. And from

109
00:07:13,484 --> 00:07:17,036
that perspective, our devrel divides into four

110
00:07:17,100 --> 00:07:20,654
pillars. Mainly like we do developer

111
00:07:20,694 --> 00:07:24,118
marketing. We try to understand who we are targeting,

112
00:07:24,166 --> 00:07:27,846
what kind of developers for a product, and we make sure that they

113
00:07:27,870 --> 00:07:31,174
have information and tools to make the decision.

114
00:07:31,334 --> 00:07:34,766
Also developer enablement, developer advocacy

115
00:07:34,830 --> 00:07:39,510
and the community. Also our part of responsibility and

116
00:07:39,622 --> 00:07:42,990
as you can see developer relations after it

117
00:07:43,022 --> 00:07:46,530
introduced, it enabled also marketing

118
00:07:46,722 --> 00:07:50,586
community and other things. For example, we are

119
00:07:50,610 --> 00:07:54,250
creating and maintaining always the process

120
00:07:54,442 --> 00:07:58,050
where our developers can have a common goal relations.

121
00:07:58,202 --> 00:08:02,154
Developer relations enable developer education and

122
00:08:02,194 --> 00:08:06,202
foster developer experience and support and developer success.

123
00:08:06,378 --> 00:08:10,234
As you can see for the developer education, we create sometimes

124
00:08:10,274 --> 00:08:13,644
documentation, tutorials, video, videos and guides

125
00:08:14,184 --> 00:08:18,336
for developer experience. We improve always API design and

126
00:08:18,400 --> 00:08:22,064
SDK experience. Also we probably get

127
00:08:22,104 --> 00:08:25,728
some feedback always while they are using our

128
00:08:25,776 --> 00:08:30,224
SDKs. And we also support the developer success once

129
00:08:30,264 --> 00:08:33,664
we know what the dev rail is. And now let's bring

130
00:08:33,704 --> 00:08:37,692
your attention and how AI changes developer relations nowadays,

131
00:08:37,848 --> 00:08:41,508
AI I think will be the accelerator of pre existing

132
00:08:41,556 --> 00:08:45,504
developer relations trends. For example, AI assistant

133
00:08:46,444 --> 00:08:49,584
documentation for production use cases.

134
00:08:49,884 --> 00:08:53,184
For example, AI can act as a copilot

135
00:08:54,764 --> 00:08:59,144
for us, taking our routine and boilerplate tasks.

136
00:08:59,604 --> 00:09:03,584
In this context, AI can help speed up the documentation process

137
00:09:04,294 --> 00:09:07,702
by inspecting our APIs and the code.

138
00:09:07,798 --> 00:09:12,086
Also, it's helping us nowadays creating code samples

139
00:09:12,270 --> 00:09:15,926
and also supporting in real time some developer requests.

140
00:09:16,030 --> 00:09:20,054
You don't have to answer yourself. An AI chatbot can answer

141
00:09:20,174 --> 00:09:23,390
these questions. It's also in the support context.

142
00:09:23,542 --> 00:09:27,078
For example, a well implemented bot always

143
00:09:27,166 --> 00:09:30,906
can handle simple support requests. Or or if you have

144
00:09:30,930 --> 00:09:35,722
an AI chatbot developers, instead of going through the enormous documents

145
00:09:35,898 --> 00:09:39,866
docs files, they can also search

146
00:09:39,930 --> 00:09:45,362
in the search bar specific information I

147
00:09:45,378 --> 00:09:48,938
have started using chat GPT for example, generate short

148
00:09:48,986 --> 00:09:52,674
descriptions of new articles, new variation of titles from

149
00:09:52,714 --> 00:09:56,220
my blog post, even some article outlines why I

150
00:09:56,252 --> 00:09:59,548
still have to guide and fact check the AI machine

151
00:09:59,596 --> 00:10:03,684
because it is saving at least a few hours of my work. But at least

152
00:10:03,764 --> 00:10:07,660
I am one who is fixing and advancing

153
00:10:07,692 --> 00:10:12,012
the AI solutions. Imagine being able to summarize community posts,

154
00:10:12,108 --> 00:10:15,652
discord channels or slack channels. I can almost guarantee

155
00:10:15,708 --> 00:10:19,292
we will begin seeing soon like community copilots that

156
00:10:19,308 --> 00:10:23,094
can help to coordinate between different channels and outlets.

157
00:10:23,994 --> 00:10:27,562
However, as you can see, generative AI is creative,

158
00:10:27,618 --> 00:10:31,154
but not as creative as we are humans. It also doesn't

159
00:10:31,194 --> 00:10:34,866
do well with personal experience or realistic examples,

160
00:10:35,010 --> 00:10:39,218
especially initiate topics like ours data processing pipelines

161
00:10:39,266 --> 00:10:42,610
in Python. While you can try to push to do so. It doesn't

162
00:10:42,642 --> 00:10:46,410
always understand real life struggles with replicating

163
00:10:46,482 --> 00:10:49,900
human experiences and it doesn't do well with extending

164
00:10:49,972 --> 00:10:54,060
piece of context. It always struggling to go deeper topics

165
00:10:54,132 --> 00:10:57,684
so you will often find repeating the same level

166
00:10:57,724 --> 00:11:01,704
of definition of your topic while you are asking questions.

167
00:11:02,564 --> 00:11:06,220
Here's a table of things how the AI is helping me

168
00:11:06,292 --> 00:11:09,500
nowadays. Let's say for example last week I pushed

169
00:11:09,532 --> 00:11:13,244
the sample report to GitHub showing how to build real time data processing

170
00:11:13,284 --> 00:11:16,876
pipelines in Python. This also involved with some of the number

171
00:11:16,940 --> 00:11:19,996
one use cases just

172
00:11:20,060 --> 00:11:23,540
above since I was using chartGpt while

173
00:11:23,612 --> 00:11:27,596
writing the code because the simple scenarios nowadays GPT

174
00:11:27,660 --> 00:11:31,428
can create somewhat close

175
00:11:31,476 --> 00:11:35,276
to reality. The most powerful

176
00:11:35,380 --> 00:11:39,108
thing I think the AI you can feel feed

177
00:11:39,156 --> 00:11:42,396
some context documentation information to

178
00:11:42,420 --> 00:11:45,944
your AI and provide some searching functionality,

179
00:11:46,404 --> 00:11:50,180
let's say on your doc page. This is like

180
00:11:50,332 --> 00:11:53,820
how we can approach in Devrel to help the developers

181
00:11:53,852 --> 00:11:56,264
to find easily the information.

182
00:11:56,684 --> 00:12:01,028
We already seen some work being done with support bots

183
00:12:01,116 --> 00:12:05,174
or askdocs functionality for our device

184
00:12:05,284 --> 00:12:09,386
documentation or the API descriptions. Let's have

185
00:12:09,410 --> 00:12:13,106
a look at building AI chatbot that can help the people

186
00:12:13,210 --> 00:12:17,418
understand your developer documentation more easily and answers

187
00:12:17,466 --> 00:12:20,914
user questions. They can find answers quickly without

188
00:12:20,994 --> 00:12:24,854
needing human intervention, right? Which might be

189
00:12:25,914 --> 00:12:29,658
speeding up the workflows and improves

190
00:12:29,706 --> 00:12:33,286
overall developer satisfaction with the

191
00:12:33,310 --> 00:12:37,238
pathway team. What we did, we integrated this ask me

192
00:12:37,326 --> 00:12:41,354
bot into discord server where our pathway community

193
00:12:41,894 --> 00:12:45,474
they are. You can ask questions

194
00:12:46,614 --> 00:12:49,854
about your specific information to find

195
00:12:49,894 --> 00:12:53,286
out easily the documentation details or code

196
00:12:53,310 --> 00:12:56,598
samples. This definitely allows developers

197
00:12:56,646 --> 00:13:00,574
to specific question from a prompt. It saves time

198
00:13:00,654 --> 00:13:04,926
from parsing the pages of the documentation or contacting

199
00:13:04,990 --> 00:13:08,678
developer relations represented directly from the

200
00:13:08,766 --> 00:13:12,950
codewise of simple if you navigate our repository

201
00:13:13,102 --> 00:13:16,862
open source repository pathway, you can find many examples.

202
00:13:17,038 --> 00:13:20,422
As I demonstrated at the beginning, one of the examples

203
00:13:20,478 --> 00:13:25,368
also looks quite simple, how to connect the

204
00:13:25,416 --> 00:13:29,056
AI chatbot to our documentation. It's very easy.

205
00:13:29,120 --> 00:13:33,724
As you can see we are just connecting to docs

206
00:13:34,064 --> 00:13:37,776
data by using built in connectors and we have some

207
00:13:37,840 --> 00:13:41,624
libraries to make it easy to calculate vector

208
00:13:41,664 --> 00:13:45,840
embeddings by chunking the big amount of data into chunks

209
00:13:45,992 --> 00:13:49,816
and feed this data into to the discord servers in

210
00:13:49,840 --> 00:13:53,352
real time. And let's say it's called

211
00:13:53,408 --> 00:13:57,072
also differently rug approach retrieval argument that the

212
00:13:57,088 --> 00:14:00,680
approach as you can see in the diagram, it highlights the common

213
00:14:00,712 --> 00:14:04,648
architecture for it. While you are ingesting some

214
00:14:04,696 --> 00:14:08,040
data from APIs or files databases,

215
00:14:08,232 --> 00:14:13,408
what you do, you just build a data pipeline that processes

216
00:14:13,456 --> 00:14:17,416
data, transforms it and calculate some embeddings.

217
00:14:17,600 --> 00:14:21,680
As we know vector embeddings and also

218
00:14:21,832 --> 00:14:25,352
after calculating vector embedding, it stores for fast

219
00:14:25,408 --> 00:14:29,184
retrieval to the vector storage like a vector database. And then

220
00:14:29,264 --> 00:14:33,008
you can start to build your application on

221
00:14:33,016 --> 00:14:36,764
the top of it. That provides some search bar

222
00:14:37,064 --> 00:14:40,884
with the backend service that accepts user queries

223
00:14:41,024 --> 00:14:44,580
with questions. And then it does again like from the

224
00:14:44,612 --> 00:14:48,876
query calculates vector embeddings and from the vector embeddings

225
00:14:48,980 --> 00:14:52,324
it finds relative clause vectors

226
00:14:52,404 --> 00:14:56,300
we stored in the previous step in vector databases. That's how

227
00:14:56,332 --> 00:14:59,900
the common rag approach works. But if you are trying to

228
00:14:59,932 --> 00:15:04,144
build your application or feed the context,

229
00:15:05,084 --> 00:15:08,594
custom context to AI application, not easy enough, you need to

230
00:15:08,634 --> 00:15:11,554
know nowadays a lot of technologies and frameworks,

231
00:15:11,634 --> 00:15:15,122
sometimes it's, well, confusing. And here we

232
00:15:15,138 --> 00:15:19,050
can see a lot of technologies nowadays building around

233
00:15:19,242 --> 00:15:22,074
AI applications such as frameworks,

234
00:15:22,194 --> 00:15:26,186
APIs, foil and so on. And while

235
00:15:26,370 --> 00:15:29,834
with a team of pathway when

236
00:15:29,914 --> 00:15:33,710
I was working in the past, we tried to build our own

237
00:15:33,782 --> 00:15:37,438
also the framework to help the developers to reduce

238
00:15:37,486 --> 00:15:41,406
this job. I mean you don't have to know all the technologies and tools to

239
00:15:41,430 --> 00:15:45,646
build applications. Our LNM app provided

240
00:15:45,670 --> 00:15:49,534
by Pathway, it's fully open source where you can replace

241
00:15:49,614 --> 00:15:53,554
all these technologies and knowledge by using a single application.

242
00:15:55,494 --> 00:15:59,290
Some of the simple application we introduced our

243
00:15:59,422 --> 00:16:03,254
develop experiences by using the pathway open source technology.

244
00:16:04,234 --> 00:16:08,394
For example, it means we you can also reduce

245
00:16:08,514 --> 00:16:12,410
go to market time. It's a lower cost because

246
00:16:12,442 --> 00:16:16,014
open source is for free and it says highly security

247
00:16:17,034 --> 00:16:20,666
like a context where you can also run it on

248
00:16:20,690 --> 00:16:24,210
the top of your custom llms without using public

249
00:16:24,362 --> 00:16:28,030
LLM provider. And of course it's using also under the

250
00:16:28,062 --> 00:16:31,154
hood pathway technology where you can connect to

251
00:16:31,454 --> 00:16:34,870
any real time data sources.

252
00:16:35,062 --> 00:16:39,198
Nowadays as open source, we are supporting open

253
00:16:39,326 --> 00:16:42,518
following sources like it can structure

254
00:16:42,566 --> 00:16:45,942
data, structured semi structured live data. You can

255
00:16:45,998 --> 00:16:49,638
ingest data from your Docs page, you can ingest

256
00:16:49,686 --> 00:16:53,730
your data from PowerPoint, any PDF's or slack channels.

257
00:16:53,882 --> 00:16:56,986
To analyze your developer experience better, here's a list

258
00:16:57,010 --> 00:17:01,130
of key features LLM application offers.

259
00:17:01,282 --> 00:17:05,842
For example, it can index real time documents

260
00:17:06,018 --> 00:17:09,434
without using any vector storage or vector

261
00:17:09,474 --> 00:17:13,898
databases in real time. It means it also reduces infrastructure

262
00:17:13,946 --> 00:17:17,814
overhead. From the architectural perspective,

263
00:17:18,314 --> 00:17:22,450
it simplifies much nowadays. Use the emerging

264
00:17:22,482 --> 00:17:25,494
technologies with lnms. As you can see,

265
00:17:26,754 --> 00:17:30,810
simple architecture we are demonstrating everything is managed

266
00:17:30,842 --> 00:17:34,498
by the single framework where you don't have to

267
00:17:34,546 --> 00:17:38,106
know how these things internally works with a shorter lines

268
00:17:38,130 --> 00:17:41,730
of code. You are already building some developer

269
00:17:41,762 --> 00:17:45,822
experiences for this discord server. For example, you can connect to

270
00:17:45,998 --> 00:17:49,950
your internal local files or external maybe

271
00:17:50,022 --> 00:17:54,158
GitHub markdown files to ingest the data and we can

272
00:17:54,246 --> 00:17:57,878
connect to multiple providers

273
00:17:57,926 --> 00:18:01,594
LLM providers publicly available like OpenAI,

274
00:18:02,294 --> 00:18:06,318
somewhere from Facebook or Google. So other

275
00:18:06,406 --> 00:18:09,890
stuff is fully managed like vector indexing,

276
00:18:10,042 --> 00:18:13,690
chunking the information and feeding this data into

277
00:18:13,842 --> 00:18:18,466
the discord servers. There are still some challenges to

278
00:18:18,610 --> 00:18:21,930
make these LLM applications or AI

279
00:18:21,962 --> 00:18:25,370
chat post to the production level. It's easy to

280
00:18:25,442 --> 00:18:30,054
provide some examples. We are still testing our skill server applications.

281
00:18:30,474 --> 00:18:34,326
The issues we have seen like besides

282
00:18:34,490 --> 00:18:38,254
of natural languages. Sometimes we are facing hallucinations

283
00:18:38,374 --> 00:18:41,634
and there are also constant latency. For example,

284
00:18:42,214 --> 00:18:45,838
you never know when you can get answer from

285
00:18:45,966 --> 00:18:50,046
OpenAI because they don't have SLA's. There's no average time

286
00:18:50,230 --> 00:18:53,646
responding right. You can expect the real

287
00:18:53,750 --> 00:18:56,870
response from the AI OpenAI on time.

288
00:18:57,022 --> 00:19:00,866
Other things problems is offline evaluation. Of course, when you're

289
00:19:00,890 --> 00:19:04,610
writing for example unit tests or testing in the

290
00:19:04,722 --> 00:19:08,454
documentation or code samples for correctness,

291
00:19:08,834 --> 00:19:12,418
it's impossible to evaluate it without connecting

292
00:19:12,466 --> 00:19:16,154
to public openaPI servers. And sometimes it's

293
00:19:16,194 --> 00:19:19,130
open. The LLM providers,

294
00:19:19,322 --> 00:19:23,154
the LLMs, they respond differently at

295
00:19:23,234 --> 00:19:26,650
each request and it's impossible to test and

296
00:19:26,682 --> 00:19:30,414
make sure that everything is working fine.

297
00:19:31,834 --> 00:19:35,450
As you have seen, it's easy to make something cool with lnms, but it's

298
00:19:35,482 --> 00:19:38,978
very hard to make something production ready with them.

299
00:19:39,106 --> 00:19:42,866
So if you interested in observing our

300
00:19:42,970 --> 00:19:46,858
open source framework in Python for building applications,

301
00:19:46,946 --> 00:19:50,298
come with square code. It will bring you to our source code.

302
00:19:50,346 --> 00:19:54,526
I have shown you shown already to you and you can try to

303
00:19:54,630 --> 00:19:58,454
run discord simple application. Maybe it might help you

304
00:19:58,494 --> 00:20:01,990
to run your own discord

305
00:20:02,062 --> 00:20:06,510
chat AI bot response based on the documentation you have.

306
00:20:06,662 --> 00:20:10,078
Here's the takeaways from my sessions. As you

307
00:20:10,086 --> 00:20:13,814
can see, integrating the AI into software

308
00:20:13,854 --> 00:20:17,666
development and Devrel is better as

309
00:20:17,690 --> 00:20:21,810
it's accelerating our existing productivity rather

310
00:20:21,842 --> 00:20:25,562
than it's completely disrupting us and

311
00:20:25,618 --> 00:20:28,970
AI representing both significant opportunities and

312
00:20:29,002 --> 00:20:33,498
challenges for Devrel. While it can automate also tasks

313
00:20:33,586 --> 00:20:37,458
like technical documentation support, that leads to

314
00:20:37,586 --> 00:20:41,374
increased efficiency and potentially it

315
00:20:41,754 --> 00:20:45,162
reaches developers experience. And I

316
00:20:45,178 --> 00:20:48,474
think also AI will enable new class of users

317
00:20:48,514 --> 00:20:52,454
like creators who can tap into productivity

318
00:20:52,954 --> 00:20:55,914
that previously only available to software engineers.

319
00:20:55,994 --> 00:20:59,426
Non software engineers also can do some engineering

320
00:20:59,490 --> 00:21:03,194
works by using low code and no code trends

321
00:21:03,354 --> 00:21:07,562
and start also think about AI integrations for your

322
00:21:07,658 --> 00:21:11,102
developer product product. Thank you for attending

323
00:21:11,158 --> 00:21:14,674
my session. If you would like to have questions,

324
00:21:15,294 --> 00:21:19,014
feel free to ask me on LinkedIn or leave your question

325
00:21:19,054 --> 00:21:22,926
in the chat. I will be more than happy to address them. Thanks. Take care.

326
00:21:22,990 --> 00:21:23,094
Bye.

