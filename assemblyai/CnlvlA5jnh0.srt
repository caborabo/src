1
00:00:24,730 --> 00:00:28,134
Hello, everybody, and welcome to the session. Just don't do it.

2
00:00:28,172 --> 00:00:31,718
Postgres in Kubernetes, or I should

3
00:00:31,804 --> 00:00:35,238
perhaps should say postgresql in Kubernetes, which is

4
00:00:35,324 --> 00:00:38,866
a very hard thing to pronounce. So we'll just stick with postgres

5
00:00:38,898 --> 00:00:42,246
in Kubernetes in the next 30 minutes or

6
00:00:42,268 --> 00:00:46,054
so. I want to take you through some of the considerations that we

7
00:00:46,092 --> 00:00:49,998
have when we look at postgres, if we look at new,

8
00:00:50,044 --> 00:00:54,042
new ways of developing applications and actually incorporating

9
00:00:54,106 --> 00:00:57,902
data processing in the world of postgres and into

10
00:00:57,956 --> 00:01:00,270
the world of data processing.

11
00:01:01,250 --> 00:01:04,626
So without much further ado, let's just jump into our

12
00:01:04,648 --> 00:01:08,770
first slide. So basically

13
00:01:08,840 --> 00:01:12,660
what we're going to do is look at postgres and cloud.

14
00:01:14,070 --> 00:01:17,862
And there is a lot to say about this. There is

15
00:01:17,996 --> 00:01:21,474
very little time because we only have like a very short slot

16
00:01:21,522 --> 00:01:24,614
here. But before we dive in,

17
00:01:24,652 --> 00:01:27,814
just let me quickly introduce myself. Who is this

18
00:01:27,852 --> 00:01:31,386
guy sitting here in this presentation thinking that he

19
00:01:31,408 --> 00:01:34,630
could tell you something about this? Well, my name is Jan Karremans.

20
00:01:34,790 --> 00:01:38,874
I'm a techie in sales, which is a little bit strange, but I

21
00:01:38,912 --> 00:01:42,560
started out in database technology many years ago,

22
00:01:43,650 --> 00:01:47,040
first in the world of proprietary database technology,

23
00:01:47,970 --> 00:01:52,254
but at some point decided there

24
00:01:52,292 --> 00:01:56,530
should be more in the world. So I migrated myself from Oracle to Postgres,

25
00:01:57,110 --> 00:02:00,494
currently a member of the international database

26
00:02:00,542 --> 00:02:03,874
community. And just over three

27
00:02:03,912 --> 00:02:07,814
years ago, I guess I got really involved in Kubernetes and really

28
00:02:07,852 --> 00:02:11,730
trying to understand how this technology helps

29
00:02:11,810 --> 00:02:14,498
transform the way we build applications.

30
00:02:14,674 --> 00:02:18,642
And that kind of put me on a mission. I worked very closely

31
00:02:18,706 --> 00:02:22,586
together with the team that did a lot

32
00:02:22,608 --> 00:02:26,294
of work on how do you put postgres

33
00:02:26,342 --> 00:02:30,060
in a container? How do you put the elephant in a box, if you like?

34
00:02:30,590 --> 00:02:34,682
So my background again, I said I'm proprietary

35
00:02:34,746 --> 00:02:37,440
databases Oracle in my case,

36
00:02:39,170 --> 00:02:42,986
I am KCA trained

37
00:02:43,178 --> 00:02:46,462
and I have a little bit of a postgres background.

38
00:02:46,526 --> 00:02:49,938
Meanwhile, currently at this company

39
00:02:50,024 --> 00:02:53,566
called Cybertech, a pure play postgres

40
00:02:53,678 --> 00:02:57,814
company that helps guide organizations in

41
00:02:57,852 --> 00:03:00,594
their journey in adopting postgres.

42
00:03:00,722 --> 00:03:04,194
And really looking at what are some of the challenges

43
00:03:04,242 --> 00:03:08,090
that you face if you move from a traditional world to this new world

44
00:03:08,240 --> 00:03:12,010
and how can you get the most benefit out of it.

45
00:03:12,160 --> 00:03:16,186
I believe that running data

46
00:03:16,368 --> 00:03:20,122
management solutions like postgres in Kubernetes is

47
00:03:20,176 --> 00:03:23,600
really the way that in the next decade or so,

48
00:03:24,130 --> 00:03:27,806
looking at some of the things that we're going to talk about from an application

49
00:03:27,908 --> 00:03:31,950
development perspective, from an application architecture perspective,

50
00:03:32,310 --> 00:03:34,690
really are things that are going to contribute.

51
00:03:37,350 --> 00:03:41,214
Good friend of mine, Mark Lindster, currently postgres

52
00:03:41,262 --> 00:03:44,654
fellow described this as postgres

53
00:03:44,702 --> 00:03:48,130
is the most transformative technology since Linux.

54
00:03:48,290 --> 00:03:51,926
I think he's right. If you look at

55
00:03:52,108 --> 00:03:55,666
the first wave of open source as I've once defined

56
00:03:55,698 --> 00:03:59,850
it, bringing open source solutions

57
00:04:00,190 --> 00:04:04,218
to the world really started with a little bit and

58
00:04:04,304 --> 00:04:08,346
I don't mean this in a demeaning way, but with

59
00:04:08,368 --> 00:04:12,298
a little bit simpler to replace technology. So you've

60
00:04:12,314 --> 00:04:15,966
got tooling, you've got perhaps even something which is

61
00:04:15,988 --> 00:04:19,150
a little bit more complex like an operating system, but they're

62
00:04:20,050 --> 00:04:25,134
less intrinsically interwoven

63
00:04:25,182 --> 00:04:28,498
into an organization as perhaps database technology.

64
00:04:28,584 --> 00:04:32,286
So this first wave of open source really focused on the simpler

65
00:04:32,478 --> 00:04:35,874
quote unquote technologies replacing

66
00:04:36,002 --> 00:04:39,186
those from proprietary solutions to open source

67
00:04:39,218 --> 00:04:42,774
solutions. I think operating systems are a very

68
00:04:42,812 --> 00:04:44,760
good example of that.

69
00:04:46,650 --> 00:04:50,294
In the early days we had proprietary operating systems

70
00:04:50,342 --> 00:04:53,670
like VMS, like Solaris,

71
00:04:53,750 --> 00:04:57,514
like Unix, et cetera. Those have all been replaced with this

72
00:04:57,552 --> 00:05:00,990
open source equivalent called Linux.

73
00:05:02,930 --> 00:05:05,470
Most every system is running Linux.

74
00:05:06,370 --> 00:05:10,222
This change, this transformation is now also coming

75
00:05:10,276 --> 00:05:13,938
to the data processing world where really

76
00:05:14,024 --> 00:05:17,726
truly community governed open source solutions

77
00:05:17,838 --> 00:05:21,218
like postgres is built. Also like Kubernetes is

78
00:05:21,304 --> 00:05:25,302
are taking over this high end

79
00:05:25,356 --> 00:05:29,506
of the IT tool spectrum. So postgres

80
00:05:29,538 --> 00:05:33,510
in that sense the most transformative technology since Linux.

81
00:05:34,490 --> 00:05:38,246
And this is one of my personal most favorite slides.

82
00:05:38,358 --> 00:05:42,330
It's super hectic, it's super busy, but it discusses

83
00:05:42,750 --> 00:05:46,998
the origins of relational database theory.

84
00:05:47,174 --> 00:05:50,874
And even though relational database theory is the foundation

85
00:05:50,922 --> 00:05:55,354
of postgres with all of the additions,

86
00:05:55,402 --> 00:05:58,846
with all of the extras that has been built in postgres over

87
00:05:58,868 --> 00:06:02,378
the years, Postgres really

88
00:06:02,484 --> 00:06:07,422
is a multilingual

89
00:06:07,486 --> 00:06:11,314
data processing platform. It speaks relational technology,

90
00:06:11,432 --> 00:06:15,720
it speaks document database or JSON based

91
00:06:17,290 --> 00:06:20,454
approaches. So that is really where

92
00:06:20,492 --> 00:06:25,014
this is going today. And if you look at the chart, it started with

93
00:06:25,212 --> 00:06:28,826
System R, the great debate 1974. For those of

94
00:06:28,848 --> 00:06:32,854
you who are interested in history, had a bit of a discussion

95
00:06:32,902 --> 00:06:36,554
around which kind of database would

96
00:06:36,592 --> 00:06:39,562
win relational database theory at that point.

97
00:06:39,616 --> 00:06:43,030
One. So that technology split it

98
00:06:43,040 --> 00:06:47,134
up in oracle on the one side and ingress and later post ingress or

99
00:06:47,172 --> 00:06:50,890
postgres project on the other hand. And that evolved

100
00:06:50,970 --> 00:06:54,530
through the years to where we are today, where you can clearly see

101
00:06:54,600 --> 00:06:58,850
postgres from a data processing platform is winning.

102
00:06:59,190 --> 00:07:02,450
And this is why I think also in this setting,

103
00:07:03,110 --> 00:07:06,694
cloud native setting, having a good understanding of

104
00:07:06,732 --> 00:07:10,470
how postgres plays here is of a vital importance

105
00:07:13,050 --> 00:07:17,886
from that perspective. If you then start looking, okay, so we had postgres

106
00:07:17,938 --> 00:07:22,026
or we have postgres. I should say this

107
00:07:22,048 --> 00:07:25,450
has been around for over 30 years. It's part

108
00:07:25,520 --> 00:07:29,660
of the traditional way in which we do

109
00:07:30,290 --> 00:07:34,846
monolithic application development. Then since

110
00:07:34,948 --> 00:07:38,458
1015 years, the common arising of cloud, the maturing

111
00:07:38,554 --> 00:07:42,286
of cloud. And then based on top of

112
00:07:42,308 --> 00:07:46,222
that, you have where cloud native comes in, cloud native

113
00:07:46,286 --> 00:07:50,050
really as a mindset for how do I build

114
00:07:50,120 --> 00:07:53,202
applications that in this

115
00:07:53,256 --> 00:07:56,486
world of cloud actually use

116
00:07:56,668 --> 00:08:01,362
the power that this agile

117
00:08:01,426 --> 00:08:05,090
and quick evolving technology brings?

118
00:08:05,170 --> 00:08:08,810
It requires a different way of building applications.

119
00:08:09,390 --> 00:08:12,874
Even though postgres is 30 years old, it feels like it

120
00:08:12,912 --> 00:08:16,954
was created to go through these motions of cloud.

121
00:08:16,992 --> 00:08:20,446
And cloud native, I think that's a

122
00:08:20,468 --> 00:08:24,160
good thing to have in the back of your head as you start looking at

123
00:08:25,490 --> 00:08:29,600
big monolithic applications, which is

124
00:08:30,450 --> 00:08:34,450
nothing bad to the way that these applications are built.

125
00:08:34,600 --> 00:08:38,046
But if you look at today's requirements

126
00:08:38,158 --> 00:08:41,586
in organizations where new features, we need to

127
00:08:41,688 --> 00:08:45,140
have the application do new things, it needs to do something different,

128
00:08:45,530 --> 00:08:50,914
really is a big driver for changing

129
00:08:50,962 --> 00:08:54,854
applications. If you do this with your

130
00:08:54,972 --> 00:08:58,498
traditional big monolithic application, it's really hard to

131
00:08:58,524 --> 00:09:02,140
make that swift shift. I mean,

132
00:09:02,830 --> 00:09:06,566
traditionally you would say, I'm going to do requirement engineering,

133
00:09:06,598 --> 00:09:10,134
then I'm going to do a technical design, I'm going to do an architectural

134
00:09:10,182 --> 00:09:14,382
design, I'm going to build my pre code, I'm going to actually code

135
00:09:14,436 --> 00:09:17,806
the application. And by the way, by the time you had

136
00:09:17,908 --> 00:09:21,514
your first viable

137
00:09:21,562 --> 00:09:24,914
thing that you could test, you would be two years ahead.

138
00:09:25,112 --> 00:09:29,122
In those two years, so many of these requirements would have

139
00:09:29,176 --> 00:09:32,478
changed that it's virtually impossible

140
00:09:32,574 --> 00:09:36,294
to keep up with the

141
00:09:36,332 --> 00:09:39,702
evolving of your business these days. So from

142
00:09:39,756 --> 00:09:43,862
that traditional model we're shifting to, and I like to use

143
00:09:43,996 --> 00:09:48,630
this equivalent with this cloud

144
00:09:48,700 --> 00:09:52,810
of cards in the sky where every

145
00:09:52,880 --> 00:09:56,534
bird reacts to its neighbor, right? If that swift

146
00:09:56,582 --> 00:09:59,706
shifts a little bit, then all of the birds around it will shift also

147
00:09:59,728 --> 00:10:03,278
a little bit and you get these gracious patterns in the

148
00:10:03,284 --> 00:10:06,686
sky. I think that comparison, for me at

149
00:10:06,708 --> 00:10:10,442
least, looking at how requirements influence

150
00:10:10,506 --> 00:10:13,606
this, I think this is also how applications,

151
00:10:13,658 --> 00:10:17,134
and if you start looking at microservices applications,

152
00:10:17,182 --> 00:10:20,994
where the individual parts of the application change and

153
00:10:21,032 --> 00:10:25,274
evolve, much like the position of the bird in the cloud of cards,

154
00:10:25,422 --> 00:10:28,774
is basically a model that

155
00:10:28,812 --> 00:10:32,374
gives you the ability to swiftly interact on

156
00:10:32,412 --> 00:10:36,120
changing requirements in your business

157
00:10:37,470 --> 00:10:41,014
as postgres, as a data processing engine fits

158
00:10:41,062 --> 00:10:44,314
in this model, or if you would be able to do that,

159
00:10:44,432 --> 00:10:46,620
that would add tremendous value.

160
00:10:50,210 --> 00:10:53,326
We looked at cloud native in one

161
00:10:53,348 --> 00:10:57,466
of the previous slides. This basically boils

162
00:10:57,498 --> 00:11:00,846
down to how do you

163
00:11:00,948 --> 00:11:05,330
adopt the cloud native mindset, which basically discusses

164
00:11:05,750 --> 00:11:08,862
how developers and code reviewers, et cetera,

165
00:11:08,926 --> 00:11:12,580
work on a repository, really make that into

166
00:11:13,190 --> 00:11:16,450
something that evolves around a development branch,

167
00:11:16,610 --> 00:11:19,734
automated testing. So there is a lot of

168
00:11:19,852 --> 00:11:23,206
these things defined on how

169
00:11:23,228 --> 00:11:27,400
you build an application. What are some of the KPIs around

170
00:11:27,770 --> 00:11:31,462
application building an application evolvement

171
00:11:31,606 --> 00:11:35,260
and development, et cetera. And how do you deliver this application

172
00:11:35,710 --> 00:11:40,066
towards end users? Are your continuous

173
00:11:40,118 --> 00:11:43,546
integration? How do you do continuous delivery?

174
00:11:43,578 --> 00:11:47,674
When I started to look into this, one of the most profound

175
00:11:47,802 --> 00:11:51,994
things that I found is that continuous

176
00:11:52,042 --> 00:11:55,858
integration, I thought was the hardest part, right, where everything

177
00:11:55,944 --> 00:11:59,218
you do always have to be, sorry.

178
00:11:59,304 --> 00:12:02,930
Continuous delivery was the hardest part because

179
00:12:03,000 --> 00:12:06,914
everything you needed to do, you need to be able to automatically

180
00:12:06,962 --> 00:12:10,710
make that available to your end users, and that needs to go fluently.

181
00:12:11,770 --> 00:12:15,282
But as you start diving deeper in, the continuous

182
00:12:15,346 --> 00:12:19,770
integration part actually is the harder part because that defines

183
00:12:20,190 --> 00:12:23,434
that your application always has to be in a state in which

184
00:12:23,472 --> 00:12:27,014
you can actually deploy it. So that puts

185
00:12:27,062 --> 00:12:30,522
extreme requirements on how do I implement

186
00:12:30,586 --> 00:12:34,590
changes, how do I test changes, how do I continuously

187
00:12:35,570 --> 00:12:38,782
ensure that the application that I have

188
00:12:38,836 --> 00:12:42,286
sitting in my repository is in a state that I can

189
00:12:42,308 --> 00:12:44,370
put it out there in production.

190
00:12:45,750 --> 00:12:49,282
So this model

191
00:12:49,416 --> 00:12:53,026
then starts defining and focusing on

192
00:12:53,208 --> 00:12:57,046
the performance indicators actually required to

193
00:12:57,068 --> 00:13:00,754
start doing this, this journey

194
00:13:00,802 --> 00:13:06,470
for me, because originally I'm a database person looking

195
00:13:06,540 --> 00:13:10,682
at this and bridging the gap from my world where

196
00:13:10,736 --> 00:13:14,234
I think about data persistence and how do I

197
00:13:14,272 --> 00:13:18,134
record data and et cetera, et cetera, and shifting

198
00:13:18,182 --> 00:13:21,806
that mind towards, okay, so I am now also part of

199
00:13:21,828 --> 00:13:25,182
this development chain. I need to start thinking about

200
00:13:25,316 --> 00:13:28,622
how do I actually work through the

201
00:13:28,676 --> 00:13:32,174
changes? How do I look at continuous testing, how do I look

202
00:13:32,212 --> 00:13:36,114
at test data management, et cetera. So that

203
00:13:36,152 --> 00:13:38,740
was really a learning experience.

204
00:13:39,590 --> 00:13:43,646
And that kind of brings

205
00:13:43,678 --> 00:13:47,622
us back to how do you go from a monolithic application

206
00:13:47,756 --> 00:13:50,390
to agile delivery?

207
00:13:52,090 --> 00:13:56,230
Cloud in that sense, changes much more than just

208
00:13:56,380 --> 00:14:00,022
looking at. We all know, and again,

209
00:14:00,076 --> 00:14:03,242
no disrespect, but we all know the manager that comes in, right?

210
00:14:03,296 --> 00:14:07,334
And I think, Dilbert, for those of you who remember that comics,

211
00:14:07,382 --> 00:14:11,834
trip also had like a phase in that manager

212
00:14:11,882 --> 00:14:15,646
comes in tomorrow, we will be cloud native or

213
00:14:15,668 --> 00:14:18,926
we will be agile and just like

214
00:14:19,108 --> 00:14:22,566
flipping a switch. Unfortunately, it doesn't

215
00:14:22,618 --> 00:14:25,246
really work like that in reality.

216
00:14:25,438 --> 00:14:30,162
So going from a

217
00:14:30,216 --> 00:14:34,210
traditional monolithic application, from this big steam train

218
00:14:34,280 --> 00:14:37,030
that is moving forward to this flock of birds,

219
00:14:38,570 --> 00:14:42,726
requires many changes in

220
00:14:42,748 --> 00:14:46,754
the way you look at applications, how you approach

221
00:14:46,802 --> 00:14:50,042
application development, et cetera. So this is not something

222
00:14:50,096 --> 00:14:54,170
you do just on the side overnight,

223
00:14:54,510 --> 00:14:58,250
right? So getting

224
00:14:58,320 --> 00:15:02,160
into this, thinking through this, evolving, this is really

225
00:15:02,770 --> 00:15:07,566
a next challenge. Application and

226
00:15:07,588 --> 00:15:11,550
we saw that in the previous slide already.

227
00:15:11,700 --> 00:15:14,990
The buzzwordbingo, I think in it we're

228
00:15:15,070 --> 00:15:17,780
really good in buzzwordbingo stuff.

229
00:15:18,310 --> 00:15:21,054
Everybody today is talking about AI, AI,

230
00:15:21,102 --> 00:15:25,730
AI. The big question is AI

231
00:15:25,810 --> 00:15:29,122
matures, which will happen in, I presume,

232
00:15:29,186 --> 00:15:33,094
just a couple of years. What will it actually change

233
00:15:33,212 --> 00:15:38,178
in everyday life? What will it actually change in

234
00:15:38,204 --> 00:15:41,386
your day to day business? The reason for this

235
00:15:41,408 --> 00:15:45,420
is because we've seen this a couple of times, right? Big data,

236
00:15:46,350 --> 00:15:50,560
cloud would change everything. Yes, cloud has changed everything,

237
00:15:51,490 --> 00:15:55,310
but only now, and this is 1015 years after

238
00:15:55,380 --> 00:15:59,198
cloud started. We're now really starting to understand

239
00:15:59,364 --> 00:16:03,330
how cloud influence day to day

240
00:16:03,400 --> 00:16:07,410
it activities. So also from that perspective,

241
00:16:08,230 --> 00:16:12,334
keep in mind that a lot of this stuff is buzz, it's marketing

242
00:16:12,382 --> 00:16:15,974
buzz, it's sales buzz, where people try to get

243
00:16:16,012 --> 00:16:20,630
you to focus on their solutions, on the things that they're bringing.

244
00:16:21,210 --> 00:16:24,694
But one of the things is please step back, look at your

245
00:16:24,732 --> 00:16:28,662
own requirements. And how do these buzzword

246
00:16:28,726 --> 00:16:32,650
things, how does agile, how does microservices

247
00:16:33,310 --> 00:16:37,706
help you deliver more value for

248
00:16:37,728 --> 00:16:41,590
your company? And when it comes to cloud,

249
00:16:41,680 --> 00:16:44,734
cloud native and that mindset part of it,

250
00:16:44,772 --> 00:16:48,378
I think we're getting to a point where this has matured

251
00:16:48,474 --> 00:16:51,934
so far that we can say, yes, we can

252
00:16:51,972 --> 00:16:55,234
start out of the buzzwordbingo part and

253
00:16:55,272 --> 00:16:58,526
actually look at what do these things define.

254
00:16:58,558 --> 00:17:00,660
And I just put four on the slide here.

255
00:17:01,670 --> 00:17:05,010
So agile development,

256
00:17:05,770 --> 00:17:08,306
it focuses on deploying,

257
00:17:08,418 --> 00:17:12,262
redeploying of applications, keeping your mind

258
00:17:12,396 --> 00:17:16,646
in the back of your mind, the KPIs that you

259
00:17:16,668 --> 00:17:20,358
want to fulfill in how fast can I deploy an

260
00:17:20,364 --> 00:17:23,802
application? When we were looking at a tanker or at a

261
00:17:23,856 --> 00:17:27,162
train, a change could easily take six months

262
00:17:27,216 --> 00:17:30,862
to a year. Today we're looking at

263
00:17:30,916 --> 00:17:34,686
bringing out an application every other hour

264
00:17:34,868 --> 00:17:38,394
instead of every other year. Right? So that's

265
00:17:38,442 --> 00:17:42,014
one. The microservices part really has to do

266
00:17:42,052 --> 00:17:46,082
with going from this big block to the

267
00:17:46,136 --> 00:17:49,890
individual nuclei in

268
00:17:50,040 --> 00:17:53,986
that cloud. How can we break down an application? How can

269
00:17:54,008 --> 00:17:57,794
we find the essential granules?

270
00:17:57,842 --> 00:18:02,934
If you like to start working with

271
00:18:02,972 --> 00:18:06,386
this flexible mechanism, this grid,

272
00:18:06,498 --> 00:18:09,978
if you like that, your application is. So that's another

273
00:18:10,064 --> 00:18:14,122
element which sounds very much like marketing, but actually really

274
00:18:14,176 --> 00:18:17,846
has a good meaning. The DevOps

275
00:18:17,878 --> 00:18:21,534
part as well. I think DevOps over the past

276
00:18:21,572 --> 00:18:25,422
couple of years has really become really

277
00:18:25,476 --> 00:18:29,322
settled and really well defined and ingrained

278
00:18:29,386 --> 00:18:32,882
in every other organization. You don't just

279
00:18:32,936 --> 00:18:36,558
install a single server, but you write an ansible playbook

280
00:18:36,654 --> 00:18:40,194
or you write some script that actually does this work for

281
00:18:40,232 --> 00:18:44,370
you in an omnipotent, repeatable way.

282
00:18:44,520 --> 00:18:48,286
Every time you run the script, the outcome is exactly the same.

283
00:18:48,408 --> 00:18:52,498
And if you want to change something, you don't fix something on the server,

284
00:18:52,674 --> 00:18:56,440
but you just change the script and let the script do it for you.

285
00:18:58,010 --> 00:19:01,594
As we're going to this new world, we're just going to throw away

286
00:19:01,632 --> 00:19:03,660
the container and spin up a new one.

287
00:19:04,670 --> 00:19:07,882
And then what I talked about just now is

288
00:19:07,936 --> 00:19:12,190
CI CD. How do you continuously

289
00:19:12,530 --> 00:19:17,246
guarantee that your application is in a state that

290
00:19:17,268 --> 00:19:20,766
you can deploy it, but also that you can ploy it by the push of

291
00:19:20,788 --> 00:19:24,622
a button? So these are really four elements

292
00:19:24,686 --> 00:19:28,194
that have matured over time and really

293
00:19:28,232 --> 00:19:32,002
are now in a position where they're part of the way

294
00:19:32,056 --> 00:19:34,210
we look at it operations.

295
00:19:35,290 --> 00:19:37,160
So that's kind of interesting.

296
00:19:38,650 --> 00:19:42,322
With that, I want to briefly introduce Dora.

297
00:19:42,386 --> 00:19:46,040
Dora is for me at least a report,

298
00:19:47,050 --> 00:19:50,540
research and capability that Google

299
00:19:50,910 --> 00:19:54,614
Drives that really focuses on the KPI

300
00:19:54,662 --> 00:19:58,406
part of things. How do you start measuring

301
00:19:58,518 --> 00:20:02,190
your success as a

302
00:20:02,340 --> 00:20:04,990
cloud native inspired organization?

303
00:20:06,050 --> 00:20:09,466
How do you perform? How quickly do you roll

304
00:20:09,498 --> 00:20:13,300
out applications? What's the mean time between changes?

305
00:20:14,550 --> 00:20:18,034
How fast can you restore a

306
00:20:18,072 --> 00:20:21,570
specific service back to operation? If you start working

307
00:20:21,640 --> 00:20:25,910
through this, what's your deployment frequency? What I said earlier,

308
00:20:26,970 --> 00:20:30,854
going from an application which has a new version every year

309
00:20:30,892 --> 00:20:35,078
or every six months, to an application that has a new version every

310
00:20:35,164 --> 00:20:38,486
2 hours and successfully deploy

311
00:20:38,518 --> 00:20:42,394
that and really have reliable numbers

312
00:20:42,512 --> 00:20:45,722
around, how do I do this?

313
00:20:45,776 --> 00:20:49,110
So sre site reliability

314
00:20:49,190 --> 00:20:53,326
engineer really came out

315
00:20:53,348 --> 00:20:57,470
of this motion where understanding

316
00:20:58,210 --> 00:21:01,934
how we build and how we deploy applications really is

317
00:21:01,972 --> 00:21:06,100
part of how we work in it these days.

318
00:21:07,590 --> 00:21:12,238
Again, I think all very interesting background,

319
00:21:12,414 --> 00:21:15,942
both from a cloud native perspective as

320
00:21:15,996 --> 00:21:19,702
well as from a data management perspective where we

321
00:21:19,756 --> 00:21:21,560
were looking to bring this together.

322
00:21:23,610 --> 00:21:26,998
And that kind of brings us back to this a little bit.

323
00:21:27,084 --> 00:21:29,420
Daddy, what are cloud made of? Well,

324
00:21:30,190 --> 00:21:35,770
mostly Linux servers these days having

325
00:21:35,840 --> 00:21:39,482
this understanding and really taking

326
00:21:39,536 --> 00:21:42,638
a step back from, again, the buzzwordbingo and all of

327
00:21:42,644 --> 00:21:45,806
the spin that's been giving, and I can't say

328
00:21:45,828 --> 00:21:49,454
this often enough, just sit down and think about what

329
00:21:49,492 --> 00:21:53,154
does my organization require that

330
00:21:53,192 --> 00:21:56,740
I can start building that actually add value?

331
00:21:57,910 --> 00:22:01,890
And I've been working with a specific organization that

332
00:22:02,040 --> 00:22:06,246
has a big monolithic, old fashioned application

333
00:22:06,428 --> 00:22:09,640
and what they're actually doing is looking at

334
00:22:10,170 --> 00:22:13,160
deconstructing the application piece by piece,

335
00:22:13,770 --> 00:22:19,686
defining very nice specific parts

336
00:22:19,718 --> 00:22:23,180
of the application specific function that that application is doing.

337
00:22:24,270 --> 00:22:27,674
You might even think, okay, so this is the part of the application

338
00:22:27,792 --> 00:22:32,174
where a truck driver comes to a factory and they

339
00:22:32,212 --> 00:22:36,590
need to go from the entrance to a specific loading bay.

340
00:22:37,010 --> 00:22:40,782
How do you make this go

341
00:22:40,836 --> 00:22:44,254
fluent. How do you give the truck driver an

342
00:22:44,292 --> 00:22:48,100
app in which he just could say, I need to go to

343
00:22:49,350 --> 00:22:53,170
loading bay three, dont 15. That is, I can

344
00:22:53,240 --> 00:22:56,934
actually have a nice chart on my mobile that says go

345
00:22:56,972 --> 00:23:00,546
left, go right, and you'll end up actually at that specific loading

346
00:23:00,578 --> 00:23:04,390
base, specifically at the time where you need to be. So these

347
00:23:04,460 --> 00:23:08,794
kind of developments is what cloud actually

348
00:23:08,912 --> 00:23:12,506
enables us to do because of the interaction and because of

349
00:23:12,528 --> 00:23:16,682
the open access that these

350
00:23:16,816 --> 00:23:19,850
technologies and this development brings.

351
00:23:22,050 --> 00:23:25,726
And that brings us

352
00:23:25,748 --> 00:23:29,582
a bit back to the flock of cards, right? It's almost like

353
00:23:29,636 --> 00:23:33,478
a neural network where all of these microservices,

354
00:23:33,674 --> 00:23:37,246
and specifically when then you look at postgres

355
00:23:37,278 --> 00:23:40,914
and the things that postgres as a platform can bring, and the

356
00:23:40,952 --> 00:23:45,006
way that data can be replicated between some

357
00:23:45,048 --> 00:23:49,382
of these services makes for something where not

358
00:23:49,436 --> 00:23:52,822
just the individual granules, but also the link between

359
00:23:52,876 --> 00:23:56,402
the granules and where every element knows

360
00:23:56,466 --> 00:23:59,866
of another element, just exactly what it needs to

361
00:23:59,888 --> 00:24:03,482
know can be built in such a way that it

362
00:24:03,536 --> 00:24:07,114
starts working like a neural network. I think this

363
00:24:07,152 --> 00:24:10,574
is a very nice future perspective for

364
00:24:10,612 --> 00:24:14,478
what things that we could start doing when we bring

365
00:24:14,644 --> 00:24:18,782
postgres and cloud native and the cloud native mindset even

366
00:24:18,836 --> 00:24:22,842
further together. Super busy slide.

367
00:24:22,906 --> 00:24:26,338
And please pause the video if you

368
00:24:26,344 --> 00:24:30,846
want to read this, but this really describes

369
00:24:30,878 --> 00:24:34,938
a little bit what the cloud native

370
00:24:35,054 --> 00:24:38,946
mindset is about. So it's really a definition slide

371
00:24:38,978 --> 00:24:42,726
that I just wanted to include for you guys and girls to

372
00:24:42,748 --> 00:24:46,374
look over as we start

373
00:24:46,412 --> 00:24:50,058
wrapping this up. You're probably

374
00:24:50,144 --> 00:24:53,706
familiar with Kubernetes, Kubernetes as a

375
00:24:53,888 --> 00:24:57,434
community governed open source project. We're going to bring

376
00:24:57,472 --> 00:25:00,862
this together with the Postgres project,

377
00:25:00,996 --> 00:25:05,022
one of the most powerful, one of the most widespread community

378
00:25:05,156 --> 00:25:09,040
governed open source projects resulting from the work

379
00:25:09,570 --> 00:25:13,378
of Michael J. Michael Stonebreaker at

380
00:25:13,464 --> 00:25:16,802
the University of Berkeley, and after him, Mr.

381
00:25:16,856 --> 00:25:20,926
Bruce Mumgen, the founding father of the Postgres global

382
00:25:20,958 --> 00:25:24,622
Development group. So we have two very powerful

383
00:25:24,686 --> 00:25:29,080
communities, and we're actually bringing them together in

384
00:25:29,850 --> 00:25:34,040
this new environment where we bring these two

385
00:25:34,490 --> 00:25:38,234
elements to bear for what we've just talked

386
00:25:38,272 --> 00:25:41,706
about. How can we start bringing data management in this

387
00:25:41,728 --> 00:25:45,750
cloud native mindset? So to that extent,

388
00:25:45,910 --> 00:25:50,138
the cloud native PG project was

389
00:25:50,224 --> 00:25:54,250
created, now part of CNCF.

390
00:25:55,470 --> 00:25:59,194
And thank you to Gabriele Bartolini for building and driving

391
00:25:59,242 --> 00:26:03,566
this project. And basically what it is, it's run postgres,

392
00:26:03,598 --> 00:26:07,890
the Kubernetes way. So to Kubernetes,

393
00:26:08,550 --> 00:26:12,066
Postgres is an application that has its specific

394
00:26:12,168 --> 00:26:15,960
requirements, that has some specific elements to it,

395
00:26:17,370 --> 00:26:21,542
running persistent data loads in Kubernetes has

396
00:26:21,596 --> 00:26:25,122
often been viewed as that's challenging,

397
00:26:25,186 --> 00:26:28,082
that's perhaps very awkward to do.

398
00:26:28,236 --> 00:26:31,962
But at this point in time, we're at a point

399
00:26:32,016 --> 00:26:35,114
where you can run postgres the Kubernetes way.

400
00:26:35,312 --> 00:26:38,694
So rather than bringing Kubernetes to postgres,

401
00:26:38,742 --> 00:26:42,414
what we did is take postgres and actually bring it to Kubernetes and

402
00:26:42,452 --> 00:26:46,414
make it build and run the way that it

403
00:26:46,452 --> 00:26:50,426
should run in both the cloud native mindset

404
00:26:50,458 --> 00:26:53,666
as defined by the CNCF, what we saw in the

405
00:26:53,688 --> 00:26:57,586
previous slide, but also take the goodness and benefits of

406
00:26:57,608 --> 00:27:01,154
postgres and actually exploit them as best as we

407
00:27:01,192 --> 00:27:04,340
can. So if you want to be part,

408
00:27:04,710 --> 00:27:08,006
please scan the QR code or just look

409
00:27:08,028 --> 00:27:11,720
up cloudnative PG, IO and

410
00:27:13,450 --> 00:27:16,422
look at this project. Become part of the project again,

411
00:27:16,556 --> 00:27:19,434
a community governed open source project.

412
00:27:19,632 --> 00:27:23,610
We recently hit 3000 stars on GitHub.

413
00:27:23,950 --> 00:27:27,814
So from a postgres operator perspective,

414
00:27:27,862 --> 00:27:31,390
this is really the way forward. It's one of the most powerful

415
00:27:32,130 --> 00:27:34,720
operators at this point.

416
00:27:35,970 --> 00:27:40,586
And what it basically does is it captures a database administrator,

417
00:27:40,618 --> 00:27:44,002
puts it in a box, right? So day one,

418
00:27:44,056 --> 00:27:48,738
day two operations. How do you bring

419
00:27:48,824 --> 00:27:53,774
all of the requirements for running a data processing

420
00:27:53,822 --> 00:27:57,174
system to Kubernetes? That means high

421
00:27:57,212 --> 00:28:01,394
availability, switch over, load balancing.

422
00:28:01,522 --> 00:28:05,206
All of those elements are covered by

423
00:28:05,308 --> 00:28:08,070
cloud native PG, in this case by the operator.

424
00:28:08,590 --> 00:28:13,770
The operator basically teaches Kubernetes postgres

425
00:28:14,590 --> 00:28:19,114
and for you as an end user, it's basically

426
00:28:19,312 --> 00:28:23,374
just deploy and use. So from that perspective, it's a

427
00:28:23,412 --> 00:28:27,390
very interesting and complete product

428
00:28:27,460 --> 00:28:31,294
and process that

429
00:28:31,332 --> 00:28:35,026
brings me a little bit to the last slide and I

430
00:28:35,048 --> 00:28:40,066
think this picture is a very nice illustration of

431
00:28:40,088 --> 00:28:45,006
that thought. We're here at

432
00:28:45,048 --> 00:28:47,720
the date this presentation is given.

433
00:28:49,450 --> 00:28:52,710
We're at this specific point in our journey.

434
00:28:53,050 --> 00:28:56,022
This is going to go somewhere from this place.

435
00:28:56,076 --> 00:28:59,722
And the beauty of this is as these

436
00:28:59,776 --> 00:29:03,530
are community governed open source projects, I said it before,

437
00:29:03,680 --> 00:29:07,338
you and I together define what the

438
00:29:07,344 --> 00:29:11,054
rest of our journey will be like. Where will we take this

439
00:29:11,092 --> 00:29:14,800
technology from here? What will be

440
00:29:15,170 --> 00:29:18,378
the existing requirements? What will be some new requirements?

441
00:29:18,474 --> 00:29:22,240
Or what will be things that will be asked of us

442
00:29:22,790 --> 00:29:25,700
tomorrow, next week, next month, next year?

443
00:29:26,230 --> 00:29:30,530
Trust in that being and adopting

444
00:29:31,430 --> 00:29:34,674
Kubernetes and postgres together gives you

445
00:29:34,712 --> 00:29:38,360
two very strong tools that allow you to

446
00:29:38,810 --> 00:29:42,454
take your journey exactly there where you need it to go.

447
00:29:42,652 --> 00:29:47,518
And I think that's fairly unique and unparalleled

448
00:29:47,714 --> 00:29:51,510
in this environment. So that's

449
00:29:51,590 --> 00:29:54,300
basically the message that I wanted to share with you.

450
00:29:55,710 --> 00:29:59,434
What we do is we build our

451
00:29:59,472 --> 00:30:02,720
applications that we build, and we try to help you,

452
00:30:03,330 --> 00:30:06,414
basically, for the things that you need.

453
00:30:06,452 --> 00:30:10,286
So we would love to hear, come back and get in touch with

454
00:30:10,308 --> 00:30:13,614
you and hear your thoughts to what we've talked

455
00:30:13,652 --> 00:30:17,520
about here today, but also what some of the other elements are.

456
00:30:19,490 --> 00:30:23,582
So for that, thank you very much for being

457
00:30:23,636 --> 00:30:27,300
part of this presentation and until soon.

