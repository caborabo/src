1
00:00:27,160 --> 00:00:30,406
Hey, y'all, thank you comp 42 observability, for having

2
00:00:30,470 --> 00:00:34,430
us today. We're going to be having a panel around observability,

3
00:00:34,582 --> 00:00:37,806
the future of it, and what we can do with current tooling and

4
00:00:37,830 --> 00:00:41,606
what we want for the next tooling. So to get started, I have an

5
00:00:41,630 --> 00:00:45,102
amazing group of panelists here. Let's get started with Adriana

6
00:00:45,158 --> 00:00:48,150
on introducing themselves. Who are you and what do you do?

7
00:00:48,302 --> 00:00:51,702
Hey, I work with Ana.

8
00:00:51,838 --> 00:00:56,350
My name is Adriana Villela. We work together at Servicenow cloud observability.

9
00:00:56,542 --> 00:00:58,394
Let's say that five times fast.

10
00:00:59,504 --> 00:01:02,888
Yeah, I'm a senior staff developer advocate

11
00:01:02,936 --> 00:01:06,472
and I talk about all things observability and I spend most of

12
00:01:06,488 --> 00:01:09,696
my time in the hotel end user sig, where I am

13
00:01:09,760 --> 00:01:12,964
a maintainer there. How about you, Amy?

14
00:01:14,064 --> 00:01:17,320
I'm Amy Toby. I'm a senior principal engineer at Equinix.

15
00:01:17,512 --> 00:01:20,856
I've been there for three and a half years or something like that. And I

16
00:01:20,920 --> 00:01:23,124
kind of started off doing open telemetry there.

17
00:01:24,124 --> 00:01:27,908
And these days I do reliability across the

18
00:01:27,956 --> 00:01:31,304
and write code and all kinds of weird stuff in between the cracks.

19
00:01:32,124 --> 00:01:35,572
My name is charity majors. I am co founder and CTO of

20
00:01:35,628 --> 00:01:39,984
Honeycomb IO, a company that does observability tooling.

21
00:01:41,324 --> 00:01:44,636
What an amazing group of folks that we have here, from all walks of journey

22
00:01:44,660 --> 00:01:48,412
of observability, from end user to doing the reliability work to leading companies in

23
00:01:48,428 --> 00:01:52,040
this space. So the first question that we have for

24
00:01:52,112 --> 00:01:55,000
getting folks a little bit more adjusted to who we are, how did you all

25
00:01:55,032 --> 00:01:58,644
get started on observability? Well,

26
00:01:59,104 --> 00:02:02,408
I was looking for a word that was

27
00:02:02,456 --> 00:02:05,684
not monitoring. And I looked at Wikipedia and I was like,

28
00:02:06,104 --> 00:02:09,336
observability, how well can you understand the inner workings

29
00:02:09,360 --> 00:02:12,176
of a system just by observing the outsides?

30
00:02:12,280 --> 00:02:15,816
That's a pretty cool idea. But, like, honestly, I come

31
00:02:15,840 --> 00:02:19,668
from operations, and my entire career I have hated monitoring. Like,

32
00:02:19,716 --> 00:02:22,820
I do not think graphically, I don't like. Like,

33
00:02:22,892 --> 00:02:26,460
I've always been the person who would, like, bookmark other people's dashboards and

34
00:02:26,492 --> 00:02:29,264
graphs. Because I only love debugging.

35
00:02:29,804 --> 00:02:33,756
I do not come by this naturally. So the

36
00:02:33,780 --> 00:02:36,744
idea is to make more people like me able to be more like Amy.

37
00:02:38,644 --> 00:02:42,388
Well, I guess, like, it kind of starts with a long time ago in

38
00:02:42,396 --> 00:02:45,942
a land far, far away kind of thing, right? Like charity. I've been doing this

39
00:02:45,958 --> 00:02:49,366
for 25 years and change, but I guess

40
00:02:49,390 --> 00:02:53,038
observability started probably around the same time charity started saying it.

41
00:02:53,166 --> 00:02:56,446
But it's stuff I'd been doing for years before. And I think that's

42
00:02:56,470 --> 00:03:00,446
an important point. This is all stuff we've been doing throughout,

43
00:03:00,510 --> 00:03:03,686
but we're getting better at it. So the term

44
00:03:03,790 --> 00:03:07,590
is relatively new in the consciousness, in tech, but I think

45
00:03:07,702 --> 00:03:10,966
what we're actually doing is a better version of what we

46
00:03:10,990 --> 00:03:14,272
used to do. So that's kind of my take on

47
00:03:14,288 --> 00:03:17,472
it, right? I don't remember exactly when I started using it. It was probably the

48
00:03:17,488 --> 00:03:20,764
first time I heard it from charity or somebody else like that.

49
00:03:21,304 --> 00:03:25,296
For me, I got into observability because of charity. I stumbled across one

50
00:03:25,320 --> 00:03:29,152
of your tweets randomly one night and started

51
00:03:29,208 --> 00:03:32,616
following you on Twitter. And then I got like really into it when I was

52
00:03:32,680 --> 00:03:35,976
hired to be a manager on an observability team at

53
00:03:36,000 --> 00:03:39,018
two cows. That two cows,

54
00:03:39,066 --> 00:03:42,854
if anyone remembers those days. I do remember

55
00:03:44,594 --> 00:03:48,058
it was that two cows, but they had changed their, their business.

56
00:03:48,226 --> 00:03:51,266
So obviously it wasn't like downloading Windows software.

57
00:03:51,330 --> 00:03:54,778
They were doing a domain domain wholesale

58
00:03:54,946 --> 00:03:58,634
when I joined. So anyway, yeah, so I was hired

59
00:03:58,674 --> 00:04:02,378
to manage this observability team and I was like, oh shit,

60
00:04:02,546 --> 00:04:06,186
I better know what this thing is if I'm going to manage a team.

61
00:04:06,250 --> 00:04:09,492
And so I started like educating myself

62
00:04:09,548 --> 00:04:13,428
and asking lots of questions on the interwebs and blogging about it to

63
00:04:13,476 --> 00:04:16,748
educate myself and discovered that I really like the stuff.

64
00:04:16,796 --> 00:04:19,436
So that's how I got into it. And you were so good at it.

65
00:04:19,460 --> 00:04:22,676
Like, I just remember these articles starting to pop out from out of

66
00:04:22,700 --> 00:04:26,284
nowhere. Just like, you kept writing about all these things, but it was like so

67
00:04:26,324 --> 00:04:29,428
succinct and so well informed and so grounded in actual experience.

68
00:04:29,516 --> 00:04:32,964
And I was like, this person knows what they're talking about. This is cool.

69
00:04:33,004 --> 00:04:35,724
We should be friends. Thank you.

70
00:04:37,904 --> 00:04:40,364
Well, thanks for letting us know how y'all got started.

71
00:04:40,704 --> 00:04:44,216
And if now in your journey, like, what is one thing that

72
00:04:44,240 --> 00:04:47,920
you wish you can get across? Like, any attendees had? Like, only one

73
00:04:47,952 --> 00:04:51,416
thing that you can nail down today. The way you're doing it now is the

74
00:04:51,440 --> 00:04:55,432
hard way. Oh my God. Like, I can't. I don't know how many times he's

75
00:04:55,448 --> 00:04:59,216
been like, wow, our team hasn't really mastered like 1.0 stuff,

76
00:04:59,240 --> 00:05:02,408
so I don't think we're ready for 2.0, which is something we would never say

77
00:05:02,456 --> 00:05:05,850
about any other version. I'm not ready for my sequel. Twelve. We haven't found

78
00:05:05,912 --> 00:05:09,238
all the bugs in mysql eight yet. No. The way people are

79
00:05:09,246 --> 00:05:12,702
doing, going back to Windows three, it's all about the windows three.

80
00:05:12,838 --> 00:05:17,158
Yeah. Like the way the level of difficulty

81
00:05:17,206 --> 00:05:20,502
of dealing with metrics and cost management and trying

82
00:05:20,558 --> 00:05:24,670
to like, because, you know, metrics, time series databases store

83
00:05:24,782 --> 00:05:28,358
no connective tissue. They store no context, no relational data.

84
00:05:28,486 --> 00:05:32,286
And so when you're trying to understand your systems, the only thing

85
00:05:32,310 --> 00:05:35,992
that connects your dashboards and your logs and your traces and your rum and

86
00:05:36,008 --> 00:05:39,808
your ap, only thing is you. You sitting here guessing

87
00:05:39,936 --> 00:05:43,648
and, like, remembering past outages and

88
00:05:43,696 --> 00:05:47,008
having instinctive, like, intuitive leaps.

89
00:05:47,176 --> 00:05:51,004
It's really freaking hard. And it can be so much easier.

90
00:05:51,624 --> 00:05:54,616
I want charity on that, but I think I'll give it my own flavor,

91
00:05:54,640 --> 00:05:57,928
which is most of my career, at least the last 1015 years.

92
00:05:58,056 --> 00:06:01,654
A common thing people ask me is, hey, teach me to do that thing

93
00:06:01,694 --> 00:06:05,262
you do in incidents, right? And they'll be like, you know that thing where

94
00:06:05,398 --> 00:06:08,270
you show up and you pull up a couple of dashboards and you go,

95
00:06:08,302 --> 00:06:11,518
it's this thing, right? Because. Because I have this

96
00:06:11,566 --> 00:06:15,014
deep mental model of the system, right? And it's so freaking hard to

97
00:06:15,054 --> 00:06:18,310
teach. And basically, like, what we end up saying a lot of times is like,

98
00:06:18,342 --> 00:06:21,314
well, you kind of have to experience it to build that intuition.

99
00:06:21,974 --> 00:06:25,958
That's a terrible answer for teaching anybody anything, right? Like, people need

100
00:06:26,006 --> 00:06:30,312
something to start on. They need some way to start going down that journey instead

101
00:06:30,328 --> 00:06:33,364
of being dumped in a sea of, as charity put it, like,

102
00:06:33,704 --> 00:06:36,804
context less metrics. Now,

103
00:06:37,184 --> 00:06:40,524
as we move into this easier mode and we go into the easier way,

104
00:06:40,904 --> 00:06:44,504
obviously now I can dump my engineers into, hey, look, this is what your

105
00:06:44,544 --> 00:06:47,616
system looks like, and you can click around and explore it and start to

106
00:06:47,640 --> 00:06:51,512
see what it's actually doing instead of trying to reason backwards from a

107
00:06:51,528 --> 00:06:55,050
bunch of meaningless logs, which actually, weirdly, gets worse

108
00:06:55,082 --> 00:06:58,738
with structured logs. For me, I would say I definitely agree

109
00:06:58,786 --> 00:07:02,290
with both of you. I think the one thing that I've noticed

110
00:07:02,362 --> 00:07:05,794
is, like, people still insist on

111
00:07:05,874 --> 00:07:09,450
continuing to build shitty

112
00:07:09,482 --> 00:07:12,954
products and not take a moment to instrument their

113
00:07:12,994 --> 00:07:16,234
code to understand why their products continue behaving

114
00:07:16,274 --> 00:07:19,494
shittily. And so

115
00:07:19,914 --> 00:07:23,510
I think that's like, the most frustrating thing that I've observed is

116
00:07:23,542 --> 00:07:27,238
like, you know, the analogy I like to use is like, your house is burning

117
00:07:27,286 --> 00:07:31,054
down. Are you going to continue building out the bedroom? Because it makes

118
00:07:31,094 --> 00:07:34,998
no freaking sense. Okay. But my product manager said I need a

119
00:07:35,006 --> 00:07:38,342
bedroom feature, and that's the most thing I

120
00:07:38,358 --> 00:07:41,894
could be working on right now. But do you have a front door

121
00:07:41,934 --> 00:07:45,086
that works? Yeah. Right? Product said.

122
00:07:45,110 --> 00:07:48,274
That's okay, right? I have to focus on the bedroom.

123
00:07:49,684 --> 00:07:52,464
We need to win a new bedroom out fast.

124
00:07:53,084 --> 00:07:56,292
The fire is the features that we already built. Those. Those are in the

125
00:07:56,308 --> 00:07:58,344
past. We don't, we don't, we never look back.

126
00:08:02,764 --> 00:08:06,428
That's quite fair. I, I heard some chatter about

127
00:08:06,476 --> 00:08:10,052
observability 2.0. I had a question around where observability is headed.

128
00:08:10,108 --> 00:08:12,224
Would any of you like to chime in?

129
00:08:12,884 --> 00:08:16,222
Yeah. Yeah. Like I think, um, what's going to

130
00:08:16,238 --> 00:08:19,110
happen over the next few years is people are going to go through all their

131
00:08:19,142 --> 00:08:22,446
applications and they're going to log, and then

132
00:08:22,470 --> 00:08:25,902
what's going to happen though is then their CFO is going to call and

133
00:08:25,918 --> 00:08:28,902
say what happened? Um, and then,

134
00:08:28,958 --> 00:08:32,638
and then people have to come back to the drawing board and start over.

135
00:08:32,806 --> 00:08:35,310
And then they're going to start to realize that we need to actually like,

136
00:08:35,382 --> 00:08:38,814
put some context into this, uh, bundle up more of these,

137
00:08:38,934 --> 00:08:41,486
um, attributes and edges and edges,

138
00:08:41,550 --> 00:08:45,028
um, cardinality, right. Like they're the attributes

139
00:08:45,076 --> 00:08:48,932
on there and put them in a succinct way so

140
00:08:48,948 --> 00:08:52,956
that we get value from that data. Right. Because our CFO's

141
00:08:52,980 --> 00:08:56,812
aren't like afraid of spending money. That's their whole job. They love it, actually.

142
00:08:56,988 --> 00:08:59,904
What they hate is when you spend money on dumb stuff.

143
00:09:00,244 --> 00:09:03,516
And so if you want to make your CFO happy, like don't go put logs

144
00:09:03,540 --> 00:09:07,904
on everything, go and use your judgment to put the right

145
00:09:08,084 --> 00:09:11,400
signals in the right places. And usually that's

146
00:09:11,432 --> 00:09:14,400
easier in this day and age with like open telemetry,

147
00:09:14,432 --> 00:09:17,632
auto instrumentation. So if you have auto instrumenter, you do that a few

148
00:09:17,688 --> 00:09:20,084
steps and now you've got high signal.

149
00:09:20,504 --> 00:09:23,744
So I think that's where things are going, right? Is now that we've freed these

150
00:09:23,784 --> 00:09:27,440
SDKs from being like vendor specific, it's no

151
00:09:27,472 --> 00:09:30,696
longer like vendor lock in for me to actually integrate them with my application.

152
00:09:30,760 --> 00:09:34,076
I can immigrate open telemetry under the, usually the Apache license.

153
00:09:34,200 --> 00:09:36,596
So I don't have to worry about licensing, I don't have to worry about vendor

154
00:09:36,620 --> 00:09:39,812
lock in. And so things are moving faster, the tools are

155
00:09:39,828 --> 00:09:43,284
getting better, the tools you all make at ServiceNow

156
00:09:43,364 --> 00:09:47,396
and at Honeycomb and even the open source stuff is all improving rather rapidly

157
00:09:47,420 --> 00:09:50,252
over the last few years. So I think it's just going to keep growing more

158
00:09:50,268 --> 00:09:54,932
and more towards tracing and hopefully we'll see a little less emphasis

159
00:09:54,988 --> 00:09:58,104
on metrics and logs over the next like five, five ish years.

160
00:09:59,044 --> 00:10:03,046
Yeah, I mean, so big question.

161
00:10:03,150 --> 00:10:06,622
Yeah. So like, the difference between observability 1.0 and 2.0, for those

162
00:10:06,638 --> 00:10:10,094
who are kind of new to this space, is 1.0. Tools have

163
00:10:10,134 --> 00:10:13,870
many sources of truth, right? The traditional thing is there are three pillars,

164
00:10:13,942 --> 00:10:17,446
metrics, logs and traces, which you probably know that none of us think very highly

165
00:10:17,470 --> 00:10:20,766
of. But in reality, like, you've got way more than three, right? You've got your

166
00:10:20,790 --> 00:10:23,558
apm, you've got your rom, you've got your dashboard, you've got your logs, but you've

167
00:10:23,566 --> 00:10:26,040
got structured, unstructured traces, profiling,

168
00:10:26,142 --> 00:10:29,364
whatever, many sources of truth, and nothing

169
00:10:29,404 --> 00:10:31,424
knits them together except you.

170
00:10:32,124 --> 00:10:35,452
In your 2.0 world, you have a single source of

171
00:10:35,468 --> 00:10:38,676
truth. It's these arbitrarily wide structured. You can

172
00:10:38,700 --> 00:10:42,104
call them logs, column logs, if you want. I'm not opposed to calling them logs,

173
00:10:42,684 --> 00:10:45,708
but you have the information so that you can visualize them over time as a

174
00:10:45,716 --> 00:10:49,372
trace. You can slice and dice them like logs,

175
00:10:49,548 --> 00:10:52,932
you can derive metrics from them, you can derive your dashboards, you can derive

176
00:10:52,948 --> 00:10:56,304
your slos, but because there's one source of truth,

177
00:10:57,204 --> 00:11:00,660
you can actually ask any arbitrary question of them, which means

178
00:11:00,692 --> 00:11:03,972
you can understand anything that's happening. And so, in the near term,

179
00:11:04,028 --> 00:11:07,412
what this means is the most impactful thing you can probably

180
00:11:07,468 --> 00:11:11,100
do is wherever you've got metrics,

181
00:11:11,212 --> 00:11:15,164
stop. Stop sending money and engineering

182
00:11:15,204 --> 00:11:18,772
cycles into the money hole. That is, metrics. Reallocate that to logs.

183
00:11:18,908 --> 00:11:22,568
And where you've got logs, make sure they're structured. And where you've got structured logs,

184
00:11:22,676 --> 00:11:27,400
make them as wide as you can. You want to have fewer loglines,

185
00:11:27,592 --> 00:11:31,072
wider ones, because the wider they are, the more context

186
00:11:31,128 --> 00:11:34,592
you have, the more connectivity you have, the more your ability to

187
00:11:34,608 --> 00:11:38,152
just instantly compute and see outliers and weird

188
00:11:38,208 --> 00:11:42,016
things and like, you know, correlate and all this stuff, the more powerful your

189
00:11:42,040 --> 00:11:46,024
ability is to understand your systems in general. So while this sounds pretty complicated,

190
00:11:46,104 --> 00:11:50,514
I think it's actually really simple. Fewer, wider logwise,

191
00:11:51,454 --> 00:11:55,286
if I may add to that, because I love that,

192
00:11:55,430 --> 00:11:59,406
and I think it, to me,

193
00:11:59,470 --> 00:12:03,238
I interpret it as treating

194
00:12:03,286 --> 00:12:07,230
all this. Your main thing is the event, and the

195
00:12:07,262 --> 00:12:11,782
event can be made

196
00:12:11,838 --> 00:12:15,030
into whatever you need it to be. Anything can be derived from the event.

197
00:12:15,102 --> 00:12:18,090
You can correlate on any of the attributes, right? Yeah,

198
00:12:18,122 --> 00:12:21,898
exactly. You have your choice at query time what you're going to correlate on.

199
00:12:22,066 --> 00:12:24,994
Yeah, exactly like your. But your base, like everything,

200
00:12:25,074 --> 00:12:28,338
stems from this event. And then, you know, it can be

201
00:12:28,426 --> 00:12:32,266
whatever. But the other thing that I wanted to mention as well

202
00:12:32,370 --> 00:12:36,226
is like, treating observability, is not this like

203
00:12:36,370 --> 00:12:39,842
afterthought, you know, I think a lot of people have schlepped

204
00:12:39,898 --> 00:12:43,758
observability to the end of the SDLC, shifting it

205
00:12:43,846 --> 00:12:47,582
as, as right as possible. And we need to really start

206
00:12:47,638 --> 00:12:51,606
thinking of observability as a more shift left, like an integrated part of

207
00:12:51,630 --> 00:12:55,214
our SDLC. Right. Because guess who's going to instrument

208
00:12:55,254 --> 00:12:58,670
the code? It's going to be the developers, but the qas are going to take

209
00:12:58,702 --> 00:13:02,502
advantage of that. Who do you have to convince? Who do you have

210
00:13:02,518 --> 00:13:06,102
to convince? Oh, that's the trick. I mean you don't have

211
00:13:06,118 --> 00:13:08,706
to convince the developers. The developers love this shit.

212
00:13:08,870 --> 00:13:12,034
But. Yeah, yeah, yeah. It's usually like they're, it's usually

213
00:13:12,074 --> 00:13:15,578
their leadership team that doesn't understand the value. Right. It is obvious and

214
00:13:15,586 --> 00:13:18,850
that's usually. Yeah. Anyway, I interrupted you. Oh no, that's fine.

215
00:13:18,882 --> 00:13:22,282
No, that's a very fair point. And this is somewhere where

216
00:13:22,378 --> 00:13:25,578
I feel like another, like. So there's a super

217
00:13:25,626 --> 00:13:28,418
basic level, you know, it's, you've got one source of truth or many, but there

218
00:13:28,426 --> 00:13:32,202
are so many socio technical factors and consequences that flow from this fundamental,

219
00:13:32,258 --> 00:13:36,078
like the way that you arrange your data on disk change. One of

220
00:13:36,086 --> 00:13:39,822
them is I think that observability 1.0 is really about

221
00:13:39,958 --> 00:13:43,686
how you operate your code. Right. It's about how you run it. It's kind of

222
00:13:43,710 --> 00:13:47,526
the afterthought as you're getting ready to play it. Observability 2.0 is

223
00:13:47,550 --> 00:13:50,878
about how you develop your code, which includes operating, of course,

224
00:13:50,926 --> 00:13:54,198
but it's the substrate that allows you

225
00:13:54,206 --> 00:13:58,078
to hook up these really tight feedback loops and

226
00:13:58,166 --> 00:14:01,664
pick up speed. And there's so much what I think of, just like dark

227
00:14:01,704 --> 00:14:05,040
matter and software engineering was just like, why is everything so slow?

228
00:14:05,152 --> 00:14:08,744
Why you can't do UDa without the first o?

229
00:14:08,824 --> 00:14:11,872
It's just ODA, just orient, decide,

230
00:14:11,928 --> 00:14:14,724
act like that's. I've worked at companies like that,

231
00:14:15,544 --> 00:14:19,304
they haven't really done much, but being

232
00:14:19,344 --> 00:14:22,896
able to see what you're doing, being able to move swiftly with confidence,

233
00:14:23,040 --> 00:14:27,264
it's like a whole different profession when you, when you, when your development cycle includes

234
00:14:27,304 --> 00:14:31,214
professionals, production, like when you look at the door metrics and how year over year

235
00:14:31,334 --> 00:14:34,822
the good teams are getting, they're like achieving liftoff and most of us

236
00:14:34,838 --> 00:14:37,430
are just getting slightly worse year over year.

237
00:14:37,582 --> 00:14:41,102
That's, I attribute a lot of that to the quality of

238
00:14:41,118 --> 00:14:44,806
your observability. I think that how

239
00:14:44,830 --> 00:14:47,662
I see it, right? Like, because a lot of why it's happening is the increasing

240
00:14:47,718 --> 00:14:51,742
complexity of our stacks too. Yeah. And so we got away with it before.

241
00:14:51,878 --> 00:14:55,144
15 years ago, our stacks were limited to a few

242
00:14:55,184 --> 00:14:59,240
servers and a few services. And now

243
00:14:59,352 --> 00:15:03,204
you can have a easily have a single product that has 50 70 services

244
00:15:03,504 --> 00:15:07,032
distributed across the world. And you can't grapple with the

245
00:15:07,048 --> 00:15:10,496
complexity like that with disparate tools anymore. Good luck reading

246
00:15:10,560 --> 00:15:14,424
lines of code and understanding what it's doing anymore. Like, you can't.

247
00:15:14,584 --> 00:15:17,888
If you ever cut, you really can't. Now you can only understand

248
00:15:17,976 --> 00:15:21,116
it by including production into your core

249
00:15:21,140 --> 00:15:24,876
development loop. Sorry,

250
00:15:24,900 --> 00:15:27,820
I was going to say also, like, this is why I get, like, so mad,

251
00:15:27,852 --> 00:15:31,692
too, when you have, like, people at companies who are like, let's continue

252
00:15:31,788 --> 00:15:35,060
doing dashboards the way that we used to before because it

253
00:15:35,092 --> 00:15:38,468
worked for me 15 years ago when it was wildly successful.

254
00:15:38,636 --> 00:15:41,860
But what they're saying, though, right? What these folks are reaching

255
00:15:41,892 --> 00:15:45,776
for is they, they, there is

256
00:15:45,800 --> 00:15:49,488
a way that we've encoded what charity is talking about, like the mental model.

257
00:15:49,616 --> 00:15:52,800
So the reason why people would often hire people like me is they'd say,

258
00:15:52,832 --> 00:15:56,032
hey, come in, figure out our system and build us some

259
00:15:56,088 --> 00:16:00,472
dashboards. And I have leaders right now that are asking for dashboards.

260
00:16:00,648 --> 00:16:03,856
And I'm trying to explain, I'm saying, well, do you actually want

261
00:16:03,880 --> 00:16:07,004
a dashboard, or are you asking me if the team understands their service?

262
00:16:07,344 --> 00:16:11,204
They're not the same, but they actually do get conflated pretty frequently.

263
00:16:11,964 --> 00:16:14,544
I think that's that real difference that's emerging.

264
00:16:15,244 --> 00:16:18,764
That's an amazing point. Bringing me to my next question, like, what are some

265
00:16:18,804 --> 00:16:22,460
ways that we can validate that quality of our data? We can say, hey,

266
00:16:22,492 --> 00:16:26,052
we're instrumenting, we're getting all of our different resources.

267
00:16:26,108 --> 00:16:29,396
We have some attributes that we can look at, but how do you

268
00:16:29,420 --> 00:16:30,984
know that the work is working?

269
00:16:34,204 --> 00:16:36,780
Because you're not moving very slowly. I think it's nuts,

270
00:16:36,812 --> 00:16:40,492
too. Another interesting thing that is sort of a characteristic of the 1.0

271
00:16:40,508 --> 00:16:44,428
to 2.0 shift, which is that if all we do is stuff

272
00:16:44,476 --> 00:16:47,700
the same data into a faster storage engine and stuff with

273
00:16:47,732 --> 00:16:50,572
more like that will. It will be better, but will be kind of a lost

274
00:16:50,628 --> 00:16:54,180
opportunity, because I feel like you can't run a

275
00:16:54,212 --> 00:16:57,268
business with metrics right on the business side of the house. They have had nice

276
00:16:57,316 --> 00:17:00,780
things for a very long time. They've had these columnar stores. You can slice and

277
00:17:00,812 --> 00:17:04,244
dice, you can break down a group by, you can zoom in, you can zoom

278
00:17:04,284 --> 00:17:07,972
out, you can ask all these fancy questions about your marketing or

279
00:17:07,988 --> 00:17:11,522
your click throughs, or like, your sales conversions and all stuff. It's only,

280
00:17:11,618 --> 00:17:15,282
it's like the cobbler's children have no shoes. It's only on the systems

281
00:17:15,298 --> 00:17:18,610
and application side that we're like, we're just going to get by on starvation rations,

282
00:17:18,682 --> 00:17:22,498
thank you very much. But, like, the future, I think,

283
00:17:22,546 --> 00:17:26,066
as, you know, as it becomes increasingly uncool for engineers to just be

284
00:17:26,090 --> 00:17:29,050
like, I don't care about the business. All I do is care about the tech,

285
00:17:29,082 --> 00:17:32,594
right? Like, we know that doesn't work anymore, and yet we're still siloing

286
00:17:32,634 --> 00:17:35,330
off business data from application data, from systems data,

287
00:17:35,442 --> 00:17:39,742
when all of the interesting questions that you need to ask are a combination.

288
00:17:39,918 --> 00:17:43,358
They're a combination of systems, user data,

289
00:17:43,526 --> 00:17:47,734
how users are interacting with your systems, application data, and business.

290
00:17:47,894 --> 00:17:51,118
Right? And, like, when you have all of these different

291
00:17:51,166 --> 00:17:54,222
teams using different tools that are siloed off from each other.

292
00:17:54,358 --> 00:17:57,718
That's why shit gets so slow. How are we going to know when we're doing

293
00:17:57,766 --> 00:18:01,782
well, because we can move fast. And that sounds kind of like

294
00:18:01,918 --> 00:18:05,238
hand wavy, but it's actually the only thing that

295
00:18:05,286 --> 00:18:08,354
matters. You can't run fast if you're dragging a.

296
00:18:08,884 --> 00:18:12,492
A boat anchor behind you, right? And if

297
00:18:12,508 --> 00:18:16,664
you don't have good tools to understand where you are and where you're going next,

298
00:18:17,444 --> 00:18:20,716
might as well just tie that boat anchor up. And I'd say the

299
00:18:20,740 --> 00:18:23,996
quality of the data, too. Like, you know, you can instrument your code

300
00:18:24,020 --> 00:18:26,956
full of crap. I think, you know, a mistake that a lot of people make

301
00:18:26,980 --> 00:18:30,164
when they start instrumenting their code is like, auto instrumentation

302
00:18:30,204 --> 00:18:33,628
is salvation. Right? That's awesome. It's a great starting point, but, like,

303
00:18:33,716 --> 00:18:37,100
you'll learn very fast that it produces a lot of crap that you don't need.

304
00:18:37,132 --> 00:18:39,732
And now you have to wade through the crap. And I think when you get

305
00:18:39,748 --> 00:18:43,274
to the point in your instrumentation where, like,

306
00:18:43,394 --> 00:18:46,626
say, you write your code, you hand

307
00:18:46,650 --> 00:18:50,274
it over to QA, if your qas can start to

308
00:18:50,314 --> 00:18:53,786
figure out why a problem is occurring when they're running

309
00:18:53,810 --> 00:18:57,370
their tests and go back to the developer and say, hey, I know why you've

310
00:18:57,402 --> 00:19:01,210
instrumented your code sufficiently. If they can't figure out what's going on,

311
00:19:01,402 --> 00:19:05,494
then it's also an indicator you haven't instrumented your code sufficiently,

312
00:19:06,214 --> 00:19:09,454
so we can actually help to improve the process

313
00:19:09,574 --> 00:19:12,994
earlier on before it gets to our sres,

314
00:19:13,294 --> 00:19:16,430
before they're like, what's going on? I don't know what's going

315
00:19:16,462 --> 00:19:19,674
on. Yeah. And, well, post QA, where you want to be is

316
00:19:20,054 --> 00:19:23,302
you want that observability loop. And actually, that's how

317
00:19:23,318 --> 00:19:26,114
you tell if it's working is because every time you make a change,

318
00:19:26,454 --> 00:19:30,022
if you go out and look at your data, you've now one gotten value from

319
00:19:30,038 --> 00:19:33,044
that data right away. And then two,

320
00:19:33,384 --> 00:19:36,456
you know that your stuff is working not just the code you

321
00:19:36,480 --> 00:19:40,072
wrote, but also your observability system. And so you're just kind of continually

322
00:19:40,168 --> 00:19:43,264
evaluating that. And that's, I think, part of the job now.

323
00:19:43,344 --> 00:19:46,152
Right. Unless you're still in like, a waterfall shop,

324
00:19:46,288 --> 00:19:50,040
which is still like, honestly, the vast majority of tech.

325
00:19:50,192 --> 00:19:53,552
Yeah. In a way that, like, 15 years

326
00:19:53,568 --> 00:19:57,700
ago, we were all getting used to going from a model where my code

327
00:19:57,732 --> 00:20:01,196
compiles, it must be good over to, like,

328
00:20:01,340 --> 00:20:05,492
my test pass. That's how I know it's good, you know,

329
00:20:05,548 --> 00:20:08,732
now I think we're moving into the world where you don't know if it's good

330
00:20:08,748 --> 00:20:12,180
if your test pass or not. All you know is that your

331
00:20:12,212 --> 00:20:15,324
code is probably, logically, the magic smoke is still inside

332
00:20:15,364 --> 00:20:18,716
the box. Right. That's what I tell people even back at the beginning.

333
00:20:18,740 --> 00:20:22,676
Like, the first CI CD system I deployed, it was using smoke or smoke

334
00:20:22,700 --> 00:20:25,764
test. It was a python thing way early. Um,

335
00:20:25,884 --> 00:20:29,476
right. But the reason it was called that is from an old ee term,

336
00:20:29,620 --> 00:20:32,524
um, which is called the smoke test, which is the first time you power up

337
00:20:32,564 --> 00:20:35,868
a circuit, you put power on it. You don't care about the inputs

338
00:20:35,876 --> 00:20:39,052
or outputs. You just see if the magic smoke comes out. Right. If the

339
00:20:39,068 --> 00:20:42,532
chip goes and you get a little puff of smoke, you failed to smoke test.

340
00:20:42,588 --> 00:20:46,700
Right. And most of our unit tests are basically smoke tests. Right. We're applying some

341
00:20:46,732 --> 00:20:50,044
power and see if the magic smoke comes out. It gets a little bit higher

342
00:20:50,084 --> 00:20:53,500
value. Once you get into functional testing or, or full integration testing,

343
00:20:53,532 --> 00:20:57,526
maybe in a staging environment, nothing will ever behave

344
00:20:57,590 --> 00:21:01,030
the same as production because there are so many freaking parameters

345
00:21:01,062 --> 00:21:04,286
that we can never reproduce. Because production isn't production from

346
00:21:04,310 --> 00:21:07,630
moment to moment either. People should

347
00:21:07,662 --> 00:21:11,486
never ship a diff without validating it's

348
00:21:11,510 --> 00:21:13,954
doing what I expect it to do and nothing else looks weird.

349
00:21:14,854 --> 00:21:18,462
Do you all have some tips for folks to get comfortable on

350
00:21:18,518 --> 00:21:21,838
that data that they're observing? Just to get more comfortable looking

351
00:21:21,886 --> 00:21:25,782
around at it? Or apart from doing the iteration of I'm

352
00:21:25,798 --> 00:21:29,052
going to go instrument something as coding c shows up. But, like,

353
00:21:29,188 --> 00:21:32,460
how do you actually understand what that is and, like, how that plays into,

354
00:21:32,492 --> 00:21:36,024
like, the bigger mental model of a system? Look at it.

355
00:21:37,804 --> 00:21:40,956
Yeah, I was gonna say I have a product feature I use, which is every

356
00:21:40,980 --> 00:21:44,772
once in a while, I go into our honeycomb and I go into

357
00:21:44,908 --> 00:21:48,476
the searches everybody else has run, and I go snoop in

358
00:21:48,500 --> 00:21:52,064
on their searches. And so I can see, like, what other people are looking,

359
00:21:52,424 --> 00:21:55,440
looking at. And then often they'll be like, oh, that one's interesting. Like, what problem

360
00:21:55,472 --> 00:21:57,592
are they working on? I'll dm them later if it's really interesting. Be like,

361
00:21:57,608 --> 00:22:00,696
hey, what was that? But that's, that's one of my favorites right

362
00:22:00,720 --> 00:22:04,176
there. It's like because I can see what other teams are doing, too. Yeah.

363
00:22:04,280 --> 00:22:07,816
I mean, so much of this is about knowing

364
00:22:07,840 --> 00:22:10,976
what good looks like and, you know, that this is why I

365
00:22:11,000 --> 00:22:14,016
always pair is it doing what I expect it to do? And does anything else

366
00:22:14,040 --> 00:22:17,364
look weird? And there's something that's irreducible about that,

367
00:22:17,904 --> 00:22:21,576
you know, because you don't know what you don't know. But if

368
00:22:21,600 --> 00:22:25,294
you make a practice of looking at this, you'll start to know if there's

369
00:22:25,334 --> 00:22:28,854
something that you don't know there. And this is where,

370
00:22:28,894 --> 00:22:31,990
like, I feel like another of the shifts from 1.0 to 2.0 is a shift

371
00:22:32,022 --> 00:22:35,614
from known unknowns to unknown unknowns, which parallels

372
00:22:35,654 --> 00:22:38,710
the shift from going from all of your aggregating at right time,

373
00:22:38,782 --> 00:22:42,198
where you're like, okay, future me is only ever going to want to ask these

374
00:22:42,246 --> 00:22:45,726
questions. So I'm defining them now, collecting that data. Future me

375
00:22:45,750 --> 00:22:49,118
is very average. I don't know

376
00:22:49,126 --> 00:22:52,070
what's going to happen, right. So I'm just going to collect the telemetry I can,

377
00:22:52,222 --> 00:22:54,606
I'm going to store the raw results and I'm going to have the ability to

378
00:22:54,630 --> 00:22:57,980
slice and dice and breakdown and group by and explore and zoom in and zoom

379
00:22:58,012 --> 00:23:00,708
out and all this other stuff because you don't know what you don't know.

380
00:23:00,796 --> 00:23:04,304
And so much of debugging boils down to this very simple,

381
00:23:04,724 --> 00:23:08,304
simple loop, which is, here's the thing I care about.

382
00:23:09,004 --> 00:23:12,188
Why? Why do I care about it? Which means how is it different from everything

383
00:23:12,236 --> 00:23:15,852
that I don't care about it? One other thing that

384
00:23:15,868 --> 00:23:19,020
I would add to this is like, and it happened to me as like

385
00:23:19,052 --> 00:23:22,772
an aha moment I was, I think I added something to the open

386
00:23:22,868 --> 00:23:25,910
telemetry demo, the community demo.

387
00:23:26,022 --> 00:23:29,142
And I'm like, how do I know what's going on? I'm like, wait,

388
00:23:29,238 --> 00:23:30,874
I can instrument it.

389
00:23:32,614 --> 00:23:36,246
And I think, like, if you can instrument your code

390
00:23:36,350 --> 00:23:40,382
and then use whatever observability backend to

391
00:23:40,518 --> 00:23:43,782
understand what's going on,

392
00:23:43,918 --> 00:23:47,814
then I think that's already like, you know, like developers

393
00:23:47,854 --> 00:23:51,574
have to, developers should get into the habit of

394
00:23:51,614 --> 00:23:55,550
debugging their own code by using the instrumentation that

395
00:23:55,582 --> 00:23:59,172
they add to their code. Yep. Which is

396
00:23:59,348 --> 00:24:03,184
right. The ultimate answer here is like,

397
00:24:03,484 --> 00:24:07,100
it's just like playing piano or playing any music instrument or

398
00:24:07,132 --> 00:24:10,644
really any kind of detailed skill, right? You have to do the

399
00:24:10,684 --> 00:24:14,444
thing to get good at the thing. That's, it's neuroplasticity,

400
00:24:14,484 --> 00:24:18,660
right? Like your brain builds that ability to reason and make the intuitional

401
00:24:18,692 --> 00:24:21,504
jumps by doing the practice.

402
00:24:22,184 --> 00:24:25,136
And the other neat thing about this though is when I say it that way,

403
00:24:25,160 --> 00:24:27,096
to a lot of people it sounds like, oh my God, it's going to take

404
00:24:27,120 --> 00:24:30,648
as long as learning the piano. But the good news is it doesn't because

405
00:24:30,696 --> 00:24:33,816
you can learn the piano. Most people can if you play for ten minutes a

406
00:24:33,840 --> 00:24:37,288
day. If you just do it every day. That's where I

407
00:24:37,296 --> 00:24:40,336
think for developers who want to get really good at their jobs, and I don't

408
00:24:40,360 --> 00:24:43,720
mean just observability, but their job in general, if they're getting

409
00:24:43,752 --> 00:24:47,120
in, looking at their metrics, looking at their traces every day that they're

410
00:24:47,152 --> 00:24:50,268
working, or at least once a week would be a huge improvement for a lot

411
00:24:50,276 --> 00:24:54,380
of folks. They'll get that practice, the practice

412
00:24:54,412 --> 00:24:57,948
of reasoning. It's not about the fingers, it's about

413
00:24:58,076 --> 00:25:01,716
your thought process and burning that in. And to

414
00:25:01,740 --> 00:25:05,148
me, this is what defines a senior engineer, someone who can

415
00:25:05,196 --> 00:25:09,492
follow and understand their code in

416
00:25:09,508 --> 00:25:12,748
the real world environment. And it's not as hard as with the

417
00:25:12,756 --> 00:25:16,666
right tools. It's another like shift from 1.02 window I think is

418
00:25:16,850 --> 00:25:20,986
shifting from tools where like the substrate was low

419
00:25:21,050 --> 00:25:24,098
level hardware counters.

420
00:25:24,226 --> 00:25:27,642
Like, here's how many kinds of ram we have, here's the cpu's we have.

421
00:25:27,698 --> 00:25:30,970
Okay, cool. Can't you just ship some code, tell me whether

422
00:25:31,002 --> 00:25:34,826
it's working or not. It's like, I don't think

423
00:25:34,850 --> 00:25:38,802
that's actually reasonable. But like, when you have tooling for software engineers, it speaks

424
00:25:38,818 --> 00:25:42,132
in the language of endpoints and APIs and functions

425
00:25:42,228 --> 00:25:45,732
and variables. Then you should be able to understand whether or not your code

426
00:25:45,748 --> 00:25:49,076
is working. Absolutely. I love that

427
00:25:49,100 --> 00:25:53,460
topic too, of just getting them more comfortable and changing that developer mindset.

428
00:25:53,572 --> 00:25:57,156
I know so many people that just code in the dark

429
00:25:57,220 --> 00:26:00,236
room and they never figure out how it actually translates to.

430
00:26:00,340 --> 00:26:04,024
We like figuring things out, we like understanding things,

431
00:26:04,524 --> 00:26:08,276
we like solving the puzzle, we like doing a good job. I feel

432
00:26:08,300 --> 00:26:12,030
like you have to punish people so much

433
00:26:12,062 --> 00:26:16,046
to like to like shake that curiosity

434
00:26:16,150 --> 00:26:19,662
out of them that it's such a, such a pity whenever you see

435
00:26:19,678 --> 00:26:22,358
that, you're like, oh, honey, what happened to you? Right?

436
00:26:22,406 --> 00:26:26,254
Because we naturally want this stuff. It gives us great dopamine

437
00:26:26,294 --> 00:26:29,830
hits. It's like, ah, I found it. Oh, I fixed it. People are using this

438
00:26:29,862 --> 00:26:32,434
like, there's nothing better in the world.

439
00:26:33,134 --> 00:26:36,350
Well, I'm gonna jump gears for us. I have some questions

440
00:26:36,382 --> 00:26:39,318
around buzzwords and, like, new trends.

441
00:26:39,486 --> 00:26:42,804
How is the AI movement helping or not helping people

442
00:26:42,844 --> 00:26:44,664
in their observability journey?

443
00:26:45,884 --> 00:26:49,944
Oh, that's a tough one. What are the first spicy takes on this?

444
00:26:52,364 --> 00:26:55,904
I would say that I think, like, should I go?

445
00:26:57,884 --> 00:26:59,904
Yeah, sorry.

446
00:27:01,644 --> 00:27:06,504
Network lag. You can start. Adriana. I was going to say sorry

447
00:27:07,224 --> 00:27:08,724
again. Am I?

448
00:27:11,224 --> 00:27:14,684
Oh, my God. So sorry. Editing.

449
00:27:15,624 --> 00:27:18,464
I was going to say, I think a lot of people,

450
00:27:18,544 --> 00:27:21,004
like, pin AI as a salvation,

451
00:27:22,144 --> 00:27:24,684
and we got to, like, chill.

452
00:27:26,224 --> 00:27:30,176
I see AI as an assistive technology, your buddy,

453
00:27:30,360 --> 00:27:33,780
where it's like, hey, you might want to look at this,

454
00:27:33,872 --> 00:27:37,100
but ultimately it's you, the human, who's going to say,

455
00:27:37,252 --> 00:27:40,292
all right, AI, interesting. But you're full

456
00:27:40,308 --> 00:27:43,356
of crap, or, all right, AI, interesting.

457
00:27:43,500 --> 00:27:46,908
This warrants, you know, further investigation. That's the

458
00:27:46,916 --> 00:27:49,504
way I see it. But I think people trying to, like,

459
00:27:50,284 --> 00:27:53,268
I don't know, just make AI,

460
00:27:53,316 --> 00:27:56,524
like, front and center the star of

461
00:27:56,564 --> 00:27:59,184
all the things. Like, gotta chill.

462
00:28:00,224 --> 00:28:03,728
So my spiciest take is that there are a lot of observability

463
00:28:03,816 --> 00:28:07,040
vendors in the space who are slathering AI on their

464
00:28:07,072 --> 00:28:10,928
products to try and patch over the fact that they don't have any connective

465
00:28:11,056 --> 00:28:14,656
data on the back end. They're like, well, shit. What we really want

466
00:28:14,680 --> 00:28:18,184
is just to be able to compute outliers and stuff, but we didn't store that

467
00:28:18,224 --> 00:28:21,632
data. So what if we just stab around in the dark and see

468
00:28:21,648 --> 00:28:25,040
if we can guess? Like, when it

469
00:28:25,072 --> 00:28:28,424
comes to. So there are determines. To be honest, that's some people's whole

470
00:28:28,464 --> 00:28:30,664
personality charity. I mean,

471
00:28:33,044 --> 00:28:36,892
yeah, you're right. There are

472
00:28:36,908 --> 00:28:40,356
deterministic problems and there are non deterministic problems, and I think that

473
00:28:40,540 --> 00:28:44,124
there's a lot of promise for generative AI when it comes to non deterministic problems.

474
00:28:44,164 --> 00:28:47,356
Like. Like the sort of messy work of, you know,

475
00:28:47,540 --> 00:28:50,620
every engineer knows their corner of the system intimately,

476
00:28:50,732 --> 00:28:53,940
but you have to debug the entire thing. So maybe we can use generative

477
00:28:53,972 --> 00:28:57,780
AI to sort of, like, learn how experts are integrate or are

478
00:28:57,852 --> 00:29:01,132
interacting with their corner of the system and use it to bring up everyone

479
00:29:01,188 --> 00:29:04,436
to the level of the best debugger in every corner of the system. That seems

480
00:29:04,460 --> 00:29:08,724
like a reasonable use or, like, the honeycomb use cases, which is natural

481
00:29:08,764 --> 00:29:12,652
language. Ask questions about your system and natural language, awesome. But when

482
00:29:12,668 --> 00:29:15,624
it comes to, like, deterministic things, like,

483
00:29:16,044 --> 00:29:19,476
here's the thing I care about. How is it different from everything? You don't want

484
00:29:19,500 --> 00:29:23,004
AI for that, you want computers. For that, you want it to compute

485
00:29:23,124 --> 00:29:26,516
and tell you what's different about the thing.

486
00:29:26,540 --> 00:29:29,822
You care about what you knew very quickly and easily if you

487
00:29:29,838 --> 00:29:34,406
have simply captured the connective tissue. So I

488
00:29:34,430 --> 00:29:37,870
also feel like there's a lot of, like, anything that's been shipped under the

489
00:29:37,942 --> 00:29:41,198
AI ops. I don't think I've ever heard anything, anyone say anything

490
00:29:41,246 --> 00:29:43,994
genuinely good about any of it. So, like,

491
00:29:45,294 --> 00:29:48,914
double exponential smoothing is a great forecasting algorithm,

492
00:29:49,974 --> 00:29:52,074
and I can call AI if I want to.

493
00:29:53,454 --> 00:29:56,990
That's true. In that case, we. We use AI to

494
00:29:57,022 --> 00:29:59,014
bubble up insights.

495
00:30:01,434 --> 00:30:04,266
You got to get your marketing on that. Charity, got to get our marketing on

496
00:30:04,290 --> 00:30:07,154
that. I think that there's some good stuff there.

497
00:30:07,194 --> 00:30:10,394
But the other thing about generative AI is, at this point, we're really

498
00:30:10,434 --> 00:30:13,826
just using it to generate a lot of lines of code. Like, this guy I

499
00:30:13,850 --> 00:30:17,130
work with has this great quote about, it's like having a really energetic junior engineer

500
00:30:17,162 --> 00:30:20,290
who types really fast, which is like, okay,

501
00:30:20,362 --> 00:30:23,780
but writing code has never been the hard part of software,

502
00:30:23,882 --> 00:30:27,024
and it will never be the hard part of software. And in some ways,

503
00:30:27,064 --> 00:30:30,696
we're just making the hard parts of software much harder, even harder,

504
00:30:30,720 --> 00:30:32,804
by generating so much shitty code.

505
00:30:33,544 --> 00:30:36,712
Yeah. I wanted to touch on something Adriana said,

506
00:30:36,768 --> 00:30:40,472
which I think you said, for a solution. And so what

507
00:30:40,488 --> 00:30:43,912
I think people are missing is that, like, what are the AI people

508
00:30:44,008 --> 00:30:47,256
desperate for? And what I think a lot of people are actually

509
00:30:47,320 --> 00:30:50,244
desperate to solve is, I mentioned earlier, complexity,

510
00:30:50,574 --> 00:30:54,126
right? Is, over the last few years, the complexity of everything that we

511
00:30:54,150 --> 00:30:56,794
build and operate has gotten out of control.

512
00:30:58,054 --> 00:31:02,534
Ten years of free money and whatever else happened, right? We just built these stacks.

513
00:31:02,614 --> 00:31:06,078
We've got so much going on, and people

514
00:31:06,126 --> 00:31:09,742
are struggling, people who maybe weren't there for the

515
00:31:09,758 --> 00:31:15,422
whole journey, people just younger than me and charity that

516
00:31:15,438 --> 00:31:18,670
are just looking at how much stuff there is and going, well, where do I

517
00:31:18,702 --> 00:31:22,016
even start, right? And I think leaders are

518
00:31:22,040 --> 00:31:25,632
doing this, too, and that's why the sales pitches are so damn effective, is because

519
00:31:25,688 --> 00:31:29,648
they're sitting there going, like, how do I grapple with this huge monstrosity

520
00:31:29,696 --> 00:31:32,880
I built and that I'm responsible for and I'm accountable for,

521
00:31:32,912 --> 00:31:36,728
which is what they really care about, and find answers.

522
00:31:36,896 --> 00:31:40,408
And so this is the age old human behavior, right? We look for answers

523
00:31:40,456 --> 00:31:43,776
anywhere we think we might find them, whether it's a guru or it's

524
00:31:43,800 --> 00:31:47,204
a machine that's babbling out the next syllable that it thinks you want to hear.

525
00:31:47,684 --> 00:31:51,412
Still the same human desire and drive to find answers

526
00:31:51,508 --> 00:31:54,892
for, like, what the hell is going on? Makes a lot of

527
00:31:54,908 --> 00:31:58,220
sense. It's easy to just slap AI to bring

528
00:31:58,252 --> 00:32:02,196
in more numbers or just bring in more clicks anywhere. So definitely it's

529
00:32:02,220 --> 00:32:05,860
a proceed with caution, but I definitely, really like the example

530
00:32:05,892 --> 00:32:09,316
of using natural language to answer debugging questions

531
00:32:09,340 --> 00:32:12,612
where it's like you just don't know where to look or what operation you need

532
00:32:12,628 --> 00:32:16,282
to call for. But there is a little helper. I keep calling AI kind of

533
00:32:16,298 --> 00:32:19,650
like clippy. So it's like always thinking out of it as a little helper

534
00:32:19,682 --> 00:32:22,866
that you're dragging on, but, like, they're not going to do everything for you.

535
00:32:23,050 --> 00:32:26,178
I do think that, like, we need to be really mindful of the fact that

536
00:32:26,226 --> 00:32:29,554
AI systems are more complex

537
00:32:29,714 --> 00:32:33,674
than anything else that we've built. And when it comes to understanding

538
00:32:33,714 --> 00:32:37,210
complex systems, there are two kinds of tools. There are tools that try

539
00:32:37,242 --> 00:32:40,778
to help you grapple with that complexity, and there are tools that

540
00:32:40,826 --> 00:32:44,272
obscure that complexity, which is why you need

541
00:32:44,288 --> 00:32:48,160
to be really careful which end you're pointing this insanely

542
00:32:48,192 --> 00:32:52,832
complex tool at. Because if you point a tool you can't understand in

543
00:32:52,848 --> 00:32:56,136
a direction that makes everything else harder to understand, you've kind

544
00:32:56,160 --> 00:32:58,684
of just, you should just give up. You know,

545
00:32:59,584 --> 00:33:03,376
you really want to make sure that you're pointing tools that are designed to help

546
00:33:03,440 --> 00:33:06,528
you deal with that complexity in

547
00:33:06,536 --> 00:33:09,692
a way that leads you to answers, not impressions.

548
00:33:09,788 --> 00:33:12,892
There are some workloads where impressions are fine,

549
00:33:12,988 --> 00:33:16,188
right? Or where, like, close enough is fine and

550
00:33:16,236 --> 00:33:19,356
it's good enough and it's, you know, we'll just hit reload and try again.

551
00:33:19,500 --> 00:33:22,596
And then there are some that aren't. And it really behooves you to know the

552
00:33:22,620 --> 00:33:26,740
difference in terms of other topics that everyone's

553
00:33:26,772 --> 00:33:29,876
buzzing about, platform engineering. How do you see

554
00:33:29,900 --> 00:33:33,344
the relationship between observability and platform engineering evolving?

555
00:33:33,984 --> 00:33:37,684
This is such a good question. I mean, I feel like.

556
00:33:38,344 --> 00:33:41,760
I feel like platform engineering. So there are two

557
00:33:41,792 --> 00:33:44,872
things that really predict a really good honeycomb customer right now. One of them is

558
00:33:45,008 --> 00:33:48,704
companies that can attach dollar values to outcomes like delivery companies,

559
00:33:48,784 --> 00:33:52,176
banks, whatever, every request, you know, it matters. You know you need to understand

560
00:33:52,240 --> 00:33:55,564
it. And the second one that I've been thinking about recently is

561
00:33:56,184 --> 00:34:00,242
right now, we are not super successful with teams that are really

562
00:34:00,298 --> 00:34:04,074
firefighting, you know, ones that can't put their

563
00:34:04,154 --> 00:34:07,626
eyes up and plan over the long term. We certainly

564
00:34:07,650 --> 00:34:10,674
hope to be able to help those teams, but right now, the ones that team

565
00:34:10,754 --> 00:34:14,442
to be really successful with honeycomb are the ones who, a lot

566
00:34:14,458 --> 00:34:18,274
of them are on the vanguard of the platform engineering thing

567
00:34:18,314 --> 00:34:21,994
because they have enough of an ability to get their head up to

568
00:34:22,034 --> 00:34:25,666
see what's coming, which is even more complexity, and to

569
00:34:25,690 --> 00:34:28,618
try and grapple with the complexity they've got, you know,

570
00:34:28,666 --> 00:34:32,503
and the platform engineer, like, the real innovation that platform

571
00:34:32,543 --> 00:34:35,679
engineering is brought is the principles of product

572
00:34:35,791 --> 00:34:39,271
and design based development to infrastructure.

573
00:34:39,407 --> 00:34:42,599
And the idea that, okay, we're putting software engineers

574
00:34:42,631 --> 00:34:46,295
on call for their code. Now someone needs to support them in making that

575
00:34:46,319 --> 00:34:49,447
attractable problem. And so your customer

576
00:34:49,495 --> 00:34:53,119
is internally other engineers, it's not customers out there.

577
00:34:53,231 --> 00:34:56,847
And I think that those two things, not every team that calls themselves a platform

578
00:34:56,895 --> 00:35:00,159
engineering team has adopted those two things. But the teams

579
00:35:00,191 --> 00:35:03,606
that have, whether or not they call themselves platform engineering teams,

580
00:35:03,710 --> 00:35:06,982
are really turning into force multipliers and

581
00:35:07,038 --> 00:35:10,754
like accelerators for the companies that they're at. I think

582
00:35:11,214 --> 00:35:15,446
I have a different theory why that's working so well is my

583
00:35:15,470 --> 00:35:19,342
favorite thing to tell people about what's missing from the Google SRE book, because people

584
00:35:19,518 --> 00:35:22,014
come to me all the time. They're like, I've been trying new SRE for years.

585
00:35:22,054 --> 00:35:25,830
Like, why isn't it working? And the primary difference, the thing that wasn't

586
00:35:25,862 --> 00:35:29,162
in the book was there's a dude high up in

587
00:35:29,178 --> 00:35:32,922
the Google leadership team who ran SRE and he

588
00:35:32,938 --> 00:35:36,654
sat with the vps, he sat at the VP table and then the SVP table.

589
00:35:37,234 --> 00:35:40,786
That's why it worked. Had nothing to do with any of that other crap,

590
00:35:40,970 --> 00:35:44,282
right? Like the good ideas, right? But like,

591
00:35:44,418 --> 00:35:47,994
there's good tech, there was good ideas. Slos are a good idea, right? But like,

592
00:35:48,114 --> 00:35:51,746
the reason slos worked is because there was executive support

593
00:35:51,810 --> 00:35:55,396
to go do the damn things, right? And so what I think we're seeing

594
00:35:55,420 --> 00:35:59,864
with platform engineering is like, platform engineering often emerges when some leader

595
00:36:00,524 --> 00:36:04,340
takes that position of power, right? And often that comes with the

596
00:36:04,372 --> 00:36:07,316
responsibility to act like a product, you know, and that's how you get the buy

597
00:36:07,340 --> 00:36:10,076
in. That's how you build up that social power that lets you go and do

598
00:36:10,100 --> 00:36:13,252
the things that you want to do. Like, hey, let's go out to

599
00:36:13,268 --> 00:36:16,492
all the teams and have them implement open telemetry. That would be great. That would

600
00:36:16,508 --> 00:36:19,880
set us, put us up above waterline so we could actually start thinking

601
00:36:19,912 --> 00:36:23,376
again. But actually getting that moving, like Cherry was talking

602
00:36:23,400 --> 00:36:27,040
about with those teams that are stuck in firefighting mode, they do not have the

603
00:36:27,072 --> 00:36:30,324
power to escape it. As soon as

604
00:36:30,824 --> 00:36:34,400
somewhere in that organization, the thing clicks things

605
00:36:34,432 --> 00:36:36,712
in, the leadership team click and they go, oh, we actually have to care about

606
00:36:36,728 --> 00:36:40,496
availability. Let's do platform engineering. We'll hire a director of platform

607
00:36:40,560 --> 00:36:44,120
engineering. That person shows up and starts advocating and finally there's

608
00:36:44,152 --> 00:36:47,642
advocacy for infrastructure up in the leadership table. And I think that's the

609
00:36:47,658 --> 00:36:50,914
real reason why it works. That is such a fascinating theory

610
00:36:50,994 --> 00:36:54,734
and I might actually buy it or a lot of it.

611
00:36:55,554 --> 00:36:59,694
I think that maybe another way of looking at it is just that

612
00:37:01,074 --> 00:37:05,482
historically it's so easy for senior leaders,

613
00:37:05,618 --> 00:37:09,810
especially those who don't have engineering backgrounds, to feel like

614
00:37:10,002 --> 00:37:13,678
the only valuable part of engineering is features and like

615
00:37:13,846 --> 00:37:17,894
building product that we can sell. And there's this whole

616
00:37:18,054 --> 00:37:21,270
iceberg of shit that if you don't do

617
00:37:21,302 --> 00:37:24,430
it is going to bite your ass. And the

618
00:37:24,462 --> 00:37:27,958
longer you go without doing it, the more it's going to bite you,

619
00:37:28,046 --> 00:37:31,870
you know? And like if you don't have a leadership chain that understands

620
00:37:31,902 --> 00:37:35,454
that and will give you air cover to do

621
00:37:35,494 --> 00:37:39,354
it, then you're driving your company into a ditch.

622
00:37:40,174 --> 00:37:43,526
I, so like most of them though, I experienced

623
00:37:43,550 --> 00:37:46,910
this firsthand at a couple of places. Like I worked at a place where

624
00:37:46,942 --> 00:37:50,126
they were doing a DevOps transformation and

625
00:37:50,150 --> 00:37:53,182
at the end of the day, you know, it looked like there

626
00:37:53,198 --> 00:37:56,646
was executive buy in and at the end of the day and it ended

627
00:37:56,670 --> 00:38:00,446
up not being because when we actually tried to do anything meaningful

628
00:38:00,510 --> 00:38:04,638
and especially like we got great at creating, you know, CI pipelines,

629
00:38:04,686 --> 00:38:08,536
but when it came time to deliver the code, the folks in ops were like,

630
00:38:08,680 --> 00:38:12,256
no, I want to do things manually. I want to

631
00:38:12,280 --> 00:38:16,344
make overtime pay by restarting services manually

632
00:38:16,424 --> 00:38:20,096
because, you know, I'm monitoring emails

633
00:38:20,160 --> 00:38:23,952
all night long and the executive in charge, somebody's job depends

634
00:38:23,968 --> 00:38:27,616
on it being bad. Exactly. And so the executive in charge of

635
00:38:27,640 --> 00:38:30,696
this transformation was more worried about like protecting

636
00:38:30,760 --> 00:38:34,104
her employees feelings and actually executing the

637
00:38:34,144 --> 00:38:37,850
change. Exactly. And it was,

638
00:38:37,922 --> 00:38:42,066
you know, they're still kind of stuck as

639
00:38:42,090 --> 00:38:46,698
a result. And, but this isn't an isolated story. I mean you see that so

640
00:38:46,746 --> 00:38:50,514
much across our industry and so,

641
00:38:50,554 --> 00:38:54,682
yeah, if you don't have that buy in from executives, no worky.

642
00:38:54,738 --> 00:38:58,146
And, but also like if you don't have that convergence from, from, you know,

643
00:38:58,250 --> 00:39:01,698
the, the ics. Right. There's so many

644
00:39:01,746 --> 00:39:04,954
ways this can fuck up. There are so many ways.

645
00:39:04,994 --> 00:39:08,560
Like it's like the Dostoevsky quote about how every

646
00:39:08,632 --> 00:39:11,752
unhappy family is unhappy in its own special way, right?

647
00:39:11,888 --> 00:39:15,464
Yeah, every, every transformation story can fuck up its own

648
00:39:15,504 --> 00:39:18,728
special way. It's really hard to do. There are countless

649
00:39:18,776 --> 00:39:22,484
potholes and foot guns. The other one DevOps

650
00:39:23,224 --> 00:39:27,248
transformations particularly I've seen run up against is often

651
00:39:27,296 --> 00:39:30,656
we sell the program and the transformation on, hey, you will get higher velocity out

652
00:39:30,680 --> 00:39:33,384
the end. And so people are like, oh, I like higher velocity. That means more

653
00:39:33,424 --> 00:39:37,256
features. Right? Um, so they don't actually understand the total cost.

654
00:39:37,360 --> 00:39:40,704
Like charity was saying, right, where there's this under the water,

655
00:39:40,824 --> 00:39:43,816
all this work that has to be done before you get that velocity. And in

656
00:39:43,840 --> 00:39:47,216
the meantime, nobody's willing to give up the predictability of

657
00:39:47,240 --> 00:39:49,124
waterfall model. Yep.

658
00:39:50,944 --> 00:39:54,576
Well, that brings us very close to time. And for the last question that I

659
00:39:54,600 --> 00:39:58,216
have, I was going to see what advice you all have for senior leaders that

660
00:39:58,240 --> 00:40:01,828
are starting on their observability journey, especially with that buy

661
00:40:01,876 --> 00:40:05,548
in. Like, how do you be the leader that is a champion for observability

662
00:40:05,636 --> 00:40:09,044
and really empower your team to do it? I want to end

663
00:40:09,084 --> 00:40:12,860
on an optimistic note, which is that this

664
00:40:12,892 --> 00:40:16,308
can be done. And in fact, one of the reasons it's been challenging at Honeycomb

665
00:40:16,356 --> 00:40:19,908
is that it can be done by people from so many different,

666
00:40:20,036 --> 00:40:23,436
like, we've seen this champion by vps and ctos and directors

667
00:40:23,460 --> 00:40:27,154
and managers and principal engineers and staff engineers, and senior engineers

668
00:40:27,194 --> 00:40:30,450
and intermediate engineers, people who, you know,

669
00:40:30,482 --> 00:40:34,114
on the IC side, who are willing to just, like, roll up their sleeves,

670
00:40:34,234 --> 00:40:38,066
go prove people wrong, build something, try it, get buy in

671
00:40:38,090 --> 00:40:41,498
by, you know, elbow grease. Because the good, the good

672
00:40:41,546 --> 00:40:44,574
part is it fucking works.

673
00:40:44,994 --> 00:40:49,466
And it's not that complicated and it pays off fast.

674
00:40:49,610 --> 00:40:52,434
And there are people out there who are really excited about it who will help

675
00:40:52,474 --> 00:40:55,992
you, you know, and so, like, well, this can sound

676
00:40:56,048 --> 00:40:59,560
really scary and demoralizing everything. It's not like one of those things that takes

677
00:40:59,592 --> 00:41:03,704
two or three years before you see sunlight. It's like

678
00:41:03,864 --> 00:41:06,752
next week in some cases, you know,

679
00:41:06,848 --> 00:41:10,080
it's like, you know, and the better your observability get,

680
00:41:10,112 --> 00:41:13,456
the better. The easier everything gets, the easier it is to start

681
00:41:13,520 --> 00:41:17,000
shortening your pipeline, to start making your tests run faster,

682
00:41:17,072 --> 00:41:20,732
to start, you know, but it is that sort

683
00:41:20,748 --> 00:41:23,764
of dark matter that glues the universe together.

684
00:41:23,924 --> 00:41:27,212
And the better your observability is, it's a prerequisite and a dependency

685
00:41:27,268 --> 00:41:31,092
for everything else you want to do. So if you're someone who's like, wants to

686
00:41:31,108 --> 00:41:33,836
make a huge impact, wants to leave your mark on a company, wants to build

687
00:41:33,860 --> 00:41:37,212
a career, I can't honestly think of a better,

688
00:41:37,268 --> 00:41:41,044
like, more dependable place to start to just like, start knocking off

689
00:41:41,084 --> 00:41:45,272
wins. I guess my, my advice would be is,

690
00:41:45,428 --> 00:41:48,952
you know, well, I already said my thing about platform

691
00:41:49,008 --> 00:41:52,632
engineering, right? So you need to empower the people running your infrastructure

692
00:41:52,688 --> 00:41:56,016
somehow to get their voice to the table so that you understand,

693
00:41:56,080 --> 00:41:59,604
like, why these things matter and why your, and how your customers are suffering,

694
00:42:00,104 --> 00:42:03,536
because that's ultimately what happens when we don't pay attention to these things, is our

695
00:42:03,560 --> 00:42:07,080
customers have a bad time. And then I guess in the business

696
00:42:07,152 --> 00:42:09,952
world, like, what we really care about is attrition, right? But, like, if you want

697
00:42:09,968 --> 00:42:13,052
to bring back the attrition or, or just maybe have

698
00:42:13,068 --> 00:42:16,276
a delightful customer experience, and then all this stuff that we just talked about matters

699
00:42:16,380 --> 00:42:19,620
a lot and the place to start. And this worked for

700
00:42:19,652 --> 00:42:23,604
me. Like, that's what I, we, what I've done at Equinix is put open

701
00:42:23,644 --> 00:42:26,828
telemetry in everything and you can pick the rest of

702
00:42:26,836 --> 00:42:30,372
the tools later. That's the beauty of it, right? You can lay it into all

703
00:42:30,388 --> 00:42:33,756
the code, leave it inert, even, and you can turn it on when

704
00:42:33,780 --> 00:42:37,324
you're ready for it, right. So you don't have to do it all at once.

705
00:42:37,364 --> 00:42:40,626
It's not like a two year project raw open telemetry.

706
00:42:40,770 --> 00:42:45,186
It's pick a service instrument. It pointed

707
00:42:45,210 --> 00:42:48,090
at something, see what it looks like, do another service, right. And you can chew

708
00:42:48,122 --> 00:42:51,562
this off. And it's not that hard to break down from an engineering standpoint.

709
00:42:51,618 --> 00:42:55,002
So the, the most, the hardest part is that first service. And so just go

710
00:42:55,018 --> 00:42:58,418
do it. Totally agree. I would also add,

711
00:42:58,466 --> 00:43:00,774
like, be the squeaky wheel,

712
00:43:01,794 --> 00:43:05,026
nag them to death, nag your leadership,

713
00:43:05,090 --> 00:43:08,298
nag your fellow engineers and just show them the value

714
00:43:08,386 --> 00:43:10,730
of observability,

715
00:43:10,882 --> 00:43:14,042
honestly, because they don't get it. You want to

716
00:43:14,058 --> 00:43:16,618
work there anyway, right? Yeah, yeah,

717
00:43:16,666 --> 00:43:19,730
exactly. Yeah. I completely agree.

718
00:43:19,922 --> 00:43:23,682
The other thing I would add is, like, let's instrument

719
00:43:23,778 --> 00:43:27,530
our pipelines, our CI CD pipelines as well.

720
00:43:27,642 --> 00:43:30,494
We should get some TLC. I wrote a ton.

721
00:43:31,834 --> 00:43:34,274
Oh, you do. Oh, yeah, you do. You do.

722
00:43:35,334 --> 00:43:36,354
You definitely.

723
00:43:38,414 --> 00:43:42,070
Yeah. Because, I mean, those, if your CI CD pipeline

724
00:43:42,102 --> 00:43:47,354
is broken, then your code delivery velocity stopeth.

725
00:43:48,014 --> 00:43:51,694
You know, the last time we did this panel, you asked the same question

726
00:43:51,734 --> 00:43:55,046
at the very end, and, which I love. It's a great question to end

727
00:43:55,070 --> 00:43:57,754
on. And I think that time I said,

728
00:43:58,334 --> 00:44:01,860
raise your expectations, raise your standards. Things can be

729
00:44:01,932 --> 00:44:05,628
so much better. And I also want

730
00:44:05,636 --> 00:44:09,276
to point out that still holds true. Software can be such

731
00:44:09,300 --> 00:44:12,332
a magical, rewarding fun.

732
00:44:12,428 --> 00:44:15,824
Like, we get paid to solve puzzles all day,

733
00:44:16,644 --> 00:44:19,900
and if you're not enjoying yourself,

734
00:44:20,092 --> 00:44:23,348
something is wrong. And if you're working

735
00:44:23,396 --> 00:44:26,356
for a company that makes you miserable, maybe leave it.

736
00:44:26,460 --> 00:44:30,030
If you're working on a stack that is really frustrating to work

737
00:44:30,062 --> 00:44:33,822
with, maybe instrument it because it's really

738
00:44:33,878 --> 00:44:36,394
a smell. It shouldn't be awful.

739
00:44:38,534 --> 00:44:41,074
I love that little nice wisdom, like,

740
00:44:42,014 --> 00:44:43,034
make it better.

741
00:44:45,374 --> 00:44:48,910
Well, with that, we would love to thank all of our attendees for

742
00:44:48,982 --> 00:44:51,710
coming out to our panel. Hopefully, you got to learn a little bit more about

743
00:44:51,742 --> 00:44:55,150
observability and how you can take this into your journey,

744
00:44:55,182 --> 00:44:58,928
your organization, and embark on observability 2.0 with us.

745
00:44:59,086 --> 00:45:02,332
With that, thank you very much to all of our panelists for coming here today.

746
00:45:02,388 --> 00:45:06,084
Thank you, charity, Amy and Adriana with that. We'll see you next time.

747
00:45:06,164 --> 00:45:06,684
Find those online.

