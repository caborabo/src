1
00:00:20,640 --> 00:00:24,014
Hello everyone and thank you for joining my session.

2
00:00:24,174 --> 00:00:27,710
Here we'll dive into the dynamic world of Kubernetes

3
00:00:27,782 --> 00:00:31,070
and explore how to create different Kubernetes

4
00:00:31,142 --> 00:00:34,630
objects using the Go programming language of

5
00:00:34,662 --> 00:00:37,982
course. Before we dive into the code,

6
00:00:38,038 --> 00:00:40,914
let's take a quick look at our agenda.

7
00:00:41,494 --> 00:00:45,134
Here we have the client to go Kubernetes Ebi and

8
00:00:45,174 --> 00:00:49,566
Ebi machinery libraries, how to connect to our cluster

9
00:00:49,710 --> 00:00:53,454
from our go application of course managing

10
00:00:53,534 --> 00:00:56,830
resources controllers and operators

11
00:00:57,022 --> 00:01:00,904
operator hub and then wrapping our session up.

12
00:01:01,244 --> 00:01:04,300
I'll do my best to cover each of these topics,

13
00:01:04,372 --> 00:01:07,852
providing as much information as possible within our limited

14
00:01:07,908 --> 00:01:11,664
time token. So to the next slide,

15
00:01:12,404 --> 00:01:16,824
what are client to go Kubernetes API and DBI machinery?

16
00:01:17,204 --> 00:01:21,984
So Kubectl is the official client

17
00:01:22,324 --> 00:01:26,172
to the official Kubernetes client to interact with Kubernetes

18
00:01:26,228 --> 00:01:29,984
API. But we can use client to go

19
00:01:30,064 --> 00:01:34,136
Kubernetes by and by machinery to interact with Kubernetes by

20
00:01:34,200 --> 00:01:37,840
server as well. But what are, what are

21
00:01:37,872 --> 00:01:41,552
they? So the client goal library

22
00:01:41,648 --> 00:01:45,480
is like the primary part or the primary library

23
00:01:45,552 --> 00:01:49,792
to interact with Kubernetes. It provides various

24
00:01:49,888 --> 00:01:53,496
tools to create, modify and delete

25
00:01:53,560 --> 00:01:57,524
Kubernetes objects kubernetes.

26
00:01:58,224 --> 00:02:02,160
When we use client to go library to interact

27
00:02:02,272 --> 00:02:05,884
with these resources, we actually modifying

28
00:02:06,504 --> 00:02:10,632
the Kubernetes objects defined in Kubernetes API.

29
00:02:10,768 --> 00:02:14,224
So basically Kubernetes API is where

30
00:02:14,304 --> 00:02:17,324
we define our Kubernetes objects.

31
00:02:17,984 --> 00:02:21,814
Lastly we have the ABi machinery. Ebay machinery is like

32
00:02:21,854 --> 00:02:25,230
a collection of utilities used to

33
00:02:25,262 --> 00:02:29,398
help us interact with Kubernetes Ebi better stuff like

34
00:02:29,566 --> 00:02:33,310
selectors, emitter scheme and so

35
00:02:33,342 --> 00:02:36,862
on. So now let's dive into our

36
00:02:36,918 --> 00:02:39,514
code and check how it's done.

37
00:02:40,094 --> 00:02:43,790
Now that we have established what are these packages and how they

38
00:02:43,822 --> 00:02:47,594
interact with each other, let's see how it works.

39
00:02:48,634 --> 00:02:52,578
Here I've created an empty directory and the first

40
00:02:52,666 --> 00:02:55,826
thing we need to do is to initialize our go module.

41
00:02:55,850 --> 00:03:01,538
So go initiatives

42
00:03:01,626 --> 00:03:05,330
with Go. Then we want to

43
00:03:05,442 --> 00:03:08,602
get our core libraries which are

44
00:03:08,658 --> 00:03:12,134
the client to go ebim machinery and Ebi library

45
00:03:12,814 --> 00:03:17,194
Kubernetes IO client go

46
00:03:17,974 --> 00:03:20,114
renew Imma sure.

47
00:03:21,294 --> 00:03:25,594
Then we want to create our main go file

48
00:03:26,294 --> 00:03:29,894
and here we're gonna create our package main then funk

49
00:03:29,974 --> 00:03:33,654
main within our funky main we

50
00:03:33,694 --> 00:03:37,422
won't get our so

51
00:03:37,558 --> 00:03:41,434
a cube config equals

52
00:03:42,054 --> 00:03:47,494
a file of join dire

53
00:03:47,654 --> 00:03:51,118
from line to goutils.

54
00:03:51,246 --> 00:03:54,086
Then the file name.

55
00:03:54,270 --> 00:03:58,454
So I'm assuming my, I'm assuming

56
00:03:58,494 --> 00:04:02,286
your cube config lies under the cube folder

57
00:04:02,470 --> 00:04:06,296
so you can change the balls if

58
00:04:06,320 --> 00:04:10,208
you need to. By the way, if you don't have a cluster running

59
00:04:10,256 --> 00:04:13,560
you can always use kind which is an amazing tool to

60
00:04:13,592 --> 00:04:18,248
create your cluster in your machine using docker.

61
00:04:18,416 --> 00:04:21,484
So it will create a cluster for you.

62
00:04:22,304 --> 00:04:25,724
Then what we need to do is to create a client set.

63
00:04:26,344 --> 00:04:29,552
First we gonna create rest config to bust those

64
00:04:29,608 --> 00:04:32,984
client a client comment.

65
00:04:33,364 --> 00:04:37,064
So list config

66
00:04:37,604 --> 00:04:40,892
an error equals client

67
00:04:41,028 --> 00:04:44,904
command build config from a flag.

68
00:04:45,804 --> 00:04:48,756
Then we want to empty string.

69
00:04:48,860 --> 00:04:52,596
Then the kube config file. If error

70
00:04:52,700 --> 00:04:56,024
was nil we're gonna ban it here.

71
00:04:56,804 --> 00:05:00,830
Then we want to create our client set

72
00:05:00,972 --> 00:05:04,934
using a Kubernetes interface. So we want to import this interface

73
00:05:05,434 --> 00:05:09,594
like go and we can use this interface

74
00:05:09,674 --> 00:05:13,738
kubernetes new for conflict. Then we're

75
00:05:13,746 --> 00:05:17,490
gonna buzz the rest. Of course here we hannah we gonna

76
00:05:17,522 --> 00:05:21,094
have the client set and error,

77
00:05:21,634 --> 00:05:25,266
error doesn't does equal nil.

78
00:05:25,330 --> 00:05:30,178
Doesn't equal nil. We're gonna panic. Then voila

79
00:05:30,266 --> 00:05:33,866
we have our client sit here. Of course there is a

80
00:05:33,930 --> 00:05:38,014
million way to get

81
00:05:39,114 --> 00:05:42,654
the client sit or to communicate with Kubernetes.

82
00:05:43,714 --> 00:05:47,454
But this is the way I'm most comfortable with.

83
00:05:48,274 --> 00:05:51,962
Now we want to check if this client set is

84
00:05:52,018 --> 00:05:55,490
working as expected. So we will

85
00:05:55,562 --> 00:05:59,290
get the number of nodes or

86
00:05:59,322 --> 00:06:02,442
the nodes we have in our cluster. For example

87
00:06:02,498 --> 00:06:05,914
we have a cube Ctl get here. I have a single

88
00:06:05,954 --> 00:06:09,098
node with this name. We want to do the same thing here.

89
00:06:09,226 --> 00:06:12,746
So as listaner equal

90
00:06:12,890 --> 00:06:17,106
client for v one nodes,

91
00:06:17,290 --> 00:06:22,826
list context, background list

92
00:06:22,890 --> 00:06:25,974
options, list options from ebay machinery.

93
00:06:27,754 --> 00:06:31,954
So we're gonna rename this v one because there is multiple interfaces

94
00:06:32,034 --> 00:06:35,714
with the name v one. So we're gonna name this one meta

95
00:06:35,754 --> 00:06:38,894
v one and use it here.

96
00:06:39,514 --> 00:06:43,654
Then we want to iterate over this list

97
00:06:44,234 --> 00:06:46,954
range list items.

98
00:06:47,454 --> 00:06:50,430
Then we want to print the name of our nodes.

99
00:06:50,582 --> 00:06:54,326
So record name. Let's check

100
00:06:54,350 --> 00:06:57,830
it out. Go around main go. Okay.

101
00:06:57,862 --> 00:07:01,514
Go. Mod go. Run go.

102
00:07:02,174 --> 00:07:06,274
And here we are. We have our node

103
00:07:06,654 --> 00:07:10,126
with the same name. So that's it.

104
00:07:10,270 --> 00:07:13,686
That's how we connect to Kubernetes using

105
00:07:13,790 --> 00:07:18,286
client set. Of course there is. You can take this further and

106
00:07:18,470 --> 00:07:22,054
create a singleton for your clients so

107
00:07:22,094 --> 00:07:25,430
you don't need to initialize it every time. But I'm sure

108
00:07:25,462 --> 00:07:29,118
you, you can handle this. For the sake of this example

109
00:07:29,166 --> 00:07:31,634
we're gonna make it simple and easy.

110
00:07:32,294 --> 00:07:35,750
Now we want to create a boot using

111
00:07:35,862 --> 00:07:40,206
the core v one interface from ebay library.

112
00:07:40,390 --> 00:07:43,926
We can, we can create our board.

113
00:07:44,070 --> 00:07:47,154
So basically what we need to do is to create

114
00:07:47,534 --> 00:07:51,674
the BoD struct. It takes pointer to core

115
00:07:52,334 --> 00:07:55,074
v one. We need to create the core v one.

116
00:07:55,534 --> 00:07:59,834
So core v one from Kubernetes ev

117
00:08:00,654 --> 00:08:06,058
one. We're gonna specify the board detail going

118
00:08:06,066 --> 00:08:09,882
to define the object meter. It's from meta

119
00:08:09,938 --> 00:08:13,698
v one object meter. Here we're

120
00:08:13,786 --> 00:08:17,450
creating a board named let's say demo

121
00:08:17,482 --> 00:08:19,414
board demo.

122
00:08:21,874 --> 00:08:26,962
Then we want to define our

123
00:08:27,018 --> 00:08:32,154
containers in this body. So specific

124
00:08:32,274 --> 00:08:36,314
v one bot spec will

125
00:08:36,354 --> 00:08:40,242
define the container contain gonna be called v

126
00:08:40,298 --> 00:08:43,722
one containers. We're gonna have we

127
00:08:43,738 --> 00:08:47,234
will define a single container or define

128
00:08:47,314 --> 00:08:53,294
a single container named nginx.

129
00:08:54,194 --> 00:08:58,294
Now we using the client set, we gonna create

130
00:08:59,134 --> 00:09:03,254
bot client. So what

131
00:09:03,374 --> 00:09:07,670
client gonna be clients core

132
00:09:07,702 --> 00:09:11,214
v one bots within the default

133
00:09:11,334 --> 00:09:14,830
name is this. Using this bot client we

134
00:09:14,862 --> 00:09:18,678
can create, update or delete our boards. So bot

135
00:09:18,726 --> 00:09:22,994
client create we're gonna bust the context background

136
00:09:23,574 --> 00:09:27,102
gonna bust the bottom. Then we gonna pass the

137
00:09:27,198 --> 00:09:30,554
list options. The create options. Sorry.

138
00:09:32,294 --> 00:09:36,366
This will return a bot and an error

139
00:09:36,470 --> 00:09:39,114
so result.

140
00:09:39,854 --> 00:09:43,670
Will it check if we got any errors on

141
00:09:43,702 --> 00:09:47,550
the equal nil we're gonna panic. Then we want

142
00:09:47,582 --> 00:09:51,210
to print out the the

143
00:09:51,282 --> 00:09:54,746
the board name. So. And here we go.

144
00:09:54,850 --> 00:09:58,334
Let's run this go. Run main go.

145
00:09:59,074 --> 00:10:02,570
As you can see here we have the node name and the

146
00:10:02,602 --> 00:10:06,574
board. If we checked using Kubectl get bots.

147
00:10:07,074 --> 00:10:11,130
We'll find here we have an open

148
00:10:11,242 --> 00:10:14,490
and it's one running. That's it for the

149
00:10:14,522 --> 00:10:17,918
boards. So next thing we want to do

150
00:10:17,926 --> 00:10:22,006
is to create a deployment similar to creating boot.

151
00:10:22,070 --> 00:10:25,862
Let's start and define

152
00:10:25,918 --> 00:10:30,006
our deployment create deployment.

153
00:10:30,150 --> 00:10:34,246
But first let's import the apps. V one package apps

154
00:10:34,310 --> 00:10:38,078
v one Kubernetes evil apps v

155
00:10:38,126 --> 00:10:41,918
one and here we can create our

156
00:10:41,966 --> 00:10:45,384
deployment structure apps

157
00:10:46,124 --> 00:10:52,524
and we name our deployment meta

158
00:10:52,564 --> 00:10:57,744
v one object meta with the name deployment.

159
00:10:58,604 --> 00:11:02,944
Then we want to define our as big

160
00:11:03,484 --> 00:11:06,104
Fcv one deployment is big.

161
00:11:06,964 --> 00:11:10,320
We'll define the replicas gonna have

162
00:11:10,352 --> 00:11:14,160
two replicas it needs

163
00:11:14,312 --> 00:11:18,840
and pointer two integers. So here we're gonna say for

164
00:11:18,872 --> 00:11:23,084
example and int 32

165
00:11:23,984 --> 00:11:27,176
with the number of deployments. And here we're gonna

166
00:11:27,200 --> 00:11:30,644
bust pointer to the number of replicas.

167
00:11:31,424 --> 00:11:35,780
Then we want to boss our selector from

168
00:11:35,852 --> 00:11:39,220
pointer to meta v one label selector.

169
00:11:39,412 --> 00:11:41,864
And here we gonna match labels.

170
00:11:43,764 --> 00:11:47,276
We'll have app and

171
00:11:47,460 --> 00:11:50,772
demo for example. Then what we want

172
00:11:50,788 --> 00:11:53,664
to do is to define our template.

173
00:11:54,444 --> 00:11:58,884
So after the spec we want to have the template similar

174
00:11:58,964 --> 00:12:02,980
to the yaml file. If you

175
00:12:03,132 --> 00:12:06,780
used kubectl with yaml files to deploy

176
00:12:06,852 --> 00:12:10,620
a deployment, it's similarly, it's the

177
00:12:10,652 --> 00:12:14,140
same thing here. So suspicious.

178
00:12:14,172 --> 00:12:18,772
Gonna be the template, gonna be here template core

179
00:12:18,828 --> 00:12:22,036
v one template.

180
00:12:22,180 --> 00:12:26,024
The tricky here is to know which

181
00:12:26,924 --> 00:12:30,296
interface to use with which. So with

182
00:12:30,320 --> 00:12:33,880
this big we're using apps v one. With the object emitter,

183
00:12:33,912 --> 00:12:37,024
we using meta v one. Here was the template,

184
00:12:37,064 --> 00:12:41,160
we use core v one. This is just a trick in

185
00:12:41,312 --> 00:12:44,568
this part, but it's very straightforward,

186
00:12:44,736 --> 00:12:48,640
nice and easy as you can see. So object

187
00:12:48,712 --> 00:12:51,524
meter as you guessed it, gonna be meta,

188
00:12:51,944 --> 00:12:54,324
object meta with the name.

189
00:12:54,824 --> 00:12:58,204
No we don't need name, we need labels here,

190
00:12:58,664 --> 00:13:02,368
me string. Then within

191
00:13:02,416 --> 00:13:06,776
our template we want to add

192
00:13:06,840 --> 00:13:11,048
our aspect like

193
00:13:11,216 --> 00:13:15,136
containers similar to our bot above.

194
00:13:15,200 --> 00:13:18,240
Here we'll define a container as well.

195
00:13:18,432 --> 00:13:20,964
So let's see, core v one,

196
00:13:21,584 --> 00:13:25,964
we're going to have a single container with the name web

197
00:13:26,044 --> 00:13:29,556
for example and the image gonna be

198
00:13:29,740 --> 00:13:30,824
Nginx,

199
00:13:32,724 --> 00:13:35,744
what else? I think that's it.

200
00:13:36,044 --> 00:13:40,052
This is, this is our deployment struct. Now similar to what

201
00:13:40,108 --> 00:13:42,984
we want to create our deployment client,

202
00:13:43,644 --> 00:13:47,220
a deployment client from the client set of

203
00:13:47,252 --> 00:13:50,692
course. So deployment from our

204
00:13:50,748 --> 00:13:54,314
client v one deployment

205
00:13:54,394 --> 00:13:58,458
within, within the default namespace. Then we

206
00:13:58,506 --> 00:14:01,826
want to create our deployment from the

207
00:14:01,850 --> 00:14:06,722
deployment client. So we're going to see deploy and

208
00:14:06,778 --> 00:14:11,410
an error equals deployment client create

209
00:14:11,562 --> 00:14:15,574
context, background and our deployment

210
00:14:15,874 --> 00:14:20,564
and meta v one create options

211
00:14:21,344 --> 00:14:24,444
as well. We'll check if we got any error,

212
00:14:25,144 --> 00:14:28,440
we'll panic with the error. Then we

213
00:14:28,472 --> 00:14:32,616
want to print out our deployment print

214
00:14:32,680 --> 00:14:36,680
line deploy result. Let's check this together.

215
00:14:36,832 --> 00:14:40,784
But first we need to delete this bot or

216
00:14:40,824 --> 00:14:44,484
just comment as this part for the deployment,

217
00:14:45,224 --> 00:14:48,720
for the boots. I'm sorry because we already

218
00:14:48,792 --> 00:14:52,232
have the board here, so if we run this again it's

219
00:14:52,248 --> 00:14:55,656
gonna give us an error as saying we. You already have

220
00:14:55,680 --> 00:14:59,632
a board named the demo. But no, we want to go

221
00:14:59,688 --> 00:15:02,520
wrong. So we have here demo,

222
00:15:02,552 --> 00:15:07,536
deployment, let's check get deployments we

223
00:15:07,560 --> 00:15:11,312
have here to get

224
00:15:11,368 --> 00:15:15,528
bots. As you can see here we have our deployment,

225
00:15:15,616 --> 00:15:18,920
our boards here as well. So you can

226
00:15:18,992 --> 00:15:22,880
as well delete your deployment using the deployment decline.

227
00:15:23,032 --> 00:15:27,656
For example we can to do to

228
00:15:27,680 --> 00:15:31,204
do using deployment,

229
00:15:31,864 --> 00:15:36,524
let's comment this later. Deployment decline.

230
00:15:38,404 --> 00:15:42,716
That's it. Now we have created deployments,

231
00:15:42,900 --> 00:15:47,620
we created our board, we have created

232
00:15:47,652 --> 00:15:50,956
our client set. We can create secrets with the

233
00:15:50,980 --> 00:15:52,144
same idea,

234
00:15:54,964 --> 00:15:58,652
listener watchers, all the Kubernetes objects

235
00:15:58,708 --> 00:16:02,522
you want to create, you can create from this client.

236
00:16:02,668 --> 00:16:05,918
You just need to know which interface to use,

237
00:16:05,966 --> 00:16:09,774
which interface to define the name, which interface to use when defining this

238
00:16:09,814 --> 00:16:15,350
vic and so on. If you want to create something

239
00:16:15,422 --> 00:16:19,154
like ingress routes, you can always use something like traffic.

240
00:16:19,694 --> 00:16:23,834
And that's it for our third part which is managing resources.

241
00:16:24,494 --> 00:16:28,510
In this session we have talked about Kubernetes resources and how

242
00:16:28,542 --> 00:16:32,482
to manage and interact with these Kubernetes resources from

243
00:16:32,538 --> 00:16:35,042
our go applications. However,

244
00:16:35,138 --> 00:16:38,866
sometimes you might have a great idea or a

245
00:16:38,890 --> 00:16:42,938
need in your app and these resources aren't enough

246
00:16:42,986 --> 00:16:47,402
for you. Fortunately covering it support crds

247
00:16:47,498 --> 00:16:51,374
or custom resources definition which way we can

248
00:16:51,674 --> 00:16:55,282
develop our own resource. Let's say we have a resource

249
00:16:55,338 --> 00:16:59,002
called the burger stand and we want to develop our,

250
00:16:59,138 --> 00:17:03,214
this resource and use it in our cluster or any cluster really.

251
00:17:03,544 --> 00:17:07,048
So I've created these files

252
00:17:07,136 --> 00:17:10,872
here. The first one is a burger stand CRD. The second

253
00:17:10,968 --> 00:17:14,632
one is the big ban burger stand which is

254
00:17:14,688 --> 00:17:18,672
a resource I want to create at

255
00:17:18,688 --> 00:17:22,232
the end. So I want to let's, let's try it out

256
00:17:22,288 --> 00:17:25,880
and create the resource without, without defining

257
00:17:25,912 --> 00:17:28,684
our CRD. So Cube CTL,

258
00:17:31,764 --> 00:17:35,756
it will give us an error saying that Kubernetes service doesn't

259
00:17:35,820 --> 00:17:39,732
recognize, doesn't look like this

260
00:17:39,908 --> 00:17:43,740
kind or this definition. So what

261
00:17:43,772 --> 00:17:48,132
we need to do is to create our CRD.

262
00:17:48,268 --> 00:17:51,344
Here we have the name of our CRD,

263
00:17:51,964 --> 00:17:55,864
we have the version here we have the scheme here,

264
00:17:56,584 --> 00:18:00,456
the types as, I'm sorry, the probabilities

265
00:18:00,560 --> 00:18:05,304
of our, the probabilities of our CRD

266
00:18:05,384 --> 00:18:09,384
like resource like location capacity. Is it open or

267
00:18:09,424 --> 00:18:13,764
not? Scope should be namespaced. The names

268
00:18:15,344 --> 00:18:18,960
like Burger stands, Burger stand and the

269
00:18:18,992 --> 00:18:23,016
kind of course unshorting him to, to get

270
00:18:23,080 --> 00:18:26,792
our, to get our resources similar to Kubectl,

271
00:18:26,848 --> 00:18:30,352
get NMSB or cubes, get NS

272
00:18:30,448 --> 00:18:36,064
for example. So what

273
00:18:36,104 --> 00:18:40,912
we want to do is to Cube CTL Burger

274
00:18:41,088 --> 00:18:44,784
stand. Now we have our CRD

275
00:18:44,864 --> 00:18:48,584
configured so let's try our resource

276
00:18:48,624 --> 00:18:52,276
again. And here we go, we have our resource

277
00:18:52,340 --> 00:18:56,140
created in our cluster. Let's check it out. Cube Ctl,

278
00:18:56,212 --> 00:18:59,620
get B's and

279
00:18:59,652 --> 00:19:03,596
here we go. We have our resource, we can cube

280
00:19:03,620 --> 00:19:08,132
CTL of course get, get B's,

281
00:19:08,268 --> 00:19:11,504
big ban o Yaml.

282
00:19:12,004 --> 00:19:15,292
And as you can see here we have all the part of

283
00:19:15,348 --> 00:19:16,544
our resource.

284
00:19:19,544 --> 00:19:23,344
What we want to do next is to create a custom

285
00:19:23,504 --> 00:19:26,840
controller because custom resource

286
00:19:26,912 --> 00:19:30,744
only won't give us the

287
00:19:30,784 --> 00:19:34,584
operator or the complete cycle of resource.

288
00:19:34,704 --> 00:19:38,160
So the custom controller give

289
00:19:38,192 --> 00:19:42,404
us or example which we use to

290
00:19:44,354 --> 00:19:48,298
interact with this resource or

291
00:19:48,466 --> 00:19:52,054
save the desired state of this, of this resource.

292
00:19:52,554 --> 00:19:56,794
I'll leave this part for you. You can look

293
00:19:56,834 --> 00:20:00,698
into it, a hint, you can use a cube builder.

294
00:20:00,746 --> 00:20:04,970
It's a great tool. You can use it to create your custom controller.

295
00:20:05,122 --> 00:20:09,134
After that you would have your operator which lead

296
00:20:09,174 --> 00:20:12,566
us to the final part of our session with which is operator

297
00:20:12,630 --> 00:20:16,014
hub. If we opened our browser.

298
00:20:16,054 --> 00:20:20,406
If I opened my browser, you will find into

299
00:20:20,470 --> 00:20:23,514
operator, operator hub IO.

300
00:20:23,894 --> 00:20:27,194
You will find many operators here,

301
00:20:28,734 --> 00:20:32,034
some of them like search manager,

302
00:20:32,694 --> 00:20:36,226
eager operator, which we use all the time with Google Golang

303
00:20:36,290 --> 00:20:39,938
application to trace our requests and

304
00:20:40,026 --> 00:20:42,894
so on. So that's it.

305
00:20:43,914 --> 00:20:47,938
With that being said, I hope you enjoyed

306
00:20:47,986 --> 00:20:51,394
this session and thank you for watching

307
00:20:51,434 --> 00:20:53,850
me to the end. And boy,

