1
00:00:27,360 --> 00:00:31,816
For a recent Catwoman Sari survey identified

2
00:00:31,880 --> 00:00:35,568
that more than 64%

3
00:00:35,616 --> 00:00:39,284
of organizations believe they should

4
00:00:39,784 --> 00:00:45,124
effectively start monitoring their endpoints,

5
00:00:45,624 --> 00:00:48,284
even if they lie outside their physical control.

6
00:00:50,704 --> 00:00:56,556
And 44% of the organizations believe learning

7
00:00:56,620 --> 00:00:59,876
from failures are important and they should invest on

8
00:00:59,940 --> 00:01:03,164
identifying more ways of

9
00:01:03,324 --> 00:01:05,864
preventing these kind of disruptions.

10
00:01:07,724 --> 00:01:09,704
And interestingly,

11
00:01:10,204 --> 00:01:13,972
24% organizations had a recent breach,

12
00:01:14,148 --> 00:01:18,144
which means they had a recent contractual breach during last twelve months

13
00:01:20,284 --> 00:01:24,228
and more than majority which is around 66%

14
00:01:24,276 --> 00:01:28,280
of these organizations. They are already using

15
00:01:28,352 --> 00:01:32,524
two to five monitoring tools or the observability tools.

16
00:01:34,184 --> 00:01:40,644
What literally this means is monitoring

17
00:01:41,464 --> 00:01:45,552
or observing the key endpoints

18
00:01:45,648 --> 00:01:49,072
is close to every organization's hearts,

19
00:01:49,128 --> 00:01:52,644
minds and their operations and they are

20
00:01:52,804 --> 00:01:57,396
understanding that the

21
00:01:57,420 --> 00:02:01,516
failures are normal and they are trying to learn from me as well and

22
00:02:01,540 --> 00:02:04,940
then trying to figure out what are the ways they

23
00:02:04,972 --> 00:02:07,024
can prevent these incidents.

24
00:02:10,124 --> 00:02:13,884
But unfortunately, close to one fourth of

25
00:02:13,924 --> 00:02:17,732
them still have contractual breaches

26
00:02:17,788 --> 00:02:19,814
happening regular intervals.

27
00:02:20,834 --> 00:02:24,906
And this is on top of they

28
00:02:24,930 --> 00:02:28,410
are bringing in multiple observable tools to help

29
00:02:28,482 --> 00:02:31,890
in their course. So something is not

30
00:02:31,922 --> 00:02:35,074
working and I'm pretty sure you got the numbers

31
00:02:35,114 --> 00:02:35,694
here.

32
00:02:40,034 --> 00:02:44,210
Hi everyone, my name is Indigo Immelsuria, so welcome to Observability

33
00:02:44,282 --> 00:02:47,422
2024. As part of Observability

34
00:02:47,478 --> 00:02:51,438
2024, I'm going to walk you through why I truly

35
00:02:51,486 --> 00:02:55,554
believe AWS is your ally or the best friend

36
00:02:56,054 --> 00:02:58,274
when it comes to implementing observability.

37
00:02:59,254 --> 00:03:02,998
Observability as you know, it's about understanding

38
00:03:03,046 --> 00:03:07,102
internal system behaviors so that we can proactively

39
00:03:07,278 --> 00:03:10,254
eliminate some of these issues or if at all,

40
00:03:10,294 --> 00:03:14,014
identify some of these disruptions in advance. And then

41
00:03:14,054 --> 00:03:17,750
we can improve our mean time for detection and then mean time

42
00:03:17,782 --> 00:03:22,014
for resolutions while implementing observability.

43
00:03:22,134 --> 00:03:26,286
There are widely documented anti patterns

44
00:03:26,430 --> 00:03:29,590
you will come across and there are some unknown anti

45
00:03:29,622 --> 00:03:33,334
patterns as well hidden. And as part of my presentations

46
00:03:33,414 --> 00:03:37,478
I will discuss these anti patents and how leveraging

47
00:03:37,526 --> 00:03:39,914
AWS will help you in your journey.

48
00:03:43,204 --> 00:03:47,060
As part of my presentation I will discuss importance

49
00:03:47,092 --> 00:03:51,144
of observability, why observability is important for organizations.

50
00:03:52,284 --> 00:03:56,436
There are no two questions about that, why it is important and

51
00:03:56,460 --> 00:04:00,396
we will understand some of the observability anti patterns and

52
00:04:00,500 --> 00:04:03,916
we will also look at AWS capabilities services

53
00:04:04,100 --> 00:04:07,720
AWS offering and we will deep dive

54
00:04:07,832 --> 00:04:11,704
and try to understand some of these the services

55
00:04:11,824 --> 00:04:15,408
AWS offering and how we can leverage them to fight

56
00:04:15,456 --> 00:04:20,264
against our war

57
00:04:20,424 --> 00:04:23,616
of ensuring that we

58
00:04:23,640 --> 00:04:27,512
don't succumb to anti patents. So we

59
00:04:27,528 --> 00:04:31,372
will discuss about some of the implementation guidelines,

60
00:04:31,568 --> 00:04:32,864
the best practices.

61
00:04:36,284 --> 00:04:39,908
Moving on, a quick intro about myself. My name is Indik Uma

62
00:04:39,956 --> 00:04:43,284
Soory I based out of Colombia, Sri Lanka.

63
00:04:43,364 --> 00:04:47,304
I live with my daughter and wife. I am

64
00:04:48,044 --> 00:04:51,260
currently having close to around 18 years of experience

65
00:04:51,412 --> 00:04:54,708
working in industry. My expertise are

66
00:04:54,796 --> 00:04:57,356
predominantly on site reliability engineering,

67
00:04:57,500 --> 00:05:01,036
observability, AI, Ops, DevOps and generative

68
00:05:01,100 --> 00:05:04,548
AI. I'm currently working

69
00:05:04,596 --> 00:05:08,092
at Virtusa. I'm overseeing the technical

70
00:05:08,148 --> 00:05:11,700
delivery, the solutioning, architecturing and

71
00:05:11,732 --> 00:05:15,820
capability development as well. One of the significant

72
00:05:15,932 --> 00:05:19,604
part of my current job and outside I'm enjoying

73
00:05:19,644 --> 00:05:23,488
is being a trainer. I'm a very passionate sharing

74
00:05:23,536 --> 00:05:26,804
knowledge, empowering others and building the community.

75
00:05:27,544 --> 00:05:31,944
I'm a very passionate technical blogger

76
00:05:31,984 --> 00:05:35,924
as well. You can find me at Dev two.

77
00:05:36,704 --> 00:05:41,024
I'm also AWS community builder under cloud operations and

78
00:05:41,064 --> 00:05:43,444
also ambassador at DevOps Institute.

79
00:05:46,544 --> 00:05:49,680
So as I said, AWS and observability

80
00:05:49,752 --> 00:05:53,332
is very close to my heart. And I have been involved in implementing

81
00:05:53,388 --> 00:05:57,052
lot of observable solution for Fortune

82
00:05:57,068 --> 00:06:01,540
500 companies and this over

83
00:06:01,572 --> 00:06:04,772
the period of time I have understand these anti patterns

84
00:06:04,868 --> 00:06:09,036
and some of the best practices and how we can leverage AWS

85
00:06:09,180 --> 00:06:11,984
to overcome and expedite our journey.

86
00:06:14,724 --> 00:06:18,732
So let's discuss the complexities

87
00:06:18,868 --> 00:06:22,424
we have in current world. The current systems,

88
00:06:22,504 --> 00:06:25,824
as you already know, moved out from monolith

89
00:06:25,904 --> 00:06:29,600
and now we have the microservices and obviously

90
00:06:29,752 --> 00:06:34,200
microservices bringing in a lot of complexities which resulted

91
00:06:34,232 --> 00:06:37,724
in me moving out from monitoring which is about, you know,

92
00:06:38,384 --> 00:06:41,600
doing something which is already predefined.

93
00:06:41,792 --> 00:06:45,160
But now this day and age, our systems have lot of

94
00:06:45,192 --> 00:06:48,554
unknowns and we have to figure

95
00:06:48,594 --> 00:06:52,514
out these unknowns have better controllers and observability

96
00:06:52,594 --> 00:06:56,054
is providing us a greater solution.

97
00:06:56,354 --> 00:07:00,170
Observability is trying to understand the internal state and

98
00:07:00,202 --> 00:07:03,490
that results enormous of data which we are getting as

99
00:07:03,522 --> 00:07:06,534
well. And you might already know,

100
00:07:06,914 --> 00:07:10,442
almost all our systems moved out from on premise. We are

101
00:07:10,458 --> 00:07:13,652
now in cloud. So microservices,

102
00:07:13,818 --> 00:07:18,200
observability, cloud has resulted in tons

103
00:07:18,232 --> 00:07:21,736
of data introducing

104
00:07:21,920 --> 00:07:25,680
multiple failure points. So much of complexities

105
00:07:25,752 --> 00:07:29,960
in our systems and with results it's little difficult

106
00:07:30,032 --> 00:07:34,324
to manage. The unknowns get hidden

107
00:07:35,104 --> 00:07:39,040
and then they will appear in the most

108
00:07:39,232 --> 00:07:43,116
unexpected times and will have disruptions

109
00:07:43,180 --> 00:07:47,196
which will cause bad user experiences, impact on

110
00:07:47,220 --> 00:07:49,984
our revenue, lot of other things.

111
00:07:53,444 --> 00:07:56,540
So observability is very important in

112
00:07:56,572 --> 00:08:00,264
this complex distributed system architecture.

113
00:08:00,604 --> 00:08:03,304
Why? Because we want to be on top of performance.

114
00:08:03,604 --> 00:08:06,352
So distributed systems are very good,

115
00:08:06,508 --> 00:08:10,216
but monitoring them, observing them,

116
00:08:10,360 --> 00:08:13,616
identifying their bottlenecks and improving the

117
00:08:13,640 --> 00:08:17,960
performance is key. Just because you have a distributed system,

118
00:08:18,112 --> 00:08:21,256
not necessarily mean you will get the optimal

119
00:08:21,360 --> 00:08:24,904
performance. And as we

120
00:08:24,944 --> 00:08:29,004
discussed earlier, distributed systems being complex,

121
00:08:29,304 --> 00:08:31,908
there are lot of hidden unknowns.

122
00:08:32,016 --> 00:08:35,804
These unknowns can appear at any given time and will

123
00:08:35,844 --> 00:08:40,236
bite you. And detecting these issues quickly,

124
00:08:40,420 --> 00:08:44,064
identifying them, resolving them, is far more

125
00:08:44,724 --> 00:08:48,384
and more than that. What organizations try to do is

126
00:08:49,124 --> 00:08:52,844
eliminate them, if at all it's possible, because there's

127
00:08:52,884 --> 00:08:56,308
nothing better than fixing something

128
00:08:56,436 --> 00:08:58,304
before it's going to impact you.

129
00:08:59,904 --> 00:09:03,760
All of this means is we want to have more reliable

130
00:09:03,832 --> 00:09:09,176
systems. So reliable systems means reliable

131
00:09:09,240 --> 00:09:12,324
services and end of the day happy customers.

132
00:09:13,304 --> 00:09:17,284
And also we have to understand that

133
00:09:18,144 --> 00:09:21,552
just like any other thing, these systems will also

134
00:09:21,608 --> 00:09:25,120
crash and these systems will have some bugs. This system will go

135
00:09:25,152 --> 00:09:28,760
through some cycles of bad times and

136
00:09:28,792 --> 00:09:33,804
this happen. We want to build a comprehensive

137
00:09:34,184 --> 00:09:37,440
framework or mechanism which allow us

138
00:09:37,472 --> 00:09:40,656
to debug and troubleshoot these things

139
00:09:40,840 --> 00:09:43,244
and fix them promptly.

140
00:09:44,824 --> 00:09:48,288
So overall observability is important

141
00:09:48,376 --> 00:09:51,744
for distributed systems to make sure

142
00:09:51,784 --> 00:09:55,234
that our systems are doing what it's supposed

143
00:09:55,274 --> 00:09:58,934
to be doing. And we have the ability of

144
00:10:00,074 --> 00:10:04,094
understanding and managing these systems,

145
00:10:05,194 --> 00:10:08,746
and ability of eliminating some

146
00:10:08,770 --> 00:10:13,066
of the disruptions by identifying them early and

147
00:10:13,090 --> 00:10:17,418
then looking at all those observability pillars

148
00:10:17,506 --> 00:10:21,420
like metrics, logs your traces, events and

149
00:10:21,452 --> 00:10:25,344
gives you the proactiveness which you always want,

150
00:10:25,804 --> 00:10:29,332
so that you can be on top of your game

151
00:10:29,428 --> 00:10:31,624
in managing distributed systems.

152
00:10:36,124 --> 00:10:40,036
While it's important when you look at observability from

153
00:10:40,060 --> 00:10:43,584
a distributed angle, moving to cloud,

154
00:10:45,564 --> 00:10:48,424
even though it has fixed lot of our problems,

155
00:10:49,074 --> 00:10:52,294
it's again, people start to understand

156
00:10:52,834 --> 00:10:56,614
cloud is not the single solution

157
00:10:57,634 --> 00:11:00,894
for all your problems, and especially

158
00:11:01,434 --> 00:11:04,930
availability and reliability. Cloud providers

159
00:11:04,962 --> 00:11:08,962
are providing you a platform where you can deploy your

160
00:11:09,018 --> 00:11:12,474
systems, your services and data, and you

161
00:11:12,514 --> 00:11:16,294
have that accountability from your side to

162
00:11:16,334 --> 00:11:19,354
making sure that you manage it properly.

163
00:11:19,894 --> 00:11:23,394
So when it comes to cloud, still your scalability,

164
00:11:24,614 --> 00:11:28,446
unless you are using managed services, unless you are using some of

165
00:11:28,470 --> 00:11:31,274
those cloud scalability solutions,

166
00:11:33,774 --> 00:11:36,854
scalability is your problem and

167
00:11:36,894 --> 00:11:40,834
security is obviously one of your problems as well.

168
00:11:41,294 --> 00:11:45,174
And what we have done is we are good at

169
00:11:45,334 --> 00:11:48,622
managing the risk so that we look at poly clouds,

170
00:11:48,678 --> 00:11:52,190
like deploying things in multiple clouds, so polyclouds,

171
00:11:52,222 --> 00:11:56,462
multi clouds, bringing in another different complexities

172
00:11:56,638 --> 00:12:00,194
and a different total dimension into this problem.

173
00:12:02,094 --> 00:12:05,714
And also we want to ensure that we reduce the cost.

174
00:12:06,154 --> 00:12:10,226
So when you want to achieve all of these things, observability is

175
00:12:10,250 --> 00:12:13,570
paramount. This again for the cloud, observability is

176
00:12:13,602 --> 00:12:17,554
important and observability gives us this ability

177
00:12:17,634 --> 00:12:21,974
to develop and maintain optimal

178
00:12:22,434 --> 00:12:24,374
systems in cloud.

179
00:12:27,554 --> 00:12:31,774
And finally microservices,

180
00:12:32,734 --> 00:12:36,278
almost all complex systems, we are moving

181
00:12:36,326 --> 00:12:40,942
out from monolith to microservices. So when it comes to microservices,

182
00:12:41,078 --> 00:12:45,206
it has so much of good and

183
00:12:45,230 --> 00:12:49,150
so much of capabilities which we are harnessing to provide

184
00:12:49,342 --> 00:12:51,234
better customer experiences.

185
00:12:52,894 --> 00:12:56,278
But what you have to understand is microservices itself

186
00:12:56,446 --> 00:13:01,264
are bringing in lot of complexities like dependencies,

187
00:13:02,164 --> 00:13:05,824
troubleshooting of bottlenecks in performances.

188
00:13:08,444 --> 00:13:11,956
The complexities result in time

189
00:13:12,020 --> 00:13:14,544
taken to isolate root causes,

190
00:13:15,084 --> 00:13:20,020
scalability problems, debugging related

191
00:13:20,092 --> 00:13:24,584
problems. So all of these things results that.

192
00:13:24,664 --> 00:13:28,248
Observability is key here. So as I've been

193
00:13:28,296 --> 00:13:32,008
going through for last few minutes, either in distributed

194
00:13:32,056 --> 00:13:35,004
systems, cloud microservices,

195
00:13:35,464 --> 00:13:38,904
observability is key. Observability is a

196
00:13:38,944 --> 00:13:42,800
friend in enabling reliability

197
00:13:42,872 --> 00:13:43,764
systems.

198
00:13:47,864 --> 00:13:51,344
So if you look at observability, Gardner published

199
00:13:51,464 --> 00:13:55,808
the observability hype cycle. So it's about how

200
00:13:55,896 --> 00:13:59,848
what has trigger observability at peak, what are

201
00:13:59,856 --> 00:14:03,696
the things we were interested in and then how

202
00:14:03,720 --> 00:14:07,208
this the hype cycle went, and then what are

203
00:14:07,216 --> 00:14:10,896
the takeaways. So if you can see, APM is

204
00:14:11,040 --> 00:14:14,884
what something widely industry has been

205
00:14:15,264 --> 00:14:19,078
leveraging, which is application performance management.

206
00:14:19,246 --> 00:14:22,646
It's about phrases. We have the logs. Logs are,

207
00:14:22,670 --> 00:14:26,914
which is predominantly the traditional part of observability.

208
00:14:27,814 --> 00:14:31,542
And then we have the metrics, which is we very happily

209
00:14:31,598 --> 00:14:34,990
used to configure our alerts, because the metrics

210
00:14:35,022 --> 00:14:38,230
are numbers. Numbers are good at, you know,

211
00:14:38,262 --> 00:14:41,966
measuring things. And the traces help us

212
00:14:41,990 --> 00:14:45,836
for the troubleshooting to understand, allow us to go through

213
00:14:45,940 --> 00:14:49,944
and dig in and understand exactly what's happening.

214
00:14:51,444 --> 00:14:55,564
Because all the years we found that monitoring sometimes focus on

215
00:14:55,604 --> 00:15:01,340
infrastructure. But infrastructure is one part of the

216
00:15:01,372 --> 00:15:04,964
big picture. It's actually a code which is doing bulk,

217
00:15:05,004 --> 00:15:09,188
like we have done a lot of good things, improvements into infrastructure now.

218
00:15:09,356 --> 00:15:12,264
So now the focus is back to the code.

219
00:15:13,304 --> 00:15:16,124
And APN pays a major role here.

220
00:15:19,304 --> 00:15:22,680
So when it comes to observability, observability is all about the

221
00:15:22,712 --> 00:15:25,944
logs, which is about creating

222
00:15:25,984 --> 00:15:29,760
audit trail. It's about metrics, which is providing you

223
00:15:29,792 --> 00:15:33,216
the ability of configuring alerts, measuring things,

224
00:15:33,400 --> 00:15:36,768
the traces, which is about digging into your code,

225
00:15:36,816 --> 00:15:41,176
understanding the bottlenecks where the code is not performing metrics

226
00:15:41,200 --> 00:15:45,084
are helping you to develop alarms and all of these things

227
00:15:45,664 --> 00:15:49,200
allowing you to create dashboards. We have the synthetic

228
00:15:49,232 --> 00:15:52,936
monitors. Over the years we have developed some other capabilities

229
00:15:53,040 --> 00:15:56,536
like real user monitoring, which is about monitoring

230
00:15:56,680 --> 00:16:00,244
and observing what our end users are doing at front end.

231
00:16:00,704 --> 00:16:04,048
And of course this all built on top of our infrastructure,

232
00:16:04,096 --> 00:16:07,728
monitoring, network monitoring, security and

233
00:16:07,776 --> 00:16:12,288
cost optimization. So in nutshell,

234
00:16:12,416 --> 00:16:16,328
observability is looking at your entire system holistically

235
00:16:16,496 --> 00:16:19,936
and trying to understand things before they go

236
00:16:19,960 --> 00:16:20,564
wrong.

237
00:16:23,904 --> 00:16:28,376
So now that you have understanding of observability, why observability

238
00:16:28,440 --> 00:16:32,044
is important and what you are trying to achieve.

239
00:16:32,464 --> 00:16:36,016
Let's look at AWS. So AWS

240
00:16:36,080 --> 00:16:39,720
over the years has been bringing in lot

241
00:16:39,752 --> 00:16:42,524
of capabilities in observability area.

242
00:16:42,824 --> 00:16:46,880
And one of these, it started with Cloudwatch.

243
00:16:47,032 --> 00:16:50,440
Cloudwatch is integrated with almost all AWS services,

244
00:16:50,632 --> 00:16:54,544
so that you have the ability of, you know, shipping all your logs

245
00:16:54,584 --> 00:16:58,124
there and then integrating all the metrics from there.

246
00:16:58,164 --> 00:17:01,540
You can create the dashboards, your alerts. And then

247
00:17:01,572 --> 00:17:05,580
AWS introduced things like AWS x ray

248
00:17:05,772 --> 00:17:09,172
which have the ability of looking enabling

249
00:17:09,228 --> 00:17:13,544
phrases. You have the option of probably going with open telemetry.

250
00:17:14,444 --> 00:17:18,692
And AWS introduced things like real user monitoring

251
00:17:18,828 --> 00:17:23,464
to monitor the front end. And obviously

252
00:17:23,894 --> 00:17:27,514
recently they introduced things like application signals.

253
00:17:28,334 --> 00:17:31,750
So all of these things, AWS have a collection of very

254
00:17:31,822 --> 00:17:34,314
powerful set of services.

255
00:17:35,334 --> 00:17:38,878
Either you can go with AWS native services, or if you

256
00:17:38,886 --> 00:17:42,674
are more for open source,

257
00:17:43,094 --> 00:17:47,318
open source kind of a person, you can use AWS grafana

258
00:17:47,486 --> 00:17:52,042
on top of that, use some things like open search or manage

259
00:17:52,098 --> 00:17:55,706
Prometheus and jaggers, ifkin and others to enable your

260
00:17:55,730 --> 00:17:56,894
traces as well.

261
00:17:58,914 --> 00:18:02,882
So AWS is able to

262
00:18:03,058 --> 00:18:06,618
provide these capabilities for the both

263
00:18:06,666 --> 00:18:10,546
kind of worlds, right? Either you are AWS native

264
00:18:10,610 --> 00:18:14,066
person or you are open source person. So all

265
00:18:14,090 --> 00:18:18,334
of these capabilities will enable you in

266
00:18:18,834 --> 00:18:22,770
developing a great observability

267
00:18:22,842 --> 00:18:28,578
platform for your systems. So the idea is that how

268
00:18:28,626 --> 00:18:32,626
you can use this and

269
00:18:32,730 --> 00:18:35,802
get that benefit and when you are doing

270
00:18:35,858 --> 00:18:39,690
that, understanding some of these anti patterns

271
00:18:39,762 --> 00:18:43,534
are very important because by

272
00:18:43,574 --> 00:18:47,354
knowing them, you know how best you can use some of these services

273
00:18:47,974 --> 00:18:51,542
which will automatically in some instance will

274
00:18:51,678 --> 00:18:56,034
able to help you and ensure that you don't fall into these anti patterns.

275
00:18:58,694 --> 00:19:02,430
So moving on, let's discuss some of these anti patterns

276
00:19:02,462 --> 00:19:06,834
and I'll go through them by the pillars of it observability,

277
00:19:07,294 --> 00:19:10,590
especially in logs. One of the challenge we have

278
00:19:10,622 --> 00:19:13,074
is sometimes you have more locks.

279
00:19:13,654 --> 00:19:15,714
It's very difficult,

280
00:19:17,174 --> 00:19:21,194
it's a good problem to have. But when you have excessive login

281
00:19:21,774 --> 00:19:24,942
and when you does sometimes have little bit

282
00:19:24,958 --> 00:19:28,194
of unstructured, not a structure way,

283
00:19:29,014 --> 00:19:32,526
but it does is generate a lot of noise and it's

284
00:19:32,590 --> 00:19:34,834
harder to extract lot of details.

285
00:19:36,464 --> 00:19:39,632
This is the place where AWS has done lot.

286
00:19:39,768 --> 00:19:44,400
The Cloudwatch has the ability of integrating with logging,

287
00:19:44,512 --> 00:19:48,000
not only just ship the log to Cloudwatch and you can do that.

288
00:19:48,112 --> 00:19:52,008
AWS has come up with lot of new capabilities like log

289
00:19:52,056 --> 00:19:56,488
anomaly detections and things like natural

290
00:19:56,536 --> 00:20:01,390
language searching. These capabilities allowing you even

291
00:20:01,462 --> 00:20:05,118
you have in the situations where you have excessive locks, there's no

292
00:20:05,166 --> 00:20:09,222
structure, it's little bit of hard to troubleshoot.

293
00:20:09,398 --> 00:20:13,034
You are able to use these cloud watch capabilities

294
00:20:14,174 --> 00:20:17,074
to overcome some of these anti patterns.

295
00:20:19,494 --> 00:20:22,354
And then when you look at metrics,

296
00:20:23,174 --> 00:20:26,478
while metrics are good, there are

297
00:20:26,486 --> 00:20:29,778
a lot of anti patterns as well. Sometimes we are coming

298
00:20:29,826 --> 00:20:34,850
up with lot of unclear misaligned metrics

299
00:20:34,922 --> 00:20:37,974
which finally resulted in service level objectives.

300
00:20:38,954 --> 00:20:43,266
We probably sometimes coming up with some bad sampling when

301
00:20:43,290 --> 00:20:47,294
you're doing the matrix. And sometimes these metrics,

302
00:20:49,674 --> 00:20:53,274
there are so much of metrics that it's very difficult

303
00:20:53,314 --> 00:20:57,594
to understand how to

304
00:20:59,774 --> 00:21:03,034
kind of like pick the right metric for your needs.

305
00:21:03,774 --> 00:21:07,474
So what this doing is, it's bringing you

306
00:21:10,174 --> 00:21:12,830
false sense of comfort saying you have a lot,

307
00:21:12,862 --> 00:21:16,674
but actually this might not correlate with the end user experience.

308
00:21:17,414 --> 00:21:20,942
And sometimes a bad sampling might result in you are

309
00:21:20,958 --> 00:21:26,454
not getting when you need it, you might not have the data and

310
00:21:29,194 --> 00:21:32,714
unnecessarily having numerous set of metrics might

311
00:21:32,754 --> 00:21:37,014
lead to unnecessary complexities.

312
00:21:38,354 --> 00:21:41,650
So AWS, by using Cloudwatch,

313
00:21:41,842 --> 00:21:45,074
special cloud metrics, what you can do is you

314
00:21:45,114 --> 00:21:49,524
can actually focus on

315
00:21:50,424 --> 00:21:54,072
very easily the availability of metrics

316
00:21:54,168 --> 00:21:57,744
and then go very quickly and trying to understand what

317
00:21:57,784 --> 00:22:01,128
makes sense instead of you spending lot of time

318
00:22:01,176 --> 00:22:05,040
trying to enable metrics and

319
00:22:05,072 --> 00:22:09,168
then later trying to figuring out what is required

320
00:22:09,256 --> 00:22:12,584
and what might not add value by using Cloudwatch.

321
00:22:12,624 --> 00:22:16,420
And usually when you plug Cloudwatch into your services and

322
00:22:16,452 --> 00:22:20,092
you know the metrics will start appearing and then very quickly you

323
00:22:20,108 --> 00:22:24,020
can go and go through and understand what is this metrics

324
00:22:24,052 --> 00:22:27,316
doing which is have more relevance to you. And probably you can

325
00:22:27,340 --> 00:22:31,460
do some customizations when it comes to the data. And this

326
00:22:31,532 --> 00:22:35,076
helps you in ensuring

327
00:22:35,140 --> 00:22:37,704
that you pick the right things,

328
00:22:39,164 --> 00:22:41,384
write things which add values to you.

329
00:22:43,214 --> 00:22:46,638
And also you can use things like the

330
00:22:46,726 --> 00:22:47,794
AWS,

331
00:22:50,934 --> 00:22:54,542
some of the default metrics which will help

332
00:22:54,598 --> 00:22:58,514
you to figure out in situations where

333
00:22:59,054 --> 00:23:00,634
cardinality is a problem.

334
00:23:02,174 --> 00:23:06,246
So in nutshell, Cloudwatch matrix is a

335
00:23:06,270 --> 00:23:10,030
beautiful thing which will enable you

336
00:23:10,222 --> 00:23:13,750
your metric enabled journey in observability smoothly.

337
00:23:13,902 --> 00:23:17,718
Yeah, it might already

338
00:23:17,806 --> 00:23:21,806
help you in ensuring

339
00:23:21,870 --> 00:23:26,034
that you don't fall into some of these anti patterns.

340
00:23:29,494 --> 00:23:33,354
So when it comes to the tracers, tracers also have

341
00:23:33,984 --> 00:23:35,724
quite a few anti patterns.

342
00:23:36,704 --> 00:23:39,464
Sometimes some traces we don't give the priority,

343
00:23:39,624 --> 00:23:43,416
sometimes there's a lack of trace id consistencies and sometimes

344
00:23:43,440 --> 00:23:46,564
the instrumentation is not enough.

345
00:23:47,064 --> 00:23:51,768
By leveraging AWS x ray or using open telemetry smartly,

346
00:23:51,936 --> 00:23:55,272
you are able to get your traces in

347
00:23:55,288 --> 00:23:59,200
front. And the beauty is that not only services

348
00:23:59,312 --> 00:24:02,344
like what you do,

349
00:24:03,924 --> 00:24:07,676
microservices and other things, but even the lambdas and even the

350
00:24:07,700 --> 00:24:10,972
other things like you have that option of enabling

351
00:24:11,028 --> 00:24:14,348
traces using AWS

352
00:24:14,396 --> 00:24:18,172
x ray real quickly and that will enable

353
00:24:18,268 --> 00:24:21,404
you that you have more

354
00:24:21,444 --> 00:24:24,876
traces, you have the consistencies,

355
00:24:25,060 --> 00:24:28,404
and you can get the power of distributed tracing.

356
00:24:29,424 --> 00:24:33,328
So AWS does this seamlessly without

357
00:24:33,496 --> 00:24:37,000
you want to do a lot of

358
00:24:37,032 --> 00:24:37,844
hard work.

359
00:24:41,984 --> 00:24:49,008
And when it comes to traces, there are few more like things

360
00:24:49,056 --> 00:24:52,776
like continuing the context. Context is very important when you are

361
00:24:52,800 --> 00:24:56,474
trying to connect from front end to the back end

362
00:24:57,174 --> 00:25:00,550
and looking at the traces and the visualizations and kind of like

363
00:25:00,582 --> 00:25:04,614
connecting with realism on terrain. So AWS by

364
00:25:04,654 --> 00:25:08,438
nature, the X ray, the capabilities are

365
00:25:08,486 --> 00:25:13,190
allowing you significantly reduce

366
00:25:13,382 --> 00:25:18,174
the manual effort of spending

367
00:25:18,214 --> 00:25:22,330
time to fix some of these problems. X ray

368
00:25:22,482 --> 00:25:25,842
does it in some instance

369
00:25:25,898 --> 00:25:29,386
magically like if you are using AWS lambda,

370
00:25:29,530 --> 00:25:31,894
enabling x ray is probably a one click.

371
00:25:33,394 --> 00:25:37,050
So x ray as a service is powerful

372
00:25:37,202 --> 00:25:40,658
and that's allowing you to mitigate

373
00:25:40,786 --> 00:25:45,406
some of these challenges. You will come across when

374
00:25:45,430 --> 00:25:47,234
you want to enable traces.

375
00:25:50,054 --> 00:25:53,358
And finally, when you look at

376
00:25:53,406 --> 00:25:57,446
end to end big picture some

377
00:25:57,550 --> 00:26:02,394
observability problems. We have a alert overloading.

378
00:26:03,494 --> 00:26:07,314
This calls alert fatigue which is about

379
00:26:08,094 --> 00:26:12,284
you have flood of alerts and you are not able to understand why

380
00:26:12,454 --> 00:26:15,284
or isolate what has caused it.

381
00:26:16,344 --> 00:26:19,964
So AWS is providing a lot of services like Cloudwatch,

382
00:26:20,504 --> 00:26:23,964
SNS and those things where you can

383
00:26:24,424 --> 00:26:27,544
even bridge, even you can smartly configure them

384
00:26:27,704 --> 00:26:30,804
and able to get through some of these about

385
00:26:31,664 --> 00:26:36,164
the alert overloading situations and

386
00:26:36,824 --> 00:26:40,476
lot of places you have seen the

387
00:26:40,500 --> 00:26:44,108
observability is destroyed. But with AWS

388
00:26:44,156 --> 00:26:47,548
x ray, Cloudwatch and other things,

389
00:26:47,676 --> 00:26:51,516
you are able to bringing in some unified view into your

390
00:26:51,540 --> 00:26:55,516
observability framework where you can see

391
00:26:55,660 --> 00:26:59,780
things when it requires from 13,000ft

392
00:26:59,812 --> 00:27:03,904
above and you can then drill down whenever

393
00:27:05,424 --> 00:27:12,284
you need. And one other thing is usually

394
00:27:14,264 --> 00:27:18,644
people sometimes ignore the non functional requirements when it comes to observability,

395
00:27:19,224 --> 00:27:23,004
which is in my mind it's key.

396
00:27:23,344 --> 00:27:27,592
So AWS services allow you to

397
00:27:27,768 --> 00:27:31,312
get some of these non NFR metrics and other

398
00:27:31,368 --> 00:27:34,936
data like you probably you might be

399
00:27:34,960 --> 00:27:38,564
using AWS lambda or RDS managed services.

400
00:27:38,984 --> 00:27:42,576
All those things will help you in overcoming

401
00:27:42,640 --> 00:27:47,064
some of these challenges as well. Not necessarily might

402
00:27:47,104 --> 00:27:50,328
related to observability, but going

403
00:27:50,376 --> 00:27:54,288
with these services will definitely help you in achieving

404
00:27:54,376 --> 00:27:57,484
what we are trying to achieve in your observability objectives.

405
00:28:01,764 --> 00:28:07,484
And one other anti pattern is most

406
00:28:07,524 --> 00:28:11,076
of our applications are not isolated.

407
00:28:11,140 --> 00:28:14,904
We have upstreams, we have downstreams, we have a lot of independent dependencies.

408
00:28:17,404 --> 00:28:20,904
So that creates lot of buying frauds in our infrastructure

409
00:28:21,564 --> 00:28:24,608
and managing these things. It's also little tidies.

410
00:28:24,756 --> 00:28:28,328
But you can use AWS

411
00:28:28,376 --> 00:28:32,048
systems manager when you are doing a lot of updates, patching and other

412
00:28:32,096 --> 00:28:35,256
things. You can use AWS cloudformation to

413
00:28:35,280 --> 00:28:39,376
bring in consistency infrastructure core solutions that

414
00:28:39,400 --> 00:28:43,336
will also enable you in building some of these

415
00:28:43,480 --> 00:28:46,964
observability in automated fashion into your system.

416
00:28:47,984 --> 00:28:52,056
And obviously there are some environmental inconsistencies that

417
00:28:52,120 --> 00:28:55,824
you can address by using AWS services like elastic

418
00:28:55,864 --> 00:28:59,164
build stock or code pipelines and those things.

419
00:29:08,704 --> 00:29:11,904
And while it's good, we have

420
00:29:11,944 --> 00:29:15,296
gone through the observable pillars, the matrix logs

421
00:29:15,320 --> 00:29:18,924
and phrases, and also the big picture of observability

422
00:29:20,184 --> 00:29:24,016
and what are the anti patterns and how we can use AWS services

423
00:29:24,120 --> 00:29:27,672
and AWS services like Cloudwatch, Cloud watch Matrix,

424
00:29:27,768 --> 00:29:31,368
the X ray and the dashboards and

425
00:29:31,456 --> 00:29:36,720
other factors, how it's allowing you to ensuring

426
00:29:36,792 --> 00:29:39,984
that by nature of using these services you are

427
00:29:40,024 --> 00:29:43,944
able to mitigate some of these anti patterns.

428
00:29:44,104 --> 00:29:47,560
And one thing, one big anti pattern I have

429
00:29:47,592 --> 00:29:50,480
seen is in observable implementation,

430
00:29:50,552 --> 00:29:52,884
is not having a plan.

431
00:29:54,184 --> 00:29:58,056
Probably will jump in and going there and trying to do

432
00:29:58,080 --> 00:30:01,400
that. But sometimes what's important is

433
00:30:01,432 --> 00:30:05,096
having a plan. And having a plan means

434
00:30:05,280 --> 00:30:08,592
having an observability maturity model where you have

435
00:30:08,648 --> 00:30:12,624
understanding that what is your end game. So what do you want is

436
00:30:12,784 --> 00:30:16,600
have a plan where you can take your observability

437
00:30:16,792 --> 00:30:20,528
from reactive to proactive and then proactive to predict

438
00:30:20,576 --> 00:30:24,160
you, and then from predictive to build your system to

439
00:30:24,192 --> 00:30:28,056
have capabilities like autonomous. So I am

440
00:30:28,080 --> 00:30:32,440
not suggesting that you take this and stick

441
00:30:32,472 --> 00:30:36,644
into the assets, but I am suggesting that you create some

442
00:30:37,424 --> 00:30:40,740
maturity model which suits you, so that it

443
00:30:40,772 --> 00:30:44,588
suits you, so that observability is not just a destination,

444
00:30:44,676 --> 00:30:48,740
it's a journey. So you are able to take your observability

445
00:30:48,812 --> 00:30:52,304
from reactive to proactive and predictive to autonomous.

446
00:30:54,804 --> 00:30:58,444
So when you are working with your logs metrics, traces, you are

447
00:30:58,484 --> 00:31:02,116
able to look at how just it's not just enabling logs,

448
00:31:02,220 --> 00:31:06,196
it's about trying to take value out of logs. It's about enabling

449
00:31:06,300 --> 00:31:10,434
AI into logs so that you can cut down some of these manual

450
00:31:10,554 --> 00:31:14,534
touch points. It's about making your system autonomous.

451
00:31:16,394 --> 00:31:19,534
And when it comes to infrastructure, networking, security,

452
00:31:19,914 --> 00:31:23,226
again, the same thing apply. It's about making

453
00:31:23,290 --> 00:31:27,090
and pushing things from reactive to proactive and to predict you

454
00:31:27,202 --> 00:31:28,854
and then autonomous.

455
00:31:32,034 --> 00:31:35,370
And one of the other important things in observability

456
00:31:35,442 --> 00:31:39,602
is having understanding that how to

457
00:31:39,778 --> 00:31:43,554
measure your progress. So what you can

458
00:31:43,594 --> 00:31:46,414
do is you can measure your progress,

459
00:31:53,914 --> 00:31:57,522
you can measure your progress by looking at some of these things

460
00:31:57,578 --> 00:32:01,786
like mean time for detection mean time for resolution or that

461
00:32:01,810 --> 00:32:06,016
means that are you detecting things quickly, are you able to provide

462
00:32:06,080 --> 00:32:10,328
solutions quickly and what is the

463
00:32:10,496 --> 00:32:13,952
interval between your failures and are

464
00:32:13,968 --> 00:32:17,464
you improving your system reliability, how is your customers

465
00:32:17,504 --> 00:32:20,736
are feeling about your systems and are you able to

466
00:32:20,760 --> 00:32:24,272
increase your developer velocity by achieving your service

467
00:32:24,368 --> 00:32:28,264
objectives? This will help you to understand that

468
00:32:28,384 --> 00:32:32,236
whether you are align with

469
00:32:32,420 --> 00:32:36,460
business goals, because end of day this is all about business.

470
00:32:36,652 --> 00:32:39,772
You have to add value into your business.

471
00:32:39,868 --> 00:32:43,984
Unless you are adding value to your business observability will

472
00:32:44,684 --> 00:32:48,636
your car, your business partners will not see that gate or

473
00:32:48,660 --> 00:32:52,024
value and

474
00:32:53,324 --> 00:32:57,464
the anti patterns you can turn around to best practices as well. The opposite,

475
00:32:57,834 --> 00:33:01,082
ensuring that there's a standard in login, there's a better

476
00:33:01,138 --> 00:33:05,194
way of managing logging and better

477
00:33:05,234 --> 00:33:10,014
way of using the traces

478
00:33:10,554 --> 00:33:13,694
your instrument. You focus on instrumentation,

479
00:33:14,074 --> 00:33:17,570
automated and responses and

480
00:33:17,722 --> 00:33:22,454
continuous driver to achieve performance optimizations

481
00:33:23,254 --> 00:33:26,838
and things like going into some of these AWS

482
00:33:26,886 --> 00:33:30,430
managed services. These are very good because it's managed

483
00:33:30,582 --> 00:33:33,702
and it's all are integrated with Cloudwatch and you

484
00:33:33,758 --> 00:33:37,674
are able to use the SNS and other

485
00:33:38,414 --> 00:33:42,342
the alerting capabilities and

486
00:33:42,358 --> 00:33:45,870
the dashboardings. So there's a unified way

487
00:33:45,902 --> 00:33:49,628
of doing that. So that's the whole point when it comes to AWS.

488
00:33:49,766 --> 00:33:53,304
AWS has bundled these things so that it's

489
00:33:53,344 --> 00:33:57,560
one place to go and the unification and

490
00:33:57,592 --> 00:34:01,724
the simplification will provide you far value

491
00:34:02,424 --> 00:34:06,040
and help you in your journey from moving from proactive

492
00:34:06,072 --> 00:34:09,324
to reactive and then to autonomous.

493
00:34:12,264 --> 00:34:15,592
With this I thank you for taking

494
00:34:15,648 --> 00:34:19,804
time to listen. I hope you found this session useful.

495
00:34:20,584 --> 00:34:24,204
You can find me in LinkedIn. If you have any questions,

496
00:34:24,784 --> 00:34:29,056
send a note in LinkedIn there

497
00:34:29,080 --> 00:34:33,056
are lot of nice thought provoking

498
00:34:33,160 --> 00:34:36,400
videos presentations happening. Part of

499
00:34:36,432 --> 00:34:39,696
observability 2024. I encourage you

500
00:34:39,720 --> 00:34:43,467
to go and listen to others and I'm

501
00:34:43,515 --> 00:34:46,943
sure everything will help you in your observability journey.

502
00:34:47,723 --> 00:34:50,819
Thank you very much for taking time. It was my

503
00:34:50,851 --> 00:34:51,683
pleasure presenting.

