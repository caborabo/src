1
00:00:21,530 --> 00:00:25,170
My name is Mitri Vaishinka. I am a software engineer at my games.

2
00:00:25,290 --> 00:00:29,000
In this talk, we will look at the latest features of Python 312.

3
00:00:29,930 --> 00:00:33,314
Today we are diving into four key areas, typing,

4
00:00:33,362 --> 00:00:37,142
syntax performance, and debugging. Let's dive into these

5
00:00:37,196 --> 00:00:41,014
enhancements one by one. So Python 312

6
00:00:41,132 --> 00:00:45,478
brings exciting typing improvements. First, we have generics

7
00:00:45,574 --> 00:00:49,226
with a new, cleaner syst syntax. It makes

8
00:00:49,328 --> 00:00:52,830
writing generic classes and functions simpler.

9
00:00:53,330 --> 00:00:57,434
Next, typed dixed allows for precise type annotations

10
00:00:57,562 --> 00:01:00,634
of dictionary keys and values. The override

11
00:01:00,682 --> 00:01:04,574
creator ensures methods overrides those in superclass accurately.

12
00:01:04,702 --> 00:01:08,142
Advanced type parameters cater to more complex

13
00:01:08,206 --> 00:01:11,806
typing scenarios. Type lss are now easier to declare

14
00:01:11,838 --> 00:01:16,146
and use. They make code more readable and maintainable.

15
00:01:16,338 --> 00:01:19,874
And lastly, we will talk about lazy evaluation and scope

16
00:01:19,922 --> 00:01:23,478
rules. New syntax changes how we

17
00:01:23,644 --> 00:01:27,586
declare generics it's now more straightforward.

18
00:01:27,778 --> 00:01:31,818
Before, we used typefar for type parameters and

19
00:01:31,904 --> 00:01:35,290
classes needed generic t. To use generics,

20
00:01:36,590 --> 00:01:40,286
write the type in square brackets, look at the

21
00:01:40,308 --> 00:01:44,254
max function, and list class examples. The new

22
00:01:44,292 --> 00:01:48,560
way is clearer and simpler. No more extra steps or wrapping needed.

23
00:01:49,250 --> 00:01:52,640
This makes our code cleaner and easier to understand.

24
00:01:53,350 --> 00:01:56,846
Web 692 has transformed how we use quarks.

25
00:01:57,038 --> 00:02:01,566
It brings typed dict into function signatures.

26
00:02:01,758 --> 00:02:05,818
This means we can be precise with keyword arguments.

27
00:02:06,014 --> 00:02:08,390
Before, we had to use broad types,

28
00:02:08,970 --> 00:02:12,870
this didn't tell us much about the expected keywords.

29
00:02:13,450 --> 00:02:17,650
Now, with type dict, everything changes. We define

30
00:02:17,810 --> 00:02:21,590
exact keys and their types. This makes our function

31
00:02:21,660 --> 00:02:25,126
clear and safer. No more guessing what quarks

32
00:02:25,158 --> 00:02:28,874
should contain. It's a big leap for Python's type system,

33
00:02:29,072 --> 00:02:32,634
and it's great for functions that depend on

34
00:02:32,672 --> 00:02:36,418
keywords arguments. This clearly reduces aurora and proves

35
00:02:36,454 --> 00:02:40,046
readability. Pep 698

36
00:02:40,148 --> 00:02:43,390
introduces typing override.

37
00:02:43,550 --> 00:02:46,574
It's new decorator for static typing.

38
00:02:46,702 --> 00:02:49,934
It marks methods that should override superclass

39
00:02:49,982 --> 00:02:53,742
methods. This helps catch discrepancies

40
00:02:53,806 --> 00:02:58,318
earlier, before method mismatches could slip through typers

41
00:02:58,334 --> 00:03:02,294
and method names went unnoticed. Typing override acts as a

42
00:03:02,332 --> 00:03:06,454
safeguard. It features our overrides are intentional and

43
00:03:06,492 --> 00:03:09,990
correct. This boots quadrability and main attainability.

44
00:03:10,990 --> 00:03:14,410
Web 695 marks a big step towards the

45
00:03:14,480 --> 00:03:17,754
Python's type system. It now supports type

46
00:03:17,792 --> 00:03:21,850
for a tuple and param specs directly in type LSS.

47
00:03:22,690 --> 00:03:26,062
This means we can define more complex types with this.

48
00:03:26,196 --> 00:03:30,378
For example, we can create a type for functions returning integers,

49
00:03:30,554 --> 00:03:34,046
or a tuple type that starts with a string followed

50
00:03:34,078 --> 00:03:37,374
by any number of elements. We can also restrict

51
00:03:37,422 --> 00:03:40,882
sequence elements to be hashable, and even

52
00:03:40,936 --> 00:03:44,782
define sequences that only contains integers

53
00:03:44,846 --> 00:03:48,914
or strings. This update simplifies the creation of generic

54
00:03:48,962 --> 00:03:52,374
types. It makes our code more expressive and easier to

55
00:03:52,412 --> 00:03:56,214
understand. With these tools, we can write more robust and

56
00:03:56,252 --> 00:04:00,406
type save Python code. Pep 695

57
00:04:00,508 --> 00:04:04,086
brings a latest features type aliases now we

58
00:04:04,108 --> 00:04:07,962
can declare type aliases more easily, even with generic using

59
00:04:08,016 --> 00:04:12,378
the type statement. It makes our code hints cleaner

60
00:04:12,554 --> 00:04:16,362
and enhances their expressiveness. Before this update,

61
00:04:16,426 --> 00:04:19,674
defining LSS was more complex.

62
00:04:19,802 --> 00:04:23,566
We used typevar or dialect assigning types.

63
00:04:23,758 --> 00:04:27,122
This new syntax simplifies the process, making our code

64
00:04:27,176 --> 00:04:30,926
more readable. Python 312 introduces lazy

65
00:04:30,958 --> 00:04:35,042
evaluation for types. Types are evaluated only

66
00:04:35,096 --> 00:04:38,514
when needed. It's a big change, especially for complex

67
00:04:38,562 --> 00:04:41,974
types. Let's look at an example. We define a

68
00:04:42,012 --> 00:04:45,446
type alias that should cause an error, but the

69
00:04:45,468 --> 00:04:49,450
error only comes when we access a specific attribute.

70
00:04:49,950 --> 00:04:52,822
This allows for more complex type definitions,

71
00:04:52,966 --> 00:04:56,486
including immutably recursive type aliases.

72
00:04:56,678 --> 00:05:00,286
Before, such constructs were cumbersome. Now they

73
00:05:00,308 --> 00:05:04,366
are straightforward and elegant. Let's dive into

74
00:05:04,468 --> 00:05:08,094
syntax improvements. Python 212

75
00:05:08,212 --> 00:05:11,646
has made app strings even better. Now we

76
00:05:11,668 --> 00:05:15,306
can reuse quotes inside appstrings without hassle.

77
00:05:15,498 --> 00:05:19,330
Nesting f strings is straightforward with no limits.

78
00:05:19,750 --> 00:05:22,942
You can spread app strings with multiple lines,

79
00:05:23,086 --> 00:05:27,186
even add comments. Backslashes and Unicode work

80
00:05:27,208 --> 00:05:30,754
smoothly in fstrings. Error messages got an upgrade.

81
00:05:30,802 --> 00:05:34,914
They are cleaner now, and there is inner tools batched.

82
00:05:34,962 --> 00:05:39,306
It's a handsy new addition. These changes make

83
00:05:39,408 --> 00:05:42,566
coding in Python simpler and more powerful.

84
00:05:42,758 --> 00:05:46,826
So let's look at these syntax improvements. Python 312

85
00:05:46,928 --> 00:05:50,714
simplifies f strings. Now you can reuse quotes

86
00:05:50,762 --> 00:05:54,634
inside them. This change makes string formatting

87
00:05:54,682 --> 00:05:57,866
more intuitive. Here is an example with a reading

88
00:05:57,898 --> 00:06:02,026
list. Notice how the quotes are consistent throughout.

89
00:06:02,218 --> 00:06:05,870
Before, we would have caused a syntax error.

90
00:06:06,450 --> 00:06:10,446
Now the same quotes flow inside and out seamlessly.

91
00:06:10,638 --> 00:06:14,610
This update streamlines string composition in Python.

92
00:06:15,210 --> 00:06:18,694
Now you can nest f strings with each other

93
00:06:18,812 --> 00:06:22,594
as deep as needed. This makes complex

94
00:06:22,642 --> 00:06:26,006
string constructions easier. Here is an example

95
00:06:26,108 --> 00:06:29,420
to illustrate. We nest several f strings together.

96
00:06:29,790 --> 00:06:34,406
This was not as straightforward before Python

97
00:06:34,438 --> 00:06:38,454
212 introduced multiline f strings. You can now include

98
00:06:38,502 --> 00:06:41,914
comments right inside them. This makes complex

99
00:06:41,962 --> 00:06:45,934
strings clearer and easier to maintain. Here is how

100
00:06:45,972 --> 00:06:49,390
you can format a movie list with comments.

101
00:06:49,970 --> 00:06:53,890
Each movie is annotated with its unique attribute

102
00:06:54,470 --> 00:06:58,398
with this feature enhances code reliability significantly,

103
00:06:58,494 --> 00:07:02,638
especially when dealing with intricate string constructions.

104
00:07:02,814 --> 00:07:06,194
The new update expands f strings to include backslashes

105
00:07:06,242 --> 00:07:09,746
and Unicode. Now special characters and Unicode

106
00:07:09,778 --> 00:07:12,706
symbols fit right into f strings.

107
00:07:12,898 --> 00:07:16,326
Here is how you can separate items with new lines in an f

108
00:07:16,348 --> 00:07:19,494
string, or join them using Unicode character

109
00:07:19,542 --> 00:07:22,794
like a black heart. With Python 312,

110
00:07:22,912 --> 00:07:26,940
f strings get better at showing where errors are.

111
00:07:27,390 --> 00:07:31,898
Debugging f strings is now quicker, thanks to clearer error messages.

112
00:07:32,074 --> 00:07:35,710
Here's an example of an error in an app string.

113
00:07:36,050 --> 00:07:40,094
The message points exactly to where the mistake is.

114
00:07:40,292 --> 00:07:44,530
It even suggests you might have forgotten a comma.

115
00:07:44,870 --> 00:07:48,130
This precise feedback makes fixing errors faster.

116
00:07:48,470 --> 00:07:52,254
The new release introduces a handy tool iter

117
00:07:52,302 --> 00:07:55,542
tool batched. This function breaks down

118
00:07:55,676 --> 00:07:58,630
data into fixed size pieces.

119
00:07:59,210 --> 00:08:03,202
It's perfect for working with big data or streaming in parts.

120
00:08:03,346 --> 00:08:06,838
Here's how it works in a new version. Just a

121
00:08:06,844 --> 00:08:10,086
few lines of code and you are patching data easily.

122
00:08:10,278 --> 00:08:13,350
Before this, you had to write your own function for batching.

123
00:08:13,510 --> 00:08:17,014
Python 312 brings exciting performance boosts.

124
00:08:17,142 --> 00:08:19,782
First up, async I O is faster.

125
00:08:19,926 --> 00:08:22,250
That's great for async programming.

126
00:08:23,470 --> 00:08:27,294
Inspect and typing models are quicker. Now we

127
00:08:27,332 --> 00:08:30,874
have immortal objects too. They streamline memory

128
00:08:30,922 --> 00:08:34,334
management. There is a new guild strategy. It's unique pair

129
00:08:34,382 --> 00:08:38,434
interpreter comprehension in lining speeds up your list and

130
00:08:38,472 --> 00:08:41,998
dict creations, and more and more enhancements under the hood,

131
00:08:42,094 --> 00:08:46,230
Python 312 boosts async speed significantly.

132
00:08:46,570 --> 00:08:49,954
Benchmarks show up to 75 increase

133
00:08:50,002 --> 00:08:53,554
in speed. Socket writing is now more efficient.

134
00:08:53,682 --> 00:08:57,560
Creating async tasks is faster than before.

135
00:08:58,350 --> 00:09:02,410
Current task is now implemented in C. This change along

136
00:09:02,480 --> 00:09:05,660
speeds things up by four to six times.

137
00:09:06,110 --> 00:09:09,514
These improvements make asyncular slicker and

138
00:09:09,552 --> 00:09:13,386
faster. And for I o bound tasks,

139
00:09:13,498 --> 00:09:17,354
this means better responsiveness. The inspect

140
00:09:17,402 --> 00:09:22,058
and typing modules are now faster. Inspect get ultra static

141
00:09:22,234 --> 00:09:25,920
sees speed increase by up to six times,

142
00:09:26,290 --> 00:09:29,474
as instance checks against protocols are much

143
00:09:29,512 --> 00:09:33,214
quicker. Some checks are now 20 times faster

144
00:09:33,262 --> 00:09:37,298
than before. However, protocols with over 14

145
00:09:37,394 --> 00:09:41,586
members might be slower. This tradeoff

146
00:09:41,618 --> 00:09:45,170
targets efficiency for most common use cases.

147
00:09:45,330 --> 00:09:48,950
These enhancements aid in better code analysis and typing.

148
00:09:49,030 --> 00:09:52,730
Overall, Python's introspection and typing are more efficient.

149
00:09:53,310 --> 00:09:56,966
Pep 684 brings a game changing update

150
00:09:56,998 --> 00:10:00,942
to Python. Each Python interpreter now gets its

151
00:10:00,996 --> 00:10:04,410
own global interpreter lock. This allows

152
00:10:04,490 --> 00:10:07,818
true parallelism across multiple cpu cores.

153
00:10:07,994 --> 00:10:11,582
Currently, it's accessible through the C

154
00:10:11,636 --> 00:10:16,050
API. A Python API is expected in version 3.13.

155
00:10:17,110 --> 00:10:20,574
This feature opens a new door for high performance Python

156
00:10:20,622 --> 00:10:24,126
applications. It's a significant step towards optimizing

157
00:10:24,158 --> 00:10:28,902
Python concurrency. Model 709

158
00:10:29,036 --> 00:10:32,070
marks a pivotal shift in Python comprehensions.

159
00:10:32,570 --> 00:10:36,210
It introduces inlining for lists,

160
00:10:36,290 --> 00:10:39,914
dictionaries, and sets. This eliminates the

161
00:10:39,952 --> 00:10:44,006
need for creating temporary function. Objects comprehensions

162
00:10:44,118 --> 00:10:47,020
are now up to twice as fast.

163
00:10:47,790 --> 00:10:51,034
They also keep variables isolated,

164
00:10:51,162 --> 00:10:54,714
enhancing code safety tracebacks

165
00:10:54,762 --> 00:10:57,934
and profiling. See some changes due to this.

166
00:10:58,132 --> 00:11:02,330
The SIM table module adapts along with locals behavior

167
00:11:02,410 --> 00:11:06,462
in comprehensions. Notable quark involves iterating

168
00:11:06,526 --> 00:11:10,702
over locals during tracing. There is a straightforward

169
00:11:10,766 --> 00:11:14,610
workaround for that. Pep 683 talks about

170
00:11:14,680 --> 00:11:18,614
a new idea called immortal objects. These are

171
00:11:18,652 --> 00:11:22,342
special because they don't need tracking how many

172
00:11:22,396 --> 00:11:25,954
times they are used. This is good for big apps

173
00:11:26,002 --> 00:11:30,266
like Django codes with lot of users to run smoother in

174
00:11:30,288 --> 00:11:33,850
Python, using an object normally means

175
00:11:33,920 --> 00:11:38,134
it gets counted, which can slow

176
00:11:38,182 --> 00:11:41,634
things down. But with immortal objects, this counting

177
00:11:41,702 --> 00:11:44,400
doesn't happen, keeping things fast.

178
00:11:44,930 --> 00:11:47,966
Still, this cool feature is only useful for a

179
00:11:47,988 --> 00:11:51,710
few Python projects. Pep 688

180
00:11:51,780 --> 00:11:55,742
makes a buffer protocol accessible from Python. Now classes

181
00:11:55,806 --> 00:11:59,570
with a buffer method works as buffers.

182
00:12:00,310 --> 00:12:03,550
It introduces two new magic methods,

183
00:12:03,630 --> 00:12:07,234
buffer and release buffer. There's a new standard way

184
00:12:07,272 --> 00:12:11,094
to talk about buffer objects in Python, a new

185
00:12:11,132 --> 00:12:14,678
set of options for making buffers just right.

186
00:12:14,844 --> 00:12:17,938
Two new special methods make buffers easier to use in

187
00:12:17,964 --> 00:12:21,306
Python. This is great for sharing data, especially with

188
00:12:21,328 --> 00:12:24,774
C extensions, but most Python users

189
00:12:24,822 --> 00:12:28,854
might not found this very useful. Python 312 brings

190
00:12:28,902 --> 00:12:32,506
a mix of performance boosts. The vault optimizer

191
00:12:32,538 --> 00:12:36,282
is now in experimental phase. It promises a noticeable

192
00:12:36,346 --> 00:12:40,298
increase in speed. Regex substitutions are quicker

193
00:12:40,394 --> 00:12:43,922
by two or three times, comprehensions for

194
00:12:43,976 --> 00:12:47,966
common collections are more efficient and calls

195
00:12:47,998 --> 00:12:50,770
to the super method are now faster.

196
00:12:51,430 --> 00:12:54,690
Debugging in Python 312 got a big upgrade.

197
00:12:55,130 --> 00:12:58,422
Name error suggestions are sharper now.

198
00:12:58,476 --> 00:13:02,322
They got you better. Syntax and import errors

199
00:13:02,386 --> 00:13:05,640
messages are clearer. They are more helpful now.

200
00:13:06,890 --> 00:13:10,422
New API for monitoring Python execution

201
00:13:10,486 --> 00:13:14,362
events these changes make debugging less

202
00:13:14,416 --> 00:13:18,474
of headache and more of breeze. Python 312

203
00:13:18,592 --> 00:13:21,178
makes error messages more helpful.

204
00:13:21,354 --> 00:13:25,310
Name errors now offer suggestions for fixes.

205
00:13:25,650 --> 00:13:29,930
It can hint at missing standard library inputs.

206
00:13:30,090 --> 00:13:33,182
It also suggests correct instances

207
00:13:33,246 --> 00:13:36,754
attributes. For example, it might recommend

208
00:13:36,872 --> 00:13:40,402
using self attribute. These changes

209
00:13:40,456 --> 00:13:44,702
make debugging much easier and new release

210
00:13:44,766 --> 00:13:48,518
improved syntax error messages errors like import

211
00:13:48,604 --> 00:13:51,670
x from Y now have clearer guidance.

212
00:13:52,170 --> 00:13:56,134
Import error now suggests correct names from

213
00:13:56,172 --> 00:13:59,830
the module. These changes simplify debugging.

214
00:13:59,990 --> 00:14:03,590
They help quickly identify and fix import errors,

215
00:14:03,670 --> 00:14:06,490
especially useful with unfamiliar libraries.

216
00:14:07,470 --> 00:14:11,274
Pep 669 transforms how we monitor

217
00:14:11,322 --> 00:14:15,182
Python execution. It introduces a new low

218
00:14:15,236 --> 00:14:18,990
impact monitoring API. This is perfect

219
00:14:19,060 --> 00:14:22,630
for profilers, debuggers and monitoring tools.

220
00:14:22,810 --> 00:14:27,118
The API covers a broad range of events with little overhead.

221
00:14:27,294 --> 00:14:30,974
Debugging and coverage can now be nearly overhead

222
00:14:31,022 --> 00:14:35,206
free. Here is how to use the new capabilities in

223
00:14:35,228 --> 00:14:37,986
Python 312. Previously,

224
00:14:38,178 --> 00:14:41,798
tracing calls had a higher performance cost.

225
00:14:41,964 --> 00:14:45,542
With Pep 669, monitoring is

226
00:14:45,596 --> 00:14:49,426
more efficient and less intrusive. So we've covered

227
00:14:49,458 --> 00:14:53,494
the updates in Python 312. Improvements touch

228
00:14:53,532 --> 00:14:57,238
on typing, syntax, debugging, and performance. These changes

229
00:14:57,324 --> 00:15:01,498
significantly simplify development. They make code more reliable

230
00:15:01,594 --> 00:15:05,370
and understandable. So thank you for your attention

231
00:15:05,450 --> 00:15:06,380
and see you next time.

