1
00:00:23,720 --> 00:00:27,154
Hi, I'm Munawar Hafiz, chief technologist of open refactory.

2
00:00:27,754 --> 00:00:31,002
As you can see from my backdrop, I'm in a hotel room right now.

3
00:00:31,098 --> 00:00:35,162
I'm traveling, and I'm attending the open source summit North America

4
00:00:35,258 --> 00:00:38,970
in Seattle. At this point in between the conference talks,

5
00:00:39,002 --> 00:00:42,978
I'm taking some time off to record this video. My talk

6
00:00:43,066 --> 00:00:47,186
explores the static analysis tool landscape for go language,

7
00:00:47,330 --> 00:00:50,854
specifically what kinds of bugs they find, what kinds of bugs they miss,

8
00:00:51,234 --> 00:00:54,394
and how open refactories, intelligent code repair,

9
00:00:54,474 --> 00:00:58,240
or ICR, is bridging the security tool gap

10
00:00:58,312 --> 00:01:00,444
that is left by the other tools.

11
00:01:01,784 --> 00:01:05,724
We are all aware of the challenges of keeping applications secure.

12
00:01:06,104 --> 00:01:09,824
The average cost of a security failure now is about $10

13
00:01:09,904 --> 00:01:14,048
million, yet over 150

14
00:01:14,136 --> 00:01:17,808
security vulnerabilities are reported every week

15
00:01:17,936 --> 00:01:22,360
in the National Vulnerability Database. Current static analysis

16
00:01:22,432 --> 00:01:26,094
and dynamic analysis tools fall short of detecting

17
00:01:26,134 --> 00:01:29,454
these bugs in time so that these breaches

18
00:01:29,494 --> 00:01:33,070
can be avoided. In fact, research data

19
00:01:33,142 --> 00:01:37,142
has shown that existing static analysis tools

20
00:01:37,278 --> 00:01:40,534
detect only about 14% of

21
00:01:40,614 --> 00:01:44,310
all the bugs detected. The remaining 86%

22
00:01:44,382 --> 00:01:47,874
of the bugs are detected by pure luck.

23
00:01:48,534 --> 00:01:52,490
This is pretty staggering. At the same time, the static

24
00:01:52,522 --> 00:01:56,050
analysis tools operate at about 50% to 90% false

25
00:01:56,082 --> 00:01:59,906
positive rate. Imagine a 90% false positive

26
00:01:59,970 --> 00:02:03,850
rate. Ten bugs that is reported by a static analysis

27
00:02:03,882 --> 00:02:07,106
tool. Out of that, nine of them are not a

28
00:02:07,130 --> 00:02:11,106
bug at all. And somebody in your team needs

29
00:02:11,170 --> 00:02:14,794
to painstakingly go through each of the bugs to

30
00:02:14,834 --> 00:02:18,434
triage and identify what are the bugs that your team needs

31
00:02:18,474 --> 00:02:22,824
to fix in the first place. Finally, the static analysis

32
00:02:22,864 --> 00:02:26,760
tools fall short of fixing the bugs

33
00:02:26,952 --> 00:02:30,144
they only detect. Bug fixing remains

34
00:02:30,224 --> 00:02:33,616
a manual process and oftentimes this

35
00:02:33,640 --> 00:02:37,568
is very error prone. There has been several incidents

36
00:02:37,736 --> 00:02:41,536
where a bug fix was not only able to address

37
00:02:41,680 --> 00:02:45,016
the security problem, and in other cases it

38
00:02:45,040 --> 00:02:47,884
has also introduced some other bugs.

39
00:02:48,674 --> 00:02:52,894
The most daring example in this space is that of the log four shell vulnerability.

40
00:02:53,634 --> 00:02:57,930
When the log four shell vulnerability was reported, there were four different

41
00:02:58,002 --> 00:03:01,254
fixes that were released in a span of four days,

42
00:03:01,794 --> 00:03:05,090
and each of the earlier ones were not able to

43
00:03:05,162 --> 00:03:08,386
fully address the problem. This,

44
00:03:08,450 --> 00:03:12,274
unfortunately, is very common in the industry, and because of

45
00:03:12,314 --> 00:03:15,142
this, teams miss deadlines,

46
00:03:15,318 --> 00:03:18,878
administrations have budget overruns, and companies

47
00:03:19,006 --> 00:03:21,354
have recurring security breaches.

48
00:03:23,294 --> 00:03:26,062
Open refactories intelligent code repair,

49
00:03:26,158 --> 00:03:29,594
or ICR, addresses these challenges head on.

50
00:03:30,414 --> 00:03:33,270
ICR finds bugs that other tools miss.

51
00:03:33,462 --> 00:03:37,022
It does that with dramatically low false positives, and it

52
00:03:37,038 --> 00:03:40,636
is the first tool in this space that can automatically

53
00:03:40,700 --> 00:03:44,396
synthesize fixes for about half of the bugs that

54
00:03:44,420 --> 00:03:47,676
has been detected. Because of this,

55
00:03:47,820 --> 00:03:51,324
developers get their life back and companies can deliver

56
00:03:51,444 --> 00:03:55,384
high quality software on time and within budget.

57
00:03:56,764 --> 00:04:00,204
ICR is available for Java, Python and go

58
00:04:00,244 --> 00:04:04,244
programmers. An instance of ICR harbors

59
00:04:04,324 --> 00:04:07,612
many different fixers consider ICR as

60
00:04:07,628 --> 00:04:11,284
a band of superheroes where each fixer is a separate

61
00:04:11,324 --> 00:04:14,504
superhero with its own separate power.

62
00:04:14,964 --> 00:04:18,444
It can detect and occasionally fix a different kind

63
00:04:18,484 --> 00:04:21,744
of security, reliability, or a compliance bug.

64
00:04:22,164 --> 00:04:25,460
ICR fixers are built upon three

65
00:04:25,532 --> 00:04:29,172
key technologies. We use deep static analysis

66
00:04:29,268 --> 00:04:32,616
based on path analysis to detect the

67
00:04:32,640 --> 00:04:36,592
bugs with high accuracy. We use machine learning

68
00:04:36,768 --> 00:04:39,920
and also generative AI for different

69
00:04:39,992 --> 00:04:41,964
cases to improve the results.

70
00:04:42,664 --> 00:04:46,728
Specifically, generative AI is good for summarization

71
00:04:46,856 --> 00:04:50,328
and generation. We use the summarization

72
00:04:50,376 --> 00:04:54,152
capability to understand the programming context better to

73
00:04:54,288 --> 00:04:57,444
reduce the false positives, and we

74
00:04:57,484 --> 00:05:01,324
also use the generation capability to further improve upon

75
00:05:01,404 --> 00:05:05,224
the bug fixed generation capability of ICR.

76
00:05:06,004 --> 00:05:10,424
Finally, ICR is based on code refactoring technologies.

77
00:05:11,364 --> 00:05:15,076
I've been part of the code rewriting community for over 20 years,

78
00:05:15,180 --> 00:05:19,704
and I've built code rewriting tools in over ten different languages.

79
00:05:21,004 --> 00:05:24,724
Open refactory brings together that expertise in

80
00:05:24,764 --> 00:05:28,184
code rewriting to deliver the fixes for you.

81
00:05:29,684 --> 00:05:33,904
I've already mentioned that the results from ICR is highly precise.

82
00:05:34,204 --> 00:05:38,460
On benchmark, we have shown as low as 3%

83
00:05:38,572 --> 00:05:42,524
false positives in ICR results, and typical

84
00:05:42,564 --> 00:05:46,276
bug detection tools operate at greater than 80% false

85
00:05:46,300 --> 00:05:49,666
positive rate. Therefore, ICR allows

86
00:05:49,780 --> 00:05:53,870
a development team to operate at premium release velocity without

87
00:05:53,942 --> 00:05:58,110
compromising the quality. It improves the productivity of

88
00:05:58,142 --> 00:06:02,074
the developers by about 11% or more,

89
00:06:02,694 --> 00:06:06,126
and the developers are now freed from the mundane task

90
00:06:06,150 --> 00:06:09,702
of bug fixing and can focus on more

91
00:06:09,758 --> 00:06:12,314
creative work of feature creation.

92
00:06:13,254 --> 00:06:16,758
Now I'll share a video made by Charlie Bedard, who is our chief operating

93
00:06:16,806 --> 00:06:20,910
officer, and he will explain the ways you can use ICR

94
00:06:21,062 --> 00:06:24,990
and the basic workflow of using it. ICR is available

95
00:06:25,062 --> 00:06:28,870
in Java, Python, and go, so the video is generic,

96
00:06:29,022 --> 00:06:31,634
but it gives you the idea of how to use it.

97
00:06:32,454 --> 00:06:36,038
Now let me give you a brief overview of how ICR

98
00:06:36,086 --> 00:06:39,726
works. ICR is a suite of Docker containers that

99
00:06:39,750 --> 00:06:42,074
control access to your code repositories,

100
00:06:42,414 --> 00:06:45,800
analyzes your projects, and allows you to review and

101
00:06:45,832 --> 00:06:49,040
accept the results. The navigator is accessed via

102
00:06:49,072 --> 00:06:52,576
a web browser and it authenticates each user and provides

103
00:06:52,600 --> 00:06:54,684
a view of the user's repositories.

104
00:06:55,264 --> 00:06:59,424
Repositories are accessible through many popular version control systems

105
00:06:59,544 --> 00:07:03,084
such as GitHub, GitLab and BitBucket.

106
00:07:03,464 --> 00:07:07,336
The analysis engines do the heavy lifting of scanning your projects

107
00:07:07,400 --> 00:07:11,296
and detecting the bugs. There is one analysis engine for each language that

108
00:07:11,320 --> 00:07:14,996
ICR supports. The reviewer is used to examine

109
00:07:15,020 --> 00:07:18,660
the output of the analysis engines. You can examine

110
00:07:18,692 --> 00:07:22,756
the bugs that ICR has detected and accept or reject them.

111
00:07:22,940 --> 00:07:26,820
If a fix is offered and accepted, the reviewer can also apply those

112
00:07:26,852 --> 00:07:30,916
fixes directly to the source code in your project. To analyze

113
00:07:30,940 --> 00:07:33,664
your code, you first log into the navigator,

114
00:07:34,284 --> 00:07:38,148
select the project you wish to analyze. The navigator

115
00:07:38,196 --> 00:07:41,914
then fetches the code from your vc's. You then

116
00:07:41,954 --> 00:07:46,050
select the branch that you want to analyze and start the analysis.

117
00:07:46,242 --> 00:07:50,014
The navigator scans the project and presents you with the language options.

118
00:07:50,554 --> 00:07:53,826
After selecting the language, the appropriate analysis engine is

119
00:07:53,850 --> 00:07:57,114
invoked. When analysis completes,

120
00:07:57,234 --> 00:08:00,494
the results are placed into a database for later review.

121
00:08:01,194 --> 00:08:05,226
Let's look at that next. To review the results of an analysis,

122
00:08:05,370 --> 00:08:08,884
the user connects again to the navigator. For this step,

123
00:08:09,004 --> 00:08:12,364
the analysis engines are not used. Their work is complete.

124
00:08:12,524 --> 00:08:15,956
However, we do need to start up a reviewer session to go over the

125
00:08:15,980 --> 00:08:19,820
detected issues. With the reviewer connected to the user,

126
00:08:19,972 --> 00:08:23,236
they can browse the detected bugs and choose which bugs to

127
00:08:23,260 --> 00:08:27,116
accept or reject. Once a bug is accepted and if there's

128
00:08:27,140 --> 00:08:30,236
a synthesized fix for it, ICR can push the

129
00:08:30,260 --> 00:08:34,264
fix to a temporary branch for further review by the development team.

130
00:08:34,794 --> 00:08:39,130
Using ICR is simple and effective in finding critical security vulnerabilities

131
00:08:39,202 --> 00:08:42,626
in your projects. Let's see these same steps from the

132
00:08:42,650 --> 00:08:46,066
user's point of view. After logging into

133
00:08:46,130 --> 00:08:50,186
ICR, the navigator presents the user with the repositories

134
00:08:50,250 --> 00:08:54,002
available through the chosen VC's. In our example

135
00:08:54,058 --> 00:08:55,934
here, we are using GitHub.

136
00:08:57,074 --> 00:09:00,614
We scroll through the projects and choose the one we want to analyze.

137
00:09:01,114 --> 00:09:04,894
I have chosen an open source Python project named Manim.

138
00:09:05,474 --> 00:09:09,334
We first clone the project to pull the source code into ICR.

139
00:09:10,154 --> 00:09:13,650
Then we choose the branch that we want to examine. In this

140
00:09:13,682 --> 00:09:17,546
example, we'll analyze the main branch. Click on the analyze

141
00:09:17,570 --> 00:09:20,930
button to begin the analysis. ICR detects

142
00:09:20,962 --> 00:09:24,626
that this is a Python project and asks us to choose the version

143
00:09:24,650 --> 00:09:27,854
of the Python library to be used for this analysis.

144
00:09:28,444 --> 00:09:32,508
We do that and continue. Analysis begins.

145
00:09:32,676 --> 00:09:36,180
As the analysis proceeds, you can log out of ICR and

146
00:09:36,212 --> 00:09:40,244
return later to see the results, or you can monitor the progress

147
00:09:40,324 --> 00:09:43,716
from the monitor page. Some analyses may take quite

148
00:09:43,740 --> 00:09:47,884
a while, but this one is quite quick so we can see the analysis proceeding.

149
00:09:48,004 --> 00:09:51,556
When it completes, we can look at how the reviewer is used to

150
00:09:51,580 --> 00:09:55,128
go over the results. With the analysis complete,

151
00:09:55,256 --> 00:09:58,720
we return to the navigator to begin the process of reviewing the

152
00:09:58,752 --> 00:10:02,760
results. Again, we scroll down to the Manim project and

153
00:10:02,792 --> 00:10:04,244
select its main branch.

154
00:10:07,144 --> 00:10:10,244
We now see that the review button is available to us.

155
00:10:10,784 --> 00:10:14,296
Clicking on that brings us to the analysis summary page

156
00:10:14,440 --> 00:10:17,504
where we can see the history of all the analyses previously

157
00:10:17,544 --> 00:10:20,980
performed on this branch. In this example, we have the

158
00:10:21,012 --> 00:10:24,460
analysis that was just completed. Clicking on the

159
00:10:24,532 --> 00:10:28,076
show results button brings us into the reviewer. At the

160
00:10:28,100 --> 00:10:30,544
top of the page we see a summary of the results.

161
00:10:31,404 --> 00:10:35,548
The bugs themselves are presented below that and are prioritized

162
00:10:35,636 --> 00:10:39,036
with the highest severity issues shown first. At the left of

163
00:10:39,060 --> 00:10:42,828
the window are some filters. We use the category

164
00:10:42,876 --> 00:10:46,984
filter to narrow down the particular class of bugs we want to review.

165
00:10:47,614 --> 00:10:50,894
For example, we can look at just the bugs in the

166
00:10:51,014 --> 00:10:55,078
improper method call category. There is an issue titled

167
00:10:55,246 --> 00:10:58,542
IMc m One. It is a

168
00:10:58,558 --> 00:11:02,830
medium severity issue. The description gives details

169
00:11:02,862 --> 00:11:06,182
about the issue, including links to external sources

170
00:11:06,278 --> 00:11:08,354
that describe the importance of the issue.

171
00:11:09,294 --> 00:11:12,878
By clicking on show diff, we can see the specific issue

172
00:11:12,926 --> 00:11:16,774
highlighted in red with the recommended fix shown in green.

173
00:11:17,474 --> 00:11:20,626
If we want to accept the fix, all we need to do is click on

174
00:11:20,650 --> 00:11:23,906
the accept button. In this fashion,

175
00:11:24,010 --> 00:11:27,930
you can review all of the identified bugs and choose which ones to act

176
00:11:27,962 --> 00:11:31,146
upon. To read more about how to

177
00:11:31,170 --> 00:11:34,578
use ICR for your projects, you may want to read our

178
00:11:34,626 --> 00:11:38,666
online ICR user guide or feel free to contact us

179
00:11:38,810 --> 00:11:43,786
at info@openRefactory.com dot now

180
00:11:43,890 --> 00:11:47,386
let us go through a demo of running a

181
00:11:47,410 --> 00:11:50,786
few options of static analysis tools on a

182
00:11:50,810 --> 00:11:55,002
single application and identifying what kind of bugs are detected by

183
00:11:55,058 --> 00:11:58,922
the different static analysis tools. For this, I will

184
00:11:58,938 --> 00:12:02,362
be using three static analysis tools. One is

185
00:12:02,378 --> 00:12:05,930
an open source tool created by Google called Google

186
00:12:05,962 --> 00:12:09,714
Gosec. The second is the ubiquitous sonar

187
00:12:09,754 --> 00:12:13,466
cloud, and the third one is ICR or intelligent code

188
00:12:13,490 --> 00:12:17,226
repair. I'll be running all of these on

189
00:12:17,370 --> 00:12:20,914
an application that has been built by Red Hat.

190
00:12:21,034 --> 00:12:24,734
It's called service provider integration operator.

191
00:12:25,674 --> 00:12:29,250
The application is not very big. It is about 20,000 lines of go

192
00:12:29,282 --> 00:12:33,088
code as well as others. For this talk,

193
00:12:33,216 --> 00:12:36,832
I'll be just concentrating on what these tools are finding

194
00:12:36,968 --> 00:12:40,444
in the go code. There's one other thing.

195
00:12:41,344 --> 00:12:44,704
In order to make things interesting, I'm not running the

196
00:12:44,744 --> 00:12:48,232
tools on the current version of service provider integration

197
00:12:48,288 --> 00:12:51,752
operator. Instead, I went back in time

198
00:12:51,888 --> 00:12:55,352
and identified a version which had two

199
00:12:55,448 --> 00:12:59,220
critical problems, one across site

200
00:12:59,372 --> 00:13:03,044
scripting and another one an open

201
00:13:03,164 --> 00:13:06,588
redirect issue that was there and fixed.

202
00:13:06,676 --> 00:13:10,268
Later, I'm going back to a version that has both

203
00:13:10,316 --> 00:13:13,756
of these vulnerabilities. So the challenge for the

204
00:13:13,780 --> 00:13:17,124
tools is to identify these two bugs.

205
00:13:17,284 --> 00:13:21,060
If possible. That particular vulnerable

206
00:13:21,132 --> 00:13:25,150
version of the service provider integration operator is

207
00:13:25,182 --> 00:13:29,054
stored in a separate public repository called service provider

208
00:13:29,094 --> 00:13:32,834
vulnerable. I'll be running the tools on that application

209
00:13:34,494 --> 00:13:38,278
first let's run Goseq. GoSeq is run from command

210
00:13:38,326 --> 00:13:42,230
line and is pretty straightforward. You just specify the output

211
00:13:42,262 --> 00:13:45,714
directory where you want to store the results and run it.

212
00:13:46,374 --> 00:13:49,790
Note here we are running on the current directory,

213
00:13:49,902 --> 00:13:53,270
but you can instead choose any sub directories on

214
00:13:53,302 --> 00:13:56,566
which you can run. You can also pick and choose the set

215
00:13:56,590 --> 00:13:59,974
of rules that you want to run. Here we're running

216
00:14:00,014 --> 00:14:03,754
with all the possible rules that are provided by Gosec.

217
00:14:04,774 --> 00:14:08,774
When we look into the results, we see that Goset does not find anything

218
00:14:08,854 --> 00:14:12,694
at all. This is ok in terms of false positives because

219
00:14:12,734 --> 00:14:15,886
at least we do not have to triage through tons of

220
00:14:15,910 --> 00:14:19,138
false positives thrown by Goseck.

221
00:14:19,206 --> 00:14:22,734
However, we are not getting any improvement in terms of security.

222
00:14:23,194 --> 00:14:26,994
Specifically, we know that there are two critical security problems

223
00:14:27,034 --> 00:14:30,330
here. So the fact that Goset does not

224
00:14:30,362 --> 00:14:34,294
find anything means that your risk remains unmitigated.

225
00:14:36,154 --> 00:14:39,354
Now let's look into sonar cloud. We are running

226
00:14:39,394 --> 00:14:42,214
sonar cloud on the same application.

227
00:14:43,394 --> 00:14:46,974
I've already run the application and are now showing the results.

228
00:14:47,734 --> 00:14:51,166
Sonar cloud identifies 33 security bugs,

229
00:14:51,310 --> 00:14:55,094
six reliability bugs, and 257

230
00:14:55,214 --> 00:14:57,790
maintainability bugs in the code.

231
00:14:57,982 --> 00:15:01,966
That's quite a handful. Let's look into each one of them.

232
00:15:02,110 --> 00:15:05,638
But before we do that, first filter the sonar cloud

233
00:15:05,686 --> 00:15:08,934
results so that we concentrate on the results

234
00:15:09,094 --> 00:15:12,886
identified in the go code only. If we

235
00:15:12,910 --> 00:15:16,568
do that now, our number of bugs have

236
00:15:16,616 --> 00:15:20,164
come down to only 206 issues.

237
00:15:21,464 --> 00:15:25,016
But as we see that we do not find any security

238
00:15:25,120 --> 00:15:26,684
issues anymore.

239
00:15:28,824 --> 00:15:32,120
We are only finding maintainability related issues,

240
00:15:32,312 --> 00:15:35,976
some of them high severity, some of them medium severity, and some

241
00:15:36,000 --> 00:15:37,284
of them low severity.

242
00:15:39,224 --> 00:15:42,336
We see that the results reported by sonarcloud were

243
00:15:42,360 --> 00:15:45,672
of three kinds. They were about

244
00:15:45,808 --> 00:15:49,392
duplicated string literals. Some of them were about

245
00:15:49,448 --> 00:15:53,008
the cyclomatic complexity of some functions being high.

246
00:15:53,176 --> 00:15:57,136
And then there are some empty functions. None of them appear

247
00:15:57,200 --> 00:15:59,764
to be very serious at all.

248
00:16:01,424 --> 00:16:04,656
In fact, we are still searching for a tool that

249
00:16:04,680 --> 00:16:08,262
can identify the critical security problems that

250
00:16:08,278 --> 00:16:11,394
are lurking in the source code that we are running upon.

251
00:16:12,854 --> 00:16:16,654
Now let's look into ICR again. In this

252
00:16:16,694 --> 00:16:20,154
case, you are accessing ICR through the web portal.

253
00:16:20,534 --> 00:16:23,814
You are selecting the GitHub repositories that you have,

254
00:16:23,974 --> 00:16:27,634
and once you're connected with GitHub you'll see all of your repositories.

255
00:16:28,694 --> 00:16:31,790
Here I run on the vulnerable service provider

256
00:16:31,822 --> 00:16:35,402
application beforehand. And so let me open

257
00:16:35,498 --> 00:16:38,934
the application. You see that there are several branches

258
00:16:39,234 --> 00:16:42,650
on which we can run separately, but in this case

259
00:16:42,722 --> 00:16:46,058
we ran already on the master branch and we

260
00:16:46,066 --> 00:16:49,450
have the results already available. Once we see the

261
00:16:49,482 --> 00:16:53,130
results we see that ICR only identifies two

262
00:16:53,162 --> 00:16:56,938
bugs for you, and voila, it has identified

263
00:16:57,106 --> 00:17:01,252
both the security issues for you with zero other

264
00:17:01,428 --> 00:17:04,612
unnecessary issues, which means that there is

265
00:17:04,708 --> 00:17:08,532
zero false positives. If we

266
00:17:08,548 --> 00:17:12,172
see the output of the first bug, which is the open redirect,

267
00:17:12,348 --> 00:17:16,444
we see that ICR provides you a trace of

268
00:17:16,564 --> 00:17:20,708
where the taint came into the application and

269
00:17:20,836 --> 00:17:24,524
where it was exercised so that the open redirect

270
00:17:24,644 --> 00:17:28,454
will happen. In this case, ICR was not able to synthesize

271
00:17:28,494 --> 00:17:32,030
a fix. Now, if we look into the cross site

272
00:17:32,062 --> 00:17:35,822
scripting, we see that the trace is longer because the

273
00:17:35,838 --> 00:17:37,954
code flows through multiple paths.

274
00:17:39,374 --> 00:17:42,034
ICR provides the detailed trace.

275
00:17:42,494 --> 00:17:46,206
But what is interesting is ICR was also able to

276
00:17:46,230 --> 00:17:50,222
synthesize a fix. In this case, the fix was

277
00:17:50,318 --> 00:17:54,450
sanitizing the input coming from an untrusted user

278
00:17:54,602 --> 00:17:57,334
with a well known library called Blue Monday.

279
00:17:57,674 --> 00:18:01,082
ICR not only included the library calls, but it has

280
00:18:01,138 --> 00:18:03,574
also imported the library module.

281
00:18:04,714 --> 00:18:08,570
So we have seen that ICR has only identified

282
00:18:08,682 --> 00:18:12,010
two bugs, both of them that we were looking for

283
00:18:12,042 --> 00:18:16,026
in this case, and it was able to synthesize a fix for one

284
00:18:16,050 --> 00:18:16,814
of them.

285
00:18:19,854 --> 00:18:23,294
Okay, as you see that with the magic of video

286
00:18:23,334 --> 00:18:26,982
editing, I have changed my dress and I've come back home

287
00:18:27,078 --> 00:18:30,366
from the conference. So let's summarize what we have

288
00:18:30,390 --> 00:18:33,910
covered in this talk. I've looked into the problems that current

289
00:18:33,982 --> 00:18:37,110
developers face when they're looking for static analysis tool

290
00:18:37,142 --> 00:18:40,822
support. I've also done a test drive

291
00:18:40,918 --> 00:18:44,466
of multiple static analysis tools on a

292
00:18:44,490 --> 00:18:47,762
known application that has been created by a reputable vendor.

293
00:18:47,938 --> 00:18:52,138
And I've shown that only ICR on intelligent code repair

294
00:18:52,266 --> 00:18:56,214
was able to deliver the promises that was made

295
00:18:56,514 --> 00:18:59,414
by it in the first few slides.

296
00:18:59,994 --> 00:19:03,834
It was able to find the hard to find bugs. It was doing

297
00:19:03,874 --> 00:19:07,546
that with no false positives in this case, and it was

298
00:19:07,570 --> 00:19:11,254
able to synthesize fixes for one of the high severity cases.

299
00:19:12,224 --> 00:19:15,800
Consider using ICR as opposed to another tool

300
00:19:15,912 --> 00:19:19,248
that was reporting over 200 issues, but all of

301
00:19:19,296 --> 00:19:23,552
them were false positives. If your developer was taking

302
00:19:23,688 --> 00:19:27,320
on average about ten minutes to look into each one of

303
00:19:27,352 --> 00:19:30,648
the bugs and identify whether that's a true positive

304
00:19:30,696 --> 00:19:34,480
or not, then it's going to take him about 2000

305
00:19:34,552 --> 00:19:37,896
minutes in order to triage the bugs. Now you can

306
00:19:37,920 --> 00:19:42,524
tell me 1 hour the problems that were identified were

307
00:19:43,184 --> 00:19:47,192
pretty benign and it doesn't take ten minutes to triage them.

308
00:19:47,368 --> 00:19:51,016
Well, in this case it was true, but on another application it

309
00:19:51,040 --> 00:19:54,536
may not be. The bottom line was that other

310
00:19:54,600 --> 00:19:59,016
tools were not able to find any critical bugs

311
00:19:59,160 --> 00:20:02,640
and they were not and they were just instead generating

312
00:20:02,712 --> 00:20:06,272
a lot of false positives. And there you have

313
00:20:06,288 --> 00:20:11,844
it. If you have any questions, feel free to reach us@infoenpenrefactory.com.

314
00:20:12,904 --> 00:20:16,524
We'd be happy to let you do the test drive yourself

315
00:20:16,944 --> 00:20:20,284
and identify the benefits that ICR is providing.

316
00:20:21,424 --> 00:20:24,752
Thanks a lot for your time, and I'm looking forward to chatting with you

317
00:20:24,808 --> 00:20:25,144
afterwards.

