1
00:00:24,650 --> 00:00:28,502
Hello. Ancir was from Vienna. Welcome to Comforted to Cloud

2
00:00:28,556 --> 00:00:31,766
Native 2024. I'm Dmytro Hlotenko and

3
00:00:31,788 --> 00:00:35,894
I am pleased to welcome you on my session journey beyond AWS quest

4
00:00:35,932 --> 00:00:39,206
for the excellence. So in this session I will be happy to give you some

5
00:00:39,228 --> 00:00:42,966
specific details on AWS service. Tell you a story, how I was

6
00:00:42,988 --> 00:00:46,454
modernizing the already existing service and how

7
00:00:46,492 --> 00:00:50,062
I was resolving different issue and I made the overall experience with

8
00:00:50,156 --> 00:00:54,046
running our application on AWS much better for

9
00:00:54,148 --> 00:00:57,550
our solutions team, for our developers and for our product

10
00:00:57,620 --> 00:01:01,774
team. And please take a good position because it

11
00:01:01,812 --> 00:01:05,390
will be session with some specific details with a real life story.

12
00:01:05,460 --> 00:01:09,218
So I'm really excited to have you here and since we are limited on

13
00:01:09,224 --> 00:01:12,786
the time, let's go and jump into the session. But first of

14
00:01:12,808 --> 00:01:15,966
all, just a short words about of me. I'm Mitri

15
00:01:15,998 --> 00:01:19,206
Glatanka. I am a cloud engineer of up it and how my

16
00:01:19,228 --> 00:01:22,902
colleagues call me Mr. Amazon. I am AWS community builder since

17
00:01:22,956 --> 00:01:26,962
2024 and I'm co leader of AWS user Grouping.

18
00:01:27,026 --> 00:01:30,278
I am holding a few degrees related to telecommunications

19
00:01:30,454 --> 00:01:34,250
and in it I'm already for a long time I saw different things

20
00:01:34,320 --> 00:01:37,402
in different places, but I'm really enjoying cloud everything

21
00:01:37,456 --> 00:01:40,826
which is related to architecture software and I'm really happy

22
00:01:40,928 --> 00:01:44,926
to deliver not only speeches of the conference but services to

23
00:01:44,948 --> 00:01:49,262
our customers and interact with the different exciting people. And yeah,

24
00:01:49,316 --> 00:01:52,526
so I'm also a motorsport fan and photography hobbyist and in

25
00:01:52,548 --> 00:01:55,914
terms of AWS, I'm still targeting the clothing

26
00:01:55,962 --> 00:01:59,234
jacket, but this is just a long, very way to go.

27
00:01:59,272 --> 00:02:02,994
And if you will have any questions after this session, you will have my

28
00:02:03,032 --> 00:02:06,854
LinkedIn QR code at the end. Please. You are welcome to send

29
00:02:06,892 --> 00:02:10,486
me the invitation. I'm always happy to discuss any points to help you.

30
00:02:10,588 --> 00:02:14,150
And yeah, so I would like just

31
00:02:14,300 --> 00:02:18,306
to announce what we will have today tonight. So I'm

32
00:02:18,338 --> 00:02:21,702
going to give you some information what actually we are doing with AWS

33
00:02:21,766 --> 00:02:26,006
because actually this case, it was one of the first cases that I have refactored

34
00:02:26,038 --> 00:02:30,122
since I have started in Apait. I will give you brief information on application

35
00:02:30,256 --> 00:02:33,646
and in general some details how the services are

36
00:02:33,668 --> 00:02:37,018
cooperating, how it was built, how it was reworked,

37
00:02:37,114 --> 00:02:40,682
and some small details that probably will give you some inspiration

38
00:02:40,746 --> 00:02:44,626
for your workload or will give you the idea for your potential case

39
00:02:44,808 --> 00:02:49,106
to be resolved. So first of all, just a short information about

40
00:02:49,208 --> 00:02:52,786
my company. So via Apait we are maintaining most of the

41
00:02:52,808 --> 00:02:56,734
biggest austrian media companies such as ORF,

42
00:02:56,782 --> 00:03:00,734
which is a national broadcast, lots of magazines

43
00:03:00,782 --> 00:03:04,486
like Derstandart. And we have not only media customers,

44
00:03:04,588 --> 00:03:08,662
but we are also developing the special applications for journalists,

45
00:03:08,806 --> 00:03:12,554
applications for communication, data processing, our press

46
00:03:12,592 --> 00:03:16,774
agencies coupled with the different other smaller european agencies,

47
00:03:16,822 --> 00:03:21,098
and we are processing a huge amount of information in order to deliver different

48
00:03:21,184 --> 00:03:24,990
media to the public, to deliver the true news and

49
00:03:25,060 --> 00:03:29,146
some other different exciting things. And we have actually two data centers

50
00:03:29,178 --> 00:03:33,230
in bin and I'm like a critical person for the cloud topics and

51
00:03:33,380 --> 00:03:37,282
with AWS. So I have already put my hand on different cloud

52
00:03:37,416 --> 00:03:40,610
integrations in different applications that we are running.

53
00:03:40,760 --> 00:03:44,702
So we are running lots of mobile applications on AWS. We do the analytics,

54
00:03:44,766 --> 00:03:48,386
data processing and of course since we have critical appliances,

55
00:03:48,418 --> 00:03:51,878
we are doing the disaster recovery. But this talk is not about it

56
00:03:51,964 --> 00:03:55,430
and media publishing and processing, because AWS with these

57
00:03:55,500 --> 00:03:59,334
services, it gives too many opportunities that you can utilize

58
00:03:59,382 --> 00:04:03,450
to deliver your business targets and build completely different business

59
00:04:03,520 --> 00:04:07,178
logics for different cases. And actually

60
00:04:07,264 --> 00:04:10,842
the topic of our discussion today is meteor contact

61
00:04:10,896 --> 00:04:14,670
plus. It's one of the applications that we are running. So the idea behind

62
00:04:14,740 --> 00:04:18,190
was to create a centralized solution that will deliver.

63
00:04:18,930 --> 00:04:22,686
For example, you have some exciting announcement of your company that you

64
00:04:22,788 --> 00:04:26,606
launched a satellite or new invention, whatever, and you can

65
00:04:26,628 --> 00:04:30,850
come to Mediacontact plus select the best journalists

66
00:04:31,990 --> 00:04:37,106
who will take the best from your information and share it for

67
00:04:37,128 --> 00:04:38,690
the good auditory.

68
00:04:40,090 --> 00:04:43,254
So you just need to tell what, where and application is

69
00:04:43,292 --> 00:04:46,422
built in such manner that you will just

70
00:04:46,476 --> 00:04:49,914
get it delivered and your information will be processed and

71
00:04:49,952 --> 00:04:54,198
spread. And actually since it's powered by AWS,

72
00:04:54,294 --> 00:04:57,990
it was actually a first project that APIC

73
00:04:58,070 --> 00:05:01,274
delivered in the cloud. And AWS is actually

74
00:05:01,312 --> 00:05:05,214
an amazing solution. We have a few projects that relies on it and

75
00:05:05,412 --> 00:05:08,686
we are powering the complete service is built on the

76
00:05:08,708 --> 00:05:12,442
backbone of AWS. So this is a fundamental thing

77
00:05:12,516 --> 00:05:16,338
and a good example how the single simple email service

78
00:05:16,424 --> 00:05:20,002
can power not simple application. And we have

79
00:05:20,056 --> 00:05:23,762
different integrations of other APA systems just to

80
00:05:23,816 --> 00:05:27,634
make sure that messages are delivered properly

81
00:05:27,682 --> 00:05:31,686
and they have resonance measurements. So we are processing lots of data which comes

82
00:05:31,788 --> 00:05:34,920
from AWS, SAS from AWS cloud from,

83
00:05:36,330 --> 00:05:39,898
and all this data is processed by automation. I'm going to present to you a

84
00:05:39,904 --> 00:05:43,706
bit later in this session, but just there is

85
00:05:43,728 --> 00:05:46,826
a unique integration of AWS solution in

86
00:05:46,848 --> 00:05:49,930
the real product, but also we should

87
00:05:50,000 --> 00:05:53,982
couplely integrate it with the real people who are working in the product

88
00:05:54,036 --> 00:05:58,686
team in Apple Cs. Yeah, this was running since 2021 and

89
00:05:58,788 --> 00:06:03,090
yeah, outcome of why actually this session is here today that

90
00:06:03,240 --> 00:06:07,314
I was trying to maximize the outcome of

91
00:06:07,352 --> 00:06:11,314
usage of AWS because initially it was built not

92
00:06:11,352 --> 00:06:15,438
by me and I just took over the project and just made

93
00:06:15,464 --> 00:06:18,520
it better. Yeah, I just came, I rebuilt and now it.

94
00:06:19,530 --> 00:06:22,470
Yeah. Just a few words on AWS.

95
00:06:22,970 --> 00:06:26,390
What I absolutely love it. It does not create any

96
00:06:26,460 --> 00:06:29,400
headache. For example we have lots of customers,

97
00:06:29,930 --> 00:06:33,114
I don't want to lie, but lots of big companies who

98
00:06:33,152 --> 00:06:36,214
are already doing sending through it and setup

99
00:06:36,262 --> 00:06:40,134
is pretty easy. You just have to follow some small things like the mark setup,

100
00:06:40,182 --> 00:06:44,170
you have to make the proper DkIM alignment SPF records,

101
00:06:44,250 --> 00:06:47,482
you have to make sure that domain is validated

102
00:06:47,546 --> 00:06:50,746
properly and you have just to follow some small guidelines

103
00:06:50,778 --> 00:06:55,054
from AWS. For example, if it's marketing you should include the unfollow

104
00:06:55,102 --> 00:06:58,562
link in your body of the message. AWS controls this

105
00:06:58,616 --> 00:07:02,146
and you should take care about it because we

106
00:07:02,168 --> 00:07:05,454
have to fight this pump together and setup is extremely

107
00:07:05,502 --> 00:07:09,090
easy and it does not limit you in any metas.

108
00:07:09,170 --> 00:07:12,514
You would like to have it. So you can use it like a normal SMTP

109
00:07:12,562 --> 00:07:16,402
client or you can use it like API integration

110
00:07:16,466 --> 00:07:20,342
for your application and of course it can be a part of complete

111
00:07:20,396 --> 00:07:24,134
serverless project. I use Seth also for my own purposes,

112
00:07:24,182 --> 00:07:28,122
not only for the commercial ones. And what actually I hate about

113
00:07:28,176 --> 00:07:32,110
of it because it's like a love and hate that's normal in any situation with

114
00:07:32,180 --> 00:07:35,934
interesting things. Complaint rate is a bit specific

115
00:07:36,132 --> 00:07:40,160
because for example you might be complained because

116
00:07:40,530 --> 00:07:44,194
the IP address from which SS is operating, it comes

117
00:07:44,232 --> 00:07:47,842
out from some strange lease which

118
00:07:47,896 --> 00:07:50,642
are not even accessible directly by the link.

119
00:07:50,776 --> 00:07:54,306
And yeah it may hurt your delivery rate. And this is

120
00:07:54,328 --> 00:07:57,986
important because actually this is a messaging thing and you want to have the

121
00:07:58,008 --> 00:08:01,942
things delivered and yeah but out of the box

122
00:08:01,996 --> 00:08:05,126
you don't have any logging, any tracking, you have to build it

123
00:08:05,148 --> 00:08:08,762
ourselves. But I will show you the example, maybe that will also

124
00:08:08,816 --> 00:08:13,020
be useful for you. And yeah, as it says it's simple service and

125
00:08:13,950 --> 00:08:17,926
it just gives you sending the functionality. And I'm

126
00:08:17,958 --> 00:08:22,094
pretty excited about of it because it's a good foundation for the things and

127
00:08:22,212 --> 00:08:26,320
I don't think there are much better services who can do the same without

128
00:08:27,010 --> 00:08:30,606
comparable effort. But you just need to

129
00:08:30,628 --> 00:08:34,670
take some things into account. But proper domain configuration

130
00:08:34,750 --> 00:08:38,286
on AWS is essential and that's

131
00:08:38,318 --> 00:08:41,954
why we take some time to track the delivery rate. We take

132
00:08:42,072 --> 00:08:45,300
some additional notices because of it.

133
00:08:46,070 --> 00:08:49,526
But in general SAS is amazing service. So if you just have to

134
00:08:49,548 --> 00:08:53,622
send the email, this is the way to go. And going

135
00:08:53,676 --> 00:08:57,480
a bit back to the global vision of the application.

136
00:08:57,850 --> 00:09:01,206
So you're coming to the company. So let's just imagine

137
00:09:01,238 --> 00:09:04,698
the case you have the perfectly working application. So you are a

138
00:09:04,704 --> 00:09:07,900
cloud architect, engineer, Ops position doesn't matter.

139
00:09:08,670 --> 00:09:11,020
And you see that. Well,

140
00:09:11,550 --> 00:09:15,166
since it was the first experience for your company, probably it

141
00:09:15,188 --> 00:09:18,734
was built nice, your colleagues are great people and of course

142
00:09:18,772 --> 00:09:22,014
we can leave everything AWS, it is don't touch if it works. This is like

143
00:09:22,052 --> 00:09:25,906
a mantra, but this is not about of us. We are interested to

144
00:09:25,928 --> 00:09:29,358
gain benefits of the cloud for our company, for ourselves,

145
00:09:29,454 --> 00:09:32,990
and be more developed and be cooler, specialist.

146
00:09:33,150 --> 00:09:36,162
And of course we can also drink coffee and relax. So if it works,

147
00:09:36,216 --> 00:09:39,926
why should we stress? But yeah, this is not the way and this is why

148
00:09:39,948 --> 00:09:43,670
we are starting the analysis. And yeah,

149
00:09:43,740 --> 00:09:47,474
this is our work and we don't have to yield on the cloud because cloud

150
00:09:47,532 --> 00:09:50,986
actually is amazing. And what

151
00:09:51,008 --> 00:09:53,500
I just would like to underline that.

152
00:09:54,830 --> 00:09:58,666
So first of all, the best way to understand what you

153
00:09:58,688 --> 00:10:01,754
have is just see how it runs, what are you

154
00:10:01,792 --> 00:10:05,166
running, who is running it, and just talk

155
00:10:05,188 --> 00:10:08,974
to your colleagues because they have already done it, of course they have analyzed the

156
00:10:09,012 --> 00:10:12,786
situation, they have took the decisions. And first of

157
00:10:12,808 --> 00:10:16,114
all, you have lots of different information. Data is

158
00:10:16,152 --> 00:10:19,950
extremely valuable in this case. And thankfully

159
00:10:20,030 --> 00:10:24,082
AWS gives you lots of opportunities why

160
00:10:24,136 --> 00:10:28,262
and where you can have this data from the different perspectives and only

161
00:10:28,316 --> 00:10:31,606
from AWS services, you will have already the half of information

162
00:10:31,708 --> 00:10:34,920
that you will have. So just let's have a quick look.

163
00:10:35,770 --> 00:10:39,334
You have to talk to the people, this is extremely important.

164
00:10:39,452 --> 00:10:43,242
And you cannot just deliver the thing on yourself and make a statement that

165
00:10:43,296 --> 00:10:46,506
this is this. Of course if you have some authority, you can

166
00:10:46,528 --> 00:10:50,478
do it, but it still be easier. It's already running

167
00:10:50,564 --> 00:10:54,842
and you must see why and how it runs. So Cloudwatch

168
00:10:54,906 --> 00:10:58,366
is amazing thing. If you will just take some time to

169
00:10:58,388 --> 00:11:02,058
analyze the logging, analyze existing metrics,

170
00:11:02,234 --> 00:11:06,050
maybe onboard some additional metrics, you will have lots of valuable data

171
00:11:06,120 --> 00:11:09,666
because then you can process the behavior of your customers

172
00:11:09,768 --> 00:11:13,042
which are visiting the application, you can see how good are you

173
00:11:13,096 --> 00:11:17,018
scaled or how good are you utilizing the actual resources

174
00:11:17,054 --> 00:11:20,886
that you have created. Maybe you have underutilized environment and

175
00:11:20,908 --> 00:11:24,214
you can just slice the size of your instances or

176
00:11:24,252 --> 00:11:28,134
for example RDs, whatever you have and be much better.

177
00:11:28,332 --> 00:11:32,662
Insights and dashboards. It's a very amazing thing to gather

178
00:11:32,726 --> 00:11:35,978
all the data together and with the insights you can run

179
00:11:36,064 --> 00:11:39,770
the queries, for example, for some specific message, for example

180
00:11:39,840 --> 00:11:43,434
that comes out from your application. And of course you

181
00:11:43,472 --> 00:11:47,050
must be connected to the cloud, watch for example with a docket driver

182
00:11:47,130 --> 00:11:50,302
or something else, whatever you use. And one of the things

183
00:11:50,356 --> 00:11:54,414
that I would like to mention, and I will mention separately is AWS fault injection

184
00:11:54,462 --> 00:11:58,270
service because despite any application can be running perfectly.

185
00:11:58,350 --> 00:12:01,666
But you don't have to

186
00:12:01,688 --> 00:12:05,390
be surprised. Of course it's nice to have a surprise, for example, some BMW

187
00:12:05,470 --> 00:12:08,806
parked in front of your windows. But when you are waking up at 02:00

188
00:12:08,828 --> 00:12:12,406
p.m. From your phone, from your operations team, that is broken and you

189
00:12:12,428 --> 00:12:15,634
don't have recovery plans, you don't have anything. So fault

190
00:12:15,682 --> 00:12:19,382
injection service is amazing because you can simulate breakage of AWS

191
00:12:19,446 --> 00:12:23,034
things, you can break your application, you can break the

192
00:12:23,072 --> 00:12:26,426
networking and just understand what is missing, where you have

193
00:12:26,448 --> 00:12:31,626
the missed observability, where you have missed maybe some functions

194
00:12:31,658 --> 00:12:35,134
in your application, what is missing. So it's amazing tool

195
00:12:35,172 --> 00:12:37,854
to remove the blind spots for you.

196
00:12:37,972 --> 00:12:41,742
And yeah, I still have to admit that

197
00:12:41,796 --> 00:12:45,394
Apache G Metro, it's a good old tool,

198
00:12:45,592 --> 00:12:49,374
but in this case I also use the Robert framework and selenium

199
00:12:49,422 --> 00:12:53,282
to simulate our users and to understand how much

200
00:12:53,336 --> 00:12:56,134
and what we can run and in which way.

201
00:12:56,252 --> 00:13:00,502
And of course since also the part of this talk is

202
00:13:00,636 --> 00:13:04,230
how to comply with the existing processes,

203
00:13:05,450 --> 00:13:09,370
I really like the cloud watch

204
00:13:09,440 --> 00:13:13,446
because yeah, it basically does lots of things, but checkmk

205
00:13:13,558 --> 00:13:16,886
out of the box provides you most essential

206
00:13:16,998 --> 00:13:20,540
things that you would like to monitor in your AWS account.

207
00:13:20,910 --> 00:13:24,560
It does after detection of the most important things and

208
00:13:25,250 --> 00:13:28,926
it does pretty amazing job that you can just have a look how it

209
00:13:28,948 --> 00:13:33,342
works and use it like a foundation for your observability pipeline.

210
00:13:33,486 --> 00:13:36,974
Yeah, and from the people. For example, in this case I was deeply

211
00:13:37,022 --> 00:13:40,622
working with our developers, with our solutions architect,

212
00:13:40,686 --> 00:13:45,446
because he was maintaining the setup before it

213
00:13:45,468 --> 00:13:48,806
was important to find the reasons. So why for example it

214
00:13:48,828 --> 00:13:53,062
was not made serverless or for example why this

215
00:13:53,116 --> 00:13:56,086
certain database was picked or whatever.

216
00:13:56,188 --> 00:13:59,462
And also it's very important to know your customer,

217
00:13:59,596 --> 00:14:03,066
what he will do, in which amount, how he will do it. This is

218
00:14:03,088 --> 00:14:06,554
why you need to communicate with the product team and the second reason why

219
00:14:06,592 --> 00:14:10,274
you have to communicate with the product case. You can do a lot on AWS,

220
00:14:10,342 --> 00:14:14,302
but as you know, every press on AWS costs money.

221
00:14:14,436 --> 00:14:17,914
And your target aws a cloud architect not only to deliver

222
00:14:17,962 --> 00:14:22,814
the efficient solution, but also make it good

223
00:14:22,852 --> 00:14:26,402
from their cost side. Because your business thing

224
00:14:26,456 --> 00:14:29,922
must be profitable because otherwise you will have no job and

225
00:14:30,056 --> 00:14:33,470
you must take lots of things in the cloud from the technical perspective,

226
00:14:33,550 --> 00:14:37,074
from the other perspective, you should see what you

227
00:14:37,112 --> 00:14:40,482
already have. And I have to admit that one of the best cases

228
00:14:40,626 --> 00:14:44,226
to understand what you have, especially if your team initially didn't

229
00:14:44,258 --> 00:14:47,640
use cloudformation on terraform or Opentofu doesn't matter.

230
00:14:48,810 --> 00:14:52,358
You have to understand with what are you working, how it runs,

231
00:14:52,454 --> 00:14:55,542
where it runs, how much data it consumes

232
00:14:55,686 --> 00:14:59,002
consumes. And one of the best ways to understand what you have

233
00:14:59,056 --> 00:15:02,426
is just to use infrastructure as code. If you

234
00:15:02,448 --> 00:15:05,342
already have the template, you are lucky you can just go through it,

235
00:15:05,396 --> 00:15:08,970
see which resources, what is where connected. But if you don't

236
00:15:09,050 --> 00:15:12,806
have it and you are coming to the blank project with a minimal documentation

237
00:15:12,858 --> 00:15:16,180
that has just some charts of the setup or whatever,

238
00:15:17,510 --> 00:15:21,342
and it's an amazing way to get understanding

239
00:15:21,406 --> 00:15:24,786
what you run. But also when you are

240
00:15:24,808 --> 00:15:28,034
working with AWS services, you don't have to reinvent the wind

241
00:15:28,152 --> 00:15:31,906
wheel because most of the things that they are already created

242
00:15:31,938 --> 00:15:35,266
by AWS. For example, you don't need to run the EC

243
00:15:35,298 --> 00:15:38,438
two with the database because you can go with the RGAs and you will have

244
00:15:38,444 --> 00:15:42,698
the managed database. Or you don't have to run some specific

245
00:15:42,784 --> 00:15:46,390
things for EFS because you can use AWS EFS

246
00:15:46,550 --> 00:15:49,946
or you don't have to set up extra monitoring. You can try to

247
00:15:49,968 --> 00:15:53,166
utilize cloud watch natively in

248
00:15:53,188 --> 00:15:56,686
your project, which is amazing because you have lots of

249
00:15:56,708 --> 00:15:59,310
metrics you can process and Et cetera, et.

250
00:16:02,530 --> 00:16:05,806
So for example, if AWS says that, as I

251
00:16:05,828 --> 00:16:08,862
already said with the example of database,

252
00:16:08,926 --> 00:16:12,162
that you can use RDS for your things and

253
00:16:12,216 --> 00:16:15,954
then you should prefer to take the RDS. And actually one hint

254
00:16:16,082 --> 00:16:19,842
for the certifications, you should know the AWS

255
00:16:19,906 --> 00:16:23,206
way for the things because it basically pops up in

256
00:16:23,228 --> 00:16:27,160
the most of certification fashions. And if you will be

257
00:16:27,610 --> 00:16:31,562
getting AWS certified, this is essential not only to

258
00:16:31,616 --> 00:16:35,386
use the services but know how AWS will encourage you. And I

259
00:16:35,408 --> 00:16:38,380
also remember one good example is to have for example,

260
00:16:39,150 --> 00:16:43,390
not host the Kafka on

261
00:16:43,460 --> 00:16:46,298
itself. You can go to AWs, MQ and etc.

262
00:16:46,474 --> 00:16:49,854
And automate the routine because time is gold and you

263
00:16:49,892 --> 00:16:54,154
get paid for your work. And for example, you don't want to come to some

264
00:16:54,212 --> 00:16:57,826
certain account and press some button because nobody of you

265
00:16:57,848 --> 00:17:00,782
know if it can be automated, it must be automated.

266
00:17:00,846 --> 00:17:04,466
But don't automate everything, understand the value of

267
00:17:04,488 --> 00:17:08,374
the things because when we are talking about every implementation, you should

268
00:17:08,412 --> 00:17:11,510
understand that effort also costs money,

269
00:17:11,580 --> 00:17:15,206
because every service also costs money. But you should find the

270
00:17:15,228 --> 00:17:19,074
spot of the balance, how much effort you will invest and

271
00:17:19,212 --> 00:17:22,602
what will be the output from this and actually

272
00:17:22,656 --> 00:17:25,866
finding the big spots. Also a good point because application must

273
00:17:25,888 --> 00:17:29,606
be resilient. You must have almost no downtimes

274
00:17:29,638 --> 00:17:33,502
as much as you can, especially in the business times, you have to avoid it

275
00:17:33,636 --> 00:17:37,002
and for example, you should see from the security perspective,

276
00:17:37,066 --> 00:17:40,334
you don't have to have the exposed credits or

277
00:17:40,372 --> 00:17:43,842
have unpatched things and some

278
00:17:43,896 --> 00:17:46,180
other things. And for example,

279
00:17:46,630 --> 00:17:50,654
also going forward, if you can save on some things by using spot

280
00:17:50,702 --> 00:17:54,162
instances or by using different type

281
00:17:54,216 --> 00:17:57,954
of the instance or some smaller scale of RDs,

282
00:17:58,082 --> 00:18:01,366
because it's just underused and you have to use the

283
00:18:01,388 --> 00:18:04,994
resources for what are you paying. So maybe you can optimize

284
00:18:05,042 --> 00:18:08,582
it this way. And of course security is important and thankfully

285
00:18:08,646 --> 00:18:11,962
AWS gives you lots of good practices how

286
00:18:12,016 --> 00:18:16,314
and what can be done. You can use additional things and basically

287
00:18:16,432 --> 00:18:20,470
the baselines for architecting and service implementation.

288
00:18:20,550 --> 00:18:23,774
You can get AWS secure as you can, but you still

289
00:18:23,812 --> 00:18:28,026
have to be careful and include security on the stage

290
00:18:28,058 --> 00:18:31,546
of software development, building, imaging and deploying

291
00:18:31,578 --> 00:18:34,654
it to AWS. So going forward, let's talk

292
00:18:34,692 --> 00:18:37,954
about the evolution, actually what we did and how I did it.

293
00:18:37,992 --> 00:18:41,554
But first of all, I would like to remind you that this is the

294
00:18:41,592 --> 00:18:44,482
first cloud deployment that was in the company,

295
00:18:44,616 --> 00:18:48,594
and we have already developers, lots of amazing developers

296
00:18:48,642 --> 00:18:51,894
who work with lots of things, but they are used to

297
00:18:52,012 --> 00:18:55,174
work in some specific ways. And what is important

298
00:18:55,292 --> 00:18:58,802
in every relationship doesn't matter, romantic business, et cetera.

299
00:18:58,866 --> 00:19:02,678
You don't have to scare anyone and everything must be done softly.

300
00:19:02,774 --> 00:19:05,980
And our target as a cloud engineer is to

301
00:19:06,430 --> 00:19:09,958
precisely, but very carefully introduce the cloud things in the

302
00:19:09,984 --> 00:19:13,614
company because otherwise things may play it against of you and

303
00:19:13,652 --> 00:19:16,974
you will have to deal with some VMware host and call it

304
00:19:17,012 --> 00:19:18,320
cloud. But yeah,

305
00:19:20,370 --> 00:19:24,490
so the target here was not to cause any additional

306
00:19:24,650 --> 00:19:27,922
headache for the developers, just to give them what they have

307
00:19:28,056 --> 00:19:32,142
and do as much as we can on the side of the cloud completely transparently

308
00:19:32,206 --> 00:19:35,498
for them. And just if there is an improvement that will minimize

309
00:19:35,534 --> 00:19:39,222
their work, just notify them. And goal is to

310
00:19:39,276 --> 00:19:43,346
remove as much as blind spots as we can and improve efficiency.

311
00:19:43,538 --> 00:19:47,240
Because efficiency is the most important for our application

312
00:19:48,590 --> 00:19:51,766
when we already know what we have, how it runs,

313
00:19:51,958 --> 00:19:55,446
so what it needs and who uses

314
00:19:55,478 --> 00:19:58,698
it. It's nice to ask yourself such questions.

315
00:19:58,784 --> 00:20:03,178
So of course, as I mentioned, we don't want to break the processes.

316
00:20:03,274 --> 00:20:06,862
Can we run more cost efficiently? It's the most essential because

317
00:20:06,916 --> 00:20:11,054
there are lots of opportunities to optimize your costs from using any

318
00:20:11,252 --> 00:20:15,122
phenotypes tools, from just having a good engineer or

319
00:20:15,176 --> 00:20:18,722
just for example use the AWS config. And there is a case

320
00:20:18,856 --> 00:20:22,974
when for example, the AWS config

321
00:20:23,022 --> 00:20:26,386
was able to find lots of unused snapshots of EBS that

322
00:20:26,408 --> 00:20:29,954
were just burning the money and this is why you also have to use it

323
00:20:30,072 --> 00:20:33,846
and wealthy for our application that we are running on

324
00:20:33,868 --> 00:20:38,126
the proper instance with the proper database size. So we don't want to underutilize

325
00:20:38,178 --> 00:20:41,802
or overutilize the things. Right size also belongs to it,

326
00:20:41,856 --> 00:20:45,820
set up reliable, it should be taken into account for every

327
00:20:46,430 --> 00:20:50,234
production deployment because your service must

328
00:20:50,272 --> 00:20:53,566
be steady AWS you can and for example this is why I

329
00:20:53,588 --> 00:20:56,942
will go forward and show you some things

330
00:20:56,996 --> 00:21:00,986
that directly influence the liability. Monetary coverage

331
00:21:01,018 --> 00:21:04,382
is also essential because then you might know how to behave

332
00:21:04,446 --> 00:21:08,094
in some situations or just to get notified

333
00:21:08,222 --> 00:21:12,146
to minimize the downtimes. This is important. Security as I

334
00:21:12,168 --> 00:21:16,222
mentioned also is in this list and target

335
00:21:16,286 --> 00:21:19,974
for me was to get rid of operational overhead and this is why I

336
00:21:20,012 --> 00:21:24,626
brought some of automations to this project. And let's

337
00:21:24,658 --> 00:21:28,606
have a look. So this is the initial setup. Basically it might remind

338
00:21:28,658 --> 00:21:32,502
you the most simple or very, I would say vanilla

339
00:21:32,566 --> 00:21:36,394
deployment of AWS. We have just something running on EC two

340
00:21:36,432 --> 00:21:39,274
with something. So we use the code,

341
00:21:39,312 --> 00:21:42,666
commit, code build, we build the things. We have a few staging

342
00:21:42,698 --> 00:21:46,142
accounts so everything is pretty simple, it just

343
00:21:46,196 --> 00:21:50,334
works. But this is nothing fancy. And of

344
00:21:50,372 --> 00:21:54,734
course we can see some things that we can use, the private

345
00:21:54,782 --> 00:21:58,990
subnets, we can use, some other implementations

346
00:21:59,070 --> 00:22:02,814
we can utilize the web, we can use two RDS

347
00:22:02,862 --> 00:22:06,386
instances, second one for the standby to improve the resiliency because

348
00:22:06,408 --> 00:22:09,686
then you will have a short of a lower time. And you

349
00:22:09,708 --> 00:22:13,730
can also think about the backups and maybe some automation

350
00:22:13,810 --> 00:22:17,350
because right now on this stage there is no delivery of the things

351
00:22:17,420 --> 00:22:20,890
coming from the main account. So as I said,

352
00:22:20,960 --> 00:22:24,026
yeah it was basically we were just running containers on

353
00:22:24,048 --> 00:22:27,494
the EC. Two instances because this is like a normal Linux

354
00:22:27,542 --> 00:22:31,498
virtual machine and you can have a normal docker who everybody

355
00:22:31,584 --> 00:22:35,182
is used but they are on demand and we have to ask them

356
00:22:35,316 --> 00:22:38,762
is it actually a right thing for us single RDs,

357
00:22:38,826 --> 00:22:42,286
it's one of the most dangerous things that you

358
00:22:42,308 --> 00:22:46,178
can have because then you will have for example 1520

359
00:22:46,264 --> 00:22:50,340
minutes of failover and especially if you don't have

360
00:22:50,790 --> 00:22:54,274
the non credit system, especially for your

361
00:22:54,312 --> 00:22:57,826
storage or for the instance type, if you don't use the production grade

362
00:22:57,858 --> 00:23:01,846
type you can stuck to the credits and if you don't monitor them you

363
00:23:01,868 --> 00:23:05,350
will be very unpleasantly surprised. No automation,

364
00:23:06,410 --> 00:23:09,590
no comment on this. So provision time

365
00:23:09,660 --> 00:23:13,906
also was essential because it affects the recovery time and prism

366
00:23:13,938 --> 00:23:17,366
was a way how to improve it. And it came out from analysis

367
00:23:17,398 --> 00:23:20,934
of application behavior. I went through the startup

368
00:23:20,982 --> 00:23:24,746
process but yeah there is also the way monitoring

369
00:23:24,778 --> 00:23:28,410
was extremely basic we were just checking the endpoint from external

370
00:23:28,490 --> 00:23:32,382
endpoint of the load balancer, not even the application itself. And some

371
00:23:32,436 --> 00:23:36,522
things, for example we don't use security, we didn't use the security management

372
00:23:36,666 --> 00:23:40,514
or secret management. Vast was missing and

373
00:23:40,552 --> 00:23:44,306
some small things. And to redeploy the thing you have to actually come to the

374
00:23:44,328 --> 00:23:47,766
console and do the click ops. Well of

375
00:23:47,788 --> 00:23:51,334
course it can be easily resolved. But what

376
00:23:51,372 --> 00:23:55,430
I would like to underline again the target was not to break the existing

377
00:23:56,890 --> 00:24:00,390
setup which was working and with which developers are familiar.

378
00:24:00,470 --> 00:24:04,234
I didn't want to introduce any extra things or new services like

379
00:24:04,272 --> 00:24:08,486
ECS or whatever. The target for me was to keep the same baseline.

380
00:24:08,598 --> 00:24:11,726
Of course there are lots of things that

381
00:24:11,748 --> 00:24:15,230
you can do and please have a look on the current setup.

382
00:24:16,050 --> 00:24:19,614
As far as you can see lots of things appeared. And here

383
00:24:19,732 --> 00:24:23,730
we have a different designation of the running

384
00:24:23,800 --> 00:24:27,518
application. Core subnets were moved, we have different database,

385
00:24:27,614 --> 00:24:31,714
we got the EFS for the caching of the shared data. We got

386
00:24:31,752 --> 00:24:35,054
some security checking by inspector, by the

387
00:24:35,112 --> 00:24:38,230
config, by guard duty for this

388
00:24:38,300 --> 00:24:41,986
application we got additional integrations which just uses

389
00:24:42,018 --> 00:24:45,814
the data that comes from the application, from the Amazon services

390
00:24:45,932 --> 00:24:49,180
that for example as far as you can see on the right side,

391
00:24:49,630 --> 00:24:53,420
they can contact our product team or they can contact me

392
00:24:54,030 --> 00:24:57,354
and the building process is automatical. And the most

393
00:24:57,392 --> 00:25:00,554
important that the whole setup was fit in

394
00:25:00,592 --> 00:25:04,798
the processes of the company, how it was working already

395
00:25:04,884 --> 00:25:08,734
for a couple of, maybe a long period of time I would say.

396
00:25:08,852 --> 00:25:12,058
And yeah, so what we get after the transformation,

397
00:25:12,154 --> 00:25:16,306
I have improved the performance even because we were able to,

398
00:25:16,408 --> 00:25:20,654
by reducing the costs, by changing the approaches

399
00:25:20,782 --> 00:25:24,098
we could take new things that probably

400
00:25:24,184 --> 00:25:27,638
would be better fit for our application. That's why you have to analyze the

401
00:25:27,644 --> 00:25:31,506
performance and we deeply increase the monitoring

402
00:25:31,538 --> 00:25:35,174
coverage. We control the metrics from the cloud front, from the

403
00:25:35,212 --> 00:25:39,094
RTs, from the application itself, the things

404
00:25:39,132 --> 00:25:43,042
that can come up in the logs of application there is a responsive

405
00:25:43,106 --> 00:25:47,130
SAS failures, the connection and actually

406
00:25:47,200 --> 00:25:50,398
there are lots of valuable data that you can just go and collect around.

407
00:25:50,484 --> 00:25:53,450
For example like mushrooms after the rain.

408
00:25:53,610 --> 00:25:56,922
And now we have fully automated

409
00:25:56,986 --> 00:26:00,880
deployment which companys with the ICL process and

410
00:26:01,410 --> 00:26:05,250
complies with the whole change process and everything

411
00:26:05,320 --> 00:26:08,500
you have to do just to approve it and

412
00:26:08,950 --> 00:26:12,898
automation will just get the deployment done for you. And if something goes wrong

413
00:26:12,984 --> 00:26:16,450
it goes back. And security and resiliency

414
00:26:16,530 --> 00:26:19,958
was also improved because we don't have any exposed things,

415
00:26:20,044 --> 00:26:24,710
things were more hiding. And we

416
00:26:24,780 --> 00:26:27,826
have a few additional security checks, conformance checks

417
00:26:27,858 --> 00:26:31,446
and this is important. Yeah, as I mentioned already SAS events

418
00:26:31,478 --> 00:26:33,926
and some other of the small improvements.

419
00:26:34,118 --> 00:26:38,074
And just going back to the scheme, I just wanted to mention that this is

420
00:26:38,112 --> 00:26:41,262
a multi account architecture. So we have a main account

421
00:26:41,316 --> 00:26:44,830
that runs the production, we have the staging account,

422
00:26:44,900 --> 00:26:48,650
best account for our developers, and we have the separated

423
00:26:48,730 --> 00:26:51,310
account which acts AWS repository.

424
00:26:51,810 --> 00:26:55,522
And there is a big conjunction between those

425
00:26:55,576 --> 00:26:59,860
things, but it lets you keep the things more tidy because

426
00:27:00,710 --> 00:27:04,020
then you can have a lot of the small things

427
00:27:04,630 --> 00:27:07,894
just more separately and you will have

428
00:27:08,012 --> 00:27:12,918
less points of the breakage. And what I also important

429
00:27:13,004 --> 00:27:16,674
to mention that it's not only about controlling

430
00:27:16,722 --> 00:27:20,394
the stuff in AWS. As you can see, we also control what is

431
00:27:20,432 --> 00:27:27,466
incoming from the systems on which the application so

432
00:27:27,568 --> 00:27:32,022
the next part of this presentation, what I would like to tell you so

433
00:27:32,176 --> 00:27:35,438
sadly I cannot ask you, but please write to the comments write to me to

434
00:27:35,444 --> 00:27:38,640
the LinkedIn what is your favorite AWS service?

435
00:27:39,330 --> 00:27:43,234
Mine is actually it's a bunch of services which

436
00:27:43,272 --> 00:27:47,134
are building the basement of the idea that AWS

437
00:27:47,182 --> 00:27:50,386
is basically a Lego and you can take any service and

438
00:27:50,408 --> 00:27:54,002
make it yours. But for foundation of

439
00:27:54,056 --> 00:27:57,606
any expansion and interaction with AWS services,

440
00:27:57,708 --> 00:28:01,586
it's Lambda Eventbridge SNs and Cloudwatch locks.

441
00:28:01,698 --> 00:28:06,418
This is the amazing Ford that I would say. And lambda

442
00:28:06,434 --> 00:28:09,814
is so amazingly integrated with the different things and

443
00:28:09,932 --> 00:28:13,306
just let you do the thing that you want. If you just spend some

444
00:28:13,328 --> 00:28:16,506
time or coding or asking Chen GPT of course,

445
00:28:16,688 --> 00:28:19,734
and you can automate this stuff. With the event breach,

446
00:28:19,782 --> 00:28:24,010
you can have communication with the SQS or SNS.

447
00:28:24,170 --> 00:28:28,510
And this is why SAS

448
00:28:29,010 --> 00:28:32,286
does not make much headache for us, because we can react to

449
00:28:32,308 --> 00:28:36,494
the bounce events, we can react to the complaints, we can process the logging,

450
00:28:36,542 --> 00:28:40,206
we can gather the data out of it. But since it's

451
00:28:40,238 --> 00:28:44,322
simple service, by taking lambda and some of the things,

452
00:28:44,456 --> 00:28:47,574
and not only on the SAS, actually this is

453
00:28:47,612 --> 00:28:51,654
this. With every AWS service you can

454
00:28:51,692 --> 00:28:55,126
create amazing things, but you just have to understand what

455
00:28:55,148 --> 00:28:58,442
you want and what you need. And if you want to go even

456
00:28:58,496 --> 00:29:02,474
deeper, you can build the step functions. I absolutely love step functions because

457
00:29:02,592 --> 00:29:06,682
they are covering lots of amazing things for you.

458
00:29:06,816 --> 00:29:10,394
And what is

459
00:29:10,432 --> 00:29:14,494
important, that you can also use the s three for caching or dynamic B for

460
00:29:14,532 --> 00:29:15,630
the storaging.

461
00:29:17,970 --> 00:29:21,486
AWS gives you lots of opportunities that you have just to come

462
00:29:21,588 --> 00:29:24,814
and use. So let's go forward and yeah,

463
00:29:24,852 --> 00:29:28,142
as I have already mentioned about the AWS fault injection

464
00:29:28,206 --> 00:29:31,694
service, it allows you to break parts of the setup

465
00:29:31,742 --> 00:29:35,618
granularly, so you can break the networking. You can kill the database

466
00:29:35,714 --> 00:29:38,280
if you have the microservices and actually,

467
00:29:39,450 --> 00:29:42,822
unfortunately, I forgot to mention that MediaConnect, plus it has

468
00:29:42,876 --> 00:29:46,918
three tightly running containers and one node and

469
00:29:47,084 --> 00:29:51,180
those microservices, they are taking care of different parts of application.

470
00:29:51,630 --> 00:29:55,466
And for me, it was essential to understand

471
00:29:55,568 --> 00:29:59,674
how it would behave if one of the microservices was

472
00:29:59,792 --> 00:30:03,470
took out. And fault injection service

473
00:30:03,540 --> 00:30:07,006
actually saves lots of time. You don't have to automate the things,

474
00:30:07,188 --> 00:30:10,714
and it's a game changer for observability coverage,

475
00:30:10,762 --> 00:30:14,434
because you don't have to wait for the event to be happened. You just

476
00:30:14,472 --> 00:30:17,666
can simulate the event, do the analysis, tell the

477
00:30:17,688 --> 00:30:21,154
outcome for your developers, understand how it would

478
00:30:21,192 --> 00:30:25,106
behave for yourself, what is Missy can just do it and it

479
00:30:25,128 --> 00:30:28,870
can automate some routine checks or something else.

480
00:30:29,020 --> 00:30:32,866
And yes, you can expand it. You can write systems manager

481
00:30:32,898 --> 00:30:36,134
pipelines that can come to your host or to

482
00:30:36,172 --> 00:30:39,030
your container, do some different weird things.

483
00:30:39,100 --> 00:30:43,386
And most important, it rolls back all the changes what it does.

484
00:30:43,568 --> 00:30:47,126
And it's even cooler now because it's

485
00:30:47,158 --> 00:30:50,262
a part of the resilience hub. And resilience hub,

486
00:30:50,326 --> 00:30:54,030
it not only allows you to break the things if you are just

487
00:30:54,100 --> 00:30:57,914
starting or if you are just not familiar, it gives you advices

488
00:30:58,042 --> 00:31:01,726
how you can proceed. So together with things, you can

489
00:31:01,908 --> 00:31:05,726
do a huge work which is basically called house engineering,

490
00:31:05,758 --> 00:31:09,186
and you can get ready with this service. And then what

491
00:31:09,208 --> 00:31:12,546
I also really like what is really missing. If you are

492
00:31:12,568 --> 00:31:16,034
running the database somewhere, I don't know where you can

493
00:31:16,072 --> 00:31:20,002
run it. But why? I like RDS so much that it has performance

494
00:31:20,066 --> 00:31:23,474
insights. And it's absolutely lifesaver for performance

495
00:31:23,522 --> 00:31:27,398
troubleshooting because you can just come to performance insights and see do you

496
00:31:27,404 --> 00:31:30,598
have the problems which are related to your instance,

497
00:31:30,774 --> 00:31:35,340
or if you have problems that are related to your application.

498
00:31:35,790 --> 00:31:39,046
For example, if SQL query was not built properly

499
00:31:39,158 --> 00:31:42,554
by your developer, it's amazingly simply to set up

500
00:31:42,592 --> 00:31:45,642
with the postgres, it's not an issue. But for the MySQL,

501
00:31:45,706 --> 00:31:49,562
you have to have some certain size of RGS instance. I guess it's

502
00:31:49,626 --> 00:31:53,220
bigger than the medium. And in our case,

503
00:31:53,670 --> 00:31:57,026
unfortunately, we had the RGS performance issue,

504
00:31:57,208 --> 00:32:00,610
and performance insights showed us the exact

505
00:32:00,680 --> 00:32:04,274
point, what was not running properly from the application side,

506
00:32:04,392 --> 00:32:07,782
and why the current AWS setup was not that

507
00:32:07,836 --> 00:32:11,122
good. And basically performance insights,

508
00:32:11,186 --> 00:32:14,582
you just press the button, you modify the RTS instance, you wait

509
00:32:14,636 --> 00:32:18,354
just a few minutes, and then you have the amazing source

510
00:32:18,482 --> 00:32:22,010
that can help you resolve all the potential issues.

511
00:32:22,160 --> 00:32:25,846
The coverage is simply amazing. And most important, it's cheap

512
00:32:25,958 --> 00:32:30,090
out of the box, you have seven day trial. But for example,

513
00:32:30,160 --> 00:32:34,126
just for three or $4 you will have three months of this service

514
00:32:34,228 --> 00:32:37,758
and you will have a big backbone of your

515
00:32:37,924 --> 00:32:41,326
data gathered from your real time running application with the

516
00:32:41,348 --> 00:32:44,990
real users and you can do long term observability

517
00:32:45,070 --> 00:32:48,766
if everything comes in. And from my perspective,

518
00:32:48,878 --> 00:32:52,942
performance insights is even more valuable than the RGS

519
00:32:53,006 --> 00:32:56,626
performance monitoring itself. And it's

520
00:32:56,658 --> 00:33:00,374
so amazing and you have to have it activated. Yeah,

521
00:33:00,492 --> 00:33:04,070
and going back to the swiss army knife,

522
00:33:04,650 --> 00:33:08,410
this is an example of automation that we have

523
00:33:08,560 --> 00:33:12,166
coming from AWS, SAS. SAS is doing some action,

524
00:33:12,278 --> 00:33:16,198
email sending whatever it makes the record to this logs.

525
00:33:16,294 --> 00:33:19,514
We have even breach rule that for example

526
00:33:19,632 --> 00:33:23,274
once a week runs a lambda that does the

527
00:33:23,312 --> 00:33:25,550
query over the cloudwatch logs,

528
00:33:27,810 --> 00:33:31,950
creates the report that then goes to our team. Then you

529
00:33:32,020 --> 00:33:35,774
are eliminating the thing that your colleagues must be AWS

530
00:33:35,822 --> 00:33:39,522
proficient to come to assess and whatever with

531
00:33:39,576 --> 00:33:43,362
this, using AWS services you can build thing

532
00:33:43,416 --> 00:33:47,286
that will be familiar for them and then they will be happy that

533
00:33:47,308 --> 00:33:50,870
they receive the data that they understand and they don't have to manage

534
00:33:50,940 --> 00:33:54,694
anything. And also going a bit out of

535
00:33:54,732 --> 00:33:58,386
this since you can grab any data from the SAS

536
00:33:58,498 --> 00:34:01,782
and this is why I build different dashboards

537
00:34:01,846 --> 00:34:04,860
and my product owner, he just comes to his account,

538
00:34:05,470 --> 00:34:09,226
not to his, to our account, sorry, that runs the application. He comes to the

539
00:34:09,248 --> 00:34:12,814
shared dashboard and he sees the sendings from which customer

540
00:34:12,932 --> 00:34:17,038
where if we have had the bounces responses and

541
00:34:17,204 --> 00:34:21,520
also because of it, there are a few more lambdas, we can mark

542
00:34:22,710 --> 00:34:25,938
some recipients AWS broken whatever.

543
00:34:26,024 --> 00:34:30,114
We can also interact with a database to give our

544
00:34:30,152 --> 00:34:33,138
application better response. And for example,

545
00:34:33,224 --> 00:34:37,014
if it's hard to re engineer the application and you need

546
00:34:37,052 --> 00:34:40,534
to have some specific function and you have it in AWS. This is

547
00:34:40,572 --> 00:34:43,874
an amazing example how you, the cloud engineer

548
00:34:43,922 --> 00:34:47,378
can expand some specific backend functionality

549
00:34:47,474 --> 00:34:51,242
by not making any changes to application. But you will have to think

550
00:34:51,296 --> 00:34:54,826
resolved. But this is simply amazing. And this is why you have to

551
00:34:54,928 --> 00:34:58,634
use lambdas together with the rest of the services on

552
00:34:58,672 --> 00:35:02,046
AWS. So coming back to the media contact class itself,

553
00:35:02,148 --> 00:35:05,886
I would like to talk about the running the stuff and what is

554
00:35:05,908 --> 00:35:09,726
the most important about running on AWS is

555
00:35:09,828 --> 00:35:13,950
to understand if you are taking the proper service for

556
00:35:14,020 --> 00:35:18,114
doing the thing that you need. And in this case we were running the application,

557
00:35:18,232 --> 00:35:21,090
it was already dockerized, it's microservices,

558
00:35:21,670 --> 00:35:25,010
et cetera. But we have a few opportunities which is actually

559
00:35:25,080 --> 00:35:28,262
just running the EC two, which is for most of the people

560
00:35:28,316 --> 00:35:31,782
could be scary because of the management, but it's not that

561
00:35:31,836 --> 00:35:35,270
bad actually. You can use the ECs and I really

562
00:35:35,340 --> 00:35:39,066
like ECs. It gets just the thing done.

563
00:35:39,168 --> 00:35:42,906
But unfortunately it's not the case here because of course this is

564
00:35:42,928 --> 00:35:46,330
a new service and it's new for the team

565
00:35:46,480 --> 00:35:50,502
and it just runs differently to the Kubernetes

566
00:35:50,566 --> 00:35:54,014
for example. And this is something new and this is not like

567
00:35:54,052 --> 00:35:57,486
a docker that you run. But I highly recommend use the

568
00:35:57,508 --> 00:36:00,942
ECs on the Fargate. It must be one of your first

569
00:36:00,996 --> 00:36:05,106
considerations if you want to run the application on

570
00:36:05,128 --> 00:36:08,562
AWS, then of course you have the EKs. But you have to ask

571
00:36:08,616 --> 00:36:12,606
yourself if you want to have the EKs because it's

572
00:36:12,798 --> 00:36:16,674
real life Kubernetes. And from my perspective it's a bit

573
00:36:16,872 --> 00:36:21,014
built on the site from AWS. If I would say that ECS is

574
00:36:21,212 --> 00:36:24,646
AWS native, but EKS is not

575
00:36:24,668 --> 00:36:27,240
that good integrated and you have to understand.

576
00:36:27,630 --> 00:36:31,242
But for example, ECS might be amazing for your small

577
00:36:31,296 --> 00:36:34,662
application or for some small business needs. Meanwhile,

578
00:36:34,726 --> 00:36:38,810
EKs and carpenter, those amazing things

579
00:36:38,880 --> 00:36:42,446
for the big scale and et cetera. And if you

580
00:36:42,468 --> 00:36:45,646
go even bigger, you can have the RoSa, you can have the

581
00:36:45,668 --> 00:36:48,942
openshift on AWS. But yeah,

582
00:36:48,996 --> 00:36:52,618
this is the real enterprise thing and I don't think that you

583
00:36:52,644 --> 00:36:56,158
will need it. But I would prefer the RoSa to eks

584
00:36:56,254 --> 00:37:00,242
because it runs so transparently and it works really

585
00:37:00,296 --> 00:37:05,720
great. And you don't have much vendor lock to

586
00:37:06,650 --> 00:37:09,842
some specific cloud provider like Azure,

587
00:37:09,906 --> 00:37:13,670
AWS, GCP, whatever. And what you also

588
00:37:13,740 --> 00:37:17,286
make take into consideration. And it was important for

589
00:37:17,308 --> 00:37:20,694
us to avoid vendor lock and vendor

590
00:37:20,742 --> 00:37:24,154
lock. It's the thing that you don't want to

591
00:37:24,192 --> 00:37:27,546
link to something. And for us what's important is that we

592
00:37:27,568 --> 00:37:31,326
can anytime take out the application from AWS, put it

593
00:37:31,348 --> 00:37:34,974
on our data center for example, or to relocate to it,

594
00:37:35,012 --> 00:37:37,278
to another cloud, but just in case.

595
00:37:37,444 --> 00:37:41,006
And the

596
00:37:41,028 --> 00:37:44,482
target was to be as flexible as we can and

597
00:37:44,536 --> 00:37:47,922
we wanted to have the control over the things. That's why I was

598
00:37:47,976 --> 00:37:51,010
not changing the underlying approach that

599
00:37:51,080 --> 00:37:54,370
we have already had for a few weeks, sorry,

600
00:37:54,440 --> 00:37:57,346
years. Not only weeks. Yeah, it's much bigger.

601
00:37:57,458 --> 00:38:01,302
And when you are taking the service into the consideration, you have to

602
00:38:01,356 --> 00:38:05,462
understand the balance. But AWS is doing amazing job

603
00:38:05,516 --> 00:38:08,934
and most of them are cool. You just need to understand how to use them

604
00:38:08,972 --> 00:38:12,474
properly. And this is why you need to work with the services, you need

605
00:38:12,512 --> 00:38:16,326
to know the specific details and et cetera.

606
00:38:16,518 --> 00:38:20,282
And since we are decided to stick with the EC two s, I would

607
00:38:20,336 --> 00:38:23,806
say so, yeah. As I mentioned, ECS is a new technology I

608
00:38:23,828 --> 00:38:28,282
wanted to avoid and EKs is just redundant. And unfortunately

609
00:38:28,346 --> 00:38:31,598
this project was not that big and it was kind of limited on

610
00:38:31,604 --> 00:38:34,746
the budget and EC two,

611
00:38:34,788 --> 00:38:38,258
they are just running the well known Docker and three microservices on

612
00:38:38,264 --> 00:38:42,130
the host and they are pretty amazingly fitting on one instance,

613
00:38:42,790 --> 00:38:46,840
but I have just changed the approach. Initially we just had

614
00:38:47,610 --> 00:38:50,726
one node that runs altogether and then the

615
00:38:50,748 --> 00:38:54,290
thing is we have a different load on some specific microservices.

616
00:38:54,370 --> 00:38:58,186
We couldn't scale them independently. If we scale we get the

617
00:38:58,208 --> 00:39:03,834
same node with the same things and I

618
00:39:03,872 --> 00:39:07,434
had to a bit divide them,

619
00:39:07,552 --> 00:39:10,574
but still we have the easy to in the base and this is not that

620
00:39:10,612 --> 00:39:14,958
scary and I will show you why. But first of all let's see

621
00:39:15,124 --> 00:39:19,470
why budget was heavy consideration for taking

622
00:39:19,540 --> 00:39:22,846
the baseline for our application. As far you can

623
00:39:22,868 --> 00:39:26,746
see I would like to take the bare price of EC twos

624
00:39:26,938 --> 00:39:31,380
which are just provisioning the application as the baseline 100%

625
00:39:31,750 --> 00:39:35,958
savings plans. They are amazing. You are not stuck to the reservation and

626
00:39:36,044 --> 00:39:39,606
for example if you have the organization and you are running most

627
00:39:39,628 --> 00:39:43,560
of your applications on T three or M six

628
00:39:43,930 --> 00:39:47,814
c five, whatever and depends on what you need.

629
00:39:47,852 --> 00:39:51,500
But TT three t three A is the most well known case.

630
00:39:51,870 --> 00:39:56,486
You can purchase some of the savings plans, if it's underused

631
00:39:56,518 --> 00:39:59,210
you can share it on just switch to another account.

632
00:39:59,360 --> 00:40:03,166
But what is amazing, you already have about 40% of

633
00:40:03,188 --> 00:40:06,766
discount and the only way how to make it better is

634
00:40:06,788 --> 00:40:10,046
to switch on the spots. But some of the people, they are afraid of the

635
00:40:10,068 --> 00:40:13,646
spots. But you shouldn't and I will show

636
00:40:13,668 --> 00:40:18,494
you why. But just a few slides after and Fargate

637
00:40:18,542 --> 00:40:22,206
Fargate is a cool service. I really like it because usually you don't

638
00:40:22,238 --> 00:40:25,640
have the operational overhead, it just runs your stuff.

639
00:40:26,810 --> 00:40:29,942
But please get ready to cover

640
00:40:29,996 --> 00:40:33,686
the bill because if I would take the fargate for

641
00:40:33,708 --> 00:40:36,966
our application my product owner would kill me because the

642
00:40:36,988 --> 00:40:40,460
pricing is about 473%.

643
00:40:42,350 --> 00:40:45,546
This is what I mentioned. The balance is extremely important

644
00:40:45,648 --> 00:40:49,798
and you should understand how your effort and price for the

645
00:40:49,984 --> 00:40:53,806
service compliance. Of course you almost have no effort, it runs it for

646
00:40:53,828 --> 00:40:57,310
you, but in cost of extreme volume.

647
00:41:00,450 --> 00:41:04,474
For example, if we still take the EKs with easy to workers,

648
00:41:04,522 --> 00:41:08,034
of course you can make the discounts with the savings plan, compensate the

649
00:41:08,072 --> 00:41:11,230
pricing for the eks cluster, but you have the overhead.

650
00:41:11,390 --> 00:41:15,578
And you should ask yourself do I really need a complete kubernetes

651
00:41:15,694 --> 00:41:19,462
for some business purposes? Maybe it can done

652
00:41:19,516 --> 00:41:22,134
by ECS or even in this way.

653
00:41:22,332 --> 00:41:25,926
Yeah, and just to mention, of course I have resources for

654
00:41:25,948 --> 00:41:29,750
you. So Kubernetes instance calculator is amazing because

655
00:41:29,820 --> 00:41:33,626
you can tell it that you are using the EKs and it will give

656
00:41:33,648 --> 00:41:37,466
you the advice about the instance per usage which the ones you

657
00:41:37,488 --> 00:41:41,466
would like to take for your EKs cluster and how your applications

658
00:41:41,498 --> 00:41:45,630
with certain limits are fitting on your cluster. And another

659
00:41:45,700 --> 00:41:50,542
amazing thing is Fargate pricing calculator. That AWS,

660
00:41:50,596 --> 00:41:54,426
you know, AWS calculator is a bit confusing, but Fargate

661
00:41:54,458 --> 00:41:58,386
pricing calculator, just a few clicks of the most essential information and you

662
00:41:58,408 --> 00:42:01,650
get the pricing if you really don't want to manage

663
00:42:01,720 --> 00:42:04,900
anything and you want just to have the things running.

664
00:42:05,430 --> 00:42:09,270
But in our case we decided to still stay with the Isitos.

665
00:42:09,770 --> 00:42:13,622
Some of you might say that we are crazy, but it's a working way

666
00:42:13,756 --> 00:42:17,142
and we have built some our system that

667
00:42:17,196 --> 00:42:20,810
does our thing and with almost

668
00:42:20,880 --> 00:42:24,378
no difference in the pricing. So we have

669
00:42:24,464 --> 00:42:27,642
amazing performance but we don't pay as much

670
00:42:27,696 --> 00:42:30,858
and we don't have any operational overhead because we were just

671
00:42:30,944 --> 00:42:34,734
well prepared for it. So as I mentioned, for us

672
00:42:34,772 --> 00:42:38,846
was important to keep control on the host because we have some specific

673
00:42:38,948 --> 00:42:42,474
data processing guidelines. We have to be compliant

674
00:42:42,522 --> 00:42:47,346
with some of the things because we

675
00:42:47,528 --> 00:42:51,534
want to have the control despite we really trust to AWS,

676
00:42:51,582 --> 00:42:54,754
they have a very high security standards. But yeah,

677
00:42:54,872 --> 00:42:58,438
we want to know what we have running and where we have running.

678
00:42:58,604 --> 00:43:02,386
So also for me was important consideration.

679
00:43:02,498 --> 00:43:06,486
For example, what will be the benefit if I will move everything to

680
00:43:06,508 --> 00:43:10,540
the ECS, how much time I will take for this and

681
00:43:11,070 --> 00:43:14,906
for every action that if

682
00:43:14,928 --> 00:43:18,566
you would like to rearchitect something you should have this significant benefit

683
00:43:18,598 --> 00:43:19,580
to do it.

684
00:43:23,570 --> 00:43:26,986
Also we have a tightly coupled microservices,

685
00:43:27,098 --> 00:43:30,522
but we still have to them like alive

686
00:43:30,586 --> 00:43:34,350
together and we should have the load properly scaled.

687
00:43:34,430 --> 00:43:38,302
And I wanted to avoid the cases when for example we hit some Kubernetes

688
00:43:38,366 --> 00:43:41,634
limit and it's popped out or the host is

689
00:43:41,672 --> 00:43:45,518
over provisioned. And also

690
00:43:45,624 --> 00:43:49,446
why you have to understand the instance type that

691
00:43:49,468 --> 00:43:53,800
you use in case of MCP. It was very CPU gentle application,

692
00:43:54,330 --> 00:43:58,342
but it was very heavy on the memory usage and on the

693
00:43:58,396 --> 00:44:02,346
input output and networking. So for me it was crucial to use

694
00:44:02,368 --> 00:44:05,850
the instances with a better network performance and

695
00:44:05,920 --> 00:44:09,322
better memory management rather than CPUs that we will

696
00:44:09,376 --> 00:44:13,418
just not, sorry, we will just not use.

697
00:44:13,584 --> 00:44:16,140
And yeah,

698
00:44:16,530 --> 00:44:19,694
people would say that it's hard because you

699
00:44:19,732 --> 00:44:23,818
are just working with a plain host, but thankfully AWS

700
00:44:23,994 --> 00:44:27,426
even thought about us here. But if

701
00:44:27,448 --> 00:44:30,706
it's just a small thing which can be done in

702
00:44:30,728 --> 00:44:34,302
a few hours, why should we spend the extra money that can be spent

703
00:44:34,446 --> 00:44:38,082
for something else and improve other perspectives

704
00:44:38,146 --> 00:44:42,482
in your project? And if we are talking about the workloads.

705
00:44:42,546 --> 00:44:45,640
One of the first things that are coming to the mind,

706
00:44:47,210 --> 00:44:50,602
to the mind, if we have some

707
00:44:50,656 --> 00:44:54,506
instances in the consideration that we

708
00:44:54,528 --> 00:44:57,978
can use the graviton instances, and they are really great because

709
00:44:58,064 --> 00:45:02,174
this is an amazing example of application of iron technology.

710
00:45:02,292 --> 00:45:07,086
They are giving you a good performance for the good value. But the

711
00:45:07,108 --> 00:45:10,734
problem with the gravitons actually is this

712
00:45:10,772 --> 00:45:14,798
one on the slide, because yes, despite it's

713
00:45:14,814 --> 00:45:18,322
a containerized application, you have to take

714
00:45:18,376 --> 00:45:22,066
care into account that your dependencies are able to

715
00:45:22,088 --> 00:45:25,734
run on IRM, that you are not using any specific

716
00:45:25,852 --> 00:45:29,394
libraries that can rely, for example on AVX extractions.

717
00:45:29,522 --> 00:45:33,046
That absence of AVX instructions can cause a

718
00:45:33,068 --> 00:45:37,254
huge performance drop for you. And you

719
00:45:37,292 --> 00:45:41,274
also have to use some extra things like Docker x or

720
00:45:41,312 --> 00:45:45,286
Jeep. And if you already have too many other applications

721
00:45:45,318 --> 00:45:48,842
that have a huge dependence on your Jenkins builder, you probably

722
00:45:48,896 --> 00:45:53,446
will not want to change things. This is why I think Graviton

723
00:45:53,638 --> 00:45:57,086
should be considered from the beginning. But if it's already in

724
00:45:57,108 --> 00:46:00,382
the middle of the bay, it's a bit hard to make the translation. I also

725
00:46:00,436 --> 00:46:03,758
heard there are some cases not only with the specific integrations,

726
00:46:03,854 --> 00:46:07,166
but with some specific monitoring tools, et cetera,

727
00:46:07,198 --> 00:46:11,300
et cetera. So yeah, you can save the money on

728
00:46:11,670 --> 00:46:15,206
running the graviton, but you

729
00:46:15,228 --> 00:46:19,846
should also understand that you

730
00:46:19,868 --> 00:46:23,366
should understand if the effort to make your application

731
00:46:23,468 --> 00:46:26,790
running on gravitons can be covered by something else

732
00:46:26,860 --> 00:46:30,342
on AWS. This is what actually our example is.

733
00:46:30,396 --> 00:46:33,834
I just took another approach and saved some money, but coming back to the

734
00:46:33,872 --> 00:46:36,986
graviton, so maybe you have to solve the

735
00:46:37,008 --> 00:46:40,474
base image and if you use Amazon, Carrera or something else,

736
00:46:40,512 --> 00:46:44,522
you have just to rebuild it. You have to done long term testing.

737
00:46:44,586 --> 00:46:48,014
Yeah, as I mentioned, some things may be broken, but if

738
00:46:48,052 --> 00:46:52,026
you don't have something else, you should try to use the Kraviton

739
00:46:52,058 --> 00:46:55,394
instances and you can try architecting and planning from

740
00:46:55,432 --> 00:46:59,346
it for the beginning. And another thing for me was

741
00:46:59,448 --> 00:47:02,722
a bit hard to motivate the colleagues also

742
00:47:02,776 --> 00:47:06,040
to change the pipeline. Despite of some financial benefits,

743
00:47:07,050 --> 00:47:10,002
you still have to take care about running, testing,

744
00:47:10,066 --> 00:47:14,274
et cetera. And just taking graviton instance doesn't

745
00:47:14,322 --> 00:47:18,026
give the benefits out of the box and it

746
00:47:18,048 --> 00:47:19,740
will not do the things for you.

747
00:47:21,310 --> 00:47:25,302
What will we do? I'm just redelegated

748
00:47:25,366 --> 00:47:29,126
the things. And of course Spotfleet

749
00:47:29,158 --> 00:47:33,006
is amazing things that you are using the microservices and you

750
00:47:33,028 --> 00:47:36,234
want to be scalable because if you are afraid

751
00:47:36,282 --> 00:47:39,694
about taking out the instance from the service, you should

752
00:47:39,732 --> 00:47:43,194
not. And first of all with the spot fleet

753
00:47:43,242 --> 00:47:46,734
you can have the main on demand instance that can have the savings

754
00:47:46,782 --> 00:47:50,898
plan and it can be reserved just to have your things

755
00:47:50,984 --> 00:47:54,078
running. And we have a different hosts in the separate auto

756
00:47:54,094 --> 00:47:58,006
scaling group that are attached to our auto application

757
00:47:58,108 --> 00:47:59,350
load balancer.

758
00:48:01,530 --> 00:48:05,174
So you can always guarantee your availability by

759
00:48:05,212 --> 00:48:09,566
having the spot credit. One instance will always serve the connections

760
00:48:09,618 --> 00:48:13,434
for you and the rest of capacity during the business hours can

761
00:48:13,472 --> 00:48:17,290
be gathered with the spot instances that are based sometimes 60,

762
00:48:17,360 --> 00:48:20,182
70 80% cheaper than on demand.

763
00:48:20,326 --> 00:48:24,334
And even because of this you can deliver the better experience

764
00:48:24,452 --> 00:48:27,966
to your customers because your application

765
00:48:28,068 --> 00:48:31,934
will be running on the faster hardware but you will have even less bill for

766
00:48:31,972 --> 00:48:35,534
this. And yeah, so for me it was important to slice

767
00:48:35,582 --> 00:48:39,762
because of not consistent load on the microservices and

768
00:48:39,896 --> 00:48:44,178
yeah, so we have three groups serving the things but you must give

769
00:48:44,264 --> 00:48:48,280
the try to the spot fleet. If you are having the stuff on AWS then

770
00:48:48,650 --> 00:48:52,646
yeah, as I have mentioned, in comparison with

771
00:48:52,668 --> 00:48:56,966
the on demand you can save over 60%

772
00:48:57,068 --> 00:49:00,390
and you can also have the savings plan on your on demands

773
00:49:00,470 --> 00:49:04,346
and you already have a big savings that you can use for example for security

774
00:49:04,448 --> 00:49:08,438
services or increasing the observability coverage.

775
00:49:08,614 --> 00:49:12,122
And it's simply amazing that such a discount

776
00:49:12,186 --> 00:49:15,274
is present. And you must be not afraid

777
00:49:15,322 --> 00:49:19,086
about the termination factor. Why? Because you have

778
00:49:19,108 --> 00:49:22,334
the notice from AWS and you are backed from

779
00:49:22,372 --> 00:49:26,310
two sides. First one that your application is still running on the on demands,

780
00:49:26,410 --> 00:49:30,194
but from another side you have a message coming from AWS. Hey,

781
00:49:30,312 --> 00:49:33,538
we will take this instance from you so you can be ready,

782
00:49:33,624 --> 00:49:37,074
so you can panic, you can do nothing. But in

783
00:49:37,112 --> 00:49:40,962
our case on this slide, as far as you can see, application is interacting

784
00:49:41,026 --> 00:49:44,790
with the secrets manager. It's not about it, it's just about the security

785
00:49:44,940 --> 00:49:48,738
with the Aurora. So we got rid

786
00:49:48,754 --> 00:49:52,380
of RDS and switched to Aurora later during the best and

787
00:49:52,750 --> 00:49:55,914
application knows where does it run.

788
00:49:56,032 --> 00:49:59,254
So important tasks like database migrations

789
00:49:59,302 --> 00:50:02,942
or some batch things in the progress they are coming

790
00:50:02,996 --> 00:50:06,526
to the main EC two instance which is on

791
00:50:06,548 --> 00:50:10,650
demand, it's always here but interruptible

792
00:50:10,730 --> 00:50:14,138
or some short living tasks, they are coming to the spots.

793
00:50:14,234 --> 00:50:17,666
So we're having the free app on the main instance and rest of the

794
00:50:17,688 --> 00:50:21,906
unnecessary loads and they're handled by them and your application

795
00:50:22,008 --> 00:50:25,250
just knows that it's in spot. We have a pool,

796
00:50:25,670 --> 00:50:29,278
they are interconnected between each other and two minute

797
00:50:29,294 --> 00:50:33,094
notes is mostly enough to finish your things or

798
00:50:33,132 --> 00:50:36,534
have it saved in some certain space state that can be

799
00:50:36,572 --> 00:50:40,330
taken and you can continue with the processing the data.

800
00:50:40,480 --> 00:50:44,234
So this is how you can not be afraid of

801
00:50:44,272 --> 00:50:47,642
using the spot instances well what is actually the

802
00:50:47,696 --> 00:50:50,798
next. So for example,

803
00:50:50,884 --> 00:50:54,970
since we are running on the isitos, the node provision

804
00:50:55,050 --> 00:50:59,294
time is crucial here. And since

805
00:50:59,412 --> 00:51:02,666
you are using the auto scaling groups and some small other things,

806
00:51:02,708 --> 00:51:06,290
you are also covered from a few perspectives here.

807
00:51:06,440 --> 00:51:10,526
So first of all you can use the scheduled

808
00:51:10,558 --> 00:51:14,590
scaling. So as I mentioned, it's important to know your user.

809
00:51:14,670 --> 00:51:17,910
So for example you can start provisioning extra

810
00:51:17,980 --> 00:51:21,654
nodes before the peak business hours and then when

811
00:51:21,692 --> 00:51:25,526
it goes on the deck line you can also

812
00:51:25,628 --> 00:51:29,626
have them going down. So you will be already prepared. You can

813
00:51:29,648 --> 00:51:33,402
use the performance tracking or some things

814
00:51:33,456 --> 00:51:37,306
that for example you can use the metrics from the Cloudwatch to

815
00:51:37,328 --> 00:51:40,874
scale your application. But what is also amazing from the

816
00:51:40,912 --> 00:51:44,186
auto scaling group site is a warm pool. With a

817
00:51:44,208 --> 00:51:47,614
warm pool you can prebake your instances that will be just

818
00:51:47,652 --> 00:51:51,054
taken away from the service, but they always be ready to come and

819
00:51:51,092 --> 00:51:54,994
help you. And I don't know why but

820
00:51:55,192 --> 00:51:57,890
yeah, so it's not that much.

821
00:51:58,040 --> 00:52:01,186
Spread it here. And in our case if

822
00:52:01,208 --> 00:52:04,846
we are running the application on EC two s for me the lifesaver

823
00:52:04,878 --> 00:52:08,566
was to use the easy to image builder and caching of

824
00:52:08,588 --> 00:52:12,294
the shared data on EFS. Also helping because you

825
00:52:12,332 --> 00:52:16,166
just don't have to have some same things, for example of

826
00:52:16,188 --> 00:52:19,414
the same picture like on every instance. Why not just tell

827
00:52:19,452 --> 00:52:23,018
me, come here and look on the picture. And this is what you

828
00:52:23,024 --> 00:52:27,130
can do with the EFS. But be careful, EFS sometimes

829
00:52:27,200 --> 00:52:30,290
has a very weird performance because it's a net attached

830
00:52:30,310 --> 00:52:34,334
drive, but if it works for you then use it and

831
00:52:34,532 --> 00:52:37,806
don't duplicate the things. And coming back

832
00:52:37,828 --> 00:52:42,342
to the EC two image builder. So initially

833
00:52:42,426 --> 00:52:45,934
application node was taking about 500 seconds

834
00:52:45,982 --> 00:52:49,614
to boot up and then be alive

835
00:52:49,662 --> 00:52:53,154
in the service. And of course it solves the

836
00:52:53,192 --> 00:52:56,694
updates, it fetches the images from

837
00:52:56,732 --> 00:52:59,720
the ECR, it just comes and running.

838
00:53:00,970 --> 00:53:04,354
So the first idea was to provide always a fresh image

839
00:53:04,402 --> 00:53:07,966
for our system. Of course you cloud swap the AMIs,

840
00:53:08,098 --> 00:53:12,362
but EC two image builder just rebuilds it and

841
00:53:12,416 --> 00:53:16,330
it interacts with our system

842
00:53:16,400 --> 00:53:20,570
management. Done by for me that I open the change request,

843
00:53:21,070 --> 00:53:24,414
my team lead approves it for me, sends the

844
00:53:24,452 --> 00:53:28,574
callback to me and then I just get a notification that

845
00:53:28,612 --> 00:53:31,806
system was rebuilt and then we provisioned the new nodes with

846
00:53:31,828 --> 00:53:35,054
a fresh image. So we are already saving some time because

847
00:53:35,092 --> 00:53:38,610
we have the good image. What's next? The idea was

848
00:53:38,680 --> 00:53:42,594
that we can also cache the docker images on the host, not only

849
00:53:42,632 --> 00:53:45,486
by the docker itself, because you are starting from the scratch,

850
00:53:45,518 --> 00:53:49,558
you don't have any caching out of the box. For example if

851
00:53:49,644 --> 00:53:53,654
my developer changes something in one microservice but the rest

852
00:53:53,692 --> 00:53:57,758
of them are not changes. So we just refresh one service and it already saves

853
00:53:57,794 --> 00:54:02,810
the health of the time that we have. But I also went

854
00:54:02,880 --> 00:54:06,522
through the application startup time and

855
00:54:06,656 --> 00:54:10,090
since it does gathering of caching from the database and

856
00:54:10,160 --> 00:54:13,774
from other things, EFS stores the things that are on the hot

857
00:54:13,812 --> 00:54:17,406
plate and we have the response time now for

858
00:54:17,428 --> 00:54:20,926
the application even better than if I would be running it on

859
00:54:20,948 --> 00:54:24,206
the yeah,

860
00:54:24,308 --> 00:54:28,578
you may see the ELB didn't like so because such

861
00:54:28,664 --> 00:54:31,970
big startup time out of the box was

862
00:54:32,040 --> 00:54:35,330
delaying the default health check grace period.

863
00:54:37,430 --> 00:54:40,638
But actually what I also would like to mention some people don't

864
00:54:40,654 --> 00:54:44,774
know about of it. There is an amazing service from the red Hat and

865
00:54:44,972 --> 00:54:49,602
if you already having the red hat stuff running on your environment

866
00:54:49,666 --> 00:54:53,206
on your on premises. If you have some red hat subscriptions,

867
00:54:53,318 --> 00:54:57,034
what you can do, you can take your subscriptions to

868
00:54:57,072 --> 00:55:00,458
AWS and then you will have the access to bring your own

869
00:55:00,544 --> 00:55:04,062
license service. It's extremely easy to set up. You just

870
00:55:04,116 --> 00:55:08,170
connect your accounts to the red hat. You can use the cloud formations

871
00:55:08,250 --> 00:55:11,822
taxite set to permit all the necessary things that

872
00:55:11,876 --> 00:55:15,106
red hat integration wants from you and you just come to the red

873
00:55:15,128 --> 00:55:19,090
Hat council give to some accounts and you already

874
00:55:19,160 --> 00:55:21,730
have it. And as a bonus you have the management.

875
00:55:22,950 --> 00:55:26,706
But what you have to understand that you have to

876
00:55:26,728 --> 00:55:29,926
do some tweaking. If you are red hat administrator you know what to

877
00:55:29,948 --> 00:55:33,382
do. But out of the box bring

878
00:55:33,436 --> 00:55:36,818
your own license images. They are not that good for intensive auto

879
00:55:36,834 --> 00:55:41,174
scaling. So you have to reduce some configurations which are related

880
00:55:41,302 --> 00:55:44,458
to the system activation and things.

881
00:55:44,624 --> 00:55:48,202
But if you have your licenses, please use the cloud

882
00:55:48,256 --> 00:55:51,754
access and you will have your red hat stuff on AWS and you will be

883
00:55:51,792 --> 00:55:56,654
not built hourly for the war by second since some

884
00:55:56,692 --> 00:55:59,886
changes are upcoming. If you

885
00:55:59,908 --> 00:56:03,390
want to use the red hell for the things. Yeah, and actually

886
00:56:03,460 --> 00:56:06,754
regarding the building of the image, this is the scheme about

887
00:56:06,792 --> 00:56:11,554
the stuff that we have. And as

888
00:56:11,592 --> 00:56:16,022
I said before, we have a few accounts we have for me for change

889
00:56:16,076 --> 00:56:19,526
management and resource management. So what

890
00:56:19,548 --> 00:56:23,394
is happening? For example, we have a few sources of the triggers.

891
00:56:23,442 --> 00:56:26,978
We can process the release of the new version

892
00:56:27,074 --> 00:56:30,266
in the production branch. We can interact to

893
00:56:30,288 --> 00:56:33,898
the Amazon inspector findings. For example, if there is

894
00:56:33,904 --> 00:56:38,166
a critical vulnerability, it will even skip the change process and patch

895
00:56:38,198 --> 00:56:41,678
it immediately. If the testing is succeeded or

896
00:56:41,764 --> 00:56:45,934
if red hat releases the new image, then even breach takes some

897
00:56:45,972 --> 00:56:49,774
messages coming from the services, then some

898
00:56:49,812 --> 00:56:54,242
automation which is done by the state

899
00:56:54,296 --> 00:56:57,746
machine and lambdas are coming to the game.

900
00:56:57,848 --> 00:57:00,894
It builds the new EC

901
00:57:00,942 --> 00:57:04,306
two image with the fresh image, with a fresh application, with all the

902
00:57:04,328 --> 00:57:08,674
updates installed, updates the dependencies, then provisions,

903
00:57:08,802 --> 00:57:12,770
the application runs the automated testing which is done by Lambdas

904
00:57:12,850 --> 00:57:16,514
too. And of course it's tightly coupled with the SNS

905
00:57:16,562 --> 00:57:20,138
and SQs. So basically with these services I have built

906
00:57:20,224 --> 00:57:24,362
the whole pipeline that I would be doing myself by

907
00:57:24,416 --> 00:57:27,754
hands. And when testing is successful I

908
00:57:27,792 --> 00:57:31,434
get full image that I'm ready to use and

909
00:57:31,472 --> 00:57:35,054
I get the callback from automation that hey, everything is good, we are ready

910
00:57:35,092 --> 00:57:39,050
to set. And then it makes the change request, I'm not involved.

911
00:57:39,130 --> 00:57:42,754
Meanwhile nothing breaks and it didn't break for the last year,

912
00:57:42,792 --> 00:57:46,290
it just works. And yeah, then approval team

913
00:57:46,360 --> 00:57:49,806
comes for me, receives the change of the ticket,

914
00:57:49,918 --> 00:57:53,700
sends to the specific endpoint in the separate account

915
00:57:55,430 --> 00:57:59,126
it says scaling group. Hey, this is your new image. I changed the

916
00:57:59,148 --> 00:58:03,126
template for you with the lambdas. Bot tree is amazing. And we

917
00:58:03,148 --> 00:58:07,330
have the new version and it's live and it takes into account the business hours.

918
00:58:07,500 --> 00:58:10,762
And basically this is what we might have if we

919
00:58:10,816 --> 00:58:13,722
just use some other ways of running the things.

920
00:58:13,776 --> 00:58:16,700
But since as I mentioned,

921
00:58:17,070 --> 00:58:20,282
we have amazing not provision time,

922
00:58:20,336 --> 00:58:24,222
we are very fast on having the application up and running, we are very

923
00:58:24,276 --> 00:58:27,898
fast on reacting to the changes or releasing

924
00:58:27,914 --> 00:58:32,026
the new versions because it's just like a river.

925
00:58:32,138 --> 00:58:35,634
If things are coming, they are floating and they are resulting in the

926
00:58:35,672 --> 00:58:39,234
outcome. Yeah, and what I also would like to say

927
00:58:39,272 --> 00:58:42,594
about the testing process, I test the application on

928
00:58:42,632 --> 00:58:46,194
the host and internally and externally

929
00:58:46,242 --> 00:58:50,246
just to ensure that we will not cause any downtime by the

930
00:58:50,428 --> 00:58:51,350
updating.

931
00:58:53,370 --> 00:58:56,486
Another thing that I would like to talk about of you today.

932
00:58:56,668 --> 00:59:00,474
So I think you like the surprises, but out

933
00:59:00,512 --> 00:59:04,614
of the box what Master wizard of creation of RDs

934
00:59:04,662 --> 00:59:07,994
on database doing. So you might

935
00:59:08,032 --> 00:59:10,714
have the GP to drive, but this is not what you want to have.

936
00:59:10,752 --> 00:59:14,160
This is a reason why you may have a very big

937
00:59:14,770 --> 00:59:18,186
surprise which actually looks like this. Just look at this birth

938
00:59:18,218 --> 00:59:22,000
balance, look at those huge waiting time on the

939
00:59:22,390 --> 00:59:26,130
database. This is crazy. And basically if you see this,

940
00:59:26,200 --> 00:59:30,062
it means your application is not working, but vibe

941
00:59:30,206 --> 00:59:33,762
burst balance. But you might

942
00:59:33,816 --> 00:59:37,638
ask okay, but what can we do with this? It's pretty easy.

943
00:59:37,724 --> 00:59:41,346
And thanks to AWS again they have introduced GP

944
00:59:41,378 --> 00:59:45,286
three, which is amazing drive which is able to provide you

945
00:59:45,308 --> 00:59:49,542
consistent performance without of any limits and it's even cheaper.

946
00:59:49,686 --> 00:59:52,762
And you know what I ops you have,

947
00:59:52,816 --> 00:59:56,618
you know what you see. But what is important

948
00:59:56,704 --> 01:00:00,526
about GP two, you might know that it has some certain amount of

949
01:00:00,548 --> 01:00:04,122
I ops and read out. But to achieve the performance,

950
01:00:04,186 --> 01:00:08,286
GP two must be stripped. And to achieve the stripping you

951
01:00:08,308 --> 01:00:11,246
must have about 100 gigabyte drive.

952
01:00:11,428 --> 01:00:14,606
And what is essential with the GP

953
01:00:14,638 --> 01:00:17,966
three, it works amazing on the small drives like assistant

954
01:00:17,998 --> 01:00:21,934
drive, 1020 gigabytes and it's

955
01:00:21,982 --> 01:00:25,058
cheaper. What is the most important and it's just running.

956
01:00:25,144 --> 01:00:28,770
And if you need a small drive for the database instance,

957
01:00:28,850 --> 01:00:32,310
because I o one, I o two, they are good, they are giving

958
01:00:32,380 --> 01:00:36,566
amazing performance, but they are expensive. And what

959
01:00:36,588 --> 01:00:40,330
you have to try is to check if GP three can uncover

960
01:00:40,480 --> 01:00:43,674
your needs. And of course what is

961
01:00:43,712 --> 01:00:47,322
good about the GP two. GP two might

962
01:00:47,376 --> 01:00:50,934
give you better performance if we are talking about terabytes.

963
01:00:51,062 --> 01:00:54,842
But it's not a reason to use it for your RDs,

964
01:00:54,906 --> 01:00:58,990
because you want to have your RDs alive. And the reason

965
01:00:59,140 --> 01:01:02,558
why GP two is bad, it causes I owe weights and

966
01:01:02,644 --> 01:01:07,010
drive is just inaccessible when you have running

967
01:01:07,080 --> 01:01:10,642
out of the credits. And if you don't monitor it and

968
01:01:10,696 --> 01:01:14,174
it can be just a huge surprise for you. AWS for administrator

969
01:01:14,222 --> 01:01:17,926
and why application is down. And this is the first things that

970
01:01:17,948 --> 01:01:21,874
you have to check if your RTS drive is encrypted. Because by default

971
01:01:21,922 --> 01:01:25,346
encryption is also not enabled and if GP

972
01:01:25,378 --> 01:01:28,970
two is not used, guys please just use the GP three

973
01:01:29,040 --> 01:01:32,682
and you will be happy. In the most of the cases going

974
01:01:32,736 --> 01:01:36,746
forward, as I mentioned,

975
01:01:36,928 --> 01:01:40,570
if we use the Aurora or RCAs, it's important to control

976
01:01:40,640 --> 01:01:44,574
all the credits for the CPUs and for the storage. Just to understand

977
01:01:44,692 --> 01:01:48,478
if you are covering the needs of your application during the running.

978
01:01:48,644 --> 01:01:52,186
And also what is important from my perspective, from my observability,

979
01:01:52,298 --> 01:01:56,178
that metric, so called metric DB load is also extremely important.

980
01:01:56,344 --> 01:02:00,594
So if you don't have the non SQL load, it means that you

981
01:02:00,632 --> 01:02:03,922
have the load caused not by your application, something goes

982
01:02:03,976 --> 01:02:07,458
wrong on the host. And mostly if you are running out of storage

983
01:02:07,554 --> 01:02:11,030
or you are low on RAM, or if CPU is just not enough

984
01:02:11,100 --> 01:02:14,550
to run your queries. Swap usage is

985
01:02:14,620 --> 01:02:17,826
actually a bomb that comes together with the GP

986
01:02:17,858 --> 01:02:21,850
two thing. Because if you are low on the memory

987
01:02:22,190 --> 01:02:25,946
and swap is running and you have GP two, you are just using

988
01:02:26,048 --> 01:02:29,626
your credits that might be used by your application. So you

989
01:02:29,648 --> 01:02:33,386
have the double burn of your credits and it's

990
01:02:33,418 --> 01:02:37,114
better to scale up a bit, give it a bit more memory

991
01:02:37,242 --> 01:02:41,114
rather than have the swap used on the database.

992
01:02:41,162 --> 01:02:44,418
Of course it can be a bit like 25 100 megabytes, but if

993
01:02:44,424 --> 01:02:48,030
you are talking about the gigabytes, it's a way to the catastrophe.

994
01:02:48,110 --> 01:02:51,646
Latencies are also important because the response

995
01:02:51,678 --> 01:02:55,640
time directly affects your application performance. As you can understand

996
01:02:59,370 --> 01:03:03,190
with the latency comes also

997
01:03:03,260 --> 01:03:07,046
the general database performance and number of connections is essential if

998
01:03:07,068 --> 01:03:11,042
you are working with the lambdas because every lambda is a new number of connection.

999
01:03:11,106 --> 01:03:14,374
If you have the steady application that opened the connection

1000
01:03:14,422 --> 01:03:17,574
keeps the session. This is not an issue. But with the lambdas

1001
01:03:17,622 --> 01:03:21,866
you have to keep an eye on it. So going forward and we

1002
01:03:21,888 --> 01:03:25,566
have already changed actually the thing. So we have changed the

1003
01:03:25,588 --> 01:03:28,794
drive for the RZs, we have get rid of the swapping,

1004
01:03:28,842 --> 01:03:32,046
we have a bigger instance, but we still have the weights and

1005
01:03:32,068 --> 01:03:35,602
we don't know what to do. There are a few ways of course

1006
01:03:35,736 --> 01:03:39,234
one of the things that AWS promotes to be

1007
01:03:39,272 --> 01:03:42,814
used for improvement

1008
01:03:42,862 --> 01:03:46,302
of the performance is the usage of the red replicas,

1009
01:03:46,366 --> 01:03:50,246
but it causes the application re engineering and

1010
01:03:50,348 --> 01:03:54,166
your application must be ready for the things. And for

1011
01:03:54,188 --> 01:03:57,202
example for this spring boot, if you use the native connectors,

1012
01:03:57,266 --> 01:04:00,746
you can mark the data as read only in the scheme of

1013
01:04:00,768 --> 01:04:04,234
your database. But you have to come to your developer and say

1014
01:04:04,352 --> 01:04:07,766
do it. And they will say no, we have no budget.

1015
01:04:07,878 --> 01:04:11,658
Then we can upscale RDS but we cannot be going

1016
01:04:11,824 --> 01:04:15,114
up like for infinity. You can

1017
01:04:15,152 --> 01:04:19,086
just find a good instance for you. But if

1018
01:04:19,108 --> 01:04:22,510
it's not enough, what's then? And for example,

1019
01:04:22,660 --> 01:04:27,010
some people may be confused with the RDS proxy. RDS proxy.

1020
01:04:27,750 --> 01:04:31,362
So it's a good thing for the Lambdas because it does

1021
01:04:31,416 --> 01:04:35,582
the connection pooling, but it will not improve your read write performance

1022
01:04:35,646 --> 01:04:39,314
on the RDS instance and call Kevin. If you have a good technical

1023
01:04:39,362 --> 01:04:42,758
account manager and good solutions architect account, maybe you

1024
01:04:42,764 --> 01:04:46,438
can ask them. But yeah, it's better to drink beers together.

1025
01:04:46,524 --> 01:04:50,060
So what's the solutions for this? Yeah,

1026
01:04:50,590 --> 01:04:54,074
as I mentioned, read Replica goes to

1027
01:04:54,112 --> 01:04:57,180
reengineering RDS. Proxies are amazing,

1028
01:04:58,190 --> 01:05:01,866
but it will not help you because in this case

1029
01:05:01,968 --> 01:05:06,606
it can help only by reducing the failover time up to 79%.

1030
01:05:06,708 --> 01:05:10,234
And I really tested it. It cut it from five minutes to 1 minute.

1031
01:05:10,282 --> 01:05:13,726
But you have to pay for RDX proxy. And if

1032
01:05:13,748 --> 01:05:17,822
you will go outside of AWS and look around there is handle proxy.

1033
01:05:17,886 --> 01:05:21,694
But why do you want to pay huge money for some proxy

1034
01:05:21,742 --> 01:05:25,526
if you can re engineer your application for this money? Or how

1035
01:05:25,548 --> 01:05:32,840
can you be ensured that it really does the correct and

1036
01:05:33,690 --> 01:05:36,962
there is amazing thing that AWS

1037
01:05:37,106 --> 01:05:40,670
has. They have Aurora and they have the Dynama DB.

1038
01:05:40,770 --> 01:05:44,314
And if Dynamadb just stored the things for you,

1039
01:05:44,352 --> 01:05:47,482
Aurora resolves the biggest issue of

1040
01:05:47,536 --> 01:05:51,662
every database, that it's steady and not scalable if in our

1041
01:05:51,716 --> 01:05:54,942
case the application site was not an issue, it was

1042
01:05:54,996 --> 01:05:58,970
bottleneckled by the database things. And Aurora

1043
01:05:59,050 --> 01:06:02,222
brings another very cool thing to it.

1044
01:06:02,276 --> 01:06:05,646
But just before I switch to Aurora,

1045
01:06:05,678 --> 01:06:09,186
I would like to mention that you may ask, how do

1046
01:06:09,208 --> 01:06:12,594
I okay, I don't want to use the Aurora, I still

1047
01:06:12,632 --> 01:06:15,802
want to stick to the RTS. But which RTs

1048
01:06:15,886 --> 01:06:20,086
instance I would like to pick and I have done some long

1049
01:06:20,188 --> 01:06:24,006
running evaluation of the data that I was gathering from

1050
01:06:24,028 --> 01:06:28,586
the performance and

1051
01:06:28,688 --> 01:06:31,654
I would say if you want to have the RDS instance,

1052
01:06:31,702 --> 01:06:35,354
take the graviton instance. RDS is the

1053
01:06:35,392 --> 01:06:38,700
best application of graviton that you might have

1054
01:06:40,590 --> 01:06:43,902
and t they are pretty

1055
01:06:43,956 --> 01:06:46,798
comparable by the Vram by VCPU number,

1056
01:06:46,884 --> 01:06:50,666
but m six g, it has a bit newer graviton and it's

1057
01:06:50,698 --> 01:06:53,630
more pricey. And the question for me was for example,

1058
01:06:53,780 --> 01:06:57,614
what I would like to do with this. As far

1059
01:06:57,652 --> 01:07:01,234
as you can see, t imsec six g they are

1060
01:07:01,272 --> 01:07:04,926
giving amazing performance and you don't want to have the t three for RGs

1061
01:07:04,958 --> 01:07:08,502
instance anymore because all of them are cheaper and running

1062
01:07:08,556 --> 01:07:12,294
faster. So just forget about the t three. And if you are

1063
01:07:12,332 --> 01:07:16,402
mastering the best credits and they are amazingly stable

1064
01:07:16,546 --> 01:07:20,614
and you don't overuse them and you know, patterns of applications

1065
01:07:20,662 --> 01:07:24,026
and your number of active users doesn't cause any issues, you can

1066
01:07:24,048 --> 01:07:27,914
save up to 50 $70 by

1067
01:07:27,952 --> 01:07:31,546
using T 4G instead of M six g. Despite this

1068
01:07:31,568 --> 01:07:35,134
is a recommended production instance by AWS. And yeah,

1069
01:07:35,172 --> 01:07:38,686
so you can see some additional metrics. I will just hold on here for the

1070
01:07:38,708 --> 01:07:42,506
second, but sometimes the performance of graviton instances for

1071
01:07:42,548 --> 01:07:46,114
the less price is twice faster than class 63

1072
01:07:46,152 --> 01:07:50,500
instances. Yeah, but as I mentioned,

1073
01:07:50,950 --> 01:07:54,082
you can take the M six G as a starting point for your

1074
01:07:54,136 --> 01:07:57,878
RDs. You can take the T 4G large if you

1075
01:07:57,964 --> 01:08:00,310
are good with the usage,

1076
01:08:02,570 --> 01:08:06,130
but all these things, they don't resolve. The most crucial

1077
01:08:06,210 --> 01:08:09,622
thing that I don't like about RDS, that you have the time

1078
01:08:09,676 --> 01:08:13,174
period when it's lighting, but you have the fully burning

1079
01:08:13,302 --> 01:08:16,666
database and ready for lots of customers. It's basically like to

1080
01:08:16,688 --> 01:08:20,618
have the heating switched on when nobody is living for the months in the apartment.

1081
01:08:20,714 --> 01:08:24,046
It's just a waste of money. And this

1082
01:08:24,068 --> 01:08:27,806
is what Aurora absolutely transparently resolves for

1083
01:08:27,828 --> 01:08:31,674
us. And thankfully we are speaking about Aurora

1084
01:08:31,722 --> 01:08:36,130
serverless V two and Aurora serverless

1085
01:08:36,630 --> 01:08:40,206
v one. I have some experience with it. Thankfully it's

1086
01:08:40,238 --> 01:08:44,034
already going to legacy and it was

1087
01:08:44,072 --> 01:08:48,134
running a few outdated engines and you had to change the schema if

1088
01:08:48,172 --> 01:08:55,394
you might be migrating for a more fresher RDS serverless

1089
01:08:55,442 --> 01:08:59,894
v two. It had the matching engine that we

1090
01:08:59,932 --> 01:09:03,114
already have for the RCs and all that we had to do,

1091
01:09:03,152 --> 01:09:06,906
we had to take the snapshot and challenge the endpoint of

1092
01:09:06,928 --> 01:09:10,698
the database. And you want to use the route 53

1093
01:09:10,784 --> 01:09:14,986
hosted zone for the database endpoint because you don't want to expose

1094
01:09:15,178 --> 01:09:18,766
your DNS RDs endpoint on live, but with

1095
01:09:18,788 --> 01:09:22,254
a route 53 private zone you can fix it. And if you

1096
01:09:22,292 --> 01:09:25,746
might be migrating and trying out different databases, you can create

1097
01:09:25,848 --> 01:09:29,746
something, for example mydatabasecon 42.

1098
01:09:29,848 --> 01:09:33,422
Com. Then you will be fixed. And since we create new instance,

1099
01:09:33,486 --> 01:09:37,154
your DNS record will be changed, but you will not have to update

1100
01:09:37,202 --> 01:09:41,110
your for example DB viewer connection. You will not have to change

1101
01:09:41,180 --> 01:09:45,346
your docker compose things or change the environmental variables

1102
01:09:45,378 --> 01:09:48,714
to access the stuff. And this is just a free

1103
01:09:48,752 --> 01:09:52,394
tip, not related. It's about in general about

1104
01:09:52,432 --> 01:09:54,780
the databases on AWS end,

1105
01:09:55,150 --> 01:09:58,634
what Aurora resolves, it eliminates the need

1106
01:09:58,672 --> 01:10:02,506
of application re engineering. We can have already the main writer

1107
01:10:02,538 --> 01:10:06,446
instance and read replica and Aurora will do the load balancing for

1108
01:10:06,468 --> 01:10:10,126
you. This is simply amazing. And for example, in our

1109
01:10:10,148 --> 01:10:13,762
case, application receives only single endpoint for the application.

1110
01:10:13,896 --> 01:10:17,106
And then for example, application comes

1111
01:10:17,128 --> 01:10:20,754
to me and says Dima, would you like to give me this information?

1112
01:10:20,952 --> 01:10:24,606
And then for example, I'm pretty busy

1113
01:10:24,638 --> 01:10:28,806
but I will just delegate the stuff to somebody else who

1114
01:10:28,828 --> 01:10:32,214
is working with me and I will just give it back.

1115
01:10:32,252 --> 01:10:36,002
And the application will not notice this because it's done by Aurora

1116
01:10:36,066 --> 01:10:39,466
itself and you don't have to change your schema everything,

1117
01:10:39,568 --> 01:10:43,194
you can just go up and down when you need. And in our

1118
01:10:43,232 --> 01:10:46,410
case it appeared to give the same performance but

1119
01:10:46,480 --> 01:10:51,070
with 35% less price

1120
01:10:51,140 --> 01:10:54,400
for us. And I'm extremely happy with this because

1121
01:10:54,770 --> 01:10:58,574
I haven't used any developer time

1122
01:10:58,612 --> 01:11:02,270
to change it. Mimigration was absolutely good

1123
01:11:02,340 --> 01:11:05,470
because it offers lots of mysql engines,

1124
01:11:05,550 --> 01:11:09,010
postgres, whatever you would like, and you can even start building

1125
01:11:09,080 --> 01:11:12,290
natively with the Auroras main engine.

1126
01:11:12,440 --> 01:11:15,842
And of course you can go to the calculator,

1127
01:11:15,906 --> 01:11:19,906
put the peak capacity and have some crazy values

1128
01:11:20,098 --> 01:11:22,950
which are way bigger than your RDS bill,

1129
01:11:23,020 --> 01:11:26,950
but you never use the peak capacity and this is

1130
01:11:27,020 --> 01:11:30,730
what resolves with Aurora. So for example,

1131
01:11:30,800 --> 01:11:35,146
this is the baseline of price for the M six G and

1132
01:11:35,248 --> 01:11:38,746
this is the chart of real workday of our application

1133
01:11:38,848 --> 01:11:42,334
on the Aurora. And as far as I can see, in some time

1134
01:11:42,372 --> 01:11:46,442
periods to deliver the better performance that we might have with the RGAs,

1135
01:11:46,506 --> 01:11:50,446
it goes up, but those peaks, they are compensated by

1136
01:11:50,468 --> 01:11:54,782
the idling time and

1137
01:11:54,836 --> 01:11:58,254
what is important about Aurora since it scales

1138
01:11:58,302 --> 01:12:01,426
and if you are scaling pretty aggressively, for example, you are

1139
01:12:01,448 --> 01:12:05,282
starting with a half of the unit, but if you are upscaling to four

1140
01:12:05,336 --> 01:12:06,980
units or even more,

1141
01:12:10,870 --> 01:12:14,310
then you should not expect

1142
01:12:14,380 --> 01:12:18,406
to have the performance immediately. Aurora takes some time to be

1143
01:12:18,428 --> 01:12:21,834
waked up and so probably you will not hit

1144
01:12:21,872 --> 01:12:26,154
the same rate of performance immediately. But at the peaks it's absolutely

1145
01:12:26,272 --> 01:12:30,150
comparable that what you have with the RGs, but you don't

1146
01:12:30,230 --> 01:12:32,734
burn the money when it's not used completely.

1147
01:12:32,932 --> 01:12:36,842
And there is an amazing example by the colleague Joe

1148
01:12:36,906 --> 01:12:40,046
Ho. He did a huge observability for a

1149
01:12:40,068 --> 01:12:43,242
few months with Aurora surplus calculation.

1150
01:12:43,306 --> 01:12:47,474
So please jump in and you can use this example for presentation for

1151
01:12:47,512 --> 01:12:51,186
your management and the colleagues. But he did a really big job and

1152
01:12:51,208 --> 01:12:54,546
I can confirm on myself that this data is valid and with the

1153
01:12:54,568 --> 01:12:57,890
right approach, Aurora be amazingly efficient.

1154
01:12:58,050 --> 01:13:01,478
Yeah, so thankfully and sadly we are coming to

1155
01:13:01,484 --> 01:13:05,174
the end. So in the whole process it's important to

1156
01:13:05,212 --> 01:13:08,486
communicate with your team. You must understand the decisions, why it

1157
01:13:08,508 --> 01:13:12,780
was made. In some certain ways. You must know the details because

1158
01:13:13,550 --> 01:13:16,662
we can talk about the database. For example on AWS,

1159
01:13:16,726 --> 01:13:20,346
on Azure, on Oracle cloud it might look the same, but only

1160
01:13:20,448 --> 01:13:23,882
from the surface. And a good cloud engineer should

1161
01:13:23,936 --> 01:13:27,086
know. So you might

1162
01:13:27,108 --> 01:13:31,406
have the same task by, for example, as I mentioned, to have the application running.

1163
01:13:31,588 --> 01:13:35,026
But yeah, it can be done in a different ways and

1164
01:13:35,128 --> 01:13:38,066
same things. For example, GP two, GP three,

1165
01:13:38,168 --> 01:13:42,450
they are basically EPs drives, but they are behaving differently.

1166
01:13:42,790 --> 01:13:46,450
Or the Aurora and RDS details

1167
01:13:46,530 --> 01:13:49,634
matter and be creative. You are the engineer,

1168
01:13:49,682 --> 01:13:53,862
you are the artist, you are architect. Imagine if the whole world was

1169
01:13:53,916 --> 01:13:57,826
built with panel houses. No, we have amazing buildings

1170
01:13:57,858 --> 01:14:01,430
like Stefan's dome, we have efield Tower, we have Big Ben,

1171
01:14:01,510 --> 01:14:04,954
because people, they are creative and this is a part of our work.

1172
01:14:04,992 --> 01:14:08,854
Also, we are not game designers, but we must be creative

1173
01:14:08,902 --> 01:14:12,922
to deliver amazing solutions, whatever is it. And with AWS

1174
01:14:12,986 --> 01:14:16,510
you can have everything covered and done. And this is amazing

1175
01:14:16,580 --> 01:14:20,506
and I'm really excited to work with such service and it's

1176
01:14:20,538 --> 01:14:23,886
really cool. Thank you very much for the

1177
01:14:23,908 --> 01:14:27,362
attention. I hope you have enjoyed the session. Please feel

1178
01:14:27,416 --> 01:14:30,882
free to contact me on LinkedIn. I'm always happy to have any

1179
01:14:30,936 --> 01:14:34,354
discussion, any tip for you. I can

1180
01:14:34,392 --> 01:14:38,066
dive in into your case and maybe we can discuss some specifics.

1181
01:14:38,098 --> 01:14:40,838
And if you can also have some recommendation for me,

1182
01:14:40,924 --> 01:14:44,534
I will be thankful to hear your opinion, what you say

1183
01:14:44,572 --> 01:14:48,054
and what can be done better. And please,

1184
01:14:48,252 --> 01:14:51,754
on the left there is a QR for my LinkedIn. And please also

1185
01:14:51,792 --> 01:14:55,386
check the rest of exciting colleagues who are participating in

1186
01:14:55,408 --> 01:14:59,014
this conference too. And thank you very much to the mark for the invitation.

1187
01:14:59,062 --> 01:15:03,198
It's a big pleasure for me to be here and also please write me

1188
01:15:03,284 --> 01:15:07,146
an email or come to my blog which I'm

1189
01:15:07,178 --> 01:15:10,734
about to launch very soon. And just to conclusion, thank you very

1190
01:15:10,772 --> 01:15:13,914
much also for AWS community in the dark

1191
01:15:13,962 --> 01:15:17,566
for all the support and we are hosting amazing events which is a

1192
01:15:17,588 --> 01:15:21,022
community day dark which will take place in September this

1193
01:15:21,076 --> 01:15:24,590
year so we are opening the registration very soon and

1194
01:15:24,660 --> 01:15:28,326
I will be happy to see you here. Then we can discuss the workloads in

1195
01:15:28,348 --> 01:15:31,942
the person and if you are looking for the user group in win

1196
01:15:31,996 --> 01:15:35,254
please check out our meetup page. So yeah I will

1197
01:15:35,292 --> 01:15:38,966
also be happy to see you here. So yeah, this is all for

1198
01:15:38,988 --> 01:15:42,722
today. Thank you very much. All the best. Best of luck in your aws

1199
01:15:42,786 --> 01:15:45,010
deployments and see you later in the clouds.

