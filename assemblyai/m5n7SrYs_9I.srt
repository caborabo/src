1
00:00:25,090 --> 00:00:29,010
Everyone, welcome to my talk on architecting resilient microservices.

2
00:00:29,090 --> 00:00:32,710
A deep dive into building service mesh with envoy

3
00:00:33,210 --> 00:00:37,062
before we talk and deep dive further into this topic, let's first

4
00:00:37,116 --> 00:00:40,914
understand the agenda for today's topic. So in today's

5
00:00:40,962 --> 00:00:44,518
talk I'm going to cover some of the key challenges with the

6
00:00:44,524 --> 00:00:48,258
microservices architecture. What is service mesh as a pattern

7
00:00:48,354 --> 00:00:52,334
and its core features? The envoy proxy. And we'll try

8
00:00:52,372 --> 00:00:56,442
to deep dive into a use case and a problem and try to devise

9
00:00:56,506 --> 00:01:00,254
a solution for it. We'll also see the benefits around using the

10
00:01:00,292 --> 00:01:04,126
service mesh with proxy as a pattern. So let's deep

11
00:01:04,158 --> 00:01:08,082
dive further. Now let's first

12
00:01:08,136 --> 00:01:11,742
understand what is service mesh? So service mesh is a popular

13
00:01:11,806 --> 00:01:16,130
solution for managing communication between individual microservices.

14
00:01:16,210 --> 00:01:19,782
In a complex microservices application or

15
00:01:19,836 --> 00:01:23,714
architecture it emerges as a very popular pattern

16
00:01:23,762 --> 00:01:27,154
for managing communications between individual microservices.

17
00:01:27,282 --> 00:01:32,198
It provides a dedicated infrastructure for handling service to service communication.

18
00:01:32,374 --> 00:01:36,390
So let's say you have number of microservices

19
00:01:36,470 --> 00:01:39,418
that are deployed as service A, B and C.

20
00:01:39,584 --> 00:01:43,406
With the service mesh as a pattern, the individual

21
00:01:43,508 --> 00:01:47,678
services need not have to take care of which service

22
00:01:47,844 --> 00:01:51,038
I'm going to call, how do I call that service

23
00:01:51,124 --> 00:01:54,754
and what are the endpoints. So all such configuration has been taken care

24
00:01:54,792 --> 00:01:58,078
and managed and handled by the proxy.

25
00:01:58,174 --> 00:02:01,662
So along with every microservice that you are deploying

26
00:02:01,806 --> 00:02:05,434
as a service, we will also have a proxy

27
00:02:05,582 --> 00:02:09,206
which is nothing but a simple YaML file or

28
00:02:09,228 --> 00:02:13,586
a configuration file which will take care of all these configurations

29
00:02:13,698 --> 00:02:17,534
and taking care of routing configuration filterings

30
00:02:17,682 --> 00:02:21,574
in a very dynamic manner. And that's how the service mesh pattern

31
00:02:21,702 --> 00:02:25,254
has been thought about. Now let's

32
00:02:25,302 --> 00:02:28,726
further see what are the capabilities the service mesh

33
00:02:28,918 --> 00:02:31,962
provides. So it provides

34
00:02:32,106 --> 00:02:36,426
lot of features, lot of abilities without implementing

35
00:02:36,458 --> 00:02:40,446
a service mesh. Otherwise any architectures will need

36
00:02:40,468 --> 00:02:44,426
to implement all these capabilities from scratch

37
00:02:44,538 --> 00:02:48,446
and it takes lot of effort as well as time. So let's deep dive

38
00:02:48,478 --> 00:02:51,858
into what are the capabilities the service mesh provides. So the first and

39
00:02:51,864 --> 00:02:55,402
the foremost is it provides distributed tracing.

40
00:02:55,566 --> 00:02:59,010
So any complex architectures typically

41
00:02:59,090 --> 00:03:02,902
doesn't stop only with a point to point or a single

42
00:03:02,956 --> 00:03:06,978
microservice calling another microservice. However, it's a chain

43
00:03:06,994 --> 00:03:10,426
of microservices that we typically call and

44
00:03:10,528 --> 00:03:15,210
also number of internal as well as external integrations that

45
00:03:15,280 --> 00:03:19,610
are expected to be taken care in a single workflow.

46
00:03:20,050 --> 00:03:24,350
When it comes to the various internal as well as external integrations.

47
00:03:24,690 --> 00:03:28,880
These systems and these components may be deployed into

48
00:03:29,490 --> 00:03:33,390
various different discrete systems

49
00:03:33,550 --> 00:03:37,426
and that's where the distributed tracing or the

50
00:03:37,448 --> 00:03:41,650
tracing comes. An important aspect.

51
00:03:42,150 --> 00:03:46,550
When there is an error, it is very difficult to identify an error

52
00:03:46,890 --> 00:03:50,226
in a very discrete and a distributed system and that's

53
00:03:50,258 --> 00:03:54,578
where this capability of service mesh will be very very helpful.

54
00:03:54,754 --> 00:03:58,518
Another capability it provides is traffic management.

55
00:03:58,614 --> 00:04:02,314
It enables sophisticated traffic management capabilities with the help

56
00:04:02,352 --> 00:04:06,326
of load balancing, routing and number of retries feature.

57
00:04:06,518 --> 00:04:10,570
It enhances the security by providing encryption

58
00:04:10,650 --> 00:04:14,606
authentication authorization mechanism as well as it helps you

59
00:04:14,628 --> 00:04:17,806
to protect the data in flight as

60
00:04:17,828 --> 00:04:19,920
well as at store.

61
00:04:21,250 --> 00:04:24,638
It also provides the ability

62
00:04:24,734 --> 00:04:28,306
to discover the services by maintaining a

63
00:04:28,328 --> 00:04:31,810
service catalog along with its configuration parameters

64
00:04:32,310 --> 00:04:36,550
to be sent while calling that service as well as the service endpoints,

65
00:04:37,050 --> 00:04:40,486
all ins all, it provides a very resilient architectures through the

66
00:04:40,508 --> 00:04:44,198
features like circuit breaking, fault injection and

67
00:04:44,284 --> 00:04:48,582
overall with these features and the capabilities, service mesh improves

68
00:04:48,646 --> 00:04:51,994
the application's resilience and make it high

69
00:04:52,032 --> 00:04:55,882
performant. Another important aspect is the

70
00:04:55,936 --> 00:04:59,386
policy enforcement. It allows for the enforcements of

71
00:04:59,408 --> 00:05:03,502
policies such that it can handle the rate

72
00:05:03,556 --> 00:05:09,374
limiting access control as well as traffic shaping for you now,

73
00:05:09,412 --> 00:05:12,930
while we have seen the capabilities and the features of service

74
00:05:13,000 --> 00:05:16,238
mesh, now let's try to understand what is envoy?

75
00:05:16,334 --> 00:05:20,590
So envoy is a high performance proxy server

76
00:05:20,670 --> 00:05:24,098
that can be used to take care of these

77
00:05:24,264 --> 00:05:28,146
capabilities through a configuration. So compared

78
00:05:28,178 --> 00:05:31,766
to the traditional proxies which struggles to

79
00:05:31,788 --> 00:05:35,250
keep pace with the dynamic nature of modern service communication,

80
00:05:35,330 --> 00:05:39,414
because any changes in the configuration you will have to restart

81
00:05:39,462 --> 00:05:42,922
the overall system and it will eventually cause

82
00:05:43,056 --> 00:05:46,858
a downtime. This problem

83
00:05:46,944 --> 00:05:50,990
gets avoided when we use envoy as a proxy.

84
00:05:51,410 --> 00:05:55,386
So that's the reason envoy proxy emerges

85
00:05:55,498 --> 00:05:58,830
as a groundbreaking solution to the challenges of service to service

86
00:05:58,900 --> 00:06:02,454
communication in modern architectures. This was originally

87
00:06:02,522 --> 00:06:05,634
developed by Lyft and now it's an integral part

88
00:06:05,672 --> 00:06:09,006
of CNCF. Envoy proxy offers

89
00:06:09,038 --> 00:06:12,190
a feature rich and high performance proxy

90
00:06:12,270 --> 00:06:16,438
layer, both for layer four as well as layer seven, and its

91
00:06:16,524 --> 00:06:19,842
key features include the dynamic service discovery,

92
00:06:19,906 --> 00:06:23,874
TLS termination, load balancing, building a resilient

93
00:06:23,922 --> 00:06:27,442
system and provide an extensibility through

94
00:06:27,516 --> 00:06:29,530
a rich set of APIs.

95
00:06:30,910 --> 00:06:33,740
Now let's understand how does it works,

96
00:06:35,070 --> 00:06:38,454
and in order to understand its capabilities

97
00:06:38,502 --> 00:06:42,574
and the functioning, there are four major configurations one

98
00:06:42,612 --> 00:06:45,070
should understand very, very carefully.

99
00:06:46,450 --> 00:06:49,738
So Ny proxy it manages. First of all, it manages

100
00:06:49,754 --> 00:06:54,130
the inbound as well as the outbound traffic flow using configurations

101
00:06:54,470 --> 00:06:58,014
which are made through first listeners.

102
00:06:58,142 --> 00:07:02,238
So the listeners are nothing but it defines

103
00:07:02,414 --> 00:07:05,890
a dedicated port at a dedicated IP address,

104
00:07:05,960 --> 00:07:09,714
and its job is to continue to listen for the incoming request

105
00:07:09,762 --> 00:07:13,446
or the traffic through with the help of various protocols like

106
00:07:13,468 --> 00:07:16,920
HTTP, HTTPS, TCP, et cetera, as an example.

107
00:07:17,390 --> 00:07:21,030
Now the next comes the routers. The outs

108
00:07:21,190 --> 00:07:25,034
define how envoy outs incoming requests to

109
00:07:25,072 --> 00:07:28,154
different upstream services based on the criteria such

110
00:07:28,192 --> 00:07:31,882
as request path headers and other metadata.

111
00:07:32,026 --> 00:07:35,802
The routes are configured in a routing table and determines

112
00:07:35,866 --> 00:07:40,080
which cluster to send the traffic to. So now,

113
00:07:40,770 --> 00:07:44,226
when the request comes to the cluster, cluster is nothing but

114
00:07:44,328 --> 00:07:47,746
a group of upstream services that envoy can

115
00:07:47,848 --> 00:07:51,294
forward traffic to. Each cluster

116
00:07:51,422 --> 00:07:54,606
define a set of endpoints that belong

117
00:07:54,638 --> 00:07:59,042
to the cluster. Envoy uses load balancing algorithm

118
00:07:59,106 --> 00:08:02,630
to distribute the traffic across endpoints within a cluster.

119
00:08:03,450 --> 00:08:07,570
Now, endpoints are nothing but the individual instances of a service

120
00:08:07,740 --> 00:08:10,794
that belongs to a cluster. They represent the

121
00:08:10,832 --> 00:08:14,730
destination for outbound traffic from the envoy.

122
00:08:16,030 --> 00:08:20,338
Envoy dynamically updates its list of endpoints

123
00:08:20,374 --> 00:08:23,646
as and when there is an update without the

124
00:08:23,668 --> 00:08:26,430
need of restarting your servers.

125
00:08:28,530 --> 00:08:32,250
So in short, when it comes to the inbound flow, the envoy

126
00:08:32,330 --> 00:08:36,446
first receives the incoming traffic and it intercepts

127
00:08:36,478 --> 00:08:39,854
it through the listener. It then processes

128
00:08:39,902 --> 00:08:42,450
the traffic according to the defined routes,

129
00:08:43,030 --> 00:08:46,706
performs various filtering based upon

130
00:08:46,738 --> 00:08:49,666
the filter chain that has been configured,

131
00:08:49,858 --> 00:08:53,494
and redirects the request to the appropriate cluster based

132
00:08:53,532 --> 00:08:57,186
upon the routing rule. Finally, envoy forwards

133
00:08:57,218 --> 00:09:00,650
the request to the corresponding endpoint within the cluster.

134
00:09:02,030 --> 00:09:05,546
Now, in case of an outbound flow, envoy receives the

135
00:09:05,568 --> 00:09:08,854
traffic from the upstream services based on the configured

136
00:09:08,902 --> 00:09:11,994
cluster and the corresponding endpoint.

137
00:09:12,122 --> 00:09:16,202
It uses load balancing algorithm to distribute the traffic

138
00:09:16,346 --> 00:09:19,498
across the available endpoints within a cluster.

139
00:09:19,674 --> 00:09:22,926
Envoy then forwards the traffic to the selected

140
00:09:22,958 --> 00:09:25,650
endpoint based on the load balancing decision.

141
00:09:27,030 --> 00:09:30,706
Now given we have seen the capabilities, features and

142
00:09:30,728 --> 00:09:34,654
the functioning of both service mesh as well as envoy

143
00:09:34,702 --> 00:09:39,154
proxy, let's deep dive into a use case and a problem statement

144
00:09:39,282 --> 00:09:41,720
that we will discuss today.

145
00:09:42,490 --> 00:09:45,974
So the use case, this use case,

146
00:09:46,012 --> 00:09:49,930
it belongs to, it's nothing but a european government initiative

147
00:09:50,750 --> 00:09:54,586
in order to accelerate the digital transformation and

148
00:09:54,688 --> 00:09:58,682
digitization of their government services to achieve their

149
00:09:58,736 --> 00:10:02,330
sustainable development goal. This initiative,

150
00:10:02,410 --> 00:10:05,530
it actually aims to build a common framework

151
00:10:05,690 --> 00:10:09,514
and technical practices for the design of reusable

152
00:10:09,562 --> 00:10:12,902
and interoperable operable digital components.

153
00:10:12,986 --> 00:10:17,154
The aim of building this solution ins so that we

154
00:10:17,192 --> 00:10:21,026
come up with the best practices and a common reusable framework that

155
00:10:21,048 --> 00:10:25,558
can be used across various government stack and

156
00:10:25,644 --> 00:10:28,950
it can be leveraged across various government stack for future

157
00:10:29,020 --> 00:10:32,674
use so that nobody has to reinvent

158
00:10:32,722 --> 00:10:36,150
or rebuild these common components from scratch.

159
00:10:36,890 --> 00:10:40,534
This has also been looked from the perspective to simplify

160
00:10:40,582 --> 00:10:43,830
the cost, time and the resource requirement necessarily

161
00:10:43,990 --> 00:10:47,820
required otherwise to create this digital platform.

162
00:10:48,270 --> 00:10:52,014
Now, the key technical ask of this use

163
00:10:52,052 --> 00:10:56,074
case is that they wanted to build a gateway for secure exchange

164
00:10:56,122 --> 00:10:59,918
of data and the services among various building blocks through

165
00:11:00,004 --> 00:11:03,730
open API based communication. The interfaces

166
00:11:04,150 --> 00:11:07,506
need to ensure that the interoperability and the

167
00:11:07,528 --> 00:11:11,250
implementation has been done as per the standards and the

168
00:11:11,320 --> 00:11:14,642
best practices have been incorporated. The next

169
00:11:14,696 --> 00:11:19,010
requirement is to enforce the best practices

170
00:11:19,090 --> 00:11:22,994
so as to bring the standardization in, data sharing policies

171
00:11:23,122 --> 00:11:27,094
and the data exchange now let's see the

172
00:11:27,212 --> 00:11:31,866
view about how

173
00:11:31,888 --> 00:11:35,802
is the communication between various building blocks of the government stack looks

174
00:11:35,856 --> 00:11:39,174
like. So the government has multiple business units,

175
00:11:39,302 --> 00:11:42,734
some of them taking care of citizen ID card, some of them are taking care

176
00:11:42,772 --> 00:11:45,070
of recording the childbirth,

177
00:11:46,210 --> 00:11:49,454
other units, the government initiatives taking care of

178
00:11:49,492 --> 00:11:53,386
the patient records and the registry and death record and registry.

179
00:11:53,498 --> 00:11:57,218
And there are various other building blocks as well. All in all,

180
00:11:57,384 --> 00:12:00,914
if you could just by name, it shows that all these

181
00:12:00,952 --> 00:12:04,562
various business units are interconnected and at any

182
00:12:04,616 --> 00:12:08,022
point in time they would need to share lot

183
00:12:08,076 --> 00:12:11,858
of information between them to maintain the consistency

184
00:12:11,954 --> 00:12:16,034
in the data and the records. So that's

185
00:12:16,082 --> 00:12:19,866
a requirement of this use case. Now, when it

186
00:12:19,888 --> 00:12:23,334
comes to the solution, what we can propose

187
00:12:23,382 --> 00:12:25,850
is we can propose the implementation,

188
00:12:27,070 --> 00:12:31,418
implementing the solution using service mesh with envoy proxy.

189
00:12:31,594 --> 00:12:34,782
So the proposed solution that we are suggesting is

190
00:12:34,836 --> 00:12:39,086
built around the envoy proxy. And in this solution we

191
00:12:39,108 --> 00:12:42,534
are actually focusing more about how to ensure

192
00:12:42,602 --> 00:12:45,966
a secure communication between the two building blocks

193
00:12:45,998 --> 00:12:50,222
of the government stack, as well as how to ensure

194
00:12:50,366 --> 00:12:53,250
that the data exchange is seamless.

195
00:12:54,150 --> 00:12:58,098
So the reason we are recommending envoy

196
00:12:58,194 --> 00:13:02,134
here is because of its dynamic configuration capability, the high

197
00:13:02,172 --> 00:13:05,574
performance and the extensive ecosystem of plugins that are

198
00:13:05,612 --> 00:13:09,526
available with envoy, which can be easily tailored

199
00:13:09,558 --> 00:13:13,062
as per the need. And most importantly,

200
00:13:13,126 --> 00:13:15,340
it ins an open source thing.

201
00:13:16,510 --> 00:13:19,706
So the high level architecture that has

202
00:13:19,728 --> 00:13:22,814
been projected here, it illustrates a couple of

203
00:13:22,852 --> 00:13:26,026
key components. The first one is the invoic proxy.

204
00:13:26,138 --> 00:13:29,898
It sits in the data path, intercepting any request

205
00:13:29,994 --> 00:13:34,766
between the services and the rooms which needs access control authentication,

206
00:13:34,878 --> 00:13:38,574
and then applying the access control and authentication

207
00:13:38,622 --> 00:13:42,162
rules. It dynamically evaluates the

208
00:13:42,216 --> 00:13:46,250
access information by evaluating a set of policy rules

209
00:13:46,350 --> 00:13:50,290
and provide a go or no go for the intercepted request.

210
00:13:50,450 --> 00:13:53,766
So multiple envoy proxies may be deployed within a security

211
00:13:53,868 --> 00:13:57,706
server for internal as well as external traffic. So this

212
00:13:57,728 --> 00:14:01,994
envoy proxy will sit at the front of each government

213
00:14:02,112 --> 00:14:05,942
building block, the ones we have said like the health registry,

214
00:14:06,006 --> 00:14:08,522
the childbirth information, the patient record.

215
00:14:08,656 --> 00:14:11,966
So in front of all these building blocks, there will

216
00:14:11,988 --> 00:14:15,134
be one envoy proxy which we are calling

217
00:14:15,172 --> 00:14:18,880
as a security server will sit and it will take care of all

218
00:14:19,330 --> 00:14:21,834
this authentication, authorization,

219
00:14:21,962 --> 00:14:25,630
secure data exchange, as well as policy informants.

220
00:14:25,790 --> 00:14:29,426
Whenever there are any updates in the configurations that

221
00:14:29,448 --> 00:14:32,962
have been made. Then in order to manage and control

222
00:14:33,016 --> 00:14:36,374
the overall ecosystem, we will also implement the

223
00:14:36,412 --> 00:14:38,230
envoy control plane.

224
00:14:40,570 --> 00:14:44,726
The implementation is required in

225
00:14:44,748 --> 00:14:47,962
a way that the services receive the policy challenges.

226
00:14:48,016 --> 00:14:53,418
Notification from the policy admin service and

227
00:14:53,504 --> 00:14:57,066
it gets propagated. It will be first received by

228
00:14:57,088 --> 00:15:00,426
the control plane and then it generates the access rule

229
00:15:00,458 --> 00:15:04,240
for the envoy proxy in a dynamic manner and

230
00:15:04,850 --> 00:15:08,666
push this update to the relevant envoy proxies,

231
00:15:08,778 --> 00:15:12,046
ensuring that the policies are enforced in a

232
00:15:12,068 --> 00:15:16,206
timely manner and at runtime without any delays

233
00:15:16,318 --> 00:15:19,262
plus without any restart required.

234
00:15:19,406 --> 00:15:24,062
So this service will use XDS protocol for the communication

235
00:15:24,206 --> 00:15:28,134
the authentication service that you see in the block is

236
00:15:28,172 --> 00:15:32,470
responsible for actual authentication of upstream and downstream services

237
00:15:32,620 --> 00:15:36,242
like the control plane service. This service receives notification

238
00:15:36,386 --> 00:15:39,906
and updates from the policy admin service. The service also

239
00:15:39,948 --> 00:15:43,514
sits in the data path as the authentication service that

240
00:15:43,552 --> 00:15:46,902
will be handled as a part of the request flow from the downstream

241
00:15:46,966 --> 00:15:50,422
applications and the proxies. So this is a solution

242
00:15:50,486 --> 00:15:54,362
that has been built using a service mesh pattern with envoy.

243
00:15:54,506 --> 00:15:58,490
Now let's see how and what are the different ways you can deploy

244
00:15:58,570 --> 00:16:02,714
the envoy proxy. So this is a deployment architecture

245
00:16:02,762 --> 00:16:06,114
and wherein you will see that the envoy proxy ins taking care of

246
00:16:06,152 --> 00:16:09,758
the internal communication as well as the external integrations.

247
00:16:09,934 --> 00:16:13,442
So there are various ways this proxy can be deployed. One,

248
00:16:13,496 --> 00:16:17,330
it can act as an envoy proxy, second, it can sit as a sidecar

249
00:16:17,410 --> 00:16:21,074
and third, it can also take care of external facing

250
00:16:21,122 --> 00:16:24,600
communications. So let's see how.

251
00:16:25,530 --> 00:16:29,370
So when it comes to the envoy proxy,

252
00:16:29,710 --> 00:16:33,466
it ins typically used for interproxy communications and

253
00:16:33,488 --> 00:16:37,446
it is deployed to control access from and to the classic

254
00:16:37,478 --> 00:16:42,320
applications which are running on VMs, the virtual service.

255
00:16:42,690 --> 00:16:46,686
And this will involve ensuring setting up routing so

256
00:16:46,708 --> 00:16:50,446
that all traffic has to pass through the proxy for

257
00:16:50,548 --> 00:16:53,860
secure communication and authentication taken.

258
00:16:54,390 --> 00:16:58,526
An alternative way of deploying it is the sidecar approach

259
00:16:58,718 --> 00:17:02,910
which you are seeing here, wherein all these applications that are deployed

260
00:17:02,990 --> 00:17:06,610
in Kubernetes will have envoy

261
00:17:06,690 --> 00:17:10,406
proxy deployed as a sidecar. The third approach is

262
00:17:10,428 --> 00:17:13,686
the external facing envoy proxy which will intercept the

263
00:17:13,708 --> 00:17:17,106
request to and fro coming from the external security server

264
00:17:17,138 --> 00:17:20,794
and ensure that its authentication is

265
00:17:20,832 --> 00:17:24,794
done. Now I

266
00:17:24,832 --> 00:17:29,146
just wanted to highlight a couple of points, why we

267
00:17:29,168 --> 00:17:32,990
have proposed this solution and what are the benefits of using this solution.

268
00:17:33,330 --> 00:17:37,246
So first of all, there are multiple challenges that

269
00:17:37,268 --> 00:17:41,374
we have seen without service mesh and without proxy while

270
00:17:41,412 --> 00:17:44,974
we build the microservices architectures. So when we propose

271
00:17:45,022 --> 00:17:47,890
a solution using service mesh with proxy,

272
00:17:48,390 --> 00:17:52,494
it automatically handles lot of boilerplate

273
00:17:52,542 --> 00:17:55,842
code which otherwise would take lot of time and effort to implement

274
00:17:55,906 --> 00:17:59,622
them from scratch. So first advantage is it makes

275
00:17:59,676 --> 00:18:03,634
your system very performant because the excess rules get encoded

276
00:18:03,682 --> 00:18:07,474
into the proxy configurations which are locally stored and

277
00:18:07,532 --> 00:18:10,950
enforced at the proxy as a gateway

278
00:18:11,110 --> 00:18:14,140
and hence there is no elapsed time.

279
00:18:14,590 --> 00:18:17,798
You are also saving on the network calls.

280
00:18:17,974 --> 00:18:22,046
Second, whenever you are pushing any dynamic configuration there

281
00:18:22,068 --> 00:18:25,806
ins no need to restart your system and hence it

282
00:18:25,828 --> 00:18:29,086
ensuring high availability of your system. Third,

283
00:18:29,188 --> 00:18:33,266
the solution works well both for cloud native as well as applications that

284
00:18:33,288 --> 00:18:36,818
are hosted on VMs. The solution is very future

285
00:18:36,904 --> 00:18:40,226
proof because when this proxy has

286
00:18:40,248 --> 00:18:43,954
been built, it already supported some of the modern protocols like

287
00:18:43,992 --> 00:18:46,550
HTTP two, GPRC and others,

288
00:18:46,700 --> 00:18:51,586
and it also provides a wide set of APIs

289
00:18:51,698 --> 00:18:55,522
as well as it provides a number of plugins which can be easily

290
00:18:55,586 --> 00:18:57,960
tailored and customizable to your needs.

291
00:18:59,290 --> 00:19:03,478
And it has got an inbuilt support

292
00:19:03,564 --> 00:19:07,654
for observability using the features like logging metrics and

293
00:19:07,692 --> 00:19:11,066
tracing. And that's the reason we have chosen

294
00:19:11,098 --> 00:19:14,590
this solution for the problem that we have just discussed.

295
00:19:15,010 --> 00:19:18,462
And with this we are at the end of our session. Thanks for watching

296
00:19:18,516 --> 00:19:22,414
my session. Feel free to ping me for any

297
00:19:22,452 --> 00:19:24,460
questions and the queries. Thank you so much.

