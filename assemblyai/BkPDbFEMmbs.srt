1
00:00:20,600 --> 00:00:24,710
Hello everyone. Today I am talking a few minutes

2
00:00:24,822 --> 00:00:28,256
for this important mission to introduce you to

3
00:00:28,280 --> 00:00:31,084
this fantastic project, test containers.

4
00:00:31,584 --> 00:00:35,480
So why I am so excited about test containers?

5
00:00:35,592 --> 00:00:39,176
The answer is so simple. Test containers is a

6
00:00:39,200 --> 00:00:43,024
framework that makes testing the dependencies of

7
00:00:43,064 --> 00:00:46,896
your backend application really easy. And the most important

8
00:00:47,000 --> 00:00:51,080
part of test containers is that everything is coded

9
00:00:51,152 --> 00:00:54,044
in your favorite programming language.

10
00:00:54,714 --> 00:00:58,090
If you want to use go, if you want to

11
00:00:58,122 --> 00:01:02,214
use rust or closure, test container

12
00:01:02,554 --> 00:01:06,594
is there for you. And of course, as the name suggests,

13
00:01:06,714 --> 00:01:09,854
all the dependencies are simple containers.

14
00:01:11,154 --> 00:01:14,138
Containers are easy to transport,

15
00:01:14,306 --> 00:01:17,186
containers are easy to distribute,

16
00:01:17,290 --> 00:01:21,354
immutable, and in fact, containers are easy to

17
00:01:21,394 --> 00:01:25,042
deploy. So today I'm going to show you how

18
00:01:25,058 --> 00:01:28,498
how to use test containers models and the sharing in

19
00:01:28,506 --> 00:01:32,362
the cake. I will quickly show you how to create

20
00:01:32,498 --> 00:01:36,234
your own test containers model. So let's

21
00:01:36,274 --> 00:01:39,746
go. And a big question is,

22
00:01:39,890 --> 00:01:43,698
what's a test containers model? So let's start

23
00:01:43,786 --> 00:01:47,426
with a simple test containers models Redis Redis

24
00:01:47,490 --> 00:01:51,174
is the world's fastest in memory database,

25
00:01:51,564 --> 00:01:55,556
Redis IO. About models, there are

26
00:01:55,700 --> 00:01:59,624
over 15 of them already created. For you

27
00:02:00,764 --> 00:02:04,532
to find model, go to the model section on

28
00:02:04,548 --> 00:02:08,276
the website just here and then select

29
00:02:08,340 --> 00:02:12,344
its language. Go for example.

30
00:02:15,044 --> 00:02:18,122
Then search for the model just

31
00:02:18,178 --> 00:02:22,626
here, or type just into

32
00:02:22,690 --> 00:02:25,490
the search bar. Sorry,

33
00:02:25,602 --> 00:02:28,814
Redis. As you can see,

34
00:02:29,354 --> 00:02:33,058
the redis model is available in several

35
00:02:33,186 --> 00:02:37,626
languages. For example javago.net

36
00:02:37,810 --> 00:02:39,774
js. Okay great.

37
00:02:40,874 --> 00:02:44,034
So, okay, let's go back to

38
00:02:44,114 --> 00:02:47,554
our code for the first time. It's time.

39
00:02:48,134 --> 00:02:51,582
So as you can see, I just

40
00:02:51,758 --> 00:02:54,782
close my terminal. As you can see,

41
00:02:54,838 --> 00:02:58,686
I've got a little application that lets you

42
00:02:58,750 --> 00:03:02,126
count the number of visitors to a webpage.

43
00:03:02,270 --> 00:03:06,754
And for that I have HTTP server,

44
00:03:09,454 --> 00:03:13,234
HTTP server here I have a root handler

45
00:03:13,814 --> 00:03:17,550
with my business logic

46
00:03:17,702 --> 00:03:21,382
to increment the counter and just get

47
00:03:21,558 --> 00:03:25,142
the current number and just

48
00:03:25,198 --> 00:03:28,862
print it. Okay, if we want to test that.

49
00:03:28,998 --> 00:03:32,886
Okay, it's really easy

50
00:03:32,950 --> 00:03:37,114
because you can run a docker container or just use

51
00:03:38,414 --> 00:03:42,286
docker compose. So let's go multi macfly

52
00:03:42,350 --> 00:03:46,102
back to the nineties with a simple contour

53
00:03:46,158 --> 00:03:49,814
application. So normally this application connects to

54
00:03:49,854 --> 00:03:53,550
my production redis instance, but I need to test the

55
00:03:53,582 --> 00:03:56,074
function that increment the counter.

56
00:03:57,174 --> 00:04:00,510
Well, it's precisely at this moment that I can use

57
00:04:00,542 --> 00:04:03,394
the text containers model. And just for,

58
00:04:04,454 --> 00:04:06,870
just for fun and to play with it.

59
00:04:07,022 --> 00:04:10,638
Okay, you open a terminal here,

60
00:04:10,766 --> 00:04:14,038
okay. And we go to the simple

61
00:04:14,166 --> 00:04:18,382
model just here. And after that we

62
00:04:18,478 --> 00:04:22,142
just run redis, sorry,

63
00:04:22,278 --> 00:04:26,274
Redis. Redis in background.

64
00:04:26,654 --> 00:04:29,582
And after that let's go for go.

65
00:04:29,678 --> 00:04:32,114
Run main dot go. Okay,

66
00:04:32,854 --> 00:04:37,006
not precisely important to build the application.

67
00:04:37,190 --> 00:04:40,594
And after that, okay, let's go for curl,

68
00:04:41,294 --> 00:04:44,582
the HTTP 323.

69
00:04:44,718 --> 00:04:47,594
Okay, we have a counter. Great.

70
00:04:48,854 --> 00:04:52,326
You have a sound like Tada. And if you

71
00:04:52,390 --> 00:04:55,958
cut the application, okay, I stop the application

72
00:04:56,046 --> 00:04:59,302
and run the application when you play with it.

73
00:04:59,398 --> 00:05:03,062
Let's go. You have the counter because you use

74
00:05:03,158 --> 00:05:06,890
a docker counter to

75
00:05:07,042 --> 00:05:10,450
play with application. Sorry. Okay, so good.

76
00:05:10,562 --> 00:05:14,658
But you know, it's not reliable

77
00:05:14,786 --> 00:05:18,346
to use docker. So we

78
00:05:18,370 --> 00:05:22,074
keep, we keep for example, redis in

79
00:05:22,114 --> 00:05:25,614
background and now we discover the test.

80
00:05:25,914 --> 00:05:28,954
So let's go to see how to use,

81
00:05:29,114 --> 00:05:33,814
okay, I just radius my terminal.

82
00:05:34,394 --> 00:05:37,282
Let's go to see how to use the redis model.

83
00:05:37,378 --> 00:05:41,054
Okay. To use the redis container.

84
00:05:41,434 --> 00:05:44,546
As you can see, it's really, really easy.

85
00:05:44,650 --> 00:05:47,378
Just one line, it's really good.

86
00:05:47,546 --> 00:05:51,882
So you can use the redis model. Redis model is here inside

87
00:05:51,938 --> 00:05:55,234
test containers. Test containers, go package,

88
00:05:55,394 --> 00:05:58,666
inside mole. And with the redis package and

89
00:05:58,690 --> 00:06:01,580
you can run the container just like that.

90
00:06:01,732 --> 00:06:05,260
So it's not necessary to precise the

91
00:06:05,372 --> 00:06:09,024
image, but it's just an option.

92
00:06:09,364 --> 00:06:12,988
After that we just

93
00:06:13,036 --> 00:06:16,684
get the endpoint of my redisaber to

94
00:06:16,724 --> 00:06:19,940
create a new client. Okay.

95
00:06:20,132 --> 00:06:25,424
And finally we can use the increment function,

96
00:06:26,004 --> 00:06:29,460
you remember the increment function here to test

97
00:06:29,612 --> 00:06:33,476
my redis. So, okay, this example is so

98
00:06:33,660 --> 00:06:36,228
trivial. No problem with that,

99
00:06:36,356 --> 00:06:40,064
just a tip. I used

100
00:06:40,364 --> 00:06:44,156
to set the counter to a value and to increment

101
00:06:44,220 --> 00:06:47,580
to use a 20, for example, other value.

102
00:06:47,772 --> 00:06:50,984
And let's go to execute this test.

103
00:06:51,864 --> 00:06:56,184
Oh, magic. Okay, so it's

104
00:06:56,224 --> 00:07:00,304
possible that I have a little bit

105
00:07:00,344 --> 00:07:04,208
of cash about this, this test.

106
00:07:04,336 --> 00:07:07,880
But as you can see, okay, we have here the

107
00:07:07,912 --> 00:07:11,856
port of test containers. Okay. And finally

108
00:07:11,960 --> 00:07:15,248
we have here just a port of

109
00:07:15,416 --> 00:07:17,684
my test. So, okay.

110
00:07:18,484 --> 00:07:22,904
And in this example, if you want, for example,

111
00:07:23,484 --> 00:07:27,580
if I cannot change redis for mongodB, for example,

112
00:07:27,692 --> 00:07:31,344
the test containers models exist. So it's really good.

113
00:07:31,684 --> 00:07:35,516
Okay. It was the first, very first example.

114
00:07:35,620 --> 00:07:38,824
So let's go for most

115
00:07:40,364 --> 00:07:43,724
advanced example. Okay, I just

116
00:07:43,764 --> 00:07:46,544
keep the first example here.

117
00:07:47,894 --> 00:07:51,874
Sorry, just here, keep my guru

118
00:07:53,694 --> 00:07:56,318
inside my first example.

119
00:07:56,486 --> 00:07:59,994
Okay, close, close. Okay. Just keep this terminal.

120
00:08:00,374 --> 00:08:03,550
I will explain what I want to keep

121
00:08:03,702 --> 00:08:06,954
this part of my simple model

122
00:08:07,494 --> 00:08:11,206
in my advanced, other model. I want to show

123
00:08:11,270 --> 00:08:15,294
you just here the main function.

124
00:08:16,394 --> 00:08:20,494
Exactly and precisely the same case as the first.

125
00:08:20,834 --> 00:08:24,274
But in this case we use an

126
00:08:24,394 --> 00:08:27,866
HTTP call to increment my counter.

127
00:08:27,930 --> 00:08:32,254
For example, the advance is the second microservice.

128
00:08:32,714 --> 00:08:35,754
To use the first simple microservice.

129
00:08:35,834 --> 00:08:39,934
Okay, why use

130
00:08:40,054 --> 00:08:43,238
this example for you today? Is just because I want to

131
00:08:43,286 --> 00:08:47,454
demonstrate another amazing project and its

132
00:08:47,494 --> 00:08:51,674
name is microx. Microx is awesome.

133
00:08:52,534 --> 00:08:56,262
Microx is here, just here

134
00:08:56,398 --> 00:09:00,078
in the test. So I will explain. I have

135
00:09:00,166 --> 00:09:03,982
an HTTP server here with

136
00:09:04,158 --> 00:09:07,502
root handler here and I use the

137
00:09:07,558 --> 00:09:12,214
increment here. So just in this case I

138
00:09:12,254 --> 00:09:16,574
print number of visitors with just

139
00:09:16,614 --> 00:09:20,510
a number or the error because you

140
00:09:20,542 --> 00:09:24,870
call another server. In this demonstration,

141
00:09:25,022 --> 00:09:29,034
as you can see, I call the previous. So if I test this

142
00:09:30,054 --> 00:09:33,326
second advanced model,

143
00:09:33,430 --> 00:09:37,154
I can curl it with 4444.

144
00:09:37,774 --> 00:09:40,894
I'm sorry, I'm sorry. I just go run

145
00:09:40,934 --> 00:09:45,550
the main, let's go. And finally I

146
00:09:45,582 --> 00:09:49,194
change directory for this and I can curl

147
00:09:49,854 --> 00:09:53,678
here. And as you can see, we use the previous model

148
00:09:53,766 --> 00:09:57,294
as a microservice. Okay, so it's

149
00:09:57,334 --> 00:10:00,758
a big, big, big problem because if you

150
00:10:00,806 --> 00:10:04,834
have for example 20 microservices,

151
00:10:05,214 --> 00:10:09,634
it's really difficult to run

152
00:10:10,174 --> 00:10:13,414
all around the world. So in

153
00:10:13,454 --> 00:10:18,414
my example I will use the amazing

154
00:10:18,494 --> 00:10:20,834
microx model just here.

155
00:10:21,774 --> 00:10:24,714
The idea of microx is to create,

156
00:10:26,054 --> 00:10:30,798
to put in place a contract testing between your microservices

157
00:10:30,966 --> 00:10:34,678
and to keep up to date using

158
00:10:34,766 --> 00:10:39,086
for example openapi. So in

159
00:10:39,110 --> 00:10:42,582
my test data here, I have the description of

160
00:10:42,638 --> 00:10:46,390
my API. So it's not a trivial

161
00:10:46,582 --> 00:10:49,854
description because in this example

162
00:10:49,974 --> 00:10:53,886
counter API, I have a root path and I

163
00:10:53,910 --> 00:10:58,022
have a simple counter here. But the magic

164
00:10:58,078 --> 00:11:01,758
here is that I use like

165
00:11:01,806 --> 00:11:05,720
a script to generate

166
00:11:05,792 --> 00:11:09,124
the increment. Okay? So it's like a mock.

167
00:11:09,704 --> 00:11:13,296
And this URL for example is the same

168
00:11:13,360 --> 00:11:17,344
as microx. So for example,

169
00:11:17,424 --> 00:11:20,004
my test, I create,

170
00:11:20,824 --> 00:11:24,352
I use the microx container here,

171
00:11:24,488 --> 00:11:28,112
okay. I use the package, this good package

172
00:11:28,168 --> 00:11:29,324
testify to,

173
00:11:31,094 --> 00:11:34,390
to ensure that I don't have any error

174
00:11:34,462 --> 00:11:38,358
here. Finally I import

175
00:11:38,446 --> 00:11:42,350
as a main artifact. So I let you discover my

176
00:11:42,382 --> 00:11:46,674
crux about that to define my,

177
00:11:47,214 --> 00:11:51,550
finally my API. So in fact my mock

178
00:11:51,702 --> 00:11:55,550
about API, I get

179
00:11:55,582 --> 00:12:00,110
the endpoint of microcs and I

180
00:12:00,142 --> 00:12:06,150
will use the rest mock endpoint to

181
00:12:06,182 --> 00:12:09,954
have the ability to play

182
00:12:10,414 --> 00:12:13,634
with the mock. And finally

183
00:12:13,974 --> 00:12:17,990
I use increment with this mock a

184
00:12:18,022 --> 00:12:22,350
first time and a second time to be sure that

185
00:12:22,542 --> 00:12:28,278
my increment function as really

186
00:12:28,366 --> 00:12:31,870
great. So let's go. And if

187
00:12:31,902 --> 00:12:35,674
I run the test, as you can see, it's okay,

188
00:12:36,094 --> 00:12:39,914
it's okay. So really good to demonstrate

189
00:12:40,374 --> 00:12:45,630
the ability to use this amazing project.

190
00:12:45,822 --> 00:12:49,206
Okay, so Julian, two amazing project

191
00:12:49,310 --> 00:12:52,586
in one video. Yeah, because in the

192
00:12:52,610 --> 00:12:55,866
day to day of software engineering, you have

193
00:12:55,890 --> 00:12:59,154
to use the precious software,

194
00:12:59,314 --> 00:13:02,938
the precious tools. And I think that test containers

195
00:13:03,026 --> 00:13:06,866
and microcs are two of best in

196
00:13:06,890 --> 00:13:10,754
my set. Okay, so really easy

197
00:13:10,794 --> 00:13:14,134
to use as you can see. So now

198
00:13:14,914 --> 00:13:19,120
let's go to create our own test container.

199
00:13:19,272 --> 00:13:22,568
Okay. And the first question is how

200
00:13:22,616 --> 00:13:26,024
to create my own test containers models. What's next?

201
00:13:26,144 --> 00:13:30,256
Now it's time to create your own container.

202
00:13:30,400 --> 00:13:33,920
Okay. Since for me it's late and I have a little

203
00:13:33,992 --> 00:13:37,456
imagination, we're going to create an Nginx

204
00:13:37,520 --> 00:13:40,604
model, okay? So let's go.

205
00:13:41,144 --> 00:13:44,890
And to create a model, it's very, very simple.

206
00:13:45,072 --> 00:13:49,394
Okay, let's go. To create a model,

207
00:13:50,134 --> 00:13:54,398
you just declare a go package with

208
00:13:54,486 --> 00:13:58,318
a primary function like

209
00:13:58,446 --> 00:14:01,954
run container. Okay. It's more like a convention.

210
00:14:02,734 --> 00:14:04,514
It's more like a convention.

211
00:14:05,894 --> 00:14:10,406
Here you're running always

212
00:14:10,470 --> 00:14:15,570
the context is used to

213
00:14:15,602 --> 00:14:19,314
create your container and some customizers.

214
00:14:19,354 --> 00:14:23,066
So some options about. So in

215
00:14:23,090 --> 00:14:26,614
this example we have a first container request.

216
00:14:27,794 --> 00:14:32,138
After that we use image property

217
00:14:32,306 --> 00:14:36,594
and we can declare exposed ports

218
00:14:36,714 --> 00:14:40,842
property. And you have a

219
00:14:40,858 --> 00:14:44,778
lot of option to say to test

220
00:14:44,826 --> 00:14:48,266
container. Okay, the container is ready,

221
00:14:48,370 --> 00:14:51,914
the container restart. So after

222
00:14:51,954 --> 00:14:55,538
that you create a generic request.

223
00:14:55,706 --> 00:15:00,682
And here you can use started with

224
00:15:00,818 --> 00:15:04,922
value to true to say. Okay, start now.

225
00:15:05,098 --> 00:15:08,458
Because if you want to prepare, for example,

226
00:15:08,506 --> 00:15:12,330
you can create a run container without the started

227
00:15:12,362 --> 00:15:16,374
true. But if your model's users

228
00:15:16,954 --> 00:15:19,614
use it without started,

229
00:15:19,954 --> 00:15:23,882
the model is not started. So easy.

230
00:15:24,018 --> 00:15:26,698
After that you can create a generic container.

231
00:15:26,826 --> 00:15:30,210
And as you can see, it's really easy inside

232
00:15:30,362 --> 00:15:34,094
test containers to use the generic containers. You know,

233
00:15:35,034 --> 00:15:37,694
it's not precisely important to,

234
00:15:38,434 --> 00:15:41,490
you don't need, in fact, to create all containers.

235
00:15:41,562 --> 00:15:45,330
You can use just vanilla test containers

236
00:15:45,442 --> 00:15:49,138
with generators, generic containers. In this example,

237
00:15:49,226 --> 00:15:54,466
I use the example of the official website of

238
00:15:54,570 --> 00:15:58,818
test containers to retrieve the host and

239
00:15:58,986 --> 00:16:01,734
to get the map port.

240
00:16:02,194 --> 00:16:06,018
In our case, it's this port here and

241
00:16:06,066 --> 00:16:11,882
to put the URI inside

242
00:16:11,978 --> 00:16:15,426
the destruction. Yeah, easy to use for

243
00:16:15,450 --> 00:16:18,930
the rest of

244
00:16:18,962 --> 00:16:21,734
this demonstration. So here,

245
00:16:22,394 --> 00:16:26,770
for example, you can create some

246
00:16:26,842 --> 00:16:31,170
options and in my case, I use with index,

247
00:16:31,322 --> 00:16:35,426
with auth file index to replace

248
00:16:35,530 --> 00:16:39,688
the default index of NgInX.

249
00:16:39,826 --> 00:16:43,084
Okay. And test containers is very,

250
00:16:43,204 --> 00:16:46,796
is very cool in fact, because you have all

251
00:16:46,820 --> 00:16:49,940
the sets about, about you need.

252
00:16:50,052 --> 00:16:54,108
For example, if you want to put files inside the containers,

253
00:16:54,236 --> 00:16:57,452
if you want to map some ports,

254
00:16:57,508 --> 00:17:01,344
etc. Etc. So, okay, we have

255
00:17:01,804 --> 00:17:05,704
our first model, okay, in your imagination

256
00:17:06,124 --> 00:17:09,672
you can use this model with this full path.

257
00:17:09,728 --> 00:17:13,640
For example, go get blah blah blah blah blah model nginx.

258
00:17:13,712 --> 00:17:16,824
Okay. But in our case we use a test

259
00:17:16,864 --> 00:17:21,804
file to demonstrate how to use this.

260
00:17:24,064 --> 00:17:27,496
Let's go to see our test. This test is a

261
00:17:27,560 --> 00:17:31,672
test run container, okay, basic. And we

262
00:17:31,848 --> 00:17:36,264
just run the function

263
00:17:36,384 --> 00:17:40,416
run container, sorry, with a specific index.

264
00:17:40,560 --> 00:17:42,444
My index is really,

265
00:17:43,384 --> 00:17:47,320
really good because you have inside just conv.

266
00:17:47,352 --> 00:17:51,040
42, okay. I'm sorry,

267
00:17:51,152 --> 00:17:54,992
I closed the test. We check

268
00:17:55,048 --> 00:17:59,072
that we don't have no error. We check also

269
00:17:59,248 --> 00:18:02,524
the cleanup of the container. And finally

270
00:18:05,344 --> 00:18:08,584
we fetch the value of nginx

271
00:18:08,744 --> 00:18:12,376
to be sure that it's equal to

272
00:18:12,560 --> 00:18:15,164
con 42. So, okay,

273
00:18:15,624 --> 00:18:18,844
I just put this comment here.

274
00:18:19,304 --> 00:18:23,208
The value con 42 comes from test

275
00:18:23,256 --> 00:18:26,944
data index HTML. And I use

276
00:18:27,104 --> 00:18:31,448
a tiny function, fetch to get the

277
00:18:31,536 --> 00:18:35,484
nginx server. Okay, let's go to run the tests.

278
00:18:36,264 --> 00:18:40,072
Okay, so if you want to practice like

279
00:18:40,168 --> 00:18:44,512
BDD or other things like that. My first error

280
00:18:44,608 --> 00:18:47,404
was here. As you can see,

281
00:18:48,184 --> 00:18:51,844
it's okay. We have a bad test.

282
00:18:52,544 --> 00:18:56,284
Okay, I just put the initial value.

283
00:18:57,104 --> 00:19:00,880
Okay. So like we said,

284
00:19:01,032 --> 00:19:04,464
et voila. Know you know how to use test

285
00:19:04,504 --> 00:19:06,924
container very quickly.

286
00:19:08,224 --> 00:19:11,704
If you'd like more information about test containers,

287
00:19:11,784 --> 00:19:15,254
please don't hesitate to get in touch with the community.

288
00:19:15,754 --> 00:19:19,282
They are really nice. I'd also

289
00:19:19,378 --> 00:19:22,994
like to thank them for this lovely t

290
00:19:23,034 --> 00:19:26,922
shirt and in fact, this amazing

291
00:19:26,978 --> 00:19:30,994
technology. Because I think that in the software engineering,

292
00:19:31,154 --> 00:19:34,762
this is precisely a tool, a missing

293
00:19:34,898 --> 00:19:38,354
tool. But now it's good to

294
00:19:38,394 --> 00:19:42,570
have test containers. And one

295
00:19:42,682 --> 00:19:46,586
more serious note, don't hesitate to simply test your go applications.

296
00:19:46,690 --> 00:19:50,194
It's really important and very easy.

297
00:19:50,314 --> 00:19:54,538
And now you can use a bunch of tools

298
00:19:54,586 --> 00:19:57,978
about AI. So see you next time

299
00:19:58,146 --> 00:20:00,534
for new adventure.

300
00:20:01,394 --> 00:20:04,578
And really happy to have you today.

