1
00:00:25,090 --> 00:00:28,470
Is Robert. I'm a solutions architect at AWS,

2
00:00:28,810 --> 00:00:32,710
and today, together with my friend Christian, who is a customer

3
00:00:32,780 --> 00:00:35,814
solutions manager at AWS, we want to

4
00:00:35,852 --> 00:00:40,120
urge you to forget about platform engineering and instead

5
00:00:40,490 --> 00:00:43,926
think about developer productivity. And what we mean by

6
00:00:43,948 --> 00:00:47,974
that is to find a more customer centric approach to

7
00:00:48,012 --> 00:00:51,534
developer platforms. Now, what's the gist of

8
00:00:51,572 --> 00:00:53,280
this talk? Well,

9
00:00:54,450 --> 00:00:58,362
we are asking you to not lose yourself in the traditional

10
00:00:58,426 --> 00:01:02,566
way of platform engineering, which means a lot of engineering,

11
00:01:02,698 --> 00:01:06,626
a lot of running, a lot of operating, of services, a lot

12
00:01:06,648 --> 00:01:10,066
of software, doing this in a very centralized way,

13
00:01:10,248 --> 00:01:13,810
and instead compose and integrate

14
00:01:14,150 --> 00:01:17,542
readymade cloud and SaaS and only

15
00:01:17,596 --> 00:01:21,654
build things if you really must. And this

16
00:01:21,692 --> 00:01:25,574
should help you to unlock a lot of capacity, which you

17
00:01:25,612 --> 00:01:29,180
actually need to do something very different, which is

18
00:01:29,630 --> 00:01:33,370
spending most of your resources on thinking about

19
00:01:33,520 --> 00:01:36,890
developer productivity first and foremost, and then

20
00:01:37,040 --> 00:01:39,862
working backwards from there from your customers,

21
00:01:40,016 --> 00:01:43,850
which are your developers. Now let's

22
00:01:43,930 --> 00:01:47,662
go back to the beginning of all of this and

23
00:01:47,796 --> 00:01:51,566
understand where we are coming from. There's this guy,

24
00:01:51,668 --> 00:01:55,262
Lena Fogels, who is the CTO of Amazon,

25
00:01:55,406 --> 00:01:58,260
and in 2006 he said,

26
00:01:58,710 --> 00:02:02,238
well, what's a good way for product teams

27
00:02:02,334 --> 00:02:06,546
who build digital products? What's a good way for them to

28
00:02:06,568 --> 00:02:09,926
work and operate? Well, a good way to do it is you

29
00:02:09,948 --> 00:02:13,190
build it, you run it. So the idea is that

30
00:02:13,260 --> 00:02:16,694
developers really should be in contact with the day

31
00:02:16,732 --> 00:02:20,394
to day operations of their software. And he

32
00:02:20,432 --> 00:02:23,786
sees that as a critical feedback loop for

33
00:02:23,808 --> 00:02:25,900
improving the quality of a service.

34
00:02:26,590 --> 00:02:30,542
Now that sounds fine, right? But there's a

35
00:02:30,676 --> 00:02:34,640
little issue here, and it's this thing,

36
00:02:35,090 --> 00:02:38,686
and I'm just taking the CNCF landscape here as an

37
00:02:38,708 --> 00:02:41,882
example. I do not really want to throw the CNCF

38
00:02:41,946 --> 00:02:45,506
ecosystem under the bus, but essentially what you

39
00:02:45,528 --> 00:02:48,802
can see here is there's a lot of stuff to think

40
00:02:48,856 --> 00:02:52,260
about when you develop a new service.

41
00:02:52,710 --> 00:02:56,126
It's not just about the code, but it's about all the

42
00:02:56,168 --> 00:02:59,426
things you need to actually run the code, to observe

43
00:02:59,458 --> 00:03:03,186
your code, to operate it. And that creates

44
00:03:03,218 --> 00:03:05,910
a lot of cognitive load on a developer.

45
00:03:06,410 --> 00:03:10,220
One of the things that platform engineering tries to do here

46
00:03:10,750 --> 00:03:14,490
is to actually make it easier for the developer to do this,

47
00:03:14,560 --> 00:03:18,650
to remove that cognitive load, that extraneous cognitive load,

48
00:03:19,470 --> 00:03:22,906
and basically help him be more self sufficient

49
00:03:23,018 --> 00:03:26,720
in a sense, a different way to express that

50
00:03:27,250 --> 00:03:31,102
is how Fortworx coined it,

51
00:03:31,236 --> 00:03:35,342
by saying, well, platforms are a means of centralizing

52
00:03:35,486 --> 00:03:38,654
expertise while decentralizing innovation

53
00:03:38,702 --> 00:03:41,810
to the customer user. Now that's great,

54
00:03:41,880 --> 00:03:46,514
right? We can build a platform that helps developers make

55
00:03:46,552 --> 00:03:50,260
their lives easier to have some code,

56
00:03:51,030 --> 00:03:54,406
run it, get their infrastructure they need for that and so

57
00:03:54,428 --> 00:03:57,480
on. And the way this could look like

58
00:03:58,030 --> 00:04:01,626
is shown here on the slide. So again, drawing some inspiration from

59
00:04:01,648 --> 00:04:05,590
the CNCF, but there are like many versions

60
00:04:05,750 --> 00:04:09,926
of that picture from different communities,

61
00:04:10,118 --> 00:04:13,822
they almost look all the same. Which means

62
00:04:13,876 --> 00:04:17,354
hey, there's a bunch of platform capabilities you need for developers

63
00:04:17,402 --> 00:04:21,050
to run things like okay, you need compute, you need network,

64
00:04:21,130 --> 00:04:23,810
you need a database, messaging, queuing,

65
00:04:24,230 --> 00:04:27,794
IAM, all these kinds of things. And of course

66
00:04:27,832 --> 00:04:31,170
you need some interfaces like documentation

67
00:04:32,070 --> 00:04:34,740
templates to put these services together.

68
00:04:35,130 --> 00:04:37,640
So that's really great.

69
00:04:39,050 --> 00:04:42,918
But there's one challenge here and that is

70
00:04:43,084 --> 00:04:46,486
essentially there's a lot of work you can put

71
00:04:46,508 --> 00:04:50,554
into this, right? And you can kind of lose yourself in

72
00:04:50,592 --> 00:04:54,954
building the perfect platform. And what

73
00:04:54,992 --> 00:04:58,554
we often see is that thats can have

74
00:04:58,592 --> 00:05:01,626
this very technical view like we have on thats slide,

75
00:05:01,818 --> 00:05:06,062
but this has the risk of you

76
00:05:06,116 --> 00:05:10,218
going down the wrong path or not the perfect path,

77
00:05:10,394 --> 00:05:13,954
and how it looks like if you go

78
00:05:13,992 --> 00:05:17,138
into the wrong direction, that's what

79
00:05:17,144 --> 00:05:21,102
we see on this slide. It's what I would call the downward

80
00:05:21,166 --> 00:05:24,430
spiral of platform engineering, which essentially

81
00:05:24,510 --> 00:05:28,326
is running too much things and running the wrong things

82
00:05:28,428 --> 00:05:31,960
especially. So the way it all starts is

83
00:05:32,330 --> 00:05:35,586
you're somehow prioritizing the wrong work streams

84
00:05:35,618 --> 00:05:38,874
and features and from there

85
00:05:38,992 --> 00:05:43,100
you start reinventing the wheel by building undifferentiated services.

86
00:05:43,870 --> 00:05:47,594
Now those two things often happen because you're not

87
00:05:47,632 --> 00:05:51,354
close enough to your user, to your customer, which is the developer.

88
00:05:51,482 --> 00:05:54,106
So you're not gathering enough signals,

89
00:05:54,218 --> 00:05:58,314
enough data to know what is the biggest friction

90
00:05:58,362 --> 00:06:01,482
point that your developers are facing.

91
00:06:01,546 --> 00:06:04,946
What problems do they really have and what is

92
00:06:04,968 --> 00:06:08,626
the best way to solve them in a scrappy way.

93
00:06:08,728 --> 00:06:12,126
Thats way you can quickly help them without boiling the ocean.

94
00:06:12,158 --> 00:06:15,890
Essentially the next problem arises.

95
00:06:15,970 --> 00:06:19,634
So you build those undifferentiated services like you're

96
00:06:19,682 --> 00:06:23,446
again running a lot of infrastructure thats the platform team

97
00:06:23,548 --> 00:06:26,998
probably shouldn't run. And now you're spending a

98
00:06:27,004 --> 00:06:30,730
lot of resources on operating the services, right? Maybe you're running

99
00:06:30,800 --> 00:06:34,262
your own Kubernetes clusters, your own kafka clusters,

100
00:06:34,406 --> 00:06:37,706
and there might be reasons to do it if you're doing something

101
00:06:37,808 --> 00:06:41,078
very specific, very industry specific,

102
00:06:41,184 --> 00:06:44,766
very specialized on those services, but for

103
00:06:44,788 --> 00:06:48,362
a lot of customers, actually you could call more of a commodity

104
00:06:48,426 --> 00:06:52,222
service and there's not too much value in going

105
00:06:52,276 --> 00:06:55,362
very deep with it. And instead it

106
00:06:55,416 --> 00:06:59,170
rather helps to use a cloud service for that, or SAS.

107
00:07:00,630 --> 00:07:04,866
Now these teams now operate those services and

108
00:07:04,968 --> 00:07:08,774
the risk here is that they now attach their own identity to these

109
00:07:08,812 --> 00:07:12,630
services, right? We are the Kafka team. We are the Kubernetes team.

110
00:07:12,780 --> 00:07:16,758
And that makes it really hard to drive change when these services

111
00:07:16,844 --> 00:07:20,380
should be deprecated, should be replaced, should be

112
00:07:21,150 --> 00:07:24,602
replaced with something better. So this is really

113
00:07:24,656 --> 00:07:28,154
where it helps a lot to not

114
00:07:28,192 --> 00:07:32,206
have teams be so attached to the actual services, to the

115
00:07:32,228 --> 00:07:36,014
actual infrastructure, and have more of a mindset of

116
00:07:36,052 --> 00:07:39,962
this. Hey, what's really our identity? Well, our identity

117
00:07:40,026 --> 00:07:43,154
is to improve developer productivity first and

118
00:07:43,192 --> 00:07:46,414
foremost. That's our job. It's not our job to run a Kubernetes

119
00:07:46,462 --> 00:07:49,970
cluster per se. Now one additional

120
00:07:51,110 --> 00:07:55,038
challenge here, or fallacy is here that

121
00:07:55,224 --> 00:07:59,346
people believe they are good at building abstractions, because that's

122
00:07:59,378 --> 00:08:03,014
something, right? That platform engineering has

123
00:08:03,052 --> 00:08:06,422
kind of its job, right? You're saying, well, we want to build

124
00:08:06,476 --> 00:08:11,274
abstractions to make it easier for the developer to

125
00:08:11,312 --> 00:08:15,382
do their jobs, right? We want to abstract away the infrastructure,

126
00:08:15,446 --> 00:08:19,142
the services and so on. And that can be dangerous

127
00:08:19,206 --> 00:08:22,560
because building abstractions is really hard.

128
00:08:23,010 --> 00:08:26,842
And oftentimes people think about abstracting

129
00:08:26,906 --> 00:08:30,526
things away, but they are not thinking so much about the

130
00:08:30,548 --> 00:08:33,570
failure state of these abstractions. So essentially,

131
00:08:33,910 --> 00:08:37,170
if you think about programming, right, we have abstractions like

132
00:08:37,240 --> 00:08:40,946
classes thats try to abstract away certain details of the

133
00:08:40,968 --> 00:08:44,482
implementation. But when all fails, right,

134
00:08:44,536 --> 00:08:48,214
you still get the full stack trace and then you're like, oh wow,

135
00:08:48,412 --> 00:08:51,926
what is happening? What's all happening behind the hood, under the

136
00:08:51,948 --> 00:08:55,798
hood? And this is where really thinking

137
00:08:55,884 --> 00:08:59,194
hard about what abstractions do. I actually want

138
00:08:59,232 --> 00:09:03,162
to build. What abstractions can I build? And which

139
00:09:03,216 --> 00:09:06,886
abstractions should I just outright. But because it's easier.

140
00:09:07,078 --> 00:09:10,458
Like for example, serverless. And these kinds

141
00:09:10,474 --> 00:09:13,786
of things are also abstractions.

142
00:09:13,898 --> 00:09:17,166
And the interesting thing about these kinds of abstractions is that they

143
00:09:17,188 --> 00:09:21,678
are not just happening at the configuration time,

144
00:09:21,844 --> 00:09:24,642
they're also happening at the runtime, right?

145
00:09:24,696 --> 00:09:26,930
Because also when the service runs,

146
00:09:27,430 --> 00:09:30,830
for example, the serverless, you do not see the containers,

147
00:09:30,910 --> 00:09:34,002
you do not see the virtual machines and so on.

148
00:09:34,056 --> 00:09:37,446
So that is very helpful to

149
00:09:37,548 --> 00:09:41,506
have an abstraction there and finally to round

150
00:09:41,538 --> 00:09:44,806
it all off. We made some mistakes in

151
00:09:44,828 --> 00:09:51,738
the first few steps, but now without

152
00:09:51,824 --> 00:09:55,110
really knowing, without really having the intention,

153
00:09:55,190 --> 00:09:59,098
we're kind of building our own echo chamber. And we do this

154
00:09:59,184 --> 00:10:02,874
by only measuring what we have, the existing

155
00:10:02,922 --> 00:10:06,814
services. So we might do surveys with

156
00:10:06,852 --> 00:10:10,058
our customers, with the developers, but we're

157
00:10:10,074 --> 00:10:13,082
mostly asking them about, hey, this is what I got.

158
00:10:13,236 --> 00:10:17,010
How do you like that? Is that cool? Yes. Okay, great.

159
00:10:17,080 --> 00:10:20,450
Then I move on. And we're not leaving enough

160
00:10:20,600 --> 00:10:22,580
room to actually ask. Hey,

161
00:10:23,350 --> 00:10:26,594
besides leave the services we have aside

162
00:10:26,642 --> 00:10:30,598
for a minute, what is actually impeding you

163
00:10:30,684 --> 00:10:34,882
during your workday? What is really a point of friction

164
00:10:34,946 --> 00:10:38,502
that you would like to have removed

165
00:10:38,646 --> 00:10:42,250
and then basically work from that input to figure out, okay,

166
00:10:42,320 --> 00:10:46,220
what's the next thing we should build in our platform?

167
00:10:46,750 --> 00:10:50,074
And another way, which I really like on

168
00:10:50,112 --> 00:10:53,438
how to summarize that is how charity may thats put it.

169
00:10:53,524 --> 00:10:57,338
So she's the co founder and CTO at Honeycomb.

170
00:10:57,514 --> 00:11:00,880
She recently had a great talk

171
00:11:01,330 --> 00:11:05,098
that is linked know perils, pitfalls and faults

172
00:11:05,114 --> 00:11:07,842
of platform engineering. And it's an amazing talk.

173
00:11:07,896 --> 00:11:11,122
So if you're not taking anything away from this talk,

174
00:11:11,176 --> 00:11:15,054
please take away that. You should also listen to that talk because it's really

175
00:11:15,112 --> 00:11:18,200
great. And she basically said, well,

176
00:11:18,570 --> 00:11:22,402
you have a platforms engineering and the main goal,

177
00:11:22,466 --> 00:11:25,858
the main work of that platform engineering organization

178
00:11:25,954 --> 00:11:29,450
should be to wrap and package infrastructure needs

179
00:11:29,520 --> 00:11:33,702
by running as little infra as possible, right? Don't get stuck

180
00:11:33,766 --> 00:11:37,466
on running infrastructure and basically losing the

181
00:11:37,488 --> 00:11:41,930
sight of your goal, which is really driving developer productivity.

182
00:11:42,590 --> 00:11:45,806
So to sum it up here, we said

183
00:11:45,908 --> 00:11:49,502
we want to spend our resources on doing the right things.

184
00:11:49,636 --> 00:11:53,394
And to do that, we want to think about developer productivity first

185
00:11:53,512 --> 00:11:57,266
and work backwards from that, and especially work backwards from our customers,

186
00:11:57,368 --> 00:12:00,994
which are the developers. Now you might be saying,

187
00:12:01,032 --> 00:12:04,954
well, developer productivity, that's a really nice buzzword,

188
00:12:05,022 --> 00:12:08,306
but how can we actually do this in practice?

189
00:12:08,498 --> 00:12:12,038
And fortunately, there is a way to do this

190
00:12:12,124 --> 00:12:14,520
and it's called developer experience.

191
00:12:15,450 --> 00:12:18,730
So thats is developer experience. Well,

192
00:12:18,880 --> 00:12:23,094
developer experience is a framework for a developer

193
00:12:23,142 --> 00:12:27,450
or customer centric approach to improving developer productivity.

194
00:12:27,950 --> 00:12:31,514
And it's actually brought to you by the team that invented

195
00:12:31,562 --> 00:12:34,654
other very well known frameworks that you probably know

196
00:12:34,692 --> 00:12:38,846
already, like Dora and space. So in

197
00:12:38,868 --> 00:12:42,422
Devex, the developer experience is basically modeled

198
00:12:42,506 --> 00:12:46,082
in three core dimensions, which are what you see on the screen

199
00:12:46,136 --> 00:12:50,180
here, feedback loops, cognitive load and flow state.

200
00:12:50,630 --> 00:12:54,340
And these things really help to

201
00:12:54,970 --> 00:12:58,454
the developer model the developer as a,

202
00:12:58,492 --> 00:13:02,118
let's say, complex being that has all these needs

203
00:13:02,204 --> 00:13:05,986
to be really productive. So fast feedback

204
00:13:06,018 --> 00:13:09,740
loops are about doing work quickly,

205
00:13:10,510 --> 00:13:13,610
getting feedback very fast, as the name implies.

206
00:13:14,190 --> 00:13:18,122
To improve that, you should find areas where actually you need

207
00:13:18,256 --> 00:13:22,094
development tools that help you accelerate those

208
00:13:22,132 --> 00:13:25,754
feedback loops. And then of course there's cognitive load,

209
00:13:25,802 --> 00:13:29,310
right? So everything that distracts the developer from

210
00:13:29,380 --> 00:13:33,586
delivering value to their customers by building great

211
00:13:33,768 --> 00:13:37,202
products. And these can be many

212
00:13:37,256 --> 00:13:40,706
things, right? That's an important point. It's not just the right services,

213
00:13:40,808 --> 00:13:45,220
but it's also the right documentation, finding things,

214
00:13:45,830 --> 00:13:49,526
making things easy to use and so on. And finally,

215
00:13:49,708 --> 00:13:53,702
at the top, there's flow state, which I think developers really

216
00:13:53,756 --> 00:13:57,202
know, right? You want to be in flow, you want to be in the zone,

217
00:13:57,346 --> 00:14:00,646
which means you are fully immersed in the task

218
00:14:00,678 --> 00:14:04,026
of building coding and you don't want to

219
00:14:04,048 --> 00:14:07,402
be disrupted so much because that always sets you back quite

220
00:14:07,456 --> 00:14:11,790
a bit on getting back into that flow state where you're super productive.

221
00:14:12,930 --> 00:14:16,794
So that's the summarize of these three things. So feedback

222
00:14:16,842 --> 00:14:20,586
loops, cognitive load and flow

223
00:14:20,618 --> 00:14:24,622
state. And what I really like about this framework

224
00:14:24,686 --> 00:14:28,542
is that essentially it's very user centric,

225
00:14:28,606 --> 00:14:32,254
right? It's very customer centric. It's really putting the developer

226
00:14:32,302 --> 00:14:36,214
in the center of all of this and trying to come up with

227
00:14:36,252 --> 00:14:39,730
a more complex description, more comprehensive,

228
00:14:39,890 --> 00:14:43,494
more holistic description of what a developer is and what they

229
00:14:43,532 --> 00:14:48,042
need. And I like this a lot because working

230
00:14:48,096 --> 00:14:51,514
backwards from your customer, putting the customer at the

231
00:14:51,552 --> 00:14:55,190
center, that's really something we love to do at Amazon.

232
00:14:55,270 --> 00:14:58,570
So Jeff Bezos, our founder,

233
00:14:58,910 --> 00:15:02,298
famously said, well, being customer centric

234
00:15:02,394 --> 00:15:05,806
is an amazing approach because one

235
00:15:05,828 --> 00:15:10,986
of the biggest benefits is that customers are always beautifully,

236
00:15:11,098 --> 00:15:14,402
wonderfully dissatisfied, even when they report

237
00:15:14,536 --> 00:15:17,986
that they are happy and the business is great.

238
00:15:18,168 --> 00:15:21,682
So for us, the idea

239
00:15:21,736 --> 00:15:25,022
of the devex framework really hits home,

240
00:15:25,096 --> 00:15:28,614
right? Because it helps us to really put that customer,

241
00:15:28,732 --> 00:15:32,774
which in this case is the developer, in the center,

242
00:15:32,972 --> 00:15:37,234
and work backwards from their needs and the friction

243
00:15:37,282 --> 00:15:39,900
they experience in their day to day work.

244
00:15:40,350 --> 00:15:44,230
So what does working backwards mean? So at Amazon,

245
00:15:44,390 --> 00:15:47,594
this is a whole process we use for almost

246
00:15:47,712 --> 00:15:51,438
anything. And it starts with asking

247
00:15:51,524 --> 00:15:55,214
five customer questions. Who's the customer?

248
00:15:55,412 --> 00:15:59,760
What insights do we have about them? What's the prevailing customer problem?

249
00:16:00,530 --> 00:16:03,620
What's the solution and the benefit for the customer?

250
00:16:04,470 --> 00:16:07,826
How do we describe that solution and that experience

251
00:16:07,928 --> 00:16:11,780
to the customer, and how do we test it and measure success?

252
00:16:12,390 --> 00:16:15,954
And the outcome of that is that we write a

253
00:16:15,992 --> 00:16:19,254
press release. We write visuals. We draw

254
00:16:19,292 --> 00:16:23,014
visuals. You can see some of them as an example on the bottom here,

255
00:16:23,052 --> 00:16:26,482
like really scrappy visuals. And we write an FAQ

256
00:16:26,626 --> 00:16:30,634
to further explain what it is

257
00:16:30,672 --> 00:16:34,282
all about, what it is, and also what it is not. And the press

258
00:16:34,336 --> 00:16:38,554
release essentially is

259
00:16:38,592 --> 00:16:41,886
a way to announce this thing that

260
00:16:41,908 --> 00:16:45,630
we're building as a product as it would happen in the future.

261
00:16:45,700 --> 00:16:49,790
So how we envision that product being announced

262
00:16:51,890 --> 00:16:55,394
when it is released in the end. And this

263
00:16:55,432 --> 00:16:59,506
helps us to really put ourselves in the mind of the customer

264
00:16:59,688 --> 00:17:02,990
and think about how they would describe

265
00:17:03,150 --> 00:17:06,914
the new product. So there's even like quotes

266
00:17:06,962 --> 00:17:10,774
in there, like fictional quotes from customers saying what they like about the

267
00:17:10,812 --> 00:17:12,920
product and how it helped them.

268
00:17:13,770 --> 00:17:17,042
Now this is, let's say very generic

269
00:17:17,106 --> 00:17:20,794
process. So how can we use

270
00:17:20,992 --> 00:17:24,938
that generic process and use it for platform

271
00:17:25,024 --> 00:17:28,694
engineering? Well, we can refine it by the devex

272
00:17:28,742 --> 00:17:32,414
framework we just introduced. So in this

273
00:17:32,452 --> 00:17:36,606
case, the customers we want to ask to figure out

274
00:17:36,708 --> 00:17:40,030
what's the problem, where are they? These are the developers.

275
00:17:40,450 --> 00:17:44,354
And we now have a framework to put ourselves into

276
00:17:44,392 --> 00:17:48,034
the shoes of a developer to really ask the

277
00:17:48,072 --> 00:17:51,762
right questions. And you see on the right,

278
00:17:51,816 --> 00:17:55,246
again from the paper how this could

279
00:17:55,288 --> 00:17:58,434
look like. So essentially it's

280
00:17:58,562 --> 00:18:02,246
made of like three layers. And really the

281
00:18:02,268 --> 00:18:05,890
first layer, the perception layer, you see at the top of the table,

282
00:18:05,970 --> 00:18:09,522
like the top row, that's really where it all starts.

283
00:18:09,586 --> 00:18:13,498
And that row really helps you in that working backwards process

284
00:18:13,584 --> 00:18:16,714
I just described. So this is at the very beginning when you

285
00:18:16,752 --> 00:18:19,260
ask your developers, okay, what are your problems?

286
00:18:20,350 --> 00:18:23,870
Where do you feel frictions? This is where you can come in

287
00:18:23,940 --> 00:18:27,854
with these perceptional questions. And this can be done

288
00:18:27,892 --> 00:18:30,746
as a developer experience survey.

289
00:18:30,858 --> 00:18:34,558
But any survey can also be used to be an interview.

290
00:18:34,654 --> 00:18:38,130
So this could be a way to interview users

291
00:18:38,550 --> 00:18:42,020
to figure out, okay, what are their problems right now.

292
00:18:42,550 --> 00:18:44,930
Now here are some examples.

293
00:18:45,770 --> 00:18:49,090
And this is not a comprehensive

294
00:18:49,170 --> 00:18:52,680
list of things you should ask.

295
00:18:54,730 --> 00:18:58,246
You should come up with your own list of things to ask, but they

296
00:18:58,268 --> 00:19:01,946
should basically touch those three pillars we talked about before.

297
00:19:02,048 --> 00:19:04,842
So for feedback loops you might ask,

298
00:19:04,896 --> 00:19:08,282
hey, are you satisfied with the time it takes

299
00:19:08,336 --> 00:19:11,966
to validate a local change? When you start starting your

300
00:19:11,988 --> 00:19:15,802
branch, starting your feature about your cognitive

301
00:19:15,866 --> 00:19:19,726
load, how easy is it for you to debug a production system?

302
00:19:19,908 --> 00:19:23,678
What kind of friction are you experiencing there? And finally,

303
00:19:23,844 --> 00:19:27,810
are you able to go into flow state? Maybe you ask how long someone

304
00:19:27,880 --> 00:19:31,314
can go into flow state and what is actually keeping you from going into

305
00:19:31,352 --> 00:19:35,034
flow state. So this is all how it starts

306
00:19:35,102 --> 00:19:39,106
and how you can kick off this working backwards

307
00:19:39,298 --> 00:19:43,814
process to come to a better platform for

308
00:19:43,852 --> 00:19:47,186
your developers. But then there's

309
00:19:47,218 --> 00:19:50,666
also two additional layers that are very important here that

310
00:19:50,688 --> 00:19:53,894
you can see on the table,

311
00:19:54,022 --> 00:19:56,490
which is the workflows and the KPIs.

312
00:19:56,990 --> 00:20:00,894
And the workflows are basically a

313
00:20:00,932 --> 00:20:05,002
way to, let's say ground

314
00:20:05,066 --> 00:20:08,334
the perceptions that you got from developers in the first

315
00:20:08,372 --> 00:20:11,658
place. So these workflows,

316
00:20:11,754 --> 00:20:15,650
workflow metrics, they try to be objective measures on how

317
00:20:15,720 --> 00:20:19,778
developers are doing. And you could say that

318
00:20:19,864 --> 00:20:22,980
they are helping you to figure out what good looks like.

319
00:20:23,510 --> 00:20:27,286
Are in general developers on the right track? Are they

320
00:20:27,308 --> 00:20:31,750
working on the right things? So for example, code review, turnaround time,

321
00:20:31,900 --> 00:20:35,430
is it low? What's the overall time

322
00:20:35,500 --> 00:20:39,098
it takes to get a change to production and so on. So are

323
00:20:39,104 --> 00:20:43,290
you already working towards

324
00:20:43,360 --> 00:20:47,578
improving the overall workflows or

325
00:20:47,664 --> 00:20:50,880
are developers essentially, let's say,

326
00:20:51,650 --> 00:20:54,970
have they settled in their misery

327
00:20:55,130 --> 00:20:59,070
a little bit and feel that things are fine, when really

328
00:20:59,220 --> 00:21:02,654
there's still a lot of room to improve and

329
00:21:02,692 --> 00:21:06,466
streamline the development workflows. So it basically

330
00:21:06,568 --> 00:21:10,334
just gives you a way to better relate to the perceptions

331
00:21:10,462 --> 00:21:14,434
you got in the first place from the developers. And then finally there

332
00:21:14,472 --> 00:21:17,738
are KPIs. And those KPIs really try to capture

333
00:21:17,774 --> 00:21:21,766
the envelope of all of this. So you

334
00:21:21,788 --> 00:21:25,302
want to make sure that you also keep the bigger picture in mind.

335
00:21:25,436 --> 00:21:28,826
And to do this, you have some higher level KPIs and you

336
00:21:28,848 --> 00:21:32,486
want to measure those as well as your North Star metrics,

337
00:21:32,518 --> 00:21:36,358
right? So things like the overall perceived ease

338
00:21:36,534 --> 00:21:40,074
of delivering software, this can encompass all

339
00:21:40,112 --> 00:21:43,614
the things we talked about before. And you want

340
00:21:43,652 --> 00:21:47,722
to continuously measure this as well to see that, okay, the various

341
00:21:47,786 --> 00:21:51,502
changes at various points that I'm making are still all

342
00:21:51,556 --> 00:21:55,486
contributing to a better way,

343
00:21:55,588 --> 00:21:59,214
to a more frictionless way of delivering software. It's not

344
00:21:59,252 --> 00:22:02,766
like some changes actually reduce that score and

345
00:22:02,868 --> 00:22:06,646
I'm running in the wrong direction. To sum it all up

346
00:22:06,828 --> 00:22:10,770
here, you can see how the overall process of working backwards

347
00:22:10,850 --> 00:22:14,438
from your developers with the Devx framework could look like.

348
00:22:14,524 --> 00:22:17,800
So there are multiple phases you are

349
00:22:18,110 --> 00:22:22,182
walking through to in the end come to a minimum lovable

350
00:22:22,246 --> 00:22:25,914
product. So in the initial phase you

351
00:22:25,952 --> 00:22:29,354
align internally, you learn

352
00:22:29,392 --> 00:22:31,760
about developer productivity and experience.

353
00:22:32,610 --> 00:22:36,186
You're basically agreeing that this is the core

354
00:22:36,218 --> 00:22:39,774
goal of what you're trying to achieve and improve. And you

355
00:22:39,812 --> 00:22:43,486
set your general innovation priorities and plans for

356
00:22:43,508 --> 00:22:46,626
the future. And from there you're starting to listen.

357
00:22:46,728 --> 00:22:50,082
So you're asking, who are actually my developers and

358
00:22:50,136 --> 00:22:53,714
what insights do we have about them? And this is where you

359
00:22:53,752 --> 00:22:56,950
start to use the devex framework to ask

360
00:22:57,020 --> 00:23:00,134
the right questions about your developers because, you know,

361
00:23:00,252 --> 00:23:03,830
we should ask them about the feedback loops,

362
00:23:04,410 --> 00:23:08,314
about flow state and

363
00:23:08,352 --> 00:23:12,154
we should ask them about cognitive load. And once

364
00:23:12,192 --> 00:23:15,402
you did that, and there are various ways to do it, right,

365
00:23:15,456 --> 00:23:17,290
surveys, interviews,

366
00:23:17,870 --> 00:23:21,386
picking a bunch of teams,

367
00:23:21,578 --> 00:23:25,434
working with the senior developers of those teams,

368
00:23:25,482 --> 00:23:28,560
have them as a representative voice of your customers.

369
00:23:29,570 --> 00:23:33,026
Once you did that, you figure, but what is

370
00:23:33,048 --> 00:23:36,402
the prevailing developer productivity impediment like?

371
00:23:36,456 --> 00:23:40,210
What is a common theme thats

372
00:23:40,280 --> 00:23:44,002
you find in all these conversations you have with your customers,

373
00:23:44,136 --> 00:23:48,126
with your developers and that you set out to improve?

374
00:23:48,318 --> 00:23:51,862
So then you go into the invent phase and you actually think about okay,

375
00:23:51,996 --> 00:23:55,574
what is the solution to that problem and

376
00:23:55,612 --> 00:23:58,854
what is the most important benefit when we implemented

377
00:23:58,902 --> 00:24:02,330
that? And then you refine it and you wonder, okay,

378
00:24:02,480 --> 00:24:06,954
now I have an idea. How can I describe thats solution to

379
00:24:06,992 --> 00:24:10,278
the developers and discuss with them if that's

380
00:24:10,294 --> 00:24:13,822
the right experience? Right? So again, you can circle back

381
00:24:13,876 --> 00:24:17,822
to your customers and say, hey, thats is my idea of how it could work.

382
00:24:17,956 --> 00:24:21,262
What do you think about that? And then you started to test

383
00:24:21,316 --> 00:24:25,540
and iterate this solution with your developers. So you try to do

384
00:24:26,390 --> 00:24:29,490
this small minimum lovable product

385
00:24:29,560 --> 00:24:33,234
that you just scoped and you prototype it and you try it out

386
00:24:33,272 --> 00:24:36,374
with some of your developers and iterate a little

387
00:24:36,412 --> 00:24:40,162
bit more and then you're ready to launch that MLP

388
00:24:40,226 --> 00:24:44,502
at a larger scale. And this

389
00:24:44,556 --> 00:24:48,074
process basically helps you to think

390
00:24:48,112 --> 00:24:50,954
less about infrastructure, less,

391
00:24:51,072 --> 00:24:55,034
starting with, oh, we have this technology that

392
00:24:55,072 --> 00:24:59,018
we want to bring to developers, but start actually with a developer instead

393
00:24:59,104 --> 00:25:02,734
and then figure out, okay, what kind of technology, what kind of services,

394
00:25:02,852 --> 00:25:06,366
what kind of products do we need to

395
00:25:06,388 --> 00:25:09,520
mitigate their problems, to solve their problems?

396
00:25:10,210 --> 00:25:13,474
So to sum it all up, we are asking you

397
00:25:13,512 --> 00:25:16,260
to spend your resources on the right things.

398
00:25:17,590 --> 00:25:20,782
We want you to think about developer productivity

399
00:25:20,846 --> 00:25:24,226
first and then work backwards from your customers, which are the

400
00:25:24,248 --> 00:25:27,350
developers. And to do that,

401
00:25:27,500 --> 00:25:31,254
we talked about one very cool tool that can help

402
00:25:31,292 --> 00:25:35,030
you, which is the Devex framework, which really helps you to understand

403
00:25:35,100 --> 00:25:39,450
your developers and the factors that impede their productivity.

404
00:25:40,030 --> 00:25:44,026
What it also does is help

405
00:25:44,128 --> 00:25:47,542
platform teams adopt the improvement of Devex

406
00:25:47,606 --> 00:25:51,310
AWS, their core identity. So instead of being

407
00:25:51,460 --> 00:25:53,120
the Kubernetes team,

408
00:25:54,290 --> 00:25:58,126
most of the people are more thinking about, okay, my job is to

409
00:25:58,148 --> 00:26:02,062
improve developer experience. Developer productivity with

410
00:26:02,116 --> 00:26:05,140
whatever tool is the right tool and tools might change.

411
00:26:05,590 --> 00:26:08,894
And that really helps you to stay flexible

412
00:26:08,942 --> 00:26:12,834
for the future and also keep your stack, keep your

413
00:26:12,872 --> 00:26:16,326
portfolio of services lean, because at some point you

414
00:26:16,348 --> 00:26:19,894
will need to basically shut down some

415
00:26:19,932 --> 00:26:22,982
of them so that your portfolio isn't ever

416
00:26:23,036 --> 00:26:26,658
growing. And finally, when you're working backwards,

417
00:26:26,754 --> 00:26:31,062
when you're doing a kind of this process that I described for working backwards

418
00:26:31,206 --> 00:26:35,002
and you're doing it with Devex, it actually opens up many

419
00:26:35,056 --> 00:26:38,438
different solutions to remove impediments.

420
00:26:38,534 --> 00:26:42,470
And it could be as simple as, oh, there's not enough documentation,

421
00:26:42,550 --> 00:26:46,160
a simple Wikipage would actually help developers get started

422
00:26:46,530 --> 00:26:49,886
or a we don't need to run so many services,

423
00:26:50,068 --> 00:26:53,646
we are using the cloud and we have most of the services we need

424
00:26:53,668 --> 00:26:57,634
in cloud, but we need a bunch of infrastructure as code

425
00:26:57,672 --> 00:27:01,122
templates to make it easy to get going. And we need to

426
00:27:01,256 --> 00:27:04,580
document them well so developers know what's going on

427
00:27:04,890 --> 00:27:08,440
in those templates. And then finally you might also

428
00:27:08,810 --> 00:27:12,930
have the bandwidth to actually think about things like geni

429
00:27:13,010 --> 00:27:17,030
companions, which also help developers to

430
00:27:17,100 --> 00:27:20,394
simplify their jobs. Thinking in these

431
00:27:20,432 --> 00:27:24,362
terms of developer experience, sometimes the right

432
00:27:24,416 --> 00:27:28,662
thing to do for developers can be really cheap, really scrappy,

433
00:27:28,726 --> 00:27:32,720
and that is really a good thing. And at the same time

434
00:27:33,970 --> 00:27:37,710
you also unlock the capacity

435
00:27:38,050 --> 00:27:42,122
to evaluate and integrate new ways to reduce cognitive

436
00:27:42,186 --> 00:27:45,998
load for developers, like for example those geni

437
00:27:46,094 --> 00:27:49,774
companions. And sticking with geni companions

438
00:27:49,822 --> 00:27:53,314
here for a second, that's where I

439
00:27:53,352 --> 00:27:57,134
will hand over to Christian, and Christian will give us a glimpse

440
00:27:57,182 --> 00:28:01,142
into the future of those geni companions for

441
00:28:01,196 --> 00:28:04,694
developers and what you will be able

442
00:28:04,732 --> 00:28:08,234
to do with them. So let's talk about that.

443
00:28:08,432 --> 00:28:11,942
Thank you Robert. Let's talk about productivity and generative

444
00:28:12,006 --> 00:28:15,834
AI. Let's jump right into it. So thats

445
00:28:15,872 --> 00:28:19,900
study of McKinsey shows that 75% of

446
00:28:20,430 --> 00:28:24,074
the global annual estimated gen AI impact stems

447
00:28:24,122 --> 00:28:26,958
from just four functions. And this is marketing and sales,

448
00:28:27,044 --> 00:28:31,114
product and R and D, customer operations and software engineering.

449
00:28:31,162 --> 00:28:34,820
And that really stands out for me because if you add those up,

450
00:28:35,190 --> 00:28:38,078
you will be adding them up to 900 billion.

451
00:28:38,174 --> 00:28:41,730
That's a lot. So how is thats tied to developer productivity?

452
00:28:42,230 --> 00:28:45,686
To answer that question, let's first briefly discuss how

453
00:28:45,708 --> 00:28:49,574
to measure developer productivity. So the most

454
00:28:49,612 --> 00:28:53,266
popular framework is Dora. They are focusing

455
00:28:53,298 --> 00:28:57,094
on deployment, frequency change, lead time change, failure rate and time

456
00:28:57,132 --> 00:29:01,462
to restore a service. A more recent one is framework

457
00:29:01,526 --> 00:29:05,174
is called space. And they take into account that development

458
00:29:05,222 --> 00:29:08,842
actually is a very socio technological process.

459
00:29:08,976 --> 00:29:12,998
And they double down on the social aspect,

460
00:29:13,094 --> 00:29:16,522
adding satisfaction and wellbeing, communication, collaboration,

461
00:29:16,586 --> 00:29:20,030
efficiencies and flow as additional metrics.

462
00:29:20,370 --> 00:29:24,126
And the last one is developer experience. So they aim to increase the flow

463
00:29:24,158 --> 00:29:27,326
state, reduce the cognitive load and shorten feedback

464
00:29:27,358 --> 00:29:31,122
loops. Genai in general will change a lot on

465
00:29:31,176 --> 00:29:34,718
what we measure and how we measure developer productivity

466
00:29:34,894 --> 00:29:38,134
and activity. And output based metrics will

467
00:29:38,172 --> 00:29:40,520
get even less useful than they are today.

468
00:29:41,210 --> 00:29:44,786
But what will hold true is the mental

469
00:29:44,818 --> 00:29:48,506
model between or behind space and defects. And that

470
00:29:48,528 --> 00:29:52,346
is there is no single dimension capturing productivity. You will

471
00:29:52,368 --> 00:29:56,202
have to combine quantitative data from your telemetry with

472
00:29:56,256 --> 00:30:00,250
qualitative data like surveys. So actually talking to your developers,

473
00:30:00,690 --> 00:30:04,478
and the last point coming from Devex basically

474
00:30:04,564 --> 00:30:08,046
is developer experience may just be the

475
00:30:08,068 --> 00:30:11,834
best proxy metric to actually measure and improve developer

476
00:30:11,882 --> 00:30:15,218
productivity. So there's one more study I want to

477
00:30:15,224 --> 00:30:18,866
show from Harvard Business Review, and this is not development specific, this is

478
00:30:18,888 --> 00:30:22,900
holding true for every employee. Study found that

479
00:30:23,510 --> 00:30:27,166
employees are more engaged and more likely to stay

480
00:30:27,208 --> 00:30:31,240
beyond three years if they have the right technology supporting their work.

481
00:30:31,850 --> 00:30:35,240
While there are a lot of possibilities for having the right technology.

482
00:30:35,690 --> 00:30:39,430
This talk is focusing on Genai because it's truly transformational,

483
00:30:39,510 --> 00:30:43,814
especially for developer experience. And another McKinsey

484
00:30:43,862 --> 00:30:48,134
study shows that it basically states that developers

485
00:30:48,182 --> 00:30:51,414
using Genai are on average significantly

486
00:30:51,462 --> 00:30:55,022
more happy, more focusing on meaningful work, leading to more

487
00:30:55,076 --> 00:30:58,494
satisfaction doing the work, and they are also more

488
00:30:58,532 --> 00:31:01,998
often and longer in a flow state. So enough of all

489
00:31:02,004 --> 00:31:04,660
that studies. Now let's dive into it.

490
00:31:05,350 --> 00:31:08,926
The first use case everybody knows coding companions.

491
00:31:09,038 --> 00:31:12,718
They translate natural language to multiple code suggestions and they're

492
00:31:12,734 --> 00:31:16,562
matching your development style, your patterns. They maybe know your internal code

493
00:31:16,616 --> 00:31:20,006
repos right, and reuse your internal interfaces, methods and

494
00:31:20,028 --> 00:31:24,546
tools. They can also provide security scanning

495
00:31:24,658 --> 00:31:28,202
or even open source reference tracking, telling you when their

496
00:31:28,256 --> 00:31:31,626
code suggestions are coming from open source code so that

497
00:31:31,648 --> 00:31:34,490
you can attribute the licensing correctly.

498
00:31:34,830 --> 00:31:38,774
But my observation is that in german enterprises,

499
00:31:38,902 --> 00:31:42,782
the adoption rate is very, very low. I couldn't find any

500
00:31:42,836 --> 00:31:46,106
study. If I would need to guesstimate,

501
00:31:46,218 --> 00:31:49,934
I would say the adoption rate is less than 20% for

502
00:31:49,972 --> 00:31:53,600
various reasons. And that means there's a lot of opportunity.

503
00:31:54,610 --> 00:31:58,814
If you use a coding companion, you're more likely to complete the task successfully

504
00:31:58,942 --> 00:32:02,210
and you do so on an average of 57% faster.

505
00:32:02,870 --> 00:32:06,546
But if you think about Devex and space, there must

506
00:32:06,568 --> 00:32:09,080
be more, right? And yes, there is more.

507
00:32:09,850 --> 00:32:13,858
Developers using a coding companion are on average feeling more productive,

508
00:32:13,954 --> 00:32:17,774
spend less time searching, are more in the flow, and therefore have overall

509
00:32:17,842 --> 00:32:21,386
higher job satisfaction. So coding companions are a

510
00:32:21,408 --> 00:32:24,746
great first gen AI tool to improve developer experience and

511
00:32:24,768 --> 00:32:27,814
therefore developer productivity. The typical

512
00:32:27,862 --> 00:32:31,358
developer only spends 4 hours and 21 minutes

513
00:32:31,444 --> 00:32:34,160
coding, and that's per week.

514
00:32:34,530 --> 00:32:38,650
That's 52 minutes per day. While that's the median.

515
00:32:38,810 --> 00:32:42,222
Even if you check the data set in more detail,

516
00:32:42,276 --> 00:32:45,874
you will find that 90% of all developers are coding less

517
00:32:45,912 --> 00:32:51,234
than 2 hours and ten minutes per day. And while that may

518
00:32:51,272 --> 00:32:55,022
sound strange at first, if you think about it, it absolutely makes sense.

519
00:32:55,096 --> 00:32:58,562
Development is much more than coding. And Gartner

520
00:32:58,626 --> 00:33:03,734
basically found developers spend 73%

521
00:33:03,932 --> 00:33:07,682
on running and maintaining apps and only 27%

522
00:33:07,756 --> 00:33:11,322
on innovation and transformation. And let's go

523
00:33:11,456 --> 00:33:15,098
briefly through an example for that.

524
00:33:15,184 --> 00:33:18,698
You use your coding companion. So it's running on a

525
00:33:18,704 --> 00:33:22,362
Kubernetes cluster from your platform team and everything is nice.

526
00:33:22,416 --> 00:33:26,046
But then you encounter an issue. So the application is

527
00:33:26,068 --> 00:33:29,054
not working anymore as you expected. So you need to dive into it, right?

528
00:33:29,092 --> 00:33:32,894
You need to digest logs and metrics and maybe you

529
00:33:32,932 --> 00:33:36,466
find, okay, there are issues related to Kubernetes, then you

530
00:33:36,488 --> 00:33:41,566
need to interface with your platform team or even learn some Kubernetes skills

531
00:33:41,598 --> 00:33:45,266
yourself. So you need to do a lot of understanding and learning. Then you need

532
00:33:45,288 --> 00:33:48,630
to design and decide for a solution. You need to develop

533
00:33:48,700 --> 00:33:52,610
the solution, review it. Maybe you need to improve your monitoring and testing

534
00:33:52,690 --> 00:33:56,614
to increase overall observability and prevent an issue

535
00:33:56,732 --> 00:33:59,926
from occurring in the future. The last step is

536
00:33:59,948 --> 00:34:02,540
you then need to maintain the app.

537
00:34:03,230 --> 00:34:06,582
See, maybe even that happens far too often. And then you decide,

538
00:34:06,646 --> 00:34:10,026
no, I want to move out that shared Kubernetes cluster and want to go

539
00:34:10,048 --> 00:34:13,726
full serverless to reduce maintenance and running an

540
00:34:13,748 --> 00:34:17,342
application. And I have seen a lot of cases where this was a great

541
00:34:17,396 --> 00:34:20,974
idea through the cycle again. Right? You will first to

542
00:34:21,012 --> 00:34:24,526
understand, have to understand and learn. Maybe the

543
00:34:24,548 --> 00:34:28,606
serverless technology decide and design, develop, revue and monitor

544
00:34:28,638 --> 00:34:32,546
and test. So the question is, what can

545
00:34:32,568 --> 00:34:36,642
we do to flip that equation, to actually give the developers

546
00:34:36,706 --> 00:34:40,594
more time on creativity, innovation and transformation,

547
00:34:40,642 --> 00:34:43,746
and less time on running and maintaining applications.

548
00:34:43,858 --> 00:34:47,046
And the answer is coding companion is great, but what you

549
00:34:47,068 --> 00:34:50,934
actually need is a development companion. You need a development

550
00:34:50,982 --> 00:34:54,218
companion who is supporting you across

551
00:34:54,304 --> 00:34:58,166
the whole software development development lifecycle from understanding

552
00:34:58,198 --> 00:35:00,950
and learning, designing, designing, developing, review,

553
00:35:01,040 --> 00:35:04,766
monitoring and testing and maintaining. But let's go through

554
00:35:04,788 --> 00:35:08,480
it bit by bit. We start with understanding and learning.

555
00:35:08,930 --> 00:35:12,158
So the first step you're likely going to

556
00:35:12,164 --> 00:35:14,914
do when you need to implement something new, especially if you're new in a team,

557
00:35:14,952 --> 00:35:18,542
you will dive in the requirements, but also the confluence pages

558
00:35:18,606 --> 00:35:23,406
where like internal documentation about existing

559
00:35:23,438 --> 00:35:27,106
environments, nonfunctional requirements to

560
00:35:27,128 --> 00:35:30,518
get a feeling for what you will have to do. And there's a

561
00:35:30,524 --> 00:35:34,870
lot of understanding and learning to do. The next step is you will design and

562
00:35:34,940 --> 00:35:38,682
decide for an architecture. And there's actually a very cool

563
00:35:38,736 --> 00:35:42,202
concept in the realm of developer experience to

564
00:35:42,256 --> 00:35:45,434
capture the amount of learning you will have to do.

565
00:35:45,472 --> 00:35:48,250
And this is called knowledge discovery efficiency.

566
00:35:48,750 --> 00:35:51,882
In short, KD Ki is calculated

567
00:35:51,946 --> 00:35:56,046
for each developer individually and signifies the knowledge that

568
00:35:56,068 --> 00:35:59,790
the developer is lacking or not lacking to complete a task.

569
00:36:00,130 --> 00:36:04,238
And the score can be between zero and 100.

570
00:36:04,404 --> 00:36:07,618
And if the keydy approach is zero, there's a

571
00:36:07,624 --> 00:36:11,330
lot information missing, basically everything, right? There's a lot of learning to do,

572
00:36:11,400 --> 00:36:16,050
maybe new languages, new tools, new frameworks, new concepts like serverless.

573
00:36:16,710 --> 00:36:20,354
When the key D approaches 100, that signifies

574
00:36:20,402 --> 00:36:24,050
a solution where there is no information gap. Everything is known.

575
00:36:24,130 --> 00:36:27,654
And this likely only holds true if you are like

576
00:36:27,692 --> 00:36:30,838
the almighty all knowing Q from Star Trek,

577
00:36:30,934 --> 00:36:34,202
right? And the question now is,

578
00:36:34,256 --> 00:36:38,070
can Genai help us in this part of the development cycle?

579
00:36:38,150 --> 00:36:41,854
And the answer is yes. So think about you're new

580
00:36:41,892 --> 00:36:44,800
in the team, you want to understand an existing app,

581
00:36:45,490 --> 00:36:49,294
what does it do? Requirements, what use cases are

582
00:36:49,332 --> 00:36:52,878
there? And you ask your development companion to give

583
00:36:52,884 --> 00:36:56,510
you an overview about the app. And it does. So what's the information

584
00:36:56,660 --> 00:37:00,014
source? And the information source is actually your internal

585
00:37:00,062 --> 00:37:03,390
documentation. Also, for the business drivers,

586
00:37:03,550 --> 00:37:07,266
it's nice to know external documentation, but this also knows

587
00:37:07,298 --> 00:37:10,994
all your internal documentation, your internal knowledge bases,

588
00:37:11,042 --> 00:37:15,046
non functional requirements, use cases, whatever you

589
00:37:15,068 --> 00:37:18,614
want to understand. And now you understood the app.

590
00:37:18,732 --> 00:37:22,058
And the next step is you want to start developing. And the

591
00:37:22,064 --> 00:37:25,354
first step is to write a user story. You first would need to

592
00:37:25,392 --> 00:37:29,046
dive into, okay, what is the technical part of the user

593
00:37:29,078 --> 00:37:32,266
story? But a coding companion knows your environment,

594
00:37:32,378 --> 00:37:35,706
it can do so, and it can even create a Jira

595
00:37:35,738 --> 00:37:39,450
task for you. So, right, knowing your internal documentation,

596
00:37:39,530 --> 00:37:43,102
knowing all the technical environments,

597
00:37:43,166 --> 00:37:47,330
even the code of your to do app, the coding companion can

598
00:37:47,400 --> 00:37:51,460
successfully. The development companion can successfully create for you

599
00:37:51,910 --> 00:37:56,162
Jira task with a user story. So it helps you to understand

600
00:37:56,296 --> 00:37:59,906
the requirements and even wrote a user story. The next step would be

601
00:38:00,008 --> 00:38:02,630
to design and design for an architecture.

602
00:38:03,050 --> 00:38:06,726
And I have an idea, but I'm not sure if the services I want

603
00:38:06,748 --> 00:38:10,586
to use are actually allow listed in my company. So I'm not shooting an

604
00:38:10,608 --> 00:38:14,618
email to my cloud center of excellence, but I'm simply asking

605
00:38:14,704 --> 00:38:18,410
my development companion if the services are allow listed.

606
00:38:18,830 --> 00:38:22,318
And let's give him a second. And there we go.

607
00:38:22,404 --> 00:38:25,726
Two are allowed and one is not. Next step might be

608
00:38:25,748 --> 00:38:29,326
I want to know how can I enable that service, right.

609
00:38:29,428 --> 00:38:32,942
It's using my internal database to understand my service

610
00:38:32,996 --> 00:38:36,706
control policies. So I want to request that service because I

611
00:38:36,728 --> 00:38:40,142
want to use it. And there I go. This is the guidance

612
00:38:40,206 --> 00:38:42,740
I need to follow to do exactly that.

613
00:38:43,190 --> 00:38:46,686
What we've seen so far, the development companies

614
00:38:46,718 --> 00:38:50,326
is reducing our cognitive load because we have a one stop shop to

615
00:38:50,348 --> 00:38:53,862
ask questions and get comprehensive answers. This is improving our

616
00:38:53,916 --> 00:38:57,410
flow and also shortening feedback loops, right. Because we need less

617
00:38:57,500 --> 00:39:00,694
interfacing with central

618
00:39:00,742 --> 00:39:04,138
teams. The next steps in development process

619
00:39:04,224 --> 00:39:07,626
would be to develop into review. And in

620
00:39:07,648 --> 00:39:11,466
this steps, you will likely need to understand the code base and

621
00:39:11,488 --> 00:39:15,466
develop new features and have them reviewed. So what the development

622
00:39:15,498 --> 00:39:19,280
companies can do for you is can help you understand the code base.

623
00:39:19,730 --> 00:39:23,306
In this case, I'm asking it to give me a description,

624
00:39:23,338 --> 00:39:27,358
what the app actually does. And there I go. This is all the description telling

625
00:39:27,374 --> 00:39:31,054
me step by step what it does, how it does. So aws the development

626
00:39:31,102 --> 00:39:34,578
companies knows my environment. I can even ask more specific

627
00:39:34,664 --> 00:39:37,806
questions, ask it for improvements,

628
00:39:37,918 --> 00:39:41,926
or even ask which compute instance is the best to run that app or how

629
00:39:41,948 --> 00:39:45,190
I can run that app in a serverless fashion very easily.

630
00:39:45,690 --> 00:39:49,446
Maybe I want to add test cases, my development companion

631
00:39:49,478 --> 00:39:52,554
can help me, but I could also want

632
00:39:52,672 --> 00:39:56,474
to just get a full feature developed by my

633
00:39:56,512 --> 00:39:59,194
companion. And in this case,

634
00:39:59,312 --> 00:40:02,814
I'm just asking my development companion to

635
00:40:02,852 --> 00:40:07,290
implement an additional piece of functionality, add product functionality.

636
00:40:07,450 --> 00:40:10,510
The development companion again knows my environment,

637
00:40:11,090 --> 00:40:14,362
so he knows the code base and he now will

638
00:40:14,436 --> 00:40:18,034
analyze what he needs to do. And there you go.

639
00:40:18,072 --> 00:40:22,034
Right. I get a detailed plan on what

640
00:40:22,072 --> 00:40:25,638
it is going to change and where it's going to change it.

641
00:40:25,804 --> 00:40:29,426
Thats looks all quite good. And it's even adding

642
00:40:29,458 --> 00:40:32,742
tests. Okay, that's great. So I get a step

643
00:40:32,796 --> 00:40:36,054
by step approach and the next step is,

644
00:40:36,092 --> 00:40:39,080
okay, I click on the smart action button.

645
00:40:39,690 --> 00:40:43,100
It takes a while, a little bit longer than what you've seen just here.

646
00:40:43,470 --> 00:40:47,146
And there I go, I get the results in the files and

647
00:40:47,168 --> 00:40:51,114
the next step is of course to compare them and to

648
00:40:51,152 --> 00:40:54,846
check do I like the changes or do I need to ask for

649
00:40:54,868 --> 00:40:58,394
another round of improvement. And you can do that in a conversational

650
00:40:58,522 --> 00:41:01,982
chat with your development companion. Yes,

651
00:41:02,036 --> 00:41:05,102
I also like those changes. It's easily

652
00:41:05,166 --> 00:41:09,010
visible which changes have been done and there are even test cases added.

653
00:41:09,350 --> 00:41:11,410
Yes, there are the test cases.

654
00:41:12,230 --> 00:41:16,206
Okay, great. The next step is monitoring

655
00:41:16,238 --> 00:41:19,558
and testing. There are a lot of memes out there telling thats

656
00:41:19,724 --> 00:41:23,720
troubleshooting is actually 90% of what developers do.

657
00:41:24,090 --> 00:41:27,800
I couldn't find any data proving that, but I absolutely

658
00:41:28,190 --> 00:41:32,458
believe that it sometimes feels like that. So a very important

659
00:41:32,624 --> 00:41:36,374
thing a development companion could do is actually help you troubleshoot

660
00:41:36,422 --> 00:41:39,962
stuff to go faster back to developing instead

661
00:41:40,016 --> 00:41:43,582
of fixing bugs. And this video basically shows,

662
00:41:43,636 --> 00:41:46,894
okay, I have an app, I test something and as

663
00:41:46,932 --> 00:41:50,494
usual, first test always fails. But there's a button, hey,

664
00:41:50,532 --> 00:41:53,954
help me fix it. There's a lengthy text telling what is

665
00:41:53,992 --> 00:41:56,340
wrong. And there is an answer,

666
00:41:57,110 --> 00:42:00,146
short comprehensive answer telling me, okay, something with

667
00:42:00,168 --> 00:42:03,534
the permissions that helps me from this lengthy,

668
00:42:03,582 --> 00:42:06,662
complex task to a lot smaller one,

669
00:42:06,796 --> 00:42:10,326
easier, understandable one. And I now ask, okay, how can

670
00:42:10,348 --> 00:42:14,120
I resolve that issue? Takes a short time.

671
00:42:14,970 --> 00:42:19,314
And what I will get is a step by step approach

672
00:42:19,362 --> 00:42:23,366
on how I could solve that. And again, there's a smart button telling

673
00:42:23,398 --> 00:42:26,700
me, okay, generate a CLI command for me to do that.

674
00:42:27,150 --> 00:42:30,862
Maybe I don't want to navigate the console. So let's fix it by just

675
00:42:30,916 --> 00:42:33,630
using CLI command.

676
00:42:34,130 --> 00:42:37,674
Again, it takes a few seconds. And there's the CLI command,

677
00:42:37,722 --> 00:42:42,186
I can copy it and I'm good. This is shortening feedback

678
00:42:42,218 --> 00:42:46,302
loop significantly and it's also reducing my cognitive

679
00:42:46,366 --> 00:42:49,858
load. I don't have to fix everything myself,

680
00:42:49,944 --> 00:42:53,780
I don't have to use stack overflow all the time to sort out stuff.

681
00:42:54,230 --> 00:42:57,826
But my development companion is actually helping me here. Shorter feedback

682
00:42:57,858 --> 00:43:01,640
loops reduced cognitive load and improved the flow time.

683
00:43:02,010 --> 00:43:05,526
The last part of the software development lifecycle is

684
00:43:05,548 --> 00:43:09,414
maintaining apps, and this is, I guess, the part which is not

685
00:43:09,452 --> 00:43:12,650
liked the most by most developers. Right? Let's think. You move

686
00:43:12,720 --> 00:43:16,394
into a new project and it's good old Java seven code

687
00:43:16,432 --> 00:43:20,220
and you need to upgrade and maintain it.

688
00:43:20,590 --> 00:43:24,010
So luckily the development companies can help you with that.

689
00:43:24,160 --> 00:43:27,214
So what it does, it first copies all your code

690
00:43:27,332 --> 00:43:30,734
into a managed and secure build environment, and then

691
00:43:30,772 --> 00:43:34,498
it uses static rules to create a

692
00:43:34,504 --> 00:43:38,194
detailed transformation plan on how to upgrade your code

693
00:43:38,392 --> 00:43:41,842
and it will use very advanced large

694
00:43:41,896 --> 00:43:45,170
language models. Fix every issue

695
00:43:45,240 --> 00:43:48,534
occurring during that process, and fix the gaps which are not addressed by

696
00:43:48,572 --> 00:43:51,894
static rules to actually upgrade your code. The last

697
00:43:51,932 --> 00:43:55,366
step is then you can check the code changes once the

698
00:43:55,388 --> 00:43:58,540
job is done right. And this is helping you a lot.

699
00:43:59,150 --> 00:44:03,834
Frugal with your time and focus again on not

700
00:44:03,952 --> 00:44:07,766
translating old code to new code, but actually building new features.

701
00:44:07,958 --> 00:44:12,014
To sum everything up, developer experience is

702
00:44:12,052 --> 00:44:15,230
likely the best proxy for developer productivity.

703
00:44:15,970 --> 00:44:19,150
We've heard in Robert's talk, and also in my talk,

704
00:44:19,220 --> 00:44:22,298
that tools can help you to improve devex,

705
00:44:22,394 --> 00:44:25,822
but you have to work backwards from your customers. The actual developers.

706
00:44:25,886 --> 00:44:29,220
Think about feedback loops, cognitive load and flow time.

707
00:44:29,670 --> 00:44:32,766
Platforms may provide a great abstraction,

708
00:44:32,958 --> 00:44:36,918
but those abstractions can be illusions. When they break,

709
00:44:37,004 --> 00:44:41,400
then you will notice. And a solution approach to that is

710
00:44:41,850 --> 00:44:45,266
to not have a coding companion, but a development companion

711
00:44:45,378 --> 00:44:49,126
who can help you throughout the whole software development lifecycle for

712
00:44:49,148 --> 00:44:52,374
an understanding internal documentation and large code

713
00:44:52,412 --> 00:44:56,802
bases developing code or even whole features testing,

714
00:44:56,866 --> 00:45:00,682
especially troubleshooting, updating from old versions and old languages

715
00:45:00,746 --> 00:45:04,666
to new ones, and by having an always available mentor whom

716
00:45:04,698 --> 00:45:07,280
you can ask everything and who knows stuff.

717
00:45:07,890 --> 00:45:11,694
So the idea is actually spend less time building the

718
00:45:11,732 --> 00:45:16,186
perfect abstraction. Instead have a development companies explaining

719
00:45:16,218 --> 00:45:18,300
it to you. Thank you for listening in.

