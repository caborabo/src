1
00:00:27,120 --> 00:00:30,380
Hello everybody. A warm welcome to

2
00:00:30,412 --> 00:00:34,228
my talk here today titled Forecasting Time series

3
00:00:34,316 --> 00:00:37,344
with polars and Dino. Yeah,

4
00:00:39,484 --> 00:00:42,876
about myself. So I have

5
00:00:42,900 --> 00:00:46,180
a background in computer science,

6
00:00:46,332 --> 00:00:49,788
software engineering, and I

7
00:00:49,876 --> 00:00:54,064
currently lead data science team for Infinity AI.

8
00:00:54,634 --> 00:00:58,890
We do mostly stuff with time series data and time series

9
00:00:59,002 --> 00:01:00,054
forecasting.

10
00:01:03,034 --> 00:01:07,914
Let's start our talk with plan

11
00:01:08,034 --> 00:01:11,054
and few takeaways for this talk.

12
00:01:12,314 --> 00:01:15,706
So I'm going to start with the story just to show

13
00:01:15,730 --> 00:01:21,318
you an example of practical time

14
00:01:21,366 --> 00:01:24,514
series analysis problem.

15
00:01:25,534 --> 00:01:29,262
And this way I'll try to introduce

16
00:01:29,318 --> 00:01:32,622
you into the

17
00:01:32,758 --> 00:01:36,838
matter how I even started thinking

18
00:01:36,886 --> 00:01:40,914
about WASM and using WASM for machine learning

19
00:01:41,614 --> 00:01:44,958
ops. Then I'm going to present you

20
00:01:45,006 --> 00:01:48,380
something which I think is also useful,

21
00:01:48,492 --> 00:01:52,492
which is a daily pattern model. I'm going to

22
00:01:52,508 --> 00:01:54,584
use it just to.

23
00:01:55,724 --> 00:01:59,524
As an example of something not too complicated

24
00:01:59,684 --> 00:02:03,584
that is easy to implement in rust and

25
00:02:03,884 --> 00:02:07,212
that I used for experiment that

26
00:02:07,268 --> 00:02:09,704
I'm going to also show you.

27
00:02:10,444 --> 00:02:15,526
And for this experiment I used technology

28
00:02:15,670 --> 00:02:21,062
that is going

29
00:02:21,078 --> 00:02:23,754
to be presented as a last point. So,

30
00:02:25,254 --> 00:02:26,034
yeah,

31
00:02:31,254 --> 00:02:35,354
so let's start with the story. So the story is

32
00:02:36,534 --> 00:02:38,674
about city, city in Canada,

33
00:02:41,924 --> 00:02:45,780
city called York. And imagine

34
00:02:45,812 --> 00:02:49,868
that you are an engineer or water engineer,

35
00:02:49,916 --> 00:02:53,636
and you work for the city. You collect the

36
00:02:53,660 --> 00:02:56,984
data in different locations all around the city,

37
00:02:57,444 --> 00:03:00,984
and the data from sensors.

38
00:03:01,524 --> 00:03:06,540
And what you are looking for is water

39
00:03:06,652 --> 00:03:10,716
related sensors. So you would

40
00:03:10,740 --> 00:03:14,196
like to know the level in the pipe

41
00:03:14,260 --> 00:03:19,184
and velocity, also temperature and

42
00:03:19,484 --> 00:03:22,744
other environmental variables.

43
00:03:24,124 --> 00:03:29,420
The problem that you need to solve is the

44
00:03:29,452 --> 00:03:32,872
fact that there

45
00:03:32,888 --> 00:03:37,224
are quality issues with the data. So for some reason

46
00:03:37,384 --> 00:03:39,884
there might be sensor malfunctioning,

47
00:03:40,624 --> 00:03:44,124
maybe battery goes down, maybe there is an x

48
00:03:46,024 --> 00:03:48,964
spike in temperature,

49
00:03:50,584 --> 00:03:57,348
maybe there might be other

50
00:03:57,396 --> 00:04:00,344
things going on related to data quality.

51
00:04:00,884 --> 00:04:05,044
And yeah, what you would like to do, you would like to detect those changes

52
00:04:05,084 --> 00:04:07,344
and hopefully fix them.

53
00:04:09,804 --> 00:04:14,228
Imagine that you are very good data scientist and

54
00:04:14,396 --> 00:04:18,384
you found a perfect solution, found a very good model for that.

55
00:04:19,084 --> 00:04:24,018
Just for simplicity's sake, let's assume that this

56
00:04:24,066 --> 00:04:26,534
perfect solution is a linear function.

57
00:04:27,634 --> 00:04:33,602
And yeah, that's what I show

58
00:04:33,658 --> 00:04:37,626
here. You have three different models, three different lines with

59
00:04:37,650 --> 00:04:41,578
different slopes. And what

60
00:04:41,626 --> 00:04:45,274
makes this problem complicated, assuming the

61
00:04:45,314 --> 00:04:48,894
solution is simply it's linear relationship,

62
00:04:49,484 --> 00:04:53,628
you can model that and you know, we can fairly

63
00:04:53,676 --> 00:04:58,044
easily find the slope. But what

64
00:04:58,084 --> 00:05:01,908
makes it very special is

65
00:05:01,996 --> 00:05:07,588
actually time series related issues.

66
00:05:07,676 --> 00:05:10,668
So for time series data,

67
00:05:10,836 --> 00:05:14,924
we're gonna have autocorrelation. So especially for

68
00:05:15,044 --> 00:05:19,282
sensor data, one observation

69
00:05:19,338 --> 00:05:22,454
is strongly dependent on the previous ones,

70
00:05:23,074 --> 00:05:27,394
also seasonality, especially if we have environmental

71
00:05:27,474 --> 00:05:29,734
variables like temperature.

72
00:05:33,874 --> 00:05:37,562
But also water related

73
00:05:37,698 --> 00:05:41,090
variables are strongly seasonal because, you know,

74
00:05:41,122 --> 00:05:44,674
the consumption different in different

75
00:05:45,654 --> 00:05:49,494
parts of the day of the month and across the

76
00:05:49,534 --> 00:05:53,886
year. So it looks like instead

77
00:05:53,910 --> 00:05:57,406
of one model fitted

78
00:05:57,470 --> 00:06:00,590
once, like for

79
00:06:00,662 --> 00:06:04,234
other machine learning problems, like for instance

80
00:06:05,094 --> 00:06:08,858
that you can solve with neural net, you fit

81
00:06:08,906 --> 00:06:13,674
neural net ones and you just get predictions from

82
00:06:13,714 --> 00:06:16,850
this one, from this model deployed

83
00:06:16,882 --> 00:06:20,374
once. And here you're going to end up with

84
00:06:21,034 --> 00:06:24,802
several models. Like for each location we're going to have

85
00:06:24,978 --> 00:06:28,394
actually different model because you

86
00:06:28,434 --> 00:06:32,294
need to feed them with different data and thus you're going to

87
00:06:34,574 --> 00:06:36,754
model different slope.

88
00:06:38,694 --> 00:06:42,622
And just think about it

89
00:06:42,678 --> 00:06:46,590
how you'd like to deploy this thing. In a

90
00:06:46,622 --> 00:06:50,222
software world, we have containers. Yeah. So if

91
00:06:50,238 --> 00:06:54,274
you'd like to deploy it independently of your technology,

92
00:06:54,894 --> 00:06:58,598
what kind of stack you use, if it's Python and any other

93
00:06:58,646 --> 00:07:01,850
language, you probably gonna end up

94
00:07:01,882 --> 00:07:05,654
with some environment where you would like to use containers.

95
00:07:06,194 --> 00:07:10,170
And yeah, just to show you the

96
00:07:10,202 --> 00:07:13,214
solutions that we use for other problems,

97
00:07:14,114 --> 00:07:17,634
we use containers as any

98
00:07:17,674 --> 00:07:21,522
software engineer would use nowadays. So this

99
00:07:21,578 --> 00:07:25,650
running models, part of this slide

100
00:07:25,802 --> 00:07:29,194
shows actually Kubernetes environment where we deploy

101
00:07:29,234 --> 00:07:32,962
our models there is time series storage,

102
00:07:33,058 --> 00:07:35,694
which in our case is Cassandra.

103
00:07:36,314 --> 00:07:41,202
We have several workers which are services

104
00:07:41,298 --> 00:07:45,134
that going to process the data and

105
00:07:45,954 --> 00:07:49,618
process jobs that

106
00:07:49,666 --> 00:07:53,258
are gathered in a message queue, in our case

107
00:07:53,306 --> 00:07:54,174
Kafka.

108
00:07:57,544 --> 00:08:00,244
And this pipeline is just fine.

109
00:08:00,824 --> 00:08:05,304
It's fine as long as you don't need to scale. Because just

110
00:08:05,344 --> 00:08:08,920
think about it, hundreds of those kind

111
00:08:08,952 --> 00:08:12,888
of templates where you need to repeat

112
00:08:13,016 --> 00:08:16,568
refit the same model 100 times, it's still fine.

113
00:08:16,616 --> 00:08:20,360
Yeah, depends on your resources. But you have thousands,

114
00:08:20,432 --> 00:08:22,884
if you have hundreds of thousands of sites.

115
00:08:23,844 --> 00:08:27,332
This problem becomes difficult to scale

116
00:08:27,428 --> 00:08:32,988
with dockers and containers because

117
00:08:33,036 --> 00:08:34,544
of two things.

118
00:08:37,284 --> 00:08:40,504
The main thing related to Docker is latency.

119
00:08:41,284 --> 00:08:45,012
And the main reason of this latency

120
00:08:45,108 --> 00:08:49,016
is process overhead, because you not only need

121
00:08:49,040 --> 00:08:52,688
to run your code, but also you need

122
00:08:52,736 --> 00:08:56,632
to initialize the whole docker environment for

123
00:08:56,688 --> 00:09:00,604
each model that you run in production.

124
00:09:02,664 --> 00:09:06,216
And that's how I started to

125
00:09:06,280 --> 00:09:09,656
think about using WASm as a solution

126
00:09:09,760 --> 00:09:11,204
for this kind of problem.

127
00:09:12,504 --> 00:09:15,872
Because for wasm you

128
00:09:15,888 --> 00:09:19,936
have different stories. I'm going to shortly describe

129
00:09:19,960 --> 00:09:24,044
you what wasm is for those of you who are not very familiar with.

130
00:09:25,504 --> 00:09:29,056
And yeah, so first of

131
00:09:29,080 --> 00:09:33,056
all is a binary instruction format

132
00:09:33,200 --> 00:09:36,284
for stack based VM.

133
00:09:36,744 --> 00:09:40,136
So it's a way to run naturally

134
00:09:40,200 --> 00:09:44,362
server side code in your browser. Firstly introduced

135
00:09:44,418 --> 00:09:48,906
by Mozilla and

136
00:09:49,010 --> 00:09:53,054
yeah, adapted by all major web browsers.

137
00:09:53,834 --> 00:09:56,874
Wasmodules are faster and smaller than

138
00:09:56,914 --> 00:10:00,826
containers and you don't have this whole

139
00:10:00,930 --> 00:10:05,058
process overhead that I mentioned before. The glue

140
00:10:05,106 --> 00:10:08,950
between WaSM and your os is called wasi.

141
00:10:09,022 --> 00:10:12,478
So it's your os interface and

142
00:10:12,526 --> 00:10:16,006
it's already there. So you now we are able to

143
00:10:16,070 --> 00:10:19,634
run Wasi modules outside of browsers,

144
00:10:20,054 --> 00:10:23,166
which makes it interesting and

145
00:10:23,230 --> 00:10:28,254
makes it extremely interesting solution for server

146
00:10:28,374 --> 00:10:31,154
side scaling,

147
00:10:33,234 --> 00:10:35,854
containerizing kind of problem.

148
00:10:37,994 --> 00:10:41,226
There is also a tool called woznpak, which I

149
00:10:41,330 --> 00:10:44,594
personally recommend you if you would like to start your journey with

150
00:10:44,634 --> 00:10:47,410
WASM, which makes things,

151
00:10:47,522 --> 00:10:51,574
makes your life easier, basically if you want to experiment

152
00:10:55,594 --> 00:10:58,174
how I started my experiment with Warzone,

153
00:10:58,934 --> 00:11:02,710
I thought about something, yeah,

154
00:11:02,862 --> 00:11:07,070
something easy to implement in rust because I'm

155
00:11:07,102 --> 00:11:09,942
a beginner rust coder.

156
00:11:10,038 --> 00:11:13,574
So I thought that it's

157
00:11:13,614 --> 00:11:17,062
gonna be good if it's something that it's easy.

158
00:11:17,198 --> 00:11:20,982
Plus, to be honest, I wanted to have something easy enough

159
00:11:21,078 --> 00:11:23,794
to be able to present it during the conference.

160
00:11:24,634 --> 00:11:27,970
So I use model

161
00:11:28,002 --> 00:11:32,034
called daily pattern. And daily pattern

162
00:11:32,114 --> 00:11:35,882
is a very simple yet

163
00:11:35,938 --> 00:11:40,322
powerful idea where

164
00:11:40,378 --> 00:11:43,934
you just having time series data,

165
00:11:44,554 --> 00:11:48,534
you average it by five minutes intervals

166
00:11:49,394 --> 00:11:53,076
and you end up with something that you

167
00:11:53,100 --> 00:11:57,724
see here as a line which represents

168
00:11:57,884 --> 00:12:01,316
the signal during the day. In case

169
00:12:01,340 --> 00:12:05,020
of my team, we usually use it for base

170
00:12:05,052 --> 00:12:08,584
model, for modeling, but also

171
00:12:10,764 --> 00:12:14,412
for many different

172
00:12:14,468 --> 00:12:18,470
occasions. And interestingly,

173
00:12:18,542 --> 00:12:21,646
it's a very difficult model to beat

174
00:12:21,710 --> 00:12:24,154
if you want to predict signal.

175
00:12:25,454 --> 00:12:29,434
And yeah, as a background for this slide, you have

176
00:12:30,494 --> 00:12:34,270
rust code that implements this pattern

177
00:12:34,342 --> 00:12:35,074
model.

178
00:12:38,454 --> 00:12:42,950
I introduce here, polars. Polars is a library written

179
00:12:42,982 --> 00:12:47,024
in rust that allows you

180
00:12:47,484 --> 00:12:50,924
to have a super powerful interface

181
00:12:51,004 --> 00:12:54,876
to data. And it's like you may think about it as

182
00:12:54,940 --> 00:12:58,784
a better version of pandas. So I think it's worth

183
00:13:00,364 --> 00:13:04,348
to use it in your projects. And it's

184
00:13:04,476 --> 00:13:08,316
super fast because it

185
00:13:08,340 --> 00:13:11,864
uses arrow data model behind the scenes and

186
00:13:11,944 --> 00:13:18,696
because of lazy evaluation. And it

187
00:13:18,720 --> 00:13:22,480
makes this library unbeatable

188
00:13:22,632 --> 00:13:25,724
in dataframes processing.

189
00:13:28,744 --> 00:13:33,044
And yeah, and then comes wasm. And yeah.

190
00:13:33,464 --> 00:13:38,204
First of all, I thought that it's gonna be easy

191
00:13:38,244 --> 00:13:42,184
to do something in python, in Wasp, but actually it wasn't.

192
00:13:42,924 --> 00:13:46,364
I struggled a lot with this kind of

193
00:13:46,404 --> 00:13:50,172
approach and I failed. I failed

194
00:13:50,228 --> 00:13:54,500
also because of lack of sockets in WASm,

195
00:13:54,692 --> 00:14:00,092
and it makes things like HTTP

196
00:14:00,148 --> 00:14:05,302
requests actually complicated

197
00:14:05,358 --> 00:14:09,234
problem if you would like to run it in your

198
00:14:10,134 --> 00:14:12,114
wasm compiled code.

199
00:14:13,574 --> 00:14:17,774
Another problem that I have when I tried something

200
00:14:17,814 --> 00:14:22,958
called wasm. Time for

201
00:14:23,006 --> 00:14:26,950
my experiment, I had a problem with manual

202
00:14:27,022 --> 00:14:31,114
memory allocation. For those of you who

203
00:14:31,194 --> 00:14:36,474
are familiar with coding

204
00:14:36,554 --> 00:14:40,450
in C, you probably won't

205
00:14:40,482 --> 00:14:44,010
have problems with memory allocation,

206
00:14:44,082 --> 00:14:48,334
but most of people nowadays, including me,

207
00:14:51,194 --> 00:14:54,290
are used to languages like Python,

208
00:14:54,362 --> 00:14:57,654
where actually memory allocation is an issue

209
00:14:58,314 --> 00:15:02,698
and I end up in dependency hell. And this

210
00:15:02,746 --> 00:15:06,026
whole experience was really painful.

211
00:15:06,090 --> 00:15:09,546
For me, at some point I

212
00:15:09,610 --> 00:15:14,018
even thought that what I'm gonna show during

213
00:15:14,066 --> 00:15:17,682
this talk, so I'm gonna show lessons

214
00:15:17,738 --> 00:15:21,170
learned, my failure and how was actually

215
00:15:21,242 --> 00:15:24,814
a bad idea to use for mlops.

216
00:15:25,364 --> 00:15:29,228
But all of a sudden I realized that there is something that makes

217
00:15:29,356 --> 00:15:33,324
this experiment possible and this environment,

218
00:15:33,444 --> 00:15:37,076
this framework that I found, and I recommend you to

219
00:15:37,180 --> 00:15:40,988
your projects, not only experiments,

220
00:15:41,036 --> 00:15:41,744
maybe,

221
00:15:45,524 --> 00:15:49,144
yeah, but I encourage you to experiment with this framework and

222
00:15:49,924 --> 00:15:53,420
you can, you know, see what's

223
00:15:53,452 --> 00:15:57,584
possible there. It's a better version of node called Deno,

224
00:15:58,244 --> 00:16:02,148
and why it solves all my pains with BOsM is that

225
00:16:02,276 --> 00:16:07,424
natively it's supposed to wasm binaries.

226
00:16:08,644 --> 00:16:12,580
And so what I'm

227
00:16:12,612 --> 00:16:16,500
going to show you right now is an experiment

228
00:16:16,572 --> 00:16:20,314
that I run through this

229
00:16:20,354 --> 00:16:21,094
platform.

230
00:16:35,714 --> 00:16:40,094
So here we have a source code of my solution.

231
00:16:42,794 --> 00:16:46,818
First I compiled with Woznpak and

232
00:16:46,906 --> 00:16:50,330
Ozmpark is this tool that I've already recommended to

233
00:16:50,362 --> 00:16:53,778
you. And what it does for you,

234
00:16:53,946 --> 00:16:57,694
it does, especially if you like to run

235
00:17:00,194 --> 00:17:03,970
a web project. It creates the

236
00:17:04,002 --> 00:17:07,930
whole structure for you basically with one line

237
00:17:07,962 --> 00:17:12,054
of code, line of script. And then what I

238
00:17:12,474 --> 00:17:16,229
have here is compiled wasn't

239
00:17:16,401 --> 00:17:19,753
binary, and I've created something called runner.

240
00:17:21,013 --> 00:17:24,997
And in

241
00:17:25,045 --> 00:17:28,669
this J's code I run two things.

242
00:17:28,741 --> 00:17:32,597
One is our daily pattern written in rust

243
00:17:32,685 --> 00:17:36,333
compared to OZM. And I run it many

244
00:17:36,373 --> 00:17:39,033
times for different data sets.

245
00:17:41,053 --> 00:17:41,833
Yeah,

246
00:17:44,074 --> 00:17:48,054
example data sets and yeah,

247
00:17:49,314 --> 00:17:52,866
random number of times. And I'm going to

248
00:17:52,890 --> 00:17:56,626
compare it with something

249
00:17:56,690 --> 00:18:01,174
that I wrote using numpy.

250
00:18:02,234 --> 00:18:06,658
So I coded

251
00:18:06,746 --> 00:18:10,624
the same daily pattern in numpy and I just

252
00:18:10,664 --> 00:18:15,064
run it from JavaScript. Here we have result

253
00:18:15,184 --> 00:18:19,604
of running my rust

254
00:18:20,184 --> 00:18:23,872
compiled to OSM for, you know,

255
00:18:23,928 --> 00:18:27,884
randomly selected CSV files of different size.

256
00:18:28,904 --> 00:18:33,504
And then at the end of this process I print the size,

257
00:18:33,624 --> 00:18:35,764
overall size of files,

258
00:18:36,214 --> 00:18:39,486
process and time. So this one maybe is

259
00:18:39,510 --> 00:18:42,870
not a good example because it's too many runs.

260
00:18:42,902 --> 00:18:46,434
So I'm going to run it just limited number of times

261
00:18:47,454 --> 00:18:50,954
just to show an example. Yeah, and it's one sec,

262
00:18:52,134 --> 00:18:54,754
almost 150 megabytes.

263
00:18:55,254 --> 00:18:58,154
And then let's go with Python.

264
00:18:58,734 --> 00:19:01,834
The same daily pattern in,

265
00:19:02,154 --> 00:19:07,074
in python it

266
00:19:07,114 --> 00:19:10,370
initializes, it takes

267
00:19:10,402 --> 00:19:12,894
some time and it goes.

268
00:19:14,594 --> 00:19:18,934
And yeah, it's slightly

269
00:19:19,954 --> 00:19:35,034
slower than previous version and

270
00:19:35,074 --> 00:19:39,042
we have 26 seconds and the

271
00:19:39,058 --> 00:19:40,654
same number of megabytes.

272
00:19:45,914 --> 00:19:54,534
So coming

273
00:19:54,574 --> 00:19:57,474
to conclusions, as we saw,

274
00:19:58,494 --> 00:20:01,670
there is potential in

275
00:20:01,702 --> 00:20:05,278
WASM as a runner

276
00:20:05,326 --> 00:20:10,134
for your forecasting code for time

277
00:20:10,174 --> 00:20:11,114
series data,

278
00:20:14,014 --> 00:20:17,354
but there are still some

279
00:20:18,414 --> 00:20:22,304
issues that needs to be solved before it may

280
00:20:22,844 --> 00:20:26,532
really happen and it may be really used in production.

281
00:20:26,588 --> 00:20:29,184
And in my opinion, first is Python,

282
00:20:30,284 --> 00:20:33,588
which is very very painful. If you

283
00:20:33,596 --> 00:20:37,972
would like to do anything with Python in WASM and

284
00:20:38,148 --> 00:20:40,104
it's not yet there,

285
00:20:41,644 --> 00:20:45,460
you cannot compile basically your Python code

286
00:20:45,492 --> 00:20:49,764
into OSmO. And unfortunately

287
00:20:49,884 --> 00:20:54,996
or fortunately,

288
00:20:55,180 --> 00:20:58,944
most of the world uses Python for data science, so it makes it

289
00:20:59,724 --> 00:21:03,164
really difficult as a solution

290
00:21:03,204 --> 00:21:06,724
for data science sockets.

291
00:21:06,804 --> 00:21:08,024
As I already said,

292
00:21:10,364 --> 00:21:13,930
as long as there is no support

293
00:21:14,002 --> 00:21:18,178
for sockets in the warzone, it also

294
00:21:18,346 --> 00:21:25,354
makes it really really difficult to

295
00:21:25,394 --> 00:21:29,010
use. And yeah,

296
00:21:29,082 --> 00:21:35,586
parallel processing. So in my experiment I

297
00:21:35,610 --> 00:21:39,634
simplified it because deno made for me parallel

298
00:21:39,674 --> 00:21:42,968
processing. But actually this is something

299
00:21:43,016 --> 00:21:47,352
that you need to solve for yourself, maybe using rust

300
00:21:47,408 --> 00:21:50,404
library or whatever else.

301
00:21:51,384 --> 00:21:53,684
So yeah,

302
00:21:56,064 --> 00:22:00,484
it looks like Docker's word somehow

303
00:22:02,904 --> 00:22:06,840
is not in competition with

304
00:22:06,952 --> 00:22:11,796
WASM. Actually what I read

305
00:22:11,900 --> 00:22:16,084
not that far ago is that there

306
00:22:16,124 --> 00:22:19,824
are some Kubernetes containers

307
00:22:20,884 --> 00:22:23,224
wasn't based or there is some.

308
00:22:25,124 --> 00:22:28,556
At least I saw some comments on that. So it

309
00:22:28,580 --> 00:22:31,980
looks like not

310
00:22:32,012 --> 00:22:36,088
only me think

311
00:22:36,136 --> 00:22:40,324
about making, you know, use of vozen

312
00:22:40,944 --> 00:22:43,044
for production deployments.

313
00:22:45,384 --> 00:22:49,208
And yeah, hopefully I can one day I can have another

314
00:22:49,336 --> 00:22:52,640
part of this talk about how

315
00:22:52,672 --> 00:22:54,484
to actually use it in production.

316
00:22:55,584 --> 00:22:59,404
Okay, I encourage you to stay in touch with me.

317
00:23:00,834 --> 00:23:04,746
I have a GitHub account and also likd account.

318
00:23:04,810 --> 00:23:08,054
If you want to ask me, please ask any questions,

319
00:23:08,674 --> 00:23:13,338
I'm open. Also any feedback if you have really

320
00:23:13,386 --> 00:23:17,666
welcomed. And yeah,

321
00:23:17,770 --> 00:23:21,586
have a nice rest of the conference and see you

322
00:23:21,610 --> 00:23:22,202
later.

