1
00:00:25,410 --> 00:00:28,150
Hey everyone, welcome to our presentation.

2
00:00:28,490 --> 00:00:33,778
Today we will be talking about CI

3
00:00:33,794 --> 00:00:37,430
CD tool that we developed to secure runners using

4
00:00:37,500 --> 00:00:40,866
Berkeley packet filters. And I'm

5
00:00:40,898 --> 00:00:44,546
Mert and I'm joined by my friend Jenk, who's the CEO

6
00:00:44,578 --> 00:00:46,310
and co founder of Kondukto.

7
00:00:47,450 --> 00:00:50,926
For introducing our tool, we will first talk

8
00:00:50,948 --> 00:00:54,522
about the trend landscape and to showcase why we're

9
00:00:54,586 --> 00:00:58,560
developing this tool. And then we will talk about

10
00:00:59,010 --> 00:01:02,734
why we choose Burkett Packet filter and how

11
00:01:02,772 --> 00:01:06,626
we developed our tooling approach, and then

12
00:01:06,648 --> 00:01:10,306
we will showcase a demo of the tooling. So if we

13
00:01:10,328 --> 00:01:13,954
look at the trend landscape today, as you can see,

14
00:01:13,992 --> 00:01:18,502
there are a lot of malicious application in the wild which

15
00:01:18,556 --> 00:01:22,246
dramatically increased throughout the years. And if you just

16
00:01:22,268 --> 00:01:26,466
look at the two years ago and compare

17
00:01:26,498 --> 00:01:30,106
it with the last year, you can see there is a

18
00:01:30,128 --> 00:01:33,818
lot of interest from attackers in

19
00:01:33,824 --> 00:01:37,674
terms of malicious packages. And as

20
00:01:37,712 --> 00:01:40,986
you can see, there are common attack vectors for attackers to achieve

21
00:01:41,018 --> 00:01:44,714
this, the first one being the vulnerable packages. They publish

22
00:01:44,762 --> 00:01:49,706
a vulnerable package using typoscutting attack or publishing

23
00:01:49,738 --> 00:01:53,558
a package that resembles a legitimate package

24
00:01:53,594 --> 00:01:56,914
name that is widely used so that they are

25
00:01:56,952 --> 00:02:00,466
trying to trick the developers to use those vulnerable packages instead.

26
00:02:00,648 --> 00:02:04,814
And similarly, they also took an approach of compromising

27
00:02:04,862 --> 00:02:08,294
pipeline tools so that they can tinker with them

28
00:02:08,412 --> 00:02:12,226
or they can publish again typoscarted pipeline

29
00:02:12,258 --> 00:02:15,798
tool, which might seem benign but

30
00:02:15,964 --> 00:02:19,434
might not be. And lastly, they can write

31
00:02:19,472 --> 00:02:23,162
out compromise the artifact integrity. So this could be a code

32
00:02:23,216 --> 00:02:27,466
or your container image, so they

33
00:02:27,488 --> 00:02:31,662
can target those and compromise them in order to for example,

34
00:02:31,796 --> 00:02:35,662
publish or deploy code of their own choice for

35
00:02:35,716 --> 00:02:39,338
crypto mining purposes or some other purpose to leave backdoor.

36
00:02:39,514 --> 00:02:42,590
So based on these common attack vectors,

37
00:02:43,430 --> 00:02:47,042
we can talk about, for example, one of the recent threats that

38
00:02:47,096 --> 00:02:51,090
is happening in the wild nordic career based

39
00:02:51,160 --> 00:02:54,890
threat group recently published, for example, NPM package

40
00:02:54,990 --> 00:02:56,950
called execution timer sync,

41
00:02:59,690 --> 00:03:03,026
which is a copy

42
00:03:03,058 --> 00:03:07,030
of a packet called execution time which is being used

43
00:03:07,180 --> 00:03:10,390
as a code profile profile provider.

44
00:03:10,890 --> 00:03:14,554
And this package aims to steal the victims login credentials and

45
00:03:14,592 --> 00:03:18,074
passwords from the browsers. But as you can see on the left

46
00:03:18,112 --> 00:03:22,094
side, it also has a python script capability to

47
00:03:22,132 --> 00:03:25,754
further the compromise. Once you have this NPM package,

48
00:03:25,802 --> 00:03:28,650
it collects the credentials and passwords,

49
00:03:28,730 --> 00:03:32,650
and afterwards it tries to download this python script

50
00:03:32,810 --> 00:03:37,070
so that it can remotely control the compromise instance

51
00:03:37,230 --> 00:03:40,674
in order to achieve this. On the right side, you can

52
00:03:40,712 --> 00:03:44,594
see the diff of the recent build that

53
00:03:44,632 --> 00:03:48,274
was discovered by Filio. They're constantly

54
00:03:48,322 --> 00:03:51,670
changing the IPs to stay hidden.

55
00:03:52,250 --> 00:03:55,830
And this has been. If you follow the

56
00:03:55,980 --> 00:03:59,206
blog post, you can see that this has been tied to North Korea.

57
00:03:59,318 --> 00:04:02,794
And this is not the first time that some

58
00:04:02,832 --> 00:04:06,698
threat actor group is trying to masquerade as a

59
00:04:06,784 --> 00:04:10,220
legitimate package. And that's why

60
00:04:11,250 --> 00:04:14,330
when we see similar threats in the wild,

61
00:04:14,490 --> 00:04:18,106
which can affect also ci CD pipelines in form of malicious

62
00:04:18,138 --> 00:04:21,226
packages or compromised pipeline,

63
00:04:21,418 --> 00:04:24,498
we decided to develop our own,

64
00:04:24,664 --> 00:04:28,450
our tooling, which is also open source called

65
00:04:28,520 --> 00:04:31,806
control, and now jenk will deep dive

66
00:04:31,838 --> 00:04:35,302
into the package filter. What is it and why are we using it?

67
00:04:35,356 --> 00:04:39,414
As well as some of the use cases that we

68
00:04:39,452 --> 00:04:43,106
looked at to implement within our tool to monitor

69
00:04:43,218 --> 00:04:46,950
and prevent these kind of attacks.

70
00:04:47,450 --> 00:04:50,566
Yeah. Thank you mark. So welcome everyone.

71
00:04:50,668 --> 00:04:54,138
So in the second call section of this talk,

72
00:04:54,224 --> 00:04:57,690
I will explain why we have chosen EBPF technology

73
00:04:57,840 --> 00:05:01,150
to implement this open source security solution.

74
00:05:01,730 --> 00:05:05,114
So EBPF technology is gaining more and more popularity

75
00:05:05,162 --> 00:05:09,294
in the observability and the security space. And we decided to use

76
00:05:09,492 --> 00:05:13,614
EBPF because we want to monitor

77
00:05:13,662 --> 00:05:17,106
and prevent attacks or anomalies in the

78
00:05:17,128 --> 00:05:20,782
runtime. And since BBPF allows

79
00:05:20,846 --> 00:05:24,338
us to write portable applications because of the

80
00:05:24,424 --> 00:05:28,360
compile ones and run everywhere approach, this was obvious.

81
00:05:28,890 --> 00:05:32,482
And let me explain you what is EBPF?

82
00:05:32,546 --> 00:05:35,910
Let me rephrase once again. So EBPF is

83
00:05:35,980 --> 00:05:40,902
a way to write kernel

84
00:05:40,966 --> 00:05:44,566
level applications without literally

85
00:05:44,758 --> 00:05:48,106
writing or compiling anything in the kernel. And because of

86
00:05:48,128 --> 00:05:49,850
this portability approach,

87
00:05:51,890 --> 00:05:55,902
when you develop such an application, this tool

88
00:05:55,956 --> 00:05:59,754
will basically run any newer Linux

89
00:05:59,802 --> 00:06:04,270
kernels which most of the Ci CD runners

90
00:06:04,430 --> 00:06:05,460
will apply.

91
00:06:09,190 --> 00:06:12,500
Ebpf basically lets us

92
00:06:12,950 --> 00:06:17,506
develop a user space application while modifying

93
00:06:17,618 --> 00:06:21,238
and touching to the

94
00:06:21,324 --> 00:06:23,640
kernel space. And as you can see in this example,

95
00:06:24,730 --> 00:06:28,378
literally writing in small hooks in a specific

96
00:06:28,544 --> 00:06:32,460
kernel section or kernel syscall, we can either

97
00:06:32,910 --> 00:06:36,778
asynchronously see or monitor the props or

98
00:06:36,864 --> 00:06:39,180
even modify for some of the.

99
00:06:41,490 --> 00:06:45,262
So we asked ourselves, so,

100
00:06:45,316 --> 00:06:49,678
how to develop and what to do while developing those

101
00:06:49,844 --> 00:06:54,138
securing solution. And we explored

102
00:06:54,154 --> 00:06:57,426
the options. And when we have seen all the

103
00:06:57,448 --> 00:07:01,726
attacks, and when we have analyzed all the attacks, we have seen a common pattern

104
00:07:01,918 --> 00:07:05,606
which was the network layer. Obviously we

105
00:07:05,628 --> 00:07:09,480
can develop more and more controls and security

106
00:07:09,850 --> 00:07:12,966
tooling using this technology.

107
00:07:13,148 --> 00:07:16,998
We started to develop this open source tool with the

108
00:07:17,084 --> 00:07:19,050
traffic control layer.

109
00:07:19,550 --> 00:07:23,066
And how the system works or system has

110
00:07:23,088 --> 00:07:26,934
been designed is whenever a new event occurs

111
00:07:26,982 --> 00:07:31,690
in the pipeline, we are going to attach appropriate

112
00:07:31,770 --> 00:07:35,038
kernel calls. We create

113
00:07:35,124 --> 00:07:39,242
separate sections or channels, send those probes

114
00:07:39,306 --> 00:07:43,422
into the user space, and user space will act

115
00:07:43,476 --> 00:07:46,882
as a decision making or policy engine which

116
00:07:46,936 --> 00:07:50,434
will allow or prevent or

117
00:07:50,472 --> 00:07:54,350
block the relevant access code. So in the latest

118
00:07:54,430 --> 00:07:58,066
attack that we have seen, we have observed the north korean

119
00:07:58,098 --> 00:08:01,880
one, the Lazarus group. This design was pretty

120
00:08:04,730 --> 00:08:08,620
variable. And if the

121
00:08:09,790 --> 00:08:13,286
vulnerable package has been triggered in the developer's machine,

122
00:08:13,318 --> 00:08:17,642
it was acting differently than the on this other side it was running

123
00:08:17,696 --> 00:08:21,738
in the Linux section there was Android approach. So that's

124
00:08:21,754 --> 00:08:25,226
why we have developed the monitoring capabilities as well as the privileging

125
00:08:25,258 --> 00:08:29,306
capabilities and added those controls

126
00:08:29,338 --> 00:08:32,570
in the tutorial. So what is the playbook?

127
00:08:32,650 --> 00:08:36,378
So playbook, as I explained, first we should decide

128
00:08:36,474 --> 00:08:40,610
which events or which books we are going to attach.

129
00:08:40,950 --> 00:08:44,590
Obviously we wanted to have the TCP and the UDP

130
00:08:44,750 --> 00:08:48,222
connections, so we are attaching the TCP

131
00:08:48,366 --> 00:08:52,194
V connect and the IP four datagram

132
00:08:52,242 --> 00:08:55,574
connect calls. Those calls are

133
00:08:55,612 --> 00:08:59,660
creating dedicated channels into our user space

134
00:09:00,430 --> 00:09:03,786
and our user space or acts as

135
00:09:03,808 --> 00:09:07,398
a policy engine. And whenever an malicious

136
00:09:07,494 --> 00:09:11,754
event has been identified, we were basically telling

137
00:09:11,802 --> 00:09:16,190
our filtering function or filtering

138
00:09:16,930 --> 00:09:21,114
to prevent the access. So this is the overall picture

139
00:09:21,242 --> 00:09:25,906
and our aim, our idea is to develop

140
00:09:26,008 --> 00:09:29,730
a full fledged open source ci CD

141
00:09:30,790 --> 00:09:34,820
security solutions with EBPF power.

142
00:09:35,450 --> 00:09:38,882
So let's jump to a quick demo. Then let's

143
00:09:38,946 --> 00:09:42,374
explain how the system works. Right now we have

144
00:09:42,412 --> 00:09:46,262
developed this as a single binary. So this

145
00:09:46,316 --> 00:09:49,718
means that since the single binary, and again because of the

146
00:09:49,724 --> 00:09:53,606
core architecture, it will work basically in any Linux

147
00:09:53,638 --> 00:09:57,066
kernel. So as you can see here, on the left side we

148
00:09:57,088 --> 00:10:01,070
have run the code, and on the right side we try to get

149
00:10:01,140 --> 00:10:04,286
some HTTP calls from the Google and then

150
00:10:04,308 --> 00:10:07,626
the Amazon. Since those are blocked, we see that those tcp

151
00:10:07,658 --> 00:10:11,998
communication has been blocked already. And we

152
00:10:12,084 --> 00:10:15,950
then created a wallet

153
00:10:16,030 --> 00:10:19,602
call and download the artifact. And as you can see,

154
00:10:19,656 --> 00:10:23,140
those TCP we get were

155
00:10:23,750 --> 00:10:27,010
successful using this approach.

156
00:10:27,170 --> 00:10:31,094
Let's show us how the same approach will

157
00:10:31,132 --> 00:10:34,386
work in the GitHub runner

158
00:10:34,418 --> 00:10:37,506
on a GitHub action. As you can see

159
00:10:37,548 --> 00:10:41,562
here, we have developed a pretty simple and

160
00:10:41,616 --> 00:10:45,526
pretty valid GitHub action

161
00:10:45,558 --> 00:10:48,586
file. So we have two actions here,

162
00:10:48,688 --> 00:10:51,822
or two steps. One step will act

163
00:10:51,876 --> 00:10:56,014
as a malicious event, and the malicious event

164
00:10:56,132 --> 00:11:00,240
or malicious step will simulate and

165
00:11:00,930 --> 00:11:04,946
secretly cooperation. And on the other end we will have a

166
00:11:04,968 --> 00:11:08,114
load action which will download the artifact or which will

167
00:11:08,152 --> 00:11:11,826
upload the artifact. And finally we

168
00:11:11,848 --> 00:11:15,574
will see the report, we will just see

169
00:11:15,612 --> 00:11:18,920
what's going on. So we are triggering the event,

170
00:11:20,090 --> 00:11:23,522
and since it's a single binary,

171
00:11:23,586 --> 00:11:27,154
and we have developed and dedicated Docker as well, so it's

172
00:11:27,202 --> 00:11:30,890
dockerized. You can run in the docker format as well, based on the

173
00:11:30,960 --> 00:11:34,358
CI CD runner. So control binary

174
00:11:34,454 --> 00:11:37,846
has been developed and one action prevent

175
00:11:37,878 --> 00:11:43,366
action occurred. As you can see, the network unreachable,

176
00:11:43,558 --> 00:11:47,534
and in the allowed action it works. And down

177
00:11:47,572 --> 00:11:51,278
below we have a report that works

178
00:11:51,364 --> 00:11:55,330
as expected. What was the idea behind this tool?

179
00:11:55,400 --> 00:12:01,250
Obviously, if we can monitor the network

180
00:12:01,830 --> 00:12:05,640
or what's going on in the pipeline itself,

181
00:12:07,050 --> 00:12:09,510
we can take certain measures.

182
00:12:10,250 --> 00:12:14,098
And we decided to develop this on an open source

183
00:12:14,274 --> 00:12:18,140
because with the help of the community, security community and EBPF community,

184
00:12:18,510 --> 00:12:22,940
we believe we can implement more and more sensors and

185
00:12:24,510 --> 00:12:27,866
the latest version or the new version of the

186
00:12:27,888 --> 00:12:31,760
tool supports UDP protocol as well,

187
00:12:32,210 --> 00:12:36,430
and based on the configuration it can prevent access

188
00:12:36,500 --> 00:12:40,606
or allow access to the GitHub meta IP range and

189
00:12:40,788 --> 00:12:44,898
in progress feature we have

190
00:12:45,064 --> 00:12:48,740
developed an open policy agent based rule engine.

191
00:12:50,070 --> 00:12:54,110
It's been tested and we will publish soon. And afterwards

192
00:12:54,190 --> 00:12:57,762
we will create an prop monitor process monitor

193
00:12:57,826 --> 00:13:01,062
sensor to understand which

194
00:13:01,116 --> 00:13:04,262
files has been accessed or even

195
00:13:04,316 --> 00:13:07,894
touched, and we will get a list and

196
00:13:07,932 --> 00:13:11,480
we will try to find anomalies in the

197
00:13:11,930 --> 00:13:15,910
file system using the proc sensors.

198
00:13:16,810 --> 00:13:19,000
So that was it for today.

199
00:13:20,370 --> 00:13:24,090
Please join or contribute

200
00:13:24,170 --> 00:13:27,840
to this project and if you ever have any questions,

201
00:13:28,210 --> 00:13:32,238
feel free to reach us. We are happy to answer

202
00:13:32,404 --> 00:13:36,160
or even contribute to your questions.

203
00:13:36,690 --> 00:13:38,700
Thank you. Thank you for having the call.

