1
00:00:20,680 --> 00:00:24,366
Greetings, fellow golfers out there, and a warm welcome to

2
00:00:24,390 --> 00:00:27,786
this lightning talk on craft your game with

3
00:00:27,810 --> 00:00:31,466
go. As I was prepping up for this presentation, I was

4
00:00:31,490 --> 00:00:35,210
looking for that aha moment or a punchline to

5
00:00:35,242 --> 00:00:38,786
start off with. I have kind of decided that

6
00:00:38,890 --> 00:00:40,974
I'll reserve it for the next slide.

7
00:00:41,634 --> 00:00:45,974
A little bit of context sitting here. How many of you have watched money Bahal

8
00:00:46,394 --> 00:00:49,514
the million dollar arm? How many

9
00:00:49,554 --> 00:00:53,520
of you still recollect this classic saber metric scene from

10
00:00:53,552 --> 00:00:57,280
Moneyball? A fun fact. These movies

11
00:00:57,392 --> 00:01:00,792
cumulatively cost 140 million at the

12
00:01:00,808 --> 00:01:04,964
box office and are based on sports analytics.

13
00:01:05,664 --> 00:01:08,084
What's the big deal about sports analytics?

14
00:01:08,784 --> 00:01:12,160
Largely the measure of a professional sports team's

15
00:01:12,192 --> 00:01:15,944
success has traditionally been pretty straightforward. The team

16
00:01:15,984 --> 00:01:19,458
either wins or loses. Hey, there's a

17
00:01:19,466 --> 00:01:22,970
lot more to it, Albert. What happens on

18
00:01:23,002 --> 00:01:26,586
the playing field, a lot dependent

19
00:01:26,730 --> 00:01:30,202
on what happens outside it, what decisions are taken

20
00:01:30,258 --> 00:01:33,974
outside it. I'm going to do a bit of a role play here,

21
00:01:34,794 --> 00:01:38,466
case study and look at two specific

22
00:01:38,530 --> 00:01:41,134
cases in the next couple of slides.

23
00:01:42,114 --> 00:01:45,298
You know, what is the problem at hand? What is the analytics problem at hand?

24
00:01:45,346 --> 00:01:48,694
Rather simple cases and how craps can

25
00:01:48,734 --> 00:01:52,086
effectively or simply represent them

26
00:01:52,110 --> 00:01:55,606
in a very simple way. The first case I would look at

27
00:01:55,670 --> 00:01:58,154
is related to player focus.

28
00:01:58,734 --> 00:02:02,438
What makes a player tick? What makes a player

29
00:02:02,486 --> 00:02:06,350
tick when it really matters. If I can plot a

30
00:02:06,422 --> 00:02:08,674
quantitative relationship,

31
00:02:09,334 --> 00:02:12,994
high stake games versus performance, say,

32
00:02:13,114 --> 00:02:16,814
the way in which a player plays, and playoff games or regular games,

33
00:02:18,074 --> 00:02:21,450
if I can effectively represent it and use it for my analytics,

34
00:02:21,562 --> 00:02:25,418
that would be a boon. I want this identification

35
00:02:25,466 --> 00:02:28,730
process to be very simple. I don't want to look

36
00:02:28,762 --> 00:02:32,978
at elaborate slides, lots of data

37
00:02:33,026 --> 00:02:36,394
analysis and data dumps. I want a concise cheat

38
00:02:36,434 --> 00:02:40,316
sheet kind of representation. More specifically here,

39
00:02:40,460 --> 00:02:43,764
a rod who used to play very well

40
00:02:43,804 --> 00:02:47,300
in seasonal games, but was bit of a choker when it comes

41
00:02:47,332 --> 00:02:51,332
to the playoffs. A lot of very specific training

42
00:02:51,508 --> 00:02:55,204
elements were incorporated by coaches to simulate pressure conditions, etcetera,

43
00:02:55,244 --> 00:02:58,492
so that he also ticks off in the playoff games.

44
00:02:58,628 --> 00:03:02,264
Let's look at how a graph can be used to represent this situation.

45
00:03:03,004 --> 00:03:05,944
A very familiar structure, so to speak.

46
00:03:06,974 --> 00:03:10,006
Nodes. You have edges and then you have relationships.

47
00:03:10,150 --> 00:03:13,798
You have the main actors here represented by the notes,

48
00:03:13,926 --> 00:03:17,078
vertices, the coach, a rod himself,

49
00:03:17,206 --> 00:03:20,354
and the playoff games, and how the coach,

50
00:03:21,094 --> 00:03:25,194
the edges, actually represent the relationships. The analysis, the simulation,

51
00:03:25,614 --> 00:03:28,886
and the actual action of playing a

52
00:03:28,910 --> 00:03:32,450
graph says a million words. The next

53
00:03:32,482 --> 00:03:36,054
case I would look at is based on team focus.

54
00:03:36,754 --> 00:03:41,178
Do you remember the Chicago club's strategic victory in the 2016 World

55
00:03:41,226 --> 00:03:45,854
Series? How they overcame Cleveland's strong pitching

56
00:03:46,514 --> 00:03:49,174
and corrie clubbers dominance.

57
00:03:49,914 --> 00:03:53,354
So this was again a relationship Analysis which was

58
00:03:53,394 --> 00:03:56,826
done, you know, on how to tire

59
00:03:56,930 --> 00:04:01,244
the opposition in this case. And then what relationship

60
00:04:01,404 --> 00:04:05,304
did increase pitch counts in the beginning have

61
00:04:06,444 --> 00:04:10,356
again, this can be effectively represented by

62
00:04:10,420 --> 00:04:13,836
a graph as seen here,

63
00:04:14,020 --> 00:04:17,516
like how the pitch count and the sedition drills by the

64
00:04:17,540 --> 00:04:21,544
coach did play a relationship effectively in the gameplay.

65
00:04:22,044 --> 00:04:25,996
Let's go on to a broader view of how

66
00:04:26,060 --> 00:04:29,666
this all spans out in the current industry. The graphs we

67
00:04:29,690 --> 00:04:32,138
saw are just like tiny drops in the ocean.

68
00:04:32,306 --> 00:04:35,882
Knowledge graphs are now the norm of powerful

69
00:04:36,018 --> 00:04:39,694
AI based engines and analytic systems.

70
00:04:40,354 --> 00:04:43,994
Powerful knowledge graphs are now becoming the norm in any

71
00:04:44,034 --> 00:04:47,546
industry, so to speak. Let's now go down to

72
00:04:47,570 --> 00:04:51,098
the underlying technology and

73
00:04:51,226 --> 00:04:55,426
underlying terminologies used and the preferences of

74
00:04:55,530 --> 00:04:59,594
concepts and notations. Why do we use Cypher Ql?

75
00:04:59,754 --> 00:05:02,562
Cypherql is a very effective,

76
00:05:02,698 --> 00:05:07,434
concise and text based representation.

77
00:05:07,594 --> 00:05:11,814
So it's in fact text based visual art, so to speak.

78
00:05:12,474 --> 00:05:15,970
So, you know, if you actually look at it in this particular

79
00:05:16,042 --> 00:05:19,490
case, the relationship over here

80
00:05:19,522 --> 00:05:23,498
is a person lives in so and so city and

81
00:05:23,586 --> 00:05:27,362
knows this person. So look at the way in which it's effectively

82
00:05:27,418 --> 00:05:31,746
represented. This graph. It's truly, truly very simple

83
00:05:31,810 --> 00:05:33,694
and very clean to understand.

84
00:05:34,474 --> 00:05:38,434
So you want your representation to be not

85
00:05:38,474 --> 00:05:42,194
confusing, not ambiguous. And I feel cipher

86
00:05:42,234 --> 00:05:46,410
QL is the perfect choice. There are other choices like

87
00:05:46,442 --> 00:05:51,644
gremlin, which can make it overtly complex. But definitely

88
00:05:51,724 --> 00:05:55,724
in terms of the visual art, the clarity in which the

89
00:05:55,764 --> 00:05:58,932
nouns, the relationships, you know,

90
00:05:59,028 --> 00:06:02,516
the verbs associated with other nouns, so to speak,

91
00:06:02,580 --> 00:06:06,652
are represented is very effective in the Cyberku L

92
00:06:06,748 --> 00:06:10,484
format. Let's look at a 10,000ft

93
00:06:10,524 --> 00:06:14,116
view of how we want the solution landscape to be

94
00:06:14,220 --> 00:06:18,184
here in a cloud native ecosystem.

95
00:06:18,484 --> 00:06:22,304
At the very heart of it you would actually see

96
00:06:23,124 --> 00:06:26,820
a neo four j instance. A neo four j

97
00:06:26,892 --> 00:06:31,064
graph instance which is used for storing the graph data.

98
00:06:31,444 --> 00:06:35,596
Our favorite go based lambda, the high concurrency

99
00:06:35,660 --> 00:06:39,356
and high performant go based lambda which is

100
00:06:39,380 --> 00:06:41,984
used to actually drive these analytics modules.

101
00:06:43,804 --> 00:06:47,380
Neo four j database instance would again be deployed in

102
00:06:47,412 --> 00:06:49,504
an AWS cluster.

103
00:06:50,484 --> 00:06:54,540
And then as far as the scalability goes,

104
00:06:54,572 --> 00:06:58,108
there are some claims that at least

105
00:06:58,156 --> 00:07:01,916
as per the case studies published on the neo four J website, that it scales

106
00:07:01,940 --> 00:07:06,424
like 1000 x faster than your SQL for

107
00:07:08,044 --> 00:07:10,904
greenfield development and building systems ground up.

108
00:07:11,794 --> 00:07:16,066
Having looked at the 1000 10,000ft architecture and

109
00:07:16,090 --> 00:07:19,594
again stressing on the usability, the actual use

110
00:07:19,634 --> 00:07:23,418
case, this is going to solve the sports peaks

111
00:07:23,546 --> 00:07:27,854
analytics users both on mobile and web browsers.

112
00:07:28,514 --> 00:07:32,234
There are a host of other tools used here

113
00:07:32,394 --> 00:07:35,054
right from monitoring, storage, etcetera,

114
00:07:36,214 --> 00:07:39,958
you know, also ensuring that the workflow does

115
00:07:40,126 --> 00:07:43,430
authentication, role management, so to

116
00:07:43,462 --> 00:07:47,326
speak. Going on to a few code

117
00:07:47,390 --> 00:07:50,918
snippets. Hey, one thing in the previous slide

118
00:07:51,086 --> 00:07:54,678
I forgot to mention one part, you would see a small lightning

119
00:07:54,726 --> 00:07:58,014
bolt. Next to the Gopher bolt is the actual

120
00:07:58,134 --> 00:08:02,506
driver used to connect to neo four j and user

121
00:08:02,530 --> 00:08:06,774
query in CypherQL in the Golang ecosystem.

122
00:08:08,074 --> 00:08:11,654
Coming onto our favorite part, a few code snippets.

123
00:08:12,274 --> 00:08:15,818
This is a simple code snippet for the data

124
00:08:15,866 --> 00:08:19,802
definition languages or creating the model using Neo four g.

125
00:08:19,898 --> 00:08:24,494
A bunch of create and update statements used for

126
00:08:25,194 --> 00:08:28,914
representing teams, useful representing players

127
00:08:29,074 --> 00:08:32,757
and what kind of relationship the player

128
00:08:32,885 --> 00:08:36,913
had. And you know, a few other attributes for the player

129
00:08:37,373 --> 00:08:40,893
have been mentioned here. It's very simple. It's just like boilerplate

130
00:08:40,973 --> 00:08:42,713
snippets to just give you the idea,

131
00:08:43,653 --> 00:08:48,113
more ground level code and go lang awesomeness.

132
00:08:49,253 --> 00:08:53,173
In the true spirit of simplicity of Golang, just a few lines of

133
00:08:53,213 --> 00:08:56,941
code to actually connect to the neo four J

134
00:08:56,997 --> 00:09:00,581
driver. Again, to reiterate, the name of the driver is called

135
00:09:00,637 --> 00:09:04,504
bolt. Just some basic authentication at play here

136
00:09:05,084 --> 00:09:08,716
and then a little more awesomeness here in terms of a basic

137
00:09:08,780 --> 00:09:12,372
insert statement in order to insert data

138
00:09:12,548 --> 00:09:16,304
corresponding to a, an item onto

139
00:09:17,044 --> 00:09:21,100
the database. This could be a player, it could be any entity per

140
00:09:21,132 --> 00:09:24,820
se. Going on more further, a little bit of

141
00:09:24,852 --> 00:09:28,722
deep dive. One of the sports my daughter

142
00:09:28,908 --> 00:09:32,278
specifically likes, it's lacrosse. Lacrosse is like a fun

143
00:09:32,326 --> 00:09:36,094
combination between your badminton and, you know, like butterfly catching

144
00:09:36,174 --> 00:09:39,702
and I would say a bit of hockey in

145
00:09:39,718 --> 00:09:43,222
some way. So a lot of graph

146
00:09:43,278 --> 00:09:46,566
based relationships can be used in lacrosse is what I realized over a period of

147
00:09:46,590 --> 00:09:49,966
time. And this is again a snippet which talks

148
00:09:49,990 --> 00:09:52,854
about a few intricacies, about, you know,

149
00:09:52,934 --> 00:09:56,822
how some basic level of identification can be done

150
00:09:56,958 --> 00:10:00,702
using relationships. And graphql. You would look at this

151
00:10:00,758 --> 00:10:04,758
particular idiom here. It's a

152
00:10:04,806 --> 00:10:08,654
low submarine shot and a rainbow

153
00:10:08,694 --> 00:10:12,454
pass, which are pretty tactical moves in the lacrosse space.

154
00:10:12,614 --> 00:10:16,270
And also you have a bunch of other paradigms

155
00:10:16,302 --> 00:10:18,834
here like turnover and save.

156
00:10:21,374 --> 00:10:24,920
That's again neo four j model

157
00:10:25,032 --> 00:10:28,524
model used to set up data for this particular regard.

158
00:10:30,024 --> 00:10:33,964
There can be some advanced functionalities here which can be used

159
00:10:34,744 --> 00:10:38,324
from the graph to actually,

160
00:10:38,784 --> 00:10:43,324
you know, analyze in greater detail. One such

161
00:10:43,784 --> 00:10:46,936
functionality is the cosine similarity. Rather a mathematical

162
00:10:46,960 --> 00:10:50,100
functionality is cosine similarity. So using

163
00:10:50,132 --> 00:10:54,188
a graph database enables us to calculate and compare cosine

164
00:10:54,276 --> 00:10:57,244
similarity between two nodes. In this way,

165
00:10:57,324 --> 00:11:01,100
one can compare opponents, games, players and other nodes against

166
00:11:01,172 --> 00:11:04,340
each other to better understand strengths and weaknesses.

167
00:11:04,412 --> 00:11:07,604
And how to make the appropriate adjustments.

168
00:11:07,764 --> 00:11:12,236
With 30 teams in major leagues, there are bound to be programs

169
00:11:12,260 --> 00:11:16,240
that play similarly to each other from a data science perspective in

170
00:11:16,272 --> 00:11:19,808
aspects of the games that may include type of relief pitching

171
00:11:19,856 --> 00:11:23,392
or stolen base percentages. Evaluation of

172
00:11:23,448 --> 00:11:26,944
your opponent based on similarity allows for anticipating given game

173
00:11:26,984 --> 00:11:30,084
scenarios, which leads to better practice and strategy.

174
00:11:30,904 --> 00:11:34,096
More graph based concepts. You have

175
00:11:34,120 --> 00:11:37,792
a bunch of correlations and indices from the

176
00:11:37,808 --> 00:11:41,620
graph world which can again be used, you know, combined effectively

177
00:11:41,772 --> 00:11:45,980
with go as demonstrated by the few go snippets

178
00:11:46,172 --> 00:11:49,024
to actually come up with advanced analytics.

179
00:11:49,844 --> 00:11:54,052
One more aspect which actually shows the significance

180
00:11:54,188 --> 00:11:57,436
of why sports betting is such a big deal and

181
00:11:57,460 --> 00:11:59,624
analytics is the backbone of sports betting.

182
00:12:00,004 --> 00:12:03,344
So the daily fantasy sports

183
00:12:03,724 --> 00:12:08,032
was red hot in 2014. About 1.5

184
00:12:08,088 --> 00:12:11,736
million Americans paid more than a billion dollars in

185
00:12:11,760 --> 00:12:16,024
tournament entry fees and FanDuel grew about 300%

186
00:12:16,144 --> 00:12:19,832
in active customers. So you

187
00:12:19,848 --> 00:12:23,000
know, there are millions and millions in dollars pumped in by high

188
00:12:23,032 --> 00:12:26,528
stake companies like ESPN and Disney in

189
00:12:26,536 --> 00:12:29,952
the entire betting world. And you know,

190
00:12:30,048 --> 00:12:34,044
Golang, with all its awesomeness, can be used in this ecosystem.

191
00:12:34,634 --> 00:12:38,666
A few useful links on this regard have

192
00:12:38,690 --> 00:12:42,146
been mentioned here in terms of the repository used and the code snippets

193
00:12:42,290 --> 00:12:44,614
which can be used for further analysis.

194
00:12:45,074 --> 00:12:48,386
Finally, to wrap this up, a retrospective on what

195
00:12:48,450 --> 00:12:51,614
this presentation was meant to be and what this was not meant to be.

196
00:12:53,314 --> 00:12:57,818
This presentation is a blueprint, a thought provoker on how sports analytics

197
00:12:57,946 --> 00:13:01,414
can be clapped with the awesomeness of Go ecosystem.

198
00:13:01,844 --> 00:13:05,572
To achieve advanced analytics, there is an indirect

199
00:13:05,668 --> 00:13:09,796
emphasis on using a particular tech stack, like sticking onto

200
00:13:09,980 --> 00:13:14,084
cipher QL, which is like a more easily representable

201
00:13:14,204 --> 00:13:18,196
format for graphs, and then also teasing the

202
00:13:18,220 --> 00:13:21,584
thought of how this can power knowledge, graphs and AI's.

203
00:13:22,564 --> 00:13:26,784
And maybe on the other end of the spectrum, this could also be used to

204
00:13:27,144 --> 00:13:30,440
power tiny devices like tiny graphs

205
00:13:30,472 --> 00:13:34,216
on tiny go. Who knows? That's it for

206
00:13:34,240 --> 00:13:37,404
this presentation for now. Hope you liked it.

207
00:13:38,704 --> 00:13:42,224
Please do drop me a note on the feedback. Thank you so much.

