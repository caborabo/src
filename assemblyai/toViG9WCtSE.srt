1
00:00:24,650 --> 00:00:28,242
Hi, I am Karan and welcome to my talk on the art of complex

2
00:00:28,306 --> 00:00:32,050
deployments strategies in Kubernetes using Argo rollouts.

3
00:00:32,130 --> 00:00:35,954
In this talk you can expect to learn about the different deployment strategies

4
00:00:36,002 --> 00:00:39,494
that are out there, their pros and cons and their

5
00:00:39,532 --> 00:00:43,426
use cases as well. Then we will be taking a look at Argo rollouts,

6
00:00:43,458 --> 00:00:47,222
how to set it up in a Kubernetes cluster, and how we can create

7
00:00:47,356 --> 00:00:50,714
the blue green deployment strategy along with the canary these deployment

8
00:00:50,762 --> 00:00:54,894
strategy. After this we'll be taking a look at the best practices for

9
00:00:54,932 --> 00:00:58,442
setting up the different deployment strategies along with the common challenges

10
00:00:58,506 --> 00:01:02,158
that are faced while setting these strategies up. So I hope you

11
00:01:02,164 --> 00:01:05,578
are excited for this talk. Let's get into it before getting into the

12
00:01:05,604 --> 00:01:09,074
actual talk, just a brief introduction about myself. I am

13
00:01:09,112 --> 00:01:12,386
currently working as a software engineer at this company called Storylane. It's a

14
00:01:12,408 --> 00:01:15,774
Y combinator backed company and we specialize in creating

15
00:01:15,822 --> 00:01:19,210
demo automation software. Prior to working for Storylane,

16
00:01:19,230 --> 00:01:22,918
I worked for Hackerrank, specifically the labs team at Hackerrank where we

17
00:01:22,924 --> 00:01:26,200
were responsible for building short product ideas for the company.

18
00:01:26,810 --> 00:01:30,390
I primarily specialize in the DevOps and the backend domain,

19
00:01:30,470 --> 00:01:33,990
and I work with technologies like Kubernetes,

20
00:01:34,070 --> 00:01:37,558
Docker, Helm, Golang Node, JS, Ruby on Rails,

21
00:01:37,574 --> 00:01:41,046
et cetera on a day to day basis. I also have a

22
00:01:41,088 --> 00:01:43,534
technical blog, you can check it out on my website,

23
00:01:43,572 --> 00:01:46,858
karanjatan.com blog. So let's

24
00:01:46,874 --> 00:01:50,874
not waste any more time and let's jump into what are zero downtime

25
00:01:51,002 --> 00:01:54,370
deployment strategies? So this is a brief overview of

26
00:01:54,440 --> 00:01:58,190
how a user interacts with an application through a load balancer,

27
00:01:58,270 --> 00:02:01,874
and how we ideally want to deploy a new release of the

28
00:02:01,912 --> 00:02:05,522
application without affecting the user experience and

29
00:02:05,656 --> 00:02:08,462
without causing any downtimes in the deployment.

30
00:02:08,606 --> 00:02:11,894
So why is zero downtime necessary? Of course,

31
00:02:12,012 --> 00:02:15,158
if there is any downtime in the application, it can affect the revenue of the

32
00:02:15,164 --> 00:02:19,634
business. It can also affect the user experience. So there can be cases where multiple

33
00:02:19,682 --> 00:02:23,226
versions of an application are deployed and some requests from

34
00:02:23,248 --> 00:02:26,582
the user are going to the older version, some are going through the newer version,

35
00:02:26,646 --> 00:02:28,940
so there can be discrepancy in the user experience.

36
00:02:29,310 --> 00:02:32,666
Then it can also hamper the customer trust in

37
00:02:32,688 --> 00:02:35,966
the application and the company as well. And also in a

38
00:02:35,988 --> 00:02:39,582
lot of the cases there are SLA applications by the company to its

39
00:02:39,636 --> 00:02:42,782
customers. So these are a few reasons why zero

40
00:02:42,836 --> 00:02:46,782
downtime deployments are necessary. Before diving

41
00:02:46,846 --> 00:02:50,162
into the different deployment strategies that are out there, first,

42
00:02:50,216 --> 00:02:54,002
let's take a look at the basic architecture of a application running

43
00:02:54,056 --> 00:02:57,830
on a Kubernetes cluster. So when a user is

44
00:02:57,900 --> 00:03:01,442
interacting with your application, it does that through the DNS,

45
00:03:01,506 --> 00:03:05,314
which routes the traffic to the load balancer, which then routes

46
00:03:05,362 --> 00:03:08,986
it to the ingress of Kubernetes and that routes it to

47
00:03:09,008 --> 00:03:12,378
the service responsible for the application in Kubernetes. And the service

48
00:03:12,464 --> 00:03:16,726
then finally routes the traffic to the deployment.

49
00:03:16,918 --> 00:03:21,578
We also have our cluster admin which is responsible for maintaining

50
00:03:21,754 --> 00:03:25,710
the deployments, the service and the ingress of the application.

51
00:03:25,860 --> 00:03:30,058
So this is just a brief overview of the Kubernetes architecture

52
00:03:30,154 --> 00:03:33,002
as a prerequisite for the later stages,

53
00:03:33,066 --> 00:03:36,942
specifically the demo part of the video. So Kubernetes

54
00:03:37,006 --> 00:03:41,086
out of the box offers us to use two different deployment strategies.

55
00:03:41,198 --> 00:03:44,686
One is the secrets deployments strategies and another is the rolling

56
00:03:44,718 --> 00:03:48,354
deployment strategy. So first let's take a look at the recreate deployments

57
00:03:48,402 --> 00:03:51,734
strategy. So this is a brief overview of how

58
00:03:51,772 --> 00:03:55,318
the recreate deployment strategy works. The process goes

59
00:03:55,404 --> 00:03:58,550
this way. First the current

60
00:03:58,620 --> 00:04:02,554
deployment is deleted, then a new deployment is created, and then

61
00:04:02,592 --> 00:04:06,346
the user is redirected to the new deployment. So you

62
00:04:06,368 --> 00:04:09,962
can see a problem over here that while the deployment is happening,

63
00:04:10,016 --> 00:04:13,358
while the new deployment is being created, there is using to be a

64
00:04:13,364 --> 00:04:18,030
downtime and the user would be able to interact with the application during the deployment.

65
00:04:18,530 --> 00:04:22,138
So here are the pros and cons of this deployment strategy.

66
00:04:22,234 --> 00:04:25,646
Let's go through the pros first, so it's easy to implement. It does

67
00:04:25,668 --> 00:04:29,486
not take up any additional resources because first the older deployment is deleted,

68
00:04:29,518 --> 00:04:33,026
then the new one is created. So essentially it keeps using the same amount of

69
00:04:33,048 --> 00:04:36,590
resources always. Then it also helps prevent

70
00:04:36,670 --> 00:04:40,386
data conflicts. So if there are two different deployments simultaneously

71
00:04:40,418 --> 00:04:43,906
trying to connect to a same data source, so there may be some conflicts.

72
00:04:43,938 --> 00:04:47,634
So this helps with that issue. It is also helpful

73
00:04:47,682 --> 00:04:51,062
in architectures where you don't want multiple versions

74
00:04:51,126 --> 00:04:54,730
of your applications running simultaneously. Then let's go through the cons

75
00:04:54,800 --> 00:04:59,114
next. There is a downtime as we discussed, while the deployment is happening,

76
00:04:59,232 --> 00:05:02,518
it is not suitable for high availability applications.

77
00:05:02,614 --> 00:05:05,806
There is a slower rollout process because if, let's say

78
00:05:05,828 --> 00:05:09,118
there are hundreds of pods and you're waiting for all of those pods to be

79
00:05:09,124 --> 00:05:12,190
created, then it's going to be a time consuming process.

80
00:05:12,340 --> 00:05:15,838
And there is also a risk of deployment failure because

81
00:05:15,924 --> 00:05:18,946
the first thing that we do is delete the old deployment and then create the

82
00:05:18,968 --> 00:05:22,126
new one. So if there is any issue in the new deployment,

83
00:05:22,158 --> 00:05:25,794
then there is going to be a problem. So yeah, let's jump into the use

84
00:05:25,832 --> 00:05:29,206
cases of this deployment strategy. So these are

85
00:05:29,228 --> 00:05:32,566
the use cases of the recreate deployments strategy. It can be used in

86
00:05:32,588 --> 00:05:36,194
non production environments where the applications is not required to be highly

87
00:05:36,242 --> 00:05:40,954
available, and it can also be used in cases where two

88
00:05:40,992 --> 00:05:44,778
different versions of the application cannot be writing to the same

89
00:05:44,944 --> 00:05:49,210
data source like a single tenant database. So yeah,

90
00:05:49,280 --> 00:05:51,980
let's jump into the rolling deployment strategy next.

91
00:05:52,510 --> 00:05:55,680
So this is how the rolling deployment strategy looks like.

92
00:05:56,290 --> 00:05:59,914
In contrast to the recreate deployment strategy, it does not delete the older

93
00:05:59,962 --> 00:06:03,454
version of the application first. What it does is it creates the

94
00:06:03,492 --> 00:06:07,406
new version of the application in a rolling or a gradual

95
00:06:07,518 --> 00:06:11,390
way. So what it does is it will create some pods

96
00:06:11,470 --> 00:06:15,650
of the new application, and until those new pods are completely

97
00:06:15,720 --> 00:06:19,894
in the running state, it will not delete the older pods. So essentially it

98
00:06:19,932 --> 00:06:23,430
will roll out the deployments in a gradual manner.

99
00:06:23,930 --> 00:06:27,522
So here are the different use cases for the rolling deployment strategy.

100
00:06:27,666 --> 00:06:30,954
This is a really good strategy for your DeV

101
00:06:30,992 --> 00:06:34,154
environment or your staging environment. It is also a good

102
00:06:34,192 --> 00:06:38,378
strategy if your application requires a gradual rollout process,

103
00:06:38,544 --> 00:06:42,650
and it is also resource efficient because it

104
00:06:42,720 --> 00:06:46,414
will not maintain multiple deployment strategies of your application, it will gradually roll out

105
00:06:46,452 --> 00:06:50,030
the new release. So it is also resource efficient.

106
00:06:50,450 --> 00:06:54,526
So now let's jump into some of the more complex deployment strategies.

107
00:06:54,638 --> 00:06:58,286
So first, let's take a look at the Canary release deployments strategy

108
00:06:58,398 --> 00:07:02,446
here. The deployments strategy asks

109
00:07:02,478 --> 00:07:06,290
us to create a canary group, and that Canary Group

110
00:07:06,360 --> 00:07:09,926
is going to be responsible for serving to a subset of

111
00:07:09,948 --> 00:07:13,106
your traffic. Let's say 20% and 80% of the traffic

112
00:07:13,138 --> 00:07:16,694
will go to your original deployments. So you can see that it

113
00:07:16,732 --> 00:07:19,958
is sort of similar to the rolling deployment strategy, where the

114
00:07:19,964 --> 00:07:23,894
rollout is going to be gradual in nature, but it is fundamentally

115
00:07:23,942 --> 00:07:27,066
different than the rolling deployment strategy. Because over here we are

116
00:07:27,088 --> 00:07:30,122
going to have full control over the canary group,

117
00:07:30,176 --> 00:07:34,078
essentially the group which is going to be responsible for serving the subset of

118
00:07:34,084 --> 00:07:37,514
your traffic. So let's take a look at the pros and cons of the Canary

119
00:07:37,562 --> 00:07:40,638
release deployment strategy. Let's first go through the

120
00:07:40,644 --> 00:07:44,214
pros. So this deployment strategy is really good at risk mitigation

121
00:07:44,282 --> 00:07:48,126
because of the Canary group and the concept of serving to only a subset

122
00:07:48,158 --> 00:07:51,934
of users. It also gives real world feedback

123
00:07:52,062 --> 00:07:54,958
because of the fundamental process of the deployment.

124
00:07:55,134 --> 00:07:58,806
Again, this is similar to the rolling deployment strategy where the rollout happens in

125
00:07:58,828 --> 00:08:02,386
a gradual manner, but here we have full control over the rollout

126
00:08:02,418 --> 00:08:05,766
process, and there is also an option for

127
00:08:05,788 --> 00:08:09,206
a quick rollback. So if that Calgary group, which is serving to a subset of

128
00:08:09,228 --> 00:08:13,066
users, showcases some issue in the deployment, then we can quickly roll back

129
00:08:13,088 --> 00:08:16,410
to the old group, which was already serving to most of the traffic.

130
00:08:16,750 --> 00:08:19,366
Now let's go through the cons of this strategy.

131
00:08:19,478 --> 00:08:22,798
It is complex in routing, so setting up

132
00:08:22,804 --> 00:08:26,842
the routing for this is a complex task. There is a monitoring

133
00:08:26,906 --> 00:08:30,526
overhead and also there can be inconsistency in

134
00:08:30,548 --> 00:08:34,062
user experience because of the Canary group concept.

135
00:08:34,206 --> 00:08:37,874
And there is also a limited testing scope when the deployment is

136
00:08:37,912 --> 00:08:42,690
happening. Here are the use cases for the Canary deployments strategy

137
00:08:43,030 --> 00:08:46,866
if you want real world feedback. So this is a really good strategy

138
00:08:46,898 --> 00:08:50,962
for you. It is also useful in performance sensitive

139
00:08:51,026 --> 00:08:54,806
deployments because of the concept of the Canary group. And if

140
00:08:54,828 --> 00:08:58,530
you also want continuous deployment environments where there is no downtime,

141
00:08:58,610 --> 00:09:02,474
this is also a good use case for that. Now let's take

142
00:09:02,512 --> 00:09:06,038
a look at the blue green deployment strategy. Personally, this is my favorite.

143
00:09:06,134 --> 00:09:10,106
So in this strategy, you maintain essentially two different

144
00:09:10,208 --> 00:09:14,218
deployment groups. One is the green deployment and one is the blue deployment.

145
00:09:14,314 --> 00:09:17,854
So the green deployment is responsible for serving your real

146
00:09:17,892 --> 00:09:21,310
world traffic. It is responsible for your production application.

147
00:09:21,460 --> 00:09:24,526
And the blue deployment is essentially a copy of the

148
00:09:24,548 --> 00:09:28,526
green deployment. So this is how the process goes when you create a new release.

149
00:09:28,718 --> 00:09:32,494
First the application will be deployments to the blue environment.

150
00:09:32,622 --> 00:09:36,610
And in the blue environment you can do your testing. You can see

151
00:09:36,680 --> 00:09:40,118
how your application is behaving, and once everything is good to go,

152
00:09:40,204 --> 00:09:43,090
you can swap the blue environment with the green environment.

153
00:09:43,170 --> 00:09:46,866
So essentially blue now becomes green and green now becomes

154
00:09:46,898 --> 00:09:50,186
blue. And green was already serving the old application,

155
00:09:50,288 --> 00:09:54,282
so now it essentially becomes the blue deployment. So this is how the blue green

156
00:09:54,336 --> 00:09:57,420
deployment works. Let's jump into its pros and cons.

157
00:09:58,110 --> 00:10:01,662
There is essentially zero downtime when you use

158
00:10:01,716 --> 00:10:05,374
the blue green deployment. You can immediately roll back to

159
00:10:05,412 --> 00:10:10,430
your previous deployment. Because of the blue green strategy.

160
00:10:10,770 --> 00:10:14,042
You can easily test your application as well in the blue environment.

161
00:10:14,106 --> 00:10:17,890
So what usually companies do is that consider

162
00:10:17,960 --> 00:10:21,310
the blue environment as the UAT or pre prod environment,

163
00:10:21,390 --> 00:10:25,374
where you can do the testing before converting it to the green environment,

164
00:10:25,502 --> 00:10:29,190
and you can also load test that particular environment easily.

165
00:10:29,530 --> 00:10:32,322
Now, here are the cons. It is resource intensive.

166
00:10:32,386 --> 00:10:36,354
You essentially have to maintain two copies of the same deployment.

167
00:10:36,482 --> 00:10:39,500
It is complex in data management because of the same reason.

168
00:10:40,030 --> 00:10:43,654
There are potentials for unused resources.

169
00:10:43,702 --> 00:10:46,986
The blue environment can be sitting idle for long periods of

170
00:10:47,008 --> 00:10:50,906
time. And there is also complexity involved in the configuration and the

171
00:10:50,928 --> 00:10:54,446
routing of the deployments strategies. So here are the use

172
00:10:54,468 --> 00:10:57,742
cases of the blue green deployment strategy. If you are looking

173
00:10:57,796 --> 00:11:01,710
for a strategy that allows you to keep your application highly available,

174
00:11:01,860 --> 00:11:05,234
a very critical production environment, then this is a really good

175
00:11:05,272 --> 00:11:09,166
strategy to consider. And this is also a strategy which allows

176
00:11:09,198 --> 00:11:12,418
you to do robust testing before releasing it

177
00:11:12,424 --> 00:11:16,034
to the public. So the goal of this talk is to

178
00:11:16,072 --> 00:11:20,134
not only talk about the different deployment strategies that are out there, but also

179
00:11:20,252 --> 00:11:23,526
about how we can implement the blue green deployment strategy along

180
00:11:23,548 --> 00:11:27,574
with the Canary release strategy in a Kubernetes environment. And for

181
00:11:27,612 --> 00:11:30,534
that we will be using this tool called Argo rollouts.

182
00:11:30,582 --> 00:11:34,678
So let's take a look at what this tool is. So Argo

183
00:11:34,694 --> 00:11:38,122
rollouts is a cloud native open source tool built

184
00:11:38,176 --> 00:11:42,394
for Kubernetes where we can create these complex deployment

185
00:11:42,442 --> 00:11:46,682
strategies like the Bluegreen deployment strategy or the Kennethy release

186
00:11:46,746 --> 00:11:50,154
deployment strategy. It also allows

187
00:11:50,202 --> 00:11:54,382
us to easily roll back to the older deployments

188
00:11:54,526 --> 00:11:58,542
and it also allows us to easily configure

189
00:11:58,606 --> 00:12:02,014
the traffic routing in the Kubernetes environment.

190
00:12:02,142 --> 00:12:05,666
So it gives us a very neat dashboard to do all

191
00:12:05,688 --> 00:12:08,782
of this stuff. So we'll be taking a look at that dashboard and

192
00:12:08,856 --> 00:12:12,294
how we can set up these strategies in the demo part of this

193
00:12:12,332 --> 00:12:15,334
video. All right, it is about time.

194
00:12:15,372 --> 00:12:18,246
Now let's get into the demo part of the video and let's see how we

195
00:12:18,268 --> 00:12:21,050
can set up Argo rollouts in a Kubernetes environment.

196
00:12:21,710 --> 00:12:25,274
All right, we are in the demo part of the session now. In this

197
00:12:25,312 --> 00:12:28,986
section we will be going over the blue green deployments strategies along with

198
00:12:29,008 --> 00:12:32,254
the canary release deployment strategy using Argo rollouts in a

199
00:12:32,292 --> 00:12:36,334
Kubernetes environment. In order to set up the Kubernetes environment on

200
00:12:36,372 --> 00:12:39,466
our local system, I will be using the Kubernetes in Docker

201
00:12:39,498 --> 00:12:42,910
tool. All the prerequisites for this demo

202
00:12:42,980 --> 00:12:46,818
session are going to be provided in a readme file and this is going

203
00:12:46,824 --> 00:12:50,066
to be part of a GitHub project. The link to this GitHub project will be

204
00:12:50,088 --> 00:12:53,646
provided at the end of this talk. So let's

205
00:12:53,678 --> 00:12:57,426
jump straight into the terminal and get started. So the first

206
00:12:57,448 --> 00:13:00,758
thing that we can do is create a Kubernetes cluster using kind on

207
00:13:00,764 --> 00:13:04,482
our local system. We can do that by running the kind create cluster

208
00:13:04,546 --> 00:13:07,990
command. And you can provide a name as well if you want. It's not

209
00:13:08,060 --> 00:13:12,234
required. I'll be providing argo rollouts demo. I would be going ahead and running

210
00:13:12,272 --> 00:13:15,050
this command since I have already created the cluster.

211
00:13:15,550 --> 00:13:19,066
Once your kind cluster is created, what we

212
00:13:19,088 --> 00:13:22,134
can do is we can ensure that we are on the correct Kubernetes context.

213
00:13:22,182 --> 00:13:26,234
We can use the Kubectx tool for that. Whatever clusters

214
00:13:26,282 --> 00:13:29,502
that are created using the Kydin tool, it is prepended using kind. So just

215
00:13:29,556 --> 00:13:34,002
add kind and the name of your cluster. So yes,

216
00:13:34,136 --> 00:13:38,260
once we have switched to the correct context, we can

217
00:13:38,870 --> 00:13:42,660
go ahead and see the blue green deployment demo

218
00:13:43,110 --> 00:13:46,374
jumping back into vs code again. I have gone

219
00:13:46,412 --> 00:13:50,706
ahead and created these two service YaMl

220
00:13:50,738 --> 00:13:53,990
files. One is the green service Yaml file and another is the blue service

221
00:13:54,060 --> 00:13:57,446
Yaml file. Both of these services are going

222
00:13:57,468 --> 00:14:00,598
to be pointing to the same app selector which is going to be Nginx and

223
00:14:00,604 --> 00:14:04,026
the same target port. But just the name is going to be different. This is

224
00:14:04,048 --> 00:14:07,034
going to be Nginx blue and this is going to be nginx green.

225
00:14:07,232 --> 00:14:10,854
Another file that I have created is the Argo rollout Yaml file.

226
00:14:10,982 --> 00:14:14,346
Over here. We can provide the active service as well

227
00:14:14,368 --> 00:14:17,774
as the preview service. So active service is going to be the service through

228
00:14:17,812 --> 00:14:21,114
which the live traffic is going to be routed and the preview

229
00:14:21,162 --> 00:14:25,838
service is going to be the one which is going to act as essentially

230
00:14:25,934 --> 00:14:29,620
the one which acts as a test bed for us.

231
00:14:30,070 --> 00:14:34,046
And I have also disabled the auto promotion. So auto

232
00:14:34,078 --> 00:14:37,422
promotion essentially is a concept of argo rollout,

233
00:14:37,486 --> 00:14:40,694
where unless and until we go ahead and click

234
00:14:40,732 --> 00:14:44,930
the promote button in the dashboard or run the promote command through the CLI,

235
00:14:45,090 --> 00:14:49,110
it will not go ahead and scale down the green deployment and

236
00:14:49,180 --> 00:14:52,918
switch the blue and the green replica sets.

237
00:14:53,014 --> 00:14:56,538
So during this time we can

238
00:14:56,624 --> 00:15:00,534
do whatever testing that we want, load testing, test the application's behavior

239
00:15:00,662 --> 00:15:04,554
and test the new release changes. So initially

240
00:15:04,602 --> 00:15:08,320
we are going to be starting off with the NgInX and a particular

241
00:15:08,850 --> 00:15:12,782
release docker tag. And in order to test the change

242
00:15:12,916 --> 00:15:16,298
between the two deployments, the green and the blue deployment, I'm just

243
00:15:16,324 --> 00:15:19,874
going to make one minor change and I'm going to change this to

244
00:15:19,912 --> 00:15:23,534
latest. So that's how we are going to see the deployment in action.

245
00:15:23,662 --> 00:15:27,266
So yeah, let's jump back into the terminal and apply all

246
00:15:27,288 --> 00:15:30,754
these YAML files. So before running the YAML files,

247
00:15:30,802 --> 00:15:34,198
I just want to show everything that is present in the default namespace so we

248
00:15:34,204 --> 00:15:38,194
can get that by running this command kgetol. And just for context,

249
00:15:38,242 --> 00:15:41,766
I have set an alias for the Kubectl CLA

250
00:15:41,798 --> 00:15:45,434
tool with K. So this is essentially running Kubectl under

251
00:15:45,472 --> 00:15:49,254
the hood. So as you can see, there is nothing but the default Kubernetes

252
00:15:49,302 --> 00:15:52,942
service running that comes out of the box when you run the Kubernetes control

253
00:15:52,996 --> 00:15:56,778
plane. So now we can go ahead and start applying our YAML

254
00:15:56,794 --> 00:16:00,238
file. So first let's apply the green service

255
00:16:00,324 --> 00:16:04,586
Yaml file. Then we can apply the blue

256
00:16:04,618 --> 00:16:08,286
service YaMl file. And finally, let's apply the rollout

257
00:16:08,318 --> 00:16:11,938
file as well. Now if I go ahead and get all

258
00:16:12,024 --> 00:16:15,730
in the you can see that there are two pods running

259
00:16:15,800 --> 00:16:18,930
because that is what we specified in the rollout TML file.

260
00:16:19,010 --> 00:16:22,406
Two services have been created, Nginx Blue and NginX green,

261
00:16:22,508 --> 00:16:25,794
and the replica set for the blue

262
00:16:25,842 --> 00:16:29,354
deployment essentially, which is running as of now.

263
00:16:29,552 --> 00:16:33,126
I can also show the rollouts that have been created.

264
00:16:33,158 --> 00:16:36,650
So this is a CRD, the Argo rollouts project.

265
00:16:36,800 --> 00:16:41,114
So NginX rollout has been in

266
00:16:41,152 --> 00:16:44,190
order to view the rollout that we just created,

267
00:16:44,610 --> 00:16:48,206
we can do that on the rollouts dashboard. And in

268
00:16:48,228 --> 00:16:52,090
order to spin that up, we can run the following command Kubectl argo rollouts dashboard

269
00:16:52,170 --> 00:16:55,666
keep in mind this command will only work if the Argo rollouts plugin has been

270
00:16:55,688 --> 00:16:59,154
installed in the Kubernetes cluster. The installation guide for

271
00:16:59,192 --> 00:17:02,514
installing the plugin is also present in the readme of the

272
00:17:02,552 --> 00:17:05,890
GitHub project. So let's go ahead and run this command.

273
00:17:06,230 --> 00:17:09,974
As you can see, the dashboard is now available at port 3100.

274
00:17:10,012 --> 00:17:13,798
So let's jump into the browser and see our rollout in action. As you

275
00:17:13,804 --> 00:17:17,746
can see, the rollout that we created is present over here, NginX rollout and it's

276
00:17:17,778 --> 00:17:21,578
using the blue green strategy. So let's click on this. As you

277
00:17:21,584 --> 00:17:25,322
can see, the image that we had provided is mentioned

278
00:17:25,376 --> 00:17:29,434
here. It is stable and active. Two pods are running as of now.

279
00:17:29,632 --> 00:17:33,502
So what I'll do is I'll jump back into vs code, change the

280
00:17:33,636 --> 00:17:37,594
image tag to latest and let's see the blue green deployment

281
00:17:37,642 --> 00:17:41,086
in action. So here I have made the one change

282
00:17:41,188 --> 00:17:44,606
to latest and I'll apply this yaml

283
00:17:44,638 --> 00:17:48,690
file and let's see how it behaves in the browser.

284
00:17:49,030 --> 00:17:52,526
So as you can see, a new revision is being created

285
00:17:52,558 --> 00:17:56,162
right now. And since we set the auto promotion to

286
00:17:56,216 --> 00:17:59,794
false, what it is doing is right now it is maintaining

287
00:17:59,842 --> 00:18:03,922
both the states, the green deployments as well as the blue deployment.

288
00:18:04,066 --> 00:18:08,054
And once I click on the promote button over here,

289
00:18:08,172 --> 00:18:11,770
then it will essentially swap the two between

290
00:18:11,840 --> 00:18:14,842
the blue and the green and it will make the green deployment as the live

291
00:18:14,896 --> 00:18:18,966
deployment, essentially converting it into blue. And the previous deployment,

292
00:18:18,998 --> 00:18:23,146
the older deployment will be scaled down in 30 seconds. So you

293
00:18:23,168 --> 00:18:26,574
can change the scale down time as well if you want. But since

294
00:18:26,612 --> 00:18:30,286
we have disabled the auto promotion then we don't really need to change that

295
00:18:30,308 --> 00:18:34,174
time because we can take however long we want before clicking this button.

296
00:18:34,292 --> 00:18:37,906
So I'll go ahead and click on yes, so now as you can

297
00:18:37,928 --> 00:18:41,506
see the active state changed. So essentially the swap between

298
00:18:41,608 --> 00:18:44,962
blue and green happened. And now the older deployments has

299
00:18:45,016 --> 00:18:48,706
a timer over here. So within 15 seconds or so it will be scaled

300
00:18:48,738 --> 00:18:52,242
down. So this is how the blue green deployments

301
00:18:52,386 --> 00:18:55,798
strategy works using argo rollouts. I hope this was

302
00:18:55,884 --> 00:18:59,110
helpful. Now let's jump into the canary release

303
00:18:59,190 --> 00:19:02,934
deployments strategy. For the canary release deployments

304
00:19:03,062 --> 00:19:06,314
demo, I have gone ahead and created these two

305
00:19:06,352 --> 00:19:09,514
YAML files. One is the service YAML file. It is a pretty

306
00:19:09,552 --> 00:19:13,274
straightforward Kubernetes service that is targeting port 80,

307
00:19:13,402 --> 00:19:17,098
and another file is the argo rollout YAML

308
00:19:17,114 --> 00:19:20,286
file. This time the strategy specified is

309
00:19:20,308 --> 00:19:24,114
the canary strategy. And over here

310
00:19:24,152 --> 00:19:27,874
we are following the same methodology where the

311
00:19:27,912 --> 00:19:31,282
Nginx image is provided. And later

312
00:19:31,336 --> 00:19:35,326
we will be changing this tag to latest and we'll

313
00:19:35,358 --> 00:19:38,834
see how this deployment behaves in real time

314
00:19:38,872 --> 00:19:42,374
on the argo routes dashboard. So I have gone ahead and

315
00:19:42,412 --> 00:19:46,566
applied the two YAMl files that I just showed you, and once we do

316
00:19:46,588 --> 00:19:49,746
that, this is the dashboard that we get for the canary release deployment.

317
00:19:49,778 --> 00:19:52,406
And as you can see, the dashboard is a bit different compared to the blue

318
00:19:52,438 --> 00:19:56,106
green deployments strategies. There is one more panel over here which contains the

319
00:19:56,128 --> 00:19:59,802
steps of the canary deployment. So essentially what happens

320
00:19:59,856 --> 00:20:03,334
is that through each step, so each step, we can set a weight,

321
00:20:03,382 --> 00:20:07,626
and after that we can set a pause. So a pause can either be indefinite

322
00:20:07,658 --> 00:20:11,342
in nature. So in this case, we would have to go and manually promote the

323
00:20:11,396 --> 00:20:15,380
deployment. Otherwise we can provide the pause in seconds so that

324
00:20:15,750 --> 00:20:19,234
it automatically gets promoted. So since we have

325
00:20:19,272 --> 00:20:22,546
five pods in our deployments, essentially what will happen is

326
00:20:22,568 --> 00:20:24,994
that at each step. So 20%, 40%,

327
00:20:25,032 --> 00:20:28,790
60%, one single pod will be added into our

328
00:20:28,940 --> 00:20:32,114
canary group. So at 20%, one pod will be added,

329
00:20:32,162 --> 00:20:36,034
because 20% of five is one. Then after we promote

330
00:20:36,082 --> 00:20:39,990
manually through this pause section, then another

331
00:20:40,060 --> 00:20:43,194
pod will be added at 40% and so on. You get the gist of it.

332
00:20:43,312 --> 00:20:46,726
So now let's jump back into vs code, change the image

333
00:20:46,758 --> 00:20:49,914
tag from this to latest and let's see this

334
00:20:49,952 --> 00:20:53,198
in action. So as you can see, I have changed this to latest and

335
00:20:53,204 --> 00:20:57,242
I'll apply this yaml file and let's see how it changes the deployment

336
00:20:57,306 --> 00:21:00,926
behavior. So, as you can see, a new revision was

337
00:21:00,948 --> 00:21:04,842
created with the tag of latest. And over here, it has been paused

338
00:21:04,906 --> 00:21:08,146
on this step. So now what we can do is we can

339
00:21:08,168 --> 00:21:12,002
test our deployment. Since the canary group is essentially 20%

340
00:21:12,056 --> 00:21:15,250
of the deployment, we can test this particular small

341
00:21:15,320 --> 00:21:18,998
subset. And once we are good to go, once we get the green light

342
00:21:19,084 --> 00:21:22,342
we can promote manually by clicking over here. Are you sure?

343
00:21:22,396 --> 00:21:25,542
So yes. So as soon as I clicked on yes,

344
00:21:25,596 --> 00:21:29,114
another pod was added and now it is going to go through an

345
00:21:29,152 --> 00:21:33,210
automatic pause of 10 seconds. So after 10 seconds it should add

346
00:21:33,280 --> 00:21:36,940
another pod into the revision two. It did that.

347
00:21:37,310 --> 00:21:41,414
Yeah. This is essentially how the canary release deployment strategy

348
00:21:41,462 --> 00:21:45,194
works. And if you remember the YAMl file that we saw for this strategy,

349
00:21:45,242 --> 00:21:48,862
we have complete control over the steps over here and we can have even

350
00:21:48,916 --> 00:21:53,018
more steps after this. We can change the percentage, the weight,

351
00:21:53,114 --> 00:21:56,786
the pause duration, and essentially we have complete control over

352
00:21:56,808 --> 00:22:00,786
it. So yeah, this was the demo part of this

353
00:22:00,888 --> 00:22:04,274
talk. I hope you enjoyed this. Now let's jump back

354
00:22:04,312 --> 00:22:07,886
into the slides and go over the best practices for creating

355
00:22:07,918 --> 00:22:11,046
zero deployments strategies. All right, so we are done

356
00:22:11,068 --> 00:22:13,814
with the demo part of the session. Now let's get into the best practices of

357
00:22:13,852 --> 00:22:17,542
zero downtime deployment strategies. The first one is that your

358
00:22:17,596 --> 00:22:21,426
deployments strategy should allow you to rigorously test your applications in a live

359
00:22:21,468 --> 00:22:24,806
environment. So as we saw that canary release and blue green deployment,

360
00:22:24,838 --> 00:22:28,314
both of them allow us to do that. We also want real

361
00:22:28,352 --> 00:22:32,014
time monitoring so that if there is issue during the

362
00:22:32,052 --> 00:22:35,358
rollout or even after the rollout, we are aware about it.

363
00:22:35,524 --> 00:22:39,162
Also, the deployment strategy should be able to handle

364
00:22:39,226 --> 00:22:43,006
any issues during the rollouts so that if

365
00:22:43,028 --> 00:22:47,058
there are any issues there is a graceful degradation, meaning that the entire

366
00:22:47,144 --> 00:22:51,458
application does not go down, some part of the application goes down. And finally,

367
00:22:51,624 --> 00:22:55,510
traffic control. Your deployment strategy should be able to also

368
00:22:55,660 --> 00:23:00,310
handle the traffic control complexities in the live environment.

369
00:23:00,890 --> 00:23:05,506
Here are some of the common challenges and pitfalls while implementing

370
00:23:05,538 --> 00:23:09,426
zero downtime deployment strategies. One is inadequate rollback

371
00:23:09,458 --> 00:23:12,774
procedure. So I have seen this multiple times where there are no rollback procedures

372
00:23:12,822 --> 00:23:16,906
and when something goes down then it gets very scary and difficult to roll back

373
00:23:16,928 --> 00:23:20,854
to the previous working deployment. Then overlooking

374
00:23:20,902 --> 00:23:24,666
any dependency management is also a common pitfall

375
00:23:24,698 --> 00:23:28,222
that I have seen insufficient load testing without

376
00:23:28,276 --> 00:23:31,118
load testing the application. If we go ahead and deploy, that can also be a

377
00:23:31,124 --> 00:23:34,602
very scary thing and can cause issues in the live environment.

378
00:23:34,746 --> 00:23:37,954
Ignoring database migrations, this is something that is very

379
00:23:37,992 --> 00:23:41,650
common. So if there is a migration in the newer version and

380
00:23:41,720 --> 00:23:44,674
that migration was not applied in the older version, and if you are going ahead

381
00:23:44,712 --> 00:23:48,294
with a blue green deployment, then your blue environment can go down or your green

382
00:23:48,332 --> 00:23:52,374
environment can go down if the migration is executed in one or the other

383
00:23:52,572 --> 00:23:56,018
environments. Neglecting user experience during rollouts

384
00:23:56,034 --> 00:23:59,994
is also a very common challenge because as

385
00:24:00,032 --> 00:24:04,054
you try to maintain two different states of your application there can be inconsistencies

386
00:24:04,102 --> 00:24:07,370
when the user hits both of the environments

387
00:24:07,790 --> 00:24:11,406
and finally complex monitoring configuration that

388
00:24:11,428 --> 00:24:15,146
is also one of the common challenges while creating these complex

389
00:24:15,258 --> 00:24:18,894
deployments strategies. So please be mindful of all of

390
00:24:18,932 --> 00:24:23,134
these common pitfalls and challenges so that your entire process

391
00:24:23,252 --> 00:24:26,894
and your life is a lot smoother. So we are done

392
00:24:26,932 --> 00:24:29,742
with the session. Thank you. Thanks a lot for sticking till this point.

393
00:24:29,796 --> 00:24:32,586
I hope that I was able to convey all of the topics in a manner

394
00:24:32,618 --> 00:24:36,054
that was helpful to you. If you want to connect with me

395
00:24:36,092 --> 00:24:39,782
you can find all of my links present on the screen right now. One easy

396
00:24:39,836 --> 00:24:42,438
way would be to scan the QR code on the left. It will take you

397
00:24:42,444 --> 00:24:45,862
to a page where all of my links are present. And also

398
00:24:45,916 --> 00:24:49,234
I have made the project that we used in the demo part of this session

399
00:24:49,282 --> 00:24:52,422
available on GitHub for you to access and use.

400
00:24:52,556 --> 00:24:55,780
So yeah I hope that you enjoyed this session and thank you for having.

