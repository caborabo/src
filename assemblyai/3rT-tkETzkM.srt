1
00:00:20,650 --> 00:00:24,480
Hi, thank you for coming to my talk. In this talk,

2
00:00:25,130 --> 00:00:29,510
we will look at functions and how to use them in Python programs.

3
00:00:30,170 --> 00:00:33,960
Don't worry if you haven't heard of functions before.

4
00:00:34,570 --> 00:00:37,786
This talk requires no prior knowledge of functions or

5
00:00:37,808 --> 00:00:41,014
category theory. The talk is for Python

6
00:00:41,062 --> 00:00:45,050
programmers and is designed for ease of understanding.

7
00:00:45,870 --> 00:00:49,546
There will be places where we will choose to simplify things at

8
00:00:49,568 --> 00:00:52,350
the expense of skipping some math details.

9
00:00:53,170 --> 00:00:57,262
The code examples are based on an open source Python package called

10
00:00:57,316 --> 00:01:01,498
funklift. The links to the GitHub repositories

11
00:01:01,594 --> 00:01:04,866
of funklift and its tutorials are shown on

12
00:01:04,888 --> 00:01:08,146
the slide. Before we move on

13
00:01:08,168 --> 00:01:11,266
to the meat of the talk, a quick introduction of myself.

14
00:01:11,448 --> 00:01:14,558
My name is Char Wu. I'm a software developer,

15
00:01:14,654 --> 00:01:18,578
grew up in Taiwan, and I'm based in the San Francisco Bay

16
00:01:18,594 --> 00:01:20,600
area for the past 20 years.

17
00:01:21,770 --> 00:01:25,142
Now, today's agenda is very simple. We will

18
00:01:25,196 --> 00:01:28,554
start with a motivating example and then we will

19
00:01:28,592 --> 00:01:32,490
introduce various functions with even more examples.

20
00:01:33,790 --> 00:01:37,434
Let's start with a simple function, get price that takes

21
00:01:37,472 --> 00:01:40,720
an item and returns the item's price.

22
00:01:41,250 --> 00:01:45,022
To visualize the code, we can draw types as dots and

23
00:01:45,076 --> 00:01:48,160
functions as arrows. As you can see,

24
00:01:48,770 --> 00:01:53,070
item is a dot in the diagram and int is also a dot.

25
00:01:53,510 --> 00:01:56,754
Get price is an arrow that goes from item to

26
00:01:56,792 --> 00:02:00,754
int. Now we have another function.

27
00:02:00,872 --> 00:02:04,462
It's pricey and we can draw it as an arrow

28
00:02:04,526 --> 00:02:08,342
as well. This time the arrow goes from int

29
00:02:08,396 --> 00:02:12,498
to bool. With those two functions,

30
00:02:12,674 --> 00:02:15,400
what interesting things can we do with them?

31
00:02:16,170 --> 00:02:19,898
Well, we can compose the two functions to form a

32
00:02:19,904 --> 00:02:24,022
new function. Notice that the composition

33
00:02:24,086 --> 00:02:27,414
of functions in code corresponds

34
00:02:27,462 --> 00:02:30,910
nicely to the composition of arrows in our diagram.

35
00:02:31,810 --> 00:02:35,006
A diagram like the one we are seeing here represents a

36
00:02:35,028 --> 00:02:37,070
category in category theory.

37
00:02:38,290 --> 00:02:42,646
Essentially, a category consists of dots and arrows,

38
00:02:42,778 --> 00:02:47,010
plus some properties about how arrows compose.

39
00:02:47,750 --> 00:02:51,074
We will call our category here the

40
00:02:51,112 --> 00:02:54,954
category of types. In this category,

41
00:02:55,102 --> 00:02:58,962
the dots are Python types and the arrows are Python

42
00:02:59,026 --> 00:03:02,786
functions. Now let's

43
00:03:02,818 --> 00:03:06,454
move on to see how functions are

44
00:03:06,492 --> 00:03:08,390
related to categories.

45
00:03:09,610 --> 00:03:12,914
Here we have a function is even that goes from into

46
00:03:12,972 --> 00:03:15,962
pool and we have a list of numbers.

47
00:03:16,096 --> 00:03:19,354
1234 we want to map is

48
00:03:19,392 --> 00:03:22,926
even over the numbers. One way to

49
00:03:22,948 --> 00:03:26,110
achieve that is by using this comprehension.

50
00:03:27,490 --> 00:03:31,294
Another way is to use the CDS class of the

51
00:03:31,332 --> 00:03:32,750
funklift package.

52
00:03:34,470 --> 00:03:38,674
As you can see from the code here, the CDS class

53
00:03:38,792 --> 00:03:40,930
has a method called fmap.

54
00:03:41,510 --> 00:03:45,374
Fmap takes the function is even and maps

55
00:03:45,422 --> 00:03:48,470
it over the list of numbers behind the scenes.

56
00:03:49,050 --> 00:03:52,310
On the outside, we can think of fmap as

57
00:03:52,380 --> 00:03:56,022
lifting is even to a function that goes

58
00:03:56,076 --> 00:03:59,530
from c list of int to c list of bool.

59
00:04:01,870 --> 00:04:05,242
If we put the is even function and its

60
00:04:05,296 --> 00:04:09,114
lifted counterpart side by side, we can see

61
00:04:09,152 --> 00:04:12,746
that C list is actually a mapping from a source

62
00:04:12,778 --> 00:04:14,830
category to a target category.

63
00:04:15,730 --> 00:04:18,974
Such a mapping is called a functor if

64
00:04:19,012 --> 00:04:22,474
it satisfies certain properties. In our

65
00:04:22,532 --> 00:04:26,414
case, C list is a functor. The source

66
00:04:26,462 --> 00:04:30,562
category and the target category of C list are

67
00:04:30,616 --> 00:04:34,590
both the category of types. A functor

68
00:04:34,670 --> 00:04:38,374
is called an functor when its source and

69
00:04:38,412 --> 00:04:40,680
target categories are the same.

70
00:04:43,870 --> 00:04:47,414
Okay, now that we've introduced

71
00:04:47,462 --> 00:04:50,170
the concepts of categories and functions,

72
00:04:51,150 --> 00:04:55,034
let's see some functions in

73
00:04:55,072 --> 00:04:59,322
action, and let's also see

74
00:04:59,376 --> 00:05:01,130
what problems they solve.

75
00:05:01,590 --> 00:05:04,770
It's common to have code

76
00:05:04,840 --> 00:05:08,786
that performs some kind of input or output. For example,

77
00:05:08,888 --> 00:05:12,910
we might have code that sends a request over a network,

78
00:05:13,070 --> 00:05:17,190
reads a file, or writes a record to a database.

79
00:05:17,930 --> 00:05:21,058
Such I O actions are side effects

80
00:05:21,154 --> 00:05:24,774
that make our code harder to reason about because they

81
00:05:24,812 --> 00:05:26,790
break referential transparency.

82
00:05:28,830 --> 00:05:32,442
Here on the side, the function get number side

83
00:05:32,496 --> 00:05:36,694
effect on the left has side effects because it reads user

84
00:05:36,742 --> 00:05:38,490
input from a console.

85
00:05:39,650 --> 00:05:43,322
To avoid such side effect, we can wrap

86
00:05:43,386 --> 00:05:47,120
the I O action into an instance of the I O class.

87
00:05:48,770 --> 00:05:52,178
With that, when we call the get number

88
00:05:52,264 --> 00:05:56,014
function on the right, no actual reading

89
00:05:56,062 --> 00:05:58,820
from the console will take place.

90
00:05:59,830 --> 00:06:03,374
Rather, we simply get an I O object that represents

91
00:06:03,422 --> 00:06:04,790
the I O action.

92
00:06:07,130 --> 00:06:11,222
The code here shows what we can do with the I O object

93
00:06:11,356 --> 00:06:15,430
returned by the get number function, even though

94
00:06:15,500 --> 00:06:19,322
no actual I O has happened yet. When we call get

95
00:06:19,376 --> 00:06:23,114
number, that does not stop us from mapping the is

96
00:06:23,152 --> 00:06:26,700
even function over the nonexistent number.

97
00:06:27,870 --> 00:06:31,514
Eventually, when we are finally ready to incur

98
00:06:31,562 --> 00:06:35,342
the actual I o, we would do so by

99
00:06:35,396 --> 00:06:38,702
coding the unsafe run method on

100
00:06:38,756 --> 00:06:39,920
the I o object.

101
00:06:42,370 --> 00:06:46,594
Although our example here is simple already, it shows that with

102
00:06:46,632 --> 00:06:50,034
the I O function, we are able to keep the kernel of

103
00:06:50,072 --> 00:06:53,314
our code free of side effects and

104
00:06:53,352 --> 00:06:56,774
push the actual I o actions to the boundary of our

105
00:06:56,812 --> 00:06:57,400
program.

106
00:07:00,170 --> 00:07:03,382
Now let's look at another example here.

107
00:07:03,436 --> 00:07:07,634
At the top we have a function that takes an integer and returns

108
00:07:07,762 --> 00:07:11,370
ten modulo that integer. The function

109
00:07:11,440 --> 00:07:14,506
is a partial functions because it's not defined when

110
00:07:14,528 --> 00:07:16,620
the input integer is zero.

111
00:07:17,630 --> 00:07:21,600
To fix that, we can write the function at the bottom.

112
00:07:22,850 --> 00:07:26,990
The function at the bottom is now defined for all input values.

113
00:07:27,330 --> 00:07:31,402
However, we now have a different issue, and that is

114
00:07:31,476 --> 00:07:35,810
the new function is not very composable with other functions.

115
00:07:37,910 --> 00:07:41,570
Here's an illustration of the lack of composability.

116
00:07:42,470 --> 00:07:45,874
As you can see, the code on the right tries

117
00:07:45,922 --> 00:07:48,280
to compose the two functions on the left,

118
00:07:48,970 --> 00:07:52,582
because the ten mark by functions returns either

119
00:07:52,636 --> 00:07:56,910
an integer or none. It is not very composable

120
00:07:57,090 --> 00:08:01,094
and we have to use if else statements when we try to compose

121
00:08:01,142 --> 00:08:04,634
it with other functions. Is there a

122
00:08:04,672 --> 00:08:08,134
solution that can turn a partial

123
00:08:08,182 --> 00:08:12,590
function into a total function while retaining composability?

124
00:08:13,650 --> 00:08:17,600
Yes, that solution is the option functions.

125
00:08:18,850 --> 00:08:22,494
As the example here shows, the ten

126
00:08:22,532 --> 00:08:25,940
mark by function now returns an option of int.

127
00:08:27,190 --> 00:08:31,282
The option class of the funklift package has

128
00:08:31,336 --> 00:08:35,234
a subclass called nothing and another subclass

129
00:08:35,282 --> 00:08:38,806
called sum. Nothing represents the

130
00:08:38,828 --> 00:08:42,054
absence of a value. On the other hand,

131
00:08:42,252 --> 00:08:45,480
sum represents the existence of a value.

132
00:08:46,430 --> 00:08:50,650
By the magic of functions and their fmap methods,

133
00:08:51,150 --> 00:08:55,206
we can compose ten map by with other functions

134
00:08:55,318 --> 00:08:57,980
without any if else statements in the code.

135
00:09:02,050 --> 00:09:05,418
Just like how we visualize c list as a functor,

136
00:09:05,514 --> 00:09:08,350
we can visualize option as a functor.

137
00:09:10,290 --> 00:09:14,274
The functor maps dots and arrows from

138
00:09:14,312 --> 00:09:17,090
a source category to a target category.

139
00:09:19,430 --> 00:09:22,610
So far we've been composing functions.

140
00:09:22,950 --> 00:09:27,000
It turns out that we can compose functions too.

141
00:09:28,250 --> 00:09:32,278
This diagram shows that we can compose the option

142
00:09:32,364 --> 00:09:34,520
functor and the c list function.

143
00:09:35,290 --> 00:09:38,940
The result of the composition is a new functions,

144
00:09:39,630 --> 00:09:43,130
and we call that new functions c list after

145
00:09:43,200 --> 00:09:47,130
option. Like any other functions,

146
00:09:47,280 --> 00:09:51,310
the new functions is a mapping between two categories.

147
00:09:52,050 --> 00:09:55,550
It maps dots to dots and arrows to arrows.

148
00:09:56,690 --> 00:10:00,202
If we can compose functors the way we compose

149
00:10:00,266 --> 00:10:04,014
arrows, does that mean functors are arrows

150
00:10:04,142 --> 00:10:06,050
in some sort of category?

151
00:10:07,670 --> 00:10:11,550
Notice that in this diagram, each rectangle

152
00:10:11,630 --> 00:10:15,234
represents a category. If we collapse

153
00:10:15,282 --> 00:10:18,662
the rectangles into dots, we will

154
00:10:18,716 --> 00:10:21,794
get a category whose dots are smaller

155
00:10:21,842 --> 00:10:25,270
categories and whose arrows are functions.

156
00:10:27,310 --> 00:10:30,730
Here's what that category looks like in a diagram.

157
00:10:31,710 --> 00:10:34,730
We call it the category of small categories.

158
00:10:36,990 --> 00:10:39,550
Of course, we don't just look at theories,

159
00:10:40,370 --> 00:10:43,360
we want to see some code, right? Absolutely.

160
00:10:45,250 --> 00:10:49,386
The code example on this side shows how to compose functions

161
00:10:49,418 --> 00:10:53,422
in python. Here, the variable nums

162
00:10:53,486 --> 00:10:56,290
is a c list of option objects.

163
00:10:57,110 --> 00:11:00,674
If we call fmap on nums, we will

164
00:11:00,712 --> 00:11:05,090
not be able to map over the numbers inside the option objects.

165
00:11:05,750 --> 00:11:09,786
In order to do that, we need to compose the two functions

166
00:11:09,838 --> 00:11:14,182
first to form a new functions, and we do that by

167
00:11:14,236 --> 00:11:17,930
using the compose class of the funklift package.

168
00:11:19,150 --> 00:11:23,002
Once we have the composite functions, we can call

169
00:11:23,136 --> 00:11:27,530
fmap on it, just like we do with any other functions.

170
00:11:28,110 --> 00:11:30,190
This is really fantastic.

171
00:11:33,240 --> 00:11:37,030
In this diagram, capital f denotes a functions.

172
00:11:38,280 --> 00:11:42,908
The functions we've seen so far are called covariant functions.

173
00:11:43,104 --> 00:11:46,680
Here, contravariant basically means

174
00:11:46,750 --> 00:11:49,928
that the two vertical arrows in

175
00:11:49,934 --> 00:11:53,672
the diagram point in the same direction. In other

176
00:11:53,726 --> 00:11:57,704
words, when a functor maps a source

177
00:11:57,752 --> 00:12:01,852
arrow to a target arrow, if the mapping does not change

178
00:12:01,906 --> 00:12:05,192
the direction of the arrows, then the functor

179
00:12:05,256 --> 00:12:06,620
is covariant.

180
00:12:09,220 --> 00:12:13,036
On the other hand, if the two vertical arrows

181
00:12:13,068 --> 00:12:16,480
in the diagram point in the opposite direction,

182
00:12:17,140 --> 00:12:20,320
then the functions is contravariant.

183
00:12:21,160 --> 00:12:25,056
For covariant functions we have the fmap method.

184
00:12:25,248 --> 00:12:29,140
For contravariant functions we have the cmap method.

185
00:12:29,960 --> 00:12:33,764
Similar to fmap, the cmap method

186
00:12:33,892 --> 00:12:37,624
lifts a function from type a to type b to

187
00:12:37,662 --> 00:12:41,224
a function that goes from f of b to f of

188
00:12:41,262 --> 00:12:44,904
a. Here's an

189
00:12:44,942 --> 00:12:48,620
example of a contravariant function called predicate.

190
00:12:49,280 --> 00:12:53,180
A predicate is something that is either true or false.

191
00:12:53,760 --> 00:12:57,128
In our example, we first have a predicate

192
00:12:57,224 --> 00:13:00,400
that will be true if we give it an even

193
00:13:00,470 --> 00:13:04,784
integer, and as the diagram shows,

194
00:13:04,982 --> 00:13:09,408
we can use cmap to convert that predicate of int into

195
00:13:09,494 --> 00:13:11,110
a predicate of str.

196
00:13:12,520 --> 00:13:15,924
With the converted predicate we can pass it the

197
00:13:15,962 --> 00:13:19,764
number six as a string, and it will tell us

198
00:13:19,882 --> 00:13:23,110
if that's an even number or not.

199
00:13:26,840 --> 00:13:30,260
The next type of functions we will look at is called

200
00:13:30,330 --> 00:13:34,292
applicative functions. Before we

201
00:13:34,346 --> 00:13:37,992
introduce applicative functor, we need to first get to know

202
00:13:38,046 --> 00:13:41,800
a special kind of categories called closed category.

203
00:13:43,420 --> 00:13:46,760
In the diagram on the side, there are two categories.

204
00:13:47,500 --> 00:13:50,744
The category on the left has a dot

205
00:13:50,792 --> 00:13:53,550
for type a and a dot for type b.

206
00:13:54,480 --> 00:13:57,564
If the category also has a dot in

207
00:13:57,602 --> 00:14:01,150
gray for the functions type a to b,

208
00:14:01,920 --> 00:14:05,184
plus some other properties, then the

209
00:14:05,222 --> 00:14:08,000
category is called a closed category.

210
00:14:09,140 --> 00:14:13,036
An example of a function type is into bool,

211
00:14:13,228 --> 00:14:15,350
as shown in the blue box.

212
00:14:16,760 --> 00:14:20,550
Now let's turn our attention to the category on the right.

213
00:14:21,480 --> 00:14:24,710
The category has a dot for the type

214
00:14:25,080 --> 00:14:28,650
f of a and a dot for the type f of b.

215
00:14:29,100 --> 00:14:32,776
Because it's also a closed category, it has a

216
00:14:32,798 --> 00:14:36,456
dot for the function type f of a to

217
00:14:36,558 --> 00:14:40,396
f of b in green. Between the

218
00:14:40,418 --> 00:14:44,284
two categories we have a functions that maps dots to

219
00:14:44,322 --> 00:14:47,916
dots and arrows to arrows. In particular,

220
00:14:48,098 --> 00:14:51,740
the functor maps the gray dot a to b

221
00:14:51,810 --> 00:14:54,960
on the left to the blue dot,

222
00:14:55,620 --> 00:14:58,640
f of a to b on the right in blue.

223
00:15:02,420 --> 00:15:05,904
Now, it may be the case that the blue dot

224
00:15:05,952 --> 00:15:09,670
and the green dot are not related at all.

225
00:15:10,120 --> 00:15:13,812
However, if they happen to be one and the same

226
00:15:13,866 --> 00:15:17,924
dot, then we say that the functor preserves

227
00:15:17,972 --> 00:15:21,256
the structure of the source category, and we

228
00:15:21,278 --> 00:15:24,920
call the functor a strict closed functor.

229
00:15:28,780 --> 00:15:32,876
Requiring the blue dot and the green dot to be the same dot is a

230
00:15:32,898 --> 00:15:36,652
rather strict condition. A somewhat more

231
00:15:36,706 --> 00:15:40,396
relaxed condition is to

232
00:15:40,578 --> 00:15:43,170
not require the two dots to be the same.

233
00:15:43,620 --> 00:15:47,216
Instead, we merely require that there's an

234
00:15:47,318 --> 00:15:51,088
arrow between the two dots in such a case

235
00:15:51,254 --> 00:15:54,770
we call the functions a lex closed functions.

236
00:15:55,880 --> 00:16:01,970
Another name for another

237
00:16:02,040 --> 00:16:05,602
name for next for next closed functions is

238
00:16:05,656 --> 00:16:06,980
applicative functions,

239
00:16:09,050 --> 00:16:12,502
and we call the arrow between

240
00:16:12,636 --> 00:16:16,120
the blue dot and the green dot app.

241
00:16:19,420 --> 00:16:22,764
That's a lot of theory. Let's see an example in

242
00:16:22,802 --> 00:16:23,390
code.

243
00:16:25,760 --> 00:16:29,576
Here we have a curried function for summing two integers.

244
00:16:29,768 --> 00:16:33,500
Currying means if a function takes multiple arguments,

245
00:16:33,840 --> 00:16:37,810
then the current function will take one argument at a time.

246
00:16:38,660 --> 00:16:41,996
In this example, we start with sum

247
00:16:42,028 --> 00:16:46,144
of 20. Then we f map the current

248
00:16:46,182 --> 00:16:50,070
read function over it.

249
00:16:50,920 --> 00:16:54,196
What we end up with is an option of end

250
00:16:54,218 --> 00:16:58,164
to end, which is shown as the

251
00:16:58,202 --> 00:17:01,848
blue dot in the diagram. Because our option

252
00:17:01,934 --> 00:17:05,464
functions is an applicative function, we have the

253
00:17:05,502 --> 00:17:08,856
app arrow that takes us from the blue dot to the

254
00:17:08,878 --> 00:17:12,116
green dot. The green dot

255
00:17:12,148 --> 00:17:15,804
is essentially a function that takes an option of

256
00:17:15,842 --> 00:17:19,836
int and returns another option of int. So if

257
00:17:19,858 --> 00:17:23,980
we give that function sum of 30, we will get back

258
00:17:24,050 --> 00:17:26,290
sum of 50 as the result.

259
00:17:30,110 --> 00:17:33,414
Next, let's turn our attention to a kind of functions

260
00:17:33,462 --> 00:17:36,646
called functors in Python.

261
00:17:36,838 --> 00:17:39,420
If we have a type a and a type c,

262
00:17:40,270 --> 00:17:44,000
we can form the tuple type a comma c.

263
00:17:44,610 --> 00:17:48,142
Similarly, if we have a type b and a type

264
00:17:48,196 --> 00:17:52,354
d, we can form a tuple type

265
00:17:52,552 --> 00:17:56,226
b comma d. And if

266
00:17:56,248 --> 00:18:00,050
there's an arrow from a to b and another

267
00:18:00,120 --> 00:18:03,902
arrow from c to d, we can take those two arrows

268
00:18:03,966 --> 00:18:07,414
and form a tuple of arrows that goes from

269
00:18:07,532 --> 00:18:10,520
a comma c to b comma d.

270
00:18:15,330 --> 00:18:19,234
Now, if we have a functions that maps a comma c

271
00:18:19,352 --> 00:18:22,766
to f of a comma c and b comma

272
00:18:22,798 --> 00:18:25,220
d to f of b comma d,

273
00:18:26,550 --> 00:18:30,402
and the functor also maps the tuple of arrows to

274
00:18:30,456 --> 00:18:34,022
a lifted tuple of arrows, then we call

275
00:18:34,076 --> 00:18:38,550
such functor a functor. In python code,

276
00:18:38,700 --> 00:18:41,830
a functor class takes only one type argument,

277
00:18:42,330 --> 00:18:46,410
whereas a functor class takes two type arguments.

278
00:18:47,790 --> 00:18:51,334
Let's see an example of a functor. The functor

279
00:18:51,382 --> 00:18:54,966
in the example is the either class from the funk devt

280
00:18:54,998 --> 00:18:58,442
package. As its name suggests,

281
00:18:58,586 --> 00:19:01,790
either represents one of two possibilities.

282
00:19:02,450 --> 00:19:06,426
We represent those two possibilities with two classes

283
00:19:06,618 --> 00:19:10,510
left and right. In the coexample,

284
00:19:10,950 --> 00:19:14,850
we take two functions, add one and negate,

285
00:19:15,590 --> 00:19:19,250
and we by map them

286
00:19:19,400 --> 00:19:23,000
over an either object.

287
00:19:24,490 --> 00:19:27,560
Because the either object is a write object,

288
00:19:28,010 --> 00:19:31,334
the negate function will have no effect, and the

289
00:19:31,372 --> 00:19:35,160
add one function will be applied to the number five.

290
00:19:40,380 --> 00:19:44,696
Like functor, there's a kind of functors called profunctors

291
00:19:44,808 --> 00:19:49,144
that also takes two type arguments. The difference

292
00:19:49,282 --> 00:19:53,104
is a functor is covariant in

293
00:19:53,142 --> 00:19:56,668
both of its type arguments whereas a profunctors

294
00:19:56,764 --> 00:20:00,672
is contravariant in the first type argument and

295
00:20:00,726 --> 00:20:03,620
covariant in the second type argument.

296
00:20:04,840 --> 00:20:08,596
The diagram here is very similar to the diagram we

297
00:20:08,618 --> 00:20:12,644
saw earlier for functors, the only difference is

298
00:20:12,682 --> 00:20:16,600
that the arrow between type a and type

299
00:20:16,670 --> 00:20:18,440
b is flipped.

300
00:20:25,560 --> 00:20:28,884
A perhaps very helpful way for visualizing how

301
00:20:28,922 --> 00:20:32,584
a profunctors works is through a diagram like

302
00:20:32,622 --> 00:20:36,372
the one at the bottom. We can visualize

303
00:20:36,436 --> 00:20:40,424
a profounder p of a

304
00:20:40,462 --> 00:20:44,252
comma c as a box that takes an a and

305
00:20:44,306 --> 00:20:48,328
outputs a c. When we call dimap

306
00:20:48,424 --> 00:20:51,576
on the profounder with fng,

307
00:20:51,768 --> 00:20:55,244
we get back a new profounder that takes

308
00:20:55,282 --> 00:20:58,290
a b and outputs a d.

309
00:21:02,500 --> 00:21:05,952
There are many different profunctors. One of them is called

310
00:21:06,006 --> 00:21:09,732
forget it always returns some

311
00:21:09,786 --> 00:21:13,396
value of type r, no matter what type of

312
00:21:13,418 --> 00:21:15,430
input value you give it.

313
00:21:17,160 --> 00:21:21,220
Star and costar are two other kinds of profunctors.

314
00:21:21,640 --> 00:21:25,030
The symbol f here represents a functions.

315
00:21:25,480 --> 00:21:28,952
So starf takes an a and

316
00:21:29,006 --> 00:21:30,890
returns an f of c.

317
00:21:33,180 --> 00:21:36,860
When you die map on it, you can turn it into

318
00:21:36,930 --> 00:21:41,096
a new star f that takes a b and returns

319
00:21:41,128 --> 00:21:42,430
an f of D.

320
00:21:45,200 --> 00:21:48,880
Here's a cold example of the star profunctors.

321
00:21:49,460 --> 00:21:54,000
The star profunctors takes an integer and returns

322
00:21:54,340 --> 00:21:57,744
an option of int. If we give

323
00:21:57,782 --> 00:22:01,540
it integer three, it will give us sum of one

324
00:22:01,690 --> 00:22:04,310
because ten mod by three is one.

325
00:22:05,080 --> 00:22:08,100
If we pass zero to the profunctors,

326
00:22:08,440 --> 00:22:12,264
it will give us nothing because ten mod by zero is not

327
00:22:12,302 --> 00:22:13,720
a valid operation.

328
00:22:16,300 --> 00:22:20,116
We can take the star profunctors and die map

329
00:22:20,148 --> 00:22:24,220
on it with the stir to int

330
00:22:24,290 --> 00:22:28,252
function on the way in and with the is

331
00:22:28,306 --> 00:22:30,350
even function on the way out.

332
00:22:32,320 --> 00:22:35,692
What we end up with is a new profunctors that

333
00:22:35,746 --> 00:22:39,120
takes a string and returns an option of bool.

334
00:22:39,860 --> 00:22:43,570
As you can see, the code example we have

335
00:22:45,860 --> 00:22:49,844
starts to look like some sort of data pipelines that

336
00:22:49,882 --> 00:22:53,030
can be chained and compose in flexible ways.

337
00:22:53,560 --> 00:22:57,140
And that's indeed a good application of profunctors.

338
00:22:58,360 --> 00:23:01,510
Congratulations for making it to this point.

339
00:23:02,280 --> 00:23:05,990
We've covered a lot in a fairly short amount of time.

340
00:23:06,440 --> 00:23:10,016
In summary, we've introduced the concept

341
00:23:10,128 --> 00:23:14,200
of categories. Then we covered variant

342
00:23:14,280 --> 00:23:18,636
contravariant closed applicative functions as

343
00:23:18,658 --> 00:23:21,660
well as functors and profunctors.

344
00:23:22,160 --> 00:23:24,330
Hope you all enjoyed the talk. Thank you.

