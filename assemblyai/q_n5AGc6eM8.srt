1
00:00:23,960 --> 00:00:28,068
Thanks for joining me here for my talk leveraging cloud abstractions

2
00:00:28,196 --> 00:00:31,076
to drive generative AI, scalability,

3
00:00:31,180 --> 00:00:33,184
efficiency and diverse applications.

4
00:00:34,244 --> 00:00:37,996
This talk is based on my own personal views and hopefully adds value

5
00:00:38,060 --> 00:00:41,868
to you. In this talk, we'll go over basics

6
00:00:41,916 --> 00:00:45,260
of Chenai cloud abstractions and how

7
00:00:45,292 --> 00:00:48,964
cloud abstractions fuel the Chenai use cases. We'll also

8
00:00:49,004 --> 00:00:52,692
see some of the industry transformative use cases with the advent of

9
00:00:52,708 --> 00:00:56,144
genai running on the shoulders of abstractions.

10
00:00:56,884 --> 00:01:00,744
So the content of this talk is introduction to GenAi

11
00:01:01,244 --> 00:01:04,996
as well as cloud abstraction, cloud abstractions by

12
00:01:05,020 --> 00:01:09,172
examples and then we'll switch over to how genai

13
00:01:09,228 --> 00:01:12,364
deployment occurs, what are the different

14
00:01:12,484 --> 00:01:16,344
strategies behind it, what are the different building blocks around it,

15
00:01:16,844 --> 00:01:20,622
how cloud abstraction benefits, and what is

16
00:01:20,638 --> 00:01:24,430
the cloud adoption in general in our industry? Then we'll

17
00:01:24,462 --> 00:01:27,870
talk about we'll specifically talk about healthcare and

18
00:01:27,902 --> 00:01:32,374
creative content. So direction to Gen AI Genai

19
00:01:32,454 --> 00:01:35,926
is generative artificial intelligence. It is a subset

20
00:01:35,950 --> 00:01:39,334
of deep learning that employs training on

21
00:01:39,374 --> 00:01:42,542
supervised, semi supervised, or even unsupervised

22
00:01:42,598 --> 00:01:45,834
learnings. It differs from the

23
00:01:47,274 --> 00:01:50,714
in the manner it operates. That is, it creates new

24
00:01:50,754 --> 00:01:54,530
content is no more identifying a

25
00:01:54,562 --> 00:01:58,226
cat, but producing a cat out

26
00:01:58,250 --> 00:02:02,050
of the data it was trained on. In simple terms,

27
00:02:02,242 --> 00:02:06,290
Genai is a kind of AI that can produce output

28
00:02:06,442 --> 00:02:09,442
in multiple formats like text,

29
00:02:09,618 --> 00:02:12,948
audio, images, animations, you name it.

30
00:02:13,146 --> 00:02:17,056
This is a huge leap from being able to just pattern,

31
00:02:17,120 --> 00:02:20,204
match, recommend or identify the objects.

32
00:02:20,864 --> 00:02:23,768
Genai has emerged as a transformative technology,

33
00:02:23,936 --> 00:02:27,816
enabling machines to create advanced context aware

34
00:02:27,880 --> 00:02:31,360
outputs across various domains. Some of the

35
00:02:31,392 --> 00:02:33,324
popular examples are Delhi,

36
00:02:33,624 --> 00:02:37,124
Chatgpt, Gemini, Firefly,

37
00:02:37,984 --> 00:02:41,676
next, lithium. In our talk it is really important

38
00:02:41,740 --> 00:02:45,876
to understand do they deploy? So let's

39
00:02:45,900 --> 00:02:49,636
start with foundational models, also known

40
00:02:49,660 --> 00:02:53,020
as FM's. So foundational model

41
00:02:53,092 --> 00:02:56,548
is an AI neural network trained on huge

42
00:02:56,596 --> 00:03:00,380
raw data, generally with unsupervised learning that

43
00:03:00,412 --> 00:03:04,024
can be adapted to accomplish a broad range of tasks.

44
00:03:04,324 --> 00:03:08,074
It is a multimodal in nature, meaning it can interact

45
00:03:08,114 --> 00:03:11,934
from text to text, text to or any other combination.

46
00:03:12,794 --> 00:03:16,138
GPT clip next is LLM.

47
00:03:16,226 --> 00:03:19,454
LLMs are subset of foundational models,

48
00:03:20,114 --> 00:03:23,694
but they are specifically trained on a large neural language data set.

49
00:03:24,394 --> 00:03:28,290
They are specifically designed for generating human

50
00:03:28,362 --> 00:03:30,494
language based use cases.

51
00:03:31,994 --> 00:03:35,210
Train model the train model is the

52
00:03:35,242 --> 00:03:38,642
instance of model which includes learn parameters

53
00:03:38,698 --> 00:03:41,962
and weights. This is a crucial component. This is

54
00:03:41,978 --> 00:03:45,574
the model which generates new content based on different conditions.

55
00:03:46,434 --> 00:03:49,334
The next building block is inference code.

56
00:03:49,794 --> 00:03:53,494
This is typically a bridge between model and your application.

57
00:03:54,234 --> 00:03:57,322
This handles interaction with the train model.

58
00:03:57,458 --> 00:04:00,012
It manages input processing,

59
00:04:00,148 --> 00:04:03,436
encoding, decoding and even managing the

60
00:04:03,460 --> 00:04:07,132
generation process. This component ensures that the user

61
00:04:07,188 --> 00:04:10,476
applications can effectively building block

62
00:04:10,540 --> 00:04:13,144
in GenaI would be data pipelines.

63
00:04:13,844 --> 00:04:17,276
Those pipelines are required for pre

64
00:04:17,300 --> 00:04:21,508
processing input data or formatting the output data. These pipelines

65
00:04:21,556 --> 00:04:25,364
ensure that the input data is correctly formatted.

66
00:04:26,184 --> 00:04:30,136
Next we have to send and receive in

67
00:04:30,160 --> 00:04:33,964
form of web or app layer. This allows application to send request

68
00:04:34,384 --> 00:04:38,256
which would be text prompts or image conditions and receive

69
00:04:38,320 --> 00:04:42,632
generated outputs that would be generated text images or

70
00:04:42,648 --> 00:04:46,008
generated text itself in response. A simple example

71
00:04:46,056 --> 00:04:49,696
would be Delhi where you go and

72
00:04:49,720 --> 00:04:53,000
you prompt and then you get the output back.

73
00:04:53,072 --> 00:04:57,000
So Delhi would have a API running or the UI running

74
00:04:57,152 --> 00:05:02,200
to process your request. Other example could be moving

75
00:05:02,272 --> 00:05:05,044
now to the what is cloud abstractions?

76
00:05:06,024 --> 00:05:10,696
Well, cloud abstractions are the mechanisms to hide the

77
00:05:10,760 --> 00:05:14,056
internal and complex detail of infrastructure

78
00:05:14,160 --> 00:05:18,878
where somehow cloud abstractions empower running of services.

79
00:05:19,046 --> 00:05:23,326
Application bad job. Streaming models consider

80
00:05:23,390 --> 00:05:27,022
the abstraction as a filter to put away the complex detail

81
00:05:27,078 --> 00:05:30,622
asides to be able to see. Now there are different types

82
00:05:30,638 --> 00:05:34,086
of established abstractions which have been in our industry

83
00:05:34,230 --> 00:05:37,790
since few years now. Those are infrastructure

84
00:05:37,822 --> 00:05:40,334
as a service, platform as a service,

85
00:05:40,494 --> 00:05:43,594
software as a service and function as a service.

86
00:05:44,034 --> 00:05:48,694
The last one is the latest entry into the field of extractions.

87
00:05:49,594 --> 00:05:53,258
It is also known as serverless computing. We will talk about

88
00:05:53,426 --> 00:05:57,098
these all entities, but let's talk about them

89
00:05:57,186 --> 00:06:00,650
in a real world analogy. We can relate

90
00:06:00,682 --> 00:06:04,034
to it quickly. I'm pretty sure everybody has gone through

91
00:06:04,074 --> 00:06:07,610
the pain of buying a house or renting a room.

92
00:06:07,762 --> 00:06:11,488
So probably this. Let's start with infrastructure as

93
00:06:11,496 --> 00:06:15,184
a service. Infrastructure as a service is a foundational

94
00:06:15,344 --> 00:06:19,152
abstraction where the tier zero resources

95
00:06:19,288 --> 00:06:22,624
like virtual machines, storage, disk network bandwidth,

96
00:06:22,704 --> 00:06:26,104
etcetera provided to you. You don't

97
00:06:26,144 --> 00:06:29,032
have to build your own data center to get those.

98
00:06:29,128 --> 00:06:33,368
That's the idea behind it. Someone like Amazon or Google

99
00:06:33,536 --> 00:06:37,164
or Oracle will provide these resources to you so that you

100
00:06:37,964 --> 00:06:41,424
ec two Google compute engine Azure.

101
00:06:42,844 --> 00:06:46,396
Compare this to the land you get

102
00:06:46,540 --> 00:06:51,108
from a builder so that you don't have to do all

103
00:06:51,156 --> 00:06:54,524
the work of identifying the land going

104
00:06:54,564 --> 00:06:59,052
through different regulatory in

105
00:06:59,068 --> 00:07:01,704
order to build your home. You just out of the box,

106
00:07:02,524 --> 00:07:05,890
you get the land and you start building your own home on top of it.

107
00:07:05,972 --> 00:07:09,430
That would be example of iis. The next layer

108
00:07:09,462 --> 00:07:13,022
would be PaaS or the platform as a service which offers a managed

109
00:07:13,078 --> 00:07:16,310
platform for deploying applications without the

110
00:07:16,342 --> 00:07:19,726
need to manage the underlying infrastructure. You don't need to

111
00:07:19,750 --> 00:07:23,246
set up your own subnet or routing or

112
00:07:23,270 --> 00:07:25,914
firewalls if you operate on PaaS.

113
00:07:26,454 --> 00:07:29,910
Example would be Heroku. Let's say that you're not

114
00:07:29,942 --> 00:07:33,426
building homes, you don't just want

115
00:07:33,450 --> 00:07:36,890
the land, but you also want a home. And you're thinking to

116
00:07:36,922 --> 00:07:40,322
probably use your expertise in up leveling the rooms,

117
00:07:40,418 --> 00:07:44,706
right? But there could be times where

118
00:07:44,770 --> 00:07:47,614
you don't hide to build the room.

119
00:07:48,474 --> 00:07:52,546
You can customize your room, but you're not interested in building

120
00:07:52,610 --> 00:07:56,394
your room or building a house or getting a land. So that

121
00:07:56,434 --> 00:07:59,964
is something which is known as SAS software as a service.

122
00:08:01,064 --> 00:08:03,964
Shopify HubSpot are common examples of it.

123
00:08:04,544 --> 00:08:08,784
SAS provides capabilities to

124
00:08:08,944 --> 00:08:12,644
companies and developers so that they can focus on their product

125
00:08:13,304 --> 00:08:17,164
and they can build their product on a manage.

126
00:08:18,184 --> 00:08:21,976
You might have heard about function as a service or as I mentioned,

127
00:08:22,120 --> 00:08:25,502
serverless computing. This is the latest entry

128
00:08:25,558 --> 00:08:29,198
in abstractions where you

129
00:08:29,246 --> 00:08:33,714
just get the room, rent a room, and so

130
00:08:35,614 --> 00:08:39,274
it's basically serverless computing where you're in your full application,

131
00:08:39,974 --> 00:08:45,430
you can execute your functionality and

132
00:08:45,582 --> 00:08:49,046
run that functionality on an existing server.

133
00:08:49,230 --> 00:08:53,688
For example Google cloud functions or Amazon Lambda example

134
00:08:53,736 --> 00:08:58,344
could be trigger based counter which when

135
00:08:58,384 --> 00:09:02,232
there is a. When there is a. Okay, now you

136
00:09:02,248 --> 00:09:05,584
have seen some narrative

137
00:09:05,624 --> 00:09:09,616
about cloud abstractions and what are those? Let's move on

138
00:09:09,760 --> 00:09:13,408
to the so what is Genai deployment

139
00:09:13,456 --> 00:09:16,728
story? Like any other distributed system,

140
00:09:16,816 --> 00:09:23,776
Genai system is a combination of different components in

141
00:09:23,800 --> 00:09:26,880
order to ensure the use case is

142
00:09:26,912 --> 00:09:30,008
being served. When you go to chat GPT,

143
00:09:30,056 --> 00:09:33,984
for example, when you enter any text prompt,

144
00:09:34,064 --> 00:09:37,656
it doesn't give you the answer by itself. It actually

145
00:09:37,720 --> 00:09:41,424
has a lot of revolving pieces that is needed

146
00:09:41,464 --> 00:09:45,056
there to empower that. So some

147
00:09:45,080 --> 00:09:48,652
of the, some of the building blocks

148
00:09:48,668 --> 00:09:52,276
we have talked about it would be models, inference code,

149
00:09:52,380 --> 00:09:56,308
data pipelines, web services, and there are few

150
00:09:56,436 --> 00:10:00,612
behind the scene which would be monitoring and alerting some

151
00:10:00,628 --> 00:10:03,964
of the infrastructure pieces like load balancer gateways,

152
00:10:04,044 --> 00:10:07,464
auto scaling groups, some of the integration services,

153
00:10:08,404 --> 00:10:12,304
CICD and some of the regulatory and security gates.

154
00:10:12,884 --> 00:10:16,788
So if you closely see there

155
00:10:16,796 --> 00:10:21,092
are numerous components behind Genai and

156
00:10:21,228 --> 00:10:25,020
we need to deploy that, let's see how those

157
00:10:25,052 --> 00:10:29,108
are being deployed. Various ways or strategies to deploy these

158
00:10:29,156 --> 00:10:33,212
components we talked about in previous slide in order to have

159
00:10:33,268 --> 00:10:36,064
an end to end gen capable system,

160
00:10:37,244 --> 00:10:40,068
there are three major deployment strategies.

161
00:10:40,236 --> 00:10:43,580
First would be in house or private deployment. Second would

162
00:10:43,612 --> 00:10:47,300
be hybrid deployment. The third or the one is

163
00:10:47,332 --> 00:10:52,756
SAS deployment. So the in house deployment

164
00:10:52,820 --> 00:10:56,340
is basically gives you end to end control, but it

165
00:10:56,372 --> 00:10:59,464
also involves managing everything on your own.

166
00:11:00,684 --> 00:11:03,900
And different organizations could choose different ways of deploying

167
00:11:03,932 --> 00:11:06,712
this depending upon the requirement,

168
00:11:06,888 --> 00:11:10,536
regulatory requirement, data privacy requirement and their

169
00:11:10,560 --> 00:11:14,160
resources. But a common theme which

170
00:11:14,192 --> 00:11:17,672
we will try to extract from all three would be that

171
00:11:17,808 --> 00:11:21,632
the cloud based deployments are a common theme across

172
00:11:21,688 --> 00:11:22,884
the industries.

173
00:11:24,784 --> 00:11:28,688
So in house deployments basically means

174
00:11:28,736 --> 00:11:32,092
that, you know, having the foundational models,

175
00:11:32,188 --> 00:11:35,584
the LLMs, everything in house in your own data centers,

176
00:11:36,044 --> 00:11:39,468
running everything in house, including the app,

177
00:11:39,636 --> 00:11:43,316
including the service layer. And that requires a lot

178
00:11:43,340 --> 00:11:47,144
of resources, computational resources as well as

179
00:11:47,524 --> 00:11:52,804
expertise. Example would be generative

180
00:11:52,964 --> 00:11:55,424
AI system in the autonomous driving,

181
00:11:55,894 --> 00:11:59,438
which few car companies

182
00:11:59,526 --> 00:12:03,566
have done on their own. They're using Nvidia system

183
00:12:03,710 --> 00:12:06,954
for training and inference. And that's obviously

184
00:12:08,054 --> 00:12:11,634
even if you go this route of private deployment,

185
00:12:12,374 --> 00:12:15,790
most of the organization which are doing this would have some

186
00:12:15,822 --> 00:12:19,806
kind of orchestration tools to manage the resources and

187
00:12:19,830 --> 00:12:23,060
provide the rights of sections. Maybe they are using Tupperware,

188
00:12:23,182 --> 00:12:27,144
maybe they're using Borg or Kubernetes or just Mesos,

189
00:12:27,224 --> 00:12:29,204
but they have some kind of empower this.

190
00:12:32,184 --> 00:12:35,944
A recent example would be a healthcare provider could

191
00:12:35,984 --> 00:12:39,504
develop a Genai powered medical assistant website in house,

192
00:12:39,664 --> 00:12:43,264
leveraging their own FM's and LLMs to provide personal

193
00:12:43,344 --> 00:12:47,144
patient support. This approach allows for complete control

194
00:12:47,224 --> 00:12:50,764
of sensitive patient data and ensures regulations.

195
00:12:51,344 --> 00:12:55,568
The other use case I confuse defense where there

196
00:12:55,616 --> 00:13:00,112
would be a stricter next is hybrid deployment.

197
00:13:00,288 --> 00:13:04,072
In hybrid deployment, organizations can choose to use

198
00:13:04,168 --> 00:13:07,296
third party or openly available models,

199
00:13:07,440 --> 00:13:10,744
be it foundational models or pre trained models or even pre

200
00:13:10,784 --> 00:13:14,184
trained APIs to bootstrap their applications to use

201
00:13:14,224 --> 00:13:18,020
them. The application code could

202
00:13:18,052 --> 00:13:21,988
still be in house while some of the models may be in the cloud.

203
00:13:22,116 --> 00:13:25,900
Hence the hybrid model libraries such as model

204
00:13:26,012 --> 00:13:29,716
Garden from Google is one of the example where

205
00:13:29,780 --> 00:13:34,092
you actually have the offering to choose whatever model

206
00:13:34,148 --> 00:13:35,944
you would like as per your resource.

207
00:13:37,324 --> 00:13:40,652
There are advanced offerings in this field, for example

208
00:13:40,708 --> 00:13:44,170
vertex, AI or sagemaker where you get not

209
00:13:44,202 --> 00:13:49,130
only the model but end to end platform which

210
00:13:49,242 --> 00:13:53,610
empowers you to get services from

211
00:13:53,722 --> 00:13:58,106
exters. Example would be many

212
00:13:58,170 --> 00:14:01,970
organizations would opt for a hybrid approach using

213
00:14:02,042 --> 00:14:05,426
pre built GenAi services like OpenAI GPT-3

214
00:14:05,570 --> 00:14:07,974
to accelerate development and reduce cost.

215
00:14:08,494 --> 00:14:12,726
This approach allows companies to focus on their core

216
00:14:12,750 --> 00:14:17,514
competencies while benefiting from the so

217
00:14:18,174 --> 00:14:21,350
this hybrid deployment could be applicable to most

218
00:14:21,382 --> 00:14:25,774
of the use cases today where the regulatory running

219
00:14:25,814 --> 00:14:29,294
application in house or managed services like Google or

220
00:14:29,334 --> 00:14:34,074
AWS. In a hybrid model also the organizations

221
00:14:34,444 --> 00:14:38,644
will have to basically use

222
00:14:38,724 --> 00:14:42,996
some of the abstractions with the flexibility they

223
00:14:43,020 --> 00:14:46,980
can actually as needed. Next would

224
00:14:47,012 --> 00:14:50,140
be the SAS deployment. In this deployment

225
00:14:50,252 --> 00:14:53,676
the clients get access to variety of

226
00:14:53,700 --> 00:14:57,844
models, variety of tools, variety of tools

227
00:14:57,884 --> 00:15:01,816
to tune the models and also automated

228
00:15:01,880 --> 00:15:05,152
to production lies. The models can also

229
00:15:05,208 --> 00:15:08,776
be same or different cloud, so no

230
00:15:08,800 --> 00:15:12,720
need of running in house anything. So that would be example

231
00:15:12,752 --> 00:15:16,528
of SAS deployment. A lot of cloud vendors who

232
00:15:16,536 --> 00:15:19,600
are providing these abstractions. They are right now

233
00:15:19,632 --> 00:15:23,024
providing it with right controls, be it GDPR

234
00:15:23,184 --> 00:15:24,484
or any other regulatory.

235
00:15:26,634 --> 00:15:29,654
Google AI studio is one such example.

236
00:15:30,034 --> 00:15:33,586
The low or no code deployment model

237
00:15:33,650 --> 00:15:37,146
is the new entry in this

238
00:15:37,290 --> 00:15:40,690
abstraction field where it is an extension

239
00:15:40,722 --> 00:15:44,854
of SAS deployment where you just don't need to even write the code

240
00:15:45,434 --> 00:15:50,234
and you drag and drop. So you drag and drop your

241
00:15:50,274 --> 00:15:53,724
features and you have the funnel.

242
00:15:56,344 --> 00:15:59,976
There are app builder solutions which are 100% in cloud

243
00:16:00,080 --> 00:16:03,976
which gives the apps without knowing how to

244
00:16:04,000 --> 00:16:08,364
write the code. Chatbots Knowledge systems these are the common

245
00:16:08,784 --> 00:16:12,416
use cases for this type of now

246
00:16:12,440 --> 00:16:16,144
that we have seen different type of deployment strategies, let's see

247
00:16:16,264 --> 00:16:21,644
how cloud abstractions benefit

248
00:16:21,804 --> 00:16:25,700
genai underneath. So in all the different ways

249
00:16:25,732 --> 00:16:29,492
of genai deployment strategies we have seen, there is

250
00:16:29,508 --> 00:16:32,664
a need to manage the resources.

251
00:16:33,444 --> 00:16:36,596
Even if you run on Amazon or your own data center,

252
00:16:36,660 --> 00:16:39,224
you can't burn your resources.

253
00:16:39,564 --> 00:16:43,092
So the cloud abstractions provide

254
00:16:43,148 --> 00:16:47,604
you efficient resources. They focus on

255
00:16:47,944 --> 00:16:51,484
reducing waste and giving you the best ROI.

256
00:16:52,304 --> 00:16:56,536
By leveraging, for example, by leveraging serverless computing and

257
00:16:56,560 --> 00:17:00,000
auto scaling capabilities, organizations or companies

258
00:17:00,072 --> 00:17:04,048
can ensure that their Jennifer system can handle spikes

259
00:17:04,096 --> 00:17:08,088
or varying workloads. So be

260
00:17:08,096 --> 00:17:11,418
it any model you need beat any model or deployment,

261
00:17:11,616 --> 00:17:15,398
there is a clear need to manage the allocation

262
00:17:15,566 --> 00:17:19,234
and utilization, and that cloud abstraction provides it.

263
00:17:19,774 --> 00:17:23,470
The next benefit of cloud abstraction to genai use

264
00:17:23,502 --> 00:17:25,754
cases would be streamlined processes.

265
00:17:26,854 --> 00:17:30,646
So cloud abstractions empower

266
00:17:30,710 --> 00:17:34,654
the standardization of pipelines, be it CI continuous

267
00:17:34,694 --> 00:17:36,754
integration, continuous deployment.

268
00:17:37,474 --> 00:17:40,962
They also provide with the streamline the agility,

269
00:17:41,058 --> 00:17:44,774
the much needed agility in order to move quickly

270
00:17:45,514 --> 00:17:48,734
with a rapid piece scalability.

271
00:17:49,634 --> 00:17:53,442
So the cloud abstractions ensure that the scalability

272
00:17:53,578 --> 00:17:56,934
and the quality of user experience is always there.

273
00:17:57,594 --> 00:18:01,730
Cloud restrictions allow Genai systems to scale seamlessly,

274
00:18:01,802 --> 00:18:05,558
accommodating growing user bases or ensuring a consistent

275
00:18:05,606 --> 00:18:08,958
quality of experience. By leveraging the global

276
00:18:09,046 --> 00:18:12,814
and high speed networks, organizations can deliver

277
00:18:12,894 --> 00:18:17,150
low latency or even a full scale application

278
00:18:17,262 --> 00:18:20,674
or even a viral use case.

279
00:18:21,374 --> 00:18:25,414
Sagemaker was used to scale a Genai

280
00:18:25,494 --> 00:18:28,594
based content recommendation system.

281
00:18:30,234 --> 00:18:34,810
The scale was not less, it was millions of users and

282
00:18:35,002 --> 00:18:38,714
gaining the performance and reliability. There are other numerous

283
00:18:38,754 --> 00:18:42,050
other benefits to the cloud abstraction which

284
00:18:42,082 --> 00:18:46,546
we have not discussed, for example, segregation and

285
00:18:46,570 --> 00:18:47,454
high availability.

286
00:18:49,874 --> 00:18:53,674
The no code model, for example, utilizes the abstraction underneath

287
00:18:53,754 --> 00:18:58,344
to empower a user to safely create an app using

288
00:18:58,384 --> 00:19:02,216
drag and drop. The JNA studio places the right controls to

289
00:19:02,240 --> 00:19:06,004
choose the safe models and mitigate the risk in doing so.

290
00:19:06,504 --> 00:19:10,224
So the existing and established offerings like monitoring,

291
00:19:10,304 --> 00:19:13,124
auto scaling, alerting,

292
00:19:14,064 --> 00:19:17,832
those are the results of already established

293
00:19:17,888 --> 00:19:21,648
abstractions, something that we let's

294
00:19:21,696 --> 00:19:25,864
move forward with the current state option and kubernetes.

295
00:19:27,124 --> 00:19:31,544
So most of the organizations deploy

296
00:19:31,844 --> 00:19:35,852
some piece of cloud native technologies today and

297
00:19:36,028 --> 00:19:40,068
one of them in general. Cloud adoption

298
00:19:40,196 --> 00:19:43,904
is essential for managing and scaling Jennair workloads.

299
00:19:44,404 --> 00:19:48,344
Cloud abstractions play a crucial role in your scalability.

300
00:19:49,144 --> 00:19:52,848
Genai is a transformative technology and

301
00:19:52,896 --> 00:19:56,560
it is definitely inspiring industry

302
00:19:56,632 --> 00:20:00,320
transformations. I am pretty sure we cannot

303
00:20:00,352 --> 00:20:03,364
discuss every industry here,

304
00:20:04,024 --> 00:20:07,284
so we will focus on creative content.

305
00:20:08,704 --> 00:20:13,432
Jennia is also inspiring

306
00:20:13,528 --> 00:20:17,744
new growth opportunities and paving the way.

307
00:20:18,964 --> 00:20:22,772
So healthcare transformation, let's talk about it. Healthcare is

308
00:20:22,788 --> 00:20:26,156
a field where the regulatory concerns would

309
00:20:26,180 --> 00:20:28,624
be very high due to sensitive data.

310
00:20:29,324 --> 00:20:32,684
But this is also one of the fields which

311
00:20:32,724 --> 00:20:35,104
requires innovative the most.

312
00:20:35,724 --> 00:20:39,604
For example, Clara it's a genii tool in healthcare.

313
00:20:39,684 --> 00:20:42,624
It reduces the phone interaction by 50%.

314
00:20:43,784 --> 00:20:47,384
That means that no longer you have to be on the call hourly

315
00:20:47,424 --> 00:20:51,440
call to get some help. This increases the user

316
00:20:51,472 --> 00:20:55,604
experience privacy. This has led to

317
00:20:56,464 --> 00:20:59,760
new and improved outcomes and

318
00:20:59,792 --> 00:21:02,924
it has also helped streamline the healthcare processes.

319
00:21:03,984 --> 00:21:08,184
Overall, Genai has a very positive

320
00:21:08,304 --> 00:21:12,918
transformation. Cloud the

321
00:21:12,966 --> 00:21:16,414
next industry which has seen the most impact

322
00:21:16,494 --> 00:21:20,118
after healthcare is creative content with

323
00:21:20,166 --> 00:21:24,062
AI driven tools like Delhi or Adobe Firefly.

324
00:21:24,238 --> 00:21:27,766
The way you could create an image or audio

325
00:21:27,870 --> 00:21:31,718
has changed. Generation of digital artwork has

326
00:21:31,766 --> 00:21:35,126
improved miles and miles. Now more and

327
00:21:35,150 --> 00:21:37,914
more individuals are exploring these tools,

328
00:21:38,874 --> 00:21:43,414
expressing their artistic creativity.

329
00:21:46,754 --> 00:21:50,574
This has also made the content

330
00:21:50,994 --> 00:21:55,074
creation future potential of Genai

331
00:21:55,234 --> 00:21:58,714
is very positive with cloud technologies. They both

332
00:21:58,754 --> 00:22:01,374
drive innovation and accessibility.

333
00:22:02,314 --> 00:22:05,334
There is a symbiotic relationship and cloud abstractions.

334
00:22:06,114 --> 00:22:09,614
It unlocks new possibilities and increases trees.

335
00:22:10,274 --> 00:22:13,778
We will reiterate that there is a symbiotic relationship between

336
00:22:13,826 --> 00:22:17,394
genai and cloud abstractions. Cloud abstractions

337
00:22:17,474 --> 00:22:21,234
are essential enablers for deploying

338
00:22:21,394 --> 00:22:25,274
managing your geni workloads. They provide necessary

339
00:22:25,314 --> 00:22:28,334
scalability, they ensure efficiency,

340
00:22:28,954 --> 00:22:31,166
they support diverse applications.

341
00:22:31,330 --> 00:22:34,790
Streamlining the processes the

342
00:22:34,822 --> 00:22:37,782
future of Jennia is closely tied to continued evaluation.

343
00:22:37,918 --> 00:22:39,094
With that, thank you.

