1
00:00:28,014 --> 00:00:31,806
No, wafs don't use a web application firewall, and when you

2
00:00:31,830 --> 00:00:35,286
should anyway. I'm Joshua Fox,

3
00:00:35,390 --> 00:00:39,550
senior cloud architect at Doint International and please contact

4
00:00:39,622 --> 00:00:42,766
me by email. This is remote and I always like to

5
00:00:42,790 --> 00:00:45,354
talk to my audience, so please reach out.

6
00:00:46,054 --> 00:00:49,014
I advise customers in Google Cloud,

7
00:00:49,094 --> 00:00:52,830
AWS and Azure. I'm certified in all three and I'm

8
00:00:52,862 --> 00:00:56,050
also a Google developer expert, which means I travel

9
00:00:56,082 --> 00:00:59,554
the world talking about Google technologies. But I'm not a Google employee.

10
00:00:59,594 --> 00:01:03,654
And in this talk I will mention a few different web application firewalls.

11
00:01:04,714 --> 00:01:08,290
We at Doit support our customers who are digital

12
00:01:08,362 --> 00:01:11,890
cloud natives. We give them advice in the clouds

13
00:01:11,962 --> 00:01:16,074
and we offer them software for analyzing costs,

14
00:01:16,114 --> 00:01:20,070
reducing cost, understanding the cloud systems,

15
00:01:20,242 --> 00:01:23,478
and we also resell cloud services,

16
00:01:23,606 --> 00:01:25,754
sometimes at a very nice discount.

17
00:01:26,934 --> 00:01:29,942
This talk is based on an article which you can see at the end.

18
00:01:29,998 --> 00:01:33,102
I'll give you a link to these slides and a QR code so you can

19
00:01:33,118 --> 00:01:36,194
read the article as well. But the talk goes into more detail.

20
00:01:37,854 --> 00:01:41,758
The scenario is that the chief information security officer

21
00:01:41,846 --> 00:01:45,714
is shouting about the vulnerabilities in your web application.

22
00:01:46,354 --> 00:01:49,934
Very worrying, and nobody knows what to do.

23
00:01:50,634 --> 00:01:54,466
Quick, we need a solution now. So somebody says

24
00:01:54,610 --> 00:01:57,614
WaF and the CEO says, yeah, go ahead,

25
00:01:57,954 --> 00:02:01,882
let's protect our system. That sounds

26
00:02:01,898 --> 00:02:05,314
like an easy solution. What is

27
00:02:05,434 --> 00:02:09,114
a waf? It's a service that tries to protect your web

28
00:02:09,154 --> 00:02:12,346
application. And later on I'll get into detail on how

29
00:02:12,370 --> 00:02:15,624
it does it and what it tries tries to do.

30
00:02:16,324 --> 00:02:20,236
But first, let's talk about some drivers for getting a web application

31
00:02:20,300 --> 00:02:23,944
firewall. The biggest one is a hacker attack

32
00:02:24,564 --> 00:02:27,584
fire drill. The system is under attack,

33
00:02:29,004 --> 00:02:32,716
data going out. There are data being encrypted by an

34
00:02:32,740 --> 00:02:35,544
attacker. We have to do something fast.

35
00:02:36,164 --> 00:02:39,860
Another reason is similar. It's a penetration test. This is a hacker

36
00:02:39,892 --> 00:02:43,772
attack that you paid for. And I have seen this

37
00:02:43,868 --> 00:02:47,636
happen when I've hired penetration testers and

38
00:02:47,780 --> 00:02:51,356
I asked one of them, would you like a password to our system

39
00:02:51,460 --> 00:02:54,492
to go into it and see what vulnerabilities there are? He said, well, let me

40
00:02:54,508 --> 00:02:58,068
try. Without a password. Within ten minutes he was tap dancing

41
00:02:58,116 --> 00:03:01,476
through the database. And so I sent him to another business

42
00:03:01,540 --> 00:03:04,668
unit because it was really scary what was happening to our business unit.

43
00:03:04,836 --> 00:03:08,184
Yeah, that's right. Same thing. The state of the art is

44
00:03:08,324 --> 00:03:12,120
not good. This is always motivated

45
00:03:12,192 --> 00:03:15,592
with urgency. And the problem with that is

46
00:03:15,608 --> 00:03:18,684
that quick and dirty solutions tend to stay that way.

47
00:03:19,304 --> 00:03:22,640
And that means that not only do you never get a proper

48
00:03:22,712 --> 00:03:26,712
fix for your insecure system, but your team doesn't get a fix.

49
00:03:26,768 --> 00:03:30,392
You do not develop the expertise as a team that you need

50
00:03:30,448 --> 00:03:34,624
to keep your application secure. Another driver

51
00:03:34,744 --> 00:03:38,568
for WAF is outside requirements, which often expresses itself

52
00:03:38,656 --> 00:03:41,424
as an audit. You have to fulfill the audit,

53
00:03:41,584 --> 00:03:45,440
whether it's because of a government regulation or the customer says

54
00:03:45,472 --> 00:03:49,240
you need it in a request for proposals. Maybe a partner,

55
00:03:49,392 --> 00:03:52,520
maybe the cloud provider itself requires that if you want to

56
00:03:52,552 --> 00:03:56,016
sell together with them, or a

57
00:03:56,040 --> 00:03:59,696
standard certification may require a WAF. Well, can't argue with that.

58
00:03:59,800 --> 00:04:03,044
They demand it, you're going to get it. Although that's not security.

59
00:04:03,824 --> 00:04:07,232
And another thing that isn't security is a security

60
00:04:07,328 --> 00:04:10,944
blanket, something to make the CEO feel warm and cozy.

61
00:04:10,984 --> 00:04:14,044
Because we have the WAF, so we've protected our system.

62
00:04:14,384 --> 00:04:17,552
That is the most dangerous driver for getting a

63
00:04:17,568 --> 00:04:21,456
WAF. To understand what a WAF is supposed to

64
00:04:21,480 --> 00:04:24,904
protect against, and often does, let's look at some

65
00:04:24,944 --> 00:04:28,432
potential threats. The top ones to look at are

66
00:04:28,448 --> 00:04:32,552
called the Owasp top ten. Owasp is a standards body,

67
00:04:32,648 --> 00:04:36,600
and the reason they list ten is because in reality there are thousands

68
00:04:36,632 --> 00:04:40,176
of possible vulnerabilities, tens of thousands depending on how

69
00:04:40,200 --> 00:04:43,816
you count it. Nobody can handle all of that, so they give you

70
00:04:43,840 --> 00:04:47,440
ten to look at and to learn. And we'll

71
00:04:47,472 --> 00:04:51,124
review a small fraction of that here, as well as some other threats.

72
00:04:51,664 --> 00:04:55,600
I created a demo. This is live running system

73
00:04:55,672 --> 00:05:00,208
at knowaf dot joshuafox.com and with waf dot joshuafox.com dot

74
00:05:00,336 --> 00:05:03,694
I'm going to walk you through it here in my talk

75
00:05:04,634 --> 00:05:07,626
in slides because it helps us focus on the key points. But if you want

76
00:05:07,650 --> 00:05:11,482
to play around there, you can. Now I'm the attacker and

77
00:05:11,498 --> 00:05:15,266
I'm going to create a game for the innocent victim. This is

78
00:05:15,290 --> 00:05:19,010
actually Scrabble, and the name I choose for

79
00:05:19,042 --> 00:05:23,454
myself is pretty strange. Script Alert hacked you script,

80
00:05:24,314 --> 00:05:27,898
that is JavaScript, and I'm going to

81
00:05:27,986 --> 00:05:32,310
make that JavaScript run in the browser of the innocent victim. In an actual

82
00:05:32,382 --> 00:05:35,654
hack it would steal your cookies, steal your password,

83
00:05:35,814 --> 00:05:39,462
but this is the standard example used to keep it simple. Once you

84
00:05:39,478 --> 00:05:43,514
can run arbitrary JavaScript in the victim's browser, game over.

85
00:05:44,214 --> 00:05:48,406
This is the architecture. One server can be reached

86
00:05:48,550 --> 00:05:52,126
through a load balancer that does not have cloud armor, or through

87
00:05:52,150 --> 00:05:56,142
a load balancer that does have cloud armor from the same browser.

88
00:05:56,278 --> 00:05:59,834
Two different routes, actually, two different subdomains with and without protection.

89
00:06:00,664 --> 00:06:04,304
I made the code unsafe by taking the code in the lower

90
00:06:04,344 --> 00:06:08,032
right, which wraps up the person's name in a

91
00:06:08,048 --> 00:06:11,608
div. So when the hacker sends a chat message to

92
00:06:11,616 --> 00:06:15,616
the innocent victim, the chat message will be rendered safe

93
00:06:15,680 --> 00:06:19,352
by escaping it. I'll show you what that looks like later. Then I

94
00:06:19,368 --> 00:06:23,688
broke the code on the upper left. The attacker's

95
00:06:23,736 --> 00:06:27,518
name is just going to be rendered onto the victim screen and

96
00:06:27,606 --> 00:06:30,302
execute it. Whoops,

97
00:06:30,438 --> 00:06:34,154
hacked you. That's JavaScript running in the victim's browser.

98
00:06:34,854 --> 00:06:38,394
However, if we access the system through the WAF,

99
00:06:39,094 --> 00:06:42,390
it will be blocked. So again, I try to create a game and I make

100
00:06:42,422 --> 00:06:46,726
my name into a script and boom, access is

101
00:06:46,790 --> 00:06:50,406
forbidden. So that's nice, but it's

102
00:06:50,430 --> 00:06:53,776
kind of a crude weapon to just break a

103
00:06:53,800 --> 00:06:57,544
request in such an ugly way. If you're sure you're working

104
00:06:57,584 --> 00:07:01,432
with a hacker here, well, I guess that's good, but I will explain later

105
00:07:01,488 --> 00:07:05,404
why this is a cruder system than you would really like.

106
00:07:06,944 --> 00:07:09,844
Another example of an attack is SQL injection,

107
00:07:10,384 --> 00:07:13,832
famous comic strip where the mother gets a call

108
00:07:13,968 --> 00:07:17,576
about her son and her

109
00:07:17,600 --> 00:07:21,152
son's name is Robert. Quote parenthesis,

110
00:07:21,208 --> 00:07:24,364
semicolon, drop table, student, semicolon, dash, dash,

111
00:07:24,944 --> 00:07:28,456
and little Bobby Tables has been

112
00:07:28,480 --> 00:07:32,032
entered in the database of the school and they've lost all

113
00:07:32,128 --> 00:07:36,004
the student records. Why is this?

114
00:07:36,424 --> 00:07:39,584
Well, if there is a bit of SQL like this

115
00:07:39,744 --> 00:07:43,484
where the first and middle name are inserted into the database,

116
00:07:44,144 --> 00:07:47,698
then it comes out like this. After you put that weird name

117
00:07:47,746 --> 00:07:50,874
in Robert, quote close parenthesis.

118
00:07:51,034 --> 00:07:54,894
Everything after the is a comment and therefore is ignored.

119
00:07:55,314 --> 00:07:58,334
But this drop table students will be run.

120
00:07:59,194 --> 00:08:03,454
Not good. The entire database table is dropped.

121
00:08:04,194 --> 00:08:07,954
Another example of an attack is distributed denial of service. That's where

122
00:08:07,994 --> 00:08:11,210
they pound your server with so many requests that it can't

123
00:08:11,242 --> 00:08:15,020
handle it anymore. Why distributed denial of

124
00:08:15,052 --> 00:08:18,060
service? Why multiple attackers?

125
00:08:18,252 --> 00:08:22,220
Because if it's only one attacker, then your one

126
00:08:22,292 --> 00:08:24,916
server can probably handle it. It's one on one.

127
00:08:25,060 --> 00:08:28,588
Your server can probably handle the load. But if there are hundreds

128
00:08:28,636 --> 00:08:32,284
of attackers pounding your server with requests, it might

129
00:08:32,324 --> 00:08:35,980
crash under the load. The worst type of

130
00:08:36,012 --> 00:08:39,896
threats are application level in your application,

131
00:08:40,080 --> 00:08:43,608
broken access control, incorrect authorization

132
00:08:43,696 --> 00:08:46,856
of page. So what if

133
00:08:46,880 --> 00:08:49,864
you have hundreds of pages, hundreds of PHP's,

134
00:08:49,904 --> 00:08:53,680
jsps, and some of them have

135
00:08:53,712 --> 00:08:57,044
not correctly defined who's allowed to see them

136
00:08:57,424 --> 00:09:01,448
or search. Pages are often very vulnerable this way

137
00:09:01,576 --> 00:09:05,504
because if you're letting your user search in some gigantic mess

138
00:09:05,544 --> 00:09:09,328
of text, and then of course the search results include

139
00:09:09,416 --> 00:09:12,608
snippets of text, do you know where those snippets came from?

140
00:09:12,736 --> 00:09:15,804
Is each one of them authorized to the person who was searching?

141
00:09:16,344 --> 00:09:20,216
But hey, let's toss in Oauth to protect against those threats we mentioned earlier

142
00:09:20,280 --> 00:09:23,600
and many others. How does cloud armor work

143
00:09:23,712 --> 00:09:28,024
how does it protect your system? Here's a sample architecture.

144
00:09:28,184 --> 00:09:31,872
There are end users on the left, and cloud armor attaches to

145
00:09:31,888 --> 00:09:36,094
the load balancing, which importantly decrypts the HTTPs.

146
00:09:36,214 --> 00:09:39,422
That's necessary for cloud armor to look inside and see if it appears to

147
00:09:39,438 --> 00:09:43,446
be a threat. Cloud load balancing then sends the request onwards

148
00:09:43,510 --> 00:09:47,310
either to a backend on Google Cloud compute engine, which is the case

149
00:09:47,342 --> 00:09:50,814
from Aida Scrabble, or it could be kubernetes or many others,

150
00:09:50,854 --> 00:09:54,614
or even outside of the Google cloud. It only

151
00:09:54,654 --> 00:09:57,674
sends on the request. Of course, if it doesn't block the request,

152
00:09:58,534 --> 00:10:02,086
you define the control using policies and rules.

153
00:10:02,270 --> 00:10:06,190
A policy is a collection of many rules arranged in order of priority.

154
00:10:06,342 --> 00:10:09,638
The ones with a lower priority number have a

155
00:10:09,686 --> 00:10:13,502
higher priority. They're going to take precedence over the ones

156
00:10:13,638 --> 00:10:16,966
with a larger priority number. And here's

157
00:10:16,990 --> 00:10:21,074
what the rules look like. Each rule has a match condition and action.

158
00:10:21,934 --> 00:10:25,422
Action could be deny the obvious one. If you see a threat,

159
00:10:25,518 --> 00:10:29,268
allow once you've created a rule that says this

160
00:10:29,356 --> 00:10:32,644
certain particular string really isn't a threat, so let's allow it,

161
00:10:32,804 --> 00:10:36,116
or just log and do nothing else. And the

162
00:10:36,140 --> 00:10:39,452
match condition is often a regular expression,

163
00:10:39,628 --> 00:10:42,104
but it can be many others, which we'll talk about.

164
00:10:42,804 --> 00:10:45,988
It could be an IP address blacklist

165
00:10:46,036 --> 00:10:50,340
or whitelist. Think about your firewall in Google Cloud

166
00:10:50,492 --> 00:10:54,612
or in Amazon. That would be an access control list, a security

167
00:10:54,708 --> 00:10:57,964
group. Or you can block certain IP addresses,

168
00:10:58,264 --> 00:11:01,344
but here you're doing it in the WAF, on the edge so

169
00:11:01,384 --> 00:11:04,632
it's faster blocking before the request even gets

170
00:11:04,768 --> 00:11:08,016
into the cloud. And also the more sophisticated tools

171
00:11:08,040 --> 00:11:11,168
for defining blocks of dangerous IP addresses.

172
00:11:11,336 --> 00:11:14,744
You could block entire geographies. If you only sell in one

173
00:11:14,784 --> 00:11:17,752
country, you might want to block every other country to just say, well, I don't

174
00:11:17,768 --> 00:11:21,044
want anyone from that country. It's not even a question, let's exclude them.

175
00:11:21,404 --> 00:11:25,804
Or a scan of HTTP content, often with a regular expression

176
00:11:25,924 --> 00:11:29,344
where you look for those scripts or other dangerous strings.

177
00:11:30,124 --> 00:11:33,028
Please use the pre configured rule sets.

178
00:11:33,156 --> 00:11:36,868
So Google Cloud armor has some for SQL injection, which I showed you earlier,

179
00:11:36,956 --> 00:11:39,988
cross site scripting which I showed you, and many,

180
00:11:40,036 --> 00:11:43,620
many other potential types of attack. Some smart people put

181
00:11:43,652 --> 00:11:46,432
these rule sets together and they are complicated,

182
00:11:46,628 --> 00:11:50,344
complicated rule sets. You can then

183
00:11:50,384 --> 00:11:53,928
configure them with sensitivity. You can either

184
00:11:53,976 --> 00:11:57,496
say let's be hypersensitive and block, but then you risk some

185
00:11:57,520 --> 00:12:00,240
false positives. You might block something you don't want to,

186
00:12:00,392 --> 00:12:03,712
or let's make it at a very low sensitivity just to get the worst,

187
00:12:03,768 --> 00:12:07,280
most dangerous looking ones. But then we risk false negatives,

188
00:12:07,392 --> 00:12:11,324
but you can make that trade off. I showed you a minute earlier,

189
00:12:11,744 --> 00:12:15,668
SQL injection. It's way more complicated than that.

190
00:12:15,836 --> 00:12:19,260
Each one of these here is a definition from OwAsp

191
00:12:19,292 --> 00:12:21,784
of a different type of SQL injection attack.

192
00:12:22,444 --> 00:12:25,644
The second one, common DB names that detected well, you saw

193
00:12:25,684 --> 00:12:28,884
the database table students. I don't know how common

194
00:12:28,924 --> 00:12:33,224
that is, but the good people at OWASp determined that

195
00:12:33,884 --> 00:12:37,356
if database table names are in there, if database names are in

196
00:12:37,380 --> 00:12:41,436
there, it's more likely to be an SQL injection. And there are hundreds

197
00:12:41,460 --> 00:12:45,578
of these. And in each one of those there are

198
00:12:45,626 --> 00:12:48,730
signatures. I am not expecting you to read

199
00:12:48,762 --> 00:12:52,610
this. In fact, I'm showing this to you to show how complicated it can

200
00:12:52,642 --> 00:12:55,594
be. That is a regular expression as you can detect.

201
00:12:55,674 --> 00:13:00,034
Don't try to read it right now unless you're smarter than me and tags

202
00:13:00,114 --> 00:13:02,894
severity many other definitions of this signature.

203
00:13:03,554 --> 00:13:07,082
Now you can write your own rules if you want. So in this case

204
00:13:07,138 --> 00:13:10,818
we're looking at the user agent header and looking for WordPress

205
00:13:10,866 --> 00:13:13,930
case insensitive in that we might imagine that

206
00:13:14,042 --> 00:13:17,334
a hacker is trying to break into WordPress so we write that rule.

207
00:13:17,914 --> 00:13:21,978
I would suggest that you use the rules the experts wrote

208
00:13:22,146 --> 00:13:25,666
at a far greater degree of sophistication, which addresses false positives

209
00:13:25,690 --> 00:13:28,974
and false negatives better than you probably will be able to.

210
00:13:29,634 --> 00:13:33,514
But when it comes down to it, the WaF won't protect

211
00:13:33,554 --> 00:13:37,010
you. It will not bring you the security you want and

212
00:13:37,042 --> 00:13:41,494
need. The first reason is that you may be blocking your own application.

213
00:13:42,594 --> 00:13:46,810
Here's an example. You have a software engineering forum. People are discussing snippets

214
00:13:46,842 --> 00:13:50,874
of JavaScript. Do you want to block those? Well, I once

215
00:13:50,954 --> 00:13:54,642
entered a bug in a bug reporting

216
00:13:54,698 --> 00:13:58,482
system. There was a security bug. It involved

217
00:13:58,658 --> 00:14:02,162
a JavaScript for cross site scripting and my request disappeared.

218
00:14:02,298 --> 00:14:06,432
I couldn't even report it. Well, of course there was looking

219
00:14:06,488 --> 00:14:10,164
at my report about cross site scripting and blocked it.

220
00:14:10,784 --> 00:14:14,320
So you can't just block these things because they look

221
00:14:14,392 --> 00:14:17,848
somewhat dangerous. And it's not just software engineering

222
00:14:17,896 --> 00:14:21,456
forums or bug reporting systems. Anybody could write some string that looks

223
00:14:21,480 --> 00:14:25,360
a bit like an attack string. You get

224
00:14:25,392 --> 00:14:29,136
false positives in certain cases. If your application is badly

225
00:14:29,160 --> 00:14:32,592
written. Some applications pass JavaScript back and

226
00:14:32,608 --> 00:14:36,888
forth from client to server and then execute it. That is bad.

227
00:14:37,056 --> 00:14:39,564
But if your application is already written that way,

228
00:14:40,024 --> 00:14:43,696
your product manager is not going to like it when you explain why you're blocking

229
00:14:43,720 --> 00:14:46,688
your own functionality. Or more simply,

230
00:14:46,736 --> 00:14:50,664
if your application has hundreds of text fields and unvetted

231
00:14:50,704 --> 00:14:53,844
code written by perhaps unskilled developers.

232
00:14:54,144 --> 00:14:57,664
Or it could be nothing wrong with your system. But the rules are imperfect.

233
00:14:57,704 --> 00:15:01,544
You saw how complicated they are, and they might miss something,

234
00:15:02,484 --> 00:15:05,796
and they might label a request as

235
00:15:05,820 --> 00:15:09,644
an attack when it is not. Job zero is

236
00:15:09,684 --> 00:15:13,684
a secure application. That is your job. You must have

237
00:15:13,724 --> 00:15:17,188
somebody on the team who is responsible for security. Doesn't mean everything

238
00:15:17,236 --> 00:15:21,164
is secure, but you can go to that person and ask what's the situation,

239
00:15:21,244 --> 00:15:24,740
what are our main vulnerabilities? And then every team member must have

240
00:15:24,772 --> 00:15:28,480
some degree of training. After all, you take care of performance

241
00:15:28,632 --> 00:15:32,352
in your code, you take care of usability. At the same time, you have to

242
00:15:32,408 --> 00:15:36,016
always be thinking of security. I can't define

243
00:15:36,080 --> 00:15:39,964
how to secure your app in a few minutes. It is a complicated,

244
00:15:40,784 --> 00:15:44,352
a very complicated profession. But here

245
00:15:44,368 --> 00:15:48,160
are a few simple ideas. One is to escape all strings, so the

246
00:15:48,192 --> 00:15:51,360
top string, as you know, is a potential attack. The lower string

247
00:15:51,392 --> 00:15:54,514
will still be rendered visually as the top string,

248
00:15:54,674 --> 00:15:57,814
but is no longer interpreted as JavaScript.

249
00:15:58,474 --> 00:16:00,894
Or there's a function in the react framework,

250
00:16:01,314 --> 00:16:04,854
dangerously set inner HTML.

251
00:16:05,234 --> 00:16:08,674
Yes, the react team was very worried that you would use it. They're telling

252
00:16:08,714 --> 00:16:12,066
you not to use it. When developers are under stress and it seems

253
00:16:12,090 --> 00:16:14,774
to work and the other one doesn't work,

254
00:16:15,314 --> 00:16:18,388
they use it and they will insert,

255
00:16:18,546 --> 00:16:21,884
let's say, JavaScript without escaping.

256
00:16:22,544 --> 00:16:26,528
You can try sanitizing, which means deleting anything that looks like

257
00:16:26,656 --> 00:16:30,392
an attack script. But I told you a minute ago,

258
00:16:30,448 --> 00:16:33,764
why deleting those all could create false positives.

259
00:16:34,304 --> 00:16:38,080
The only way to handle this is with a security mindset. It must be

260
00:16:38,112 --> 00:16:40,964
in your mind and in the minds of your team members at all times.

261
00:16:41,424 --> 00:16:45,108
That's what they're paid the big salaries for. Let's take another

262
00:16:45,156 --> 00:16:48,804
example of false positive DDoS. So we're looking

263
00:16:48,844 --> 00:16:52,304
for big spikes which probably indicate an attack.

264
00:16:52,724 --> 00:16:56,652
So here we see that there are gigantic numbers

265
00:16:56,668 --> 00:17:00,532
of requests that come all of a sudden on a low traffic website. And maybe

266
00:17:00,548 --> 00:17:04,020
the DDoS system should block it. But oh

267
00:17:04,052 --> 00:17:07,676
no, that is the Australian Open tennis match. And if you

268
00:17:07,700 --> 00:17:11,824
block those spikes, you've blocked the only reason the website exists all year.

269
00:17:12,814 --> 00:17:16,230
There are ways around that. First of all, by planning in advance and turning

270
00:17:16,262 --> 00:17:20,234
off the DDoS protection. Perhaps another is to rely on advanced

271
00:17:20,854 --> 00:17:24,474
machine learning driven features which do exist in

272
00:17:25,174 --> 00:17:28,526
the wafs. IP addresses also

273
00:17:28,590 --> 00:17:31,782
can bring false positives. It's just a number. Do you

274
00:17:31,798 --> 00:17:35,222
know who's using it? Maybe the numbers behind an NAT and shared by hackers

275
00:17:35,238 --> 00:17:39,062
and non hackers. Does your product manager want you to block even r1

276
00:17:39,118 --> 00:17:42,340
customer who in a b two B situation might get very

277
00:17:42,372 --> 00:17:45,468
angry to you, get very angry that the system

278
00:17:45,516 --> 00:17:49,076
is blocking them. Do you want to block an entire country

279
00:17:49,140 --> 00:17:51,864
and completely deny yourself customers from that country?

280
00:17:53,284 --> 00:17:56,924
One way around this is with a dry run, so you can set the WAF

281
00:17:56,964 --> 00:18:00,548
to preview, and then even though the action is in principle

282
00:18:00,596 --> 00:18:03,988
deny, you will only get logs like this log.

283
00:18:04,036 --> 00:18:07,718
This is an abbreviated log and it will basically say

284
00:18:07,766 --> 00:18:11,674
we would have denied the request. And you can look at that and say

285
00:18:12,414 --> 00:18:15,734
oh, we really shouldn't have denied it. My code is awful.

286
00:18:15,814 --> 00:18:19,102
It passes JavaScript on purpose, or we have to accept

287
00:18:19,158 --> 00:18:22,154
that JavaScript here, or we have to change our code.

288
00:18:22,614 --> 00:18:25,926
And therefore you will not endanger yourself with

289
00:18:25,950 --> 00:18:29,502
those false positives. But the problem with preview

290
00:18:29,638 --> 00:18:32,902
is uncertainty. I have seen teams turn on the

291
00:18:32,918 --> 00:18:36,762
preview and wait for months in which they're paying a lot of money as

292
00:18:36,778 --> 00:18:40,346
they try to figure out if given strings that trigger the Waf are really a

293
00:18:40,370 --> 00:18:43,770
danger, not a danger, and they are scared of blocking

294
00:18:43,802 --> 00:18:47,522
because they don't know their own application backwards and forwards. So this is

295
00:18:47,538 --> 00:18:51,090
not a cure all. But in addition to false positives,

296
00:18:51,122 --> 00:18:54,334
you could also have false negatives. They just let the attacks through.

297
00:18:55,354 --> 00:18:58,730
Reg exes, as you learned back in college, are limited as a language. They cannot

298
00:18:58,762 --> 00:19:01,574
catch everything. Besides which,

299
00:19:01,754 --> 00:19:05,318
they have to be fast. Remember, every web request is being scanned by potentially

300
00:19:05,366 --> 00:19:08,726
hundreds of Reg xs before it even gets through. And for

301
00:19:08,750 --> 00:19:12,150
that reason also, only a few kilobytes can be scanned by these

302
00:19:12,182 --> 00:19:16,142
reg xs. And that means that any attack after those kilobytes

303
00:19:16,278 --> 00:19:19,414
will simply be let through. But the worst thing

304
00:19:19,454 --> 00:19:23,034
really is broken access control.

305
00:19:23,334 --> 00:19:27,174
If you left some of your pages open to unauthenticated users,

306
00:19:27,214 --> 00:19:30,924
to all authenticated users, or to the wrong authenticated users.

307
00:19:31,094 --> 00:19:34,816
If you left them open to write for users who should be only read only,

308
00:19:34,960 --> 00:19:38,768
the WAF is helpless. It doesn't know what you

309
00:19:38,816 --> 00:19:42,464
intended when you wrote your application. And the attackers

310
00:19:42,504 --> 00:19:46,112
can shift around too. They can change their IP addresses using a

311
00:19:46,128 --> 00:19:50,324
VPN or whatever. They can also change the country they appear to come from,

312
00:19:50,784 --> 00:19:54,800
and they can change the attacks. Tiny string changes may

313
00:19:54,832 --> 00:19:58,284
get through the regular expression while still carrying an attack.

314
00:19:58,764 --> 00:20:02,036
They are smart, they are human, they are always scheming,

315
00:20:02,180 --> 00:20:06,012
and the WAFs have predetermined rules. There are new machine learning

316
00:20:06,068 --> 00:20:08,464
systems that are flexible, but they are not magic either.

317
00:20:09,724 --> 00:20:12,024
Well, what if you leave yourself some flexibility?

318
00:20:13,484 --> 00:20:16,504
The Wafs do offer that you can configure the policies.

319
00:20:17,244 --> 00:20:20,652
You can exclude a rule from the policy because you think it's

320
00:20:20,748 --> 00:20:24,252
making false positive detections exclude a field, not scanning

321
00:20:24,268 --> 00:20:27,556
a field. But then remember, you're not scanning the field.

322
00:20:27,740 --> 00:20:31,144
Raise or lower the sensitivity. You can create your own rules.

323
00:20:31,444 --> 00:20:35,180
That looks good, but I suggest you

324
00:20:35,212 --> 00:20:38,236
don't do that because the experts have already worked

325
00:20:38,260 --> 00:20:42,188
on the tough balance between false positives and negatives, and if

326
00:20:42,236 --> 00:20:45,940
you try to reduce the false positives, you may be increasing the false

327
00:20:45,972 --> 00:20:49,452
negatives. You don't have a very special

328
00:20:49,508 --> 00:20:53,706
case you think you do, but in fact these attacks

329
00:20:53,770 --> 00:20:57,774
are most often widespread across the industry.

330
00:20:58,314 --> 00:21:02,214
On the other hand, if you have some deep hackers,

331
00:21:02,514 --> 00:21:05,666
then probably nothing you do is going

332
00:21:05,690 --> 00:21:09,146
to help. If state level hackers are

333
00:21:09,170 --> 00:21:12,374
coming in, your tweaking is not going to make the difference.

334
00:21:12,994 --> 00:21:15,890
If you do have a very special case in your code because your code does

335
00:21:15,922 --> 00:21:19,328
something weird, probably you need to take a good look at your code,

336
00:21:19,456 --> 00:21:22,444
not tweaking the WAF rules.

337
00:21:22,984 --> 00:21:26,484
But the WAF is not just imperfect, it may make things worse.

338
00:21:27,384 --> 00:21:30,688
Remember, it looks at your decrypted messages

339
00:21:30,776 --> 00:21:34,256
of each HTTP request. It has to to

340
00:21:34,280 --> 00:21:38,424
see what the risks might be. What if the waf has a bug? The biggest

341
00:21:38,464 --> 00:21:41,736
risk though is complacency as the

342
00:21:41,760 --> 00:21:45,136
temporary becomes permanent as you don't learn new skills.

343
00:21:45,320 --> 00:21:49,240
I compare a WAF to a jewelry store with giant

344
00:21:49,272 --> 00:21:52,968
holes in its concrete walls, and then the jewelry store owner

345
00:21:53,016 --> 00:21:55,936
puts a chicken wire fence around and says, well, it's not perfect, but at least

346
00:21:55,960 --> 00:21:59,544
we have a fence. Yeah, maybe you should be looking at those

347
00:21:59,584 --> 00:22:03,000
big holes in your concrete walls. Besides all

348
00:22:03,032 --> 00:22:06,256
that, the WAF risks performance because it has

349
00:22:06,280 --> 00:22:09,936
to run those rules on every single request. The more rules

350
00:22:10,000 --> 00:22:12,474
to run, the more of a risk to performance.

351
00:22:13,694 --> 00:22:16,694
If we talk about the cost of a system, we should also talk about its

352
00:22:16,734 --> 00:22:19,990
cost. And I'm not going to talk dollar amounts. You can look

353
00:22:20,022 --> 00:22:23,606
those up, and plus they're different wafs. But generally

354
00:22:23,630 --> 00:22:27,414
in the basic form, you pay for each rule you define, each policy

355
00:22:27,494 --> 00:22:31,270
you add, or for a very, very large number of requests.

356
00:22:31,422 --> 00:22:35,166
As with many things in the cloud, so long as your systems

357
00:22:35,190 --> 00:22:38,732
are still under test, so long as you haven't gone viral, these costs

358
00:22:38,748 --> 00:22:42,052
are negligible. When you go big, you can get

359
00:22:42,068 --> 00:22:45,476
an enterprise system in which you pay a monthly fee and not pay

360
00:22:45,500 --> 00:22:48,844
on demand. There are variations of this and pay

361
00:22:48,884 --> 00:22:52,344
perhaps a lesser amount if there are massive amounts of resources going through.

362
00:22:52,964 --> 00:22:56,084
The real risk is if you commit to pay a monthly fee and then

363
00:22:56,124 --> 00:22:59,820
find that there are so many false positives and negatives that despite the risk,

364
00:22:59,972 --> 00:23:03,304
your product manager tells you to back out, then you are paying a lot.

365
00:23:04,384 --> 00:23:07,776
I've said all these bad things about Oauth. What is it

366
00:23:07,800 --> 00:23:11,616
good for? If you have external requirements, like I

367
00:23:11,640 --> 00:23:16,016
mentioned, you have no choice. Then it's not a security choice,

368
00:23:16,160 --> 00:23:19,832
it's a compliance choice. Go ahead. If you

369
00:23:19,848 --> 00:23:23,128
are running a third party app, perhaps a commercial system

370
00:23:23,176 --> 00:23:26,272
where you cannot alter and fix the code, perhaps open source where you don't have

371
00:23:26,288 --> 00:23:29,664
the skills to fix the code, then you can put the WaF

372
00:23:29,704 --> 00:23:33,944
in front of it. You still risk complacency. The WAF isn't magic.

373
00:23:34,644 --> 00:23:38,180
Another use case is central supervision. So you have a security

374
00:23:38,252 --> 00:23:41,980
team in a big company. It hears about a new threat CVE,

375
00:23:42,092 --> 00:23:46,036
like the famous log four j, and it steps into action and

376
00:23:46,060 --> 00:23:49,788
uses the WAF to block it, meanwhile shouting very loudly at

377
00:23:49,796 --> 00:23:53,524
the product team. Now the immediate

378
00:23:53,644 --> 00:23:56,764
response should be, you know, is the product team really going to fix

379
00:23:56,804 --> 00:24:00,302
it? But in this case we're seeing the WAF

380
00:24:00,358 --> 00:24:03,942
as a monitoring tool. And if we choose deny,

381
00:24:03,998 --> 00:24:07,118
allow or preview, then that's actually

382
00:24:07,166 --> 00:24:11,190
to help the central team understand what's happening, temporarily control

383
00:24:11,262 --> 00:24:14,446
it, monitor it, and not just tune the

384
00:24:14,470 --> 00:24:18,994
protection per se. It's part of a process across a large organization.

385
00:24:19,934 --> 00:24:23,110
Another reason to use the WAF is if you absolutely know what you're blocking,

386
00:24:23,182 --> 00:24:27,086
you know there's a hacker coming from a specific IP, or you have a

387
00:24:27,110 --> 00:24:30,582
business partner and you want to whitelist your IP addresses and let no one

388
00:24:30,598 --> 00:24:34,494
else through, and you've chosen not to use a normal firewall. Just some examples.

389
00:24:34,534 --> 00:24:38,254
When you know what you want to block the one go to

390
00:24:38,294 --> 00:24:41,742
feature. So here it's pretty straightforward.

391
00:24:41,798 --> 00:24:45,230
I do recommend OAuth. There are other services

392
00:24:45,302 --> 00:24:48,954
that could come in useful. You can pay to have a human team

393
00:24:49,454 --> 00:24:52,794
on standby from Google Cloud, from Amazon and so on.

394
00:24:53,094 --> 00:24:57,086
You can get event services where you see the attacks as they

395
00:24:57,150 --> 00:25:00,246
increase over time. Let's say they come in waves where

396
00:25:00,270 --> 00:25:03,694
they provide third party IP address lists, for example

397
00:25:03,734 --> 00:25:06,966
for tor nodes, and where they adapt

398
00:25:06,990 --> 00:25:10,486
the protection using machine learning in a more flexible way than

399
00:25:10,510 --> 00:25:13,766
in the basic services. Regardless, if you

400
00:25:13,790 --> 00:25:16,918
are going to do a WAF, let's say for ddos, do it now,

401
00:25:17,086 --> 00:25:20,516
not doing a fire drill. I suggest you

402
00:25:20,540 --> 00:25:23,544
prefer the WAF offered by your cloud service provider,

403
00:25:23,924 --> 00:25:28,244
Google Cloud armor, AWS Shield and so on, because the HTTPS

404
00:25:28,324 --> 00:25:31,540
is probably being decrypted at the load balancer

405
00:25:31,572 --> 00:25:34,964
in typical architectures. So you don't want to decrypt

406
00:25:35,004 --> 00:25:38,060
it in two completely different vendors and

407
00:25:38,092 --> 00:25:41,372
they offer pay as you go. Some of the other vendors do too. But the

408
00:25:41,388 --> 00:25:44,580
importance of pay as you go is that your ramp up period may be far

409
00:25:44,652 --> 00:25:48,116
longer than you expect. In summary,

410
00:25:48,180 --> 00:25:52,076
the minuses of of are first and foremost complacency

411
00:25:52,260 --> 00:25:55,784
that you will not put the resources on it, you will not develop the skills,

412
00:25:56,404 --> 00:25:59,184
you will get false positives and block your own application.

413
00:26:00,004 --> 00:26:03,956
Product managers are willing to take risks or false negatives,

414
00:26:03,980 --> 00:26:07,024
and you'll let the hackers through even though you paid all that money for Oauth.

415
00:26:07,484 --> 00:26:10,344
And they do add risks and slowness of their own.

416
00:26:10,784 --> 00:26:14,244
However, the pluses are that they're easier than do it yourself.

417
00:26:14,544 --> 00:26:17,840
You don't need to change your code and essential tream

418
00:26:17,872 --> 00:26:21,176
can control and monitor and understand

419
00:26:21,280 --> 00:26:24,976
security through the WAF. There are also advanced features

420
00:26:25,000 --> 00:26:28,960
that you probably can provide yourself, like the machine learning driven

421
00:26:29,032 --> 00:26:31,764
adaptive protection or DDoS protection.

422
00:26:32,544 --> 00:26:35,884
In conclusion, security is job zero.

423
00:26:36,344 --> 00:26:40,874
Your job in your app. You cannot hand off responsibility

424
00:26:41,214 --> 00:26:45,110
to anyone else, but there are some cases where a ref is

425
00:26:45,262 --> 00:26:49,766
relevant. You can see my slides here bit

426
00:26:49,870 --> 00:26:54,126
ly waf don't waf

427
00:26:54,230 --> 00:26:58,454
dont. Or you can scan this QR code and

428
00:26:58,494 --> 00:27:02,030
see the slides. And we are hiring. I love my job,

429
00:27:02,142 --> 00:27:05,974
so please email me there whatever you want to discuss.

