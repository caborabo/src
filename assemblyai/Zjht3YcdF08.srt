1
00:00:27,240 --> 00:00:30,506
Well, I hope you having a wonderful day. My name

2
00:00:30,530 --> 00:00:33,770
is Evgeny Korniv and today I would like to talk with

3
00:00:33,802 --> 00:00:37,762
you about how to assemble and organize a development team in

4
00:00:37,778 --> 00:00:41,226
the way that enhances both the resilience and the

5
00:00:41,250 --> 00:00:45,130
quality of your product. Let's begin by looking at the

6
00:00:45,162 --> 00:00:48,274
topics I want to talk about in my brief presentation.

7
00:00:48,394 --> 00:00:52,338
I want to clarify that this talk is addressed more to engineering team

8
00:00:52,386 --> 00:00:55,494
leaders than engineers themselves.

9
00:00:55,984 --> 00:01:00,040
We will explore the lessons I learned from building product teams

10
00:01:00,112 --> 00:01:04,072
that developed high load services. We will discuss

11
00:01:04,208 --> 00:01:08,336
whether SRE is necessary for small and medium

12
00:01:08,400 --> 00:01:12,040
sized teams. We will consider the obvious

13
00:01:12,112 --> 00:01:15,032
alternative to creating an SRE department,

14
00:01:15,208 --> 00:01:19,336
the developer on calls of duties. We will try

15
00:01:19,400 --> 00:01:23,088
to determine at what point a company needs

16
00:01:23,136 --> 00:01:26,424
to hire an SRE engineer. We will

17
00:01:26,464 --> 00:01:29,968
also touch on how crucial communication

18
00:01:30,016 --> 00:01:34,084
and people are in implementation of SRE principles.

19
00:01:35,144 --> 00:01:38,392
Okay, let's start. When it comes to small

20
00:01:38,448 --> 00:01:42,384
teams, it's crucial to understand that SRE is not about creating

21
00:01:42,424 --> 00:01:45,920
a team of on call engineers who will save your

22
00:01:45,952 --> 00:01:49,256
service day and night from crashes. It is

23
00:01:49,320 --> 00:01:52,124
a set of fundamental principles,

24
00:01:52,584 --> 00:01:56,104
principles that can be implemented right from

25
00:01:56,144 --> 00:02:00,472
the start. If your product is already in production

26
00:02:00,608 --> 00:02:04,496
and you are even slightly concerned about its availability

27
00:02:04,600 --> 00:02:08,804
to users, start by defining an SLA.

28
00:02:09,504 --> 00:02:14,016
Understand what level of availability suits your product.

29
00:02:14,200 --> 00:02:17,776
Define for yourself what availability means to

30
00:02:17,800 --> 00:02:21,856
you, what in your product must fail to

31
00:02:21,880 --> 00:02:25,968
be considered differently. Down set up monitoring

32
00:02:26,056 --> 00:02:28,484
and alerts. According to this,

33
00:02:29,264 --> 00:02:32,912
inform your team about the target metrics

34
00:02:33,008 --> 00:02:36,632
they need to respond to these alerts,

35
00:02:36,808 --> 00:02:39,244
and they are important to the business.

36
00:02:40,144 --> 00:02:43,520
Try to automate the processes of code

37
00:02:43,552 --> 00:02:47,204
compilation and deployment right from the start. The fewer

38
00:02:47,244 --> 00:02:49,624
manual actions, the fewer mistakes.

39
00:02:50,484 --> 00:02:53,260
Ensure your code is covered by tests.

40
00:02:53,452 --> 00:02:56,740
Teams that overlook testing in the rush to launch

41
00:02:56,812 --> 00:02:59,384
their product quickly are still common.

42
00:03:00,004 --> 00:03:04,516
Sometimes this is justified, but often having

43
00:03:04,580 --> 00:03:08,224
tests not only enhances stability,

44
00:03:08,804 --> 00:03:12,464
but also accelerates further development.

45
00:03:13,494 --> 00:03:16,314
Adopt modern approaches to DevOps.

46
00:03:16,614 --> 00:03:20,558
Availability issues often fall on the shoulders of

47
00:03:20,606 --> 00:03:24,518
DevOps engineers, so make sure the production infrastructure

48
00:03:24,606 --> 00:03:28,034
you create for your product is resilient by itself.

49
00:03:28,694 --> 00:03:31,994
Limit access to production systems,

50
00:03:32,334 --> 00:03:36,110
especially databases. In the ideal scenario,

51
00:03:36,222 --> 00:03:39,494
no developer should have such access,

52
00:03:40,034 --> 00:03:43,730
only the operations team. This will

53
00:03:43,762 --> 00:03:47,414
limit potential leaks as well as incidents

54
00:03:47,954 --> 00:03:52,122
related to unauthorized data changes. This seems

55
00:03:52,218 --> 00:03:55,674
like an obvious point, but many small teams

56
00:03:55,714 --> 00:03:58,890
overlook it. Create tools for

57
00:03:58,962 --> 00:04:01,738
servicing your service, dashboards,

58
00:04:01,866 --> 00:04:05,194
admin panels, feature toggles,

59
00:04:05,354 --> 00:04:09,074
etcetera. This will help you achieve the previous point.

60
00:04:09,694 --> 00:04:13,022
As my experience shown, these simple principles

61
00:04:13,118 --> 00:04:16,874
are sufficient at the beginning of the product's journey,

62
00:04:17,254 --> 00:04:21,150
as it has not yet turned into

63
00:04:21,182 --> 00:04:24,634
the complex and multifaceted system.

64
00:04:25,174 --> 00:04:27,954
Ok, let's talk about on call duties.

65
00:04:28,854 --> 00:04:32,230
As your product grows, so does the number of the different

66
00:04:32,302 --> 00:04:36,462
subsystems and components. With the increasing

67
00:04:36,558 --> 00:04:40,590
complexity of your system, the amount of time required to identify

68
00:04:40,662 --> 00:04:43,514
and resolve failures also increases.

69
00:04:44,174 --> 00:04:47,630
One obvious solution may consider is to

70
00:04:47,662 --> 00:04:51,034
appoint on call developers from existing teams.

71
00:04:51,334 --> 00:04:54,646
This means an employer works as usual, but in

72
00:04:54,670 --> 00:04:58,430
case of failure, they are first to respond to critical

73
00:04:58,502 --> 00:05:01,698
alerts. It is usually assumed

74
00:05:01,746 --> 00:05:05,834
that such an employer prioritize work slightly over

75
00:05:05,914 --> 00:05:09,754
life. In our beloved work life balance during the

76
00:05:09,834 --> 00:05:13,210
on call period, this approach presents

77
00:05:13,242 --> 00:05:17,814
a couple of pitfalls that create an interesting dilemma.

78
00:05:18,354 --> 00:05:22,250
On one side, if the on call person only responds

79
00:05:22,282 --> 00:05:25,730
to alerts about product and availability, then during

80
00:05:25,802 --> 00:05:29,498
periods without incidents, developers can become too

81
00:05:29,546 --> 00:05:32,858
relaxed. Everything is stable. I can

82
00:05:32,906 --> 00:05:36,698
go to the pool at launch. It's unlikely anything

83
00:05:36,746 --> 00:05:40,378
will happen, and as usual happens,

84
00:05:40,546 --> 00:05:43,414
that's exactly when something does happen.

85
00:05:44,394 --> 00:05:49,002
You could assign more duties on the call person so

86
00:05:49,178 --> 00:05:52,374
they don't become complacent,

87
00:05:52,954 --> 00:05:56,194
such as responding to all production

88
00:05:56,234 --> 00:05:59,596
bugs. But then each on

89
00:05:59,620 --> 00:06:02,884
call period becomes grueling, leading to rapid

90
00:06:02,924 --> 00:06:06,548
burnout. I strive to care for the mental health

91
00:06:06,596 --> 00:06:10,264
of my employees, so I opt for the first approach

92
00:06:10,684 --> 00:06:14,364
to hedge against risks, I use an on call

93
00:06:14,404 --> 00:06:18,964
roster. If this week's on call person is somehow unavailable,

94
00:06:19,124 --> 00:06:22,916
the next person on the list responds, and if

95
00:06:23,020 --> 00:06:25,784
they also unavailable than the next.

96
00:06:26,404 --> 00:06:30,540
Moreover, anyone who has to respond out

97
00:06:30,652 --> 00:06:34,064
of term get moved to the end of the list.

98
00:06:34,524 --> 00:06:37,304
This delay dissolves as a pleasant reward.

99
00:06:38,004 --> 00:06:41,668
The week is ideal duration for an on call

100
00:06:41,716 --> 00:06:45,904
shift. Our team tried rotating on call duties daily,

101
00:06:46,604 --> 00:06:50,308
but when a service fails, facing the incident

102
00:06:50,396 --> 00:06:54,384
analysis to the next employee becomes inconvenient.

103
00:06:55,084 --> 00:06:58,492
However, to prevent a week of on call

104
00:06:58,548 --> 00:07:02,356
duty from becoming atonement, do not overload on

105
00:07:02,380 --> 00:07:06,300
call person with additional duties. They should only respond to the

106
00:07:06,332 --> 00:07:10,196
alerts you defined as significant and disruptive to

107
00:07:10,220 --> 00:07:13,948
the normal operation of service. All other

108
00:07:14,036 --> 00:07:16,784
incidents will follow your standard workflow.

109
00:07:17,364 --> 00:07:20,572
Okay, let's discuss when you might need to assign a

110
00:07:20,588 --> 00:07:24,378
dedicated role in your team. For SRE, there is

111
00:07:24,426 --> 00:07:28,450
no strict criterion, but I can highlight

112
00:07:28,522 --> 00:07:32,330
several points that you should evaluate to

113
00:07:32,362 --> 00:07:35,586
make this decision. How strict are

114
00:07:35,610 --> 00:07:38,654
the availability requirements for your product?

115
00:07:39,034 --> 00:07:42,454
For instance, if you are operating a fintech service,

116
00:07:42,834 --> 00:07:46,362
these requirements might be higher since you

117
00:07:46,378 --> 00:07:49,014
are likely handling user funds.

118
00:07:49,614 --> 00:07:53,394
Second point, how heavy is the load of the service

119
00:07:53,974 --> 00:07:57,886
or how popular is it? Failures in popular services

120
00:07:57,990 --> 00:08:01,286
leads to more significant reputational losses than

121
00:08:01,390 --> 00:08:03,794
those with a smaller customer base.

122
00:08:04,574 --> 00:08:08,302
Next point, how well is your development team

123
00:08:08,358 --> 00:08:12,670
performing, both in terms of productivity

124
00:08:12,782 --> 00:08:15,474
and the quality of the product released?

125
00:08:16,244 --> 00:08:19,844
If on call duties are time consuming and you can't

126
00:08:19,884 --> 00:08:23,212
find a way to improve the situation,

127
00:08:23,348 --> 00:08:27,596
this might be an important signal. Next point

128
00:08:27,700 --> 00:08:30,940
how complex is your system? As your product

129
00:08:31,012 --> 00:08:35,556
and team grow, the overall complexity of the system increases

130
00:08:35,740 --> 00:08:38,904
and on call shift alone no longer suffice.

131
00:08:39,324 --> 00:08:43,468
Developers begin to know less about different

132
00:08:43,556 --> 00:08:48,366
parts of the system and less independent

133
00:08:48,470 --> 00:08:52,474
in handling incidents. The last point

134
00:08:52,814 --> 00:08:56,534
what does your budget allow? Can you afford to

135
00:08:56,574 --> 00:09:00,646
have a staff member whose peak activity occurs only

136
00:09:00,750 --> 00:09:04,606
during major outages? As experience

137
00:09:04,710 --> 00:09:08,454
shows, the first SRE engineer in the team is

138
00:09:08,494 --> 00:09:12,086
usually a former developer within the same team,

139
00:09:12,270 --> 00:09:15,618
but the vacancy created still needs to be filled.

140
00:09:15,766 --> 00:09:19,474
So watch your budget. If after assessing

141
00:09:19,514 --> 00:09:22,914
this criteria, you conclude on

142
00:09:22,954 --> 00:09:26,802
at least three of them that you need an SRE team,

143
00:09:26,898 --> 00:09:28,814
then it's likely true.

144
00:09:29,434 --> 00:09:33,546
However, even before that, understand whether you

145
00:09:33,570 --> 00:09:36,614
can fix some issues with other methods.

146
00:09:36,914 --> 00:09:41,014
Could you implement a coverage plan for testing to enhance quality

147
00:09:41,194 --> 00:09:45,262
or refactor some services to reduce the complexity

148
00:09:45,398 --> 00:09:49,594
of the system? Okay, let's talk about communications.

149
00:09:50,094 --> 00:09:53,246
To ensure your team performs well in creating a

150
00:09:53,350 --> 00:09:57,062
resilient service, it's important to keep them informed within

151
00:09:57,198 --> 00:10:00,566
a unified information field. For the

152
00:10:00,590 --> 00:10:03,594
first, communicate in shared chats.

153
00:10:04,414 --> 00:10:08,570
In our company, each development team has a chat where employees

154
00:10:08,742 --> 00:10:12,522
discuss tasks and technical solutions. This allows

155
00:10:12,578 --> 00:10:14,898
all members to see current issues,

156
00:10:15,026 --> 00:10:18,414
decisions made, and their impacts on the system.

157
00:10:19,114 --> 00:10:22,818
Try to ensure your employees discuss work related

158
00:10:22,986 --> 00:10:27,014
things as little as possible in private messages.

159
00:10:27,914 --> 00:10:30,610
Organize all team meetups.

160
00:10:30,802 --> 00:10:34,322
At these meetups, employees can talk not only about

161
00:10:34,378 --> 00:10:38,414
technologies, new technologies, but also

162
00:10:38,794 --> 00:10:42,850
how they solved major tasks and outcomes of

163
00:10:43,002 --> 00:10:46,850
those solutions. Team leader meetups can be

164
00:10:46,882 --> 00:10:50,650
used to discuss team interactions, major system design

165
00:10:50,722 --> 00:10:54,574
decisions, and how collaboration can enhance the product stability,

166
00:10:55,474 --> 00:10:59,426
documentation, and knowledge transfer to

167
00:10:59,450 --> 00:11:02,922
ensure that system support quality is maintained

168
00:11:02,978 --> 00:11:05,654
in the event of staff rotation,

169
00:11:06,194 --> 00:11:09,722
document at least the most important and complex

170
00:11:09,778 --> 00:11:13,378
part of the system. Make sure this documentation is included

171
00:11:13,466 --> 00:11:17,174
in the onboarding process for the new employees

172
00:11:17,474 --> 00:11:21,734
and after their probation period, check how well

173
00:11:22,034 --> 00:11:26,690
they have understood it. A bit about people I

174
00:11:26,722 --> 00:11:31,076
truly believe that every team should have at least one specialist

175
00:11:31,250 --> 00:11:35,224
who has significantly stronger than the average market

176
00:11:35,304 --> 00:11:39,184
level senior. An experienced and skilled developer not

177
00:11:39,304 --> 00:11:42,952
only completes more and better tasks,

178
00:11:43,048 --> 00:11:46,696
but also has extensive problem

179
00:11:46,760 --> 00:11:50,544
solving experience. When we talk about SRE,

180
00:11:50,624 --> 00:11:54,040
we often discuss readiness for various types

181
00:11:54,072 --> 00:11:58,164
of problems. Specialists with over ten plus years

182
00:11:58,814 --> 00:12:02,102
of experience have encountered these problems

183
00:12:02,158 --> 00:12:05,774
far more often than recent graduates, even from

184
00:12:05,814 --> 00:12:09,742
the best universities. And believe me, this experience will

185
00:12:09,798 --> 00:12:13,198
more than once save you money and possibly even your

186
00:12:13,246 --> 00:12:16,910
business. Even if your budgets are limited,

187
00:12:17,062 --> 00:12:20,550
it's better to sacrifice an extra position in the

188
00:12:20,582 --> 00:12:24,910
staff, but hire one experienced and costly senior

189
00:12:25,022 --> 00:12:30,012
specialist to finalize my

190
00:12:30,108 --> 00:12:33,684
speech. It's important to understand that achieving

191
00:12:33,764 --> 00:12:37,852
high availability for your product requires efforts

192
00:12:37,948 --> 00:12:41,820
in all directions. So let's summarize what I

193
00:12:41,852 --> 00:12:45,468
have discussed today. Determine your

194
00:12:45,516 --> 00:12:50,124
availability criteria and SLI conduct improvements

195
00:12:50,204 --> 00:12:54,498
in alerting and monitoring. Ensure maximum

196
00:12:54,546 --> 00:12:58,618
transparency in the team communication there is no

197
00:12:58,666 --> 00:13:01,414
room for secrets in an engineering team.

198
00:13:02,234 --> 00:13:05,418
Improve code quality testing code reviews

199
00:13:05,466 --> 00:13:09,014
quality control CI CD this will be

200
00:13:09,314 --> 00:13:13,134
all fundamental an on call duty policy.

201
00:13:13,994 --> 00:13:17,546
Have the project grown. Assess the need to create an

202
00:13:17,570 --> 00:13:21,650
SRE department. Develop an SRE engineer

203
00:13:21,722 --> 00:13:25,410
within your company and if necessary,

204
00:13:25,522 --> 00:13:29,058
build an SRE team around them which

205
00:13:29,146 --> 00:13:32,658
they will train. This is challenging path,

206
00:13:32,746 --> 00:13:36,362
especially for teams that already have an

207
00:13:36,498 --> 00:13:39,794
established culture, but it's worth

208
00:13:39,834 --> 00:13:42,974
it. That concludes my presentation.

209
00:13:43,474 --> 00:13:47,354
I hope you found it interesting and that it will be helpful

210
00:13:47,394 --> 00:13:51,452
in the future. If you would like to discuss

211
00:13:51,588 --> 00:13:55,268
any topic, this or other, feel free

212
00:13:55,316 --> 00:13:58,244
to contact me my contacts on the screen.

213
00:13:58,404 --> 00:14:00,004
Thank you and have a good day.

