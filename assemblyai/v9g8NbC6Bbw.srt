1
00:00:24,640 --> 00:00:27,916
My name is Zinfan, and I work at classic today.

2
00:00:28,020 --> 00:00:31,940
I want to share a little bit about what classic does. So firstly,

3
00:00:32,012 --> 00:00:35,188
who are we? We are a startup based solver

4
00:00:35,276 --> 00:00:38,580
world ranging from the US, Europe and Asia.

5
00:00:38,652 --> 00:00:42,036
We are roughly with 65 people, and we focus

6
00:00:42,140 --> 00:00:45,028
specifically on quantum software,

7
00:00:45,196 --> 00:00:49,744
and we serve both commercial companies as well as academia.

8
00:00:50,044 --> 00:00:53,766
So let's take a look at what we do. The challenge

9
00:00:53,790 --> 00:00:57,774
that we're trying to fit is creating efficient and

10
00:00:57,814 --> 00:01:01,534
large scale quantum circuit. If you're

11
00:01:01,574 --> 00:01:05,694
familiar with quantum programming, these images are very familiar

12
00:01:05,734 --> 00:01:09,270
to you. These represent quantum circuits, which are

13
00:01:09,382 --> 00:01:12,114
programs that run on quantum computers.

14
00:01:12,534 --> 00:01:16,114
If you aren't that familiar, let me give you a quick walkthrough.

15
00:01:16,574 --> 00:01:20,050
In the lines that you see specifically on the image on the left.

16
00:01:20,222 --> 00:01:24,254
Those represent qubits or quantum bits,

17
00:01:24,874 --> 00:01:28,130
and each of the squares or other shapes on

18
00:01:28,162 --> 00:01:32,394
there are operations that you apply on

19
00:01:32,434 --> 00:01:35,666
these specific quantum bits. When you

20
00:01:35,690 --> 00:01:38,962
apply multiple operations on these quantum bits,

21
00:01:39,058 --> 00:01:42,962
eventually you will get a large quantum program,

22
00:01:43,138 --> 00:01:46,854
and that is what you want to run on your quantum computer to achieve

23
00:01:46,894 --> 00:01:50,150
your specific needs. Well, if we

24
00:01:50,182 --> 00:01:53,342
look at the quantum circuit on the left, that is a

25
00:01:53,358 --> 00:01:56,558
relatively small circuit with its few operations than just

26
00:01:56,606 --> 00:02:00,318
a handful of qubits. This is something that many quantum

27
00:02:00,366 --> 00:02:04,078
programmers can just create easily

28
00:02:04,246 --> 00:02:07,034
with the tools that we have available today.

29
00:02:07,774 --> 00:02:11,630
The tools that we have available today are mostly what we call gate based

30
00:02:11,702 --> 00:02:14,972
programming. So that means that you are manually

31
00:02:15,068 --> 00:02:19,156
putting all these gates or operations on the circuit board,

32
00:02:19,300 --> 00:02:23,204
or you have a larger group of gates that you

33
00:02:23,244 --> 00:02:26,524
put on a specific circuit board. If we move

34
00:02:26,564 --> 00:02:29,660
up to a little bit larger quantum circuit,

35
00:02:29,732 --> 00:02:33,316
the image in the middle, things get a little bit more complex.

36
00:02:33,420 --> 00:02:36,868
So you either need a lot more time to create this, and you need a

37
00:02:36,876 --> 00:02:40,510
lot more ideas on what

38
00:02:40,582 --> 00:02:45,550
specific things that you actually want to create and how you could most efficiently

39
00:02:45,702 --> 00:02:49,634
create that functionality in your quantum circuit.

40
00:02:50,054 --> 00:02:53,286
If we go to the right, you have a very big quantum program.

41
00:02:53,430 --> 00:02:56,846
These quantum programs represent the things that

42
00:02:56,870 --> 00:03:00,614
we actually want to do with quantum computer, like quantum chemistry or

43
00:03:00,654 --> 00:03:04,086
other extremely nice use cases. The problem is,

44
00:03:04,110 --> 00:03:07,012
when you're programming with the current tools,

45
00:03:07,068 --> 00:03:10,492
creating such a very large quantum circuit

46
00:03:10,548 --> 00:03:14,092
can be very challenging. Not only that is

47
00:03:14,148 --> 00:03:17,748
if you create a specific quantum program that doesn't

48
00:03:17,796 --> 00:03:21,644
guarantee that the program will run efficiently on each quantum

49
00:03:21,684 --> 00:03:25,580
computer. That means that it could run very efficiently on

50
00:03:25,612 --> 00:03:29,052
one machine, but very inefficiently on the other.

51
00:03:29,228 --> 00:03:32,628
The solution to that currently is that you would have to

52
00:03:32,676 --> 00:03:36,252
actually creates two different quantum circuits,

53
00:03:36,428 --> 00:03:39,540
one that will run better on one machine and one and

54
00:03:39,572 --> 00:03:42,924
the other not only that is once you have more

55
00:03:42,964 --> 00:03:47,204
qubits available when the quantum computers become larger,

56
00:03:47,324 --> 00:03:50,660
if you want to actually make use of those, you would have to

57
00:03:50,692 --> 00:03:54,004
reprogram. Again, that's a very manual

58
00:03:54,084 --> 00:03:57,860
task to actually generate these quantum circuits and

59
00:03:57,892 --> 00:04:00,854
also to make them very efficient.

60
00:04:01,474 --> 00:04:05,370
That is the exact problem or challenge that classic

61
00:04:05,482 --> 00:04:09,786
wants to tackle. Instead of writing quantum circuits

62
00:04:09,930 --> 00:04:13,706
on a gate level, in classic you write

63
00:04:13,810 --> 00:04:17,894
a higher level description of what you want to achieve.

64
00:04:18,474 --> 00:04:22,130
This means that you do not have to describe at a low level or

65
00:04:22,162 --> 00:04:25,846
gate level how you want to achieve specific functionality,

66
00:04:26,010 --> 00:04:29,474
you just write what functionality you want to achieve.

67
00:04:29,814 --> 00:04:33,710
It's important to note here that the same functionality can

68
00:04:33,742 --> 00:04:37,634
be achieved in various ways on a quantum computer.

69
00:04:37,974 --> 00:04:41,286
So that means that you have a lot of freedom to pick

70
00:04:41,390 --> 00:04:44,846
how you want to implement it. That also means that if you

71
00:04:44,870 --> 00:04:48,714
make a wrong decision, a specific circuit can be less efficient.

72
00:04:49,014 --> 00:04:53,158
And this is something that I, our compiler

73
00:04:53,206 --> 00:04:56,470
or synthesis engine does for you. So in

74
00:04:56,502 --> 00:05:00,342
classic, you write your program, your desired functionality

75
00:05:00,478 --> 00:05:04,670
in a higher level programming language, and our compiler

76
00:05:04,782 --> 00:05:08,674
makes the decision on how to implement that specific

77
00:05:08,974 --> 00:05:12,174
functionality for you on a gate based

78
00:05:12,294 --> 00:05:16,078
circuit. The interesting thing is that we do not only take

79
00:05:16,126 --> 00:05:19,702
the high level description or program as

80
00:05:19,718 --> 00:05:23,574
an input to our compiler, we also take the quantum

81
00:05:23,614 --> 00:05:27,154
computer that you want to run on as an input.

82
00:05:27,614 --> 00:05:31,686
This means our compiler can inadvertently

83
00:05:31,750 --> 00:05:35,214
optimize the quantum circuit for that specific

84
00:05:35,294 --> 00:05:38,782
machine. That also means if you want to target

85
00:05:38,838 --> 00:05:42,926
a new machine with a different architecture or you have more

86
00:05:42,950 --> 00:05:46,178
qubit available, you do not need to reprogram

87
00:05:46,226 --> 00:05:49,834
anything. You just tell a compiler that you have a new target.

88
00:05:49,954 --> 00:05:53,202
And our compiler will try to make the most efficient use

89
00:05:53,258 --> 00:05:56,922
of those extra qubits or the different architecture

90
00:05:56,978 --> 00:06:00,930
that you're trying to target. Once you've created your circuit,

91
00:06:01,042 --> 00:06:05,334
you can actually analyze the output in our online analyzer.

92
00:06:05,914 --> 00:06:09,954
This allows you to see how our compiler

93
00:06:09,994 --> 00:06:12,734
has actually implemented your functionality.

94
00:06:13,564 --> 00:06:17,756
And finally, when you have your circuit and you're happy with, you can execute

95
00:06:17,780 --> 00:06:21,348
it right away from within our platform to any cloud

96
00:06:21,396 --> 00:06:24,820
provider that there are ranging from Amazon,

97
00:06:24,972 --> 00:06:28,584
Azure, AWS, IBM and more.

98
00:06:29,164 --> 00:06:32,852
If you don't know if the provider that you want isn't there,

99
00:06:32,988 --> 00:06:36,564
you can simply export the circuits that you have

100
00:06:36,684 --> 00:06:40,396
in a chasm file and run it anywhere where you

101
00:06:40,420 --> 00:06:44,500
like. This gives you all the flexibility to execute

102
00:06:44,532 --> 00:06:48,180
your code everywhere. So let's look at a specific

103
00:06:48,252 --> 00:06:52,340
example. In this example, we're going to look at Grover's algorithm.

104
00:06:52,492 --> 00:06:56,540
Grover's algorithm is an algorithm for unstructured search,

105
00:06:56,652 --> 00:07:00,044
and it can search things quicker than a classical computer

106
00:07:00,084 --> 00:07:03,708
could. In this case, we're looking at how

107
00:07:03,756 --> 00:07:07,836
to solve a specific mathematical expression. What we

108
00:07:07,860 --> 00:07:10,104
see right here is the IDE,

109
00:07:10,684 --> 00:07:15,104
which is a web based application of the classic platform.

110
00:07:15,804 --> 00:07:20,588
In the middle, you can see our code area, where you can write classics

111
00:07:20,716 --> 00:07:24,104
own quantum computer programming language.

112
00:07:24,564 --> 00:07:28,636
And on the right, we have a helpful tool that helps

113
00:07:28,660 --> 00:07:32,252
you write that code. Specifically for a grow

114
00:07:32,308 --> 00:07:35,790
verb search function. Over here,

115
00:07:35,862 --> 00:07:39,230
you can input your mathematical equation.

116
00:07:39,382 --> 00:07:42,870
And in this case, the equation is relatively simple.

117
00:07:43,062 --> 00:07:47,382
A plus b times one, two, or divided by two

118
00:07:47,558 --> 00:07:50,994
times c needs to equal ten.

119
00:07:51,614 --> 00:07:55,102
The goal of this specific Grover algorithm is

120
00:07:55,118 --> 00:07:59,418
to find the values of a, b, and c that satisfy

121
00:07:59,566 --> 00:08:02,842
this specific expression. The only thing we

122
00:08:02,858 --> 00:08:05,774
need to do is set our expression, which we've done over here.

123
00:08:06,194 --> 00:08:10,010
And next to that, we need to set what we

124
00:08:10,042 --> 00:08:14,250
like to be. Would we like them to be integers or maybe floats?

125
00:08:14,442 --> 00:08:17,334
If they're floats, how many decimal points we want?

126
00:08:17,874 --> 00:08:21,294
And do we want them signed or unsigned, for example?

127
00:08:21,834 --> 00:08:24,174
Next to that, there's other optimization.

128
00:08:25,414 --> 00:08:29,502
How do you want to optimize? Would you like the most shallow as possible circuit,

129
00:08:29,638 --> 00:08:32,714
or would you like the least amount of qubit to be used?

130
00:08:33,414 --> 00:08:37,054
Once you set this all up, we can create the classic

131
00:08:37,094 --> 00:08:40,982
code that you see in the middle. And if you want, you can even change

132
00:08:41,038 --> 00:08:44,358
that and add more or take out some functionality

133
00:08:44,406 --> 00:08:47,390
that was created for you. Once you're happy,

134
00:08:47,462 --> 00:08:51,806
you can press the synthesis, and that will actually generate

135
00:08:51,870 --> 00:08:55,206
the quantum circuit for you. And in this case, this is

136
00:08:55,230 --> 00:08:58,574
the entire Grover circuit that was created. What I've

137
00:08:58,614 --> 00:09:02,254
created here is a circuit with a specific constraint. In this case,

138
00:09:02,294 --> 00:09:05,234
I put a constraint 25 qubits,

139
00:09:05,534 --> 00:09:09,326
because a simulator I want to run on has a maximum of

140
00:09:09,390 --> 00:09:12,622
25 qubits. Next to that, I have also

141
00:09:12,678 --> 00:09:16,798
put an optimization parameter of depth. That means that

142
00:09:16,846 --> 00:09:21,030
the synthetic will generate the shallowest as possible cert.

143
00:09:21,222 --> 00:09:25,238
And as you can see, all these operations together will generate one

144
00:09:25,286 --> 00:09:29,566
big Grover's algorithm, from the initialization

145
00:09:29,670 --> 00:09:33,754
of the variable to the grove, oracle, and the diffuser.

146
00:09:34,214 --> 00:09:38,062
Now, if we want to execute it, we simply press execute on the top

147
00:09:38,118 --> 00:09:42,254
right, and we can run it directly on classic simulator or any other

148
00:09:42,294 --> 00:09:45,090
simulator or quantum computer that is out there.

149
00:09:45,262 --> 00:09:48,954
And as you can see, when we hover over these bars, you see the

150
00:09:49,034 --> 00:09:52,850
right answers that satisfy this specific equation.

151
00:09:52,962 --> 00:09:55,574
And as you can see, there's multiple answers possible.

152
00:09:55,954 --> 00:09:59,706
The highlighted here is a seven, b three,

153
00:09:59,810 --> 00:10:03,658
and then t two, which eventually will

154
00:10:03,706 --> 00:10:05,974
satisfy this specific equation.

155
00:10:06,674 --> 00:10:10,370
That is how simple it is to create a Grover's algorithm in

156
00:10:10,402 --> 00:10:14,104
classic. Imagine having to do all this on a

157
00:10:14,924 --> 00:10:19,004
gate based programming that will take you a lot more time. And here

158
00:10:19,044 --> 00:10:22,692
it just took me five minutes from the creation all the way

159
00:10:22,748 --> 00:10:26,836
to the execution. Now, let's look at some more complex

160
00:10:26,980 --> 00:10:30,676
use cases that Classic has dealt with. The first

161
00:10:30,740 --> 00:10:34,108
one is an algorithm called HHL.

162
00:10:34,276 --> 00:10:37,868
This is an algorithm that pulls linear

163
00:10:37,916 --> 00:10:41,036
equations exponentially quicker, and classical

164
00:10:41,100 --> 00:10:44,340
methods. Could you. This is very interesting in

165
00:10:44,412 --> 00:10:47,644
many different industries, because solving linear equations is

166
00:10:47,684 --> 00:10:51,036
a very big challenge in many industries. And being

167
00:10:51,100 --> 00:10:54,868
able to write an efficient HTGL algorithm is actually something

168
00:10:54,996 --> 00:10:59,020
that can be useful everywhere. Classic allows you to very easily

169
00:10:59,092 --> 00:11:02,660
create this algorithm and scale it

170
00:11:02,732 --> 00:11:06,376
from very small to very big. This is an

171
00:11:06,400 --> 00:11:10,400
example where we used a very big simulator to

172
00:11:10,432 --> 00:11:13,856
simulate this enormous algorithm that we

173
00:11:13,880 --> 00:11:17,376
have created together with Rollsroyce. Next to that is

174
00:11:17,400 --> 00:11:21,168
a financial use case where we're together with an italian

175
00:11:21,216 --> 00:11:24,936
bank in testosterone Paulo actually created a new

176
00:11:25,000 --> 00:11:28,808
way of pricing specific options called

177
00:11:28,896 --> 00:11:32,560
rainbow options. Using Classic, they're able to very

178
00:11:32,632 --> 00:11:36,698
quickly implement their new way of pricing these

179
00:11:36,746 --> 00:11:40,254
options and actually test whether their method

180
00:11:41,914 --> 00:11:45,410
does actually work. And finally, together with another

181
00:11:45,482 --> 00:11:49,330
bank, we're using QAOA, an optimization algorithm,

182
00:11:49,442 --> 00:11:52,890
to optimize portfolio. And the research

183
00:11:52,962 --> 00:11:56,922
that we have done here is what type of parameters for that QAOA

184
00:11:56,978 --> 00:12:00,418
algorithm are the most efficient to actually

185
00:12:00,546 --> 00:12:04,444
get the best circuit and the ideal portfolio.

186
00:12:05,104 --> 00:12:09,096
With that, I want to thank you so much, and I hope you enjoy the

187
00:12:09,120 --> 00:12:09,824
rest of the conference.

