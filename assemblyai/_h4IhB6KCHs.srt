1
00:00:20,730 --> 00:00:24,250
Hi, everyone. My name is Peter. I'm CEO

2
00:00:24,330 --> 00:00:28,150
at Bloom, where we are

3
00:00:28,220 --> 00:00:31,478
researching multiparty computation protocols and

4
00:00:31,564 --> 00:00:35,830
applying them to different tasks in fintech.

5
00:00:36,250 --> 00:00:39,862
I'm really happy to be here with you at the conference,

6
00:00:40,006 --> 00:00:43,782
talking about such an important topic as data privacy

7
00:00:43,926 --> 00:00:46,380
and how we can enhance it.

8
00:00:47,150 --> 00:00:49,500
Okay, let's jump on the talk.

9
00:00:50,370 --> 00:00:53,838
No one will argue that some information should

10
00:00:53,924 --> 00:00:57,678
be kept private. For example, your bank account

11
00:00:57,764 --> 00:01:01,422
balance on your medical records. But what

12
00:01:01,476 --> 00:01:05,406
does it exactly mean to be kept private? There are plenty

13
00:01:05,438 --> 00:01:08,654
of different information security procedures and tools

14
00:01:08,702 --> 00:01:12,450
that protect your data quite well. But is it enough

15
00:01:12,520 --> 00:01:15,402
to just store the information securely?

16
00:01:15,566 --> 00:01:19,622
Well, it's not. Privacy and security are

17
00:01:19,676 --> 00:01:23,382
closely related concepts, but there is a quite important difference between

18
00:01:23,436 --> 00:01:26,950
them. The point is that the security measures protect

19
00:01:27,020 --> 00:01:30,474
your data from being stolen. It protects you from

20
00:01:30,512 --> 00:01:34,106
bad guys. But not everyone who wants to get access to

21
00:01:34,128 --> 00:01:37,270
your privacy data is bad. Just the opposite.

22
00:01:37,350 --> 00:01:39,100
Most of them wish you well.

23
00:01:40,930 --> 00:01:44,586
They just want to create better services for you, and that's

24
00:01:44,618 --> 00:01:48,170
why they need your data. So data privacy

25
00:01:48,250 --> 00:01:51,550
is a wider concept. And there are a couple of

26
00:01:51,620 --> 00:01:54,818
examples. A nice guy who has

27
00:01:54,904 --> 00:01:58,270
a credit card. This card stores

28
00:01:58,430 --> 00:02:02,178
some information that is quite sensitive for Bob because

29
00:02:02,264 --> 00:02:05,380
it's connected directly to Bob's bank account.

30
00:02:06,170 --> 00:02:10,470
Now, let's imagine that someone who is not as nice as Bob

31
00:02:11,050 --> 00:02:14,790
has stolen Bob's card. That is bad,

32
00:02:14,940 --> 00:02:17,240
because Bob could lose money.

33
00:02:17,710 --> 00:02:21,606
Honestly, it sounds like a disaster.

34
00:02:21,718 --> 00:02:25,270
But this is a classic innovations security incident,

35
00:02:25,430 --> 00:02:29,146
and there are clear procedures that must be followed to

36
00:02:29,168 --> 00:02:32,878
fix the situation. For instance, Bob can

37
00:02:32,964 --> 00:02:37,102
call the bank and block the card, or he can

38
00:02:37,156 --> 00:02:41,040
just press a couple of buttons in his bank application.

39
00:02:41,650 --> 00:02:45,186
Anyway, it won't take longer than ten minutes to

40
00:02:45,208 --> 00:02:48,980
close the issue. Well, the next example,

41
00:02:49,430 --> 00:02:52,370
that's Bob's annual income.

42
00:02:53,030 --> 00:02:56,482
Bob knows it. Bob's employer knows it.

43
00:02:56,616 --> 00:03:00,614
Bob's bank knows it. A lot of us who know,

44
00:03:00,812 --> 00:03:04,550
and there are more who would like to know as well.

45
00:03:04,700 --> 00:03:09,066
For instance, our banks, e commerce companies,

46
00:03:09,248 --> 00:03:12,778
and so on and so on. And most of them

47
00:03:12,864 --> 00:03:16,554
aren't bad guys, at least in the usual sense.

48
00:03:16,752 --> 00:03:20,250
They are just developing their businesses.

49
00:03:20,930 --> 00:03:24,910
Now, let's say someone has found out Bob's income.

50
00:03:27,250 --> 00:03:30,762
That doesn't sound as bad as a credit card been stolen,

51
00:03:30,906 --> 00:03:35,026
but if you think about it, it can be quite

52
00:03:35,128 --> 00:03:39,118
unpleasant. Bob ends up receiving

53
00:03:39,214 --> 00:03:42,862
banking promotions, which can be quite intrusive,

54
00:03:43,006 --> 00:03:46,486
or seeing advertisements he doesn't want to see.

55
00:03:46,668 --> 00:03:50,040
And worse, it's not easy to stop.

56
00:03:50,410 --> 00:03:53,702
Even if pop's income changes, it will

57
00:03:53,756 --> 00:03:56,920
take a while before we find out about it.

58
00:03:57,550 --> 00:04:00,794
So I hope this is a good example of

59
00:04:00,832 --> 00:04:04,470
data privacy relation. Not as tragic

60
00:04:04,550 --> 00:04:08,550
as a stolen credit card, but still unpleasant.

61
00:04:08,630 --> 00:04:12,030
And okay, another example,

62
00:04:12,180 --> 00:04:14,160
that's Bob's face.

63
00:04:14,930 --> 00:04:18,654
And he uses it not only to conquer the

64
00:04:18,692 --> 00:04:22,640
world with his smile, but also to unlock his phone,

65
00:04:23,330 --> 00:04:27,090
to pay for a flat ride at a coffee shop on the corner,

66
00:04:27,430 --> 00:04:30,930
or even to pass through a biometric gate in

67
00:04:31,000 --> 00:04:34,990
an airport. Quite a lot of important things,

68
00:04:35,080 --> 00:04:39,910
isn't it? If someone steals Bob's biometrics,

69
00:04:40,330 --> 00:04:43,954
that would be a real disaster. This is a tragic blend

70
00:04:44,002 --> 00:04:47,794
of security breaches and privacy relations that can have real long

71
00:04:47,852 --> 00:04:51,734
consequences. Bob can easily block his bank

72
00:04:51,782 --> 00:04:55,930
card. He can even change his annual income.

73
00:04:57,070 --> 00:04:59,580
But it's really hard to change one's face.

74
00:05:00,130 --> 00:05:04,126
So, to confirm my words, I will give a

75
00:05:04,148 --> 00:05:08,318
bit of data from the cost of data breach annual report

76
00:05:08,484 --> 00:05:11,680
by IBM. As you can see,

77
00:05:12,050 --> 00:05:16,126
not only the total cost of all breaches is increasing,

78
00:05:16,318 --> 00:05:19,940
but also the per record cost as well.

79
00:05:20,390 --> 00:05:23,714
This may indicate two things. There are

80
00:05:23,752 --> 00:05:27,638
more leaks, and the cost of each individual

81
00:05:27,804 --> 00:05:31,400
piece of leaky data has also gone up.

82
00:05:31,770 --> 00:05:34,840
Anyway, it doesn't sounds good, does it?

83
00:05:35,210 --> 00:05:38,714
We have been building information security system for

84
00:05:38,752 --> 00:05:41,660
decades, but something went wrong.

85
00:05:42,350 --> 00:05:47,258
Well, if you ask me, I will answer that

86
00:05:47,424 --> 00:05:50,654
it's because we didn't expect to have to

87
00:05:50,692 --> 00:05:54,506
protect our data from ourselves. We didn't

88
00:05:54,538 --> 00:05:58,766
expect our data to be used so widely, and we

89
00:05:58,788 --> 00:06:02,030
didn't expect us to give our data away to anyone

90
00:06:02,100 --> 00:06:06,126
so easily. We have created a lot of brilliant

91
00:06:06,158 --> 00:06:09,714
security measures, but ended up with data security

92
00:06:09,832 --> 00:06:11,570
without data privacy.

93
00:06:13,190 --> 00:06:16,918
Okay, not completely without, but with quite weak data

94
00:06:17,004 --> 00:06:20,326
privacy. And good news,

95
00:06:20,508 --> 00:06:24,082
we are changing that. There are some technologies

96
00:06:24,146 --> 00:06:28,426
that aim to enhance your data privacy. And today

97
00:06:28,528 --> 00:06:32,374
we are going to take a close look at the most promising

98
00:06:32,422 --> 00:06:35,366
of them, secure multiparty computation,

99
00:06:35,478 --> 00:06:39,226
or to shot NPC. And to

100
00:06:39,248 --> 00:06:42,846
kick off, there are a couple words

101
00:06:42,948 --> 00:06:45,920
about math that stand behind it.

102
00:06:46,290 --> 00:06:50,346
MPC is based on quite famous cryptographic

103
00:06:50,378 --> 00:06:53,170
primitive called secret sharing.

104
00:06:53,590 --> 00:06:57,442
The idea is simple. Take a secret number and

105
00:06:57,496 --> 00:07:01,522
break it up into pieces so that each individual piece has

106
00:07:01,576 --> 00:07:05,634
no offense. These pieces are called secret

107
00:07:05,682 --> 00:07:09,510
shares. And there are several ways to do secret sharing.

108
00:07:10,010 --> 00:07:13,430
The most obvious of them is in the slide.

109
00:07:13,850 --> 00:07:17,754
Let's just split the number into a sum of

110
00:07:17,792 --> 00:07:21,850
random numbers of shares. If you send a share

111
00:07:22,000 --> 00:07:25,782
to anyone, they can't extract any meaningful

112
00:07:25,846 --> 00:07:29,654
innovations from it because again, it's just a random

113
00:07:29,702 --> 00:07:32,734
number. To get the original number,

114
00:07:32,932 --> 00:07:36,330
or as they say, to reconstruct a secret,

115
00:07:36,490 --> 00:07:40,590
you must have all its shares. Even if you have

116
00:07:40,660 --> 00:07:43,966
all but one, it's impossible to know original

117
00:07:43,998 --> 00:07:47,298
number. Now let's see how

118
00:07:47,384 --> 00:07:51,214
we can add numbers using its secret shares

119
00:07:51,262 --> 00:07:55,230
only. You've already known Bob. Meet his friends

120
00:07:55,320 --> 00:07:59,174
Alice and Mallory. Let's say Bob has

121
00:07:59,292 --> 00:08:03,094
a secret number, three. Alice has six

122
00:08:03,212 --> 00:08:07,030
and Mallory has one. Assume they

123
00:08:07,100 --> 00:08:11,258
want to compute the sum of their numbers without

124
00:08:11,344 --> 00:08:14,620
revealing any information about the numbers themselves.

125
00:08:15,630 --> 00:08:19,706
Friends should not learn anything about each other's numbers,

126
00:08:19,808 --> 00:08:23,342
and neither should any third parties. No one

127
00:08:23,396 --> 00:08:27,200
should. It sounds like a trick, kind of,

128
00:08:28,130 --> 00:08:31,802
but it's quite easy to do. Using the secret sharing from the previous

129
00:08:31,866 --> 00:08:35,602
slide. Step one. Bob breaks up

130
00:08:35,656 --> 00:08:39,170
his number into a sum of three random numbers.

131
00:08:39,320 --> 00:08:42,610
Let it be two. Minus five and

132
00:08:42,680 --> 00:08:46,354
six sends minus five to Alice and

133
00:08:46,392 --> 00:08:50,120
sends six to Mallory. In other words,

134
00:08:50,490 --> 00:08:53,878
Bob shares his secret with his friends,

135
00:08:54,044 --> 00:08:58,022
and no one can restore it because all we get is

136
00:08:58,076 --> 00:09:01,080
just random numbers. Okay,

137
00:09:01,450 --> 00:09:05,450
Alice and Mallory do the same share with secrets.

138
00:09:06,030 --> 00:09:09,754
Well, step two all just add

139
00:09:09,792 --> 00:09:12,990
up the random numbers and get result,

140
00:09:13,140 --> 00:09:17,278
which is random as well. Bob gets zero,

141
00:09:17,444 --> 00:09:20,618
Alice gets minus three, and Mallory

142
00:09:20,714 --> 00:09:23,874
gets 13. And finally,

143
00:09:23,992 --> 00:09:27,714
step three. Bob sends his zero to Alice and

144
00:09:27,752 --> 00:09:31,342
Mallory. Alice sends her minus three to Mallory

145
00:09:31,406 --> 00:09:34,750
and Bob. And Mallory sends his 13

146
00:09:34,830 --> 00:09:38,226
to Bob and Alice. So that's

147
00:09:38,258 --> 00:09:42,134
basically it. Everyone just adds up all they

148
00:09:42,172 --> 00:09:45,622
get, and he achieves. The result is

149
00:09:45,676 --> 00:09:49,500
ten. Friends manage to sum up their numbers,

150
00:09:49,870 --> 00:09:53,658
learning nothing but result variable terms

151
00:09:53,744 --> 00:09:57,178
do not change the sum. All we do is make terms

152
00:09:57,264 --> 00:10:00,990
from them. Okay, let's figure

153
00:10:01,060 --> 00:10:04,720
out how to multiply numbers without seeing them.

154
00:10:05,250 --> 00:10:09,178
Multiplication. Multiplication is a bit more complex,

155
00:10:09,274 --> 00:10:12,270
and there are a few different protocols.

156
00:10:12,630 --> 00:10:16,210
We are going to look at probably the simplest one

157
00:10:16,360 --> 00:10:19,854
based on a special method of secret sharing

158
00:10:19,982 --> 00:10:23,582
called replicated sharing. Assume Bob,

159
00:10:23,646 --> 00:10:26,820
who has three, and Alice, who has six,

160
00:10:30,490 --> 00:10:34,150
want to multiply their numbers in some private manner.

161
00:10:34,570 --> 00:10:38,086
To do so, we will use three servers that are

162
00:10:38,108 --> 00:10:42,342
ongoing to collude. These servers can be controlled

163
00:10:42,406 --> 00:10:46,746
by different organizations, or they can even

164
00:10:46,848 --> 00:10:50,350
be virtual private servers hosted by

165
00:10:50,420 --> 00:10:54,346
different cloud providers. Anyway, let's execute

166
00:10:54,378 --> 00:10:58,014
the protocol. Step one, Bob breaks up his

167
00:10:58,052 --> 00:11:01,390
secret into three random fares. Let them be

168
00:11:01,460 --> 00:11:04,020
one, four and minus two,

169
00:11:04,390 --> 00:11:07,970
then sends one and four to server one,

170
00:11:08,120 --> 00:11:11,666
four and minus two to server two and

171
00:11:11,768 --> 00:11:14,420
minus two and one to server three.

172
00:11:15,050 --> 00:11:18,262
The reason why it's called replicated sharing is

173
00:11:18,316 --> 00:11:21,606
because each server gets two out of

174
00:11:21,628 --> 00:11:25,510
three of Bob's secret shares. It's still

175
00:11:25,580 --> 00:11:28,998
not enough for one server to restore the secret,

176
00:11:29,174 --> 00:11:32,266
but any two of them can do that.

177
00:11:32,448 --> 00:11:36,298
That's replication. Alice does the same.

178
00:11:36,384 --> 00:11:40,170
She distributes her shares among free servers.

179
00:11:40,930 --> 00:11:45,310
Step number two, our servers perform some calculations.

180
00:11:46,290 --> 00:11:49,982
It's all in the slide. I won't read it out

181
00:11:50,036 --> 00:11:54,526
loud. Number by number by. Pay attention to the results.

182
00:11:54,718 --> 00:11:57,300
1310 and minus five.

183
00:11:57,670 --> 00:12:02,130
If we sum it up, we will get 18.

184
00:12:03,350 --> 00:12:07,142
That's exactly what we expect to get when multiplying three by

185
00:12:07,196 --> 00:12:11,222
six. So it seems like our servers should

186
00:12:11,276 --> 00:12:15,080
just exchange their numbers, but most of us.

187
00:12:15,530 --> 00:12:19,050
I will give you a visual explanation of

188
00:12:19,120 --> 00:12:21,820
why this way of multiplication works.

189
00:12:22,270 --> 00:12:25,674
Let's say we have rectangle wave sides a

190
00:12:25,712 --> 00:12:29,402
and b. Okay? Then the area of

191
00:12:29,456 --> 00:12:33,086
rectangle is a times b. If we

192
00:12:33,108 --> 00:12:36,638
divide our large rectangle into nine small ones,

193
00:12:36,804 --> 00:12:40,958
then compute the area of each and add them all up,

194
00:12:41,124 --> 00:12:44,770
we get the total area of our rectangle, which is,

195
00:12:44,840 --> 00:12:47,780
as we already know, a times b.

196
00:12:48,470 --> 00:12:51,470
This is exactly what we did in the previous slide.

197
00:12:51,630 --> 00:12:55,086
Just ask each of three servers to compute the

198
00:12:55,128 --> 00:12:57,430
areas of three small rectangles.

199
00:12:58,170 --> 00:13:01,400
But there is an issue.

200
00:13:02,090 --> 00:13:06,214
Each server can compute more than the area of three

201
00:13:06,252 --> 00:13:09,754
rectangles. There are some areas that can

202
00:13:09,792 --> 00:13:12,650
be computed by more than just one server,

203
00:13:14,350 --> 00:13:18,730
so it could be insecure to simply exchange results.

204
00:13:19,070 --> 00:13:22,670
In some cases, it could lead to data leaks.

205
00:13:23,010 --> 00:13:25,630
What we aim to avoid.

206
00:13:26,450 --> 00:13:29,982
Instead, we should consider the results of each

207
00:13:30,036 --> 00:13:33,666
server as a private input and carry out

208
00:13:33,768 --> 00:13:36,978
the addition protocol that

209
00:13:37,064 --> 00:13:41,342
we took a look at recently. Servers distribute

210
00:13:41,406 --> 00:13:44,980
shares of the results and sum an up.

211
00:13:45,530 --> 00:13:49,222
As you can see in the slide, the result is still

212
00:13:49,276 --> 00:13:53,110
correct. Three times six is 18.

213
00:13:53,610 --> 00:13:57,234
By the way, this example shows the interesting feature

214
00:13:57,282 --> 00:14:00,682
of multiparty computation. We can

215
00:14:00,736 --> 00:14:04,214
compute quite complex functions by chaining

216
00:14:04,262 --> 00:14:08,074
up the calculations. And we don't have to

217
00:14:08,112 --> 00:14:10,570
reveal any intermediate results.

218
00:14:11,730 --> 00:14:15,630
We operate with secret shares all the way to a final

219
00:14:15,700 --> 00:14:16,320
step,

220
00:14:18,850 --> 00:14:22,706
which gives us that function result. And this

221
00:14:22,728 --> 00:14:26,002
result is the only one. I want

222
00:14:26,056 --> 00:14:29,970
you to just take a look at this slide.

223
00:14:30,390 --> 00:14:34,226
You immediately recognize this equation. It's a

224
00:14:34,248 --> 00:14:37,686
linear regression, the real machine learning

225
00:14:37,788 --> 00:14:41,638
model. And as you can see, it's no more

226
00:14:41,724 --> 00:14:44,550
than a blend of addition and multiplication.

227
00:14:46,810 --> 00:14:50,202
We can multiply numbers by operating very

228
00:14:50,256 --> 00:14:54,314
secret shares. In other words, we don't have

229
00:14:54,352 --> 00:14:58,202
to access the data to infer or even train

230
00:14:58,336 --> 00:15:02,270
some machine learning models. Just like regression,

231
00:15:05,410 --> 00:15:08,670
let's imagine that there are two banks

232
00:15:09,730 --> 00:15:13,730
and each have some important data about their clients.

233
00:15:14,150 --> 00:15:16,850
That data is more than just sensitive,

234
00:15:17,270 --> 00:15:21,182
it's bank secrecy, and it's

235
00:15:21,246 --> 00:15:25,366
often protected by law, so it

236
00:15:25,388 --> 00:15:28,486
could be just illegal to reveal it on the

237
00:15:28,508 --> 00:15:32,022
other side. Banks can profit a lot from data

238
00:15:32,076 --> 00:15:35,606
collaboration. Let's also imagine that

239
00:15:35,708 --> 00:15:39,194
there is another participant. Let's call it the

240
00:15:39,232 --> 00:15:43,574
model owner. Let him hold the trained regression

241
00:15:43,622 --> 00:15:47,082
weight. That regression consumes data from

242
00:15:47,136 --> 00:15:51,402
both banks and brings about, let's say, a really accurate

243
00:15:51,466 --> 00:15:55,434
credit score. So we can compute regression

244
00:15:55,562 --> 00:15:58,894
in a quiet, private way by using free service,

245
00:15:59,092 --> 00:16:03,070
just like we did when studying secret shared multiplication.

246
00:16:03,750 --> 00:16:06,302
Banks will keep their data private,

247
00:16:06,446 --> 00:16:10,450
and the model owner won't reveal anything about

248
00:16:10,520 --> 00:16:13,780
his model. It sounds pretty good, doesn't it?

249
00:16:14,150 --> 00:16:16,260
Of course, that example,

250
00:16:17,830 --> 00:16:21,334
it's a bit toyish, but I believe it

251
00:16:21,372 --> 00:16:24,790
gives an intuition of how multiparty computation

252
00:16:25,690 --> 00:16:28,954
can be applied to real world tasks. And by

253
00:16:28,992 --> 00:16:32,646
the way, we are solving quite similar tasks

254
00:16:32,678 --> 00:16:35,930
in Bloomtech every day. Okay,

255
00:16:36,080 --> 00:16:40,054
I hope I managed to convince you that secure

256
00:16:40,102 --> 00:16:43,822
multiparty computation is a great technology. That may

257
00:16:43,876 --> 00:16:46,480
change the way we process our data,

258
00:16:47,490 --> 00:16:51,470
make it more privacy preserving. But as always,

259
00:16:51,620 --> 00:16:55,118
there are some limitations. Firstly,

260
00:16:55,294 --> 00:16:58,386
it requires infrastructure that can cost

261
00:16:58,488 --> 00:17:01,730
more than the one you need for commodity computations.

262
00:17:02,150 --> 00:17:06,102
Secondly, the MPC protocols are complex. They really

263
00:17:06,156 --> 00:17:10,162
are. We have only covered the very basics.

264
00:17:10,306 --> 00:17:13,814
The truly secure and efficient protocols you can

265
00:17:13,852 --> 00:17:16,790
use in the real world are way harder.

266
00:17:17,390 --> 00:17:21,530
MPC has a significant computation overhead.

267
00:17:22,190 --> 00:17:25,386
You definitely notice that participants in

268
00:17:25,408 --> 00:17:29,414
the computation kept sending each other messages

269
00:17:29,462 --> 00:17:33,310
with random numbers. In real life, we use

270
00:17:33,460 --> 00:17:37,482
networks for this, and networks are comparably

271
00:17:37,546 --> 00:17:41,194
slow. To do one arithmetic

272
00:17:41,242 --> 00:17:44,050
operation, we have to do many.

273
00:17:44,200 --> 00:17:46,610
That's computation overhead.

274
00:17:47,190 --> 00:17:50,734
So in the end, MPC is slower

275
00:17:50,862 --> 00:17:54,050
than commodity and encrypted computations.

276
00:17:54,390 --> 00:17:58,118
But good news, we are working on it

277
00:17:58,284 --> 00:18:02,182
today. Protocols are way more efficient than

278
00:18:02,236 --> 00:18:05,298
they were yesterday. Moreover,

279
00:18:05,474 --> 00:18:08,506
sometimes it's worth waiting a bit when it

280
00:18:08,528 --> 00:18:11,930
comes to your personal data privacy.

281
00:18:12,510 --> 00:18:16,202
Well, we are almost done. Let's finish it up

282
00:18:16,256 --> 00:18:20,262
with a couple of quite important notices. Let's talk about

283
00:18:20,336 --> 00:18:24,366
some security considerations. The first thing

284
00:18:24,468 --> 00:18:27,742
I would like to draw your attention to

285
00:18:27,796 --> 00:18:31,818
is randomness. This may be surprising,

286
00:18:31,994 --> 00:18:35,220
but it isn't easy at all.

287
00:18:36,710 --> 00:18:40,430
In cryptography, we use special random number generators

288
00:18:40,510 --> 00:18:43,490
based on some physical source of randomness.

289
00:18:44,310 --> 00:18:48,102
And remember, using simple generators like

290
00:18:48,156 --> 00:18:51,958
one from the Python standard library can be completely

291
00:18:52,044 --> 00:18:55,730
insecure. The second is modular

292
00:18:55,810 --> 00:18:59,546
arithmetic. In our simple examples, we use

293
00:18:59,648 --> 00:19:03,290
ordinal numbers, assuming that they

294
00:19:03,360 --> 00:19:06,742
are infinite in some way. In reality,

295
00:19:06,886 --> 00:19:10,698
this is not the case, and we are forced to use

296
00:19:10,784 --> 00:19:14,830
more complex algebraic structures like psychic groups.

297
00:19:15,170 --> 00:19:18,110
The third is maliciousness.

298
00:19:18,450 --> 00:19:22,270
Any protocol is a strict sequence of actions that

299
00:19:22,340 --> 00:19:25,074
anyone who gets involved has to follow.

300
00:19:25,272 --> 00:19:29,042
If someone intentionally deviates, it can lead

301
00:19:29,096 --> 00:19:32,994
to negative effects. We can't let it happen, so we

302
00:19:33,032 --> 00:19:36,790
have to build our protocols to be maliciously secure.

303
00:19:39,450 --> 00:19:43,222
And finally, there is always a risk that

304
00:19:43,276 --> 00:19:46,600
some participants can collude to cheat hours.

305
00:19:46,970 --> 00:19:50,694
For example, if two servers in our multiplication

306
00:19:50,742 --> 00:19:55,030
protocol can loot, they can restore all secrets.

307
00:19:55,190 --> 00:19:59,194
If a trisk is unacceptable for your case, there are

308
00:19:59,232 --> 00:20:02,860
other small, complex protocols that aim to mitigate it.

309
00:20:03,390 --> 00:20:06,990
Anyway, all this is quite an advanced topic

310
00:20:07,890 --> 00:20:11,054
worthy of its own talk, and maybe

311
00:20:11,252 --> 00:20:13,860
someday we will discuss it in detail.

312
00:20:14,230 --> 00:20:17,634
Or feel free to reach out to me anytime and ask

313
00:20:17,672 --> 00:20:20,740
your questions. I will be happy to answer.

314
00:20:21,510 --> 00:20:24,786
And if you would like to play around

315
00:20:24,888 --> 00:20:28,660
with MPC and probably get some

316
00:20:29,910 --> 00:20:32,578
hands on experience on the topic,

317
00:20:32,754 --> 00:20:36,290
I can recommend a brilliant library by meta

318
00:20:36,370 --> 00:20:40,102
called Krypton. Again, you absolutely shouldn't

319
00:20:40,166 --> 00:20:44,438
use it in production due to the security considerations

320
00:20:44,614 --> 00:20:48,314
we have covered above, but it's a good start to get

321
00:20:48,352 --> 00:20:51,310
the right intuition on the MPC protocols.

322
00:20:52,050 --> 00:20:55,550
Well, there are some conclusions

323
00:20:55,970 --> 00:20:59,200
they are in the slide. In short,

324
00:20:59,730 --> 00:21:03,822
modern MPC protocols are more practical and

325
00:21:03,876 --> 00:21:07,918
efficient than other previously preserving methods.

326
00:21:08,094 --> 00:21:11,506
They can be implemented completely in software to

327
00:21:11,528 --> 00:21:16,018
execute on commodity hardware, which makes them vendor

328
00:21:16,114 --> 00:21:19,570
independent, and they promote

329
00:21:19,730 --> 00:21:23,350
privacy guarantees while keeping data useful.

330
00:21:23,930 --> 00:21:27,110
So that's basically it. And I hope

331
00:21:27,180 --> 00:21:31,094
my talk encourage you to investigate with topic on your

332
00:21:31,132 --> 00:21:35,160
own contributing to a more secure digital world.

333
00:21:35,770 --> 00:21:38,946
And thank you. Thank you very much for joining

334
00:21:38,978 --> 00:21:42,430
me today. As I said, you can reach out

335
00:21:42,500 --> 00:21:46,666
to me anytime. I will be happy to chat. And bye

336
00:21:46,698 --> 00:21:50,414
for now. Live long and prosper and keep

337
00:21:50,452 --> 00:21:51,660
an eye on your data.

