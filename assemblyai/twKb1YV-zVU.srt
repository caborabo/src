1
00:00:20,650 --> 00:00:24,014
Welcome everybody. Thanks for being here. I'm so happy you all

2
00:00:24,052 --> 00:00:25,990
come able to join.

3
00:00:27,290 --> 00:00:31,074
Today we're going to discuss a little bit building resilient

4
00:00:31,122 --> 00:00:35,154
application. How you can implementing an exaggerated architecture in serverless

5
00:00:35,202 --> 00:00:38,982
application with Python. My name is Hazel Sainz. I'm a solution

6
00:00:39,046 --> 00:00:43,046
architect and I am an AWS community builder in the serverless

7
00:00:43,158 --> 00:00:46,746
category. Okay, today I

8
00:00:46,768 --> 00:00:48,220
want to share a little bit.

9
00:00:49,470 --> 00:00:53,274
In this session we're going to go deep a little bit about

10
00:00:53,472 --> 00:00:57,374
what is an exagonal architecture, where are the

11
00:00:57,412 --> 00:00:59,966
use case that you can apply to them?

12
00:01:00,148 --> 00:01:04,382
And most of all, what is the story behind how

13
00:01:04,436 --> 00:01:07,838
I learned to design this application

14
00:01:08,004 --> 00:01:12,258
implementing it. This is a story about

15
00:01:12,424 --> 00:01:15,686
how I learned to design resilience application as a rock star.

16
00:01:15,788 --> 00:01:19,080
Yeah, it sounds awesome, but it's actually a fact.

17
00:01:20,570 --> 00:01:24,774
I start developing software for some years now and

18
00:01:24,892 --> 00:01:28,694
in the beginning all that I do was designing

19
00:01:28,742 --> 00:01:32,598
applications, thinking always as a monolith

20
00:01:32,774 --> 00:01:35,770
because that was the technology back then.

21
00:01:35,840 --> 00:01:39,482
So the main focus when I have a problem,

22
00:01:39,616 --> 00:01:43,118
I try to design everything in a specific

23
00:01:43,204 --> 00:01:47,086
server. With the times go by, I changed that and

24
00:01:47,108 --> 00:01:49,962
I started to implement it by using layers.

25
00:01:50,026 --> 00:01:53,374
So I started creating my web server,

26
00:01:53,422 --> 00:01:56,740
my application server, my database server and so on.

27
00:01:57,190 --> 00:02:01,074
And that was a good architecture about

28
00:02:01,112 --> 00:02:05,006
that time. But everything is progressing and

29
00:02:05,048 --> 00:02:08,870
everything. We're moving forward and new technologies all days

30
00:02:08,940 --> 00:02:12,402
come along. So I learned

31
00:02:12,466 --> 00:02:15,346
how to design in a different approach.

32
00:02:15,458 --> 00:02:18,714
Most of all because when I started to building in

33
00:02:18,752 --> 00:02:22,634
cloud, I realized that that approach in

34
00:02:22,672 --> 00:02:26,266
some cases we can still using it, but it's not the

35
00:02:26,288 --> 00:02:30,262
same effective that had before because now

36
00:02:30,416 --> 00:02:33,678
it is a little bit expensive if we do

37
00:02:33,684 --> 00:02:37,246
it that way. So with that said,

38
00:02:37,428 --> 00:02:40,686
I changed my mind and I started to think

39
00:02:40,788 --> 00:02:45,710
differently. And this is what all this session

40
00:02:45,790 --> 00:02:49,700
and this architecture is about. We need to start

41
00:02:50,310 --> 00:02:54,974
things differently. We need to start think not

42
00:02:55,032 --> 00:02:59,000
only at the server level, we need to go deep and

43
00:03:00,570 --> 00:03:03,960
change the way that we design our code.

44
00:03:05,130 --> 00:03:08,854
Through the time we used to have

45
00:03:08,972 --> 00:03:12,394
different type of how to split the code and

46
00:03:12,432 --> 00:03:16,220
we have a lot of patterns out there that we can use.

47
00:03:17,870 --> 00:03:22,414
We have something like MBC and

48
00:03:22,532 --> 00:03:25,102
I already did that too.

49
00:03:25,236 --> 00:03:28,602
And when we have like a microservice,

50
00:03:28,666 --> 00:03:31,934
that is a good approach. But when you come

51
00:03:32,052 --> 00:03:35,762
a little bit more into the serverless world,

52
00:03:35,896 --> 00:03:39,634
you will see that sometimes it's been

53
00:03:39,672 --> 00:03:42,382
a little hard to maintain.

54
00:03:42,526 --> 00:03:45,220
So let's go move forward.

55
00:03:46,010 --> 00:03:49,110
Let's talk about hexagonal architecture.

56
00:03:49,770 --> 00:03:53,990
Okay, let's go move forward. For start,

57
00:03:54,060 --> 00:03:57,350
let's talk about what is an hexagonal architecture.

58
00:03:58,910 --> 00:04:02,646
The concept says that hexagonal architecture

59
00:04:02,678 --> 00:04:06,490
is a pattern that promotes the separation of code logic of an application

60
00:04:06,640 --> 00:04:10,042
from its external interactions. Think about

61
00:04:10,096 --> 00:04:12,890
your application as a signal.

62
00:04:13,550 --> 00:04:17,386
Each side of the hexagon represents a port that interacts

63
00:04:17,418 --> 00:04:20,586
with the outside world to the an adapter.

64
00:04:20,698 --> 00:04:23,230
But let's take a passenger.

65
00:04:23,970 --> 00:04:27,530
The first ectagonal that this architecture represents

66
00:04:27,610 --> 00:04:30,898
is the domain in here.

67
00:04:31,064 --> 00:04:34,082
The main target of this section is

68
00:04:34,136 --> 00:04:37,494
that all the domain logic, that means all the

69
00:04:37,532 --> 00:04:40,600
business logic involved in your application goes.

70
00:04:41,290 --> 00:04:44,738
But we're going to have a new approach.

71
00:04:44,834 --> 00:04:49,958
So after that we're going to have an outside exagonal

72
00:04:50,054 --> 00:04:53,686
that's called ports. And this port we're

73
00:04:53,718 --> 00:04:57,654
going to use it AWS like a communication

74
00:04:57,782 --> 00:05:00,570
between our domain logic,

75
00:05:01,330 --> 00:05:05,006
the adapters and what is the adapters about.

76
00:05:05,108 --> 00:05:08,942
The adapters is all the

77
00:05:08,996 --> 00:05:12,798
different components that application

78
00:05:12,964 --> 00:05:17,220
needs and why this is a good approach and why

79
00:05:17,670 --> 00:05:20,914
we should even consider it when

80
00:05:20,952 --> 00:05:24,754
we have the domain part in this middle and in the center. That means

81
00:05:24,792 --> 00:05:28,866
that you can adapt that device. We call these adapters,

82
00:05:28,978 --> 00:05:32,310
you can adapt different inputs,

83
00:05:32,890 --> 00:05:36,694
you can adapt different inputs and use the

84
00:05:36,732 --> 00:05:39,954
same domain logic. So what

85
00:05:40,012 --> 00:05:43,226
happened? If I need to change one of these inputs, I need

86
00:05:43,248 --> 00:05:46,874
to change this one for example. I just can

87
00:05:46,992 --> 00:05:50,206
add a new one and remove this. But all

88
00:05:50,228 --> 00:05:53,294
the main logic, all the business logic will

89
00:05:53,332 --> 00:05:56,846
be remain stacked. So that's why

90
00:05:57,028 --> 00:06:00,926
Excel and architecture is a good idea. But we have

91
00:06:01,108 --> 00:06:04,914
another concept in here. In the beginning I just

92
00:06:04,952 --> 00:06:08,274
mentioned that in my journey I started with

93
00:06:08,312 --> 00:06:12,446
monolith application, then with a resilient applications, and now we're

94
00:06:12,478 --> 00:06:15,522
moving forward to serverless architecture.

95
00:06:15,586 --> 00:06:19,654
And in serverless architecture we all know about what is the

96
00:06:19,692 --> 00:06:23,858
good to develop in this kind of architecture,

97
00:06:24,034 --> 00:06:27,202
what is that? So we'll forget

98
00:06:27,266 --> 00:06:30,534
about handling the servers because in the past,

99
00:06:30,732 --> 00:06:33,882
every time we develop someone we need to

100
00:06:33,936 --> 00:06:37,846
know that disabled was ready, then every disabled

101
00:06:37,878 --> 00:06:41,782
was patched and everything. So in this scenario, in this architecture,

102
00:06:41,846 --> 00:06:45,840
we forget about that and that's, that's something important.

103
00:06:46,770 --> 00:06:50,560
The other thing that we forget about it is that

104
00:06:51,090 --> 00:06:54,862
we don't have to worry about if our architecture,

105
00:06:54,926 --> 00:06:58,578
we're going to grow as we need it.

106
00:06:58,744 --> 00:07:01,854
We forget about that. Why? Because fabulous architecture

107
00:07:01,902 --> 00:07:05,246
offers that. So that's why

108
00:07:05,368 --> 00:07:09,126
we want to go there. And one use case that

109
00:07:09,148 --> 00:07:12,486
is really common is that I

110
00:07:12,508 --> 00:07:16,854
can have a combination of

111
00:07:16,972 --> 00:07:20,666
a full application in serverless architecture itself.

112
00:07:20,768 --> 00:07:24,954
I can have a front end and I can design all

113
00:07:24,992 --> 00:07:29,162
my back end using a serverless architecture using different

114
00:07:29,216 --> 00:07:33,102
servers and so on. Today we're going to see like

115
00:07:33,236 --> 00:07:37,498
a basic application with serverless.

116
00:07:37,594 --> 00:07:41,310
What is that? I have an API gateway.

117
00:07:45,330 --> 00:07:48,914
I have an API gateway with an

118
00:07:48,952 --> 00:07:52,866
interface. So what are the benefits of

119
00:07:52,888 --> 00:07:56,930
using an external architecture? If you tried this approach,

120
00:07:57,010 --> 00:08:00,546
one of them will be then we enhance the testability.

121
00:08:00,738 --> 00:08:04,006
Why? Because the business logic is the

122
00:08:04,028 --> 00:08:07,826
couple from the external component. So that make

123
00:08:07,868 --> 00:08:11,466
it easy to make your test cases to use only the

124
00:08:11,488 --> 00:08:14,662
business logic. You can use mock adapters

125
00:08:14,726 --> 00:08:17,914
to your port directly from here and

126
00:08:17,952 --> 00:08:21,790
just test specifically that functionality

127
00:08:22,450 --> 00:08:25,530
and you isolate your unit testing.

128
00:08:25,690 --> 00:08:28,718
That's pretty awesome. What else?

129
00:08:28,804 --> 00:08:32,742
Well, you add flexibility into the development

130
00:08:32,826 --> 00:08:36,814
and deployment. What happened if you want to shift

131
00:08:36,942 --> 00:08:41,394
a monolith database to a microservice? Or perhaps you

132
00:08:41,592 --> 00:08:45,006
use user interface change like the

133
00:08:45,048 --> 00:08:48,822
mobile for web, or you

134
00:08:48,876 --> 00:08:52,514
change the way you connect. That can be easily

135
00:08:52,562 --> 00:08:55,320
done by using the adapter. Like I mentioned before,

136
00:08:56,250 --> 00:09:00,054
what is the last benefit of using a stagnant architecture

137
00:09:00,102 --> 00:09:04,090
that is so important? The maintenance and the scalability

138
00:09:04,750 --> 00:09:08,554
as your application grow. Because let's face it, when we start an

139
00:09:08,592 --> 00:09:11,726
application, we think we're going to use it right now. But you

140
00:09:11,748 --> 00:09:15,822
don't think a lot about what's going to happen in the future. But with this

141
00:09:15,876 --> 00:09:19,134
architecture, your code is ready to grow.

142
00:09:19,252 --> 00:09:22,190
So aws your application grow,

143
00:09:22,260 --> 00:09:25,970
maintain and clean. The separation between the color logic,

144
00:09:26,470 --> 00:09:30,354
the external interfaces, easy that

145
00:09:30,392 --> 00:09:34,194
you can scale or you can update the parts of the system. Like I

146
00:09:34,232 --> 00:09:38,534
mentioned before, you can change what is the

147
00:09:38,572 --> 00:09:42,454
adapter that you're going to use. You need to

148
00:09:42,492 --> 00:09:45,846
make a change specifically to the business logic. You know exactly

149
00:09:45,948 --> 00:09:50,234
where you have to head up. So that's why it's so important and

150
00:09:50,272 --> 00:09:52,860
that's one of the benefits that you can have.

151
00:09:53,390 --> 00:09:58,586
But just let's go a little bit more deep into the

152
00:09:58,608 --> 00:10:02,118
future of the application. So let's talk about serverless architecture.

153
00:10:02,214 --> 00:10:06,286
And serverless architecture promotes the idea of building application

154
00:10:06,388 --> 00:10:09,978
as a collection of functions that responds to events.

155
00:10:10,074 --> 00:10:14,180
That is the concept, right? So this model

156
00:10:14,950 --> 00:10:18,158
complements the hexagonal architecture.

157
00:10:18,334 --> 00:10:21,918
Why? Because if you remember the hexagonal architecture,

158
00:10:22,014 --> 00:10:25,718
its main complaint, the main target is to

159
00:10:25,884 --> 00:10:30,040
the separation of concerned. And using

160
00:10:30,410 --> 00:10:33,478
functions like lambda function,

161
00:10:33,644 --> 00:10:36,562
you go in the same direction,

162
00:10:36,626 --> 00:10:40,330
right? So let's talk about a basic

163
00:10:41,230 --> 00:10:44,380
API. In here

164
00:10:44,750 --> 00:10:48,074
I get the diagram of an

165
00:10:48,112 --> 00:10:52,266
API that is connected with a lambda function and this lambda

166
00:10:52,298 --> 00:10:56,798
function. Use dynamodb to storage and

167
00:10:56,964 --> 00:11:00,766
use simple email notification to

168
00:11:00,788 --> 00:11:04,146
send emails to the customer. And in this

169
00:11:04,168 --> 00:11:07,682
session we're going to discuss an example that is

170
00:11:07,736 --> 00:11:11,374
really simple. It's like create a new user.

171
00:11:11,502 --> 00:11:15,146
And when you create that new user sends an email automatically

172
00:11:15,198 --> 00:11:17,400
say, okay, welcome, I'm here.

173
00:11:18,650 --> 00:11:22,054
That's why I print this diagram in this point

174
00:11:22,092 --> 00:11:25,862
of view of this session. But something

175
00:11:25,916 --> 00:11:30,262
that is important, like I said, is that the serverless architecture

176
00:11:30,406 --> 00:11:34,198
is promote the same idea. This completely separate

177
00:11:34,294 --> 00:11:38,790
the functionalities. So that's why hexagonal

178
00:11:38,870 --> 00:11:42,826
architecture with serverless it's a good idea. But let's

179
00:11:42,858 --> 00:11:45,802
talk about why. Why is the perfect mix?

180
00:11:45,866 --> 00:11:49,838
What is that such good idea? So if we

181
00:11:49,924 --> 00:11:54,094
remind the concept an

182
00:11:54,132 --> 00:11:57,090
exciting architecture offers interchangeability,

183
00:11:57,830 --> 00:12:01,794
it help us to separate. Let's talk

184
00:12:01,832 --> 00:12:04,900
about a little bit more about that. Why is a perfect.

185
00:12:05,850 --> 00:12:10,630
The excel in architectures offer us that is denturchability.

186
00:12:11,370 --> 00:12:15,094
That means we have adapters that make easy to change our application

187
00:12:15,212 --> 00:12:19,242
interact with the outside world that

188
00:12:19,296 --> 00:12:23,094
help us to facilitating testing and the evolution

189
00:12:23,142 --> 00:12:26,774
of the support, right? What else? We have simplicity

190
00:12:26,902 --> 00:12:30,346
despite of the complex name around it.

191
00:12:30,448 --> 00:12:34,174
The exam architecture simplified the application development and

192
00:12:34,212 --> 00:12:38,442
maintenance because clearly separate

193
00:12:38,506 --> 00:12:42,270
the responsibilities of each functionality

194
00:12:44,230 --> 00:12:47,774
and we have the separation of concerns.

195
00:12:47,902 --> 00:12:50,638
By keeping the application core logic isolated,

196
00:12:50,734 --> 00:12:55,380
developers can focus on the business rules without getting

197
00:12:56,410 --> 00:13:00,374
struggle with the external dependencies. It's more easy to

198
00:13:00,412 --> 00:13:04,374
think about my business logic without exactly

199
00:13:04,492 --> 00:13:08,230
know what adapters we're going to use.

200
00:13:08,380 --> 00:13:12,042
I can use the adapter, but I actually don't know what is beneath that.

201
00:13:12,096 --> 00:13:15,514
So I can say I'm going to save it in the database, but I don't

202
00:13:15,552 --> 00:13:18,714
care what database is because me as the

203
00:13:18,752 --> 00:13:22,430
business logic responsible, I only say,

204
00:13:22,500 --> 00:13:25,230
okay, this is the record, send it to the database.

205
00:13:25,890 --> 00:13:29,802
About serverless. Serverless is an even driving architecture.

206
00:13:29,866 --> 00:13:33,460
And what is that

207
00:13:34,390 --> 00:13:37,550
is run by Evans.

208
00:13:37,630 --> 00:13:41,550
That means everything's come up with an event. If an event occurs,

209
00:13:41,630 --> 00:13:45,542
something's going to happen. So this

210
00:13:45,676 --> 00:13:49,638
is important because it's treating every interaction with the outside

211
00:13:49,724 --> 00:13:53,986
world through events. And remember that in our exaggerate

212
00:13:54,018 --> 00:13:57,946
architecture we have this adapter. So what

213
00:13:57,968 --> 00:14:01,254
is the main merging

214
00:14:01,302 --> 00:14:04,380
here is that every time you have an event,

215
00:14:05,070 --> 00:14:09,322
you will use an adapter to actually go

216
00:14:09,376 --> 00:14:12,686
and play with your business logic. So that's why

217
00:14:12,708 --> 00:14:16,286
it's important. And we have something else. We have

218
00:14:16,308 --> 00:14:20,254
something that is called decoupling. Just as a serverless function did

219
00:14:20,292 --> 00:14:24,630
decouple from the underlying infrastructure, hexagonal architecture decoupled

220
00:14:24,650 --> 00:14:28,114
the application logic. So serverless we

221
00:14:28,152 --> 00:14:32,418
have the separation and the decoupling between different

222
00:14:32,504 --> 00:14:37,118
functions exaggerate architecture separate

223
00:14:37,214 --> 00:14:41,046
even more inside our function. And what

224
00:14:41,148 --> 00:14:45,640
happened when we have all these benefits

225
00:14:46,730 --> 00:14:50,582
together? Well, we create a resilient and

226
00:14:50,636 --> 00:14:54,940
easy maintained application. I know that sounds awesome,

227
00:14:55,630 --> 00:15:00,034
right? It sounds like magic. Okay, we're going to have everything separate,

228
00:15:00,102 --> 00:15:03,486
all the code is working and do it exactly what we need

229
00:15:03,508 --> 00:15:07,630
to do and everything sounds good. So why

230
00:15:07,780 --> 00:15:11,280
that's that image. So we have to remember something.

231
00:15:11,970 --> 00:15:15,806
With a great power comes a greater responsibility. And that's

232
00:15:15,838 --> 00:15:20,014
why I use Spiderman. When you use an exaggerated architecture

233
00:15:20,062 --> 00:15:23,646
and you use serverless application, the main responsibility

234
00:15:23,758 --> 00:15:27,222
is how you design resilient applications. It is

235
00:15:27,276 --> 00:15:31,414
your responsibility to actually split and

236
00:15:31,532 --> 00:15:34,646
separate the concern in a proper way.

237
00:15:34,828 --> 00:15:38,060
You need to separate in function

238
00:15:38,670 --> 00:15:42,186
in the most effective way and inside the function you

239
00:15:42,208 --> 00:15:46,026
have to think about the defined. So in

240
00:15:46,048 --> 00:15:49,434
the developer world, I saw

241
00:15:49,472 --> 00:15:53,242
some cases in the past that when they

242
00:15:53,296 --> 00:15:56,446
ask you to do some change, you just go directly to the code and

243
00:15:56,468 --> 00:15:59,966
start writing about all what do you need to be done in there?

244
00:16:00,148 --> 00:16:03,870
When you use an exaggerated architecture and you use serverless,

245
00:16:04,770 --> 00:16:07,954
you have the same requirement, but you need to step down

246
00:16:07,992 --> 00:16:11,634
and say, okay, let's design, let's think about

247
00:16:11,752 --> 00:16:14,890
how we're going to split the code, how we're going to split

248
00:16:15,070 --> 00:16:18,550
in each different function and how it's going to

249
00:16:18,620 --> 00:16:22,194
be split it inside the function. So that's

250
00:16:22,242 --> 00:16:25,398
why you have a big responsibility as a

251
00:16:25,404 --> 00:16:28,790
developer. Implementing an external architecture

252
00:16:28,870 --> 00:16:32,026
is not always easy because we have a lot

253
00:16:32,048 --> 00:16:35,962
of developers in our team sometimes and it's hard,

254
00:16:36,016 --> 00:16:40,034
the process to try to maintain that separation

255
00:16:40,182 --> 00:16:43,994
between the requirements

256
00:16:44,122 --> 00:16:48,186
is done and then all that transformed

257
00:16:48,218 --> 00:16:51,774
to the code. So it is difficult,

258
00:16:51,892 --> 00:16:55,758
it's not impossible. You can do it. There are many techniques

259
00:16:55,774 --> 00:16:59,278
that you can use, but as a developer you need to be aware

260
00:16:59,374 --> 00:17:03,602
that the responsibility when you have this kind of design of

261
00:17:03,736 --> 00:17:07,240
these patterns and these architectures is

262
00:17:07,850 --> 00:17:10,790
important that you to follow because if you don't,

263
00:17:13,610 --> 00:17:17,430
you're going to have mass in there. That's why

264
00:17:17,580 --> 00:17:21,514
it's great responsibility. Okay? So after we know

265
00:17:21,552 --> 00:17:25,274
all the benefits, all the things that we need to keep in mind and

266
00:17:25,312 --> 00:17:28,762
the awareness about when we should use

267
00:17:28,816 --> 00:17:32,154
it and when not to use it, let's talk

268
00:17:32,192 --> 00:17:35,150
about how we implementing a machine learning architecture,

269
00:17:35,650 --> 00:17:39,086
let's put it together to start it. We have a

270
00:17:39,108 --> 00:17:43,102
lambda function. Inside the lambda function, we're going to have our

271
00:17:43,156 --> 00:17:47,570
exaggerate architecture, okay, that means only the

272
00:17:47,720 --> 00:17:51,166
first diagram we put inside the lambda

273
00:17:51,198 --> 00:17:55,326
function. But what actually we're going to do. So we're

274
00:17:55,358 --> 00:17:59,030
going to have a new adapter, we're going to have a port and that port

275
00:17:59,100 --> 00:18:02,534
is going to communicate with the adapter and the adapter, we're going

276
00:18:02,572 --> 00:18:05,862
to be in charge of saving the record that

277
00:18:05,916 --> 00:18:09,890
being that inside our lambda function, we're going to have the domain

278
00:18:10,050 --> 00:18:13,078
part separate from the ports in the adapters,

279
00:18:13,174 --> 00:18:16,810
right? We're going to use another adapter

280
00:18:17,150 --> 00:18:20,926
and that is to notified and send an email about okay, welcome to

281
00:18:20,948 --> 00:18:24,526
the system, remember, so that's why we're going to

282
00:18:24,548 --> 00:18:28,094
have a second adapter and

283
00:18:28,212 --> 00:18:31,694
we're going to use another one to just connect

284
00:18:31,892 --> 00:18:35,554
the app gateway through our application.

285
00:18:35,752 --> 00:18:39,806
In some cases in the serverless architecture we're going to have directly

286
00:18:39,838 --> 00:18:43,550
the code access adapter and in other ones like it's serverless,

287
00:18:43,630 --> 00:18:47,442
we're going to have Evans. That is going to be the trigger

288
00:18:47,586 --> 00:18:51,286
for our solution. This is the case for the integration with

289
00:18:51,308 --> 00:18:55,160
Apikate win and lambda. Right. And what else

290
00:18:55,530 --> 00:18:59,118
we mentioned about the benefits they're going to have to using this architecture,

291
00:18:59,234 --> 00:19:03,494
we're going to have the unit testing that the unit testing can be focused

292
00:19:03,542 --> 00:19:06,778
into the domain and we're going to

293
00:19:06,784 --> 00:19:10,750
have the integration testing. So if you see this diagram,

294
00:19:13,090 --> 00:19:17,502
it's really clear what is the separation is happening and why

295
00:19:17,636 --> 00:19:21,280
it's important to keep absolutely everything.

296
00:19:22,130 --> 00:19:25,934
So we have the domain, all the business logic

297
00:19:25,982 --> 00:19:30,206
inside domains part in the first executive

298
00:19:30,318 --> 00:19:33,842
we're going to have the port and we're going to have the adapters. Then here

299
00:19:33,896 --> 00:19:37,890
we're going to have the communication with the other services, in this case

300
00:19:37,960 --> 00:19:42,146
dynamodb and San let's

301
00:19:42,178 --> 00:19:45,960
dive in into code. Let's dive into the code.

302
00:19:46,570 --> 00:19:50,570
So I have lambda function here

303
00:19:50,720 --> 00:19:54,954
and the main difference is that this

304
00:19:54,992 --> 00:19:58,540
is my domain of the core of the

305
00:19:59,070 --> 00:20:02,334
lambda. This is my handler. And in here the only thing

306
00:20:02,372 --> 00:20:06,078
that I have is the business logic. If you see in here,

307
00:20:06,164 --> 00:20:10,094
I don't have any logic specifically that use

308
00:20:10,132 --> 00:20:14,150
the database or anything else. Only I received

309
00:20:14,170 --> 00:20:17,902
the information and then I use this, I implement

310
00:20:17,966 --> 00:20:21,822
the adapter for save a user. This is the adapter

311
00:20:21,886 --> 00:20:24,900
that manage all the data information.

312
00:20:25,370 --> 00:20:29,320
And I have another function here that

313
00:20:29,770 --> 00:20:33,666
is in charge to send the email. So this is implemented

314
00:20:33,698 --> 00:20:37,634
in another adapter. So the code for each

315
00:20:37,692 --> 00:20:40,938
adapter is separate. So I have this one, this is

316
00:20:40,944 --> 00:20:44,874
the first one. And in here it contains all the

317
00:20:44,912 --> 00:20:48,650
logic related the database.

318
00:20:48,990 --> 00:20:54,174
In this case I'm using dynamodb. So I

319
00:20:54,212 --> 00:20:58,240
have the definition, the table name,

320
00:20:58,690 --> 00:21:03,140
the data that I need to insert into the

321
00:21:03,830 --> 00:21:06,994
and I have the return that is returning the

322
00:21:07,032 --> 00:21:10,290
user id. Okay, and this is my adapter.

323
00:21:10,790 --> 00:21:14,034
I have another adapter that is in charge to send

324
00:21:14,072 --> 00:21:18,850
the email and this contains the logic specifically

325
00:21:19,010 --> 00:21:22,486
for the implementation of SES. So I

326
00:21:22,508 --> 00:21:26,306
have the email sent in here, I have the source,

327
00:21:26,498 --> 00:21:30,074
this is an email account that I create just for

328
00:21:30,112 --> 00:21:33,878
this session, the address that I'm

329
00:21:33,894 --> 00:21:38,380
going to send the email and I have the

330
00:21:38,830 --> 00:21:42,058
body message that is going to put in the email to stuff.

331
00:21:42,144 --> 00:21:45,886
So how can I trust it? What is the beauty of this is

332
00:21:45,908 --> 00:21:50,014
that let's say for example in the future I need to change the

333
00:21:50,052 --> 00:21:53,214
database and not use dynamodb and

334
00:21:53,252 --> 00:21:57,038
change it for let's say Aurora. Okay. If I'm

335
00:21:57,054 --> 00:22:01,122
going to change that, the only thing that I need to change is the

336
00:22:01,176 --> 00:22:04,514
adapter and I don't have to change any logic into

337
00:22:04,552 --> 00:22:08,360
the business side. The core logic remain the same.

338
00:22:09,210 --> 00:22:12,662
If I need to add a new logic related to the business,

339
00:22:12,796 --> 00:22:16,070
the only thing that I need to change is the core

340
00:22:16,570 --> 00:22:20,122
of this function. So the

341
00:22:20,176 --> 00:22:23,994
separation of the concerns is

342
00:22:24,032 --> 00:22:27,354
really important because allowed me to grow

343
00:22:27,392 --> 00:22:30,926
in the future without impact each other. And I

344
00:22:30,948 --> 00:22:34,382
don't have this spaghetti code and I used to have

345
00:22:34,436 --> 00:22:38,122
in the other architectures

346
00:22:38,186 --> 00:22:41,838
or patterns that I use them before. So let's test this.

347
00:22:41,924 --> 00:22:45,090
So if you see here, I create a test

348
00:22:45,160 --> 00:22:48,626
case. This is really simple that I have

349
00:22:48,728 --> 00:22:52,146
the name, this is my payload, the email that

350
00:22:52,168 --> 00:22:56,600
I'm going to send it. I'm going to say hi,

351
00:22:57,690 --> 00:23:01,446
I just say Monday night. Okay, I have

352
00:23:01,468 --> 00:23:04,694
the email and I just click send with

353
00:23:04,732 --> 00:23:08,620
this change. I'm going to check Edith is really

354
00:23:09,070 --> 00:23:12,714
receiving it. So give me a minute, I will try

355
00:23:12,752 --> 00:23:16,426
to show you that. Okay. So if

356
00:23:16,448 --> 00:23:20,066
I go my email here, I did receive

357
00:23:20,118 --> 00:23:23,358
the email and I have this thing,

358
00:23:23,444 --> 00:23:27,054
the message. So I say thank you for signing up,

359
00:23:27,092 --> 00:23:30,894
we're excited to have you on board. So this

360
00:23:30,932 --> 00:23:34,430
is great because it is working

361
00:23:34,580 --> 00:23:37,858
and if I need to change in the future then I

362
00:23:37,864 --> 00:23:41,026
don't need an email, I need an sms. I can do

363
00:23:41,048 --> 00:23:45,486
it just to adding a new adapter in here or redefine

364
00:23:45,518 --> 00:23:49,266
my adapter. I can remove this and add a new one that only contains

365
00:23:49,298 --> 00:23:53,142
the main logic of the new step that I'm going to implementing. So it's really

366
00:23:53,196 --> 00:23:57,478
easy and it's not something that is going

367
00:23:57,484 --> 00:24:01,098
to take you a lot of time, but it is important to take the

368
00:24:01,104 --> 00:24:05,450
time to analyze design this

369
00:24:05,520 --> 00:24:09,050
structure in the beginning when you're creating your

370
00:24:09,120 --> 00:24:12,426
functions. Why? Because you're

371
00:24:12,458 --> 00:24:15,614
going to save it to yourself in the future. When you

372
00:24:15,652 --> 00:24:19,326
try to give maintenance into this code, you will be

373
00:24:19,348 --> 00:24:22,786
able to remove some logic easily, you will be

374
00:24:22,808 --> 00:24:26,130
able to add a new adapters and even

375
00:24:26,280 --> 00:24:29,426
you will have

376
00:24:29,528 --> 00:24:33,842
less trouble to try to make

377
00:24:33,976 --> 00:24:37,654
a knowledge transfer to new developers and so on. So your

378
00:24:37,692 --> 00:24:40,040
team will appreciate us.

379
00:24:41,450 --> 00:24:45,270
Okay. If you see it's really simple,

380
00:24:45,420 --> 00:24:49,418
please make a habit to design your function

381
00:24:49,504 --> 00:24:53,366
before turning decoding and let's

382
00:24:53,398 --> 00:24:57,306
try to create the more resilient application

383
00:24:57,408 --> 00:25:01,142
that we can, and Xavier architecture allow us to

384
00:25:01,296 --> 00:25:05,870
do that. Okay. So if you like that little

385
00:25:05,940 --> 00:25:09,214
demo, you can try to do it yourself and play

386
00:25:09,252 --> 00:25:12,458
around it, change a little bit the logic, change the adapters

387
00:25:12,554 --> 00:25:16,206
and you can play with the code. So how you can

388
00:25:16,228 --> 00:25:19,826
do it, you can scan this code and you can go and

389
00:25:19,848 --> 00:25:23,106
read my article about it. So you're going to have a copy of

390
00:25:23,128 --> 00:25:26,622
the code in there so you can put it directly into your console

391
00:25:26,686 --> 00:25:30,406
and play a little bit with it and have fun. And just to

392
00:25:30,428 --> 00:25:33,954
finish here, I would love to share a phrase

393
00:25:34,002 --> 00:25:38,586
with you. This is from Harry Potter. I am a

394
00:25:38,608 --> 00:25:42,570
huge fan of the saga. So this is the sentence,

395
00:25:42,910 --> 00:25:45,130
it is our choices, Hari,

396
00:25:46,430 --> 00:25:49,754
that shows what we truly are, far more than our

397
00:25:49,792 --> 00:25:54,870
abilities. Because in this architecture

398
00:25:54,950 --> 00:25:58,358
and this design, all is about the

399
00:25:58,384 --> 00:26:01,998
choices, all is about your decision and

400
00:26:02,084 --> 00:26:05,982
building a resilient application. It depends

401
00:26:06,046 --> 00:26:09,422
from you. Thank you for joining me. It was a pleasure

402
00:26:09,486 --> 00:26:12,580
to me to be with all of you today.

403
00:26:13,030 --> 00:26:16,982
I leave you here my social media. Please follow me.

404
00:26:17,036 --> 00:26:20,422
I give all around

405
00:26:20,476 --> 00:26:24,534
the world and also write technical content.

406
00:26:24,652 --> 00:26:27,814
So if you're interested about knowing a little bit more about

407
00:26:27,852 --> 00:26:32,278
serverless, a little bit more about AWS and another

408
00:26:32,364 --> 00:26:35,730
things about programming and development

409
00:26:35,810 --> 00:26:36,870
and deployment.

410
00:26:38,570 --> 00:26:40,846
Nice to see you and thank you for watching.

