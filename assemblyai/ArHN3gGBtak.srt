1
00:00:20,680 --> 00:00:24,366
Hello everyone. In this session we will be talking about Gopher opinionated

2
00:00:24,430 --> 00:00:27,194
Go framework for accelerated microservice development.

3
00:00:27,814 --> 00:00:30,798
Our todays agenda will be to start with an intro to Gopher.

4
00:00:30,886 --> 00:00:34,726
Later we will move forward to its features. After that, I will show you

5
00:00:34,830 --> 00:00:37,934
how you can build a sample API using Gopher with MySQL

6
00:00:37,974 --> 00:00:41,190
as a database. Later we will conclude on what

7
00:00:41,222 --> 00:00:44,574
we have discussed. Gopher is an opinionated web

8
00:00:44,614 --> 00:00:48,006
framework written in Go. It was built with the aim to

9
00:00:48,030 --> 00:00:51,886
extract the process of building robust and scalable applications

10
00:00:52,070 --> 00:00:55,914
and is designed to offer a user friendly experience for all the developers.

11
00:00:56,284 --> 00:00:59,884
It helps in building robust and scalable applications. The framework

12
00:00:59,924 --> 00:01:03,588
is designed such that it powers you to focus

13
00:01:03,676 --> 00:01:06,892
on the main features rather than worrying about a

14
00:01:06,908 --> 00:01:11,876
lot of minor things which we will discuss now with

15
00:01:11,900 --> 00:01:15,428
Google. Developers can bid fable to tedious setup tasks and focus

16
00:01:15,476 --> 00:01:19,596
on what truly matters building exceptional services GoPro streamlines

17
00:01:19,620 --> 00:01:23,348
this journey by offering a feature rich framework that empowers you to exploit

18
00:01:23,396 --> 00:01:26,744
development and build production ready solutions. Here is a brief

19
00:01:26,784 --> 00:01:30,464
list of features Gopher offers to its developers. Out of the box

20
00:01:30,504 --> 00:01:34,016
observability gopher shifts with built in observability as

21
00:01:34,040 --> 00:01:37,784
soon as you build your application. It provides detailed traces and matrices.

22
00:01:37,944 --> 00:01:41,464
Say goodbye to guesswork. Your system is production ready from the get.

23
00:01:41,624 --> 00:01:45,176
It also allows you to create your custom traces and custom

24
00:01:45,240 --> 00:01:49,136
metrics as per your need. Authentication GoPro

25
00:01:49,160 --> 00:01:52,518
has inbuilt support for OAuth, basic auth and API key

26
00:01:52,566 --> 00:01:56,294
based authentication and systems. You need not to worry about

27
00:01:56,334 --> 00:01:59,994
that, you can just use the feature which is already present in proof,

28
00:02:00,454 --> 00:02:03,954
fine tune logging and on the fly. Log level management

29
00:02:04,254 --> 00:02:07,862
our framework offers granular log level at different

30
00:02:07,918 --> 00:02:11,446
levels which are worn in four notice debug pattern.

31
00:02:11,630 --> 00:02:16,006
You can tailor your log to different environments, ensuring clarity and efficiency.

32
00:02:16,190 --> 00:02:19,556
It also provides you to change the log level on

33
00:02:19,580 --> 00:02:23,384
the go without restarting your applications or changing the deployment

34
00:02:23,964 --> 00:02:27,144
support for both rest and GRPC based APIs.

35
00:02:28,084 --> 00:02:31,740
It provides you with inbuilt configuration management where you can

36
00:02:31,772 --> 00:02:35,764
set the configurations and use them in the application. Go for

37
00:02:35,804 --> 00:02:39,356
supports MySQL, redis and popular pubsub systems like Kafka,

38
00:02:39,420 --> 00:02:43,036
Google Cloud and MQtt. And guess what? We are actively adding more

39
00:02:43,060 --> 00:02:46,888
database support. Your data layer your choices when

40
00:02:46,936 --> 00:02:50,792
making an endless service call. Woofer provides you with an option to add a

41
00:02:50,808 --> 00:02:55,048
circuit breaker to your application which makes sure that you don't hit the

42
00:02:55,176 --> 00:02:58,544
same service again and again if it is not responding back.

43
00:02:58,664 --> 00:03:02,488
This is an open source project which is built by developers for developers

44
00:03:02,576 --> 00:03:05,976
making production ready applications. Let's dive

45
00:03:06,000 --> 00:03:08,364
into code to see how you can use code.

46
00:03:08,944 --> 00:03:12,770
Let's start creating our sample project. We are in the new directory

47
00:03:12,802 --> 00:03:16,402
sample API. Let's initialize our project. We have

48
00:03:16,418 --> 00:03:19,698
done our basic setup. Let's get go for using

49
00:03:19,746 --> 00:03:23,546
Go get. This is the basic setup we need to write

50
00:03:23,570 --> 00:03:27,618
a gopher application. These two lines, go for new and

51
00:03:27,666 --> 00:03:31,266
app dot run are the most basic lines which will be

52
00:03:31,290 --> 00:03:34,938
present in every gopher application. Go for new is called.

53
00:03:35,066 --> 00:03:38,736
It initializes the framework and handles various steps including

54
00:03:38,880 --> 00:03:42,124
initial id using logos, metrics, data sources,

55
00:03:42,584 --> 00:03:46,280
etcetera. Based on the context provided when app run

56
00:03:46,312 --> 00:03:49,672
is called, it configures, initializes, and runs the

57
00:03:49,728 --> 00:03:52,352
HTTP server and serves middlewares.

58
00:03:52,488 --> 00:03:55,784
It manages essential features such as routes for health

59
00:03:55,824 --> 00:03:58,696
check, endpoints, metrics, server etcetera.

60
00:03:58,840 --> 00:04:01,752
By default, it starts the server on the port 8000,

61
00:04:01,848 --> 00:04:05,346
which we can override using the configs. Let's try to

62
00:04:05,370 --> 00:04:09,378
register a route for our project. When we register

63
00:04:09,426 --> 00:04:13,178
our route, it takes two things, the route itself and a handler

64
00:04:13,226 --> 00:04:16,474
function. Handler function takes the context and

65
00:04:16,514 --> 00:04:19,754
returns interface and l. Let's return hello

66
00:04:19,794 --> 00:04:23,050
world from here. Let's take the dependencies

67
00:04:23,162 --> 00:04:25,134
and run our project.

68
00:04:25,954 --> 00:04:29,450
Our server runs on port 8000 and we see proper logs

69
00:04:29,482 --> 00:04:33,130
coming in forever stuff which go for let's

70
00:04:33,162 --> 00:04:36,762
hit the green endpoint and we see the well

71
00:04:36,818 --> 00:04:40,194
formatted output of hello world on our screen with a proper status

72
00:04:40,234 --> 00:04:44,634
code 200 which go for is setting it for us based

73
00:04:44,674 --> 00:04:48,314
on the rest API guidelines. Gopher formats every output

74
00:04:48,394 --> 00:04:52,210
in the data struct to keep it consistent among different multiple

75
00:04:52,282 --> 00:04:55,370
microservices. Gopher also formats the

76
00:04:55,402 --> 00:04:59,510
logs for every request. It generates a

77
00:04:59,542 --> 00:05:02,758
new request coordination id and

78
00:05:02,926 --> 00:05:07,758
with a proper status code in the log at the time taken by the let's

79
00:05:07,806 --> 00:05:11,030
connect our application to a database. Gopher supports

80
00:05:11,062 --> 00:05:14,742
connecting to SQL databases as well as redis based

81
00:05:14,838 --> 00:05:18,190
on configuration variables. Let's get the

82
00:05:18,222 --> 00:05:21,834
configuration from over documentation to connect to MySQL,

83
00:05:22,394 --> 00:05:26,494
let's run the MySQL instance in a docker container.

84
00:05:27,354 --> 00:05:31,290
Let's get the configurations to connect to the database.

85
00:05:31,442 --> 00:05:35,014
These configurations are in sync with the docker command if you run it.

86
00:05:37,994 --> 00:05:42,094
Configurations are present in the config directory in env file.

87
00:05:42,754 --> 00:05:44,454
Let's run our application.

88
00:05:46,954 --> 00:05:50,640
Our application is connected to the MySQL database

89
00:05:50,672 --> 00:05:54,416
test DB just a few configs and Google let

90
00:05:54,440 --> 00:05:58,224
us automatically connect to a database and users can conveniently access DB

91
00:05:58,264 --> 00:06:02,600
methods from the context itself. Let's try to run a database

92
00:06:02,632 --> 00:06:07,472
command now read handle club c

93
00:06:07,528 --> 00:06:11,404
dot equal dot value.

94
00:06:11,984 --> 00:06:16,754
Let's run show databases scan.

95
00:06:39,534 --> 00:06:43,190
We can see that the application ran successfully and we were

96
00:06:43,222 --> 00:06:46,704
able to get a response information schema from the database.

97
00:06:47,524 --> 00:06:51,004
Go first. Suppose MySQL postgres was SQL

98
00:06:51,044 --> 00:06:54,356
databases. It also supports Redis and Mongo which can

99
00:06:54,380 --> 00:06:58,020
be used directly without much code. For changing from MySQL to

100
00:06:58,052 --> 00:07:01,900
postgres, user needs to update the configuration and just need

101
00:07:01,932 --> 00:07:06,012
to change the DB data from MySQL to postgres. Gopher also

102
00:07:06,068 --> 00:07:09,772
pushes let's change the log level from configs

103
00:07:09,788 --> 00:07:10,664
to debug.

104
00:07:14,334 --> 00:07:17,590
We see that the debug logs are now coming in. Let's run

105
00:07:17,622 --> 00:07:20,966
the again so we

106
00:07:20,990 --> 00:07:24,726
see that the query row is coming again with the very which we

107
00:07:24,750 --> 00:07:28,078
actually ran. This helps in performance training

108
00:07:28,126 --> 00:07:32,150
the application and we get all the logs by default using

109
00:07:32,222 --> 00:07:35,990
by changing the document exposure to

110
00:07:36,022 --> 00:07:39,450
tracing. Woofer provides this user with this set of features to

111
00:07:39,482 --> 00:07:43,354
track down their applications performance. Monitor any bugs making

112
00:07:43,394 --> 00:07:46,706
it production ready let's start with metrics. When we

113
00:07:46,730 --> 00:07:50,810
run our application, Gopher by default starts the metrics on

114
00:07:50,842 --> 00:07:54,378
port 2121 which is evident from the logs.

115
00:07:54,546 --> 00:07:58,370
Let's see what all metrics are being used. Gopher by default pushes

116
00:07:58,402 --> 00:08:02,042
some metrics related to the application function which are the number of both teams

117
00:08:02,178 --> 00:08:05,254
SQL in use connections, SQL pen connections.

118
00:08:05,794 --> 00:08:08,850
When we send a request, offer by

119
00:08:08,882 --> 00:08:12,754
default adds those metrics like

120
00:08:12,794 --> 00:08:16,754
apps equals bucket like how much time the request to the SB

121
00:08:16,794 --> 00:08:21,130
response bucket, how much time they want. Apart from the path

122
00:08:21,202 --> 00:08:25,154
which was at the status return, users can

123
00:08:25,194 --> 00:08:29,170
also add their custom metrics from the context with

124
00:08:29,202 --> 00:08:32,636
the method metrics. It allows you to

125
00:08:32,700 --> 00:08:36,824
create a new metric as well as increment the older metrics which were already created.

126
00:08:37,324 --> 00:08:40,700
Go for sports four types of metrics counter upgrade,

127
00:08:40,732 --> 00:08:42,944
counter histogram and watch.

128
00:08:43,884 --> 00:08:48,108
Users can also change the default metric port 2121

129
00:08:48,156 --> 00:08:51,344
from the configs by adding the config matrix.

130
00:08:55,124 --> 00:08:58,352
Now the metric server is running on port 1900.

131
00:08:58,548 --> 00:09:02,728
Offer also utilizes the open elementary standard for tracing,

132
00:09:02,896 --> 00:09:06,592
providing detailed information about each user request.

133
00:09:06,728 --> 00:09:10,280
This helps you understand how requests flow through your application and identify

134
00:09:10,352 --> 00:09:14,456
potential issues. Let's set up tracing for our application.

135
00:09:14,600 --> 00:09:17,976
Let's save on our documentation to see the traces

136
00:09:18,040 --> 00:09:21,936
we need to install zipkin in our system. I already have it

137
00:09:21,960 --> 00:09:23,164
running, so it is.

138
00:09:25,004 --> 00:09:26,824
Let's add the context here.

139
00:09:28,084 --> 00:09:31,580
Tracer post which is 2005

140
00:09:31,612 --> 00:09:34,904
in my case and praise exporter

141
00:09:35,884 --> 00:09:37,224
which is zip code.

142
00:09:39,924 --> 00:09:42,464
So now we got the one that sporting precise.

143
00:09:43,324 --> 00:09:46,944
You see the let's get the quotation id of the request.

144
00:09:47,644 --> 00:09:51,528
When we search the request, we got the flow of the request application

145
00:09:51,576 --> 00:09:54,912
we had the green endpoint, it went to the router and later it

146
00:09:54,928 --> 00:09:58,696
came to the handle. Let's see go observability in action I have

147
00:09:58,720 --> 00:10:01,776
known the Gopher repo and using the examples present there.

148
00:10:01,920 --> 00:10:05,816
I've used the public dashboards available for Gopher on grafana.com and set

149
00:10:05,840 --> 00:10:09,752
it up in my local system. Grafana is an open source data visualization and

150
00:10:09,768 --> 00:10:12,448
monitoring solution. With Grafana you can easily correct,

151
00:10:12,496 --> 00:10:15,880
correlate and visualize the data using informative dashboard.

152
00:10:16,032 --> 00:10:20,048
I am running HTTP server from Gopher. Examples have generated

153
00:10:20,096 --> 00:10:23,464
a load to replicate the production load. Here you can see

154
00:10:23,544 --> 00:10:26,824
how our application is performing as well as we can

155
00:10:26,864 --> 00:10:30,304
see the number of requests received, time it took

156
00:10:30,384 --> 00:10:34,284
and the status quo returned, along with the number of outbound

157
00:10:34,944 --> 00:10:39,624
SQL queries which ran and the Redis commands which were executed

158
00:10:39,784 --> 00:10:43,488
in the dashboard. Innovation let's see how distributed tracing

159
00:10:43,536 --> 00:10:47,332
works in Gopher. I have set up two different applications,

160
00:10:47,468 --> 00:10:51,308
one of which is using redis as well, and we can see the places here

161
00:10:51,436 --> 00:10:54,932
where we can see how the request is flowing from our first application

162
00:10:54,988 --> 00:10:58,868
sample API to using HTTP service and

163
00:10:58,996 --> 00:11:02,356
it is coming back to the sample API where it is

164
00:11:02,460 --> 00:11:06,068
being processed further. Gopher allows developers to not

165
00:11:06,116 --> 00:11:09,596
worry about the other has such as managing a database connection or

166
00:11:09,620 --> 00:11:13,260
implementing tracing and allow them to focus more more on what really matters,

167
00:11:13,332 --> 00:11:17,012
the core functionality which leads to less time production,

168
00:11:17,108 --> 00:11:20,824
easy to debug code and it increases the developer productivity.

169
00:11:21,484 --> 00:11:24,404
Thank you everyone. This was it from my side.

170
00:11:24,484 --> 00:11:27,972
Hope it was informative. Do visit our repo on GitHub

171
00:11:28,028 --> 00:11:29,324
and give it a star if you like it.

