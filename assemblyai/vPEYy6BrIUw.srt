1
00:00:20,890 --> 00:00:25,030
And welcome to my talk titled Security best practices with

2
00:00:25,140 --> 00:00:28,834
against common vulnerabilities. My name is Kanadin.

3
00:00:28,882 --> 00:00:32,614
I'm a full stack web developer security researcher connected me

4
00:00:32,652 --> 00:00:36,022
on LinkedIn. I currently work as a backend developer at Star

5
00:00:36,076 --> 00:00:39,930
Technologies and a full stack of developer as a freelancer.

6
00:00:43,150 --> 00:00:46,426
Let's delve into the top, so we'll be covering introduction to

7
00:00:46,448 --> 00:00:50,506
Python security, commerce security threats in Python, secure coding

8
00:00:50,538 --> 00:00:53,710
practices in Python authentication and authorization,

9
00:00:54,210 --> 00:00:58,458
hashing and encryption in Python encryption and hashing,

10
00:00:58,634 --> 00:01:02,030
Python security tools and libraries, emerging threats and future

11
00:01:02,100 --> 00:01:04,958
consideration and finally a conclusion.

12
00:01:05,054 --> 00:01:08,626
So let's get right into it. Section one introduction of

13
00:01:08,648 --> 00:01:12,734
Python Security an overview of Python's popularity and relevance

14
00:01:12,782 --> 00:01:16,646
in software development. Python was officially released on the 20

15
00:01:16,668 --> 00:01:20,242
February 1991 by Python Software foundation

16
00:01:20,386 --> 00:01:24,370
as the direction of video van Rosam. It has grown

17
00:01:24,450 --> 00:01:28,246
considerable heights over the years up to now. In our current time in

18
00:01:28,268 --> 00:01:31,546
our current time, Python ranks at number one in

19
00:01:31,568 --> 00:01:35,206
the PYPL index, that is the popularity of programming

20
00:01:35,238 --> 00:01:39,094
languages index. So we can see in the charts how Python

21
00:01:39,142 --> 00:01:43,118
was from 2005 up to number one

22
00:01:43,284 --> 00:01:46,862
in 2024 being

23
00:01:46,916 --> 00:01:50,586
utilized in the development community among both engineering and computing

24
00:01:50,618 --> 00:01:54,480
teams also in the advantage sector at large.

25
00:01:54,850 --> 00:01:58,226
This provides efficient efficiency of Python as a

26
00:01:58,248 --> 00:02:01,986
reliable development programming language. Python is

27
00:02:02,008 --> 00:02:05,758
also known to be used in large scale enterprises, some of which

28
00:02:05,784 --> 00:02:09,094
are listed below. So Python is used in Netflix, Google,

29
00:02:09,212 --> 00:02:12,646
Reddit, Spotify, Instagram, Dropbox. These are

30
00:02:12,668 --> 00:02:16,710
just a few of the numerous companies that make use of Python.

31
00:02:17,050 --> 00:02:20,730
The importance of security in Python based application security

32
00:02:20,800 --> 00:02:24,554
in Python web applications, applications in general has become a top

33
00:02:24,592 --> 00:02:28,486
priority and a crucial aspect to consider during development.

34
00:02:28,598 --> 00:02:32,614
Many Unix systems come with Python pre installed, making them potentially vulnerable

35
00:02:32,662 --> 00:02:36,554
to Python scripted attacks. If a Python application running a compromised

36
00:02:36,602 --> 00:02:40,906
unit space system lacks proper system measures,

37
00:02:41,098 --> 00:02:44,814
it's highly suspectible to attacks that

38
00:02:44,852 --> 00:02:47,746
could lead to the theft or leakage of sensitive information.

39
00:02:47,928 --> 00:02:51,502
On June 5, 2012, popular social network

40
00:02:51,646 --> 00:02:55,230
website LinkedIn was hacked. In this popular hack,

41
00:02:55,390 --> 00:02:59,058
the passwords were of over 6.5 million users. User accounts

42
00:02:59,074 --> 00:03:02,486
were stolen. Internet security experts said that the passwords were

43
00:03:02,508 --> 00:03:05,846
easy to unscramble because of LinkedIn's failure to

44
00:03:05,868 --> 00:03:09,398
use assault when hashing them. We'll cover that in ticker

45
00:03:09,414 --> 00:03:13,174
coding practices when we go over to section three, the password

46
00:03:13,222 --> 00:03:16,138
we are caught in as a result of an SQL injection attack.

47
00:03:16,304 --> 00:03:20,534
These attackers, the attackers exploited common vulnerabilities in a third party

48
00:03:20,582 --> 00:03:24,570
library used in LinkedIn to inject a malicious

49
00:03:25,070 --> 00:03:28,174
SQL code, granted them to fast amount

50
00:03:28,212 --> 00:03:33,554
of user data. LinkedIn apologized immediately and which

51
00:03:33,592 --> 00:03:36,930
seems like a very efficient response to the situation,

52
00:03:37,080 --> 00:03:41,374
probably after fixing the bug, most likely. See brief

53
00:03:41,422 --> 00:03:45,006
on the article's purpose and structure. This presentation aims

54
00:03:45,038 --> 00:03:48,786
to provide a clear and detailed insight to the essential security best practices

55
00:03:48,898 --> 00:03:52,338
in Python, web applications and general Python development.

56
00:03:52,434 --> 00:03:56,754
We will delve into the following areas. The common vulnerabilities and trade specific Python

57
00:03:56,802 --> 00:04:00,038
applications. We cover topics like SQL injection,

58
00:04:00,214 --> 00:04:03,926
cross site scripting, cross site crossford G secure

59
00:04:03,958 --> 00:04:07,398
coding practices in Python we'll handle image

60
00:04:07,414 --> 00:04:11,546
validation and standardization, proper use of libraries and dependencies secure

61
00:04:11,578 --> 00:04:15,434
file handling avoiding common pitfalls, that is, learn how to avoid

62
00:04:15,482 --> 00:04:18,782
common security mistakes that can lead to SQL eyes

63
00:04:18,836 --> 00:04:22,890
and xss. From there, we'll proceed to authentication and authorization

64
00:04:22,970 --> 00:04:27,006
method, the best practices implementing secure authorization schemes.

65
00:04:27,118 --> 00:04:30,814
We will then give a noteworthy coverage on encryption and hashing

66
00:04:30,862 --> 00:04:33,570
in Python, so let's delve into these topics.

67
00:04:34,310 --> 00:04:38,162
Section two common security threats in Python an overview

68
00:04:38,226 --> 00:04:41,890
of common vulnerabilities and threats specific to Python applications

69
00:04:42,050 --> 00:04:45,910
recognize that modern applications are inherently susceptible to

70
00:04:46,060 --> 00:04:49,450
security flaws. Some of these flaws are inherent to the

71
00:04:49,520 --> 00:04:53,094
technology stack, while others are common pitfalls in programming

72
00:04:53,142 --> 00:04:57,354
projects. Regardless of the source, virtually all application built with

73
00:04:57,392 --> 00:05:01,146
any programming language will inevitably have security vulnerabilities.

74
00:05:01,258 --> 00:05:04,938
Therefore, it falls on developers like ourselves to identify

75
00:05:05,034 --> 00:05:08,574
and address these vulnerabilities before malicious actors exploit them.

76
00:05:08,692 --> 00:05:12,762
Let's start with the first one. SQL injections SQL injection

77
00:05:12,826 --> 00:05:16,462
SQL ICE is a common and dangerous web security vulnerability

78
00:05:16,606 --> 00:05:20,066
that arises when malicious SQL code is injected into an

79
00:05:20,088 --> 00:05:23,774
application's impute and subsequently sent to the database.

80
00:05:23,902 --> 00:05:27,522
This allows attackers to manipulate the Internet SQL queries,

81
00:05:27,666 --> 00:05:31,382
potentially granting them unauthorized access to information

82
00:05:31,516 --> 00:05:34,374
or even control over the database itself.

83
00:05:34,572 --> 00:05:37,550
SQL injection can have devastating consequences,

84
00:05:37,650 --> 00:05:40,342
potentially leading to data theft.

85
00:05:40,486 --> 00:05:43,190
Hackers can state sensitive information like usernames,

86
00:05:43,270 --> 00:05:46,442
passwords, credit card information, and more.

87
00:05:46,576 --> 00:05:49,820
Data manipulation. They can modify or delete data,

88
00:05:50,290 --> 00:05:54,794
impacting website functionalities or causing financial losses.

89
00:05:54,922 --> 00:05:58,254
System takeover in extreme cases, they might even gain full

90
00:05:58,292 --> 00:06:01,850
control of database server. The next one is cross site scripting.

91
00:06:01,930 --> 00:06:05,710
XSS cross site scripting is a web security vulnerability

92
00:06:05,790 --> 00:06:09,470
that allows attackers to inject malicious scripts into websites.

93
00:06:09,550 --> 00:06:12,994
These scripts are then executed by unsuspecting users and

94
00:06:13,032 --> 00:06:16,206
browsers, potentially leading to data theft.

95
00:06:16,318 --> 00:06:19,782
Attackers can still seek information like cookies, session ids, and other

96
00:06:19,836 --> 00:06:23,266
data stored in the browser. Account takeover

97
00:06:23,378 --> 00:06:27,282
they can hijack user accounts by capturing login credentials

98
00:06:27,346 --> 00:06:31,398
or manipulating session data. The next one website defacement.

99
00:06:31,494 --> 00:06:35,126
They can alter website content or redirect users to malicious websites,

100
00:06:35,158 --> 00:06:39,658
which is really, really dangerous. Spreading malware they

101
00:06:39,664 --> 00:06:43,610
can inject malicious code into other websites visited by the user.

102
00:06:43,770 --> 00:06:47,642
Cross site request forgive CSRF

103
00:06:47,786 --> 00:06:51,438
cross site request forgery, also known as CSOf, is an attack

104
00:06:51,524 --> 00:06:54,670
that forces an end user to execute unwanted actions

105
00:06:54,750 --> 00:06:58,494
on a web application in which they are currently authenticated.

106
00:06:58,622 --> 00:07:02,046
They can have significant consequences like unauthorized transaction,

107
00:07:02,158 --> 00:07:05,618
data theft, website facement. The last one we'll

108
00:07:05,634 --> 00:07:08,838
cover is command injection. Command injection is a

109
00:07:08,844 --> 00:07:12,342
less popular attack popular injection attack compared to

110
00:07:12,396 --> 00:07:15,734
SQL injection attacks. This is because orchestrating such

111
00:07:15,772 --> 00:07:18,814
an attack takes time and consideration.

112
00:07:18,962 --> 00:07:22,474
However, overlooking command injection attacks can leave your system or

113
00:07:22,512 --> 00:07:26,038
application vulnerable to some big threats and in some cases

114
00:07:26,134 --> 00:07:29,654
lead to full system compromise. Command injection sends malicious

115
00:07:29,702 --> 00:07:33,498
data into an application that can lead to a grave damage

116
00:07:33,594 --> 00:07:37,162
that can lead to great damage when evaluated by the code interpreter.

117
00:07:37,306 --> 00:07:41,306
Simply put, this is when an attacker is able to execute common

118
00:07:41,338 --> 00:07:44,980
on your application server via a loophole in your application code.

119
00:07:45,350 --> 00:07:49,534
We could also call this remote code execution data theft.

120
00:07:49,662 --> 00:07:53,010
This could lead to data theft. Attackers can access sensitive information

121
00:07:53,080 --> 00:07:56,422
stored on the server's file system, database and other

122
00:07:56,476 --> 00:07:59,798
systems. System takeover they can gain control of

123
00:07:59,804 --> 00:08:03,122
the server, allowing them to install malware, delete files,

124
00:08:03,186 --> 00:08:06,566
or disrupt operations. Lateral movement they can use this

125
00:08:06,588 --> 00:08:09,862
compromised server as launching points to attack other systems

126
00:08:09,926 --> 00:08:14,054
on the network. Some other notable mentions includes

127
00:08:14,102 --> 00:08:17,686
attackers can also leverage on misconfiguration in our Python

128
00:08:17,718 --> 00:08:21,290
application, such as insecure file handling, insecure authentication,

129
00:08:21,370 --> 00:08:23,470
and insecure object references.

130
00:08:24,290 --> 00:08:27,614
Next section says next subsection says

131
00:08:27,732 --> 00:08:31,034
examples of fast security incidents in Python

132
00:08:31,082 --> 00:08:34,418
based application in Dropbox Dropbox in 2012,

133
00:08:34,424 --> 00:08:38,594
a large scale phishing attack compromised over 68

134
00:08:38,632 --> 00:08:42,254
million user accounts, potentially leading exposing

135
00:08:42,382 --> 00:08:46,110
potentially exposing email addresses, names, and passwords

136
00:08:46,190 --> 00:08:49,646
hashed, but not something Reddit. In 2018,

137
00:08:49,758 --> 00:08:54,050
editor breach affected over 50 million user accounts, including usernames,

138
00:08:54,130 --> 00:08:57,494
user email addresses, and passwords hashed with

139
00:08:57,532 --> 00:09:00,950
SHS ShA, one considered weak

140
00:09:01,030 --> 00:09:04,526
at that time. That was 2018 Yahoo. In 2014,

141
00:09:04,528 --> 00:09:07,734
a series of data breaches compromised over 1 billion

142
00:09:07,782 --> 00:09:10,990
user accounts, exposing various personal information,

143
00:09:11,140 --> 00:09:16,074
including names, email addresses, phone numbers, and even dates.

144
00:09:16,202 --> 00:09:20,394
Then the next section says understanding the risks why Python applications

145
00:09:20,442 --> 00:09:23,954
are targeted Python popularity and ease of use makes

146
00:09:23,992 --> 00:09:27,726
it a target for attackers due to several inherent environmental

147
00:09:27,758 --> 00:09:31,682
factors. This report explores the key risks associated with

148
00:09:31,816 --> 00:09:35,470
Python web applications. Key vulnerabilities

149
00:09:35,630 --> 00:09:39,634
impute validation assess and sanitization inadequate

150
00:09:39,682 --> 00:09:43,314
impute handling can lead to SQL injection, xss,

151
00:09:43,442 --> 00:09:47,794
and command injection. Third party libraries vulnerable

152
00:09:47,842 --> 00:09:51,050
libraries introduce non cybersecurity risk into

153
00:09:51,120 --> 00:09:55,014
application framework specific vulnerabilities. Each framework

154
00:09:55,062 --> 00:09:58,486
has unique security consideration that require authentication

155
00:09:58,518 --> 00:10:03,070
that require attention. Preinstalled Python on Unix

156
00:10:03,810 --> 00:10:07,034
preinstallation can be convenient but requires

157
00:10:07,082 --> 00:10:10,526
consistent updates to adjust vulnerabilities. Then we

158
00:10:10,548 --> 00:10:14,526
have system permissions. Improper permissions can grant unauthorized

159
00:10:14,558 --> 00:10:17,970
access to sensitive files and directories.

160
00:10:18,470 --> 00:10:22,558
We are going to the next section, which is section three. Secure practices

161
00:10:22,734 --> 00:10:26,798
secure coding practices in Python, we start with impute validation

162
00:10:26,894 --> 00:10:31,218
and sanitization. Default line defense against injections

163
00:10:31,314 --> 00:10:34,454
that's what I like to call it. Impute validation is

164
00:10:34,492 --> 00:10:37,634
the process of ensuring data entered by user

165
00:10:37,682 --> 00:10:41,450
is valid and safe before it's been processed by the application.

166
00:10:41,600 --> 00:10:46,154
This is a crucial step in ensuring a Python application against

167
00:10:46,352 --> 00:10:49,850
securing a Python application against common vulnerabilities such as

168
00:10:49,920 --> 00:10:53,434
SQL injections and cross site scripting.

169
00:10:53,562 --> 00:10:56,826
Part of data validation which should be considered involves

170
00:10:56,858 --> 00:11:00,826
the following step trimming of data imputes regular expression

171
00:11:00,858 --> 00:11:04,522
and, for impute validation, enforcing the use of secure passwords

172
00:11:04,586 --> 00:11:07,994
numeric reach validation drop menu selection

173
00:11:08,122 --> 00:11:11,662
for impute validation, let's start with trimming of data impute.

174
00:11:11,806 --> 00:11:15,154
This simply involves removing leading or trailing spaces from

175
00:11:15,192 --> 00:11:18,302
user impute fields like names or addresses.

176
00:11:18,446 --> 00:11:21,814
Shimming ensures consistency and avoids unintentional white

177
00:11:21,852 --> 00:11:25,030
space in data storage or processing.

178
00:11:26,090 --> 00:11:29,994
This makes sure to utilize string functions like trim in

179
00:11:30,032 --> 00:11:32,970
Python or dedicated trimming libraries.

180
00:11:33,390 --> 00:11:36,874
Regular expression regex as usually call

181
00:11:36,912 --> 00:11:40,778
it and form validation validating

182
00:11:40,874 --> 00:11:44,222
imputex and email addresses to ensure they follow

183
00:11:44,276 --> 00:11:48,186
the standard custom formats. Using regex patterns

184
00:11:48,298 --> 00:11:52,326
regex helps enforce specific constraints on data formats,

185
00:11:52,458 --> 00:11:56,274
preventing invalid entries like missing ad symbols or

186
00:11:56,312 --> 00:12:00,334
incorrect domain names. Libraries such as re in Python

187
00:12:00,462 --> 00:12:04,782
offer rejects functionalities. Also, validation packages

188
00:12:04,846 --> 00:12:08,770
like django forms also support regex based validation,

189
00:12:09,350 --> 00:12:12,898
the percentages of secure passwords, checking password lengths,

190
00:12:12,994 --> 00:12:16,438
character types, that is, the uppercase, lowercase numbers,

191
00:12:16,604 --> 00:12:19,914
symbols, and disallowing common dictionary words.

192
00:12:20,032 --> 00:12:23,526
Strong password policies prevent weak and easily

193
00:12:23,638 --> 00:12:27,660
guessable passwords. Mitigated unauthorized access weeks

194
00:12:29,070 --> 00:12:32,886
libraries like passlib in Python can generate

195
00:12:33,078 --> 00:12:36,738
and hash passwords securely. Django uses decrypt,

196
00:12:36,854 --> 00:12:40,810
an industry standard algorithm known for its high computational

197
00:12:40,890 --> 00:12:44,338
costs and resistance to brute force attack.

198
00:12:44,504 --> 00:12:48,354
Drop menu selection. This is also a good option to

199
00:12:48,392 --> 00:12:51,940
consider as it limits the selectable options

200
00:12:52,950 --> 00:12:57,106
and application predefined list. This way, invalid or unsafe

201
00:12:57,138 --> 00:13:00,866
responses cannot be imputed as values. File upload

202
00:13:00,898 --> 00:13:04,434
validation this is a very important step as invalid file

203
00:13:04,482 --> 00:13:08,486
uploads have been known to create backdoor access or lead to reverse

204
00:13:08,518 --> 00:13:12,218
shell instances. Measures to validate files on the

205
00:13:12,224 --> 00:13:16,054
server side and never rely on client side validation alone.

206
00:13:16,182 --> 00:13:20,698
Always maintain updated versions of file validation libraries

207
00:13:20,794 --> 00:13:24,702
to ensure potential vulnerabilities to address

208
00:13:24,756 --> 00:13:28,574
potential vulnerabilities, here are some detailed considerations to

209
00:13:28,612 --> 00:13:32,190
take number one file type validation

210
00:13:33,730 --> 00:13:37,466
implement measures to check the file

211
00:13:37,578 --> 00:13:41,262
MIE MIME type to measures

212
00:13:41,406 --> 00:13:45,826
it matches allowed types that is image

213
00:13:46,018 --> 00:13:50,434
jpeg application Pdf format.

214
00:13:50,562 --> 00:13:54,038
Consider utilizing the Django's file content type property.

215
00:13:54,204 --> 00:13:58,438
Check the file extension against whitelist of permitted extensions

216
00:13:58,534 --> 00:14:03,100
such as JPeg PDf using the file Txt property

217
00:14:05,150 --> 00:14:08,806
in file size number two file size validation

218
00:14:08,918 --> 00:14:12,814
set the maximum file size allowed for upload using

219
00:14:12,852 --> 00:14:16,734
max upload size setting. Implement logic to restrict the

220
00:14:16,772 --> 00:14:20,574
total combined size of uploaded files per user or

221
00:14:20,612 --> 00:14:23,874
session here. These are efficient and

222
00:14:23,912 --> 00:14:27,246
effective to ensuring proper and safe file upload.

223
00:14:27,358 --> 00:14:30,850
These are very good practices. Malicious content

224
00:14:30,920 --> 00:14:34,430
detection leverage on antivirus libraries

225
00:14:34,510 --> 00:14:37,646
and all APIs to scan uploaded

226
00:14:37,678 --> 00:14:40,886
files. Malicious content make use of PU to

227
00:14:40,908 --> 00:14:44,610
validate the image integrity and upload potential

228
00:14:44,690 --> 00:14:48,714
vulnerabilities and prevent protecting vulnerabilities like cross site

229
00:14:48,752 --> 00:14:52,378
scripting attacks. Temporary storage consider

230
00:14:52,464 --> 00:14:56,150
using temporary storage locations for uploaded files

231
00:14:56,230 --> 00:14:58,970
before final processing and validation.

232
00:14:59,310 --> 00:15:02,606
The next one we have proper use of libraries and

233
00:15:02,628 --> 00:15:05,742
dependencies it is important to ensure proper

234
00:15:05,796 --> 00:15:09,486
use of libraries and dependencies in our Python application to

235
00:15:09,508 --> 00:15:13,498
help manage code lifecycle dependencies and outdated

236
00:15:13,594 --> 00:15:17,114
library vulnerabilities. When it comes to proper management of libraries

237
00:15:17,162 --> 00:15:20,738
and dependencies python development, it is necessary to state that

238
00:15:20,824 --> 00:15:24,034
it's necessary that the use of poetry is

239
00:15:24,072 --> 00:15:27,574
a first class solution worth mentioning and looking into.

240
00:15:27,692 --> 00:15:31,378
Poetry is a tool for dependency management and packaging in Python.

241
00:15:31,474 --> 00:15:34,694
Poetry basically allows you to declare libraries your

242
00:15:34,732 --> 00:15:38,490
project depends on and it will manage them for you. It is worth

243
00:15:38,560 --> 00:15:41,802
mentioning that poetry can also build your project

244
00:15:41,856 --> 00:15:45,546
for distribution. The next subsection goes

245
00:15:45,648 --> 00:15:48,938
handling sensitive data most of the time,

246
00:15:49,104 --> 00:15:52,366
sensitive data includes data designed by a business

247
00:15:52,468 --> 00:15:56,110
to be labeled as sensitive. This could be personal information,

248
00:15:56,260 --> 00:16:00,320
biodata, or information generated by a user while on an application.

249
00:16:00,690 --> 00:16:03,914
There are also information which should be generally considered

250
00:16:03,962 --> 00:16:07,666
as sensitive data, such as financial information.

251
00:16:07,848 --> 00:16:12,114
We can say that sensitive data is

252
00:16:12,152 --> 00:16:15,826
any data that an attacker values the most. That is

253
00:16:15,848 --> 00:16:19,826
definitely sensitive data, so you want to keep that data away from the attacker.

254
00:16:19,938 --> 00:16:23,958
To create methods to securely handle sensitive sensitive data,

255
00:16:24,124 --> 00:16:27,994
we think about what matters the most to application and

256
00:16:28,032 --> 00:16:32,202
to our users question on decentralization of this data and its

257
00:16:32,256 --> 00:16:36,346
security. We can as well leverage on platforms that

258
00:16:36,368 --> 00:16:40,434
offer authorization as a service, platforms like payments,

259
00:16:40,502 --> 00:16:44,174
IO, and piano. Steps to follow when

260
00:16:44,212 --> 00:16:48,014
implementing methods to handle sensitive data we can follow

261
00:16:48,132 --> 00:16:51,994
encryption, authentication, sanitization, login,

262
00:16:52,042 --> 00:16:56,190
and testing. All these steps help when it comes to handling

263
00:16:56,690 --> 00:17:00,850
sensitive data. Then you go to the last section,

264
00:17:01,190 --> 00:17:04,862
the D section, which says secure file handling.

265
00:17:05,006 --> 00:17:07,540
When it comes to handling files in python application,

266
00:17:08,630 --> 00:17:12,278
they are fully important actions carried out. Let's talk about some of

267
00:17:12,284 --> 00:17:16,770
them below. Number one, impute validation and sanitization.

268
00:17:16,930 --> 00:17:20,454
Start by validating file names. Restrict allowed characters

269
00:17:20,502 --> 00:17:23,846
and remove potentially harmful elements to prevent paths,

270
00:17:23,878 --> 00:17:28,010
traversal attacks, or code injection. Since sanitize file content

271
00:17:28,160 --> 00:17:31,446
depending on the context, consider techniques like antivirus

272
00:17:31,478 --> 00:17:34,810
scanning, image integrity checks, or content

273
00:17:34,880 --> 00:17:38,026
parsing for malicious code before processing.

274
00:17:38,138 --> 00:17:41,934
Validate file types and extension. Use backlist to accept only

275
00:17:41,972 --> 00:17:45,406
permitted file types such as JPEG or ptfs,

276
00:17:45,518 --> 00:17:49,422
and prevent unauthorized uploads that might introduce vulnerabilities.

277
00:17:49,566 --> 00:17:52,926
Number two secure storage store files in secure

278
00:17:52,958 --> 00:17:56,310
locations. Employ appropriate permissions and access control

279
00:17:56,380 --> 00:18:00,546
mechanisms. That is, change mode change ownership to restrict

280
00:18:00,578 --> 00:18:04,066
unauthorized access. Consider temporary storage.

281
00:18:04,178 --> 00:18:07,854
Use temporary directories or processing uploaded

282
00:18:07,922 --> 00:18:11,766
files before moving them to permanent storage locations,

283
00:18:11,878 --> 00:18:14,790
minimizing potential damage in case of vulnerabilities.

284
00:18:14,950 --> 00:18:18,038
Encrypt sensitive sensitive data in files.

285
00:18:18,214 --> 00:18:21,998
If files contain sensitive information, encrypt them at rest

286
00:18:22,084 --> 00:18:26,014
using libraries like ferrets and then decrypt them only when

287
00:18:26,052 --> 00:18:29,754
necessary. Good level best practices used context

288
00:18:29,802 --> 00:18:33,658
managers the first one says use context managers

289
00:18:33,754 --> 00:18:37,646
utilize context managers such as like open for opening

290
00:18:37,678 --> 00:18:41,566
files to ensure proper file closing and resource management,

291
00:18:41,678 --> 00:18:45,174
preventing potential vulnerabilities like leaving files open

292
00:18:45,212 --> 00:18:49,414
for unauthorized access. Avoid hard coded parts very important

293
00:18:49,612 --> 00:18:53,202
dynamically construct file paths based on user impute

294
00:18:53,266 --> 00:18:56,482
or other variables. Certain static

295
00:18:56,546 --> 00:18:59,450
parts might be exploitable.

296
00:19:00,030 --> 00:19:03,674
Utilize secure libraries employ well maintained and

297
00:19:03,712 --> 00:19:07,066
secure libraries for specific file handling tags e.

298
00:19:07,088 --> 00:19:10,210
G. OS path for basic operations

299
00:19:10,310 --> 00:19:13,498
and pillow for image manipulation

300
00:19:13,674 --> 00:19:17,226
regularly update dependencies keep your Python interpreter

301
00:19:17,338 --> 00:19:21,326
libraries and frameworks updated to ensure to address

302
00:19:21,428 --> 00:19:25,358
potential security vulnerabilities. The next section

303
00:19:25,454 --> 00:19:29,806
which says authentication and authorization the first subsection

304
00:19:29,838 --> 00:19:33,330
states best practice for user authentication

305
00:19:34,390 --> 00:19:38,146
in developing user authentication in

306
00:19:38,168 --> 00:19:41,926
developing user authentication in python applications, here are

307
00:19:41,948 --> 00:19:45,766
some best practices to be mindful of utilize when possible

308
00:19:45,868 --> 00:19:49,466
number one. Secure password management a.

309
00:19:49,568 --> 00:19:53,162
Strong password policies b. Secure hashing C.

310
00:19:53,216 --> 00:19:57,206
Salt generation d. Multifactor authentication MFA

311
00:19:57,398 --> 00:20:00,446
number two. Secure session management a.

312
00:20:00,548 --> 00:20:04,046
HTTPs measures enforce HTTPs for

313
00:20:04,068 --> 00:20:07,546
all communication to prevent interception of login credentials

314
00:20:07,578 --> 00:20:11,546
and other sensitive data. B. Secure session tokens

315
00:20:11,658 --> 00:20:15,026
use secure and unique session tokens instead of relying on

316
00:20:15,048 --> 00:20:18,622
cookies alone. C. Session timeouts

317
00:20:18,686 --> 00:20:22,334
use appropriate session timeouts to automatically log out inactive

318
00:20:22,382 --> 00:20:26,694
users, minimizing the risk of unauthorized access d.

319
00:20:26,812 --> 00:20:30,434
Secure token storage store session tokens securely

320
00:20:30,482 --> 00:20:34,440
on the server side never inclined site storage d.

321
00:20:35,290 --> 00:20:39,594
Number three impute validation and sanitization a.

322
00:20:39,712 --> 00:20:43,258
Validate and sanitize all user imputes, that is,

323
00:20:43,344 --> 00:20:47,286
prevent SQL injection, cosite scripting, and other attacks

324
00:20:47,318 --> 00:20:51,106
by carefully validating and sanitizing all user imputes,

325
00:20:51,238 --> 00:20:54,042
especially login credentials and search queries.

326
00:20:54,186 --> 00:20:57,450
B. Rate limiting implement

327
00:20:57,530 --> 00:21:00,750
rate limiting to prevent root force attacks and denial of service

328
00:21:00,820 --> 00:21:04,162
attempts. These are all worth

329
00:21:04,216 --> 00:21:08,206
mentioning. Secure number four secure coding practices

330
00:21:08,398 --> 00:21:12,450
a. Avoid hard coded credentials. Never store sensitive information

331
00:21:12,520 --> 00:21:15,526
like passwords or API keys directly on your code.

332
00:21:15,628 --> 00:21:19,190
Use environment variables or secure configuration files instead.

333
00:21:19,340 --> 00:21:22,450
B. Use secure libraries and frameworks.

334
00:21:22,530 --> 00:21:26,098
Utilize well maintained and secure libraries like flux login

335
00:21:26,194 --> 00:21:29,894
or the Django authentication system for user authentication

336
00:21:29,942 --> 00:21:33,446
functionalities c. Stay updated keep your Python

337
00:21:33,478 --> 00:21:37,654
interpreter libraries and frameworks updated to address potential

338
00:21:37,702 --> 00:21:41,626
security vulnerabilities. Number five additional considerations

339
00:21:41,738 --> 00:21:45,230
a. Use secure password. Best mechanisms allow

340
00:21:45,300 --> 00:21:49,262
users to reset their password safely through image verification or other

341
00:21:49,316 --> 00:21:53,250
secure methods. B. Log authentication attempts log

342
00:21:53,320 --> 00:21:57,330
login attempts, including successful unfield ones, for security

343
00:21:57,400 --> 00:22:00,974
monitoring and forensic analysis. C. Perform regular

344
00:22:01,022 --> 00:22:04,626
security audits conduct regular security audits of your application

345
00:22:04,728 --> 00:22:08,166
to identify and address potential vulnerabilities in your

346
00:22:08,188 --> 00:22:12,466
user authentication system. The next subsection says implementing

347
00:22:12,498 --> 00:22:16,946
secure authorization methods building for choices implementing

348
00:22:16,978 --> 00:22:20,234
secure authorization mechanisms I put like kind of team

349
00:22:20,352 --> 00:22:24,518
kind of thing so we have security. Your web application goes beyond

350
00:22:24,694 --> 00:22:28,038
strong authentication. It requires repost

351
00:22:28,054 --> 00:22:31,914
authorization mechanisms to control access and protect sensitive

352
00:22:31,962 --> 00:22:35,390
data. Here is roadmap to guide your implementation. Number one,

353
00:22:35,460 --> 00:22:39,674
HTTPs the essential shield encrypts all communication

354
00:22:39,722 --> 00:22:43,966
between users and applications using HTTPs. This prevents

355
00:22:43,998 --> 00:22:48,050
eavesdropping and ensures data integrity safeguarding

356
00:22:48,550 --> 00:22:52,658
safeguarding login credentials and user and other sensitive information.

357
00:22:52,824 --> 00:22:56,078
Number two strong authentication the gatekeeper

358
00:22:56,174 --> 00:22:58,370
choose a robust authentication method,

359
00:23:00,490 --> 00:23:03,778
ideally multifactor, to verify user identities

360
00:23:03,874 --> 00:23:07,954
effectively. Don't settle for weak passwords, enforce complexity,

361
00:23:08,082 --> 00:23:11,890
and regularly require password updates. Number three

362
00:23:11,980 --> 00:23:15,706
authorization defining access rules implement a

363
00:23:15,728 --> 00:23:18,874
granting authorization mechanism that defines who

364
00:23:18,912 --> 00:23:22,270
can access what. Utilize rule based access

365
00:23:22,340 --> 00:23:26,318
control, RBaC, or regular modules to

366
00:23:26,404 --> 00:23:29,754
assign permissions based on user roles and attributes.

367
00:23:29,882 --> 00:23:33,410
Session management vigilance guidance protect

368
00:23:33,480 --> 00:23:37,186
session management use secure tokens enforce timeout for

369
00:23:37,208 --> 00:23:40,318
inactive sessions and ensure proper storage

370
00:23:40,414 --> 00:23:44,594
on the server side never inclined side storage number five

371
00:23:44,712 --> 00:23:48,802
secure coding build with caution follow secure coding practices

372
00:23:48,946 --> 00:23:52,754
avoid hard coded credentials rigorously validate and sanitize

373
00:23:52,802 --> 00:23:56,502
user imputes and leverage well maintained security libraries. Remember,

374
00:23:56,636 --> 00:24:00,742
a single vulnerability can breach your entire defense update

375
00:24:00,806 --> 00:24:04,038
and monitoring. Number six update and monitor

376
00:24:04,214 --> 00:24:08,358
internal vigilance. Keep your web application frameworks

377
00:24:08,374 --> 00:24:12,550
and dependencies updated to patch vulnerabilities promptly

378
00:24:12,710 --> 00:24:16,462
conduct regular cybersecurity audits and monitor application

379
00:24:16,596 --> 00:24:19,802
activity for suspicious behavior practices.

380
00:24:19,866 --> 00:24:23,646
Defense is key. By implementing these steps, you build secure

381
00:24:23,678 --> 00:24:28,046
authorization methods mechanisms that protect your web application from unauthorized

382
00:24:28,078 --> 00:24:30,446
access, data breaches, and other threats.

383
00:24:30,558 --> 00:24:33,906
Remember, security is an ongoing journey, not a

384
00:24:33,928 --> 00:24:37,606
destination. Stay vigilant and adapt your defenses as the

385
00:24:37,628 --> 00:24:42,066
landscape evolves. Number four encryption

386
00:24:42,098 --> 00:24:45,206
and hashing in python over an

387
00:24:45,228 --> 00:24:48,714
overview of encryption and hashing techniques in the digital world,

388
00:24:48,832 --> 00:24:52,346
protecting data is paramount. Two key techniques used for

389
00:24:52,368 --> 00:24:55,574
this purpose are encryption and hashing. While goods transform

390
00:24:55,622 --> 00:24:59,654
data, they serve distinct purposes. Number one encryption

391
00:24:59,782 --> 00:25:03,402
reversible number one encryption encryption is reversible.

392
00:25:03,546 --> 00:25:06,954
Encrypted data can be decrypted back to its original form using a secret

393
00:25:07,002 --> 00:25:10,302
key. B confidentiality it protects data

394
00:25:10,356 --> 00:25:13,586
confidentiality by making it unreadable to anyone without the

395
00:25:13,608 --> 00:25:17,438
key. C. Common uses secure communication

396
00:25:17,614 --> 00:25:21,534
HTTPs storing sensitive data on digs protecting

397
00:25:21,582 --> 00:25:25,518
it files in transit popular algorithms involved

398
00:25:25,694 --> 00:25:28,558
popular algorithms involve AES, RSA,

399
00:25:28,654 --> 00:25:31,750
charch 20 the next one is hashing.

400
00:25:32,490 --> 00:25:36,294
Hashing is one is one

401
00:25:36,332 --> 00:25:39,814
way. It transforms data into a unique fixed

402
00:25:39,862 --> 00:25:43,754
length stream called a hash. B integrity it

403
00:25:43,792 --> 00:25:47,034
ensures data hasn't been tampered with. Any change

404
00:25:47,072 --> 00:25:51,550
in the data will result in different hash. C common uses

405
00:25:51,970 --> 00:25:55,470
password storage hashed not stored in plain text,

406
00:25:55,620 --> 00:25:59,310
verifying file integrity digital signatures d

407
00:25:59,380 --> 00:26:04,238
popular algorithms involved shall two, five, six, shard 2512

408
00:26:04,404 --> 00:26:08,466
shall three and b trips. B trips are my personal favorite and

409
00:26:08,488 --> 00:26:12,494
the key differences in purpose encryption focuses on confidentiality,

410
00:26:12,622 --> 00:26:16,162
while hashic focuses on data integrity reversibility.

411
00:26:16,306 --> 00:26:19,670
Encrypted data can be decrypted, while hash data

412
00:26:19,740 --> 00:26:23,474
cannot be reversed. Computational cost hashing is generally

413
00:26:23,522 --> 00:26:26,774
faster than encryption using the right

414
00:26:26,812 --> 00:26:30,106
technique. The choice between encryption and hashing depends on

415
00:26:30,128 --> 00:26:34,470
your specific needs. You need to access original data, use encryption

416
00:26:34,630 --> 00:26:37,974
won't need to verify data integrity. Use hashing.

417
00:26:38,102 --> 00:26:41,738
Want to combine boots? Use salting with hashing for password

418
00:26:41,914 --> 00:26:45,294
storage. That is, add random string to the password before

419
00:26:45,332 --> 00:26:48,320
hashing, making it even harder to crack. Remember,

420
00:26:49,330 --> 00:26:52,974
both encryption and hashing are essentially essential

421
00:26:53,022 --> 00:26:56,738
tools for data security. Choose the right technique based on specific

422
00:26:56,824 --> 00:27:00,130
needs. Keep your eyes and embroidery secure.

423
00:27:01,190 --> 00:27:04,482
Now implementing encryption and hashing in python application.

424
00:27:04,616 --> 00:27:10,262
So let's go to code

425
00:27:10,316 --> 00:27:13,320
sample we have.

426
00:27:14,410 --> 00:27:18,146
So in this code sample,

427
00:27:18,338 --> 00:27:22,200
I would quickly change to my

428
00:27:23,290 --> 00:27:26,970
so first of all, we have our Python environments created.

429
00:27:31,230 --> 00:27:34,330
Let's change to our python environments

430
00:27:35,890 --> 00:27:39,738
to check. While it's

431
00:27:39,754 --> 00:27:44,698
doing that, let me create an encryption py.

432
00:27:44,874 --> 00:27:48,782
This is where we test our encryption. We'll have our

433
00:27:48,836 --> 00:27:52,510
hash hashing py.

434
00:27:53,890 --> 00:27:55,640
So let's quickly install.

435
00:28:07,050 --> 00:28:12,410
Let's also install cryptography.

436
00:28:19,280 --> 00:28:34,330
These are important it

437
00:28:34,400 --> 00:28:38,794
so let's start with encryption that is installed

438
00:28:38,922 --> 00:28:41,470
so we can get cryptography.

439
00:28:42,130 --> 00:28:45,790
This is our module

440
00:28:52,430 --> 00:28:58,146
import and

441
00:28:58,288 --> 00:29:01,586
it so let's start first

442
00:29:01,608 --> 00:29:07,202
of all by creating a cipher key, useful encryption so

443
00:29:07,336 --> 00:29:12,770
printers generates generates

444
00:29:14,890 --> 00:29:20,146
key. Then we have Sephora

445
00:29:20,178 --> 00:29:31,398
suites

446
00:29:31,434 --> 00:29:32,900
in our key,

447
00:29:35,510 --> 00:29:39,170
which I've created here. Now let's encrypt

448
00:29:40,390 --> 00:29:41,480
our message.

449
00:29:43,770 --> 00:29:47,654
So let's create a message set.

450
00:29:47,692 --> 00:29:51,946
This message invites. This is the

451
00:29:52,128 --> 00:29:59,980
confidential text

452
00:30:00,910 --> 00:30:03,370
received from NSA.

453
00:30:06,670 --> 00:30:20,060
Encrypted encrypt.

454
00:30:20,880 --> 00:30:23,550
So this way, we encrypt our message.

455
00:30:24,320 --> 00:30:27,950
Now let's decrypt this same message.

456
00:30:28,560 --> 00:30:31,070
Decrypt our message.

457
00:30:32,560 --> 00:30:38,110
Decrypted message.

458
00:30:38,800 --> 00:30:46,260
So we still call our cipher suits decrypt,

459
00:30:46,600 --> 00:30:48,950
passing our encrypted message.

460
00:30:50,600 --> 00:30:58,676
So in this case, we'll print our

461
00:30:58,698 --> 00:31:03,880
message just

462
00:31:10,170 --> 00:31:13,806
so. Here we print it.

463
00:31:13,948 --> 00:31:17,280
It. Encrypted message.

464
00:31:20,370 --> 00:31:23,786
Encrypted message. I've encrypted

465
00:31:23,818 --> 00:31:24,880
message here.

466
00:31:27,970 --> 00:31:31,870
For this we shall do decode

467
00:31:32,850 --> 00:31:35,230
to get it to print.

468
00:31:36,850 --> 00:31:38,670
Let's not forget to save the file.

469
00:31:52,110 --> 00:31:55,546
Yeah. So this is the confidential text from

470
00:31:55,568 --> 00:31:59,354
the NSA. Original message. Then we encrypted it.

471
00:31:59,472 --> 00:32:04,906
This is the encryption, and then we

472
00:32:04,928 --> 00:32:08,574
decrypted the text again. So it works

473
00:32:08,692 --> 00:32:12,480
very well. This is a very good method. So it lies in our

474
00:32:13,570 --> 00:32:17,034
python applications or python

475
00:32:17,082 --> 00:32:19,760
projects, in case you're working with.

476
00:32:23,030 --> 00:32:26,686
Working with a framework that doesn't. You don't

477
00:32:26,718 --> 00:32:31,406
understand the essay, you don't understand the encryption

478
00:32:31,438 --> 00:32:34,806
method or the hashing method. So you want to use your own.

479
00:32:34,908 --> 00:32:38,310
You can easily use this method, which has been shown here,

480
00:32:38,380 --> 00:32:42,266
to encrypt your information, and you can make it more, much more difficult

481
00:32:42,448 --> 00:32:46,026
depending on what you want to do with it. So now let's work on the

482
00:32:46,048 --> 00:32:49,018
hashing. So, to get our hashing working,

483
00:32:49,184 --> 00:32:53,370
we import hashlib. Let's import recrypt.

484
00:32:55,970 --> 00:32:59,070
Let's also import random.

485
00:33:01,170 --> 00:33:04,480
Now let's get our data to hash. Let's see

486
00:33:08,770 --> 00:33:12,370
this. Let's make the page data. This is

487
00:33:12,440 --> 00:33:16,162
data from my

488
00:33:16,216 --> 00:33:20,034
father. Now let's hash

489
00:33:20,082 --> 00:33:23,574
this sh two five

490
00:33:23,612 --> 00:33:26,870
six. Apologies.

491
00:33:27,210 --> 00:33:30,534
Using the shift button down there. So we

492
00:33:30,572 --> 00:33:33,690
call it the sh two five six hash,

493
00:33:34,830 --> 00:33:38,154
because in this case, we want to hash it using

494
00:33:38,192 --> 00:33:41,770
the sh two five six algorithm we'll call hashlib.

495
00:33:42,510 --> 00:33:46,462
I'll do sh two five six, and we'll pass

496
00:33:46,516 --> 00:33:49,546
our data in it. In here, we'll simply

497
00:33:49,578 --> 00:33:53,514
then say digest.

498
00:33:53,562 --> 00:33:56,170
Hex. Digest as to converts it.

499
00:33:56,340 --> 00:34:00,046
So this is our hash data, which will print

500
00:34:00,078 --> 00:34:04,690
very soon. Now let's hash with sha

501
00:34:05,110 --> 00:34:08,966
two five six. This time with

502
00:34:09,068 --> 00:34:12,600
salts. So this basically makes

503
00:34:13,690 --> 00:34:18,626
good hash

504
00:34:18,658 --> 00:34:22,710
data much more difficult to crack.

505
00:34:23,930 --> 00:34:28,280
So in this case, we created some random bits and give it to five six

506
00:34:29,930 --> 00:34:33,530
value there. Sh two five six hash.

507
00:34:33,570 --> 00:34:40,080
It's called sh

508
00:34:42,370 --> 00:34:45,966
two five six data. And here

509
00:34:45,988 --> 00:34:49,506
we simply just provide this to bytes to

510
00:34:49,528 --> 00:34:53,620
byte. This is currently in a string format, and we have

511
00:34:53,990 --> 00:34:57,038
a data in a string format. So that's in a byte.

512
00:34:57,054 --> 00:35:01,190
Format. So let's convert this to bytes

513
00:35:02,890 --> 00:35:06,230
and simply xhs.

514
00:35:06,810 --> 00:35:10,818
Now that is for just using the hash leap

515
00:35:10,914 --> 00:35:15,174
to hash. So now let's make use of let's hash with

516
00:35:15,292 --> 00:35:19,414
bcrypts. I mentioned Bcrypt because even

517
00:35:19,452 --> 00:35:23,194
in the jungle I'm going to look at my node applications. I still make sure

518
00:35:23,232 --> 00:35:27,258
to use decrypt because it really makes your passwords

519
00:35:27,354 --> 00:35:30,122
really complex, gives that complex feeling.

520
00:35:30,266 --> 00:35:39,878
So let's work with BcrypTW,

521
00:35:39,994 --> 00:35:43,700
most likely password pass our data,

522
00:35:44,310 --> 00:35:47,470
and let's pass bcrypt gen salt.

523
00:35:47,550 --> 00:35:52,854
Let's generate assault so

524
00:35:52,892 --> 00:35:56,838
you can actually add your own custom values there. But let's just use the

525
00:35:57,004 --> 00:35:58,840
default one provided by,

526
00:36:01,930 --> 00:36:06,250
let's call this shard two five six hash.

527
00:36:10,990 --> 00:36:15,514
Have this as shut five six hash and

528
00:36:15,632 --> 00:36:17,920
I will simply create a new line.

529
00:36:19,010 --> 00:36:23,326
Let me duplicate that. And this

530
00:36:23,348 --> 00:36:28,030
is big ribs hash.

531
00:36:29,090 --> 00:36:39,840
Call this bgrib with

532
00:36:43,210 --> 00:36:47,000
save this and let's run our code

533
00:36:48,810 --> 00:36:49,830
python.

534
00:36:53,130 --> 00:36:56,518
So as you can see, the bitcrypt looks

535
00:36:56,604 --> 00:37:00,262
a lot more complicated. We're having

536
00:37:00,316 --> 00:37:04,166
full stops, we're having dollar signs, we're having slash. On the other hand,

537
00:37:04,268 --> 00:37:08,506
Sha is just numerals,

538
00:37:08,618 --> 00:37:12,094
and I don't think I even see

539
00:37:12,132 --> 00:37:15,502
capital letters here. It's just a bunch of small

540
00:37:15,556 --> 00:37:19,582
letters and numbers. First one is just numbers. Second one is

541
00:37:19,636 --> 00:37:23,218
just numbers and letters too. But we

542
00:37:23,224 --> 00:37:27,726
get the point. So these are very good methods

543
00:37:27,758 --> 00:37:32,278
that we can use for creating hashing and encryption of

544
00:37:32,364 --> 00:37:36,306
messages, text, whatever information you want to secure.

545
00:37:36,418 --> 00:37:39,798
I hope that was a good example

546
00:37:39,884 --> 00:37:43,500
for you, and you really understood that. So now

547
00:37:47,230 --> 00:37:51,654
let's come back to our talk. So I've gone through implementing

548
00:37:51,702 --> 00:37:54,460
encryption and hashing in Python application.

549
00:37:54,930 --> 00:37:58,346
Let's now go to best practices for storage for secure

550
00:37:58,378 --> 00:38:04,026
storage of password and sensitive information protecting

551
00:38:04,058 --> 00:38:07,198
sensitive information, especially password discretion for any application.

552
00:38:07,364 --> 00:38:11,166
There are some clear some practices. Number one, never store passwords

553
00:38:11,198 --> 00:38:14,782
in plain text. Never do that. Use secure hashing

554
00:38:14,846 --> 00:38:18,766
with salting, just like I showed you. So verify password.

555
00:38:18,798 --> 00:38:22,802
Securely store hashes and salt securely utilize environment

556
00:38:22,866 --> 00:38:26,450
variables or secure configuration files to store hashes and salts

557
00:38:26,530 --> 00:38:30,386
not directly on your code. Consider utilizing password management systems

558
00:38:30,418 --> 00:38:34,106
for additional cybersecurity. There are other libraries you can leverage on for that,

559
00:38:34,208 --> 00:38:37,674
use secure frameworks and libraries. The Django and Flux offer

560
00:38:37,712 --> 00:38:40,166
builtin's passwords action mechanisms.

561
00:38:40,278 --> 00:38:44,134
Utilize libraries like passlive for password advanced

562
00:38:44,182 --> 00:38:47,562
password hashing features. Then the last one,

563
00:38:47,696 --> 00:38:51,786
encrypt sensitive data. For data beyond

564
00:38:51,818 --> 00:38:55,274
passwords, consider encryption libraries like Frenet

565
00:38:55,322 --> 00:38:58,942
or cryptography for secure storage and transmission.

566
00:38:59,086 --> 00:39:02,478
So number five, we have Python security tools

567
00:39:02,494 --> 00:39:06,402
and libraries. So number one, here we have

568
00:39:06,536 --> 00:39:09,806
introduction our first subsection, we have introduction

569
00:39:09,838 --> 00:39:13,398
to security focused libraries in Python. So in

570
00:39:13,404 --> 00:39:17,334
the ever evolving landscape security landscape, Python developers have

571
00:39:17,372 --> 00:39:21,490
access to rich ecosystem of libraries that empower secure coding practices.

572
00:39:21,650 --> 00:39:25,034
This note delves into the strength and use

573
00:39:25,072 --> 00:39:28,486
case of several prominent libraries offering

574
00:39:28,518 --> 00:39:31,898
guidance on how they can enhance the security of your Python application.

575
00:39:31,984 --> 00:39:35,206
So number one, we have cryptography. Core features

576
00:39:35,238 --> 00:39:39,126
include facility cryptography operations including symmetric

577
00:39:39,238 --> 00:39:42,106
inclusion, escape 20,

578
00:39:42,288 --> 00:39:45,802
asymmetric encryption, RSC, ECC hashing.

579
00:39:45,866 --> 00:39:49,838
Also sharp two, five, six on bitcrypt message

580
00:39:49,924 --> 00:39:53,566
authentication quotes. We have HMTC

581
00:39:53,678 --> 00:39:56,130
and digital signatures.

582
00:39:57,350 --> 00:40:00,934
The next one we have security use cases securely store and

583
00:40:00,972 --> 00:40:04,806
transmit sensitive data implements user authentication and

584
00:40:04,828 --> 00:40:08,150
authorization mechanisms digitally sign and verify

585
00:40:08,570 --> 00:40:12,514
files to ensure integrated integrity securely communicates

586
00:40:12,562 --> 00:40:16,242
over networks using TLS

587
00:40:16,306 --> 00:40:19,846
and SSM as transport layer security and secure

588
00:40:19,958 --> 00:40:23,190
socket layer. So we have Nmap.

589
00:40:23,270 --> 00:40:27,210
Core features include network discovery scanning,

590
00:40:27,370 --> 00:40:31,258
including port scans, os detection, service identification,

591
00:40:31,354 --> 00:40:34,190
viability detection limited,

592
00:40:34,530 --> 00:40:38,178
and packet sniffing. So use case security use case here is

593
00:40:38,264 --> 00:40:42,526
identify potential security vulnerabilities in your network infrastructure enumerate

594
00:40:42,558 --> 00:40:46,062
services running on remote hosts to access potential

595
00:40:46,126 --> 00:40:49,534
attack vendors. Gather network intelligence for penetration testing

596
00:40:49,582 --> 00:40:53,010
and security assessment. Then, number two, we have ScaPI.

597
00:40:53,090 --> 00:40:56,610
Core measures include network packet manipulation,

598
00:40:56,690 --> 00:41:00,466
crafting sniffing analysis, supporting various network

599
00:41:00,498 --> 00:41:03,254
layers and protocols, TCP IP,

600
00:41:03,382 --> 00:41:07,242
Internet security use, case develop and

601
00:41:07,296 --> 00:41:10,726
test custom network cybersecurity tools for intrusion detection,

602
00:41:10,838 --> 00:41:14,490
penetration testing, network forensics. This involves

603
00:41:15,250 --> 00:41:19,374
analyzing network traffic to identify suspicious activity of

604
00:41:19,412 --> 00:41:22,634
protocol deviation, crafting custom network packets,

605
00:41:22,682 --> 00:41:25,918
vulnerability protecting, and network force. Number four,

606
00:41:26,004 --> 00:41:29,530
we have core features. Number four, we have impact packets,

607
00:41:29,610 --> 00:41:32,660
a package that I really, really care about.

608
00:41:33,270 --> 00:41:36,718
The core features include interact with network protocols

609
00:41:36,734 --> 00:41:39,490
like SMB, file sharing, RPC,

610
00:41:40,710 --> 00:41:44,310
DcerPC, and active directory,

611
00:41:44,650 --> 00:41:48,566
primarily used for Windows systems. Cybersecurity use

612
00:41:48,588 --> 00:41:52,274
case includes automate penetration testing and variability

613
00:41:52,322 --> 00:41:54,150
assessment in Windows environments,

614
00:41:56,030 --> 00:41:59,626
perform credentialed attacks and

615
00:41:59,648 --> 00:42:03,338
post exploitation activities after gaining initial access,

616
00:42:03,504 --> 00:42:07,502
extract information from network shares and active directory from

617
00:42:07,556 --> 00:42:12,766
security analysis. So analysis and demonstration of

618
00:42:12,948 --> 00:42:16,122
security tools and integration

619
00:42:16,186 --> 00:42:21,646
of usage examples within I'll

620
00:42:21,678 --> 00:42:25,314
cover this integration and use examples within

621
00:42:25,352 --> 00:42:30,390
Python project, so I'll cover this while we have done

622
00:42:30,460 --> 00:42:34,182
almost done with most of the topic talk.

623
00:42:34,316 --> 00:42:37,846
So number section six

624
00:42:37,948 --> 00:42:41,334
emergent threats and future constraint okay, as we are coming

625
00:42:41,372 --> 00:42:45,014
closer to the end of it, what are some emergent threats

626
00:42:45,062 --> 00:42:48,470
and future constraint? Anticipating and mitigating

627
00:42:48,550 --> 00:42:52,106
emerging trades so, a rapid evolution in technology

628
00:42:52,208 --> 00:42:55,718
and the evergreen attack surface make anticipating

629
00:42:55,814 --> 00:42:59,354
and mitigating emerging threats crucial for any Python

630
00:42:59,402 --> 00:43:02,906
developer. This article here explores

631
00:43:03,098 --> 00:43:06,826
key strategies to stay ahead of the curve and measures robust

632
00:43:06,858 --> 00:43:10,830
security in your project number one involves identifying potential

633
00:43:10,910 --> 00:43:14,722
threats. Next under

634
00:43:14,856 --> 00:43:18,978
the sublist include staying informed. Regularly follow security

635
00:43:19,064 --> 00:43:23,202
news and updates on vulnerabilities affecting Python libraries,

636
00:43:23,266 --> 00:43:26,918
frameworks and dependencies. Subscribe to security

637
00:43:27,004 --> 00:43:31,030
advisories and mailing list of prominent

638
00:43:31,930 --> 00:43:35,178
Python projects. Another thing to do is to

639
00:43:35,344 --> 00:43:38,970
join Python communities. We have them on discord slack

640
00:43:39,870 --> 00:43:44,330
all around. I think also on Twitter we can find Python communities to

641
00:43:44,400 --> 00:43:48,522
join and get engaged. Understand attack vectors

642
00:43:48,666 --> 00:43:55,310
familiarize yourself common attack vectors targeting

643
00:43:56,130 --> 00:44:00,222
Python applications such as SQL injection, XSS code injection,

644
00:44:00,286 --> 00:44:04,050
and vulnerabilities in external libraries.

645
00:44:05,750 --> 00:44:09,362
Proactive threat modeling to

646
00:44:09,416 --> 00:44:12,886
conduct threats modeling exercises for your application

647
00:44:12,988 --> 00:44:16,646
to identify potential attack surfaces and vulnerabilities early in

648
00:44:16,668 --> 00:44:20,214
the development process. Mitigating risk that's number two,

649
00:44:20,332 --> 00:44:23,606
secure how to not mitigate risk now secure

650
00:44:23,638 --> 00:44:27,222
coding practices fully established secure coding practices

651
00:44:27,286 --> 00:44:30,646
like input validation, output encoding, proper error

652
00:44:30,678 --> 00:44:34,518
handling secure password management use libraries like cryptography

653
00:44:34,534 --> 00:44:36,890
for encryption and passlik for password hashing.

654
00:44:37,790 --> 00:44:41,314
Next one dependency management choose secure,

655
00:44:41,382 --> 00:44:45,626
well maintained libraries and frameworks regularly update your dependencies parts

656
00:44:45,658 --> 00:44:52,046
known vulnerabilities. Utilize tools like tree

657
00:44:52,158 --> 00:44:55,310
for dependencies, but visualization and vulnerability

658
00:44:55,390 --> 00:44:59,806
analysis okay, we serve secure configuration ensure

659
00:44:59,838 --> 00:45:03,346
the application configuration is secure evolving exposure

660
00:45:03,458 --> 00:45:07,138
of sensitive information use environments vulnerabilities

661
00:45:07,154 --> 00:45:10,886
for storing secret secrets instead of hardcoding them

662
00:45:10,988 --> 00:45:15,314
in code. Continuous monitoring implementing login

663
00:45:15,362 --> 00:45:19,286
and monitoring system to detect suspicious activity

664
00:45:19,398 --> 00:45:22,778
and potential incidents tools like

665
00:45:22,944 --> 00:45:26,854
elk stack or gridlock can be helpful

666
00:45:26,982 --> 00:45:30,666
to concentrate log management and analysis.

667
00:45:30,778 --> 00:45:34,542
Penetration testing conduct regular penetration testing of

668
00:45:34,596 --> 00:45:37,914
your application to identify and address exploitable vulnerabilities.

669
00:45:38,042 --> 00:45:41,242
Utilize tools like metasploits Kali Linux

670
00:45:41,386 --> 00:45:44,498
for penetration testing exercises. Always make sure to

671
00:45:44,504 --> 00:45:47,598
do things like this with the team so that you don't

672
00:45:47,614 --> 00:45:51,174
just be working alone and you get point of views of other

673
00:45:51,212 --> 00:45:54,662
people in case you're missing something. Staying ahead of the code.

674
00:45:54,716 --> 00:45:58,790
That's number two, staying agile and adaptable being prepared

675
00:45:59,210 --> 00:46:03,006
to adapt to security practices based on the latest

676
00:46:03,138 --> 00:46:06,998
threats and vulnerabilities. Emerging threats are constantly evolving,

677
00:46:07,094 --> 00:46:10,682
so continuous learning and adaptation are key.

678
00:46:10,816 --> 00:46:14,502
The next one says leverage community resources like I mentioned earlier,

679
00:46:14,646 --> 00:46:19,098
participate in community security, Python security community.

680
00:46:19,264 --> 00:46:23,738
Utilize forum mailing list and security conferences to stay informed,

681
00:46:23,834 --> 00:46:28,206
share knowledge, and learn from others experience. Last one says embrace

682
00:46:28,238 --> 00:46:32,286
security automation, automate security tasks and tasks

683
00:46:32,318 --> 00:46:36,654
like dependency scanning, vulnerability passion, and configuration management

684
00:46:36,702 --> 00:46:39,710
for improved efficiency and consistency. Remember,

685
00:46:39,880 --> 00:46:43,880
security is an ongoing process, not a one time fix.

686
00:46:44,570 --> 00:46:48,226
By adopting these strategies, you can practically anticipate,

687
00:46:48,338 --> 00:46:52,102
imagine threats, mitigate risk, and build more

688
00:46:52,156 --> 00:46:55,706
secure Python applications, which is the goal. So some

689
00:46:55,808 --> 00:46:59,446
additional tips to mention consider using secure coding

690
00:46:59,478 --> 00:47:03,158
frameworks frameworks like the Django Flags

691
00:47:03,254 --> 00:47:06,566
pyramid offer built in security features

692
00:47:06,598 --> 00:47:10,126
that can help protect against common vulnerabilities. Number two,

693
00:47:10,228 --> 00:47:13,280
educate your team. Make sure to get your team first of all,

694
00:47:14,210 --> 00:47:17,614
encourage your development team to follow secure coding practices and

695
00:47:17,652 --> 00:47:21,710
stay up to date on security threats. Utilize cloud

696
00:47:21,780 --> 00:47:25,486
services following up

697
00:47:25,508 --> 00:47:29,074
security threats a good mining service that can follow is the hacker news.

698
00:47:29,112 --> 00:47:32,738
It's worth mentioning, so they give quality and top notch

699
00:47:32,834 --> 00:47:36,582
news on the latest data breaches and hacking news

700
00:47:36,636 --> 00:47:40,598
generally. So the next one says it's lice. Cloud security services

701
00:47:40,764 --> 00:47:44,054
Cloud platforms like AWS, Azure and GCP

702
00:47:44,182 --> 00:47:47,334
offer various security features that can benefit your Python

703
00:47:47,382 --> 00:47:51,382
applications. So b future lookout

704
00:47:51,446 --> 00:47:54,714
for Python security practices and advancements here

705
00:47:54,752 --> 00:47:58,662
are some key points to consider. Growing security awareness

706
00:47:58,726 --> 00:48:02,426
okay, so the binary community is increasingly aware

707
00:48:02,458 --> 00:48:06,666
of security concerns, leading to a greater focus on security on secure

708
00:48:06,698 --> 00:48:11,166
coding practices, vulnerability management and threats mitigation

709
00:48:11,278 --> 00:48:15,170
strategies security focused libraries and frameworks

710
00:48:15,590 --> 00:48:19,470
like cryptography, passlib, and bandits are seen wider adoption

711
00:48:19,550 --> 00:48:23,046
and development take a course on YouTube take a course

712
00:48:23,068 --> 00:48:26,694
on coursera anywhere you can find probably udemy. There are

713
00:48:26,732 --> 00:48:30,550
lots of courses that talk about these frameworks and how they can be used properly,

714
00:48:33,310 --> 00:48:36,842
so you know how to utilize them in your Python applications and

715
00:48:36,896 --> 00:48:40,490
make more secure and more strategies.

716
00:48:40,990 --> 00:48:44,086
Python applications so educational resources

717
00:48:44,118 --> 00:48:47,594
and training programs on Python security are becoming more readily

718
00:48:47,642 --> 00:48:51,214
available. So just with the amount of money

719
00:48:51,252 --> 00:48:54,846
you can get these courses and get certified in

720
00:48:54,868 --> 00:48:58,578
them also and have the knowledge. So number two states

721
00:48:58,664 --> 00:49:01,986
advanced security tools and techniques static code

722
00:49:02,088 --> 00:49:05,586
analysis tools continued advancements in tools like

723
00:49:05,608 --> 00:49:09,470
bandits, flake aids, PY links will enable practices,

724
00:49:09,550 --> 00:49:12,914
identification and prevention of security vulnerabilities in code.

725
00:49:13,032 --> 00:49:16,374
The next one says AI power, threats, detection, machine learning

726
00:49:16,492 --> 00:49:20,466
and artificial intelligence will play a bigger role, analyzing code traffic,

727
00:49:20,578 --> 00:49:24,540
network traffic, and log data to detect and respond to security

728
00:49:24,990 --> 00:49:28,454
events in real time. Next one says quantum

729
00:49:28,582 --> 00:49:32,714
resistance cryptography as

730
00:49:32,752 --> 00:49:36,234
quantum computing evolves, any cryptographic algorithms

731
00:49:36,282 --> 00:49:40,094
and libraries will be developed to ensure the security of data and

732
00:49:40,132 --> 00:49:44,474
communication. The third one is integration with development workflows.

733
00:49:44,602 --> 00:49:48,574
Security will become more seamlessly integrated into development

734
00:49:48,622 --> 00:49:53,070
processes with tools and embedded practices

735
00:49:53,150 --> 00:49:56,126
embedded in CI CD continuous integration,

736
00:49:56,158 --> 00:50:00,690
continuous development pipelines, and automated testing frameworks.

737
00:50:01,130 --> 00:50:05,026
Security considerations will be evolving into all aspects

738
00:50:05,058 --> 00:50:08,994
of the development process, from design and architecture

739
00:50:09,042 --> 00:50:13,366
to coding and development. Developers will have access to better documentation,

740
00:50:13,478 --> 00:50:16,870
tutorials and training, and navigate security concerns

741
00:50:16,950 --> 00:50:21,260
and integrate them effectively. Focus on cloud security okay,

742
00:50:22,030 --> 00:50:25,930
this is the last one. With the increasing popularity of

743
00:50:26,080 --> 00:50:29,418
cloud based development and deployments,

744
00:50:29,594 --> 00:50:33,754
cloud security solutions specifically designed for Python applications

745
00:50:33,802 --> 00:50:37,054
will become more prevalent integration of

746
00:50:37,092 --> 00:50:41,550
Python security tools with cloud platforms, which practices

747
00:50:41,710 --> 00:50:45,060
and provide specialization management for

748
00:50:45,430 --> 00:50:47,902
security configurations. That's AWS,

749
00:50:47,966 --> 00:50:51,358
GCP, Azure and Digitalocean and the likes

750
00:50:51,374 --> 00:50:54,658
of that. So section seven,

751
00:50:54,824 --> 00:50:57,974
summary of key takebase. So summary here,

752
00:50:58,012 --> 00:51:01,494
I will just basically give you what's on my mind on

753
00:51:01,532 --> 00:51:05,260
the summary. So we've covered a bit of a lot of things.

754
00:51:08,910 --> 00:51:12,650
I talked about the best practices, look, the best practices,

755
00:51:13,230 --> 00:51:17,326
and how to make sure that let

756
00:51:17,348 --> 00:51:23,806
me just briefly come over to so

757
00:51:23,828 --> 00:51:27,226
I talked about the introduction to Python security, common security trends

758
00:51:27,258 --> 00:51:30,366
in python security practices in python authentication and

759
00:51:30,388 --> 00:51:33,746
authorization encryption and hashing in Python, which I

760
00:51:33,768 --> 00:51:37,310
gave a good sample, python security tools and libraries,

761
00:51:37,390 --> 00:51:41,240
emerging trends and future consideration. So all of these

762
00:51:42,170 --> 00:51:46,066
are really important information. With this knowledge

763
00:51:46,098 --> 00:51:49,394
and extra practice, you can gradually

764
00:51:49,442 --> 00:51:52,766
implement them in your Python application and Python development.

765
00:51:52,898 --> 00:51:56,890
And with strict adherence to

766
00:51:57,040 --> 00:52:00,474
some of these best practices, and many of these best practices, you can

767
00:52:00,512 --> 00:52:04,220
ensure to build more rigid and

768
00:52:06,130 --> 00:52:09,370
secure web applications, both web applications

769
00:52:09,450 --> 00:52:13,274
and Python applications

770
00:52:13,322 --> 00:52:17,006
generally. So, encouragement for

771
00:52:17,028 --> 00:52:20,862
implementing best practices and staying updated in security measurements.

772
00:52:20,926 --> 00:52:24,878
Well, I'll say one big encouragement is try not to get hacked

773
00:52:24,974 --> 00:52:30,066
because you're protecting fines in

774
00:52:30,088 --> 00:52:33,366
those companies that get hacked. That's a lot of money. So you save your

775
00:52:33,388 --> 00:52:37,094
company, you save your team a lot of money by

776
00:52:37,132 --> 00:52:41,538
implementing best practices and secure

777
00:52:41,634 --> 00:52:45,046
applications that are difficult to

778
00:52:45,068 --> 00:52:47,880
get hacked. Because most of the times we believe that,

779
00:52:48,250 --> 00:52:52,010
yeah, there's no way this can get hacked. And eventually something

780
00:52:52,080 --> 00:52:55,678
happens and hacker finds zero d. And yeah,

781
00:52:55,764 --> 00:52:59,520
it's done. So by focusing a lot on these

782
00:52:59,970 --> 00:53:03,962
best practices and securing our pattern applications

783
00:53:04,026 --> 00:53:07,754
as much as possible, we ensure that we are not vulnerabilities

784
00:53:07,802 --> 00:53:11,298
to this event, this unfortunate event.

785
00:53:11,464 --> 00:53:15,202
So that is a very big encouragement and also just to become better.

786
00:53:15,336 --> 00:53:18,402
That is a big encouragement. So I have

787
00:53:18,456 --> 00:53:20,980
had an amazing time with you.

788
00:53:21,510 --> 00:53:24,806
I guess I could not cover probably as much as I wanted to cover,

789
00:53:24,988 --> 00:53:27,960
but I guess I would also see,

790
00:53:28,810 --> 00:53:32,294
yeah, it's been an amazing time having this talk and I really

791
00:53:32,332 --> 00:53:35,990
hope you had a lot to learn from

792
00:53:36,140 --> 00:53:39,320
and you enjoyed it as much as I did. Thank you so much.

793
00:53:39,770 --> 00:53:43,622
Remember, my name is kanadin, you can contact me on

794
00:53:43,676 --> 00:53:47,086
LinkedIn. Yeah, whatever it is,

795
00:53:47,188 --> 00:53:50,890
we can talk about it. Thank you so much and goodbye.

