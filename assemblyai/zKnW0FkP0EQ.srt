1
00:00:27,254 --> 00:00:31,078
Good morning. Good afternoon everybody. Today we are going to discuss the challenges

2
00:00:31,126 --> 00:00:34,806
platform teams face on their day to day operation, and then

3
00:00:34,910 --> 00:00:38,734
we're going to discuss the tips and tricks on how those challenges

4
00:00:38,774 --> 00:00:42,954
can be overcome. First, a little bit about myself.

5
00:00:43,294 --> 00:00:47,046
My name is Marco, I'm italian born, but I'm based in

6
00:00:47,070 --> 00:00:50,182
southern Spain. I've been working in thoughtworks for about

7
00:00:50,238 --> 00:00:53,614
three years. I like to call myself a technologist

8
00:00:53,694 --> 00:00:57,550
and a tinkerer and my true passion lies in animal

9
00:00:57,582 --> 00:01:00,798
rights activism. I've been working for the last

10
00:01:00,846 --> 00:01:04,514
three years in a consultancy company called Fluttworks.

11
00:01:05,294 --> 00:01:09,514
It's us based but it has offices all around the world.

12
00:01:09,934 --> 00:01:14,486
We've been building extraordinary impact. Together with

13
00:01:14,510 --> 00:01:18,806
our client worldwide, we try to amplify positive

14
00:01:18,870 --> 00:01:21,674
social change and revolutionize the tech industry.

15
00:01:23,094 --> 00:01:26,982
Across the years we created innovative products

16
00:01:27,078 --> 00:01:30,414
such as cruise control, which was the first continuous

17
00:01:30,454 --> 00:01:33,434
integration server. We created selenium.

18
00:01:33,934 --> 00:01:37,654
We invented the technology radar which you might be familiar

19
00:01:37,694 --> 00:01:40,742
with, and we keep pushing the

20
00:01:40,758 --> 00:01:43,966
envelope and try to make the technology landscape

21
00:01:44,030 --> 00:01:48,370
better. Also, we have technical

22
00:01:48,442 --> 00:01:51,970
expertise that is showcased by the sheer

23
00:01:52,002 --> 00:01:55,338
amount of technical books we publish in orally and in other

24
00:01:55,386 --> 00:01:59,474
providers. So we like to say whatever

25
00:01:59,554 --> 00:02:02,994
topic, technical topic you can think of, we have written

26
00:02:03,034 --> 00:02:07,490
the book on it. The agenda for today will be first

27
00:02:07,602 --> 00:02:11,578
we'll delve into the unique challenges that are specific

28
00:02:11,626 --> 00:02:14,564
to platform teams and to platform products.

29
00:02:14,864 --> 00:02:18,256
Then we're going to spend some time discussing how these challenges can

30
00:02:18,280 --> 00:02:21,800
be overcome and we'll conclude with a couple of zoom

31
00:02:21,832 --> 00:02:23,964
ins around practices and products.

32
00:02:24,744 --> 00:02:27,968
Starting with the challenges group

33
00:02:28,056 --> 00:02:31,592
is definitely around ux, so we can

34
00:02:31,688 --> 00:02:35,136
highlight five categories. Centricity is

35
00:02:35,160 --> 00:02:38,736
the first one. Developers need to be put at

36
00:02:38,760 --> 00:02:42,624
the center all new product development.

37
00:02:42,924 --> 00:02:46,224
We need to bear in mind what their needs are.

38
00:02:46,564 --> 00:02:50,148
We need to understand what their requirements and aspirations

39
00:02:50,236 --> 00:02:53,516
are. We then need to be able to provide them with

40
00:02:53,540 --> 00:02:56,784
a consistent experience across different

41
00:02:57,124 --> 00:03:00,980
products and services so that there's a seamless experience for

42
00:03:01,012 --> 00:03:04,372
them and they don't even have to notice

43
00:03:04,468 --> 00:03:07,534
when they are using one service or another.

44
00:03:08,194 --> 00:03:11,882
A common problem writing software

45
00:03:11,938 --> 00:03:15,898
or writing products for developers is their

46
00:03:16,066 --> 00:03:20,682
traditional lack of feedback. Developers are quite

47
00:03:20,738 --> 00:03:24,242
eager to get feedback on their work, but whenever a tool

48
00:03:24,338 --> 00:03:28,174
doesn't fit their objectives,

49
00:03:29,434 --> 00:03:32,414
just gonna drop it and look for another one.

50
00:03:33,374 --> 00:03:36,566
Categories that are tied together are simplicity and

51
00:03:36,590 --> 00:03:40,262
usability, and we should aim for both,

52
00:03:40,438 --> 00:03:43,886
meaning that a product should be both simple

53
00:03:43,950 --> 00:03:47,222
and usable. But whenever there's a trade off between the

54
00:03:47,238 --> 00:03:50,118
two, we should always favor usability.

55
00:03:50,286 --> 00:03:54,470
So we don't want a product to always have

56
00:03:54,542 --> 00:03:58,126
the most basic functionality. So being simple, but we want

57
00:03:58,150 --> 00:04:01,666
it to be easy to use and provide an

58
00:04:01,690 --> 00:04:05,322
additional range of functionality that can cater to advanced

59
00:04:05,378 --> 00:04:08,650
users. The next set of challenges is

60
00:04:08,682 --> 00:04:12,114
around business. Here we can think of the common lack of

61
00:04:12,154 --> 00:04:15,802
insights platform teams have into the long term

62
00:04:15,858 --> 00:04:19,562
organizational strategy and even into the roadmaps of

63
00:04:19,618 --> 00:04:22,906
individual products. When this happens, it becomes

64
00:04:22,970 --> 00:04:26,902
harder for platform teams to be ready with the functionality product

65
00:04:26,958 --> 00:04:30,646
teams need in time for when they need them and to

66
00:04:30,670 --> 00:04:34,518
make sure that they are battle tested. There can be

67
00:04:34,566 --> 00:04:37,838
a common distrust of platform technologies,

68
00:04:37,926 --> 00:04:42,062
especially from senior stakeholders. When this happens, it becomes

69
00:04:42,118 --> 00:04:45,158
harder to embrace cloud native technologies,

70
00:04:45,246 --> 00:04:48,934
to move to the cloud, and to embark on innovative

71
00:04:49,094 --> 00:04:52,908
initiatives such as the cloud

72
00:04:52,956 --> 00:04:56,324
carbon footprint measurement, a misconception

73
00:04:56,364 --> 00:05:00,020
about what the ideal operating model for platform teams

74
00:05:00,052 --> 00:05:03,452
should be. And here we can think of platform teams that

75
00:05:03,548 --> 00:05:08,460
are thought as support teams or just

76
00:05:08,612 --> 00:05:12,612
CI CD squads that only focus on helping

77
00:05:12,748 --> 00:05:15,664
development or product teams when they get stuck.

78
00:05:16,124 --> 00:05:19,582
The next set of challenges revolves around technology. Here we

79
00:05:19,598 --> 00:05:23,030
can think of the high cognitive load platform teams are

80
00:05:23,062 --> 00:05:26,494
subject to. All the CI CD

81
00:05:26,654 --> 00:05:31,390
monitoring, instrumentation database tools

82
00:05:31,502 --> 00:05:34,554
that are required for the organization to function,

83
00:05:35,254 --> 00:05:39,398
need somebody be well versed in, and most

84
00:05:39,446 --> 00:05:43,542
often these people are in

85
00:05:43,558 --> 00:05:47,056
order to be able to support the product teams

86
00:05:47,080 --> 00:05:50,984
that use this technology, platform teams need

87
00:05:51,104 --> 00:05:54,576
to work with a number of different tools

88
00:05:54,640 --> 00:05:58,328
at the same time, and this also requires a

89
00:05:58,336 --> 00:06:02,084
lot of context switching for them. Then we can think

90
00:06:02,544 --> 00:06:06,520
that platform teams should really focus mostly

91
00:06:06,552 --> 00:06:09,764
on their intended roadmap. They should have their own

92
00:06:10,264 --> 00:06:14,226
product backlog and they should make constant improvements to

93
00:06:14,250 --> 00:06:18,002
make sure that development teams get the functionality they need.

94
00:06:18,178 --> 00:06:22,162
But most often they get interrupted and they need to firefight

95
00:06:22,338 --> 00:06:26,334
and help product teams with urgent escalations.

96
00:06:27,154 --> 00:06:31,826
On top of this, there can be additional workloads coming

97
00:06:31,890 --> 00:06:35,506
from business requests and they can become

98
00:06:35,570 --> 00:06:38,214
the point of contact for third party vendors.

99
00:06:38,874 --> 00:06:43,664
Still time from their work on the internal roadmap and

100
00:06:43,784 --> 00:06:47,296
platform teams can feel a sense of disconnection because they

101
00:06:47,400 --> 00:06:51,216
are at least two levels apart from the

102
00:06:51,240 --> 00:06:55,088
business, so they might not feel that they are contributing

103
00:06:55,176 --> 00:06:58,584
that much into the overall, there's a set of

104
00:06:58,624 --> 00:07:02,632
challenges that include working with many different stacks,

105
00:07:02,688 --> 00:07:06,536
solution and vendors. Here we can think of platform teams

106
00:07:06,600 --> 00:07:10,502
having to interact with product teams using different

107
00:07:10,558 --> 00:07:13,486
tech stacks such as Java, Kotlin.net, Comma, Golang,

108
00:07:13,550 --> 00:07:16,194
Python and being able to support them.

109
00:07:16,854 --> 00:07:20,150
Then there's the presence of

110
00:07:20,182 --> 00:07:24,078
many different vendors which need to interact with

111
00:07:24,206 --> 00:07:27,782
and there's always a platform team that is responsible for

112
00:07:27,798 --> 00:07:31,310
the interaction between these vendors and the product teams needing their

113
00:07:31,342 --> 00:07:35,378
services. Using so many different technologies means that

114
00:07:35,426 --> 00:07:38,882
platform teams need to spend a significant amount of

115
00:07:38,938 --> 00:07:43,146
their time keeping up to date with this changing landscape.

116
00:07:43,330 --> 00:07:47,018
Not doing so can be a risk in terms of security, can be

117
00:07:47,026 --> 00:07:50,906
a risk in terms of missed opportunity if we are

118
00:07:50,930 --> 00:07:54,586
not able to use the new features whenever there's

119
00:07:54,610 --> 00:07:58,422
an upgrade. New services can also mean that

120
00:07:58,618 --> 00:08:02,534
we might be using something that is not enterprise grade

121
00:08:02,694 --> 00:08:06,758
or does not mean the required SLA and Slos for our

122
00:08:06,886 --> 00:08:10,622
company. So platform teams might need to step

123
00:08:10,678 --> 00:08:14,230
in in those circumstances and being able to cover

124
00:08:14,302 --> 00:08:17,590
the slack for those products that

125
00:08:17,622 --> 00:08:20,234
have been chosen and are not up to par.

126
00:08:20,894 --> 00:08:24,526
Finally, there's a risk of a vendor lock

127
00:08:24,550 --> 00:08:27,704
in. So our technology choice was

128
00:08:27,744 --> 00:08:31,164
made some years ago, some time ago,

129
00:08:31,464 --> 00:08:34,704
and then there's no way out of it. So essentially the company

130
00:08:34,784 --> 00:08:38,296
is stuck using these providers and

131
00:08:38,320 --> 00:08:42,112
there's no alternative in the market or there's no reasonable

132
00:08:42,168 --> 00:08:45,784
path out of it. How can we overcome these

133
00:08:45,824 --> 00:08:49,688
challenges? Starting with the devex ones,

134
00:08:49,856 --> 00:08:52,504
we can think of having research,

135
00:08:53,084 --> 00:08:55,584
segmentation and experimentation in place.

136
00:08:56,364 --> 00:09:00,716
Start by building the smallest possible feature that

137
00:09:00,780 --> 00:09:04,556
can fulfill the requirements from the product teams

138
00:09:04,660 --> 00:09:08,268
and then from there iterate. This is akin to having

139
00:09:08,316 --> 00:09:11,864
an agile mindset applied to the platform teams.

140
00:09:12,244 --> 00:09:16,268
We then can move on to have concepts from experience

141
00:09:16,356 --> 00:09:19,824
design, meaning that we should profile and understand.

142
00:09:20,244 --> 00:09:24,004
Our internal users should have Personas built

143
00:09:24,044 --> 00:09:28,264
around them and we should understand their goal, aspiration and needs,

144
00:09:28,724 --> 00:09:32,476
and we should base our future development based

145
00:09:32,540 --> 00:09:35,104
on the outcome of this experience design.

146
00:09:35,924 --> 00:09:39,940
We can then have an internal developer portal which would allow

147
00:09:40,092 --> 00:09:44,102
all documentation to be put in one place and then

148
00:09:44,238 --> 00:09:48,374
would allow developers to quickly create new

149
00:09:48,454 --> 00:09:53,142
repository and service and have a quick way to deploy

150
00:09:53,198 --> 00:09:57,070
those new services into production quickly. Platform teams will

151
00:09:57,102 --> 00:10:00,518
have to spend less time with their product

152
00:10:00,566 --> 00:10:04,262
teams and this can be accomplished by having comprehensive

153
00:10:04,358 --> 00:10:08,118
documentation that details possible problems

154
00:10:08,166 --> 00:10:10,404
and how they they can be solved.

155
00:10:10,864 --> 00:10:14,904
Finally, we can think of eliciting continuous

156
00:10:14,944 --> 00:10:18,160
feedback from the development teams, for instance,

157
00:10:18,232 --> 00:10:21,680
scoring how the help was whenever

158
00:10:21,832 --> 00:10:25,124
platform teams came to their help,

159
00:10:25,424 --> 00:10:28,720
and then also asking for feedback on how things could be

160
00:10:28,752 --> 00:10:34,032
improved. Moving on to the business challenges something

161
00:10:34,088 --> 00:10:37,606
that platform teams can do is to try to understand

162
00:10:37,710 --> 00:10:42,046
better the challenges of the organization and

163
00:10:42,150 --> 00:10:45,886
what the ultimate goals are. This can translate, for instance,

164
00:10:45,950 --> 00:10:50,262
to platform teams attending business hold hands,

165
00:10:50,438 --> 00:10:54,390
asking questions, trying to have additional sessions with

166
00:10:54,422 --> 00:10:56,674
the platform with the product teams.

167
00:10:57,814 --> 00:11:01,230
Next, platform teams should make sure that the internal

168
00:11:01,262 --> 00:11:04,566
platform roadmap is aligned with a roadmap of

169
00:11:04,670 --> 00:11:08,486
the product they serve. This does not mean only

170
00:11:08,550 --> 00:11:12,422
in terms of functionality, but also in terms of timeline

171
00:11:12,518 --> 00:11:15,194
and completeness of those features.

172
00:11:15,814 --> 00:11:19,990
We don't need to have something 100% ready

173
00:11:20,022 --> 00:11:23,446
from day one, but we can the

174
00:11:23,470 --> 00:11:27,046
functionality that is required from the beginning and then iterate on

175
00:11:27,070 --> 00:11:30,580
it. We need to provide a strong foundation that

176
00:11:30,612 --> 00:11:34,908
then the product teams can build upon. And this foundation should

177
00:11:34,956 --> 00:11:38,588
revolve around practices such as having a good

178
00:11:38,676 --> 00:11:42,384
governance in place, having security by default,

179
00:11:43,164 --> 00:11:47,524
SRE practices, and launch innovative

180
00:11:47,604 --> 00:11:51,652
initiatives such as phenops and carbon footprint

181
00:11:51,708 --> 00:11:55,324
reduction. Next, we can look at the set of challenges

182
00:11:55,364 --> 00:11:58,906
that are specific to technology. It's important to

183
00:11:58,930 --> 00:12:02,666
build a platform product as an ecosystem

184
00:12:02,810 --> 00:12:06,506
where different solutions integrate different

185
00:12:06,610 --> 00:12:10,934
solution, even coming from different vendors, should be

186
00:12:11,514 --> 00:12:15,482
one single product by the internal users. So we should be

187
00:12:15,498 --> 00:12:19,786
able to provide a seamless experience across these

188
00:12:19,850 --> 00:12:23,478
different products and services to

189
00:12:23,566 --> 00:12:27,406
our internal when we decide to use

190
00:12:27,550 --> 00:12:31,062
a product, a technology or a service, we need to

191
00:12:31,118 --> 00:12:35,190
have well established evaluation techniques in place,

192
00:12:35,342 --> 00:12:39,006
meaning that every time we go on the market

193
00:12:39,190 --> 00:12:43,142
or look for an open source software to solve a specific business

194
00:12:43,198 --> 00:12:47,234
or technological need, those evaluation

195
00:12:47,654 --> 00:12:51,036
techniques should be in place and should be

196
00:12:51,060 --> 00:12:54,544
stable and should be approved by the organization at large.

197
00:12:55,204 --> 00:12:59,116
We then need to treat the platform

198
00:12:59,180 --> 00:13:03,036
products their own life cycles, meaning that we

199
00:13:03,060 --> 00:13:07,076
need to establish specific criteria for when

200
00:13:07,100 --> 00:13:10,540
a new product should be created, when it should be

201
00:13:10,572 --> 00:13:14,264
maintained and when it's time to retire it.

202
00:13:14,704 --> 00:13:18,364
We should opt to vendor agnostic technologies

203
00:13:18,744 --> 00:13:23,080
whenever possible. This could mean, for instance, to use terraform

204
00:13:23,272 --> 00:13:26,344
rather than cloud formation rather than biceps,

205
00:13:26,504 --> 00:13:30,232
because terraform are specific cloud providers,

206
00:13:30,368 --> 00:13:34,312
but the same technology can then be used for other purposes

207
00:13:34,368 --> 00:13:37,832
such as terraform code for the

208
00:13:37,848 --> 00:13:41,272
Octa configuration, for instance. We need to be

209
00:13:41,288 --> 00:13:44,584
able to cultivate the relationships internally

210
00:13:44,624 --> 00:13:47,328
and externally and showcase the value delivered.

211
00:13:47,456 --> 00:13:50,680
We need to make sure that all our internal and

212
00:13:50,712 --> 00:13:54,224
external stakeholders understand the value the platform teams

213
00:13:54,264 --> 00:13:57,776
are providing and making sure that the functionality

214
00:13:57,840 --> 00:14:02,320
offered is improving over time. It's then important

215
00:14:02,472 --> 00:14:06,016
to allocate some time to choose

216
00:14:06,200 --> 00:14:09,554
the right toolset and technology to try them out

217
00:14:09,714 --> 00:14:13,506
and set on the best one, not picking the

218
00:14:13,530 --> 00:14:17,054
first one in a rush. The evaluation

219
00:14:17,634 --> 00:14:21,562
needs to reflect metrics such as enterprise

220
00:14:21,618 --> 00:14:24,974
grade, SLA's extensibility,

221
00:14:26,034 --> 00:14:29,506
how much it's used in the industry, and even the

222
00:14:29,530 --> 00:14:33,494
reputation of the producer of these tools.

223
00:14:34,054 --> 00:14:37,598
We need to make sure that the platform roadmap is tied

224
00:14:37,686 --> 00:14:41,126
to the organization and the business strategy so that

225
00:14:41,310 --> 00:14:45,958
the goals are aligned and we are seen contributing

226
00:14:46,046 --> 00:14:49,902
to the overall strat, the overall success of the

227
00:14:50,038 --> 00:14:53,526
organization at large. We should strive to

228
00:14:53,550 --> 00:14:57,406
make sure that development teams are able

229
00:14:57,470 --> 00:15:01,622
to work independently and they don't need handholding

230
00:15:01,678 --> 00:15:05,566
from the platform teams. This can be achieved by self service

231
00:15:05,630 --> 00:15:09,574
portal having very effective onboarding here.

232
00:15:09,614 --> 00:15:13,254
For instance, the North Star for the onboarding could be

233
00:15:13,414 --> 00:15:17,394
making sure that when a developer joins their team,

234
00:15:17,734 --> 00:15:20,982
they can commit and deploy to production in one day. This is

235
00:15:20,998 --> 00:15:24,886
very aspirational from an organization, but it's something a

236
00:15:24,910 --> 00:15:28,526
company should work toward, providing playgrounds so

237
00:15:28,550 --> 00:15:33,166
that developers can try out new things without risking an

238
00:15:33,270 --> 00:15:37,214
accident in production. Next, we can have a couple of zoom

239
00:15:37,254 --> 00:15:40,514
ins about practices and product thinking.

240
00:15:40,974 --> 00:15:44,486
Platform teams implement agile first and foremost,

241
00:15:44,590 --> 00:15:48,274
it's important to have a clear definition of the client,

242
00:15:48,934 --> 00:15:53,410
most often the client of a platform team and

243
00:15:53,442 --> 00:15:58,690
internal development teams. It's important to understand the

244
00:15:58,802 --> 00:16:01,946
differences between the internal development teams,

245
00:16:02,130 --> 00:16:05,770
what kind of need and aspiration they have,

246
00:16:05,842 --> 00:16:09,058
what kind of stack they use and what drives

247
00:16:09,106 --> 00:16:12,854
them. It's then important to work

248
00:16:13,634 --> 00:16:16,738
in new features with an MVP mindset,

249
00:16:16,906 --> 00:16:20,886
meaning that we should be able to deliver a product

250
00:16:20,990 --> 00:16:24,794
that fulfills only the strong requirements

251
00:16:25,414 --> 00:16:28,434
that are asked for by the development teams,

252
00:16:28,774 --> 00:16:32,022
and we can then iterate and prioritize

253
00:16:32,198 --> 00:16:35,686
subsequent improvements. We'll most likely have

254
00:16:35,750 --> 00:16:39,470
competing priorities between different services and

255
00:16:39,502 --> 00:16:42,974
different teams, so we need to be able to balance providing

256
00:16:43,014 --> 00:16:46,244
additional functionality with a timely delivery.

257
00:16:46,704 --> 00:16:50,496
It's also important to measure success. How can

258
00:16:50,520 --> 00:16:54,164
this be measured success for platform teams?

259
00:16:54,744 --> 00:16:58,040
Development teams are happy with the work we've

260
00:16:58,072 --> 00:17:01,800
been doing, thinking about something more tangible,

261
00:17:01,992 --> 00:17:05,808
that they are able to go to production quicker, that they

262
00:17:05,856 --> 00:17:09,920
have fewer accidents in production, that the onboarding

263
00:17:10,072 --> 00:17:13,710
is smoother. So we have both

264
00:17:13,822 --> 00:17:18,110
qualitative and quantitative measures for this next

265
00:17:18,182 --> 00:17:21,638
platform teams should have a clear definition of their software

266
00:17:21,686 --> 00:17:26,174
development life cycles. We can start with testing,

267
00:17:26,294 --> 00:17:30,954
meaning that platform teams should have a testing mindset and should apply

268
00:17:31,294 --> 00:17:34,638
the same practices that are often used in development

269
00:17:34,726 --> 00:17:38,482
teams around testing. It shouldn't be an excuse

270
00:17:38,618 --> 00:17:42,314
that infrastructure is harder to test, as many

271
00:17:42,354 --> 00:17:46,378
technologies such as terraform have comprehensive frameworks

272
00:17:46,426 --> 00:17:49,666
that allow for unit integration and end

273
00:17:49,690 --> 00:17:53,114
to end tests. So we can have a pyramid of

274
00:17:53,194 --> 00:17:57,250
tests in the same way we have for

275
00:17:57,362 --> 00:18:00,746
development code bases. Another strategy that

276
00:18:00,770 --> 00:18:04,944
can be used to have a better delivery is

277
00:18:05,104 --> 00:18:09,120
using feature toggles. This will allow us to

278
00:18:09,272 --> 00:18:12,968
deploy new functionality to production from day

279
00:18:13,016 --> 00:18:17,364
one without the risk of breaking existing things.

280
00:18:17,744 --> 00:18:21,976
This will allow us to also showcase new

281
00:18:22,000 --> 00:18:25,672
functionality to specific users or specific

282
00:18:25,848 --> 00:18:29,600
roles. It's important for platform teams

283
00:18:29,672 --> 00:18:33,042
to provide abstractions to the development teams

284
00:18:33,098 --> 00:18:36,014
that use that are provided by,

285
00:18:36,754 --> 00:18:40,370
but it's also important to have the right level of abstraction

286
00:18:40,402 --> 00:18:44,274
in place. In software development, there's a concept

287
00:18:44,314 --> 00:18:48,690
of which means that our abstraction is leaking

288
00:18:48,882 --> 00:18:53,134
concept from a concept, from the underlying layer.

289
00:18:53,594 --> 00:18:57,490
This makes it very harder for the user

290
00:18:57,642 --> 00:19:01,770
of our abstraction component kind of concepts

291
00:19:01,802 --> 00:19:05,330
in mind when they're using our library. So hitting the right

292
00:19:05,362 --> 00:19:09,002
level of abstraction is notoriously hard,

293
00:19:09,138 --> 00:19:12,746
but it's also extremely important and having

294
00:19:12,810 --> 00:19:16,570
a clear definition of done, it's extremely

295
00:19:16,602 --> 00:19:21,490
necessary for platform teams. So it's important to understand when

296
00:19:21,562 --> 00:19:24,670
a new feature is completed. Is it completed

297
00:19:24,822 --> 00:19:28,358
when the code is pushed to master,

298
00:19:28,486 --> 00:19:31,998
is it completed when it's deployed, is it completed when a new

299
00:19:32,126 --> 00:19:35,622
library version is released, or is it completed when all

300
00:19:35,678 --> 00:19:39,034
the internal development teams are using the new version?

301
00:19:39,694 --> 00:19:43,326
You need to be able to measure who's using which versions

302
00:19:43,430 --> 00:19:47,194
and provide incentive to update to the latest version.

303
00:19:47,694 --> 00:19:51,450
Finally, we can think of having the

304
00:19:51,562 --> 00:19:54,978
ideas from team topologies applied so

305
00:19:55,066 --> 00:19:58,466
platform teams can act as enablers

306
00:19:58,570 --> 00:20:02,610
at times. So they should be able to come

307
00:20:02,642 --> 00:20:05,850
in and help development teams adopt the

308
00:20:05,882 --> 00:20:09,410
best practices such as monitoring effective

309
00:20:09,442 --> 00:20:13,090
deployment instrumentation, having an effective

310
00:20:13,122 --> 00:20:16,702
kubernetes deployment, for instance, whenever a development

311
00:20:16,798 --> 00:20:20,514
team is not able to do it on their own.

312
00:20:20,894 --> 00:20:24,006
The important part here is that it

313
00:20:24,030 --> 00:20:27,182
should be done on a case by case basis, and it

314
00:20:27,198 --> 00:20:30,446
should be done with the goal of making sure that the

315
00:20:30,470 --> 00:20:34,118
development team can be self sufficient in those respects.

316
00:20:34,206 --> 00:20:38,414
After an agreed upon timeline, it's important

317
00:20:38,494 --> 00:20:42,426
that the platform teams specialize and focus on providing

318
00:20:42,490 --> 00:20:46,778
core building blocks that then the product teams

319
00:20:46,826 --> 00:20:50,214
can reuse and customize according to their needs.

320
00:20:51,034 --> 00:20:55,962
They shouldn't be providing the ultimate we

321
00:20:55,978 --> 00:21:00,134
can think of having domain driven design also in platform domains,

322
00:21:00,594 --> 00:21:04,530
so having this segregation in place will allow us

323
00:21:04,602 --> 00:21:08,186
to have a better definition of what each platform team should

324
00:21:08,210 --> 00:21:12,324
be responsible for and avoid the painful and

325
00:21:12,364 --> 00:21:15,756
costly context switching that oftentimes happen in

326
00:21:15,780 --> 00:21:19,980
platform teams. We should aim at having independent

327
00:21:20,092 --> 00:21:24,164
dev streams where the development teams

328
00:21:24,244 --> 00:21:27,284
are able to ship new features

329
00:21:27,364 --> 00:21:30,620
without intervention from the platform team, and they should

330
00:21:30,652 --> 00:21:34,524
be able to solve production issues and improve their

331
00:21:34,644 --> 00:21:38,042
internal codebases and deployments without

332
00:21:38,178 --> 00:21:41,374
need of intervention from the platform teams.

333
00:21:41,914 --> 00:21:45,770
We can also apply concepts from product or

334
00:21:45,802 --> 00:21:49,666
portfolio management to platform teams. So whenever we

335
00:21:49,690 --> 00:21:53,362
decide to build an abstraction on top of existing

336
00:21:53,538 --> 00:21:57,506
products, especially third party products, we need to make sure that

337
00:21:57,690 --> 00:22:01,014
the abstraction makes sense and that is actually providing a value.

338
00:22:01,584 --> 00:22:05,240
If not, we should maybe reconsider using the underlying

339
00:22:05,352 --> 00:22:09,176
direct implementation that most likely is already well tested and

340
00:22:09,200 --> 00:22:12,736
documented. We need to be able also to

341
00:22:12,760 --> 00:22:15,736
think about how we can abstract from organization,

342
00:22:15,920 --> 00:22:19,208
process and rules. So if you can provide a

343
00:22:19,256 --> 00:22:23,072
strong default on the configuration

344
00:22:23,168 --> 00:22:26,878
that adheres to the organization rules, it will

345
00:22:27,016 --> 00:22:30,826
make the developer's life much, much easier.

346
00:22:30,970 --> 00:22:34,954
We can also think about treating the product and services

347
00:22:35,074 --> 00:22:39,174
of the platform team as part of a service portfolio.

348
00:22:40,034 --> 00:22:44,242
Each product and service will have a different maturity and will

349
00:22:44,298 --> 00:22:48,546
have a different lifecycle stage product

350
00:22:48,610 --> 00:22:52,426
metrics for the products of the platform team, so we should understand what

351
00:22:52,450 --> 00:22:56,530
their cost is, what level of adoption they have

352
00:22:56,722 --> 00:23:00,498
and extensively used they are across the organization,

353
00:23:00,586 --> 00:23:04,386
and how much financial sense they make. We should

354
00:23:04,410 --> 00:23:09,002
be able to define the ROI for these products from

355
00:23:09,098 --> 00:23:12,810
their inception, making sure how long it will take to

356
00:23:12,842 --> 00:23:16,418
recover from the investment and then

357
00:23:16,546 --> 00:23:20,002
this return doesn't materialize. We can decide if

358
00:23:20,018 --> 00:23:23,878
we want to pivot or if we want to change approach,

359
00:23:23,966 --> 00:23:28,566
or if you want to continue on the trajectory course having

360
00:23:28,630 --> 00:23:32,550
some enterprise foundation would

361
00:23:32,582 --> 00:23:35,974
mean providing some safety net to the developers, making sure that

362
00:23:36,094 --> 00:23:39,998
it's harder to misconfigure a service and potentially

363
00:23:40,166 --> 00:23:44,230
disclose sensitive information, or leaving

364
00:23:44,262 --> 00:23:46,994
a door ajar for potential attackers.

365
00:23:47,654 --> 00:23:51,246
So we should also evaluate the enterprise grade

366
00:23:51,310 --> 00:23:55,270
of our internal platform solutions, making sure that they comply with SLA

367
00:23:55,302 --> 00:23:59,314
and slos that are mandated by the company at large and

368
00:23:59,614 --> 00:24:04,390
the products provided by the platform teams should be integrated

369
00:24:04,502 --> 00:24:07,918
in a seamless ecosystem, making sure that the development

370
00:24:08,006 --> 00:24:11,542
experience is consistent. So thank

371
00:24:11,558 --> 00:24:15,256
you very much for attending. Today. We covered a lot of ground.

372
00:24:15,430 --> 00:24:19,508
We talked about the most common challenges that platform team

373
00:24:19,596 --> 00:24:22,820
face on their day to day operations, and then

374
00:24:22,852 --> 00:24:27,104
we analyzed how those challenges can be addressed and even

375
00:24:27,564 --> 00:24:30,940
how platform team can shift their mindset into

376
00:24:31,052 --> 00:24:34,604
a more agile and product driven mindset. Thank you very much for attending.

