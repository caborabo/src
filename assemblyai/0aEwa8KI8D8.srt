1
00:00:27,120 --> 00:00:31,308
Hello everybody and welcome to conference 442 Kubernetes

2
00:00:31,356 --> 00:00:35,548
track. If you wonder if this is yet another Kubernetes stock

3
00:00:35,636 --> 00:00:39,348
then the answer is maybe stick around. Then let's find

4
00:00:39,396 --> 00:00:43,308
out. So today's presentation is entitled I

5
00:00:43,316 --> 00:00:46,532
don't know kubernetes and at this point I'm too afraid to ask.

6
00:00:46,668 --> 00:00:50,180
This title is rather extensive and today we're gonna

7
00:00:50,212 --> 00:00:54,108
touch upon Kubernetes API, Kubernetes controller

8
00:00:54,156 --> 00:00:57,634
and operator pattern. Today's agenda is a

9
00:00:57,714 --> 00:01:00,498
rather simple and straightforward one.

10
00:01:00,666 --> 00:01:04,218
We're gonna talk a little bit about Kubernetes history,

11
00:01:04,306 --> 00:01:08,434
then I'm gonna share some personal blunders and aha

12
00:01:08,474 --> 00:01:12,538
moments. Then we're gonna have a small demo concerning operators.

13
00:01:12,626 --> 00:01:16,170
And last but not least, we're gonna talk about Kubernetes

14
00:01:16,282 --> 00:01:20,274
importance in today's landscape. A couple of words about me.

15
00:01:20,314 --> 00:01:23,538
My name is Alex, I'm a site reliability engineer at

16
00:01:23,586 --> 00:01:26,890
systematic and in my spare time I like to contribute

17
00:01:26,922 --> 00:01:30,338
on various platforms. You can find me

18
00:01:30,386 --> 00:01:34,058
under that handle Dejano Alex. Feel free to reach

19
00:01:34,106 --> 00:01:37,974
me if you have any questions concerning this presentation.

20
00:01:39,234 --> 00:01:42,538
Kubernetes has roots in two

21
00:01:42,706 --> 00:01:45,746
internal systems at Google. Borg,

22
00:01:45,770 --> 00:01:49,694
a cluster manager and the other one omega.

23
00:01:50,464 --> 00:01:54,624
These are some snippets from the white papers which are publicly

24
00:01:54,664 --> 00:01:57,760
available. I highly recommend to read them

25
00:01:57,792 --> 00:02:01,004
a little bit just to understand kubernetes.

26
00:02:01,744 --> 00:02:05,320
Now the first prototype of kubernetes was written in

27
00:02:05,352 --> 00:02:09,240
Java. It was actually a Borg cell running

28
00:02:09,272 --> 00:02:11,764
on a local machine.

29
00:02:12,424 --> 00:02:16,524
Later on being rewritten in go for obvious reasons.

30
00:02:17,074 --> 00:02:21,054
In 2014 we have the first public commit

31
00:02:21,394 --> 00:02:24,602
followed by one year later

32
00:02:24,658 --> 00:02:28,322
followed by CNCF

33
00:02:28,418 --> 00:02:32,594
Cloud Native Computing foundation in which Kubernetes was

34
00:02:32,634 --> 00:02:36,074
donated as c technology. So here we can

35
00:02:36,114 --> 00:02:39,762
see Google. We are pleased to

36
00:02:39,778 --> 00:02:45,764
contribute Kubernetes open source cluster scheduler formulation

37
00:02:45,844 --> 00:02:49,140
is rather interesting, right? It's not just a

38
00:02:49,172 --> 00:02:52,460
plain orchestrator. Now for those who don't know,

39
00:02:52,572 --> 00:02:56,236
CNCF Cloud Native Computing foundation

40
00:02:56,300 --> 00:03:00,264
is an umbrella for open source projects.

41
00:03:01,324 --> 00:03:04,740
This is the CNCF landscape. And in here

42
00:03:04,812 --> 00:03:08,020
each small square it's actually a open

43
00:03:08,052 --> 00:03:12,328
source technology that addresses a specific need. Here we have the

44
00:03:12,496 --> 00:03:15,656
main pillars, application definition and image build

45
00:03:15,720 --> 00:03:19,584
databases. Here we can see under scheduling and orchestration

46
00:03:19,664 --> 00:03:23,400
Kubernetes. And if we zoom out

47
00:03:23,432 --> 00:03:26,964
a little bit, if we scroll, we can see that

48
00:03:27,384 --> 00:03:30,952
the landscape is rather daunting. We have almost 200

49
00:03:31,008 --> 00:03:35,240
technologies in CNCF. Now why

50
00:03:35,432 --> 00:03:39,262
it is important that Kubernetes was the

51
00:03:39,278 --> 00:03:42,314
c technology. Moving further,

52
00:03:43,294 --> 00:03:46,662
after almost ten years, our job

53
00:03:46,718 --> 00:03:51,194
market looks like this. Desired characteristics kubernetes

54
00:03:51,534 --> 00:03:55,710
technical stack kubernetes. Nice to have kubernetes.

55
00:03:55,862 --> 00:04:00,150
Last but not least, what your day will look like. Kubernetes. So these are

56
00:04:00,302 --> 00:04:05,196
snippets from actual job descriptions. And fortunately

57
00:04:05,260 --> 00:04:08,508
or unfortunately Kubernetes a prevalent technology.

58
00:04:08,636 --> 00:04:12,024
So more or less evolved under,

59
00:04:12,564 --> 00:04:16,144
around kubernetes, right. Being c technology

60
00:04:16,804 --> 00:04:20,812
in CNCF. Our entry

61
00:04:20,868 --> 00:04:24,948
point in today's discussion is Kubernetes Lingo,

62
00:04:24,996 --> 00:04:28,788
right? So let me share with you a funny

63
00:04:28,836 --> 00:04:30,464
story. So in the beginning,

64
00:04:32,414 --> 00:04:36,342
involved in various meetings, one of which someone

65
00:04:36,478 --> 00:04:40,518
said we need a solution that supports automatic resource

66
00:04:40,566 --> 00:04:44,246
bin packaging for our workloads. And I was okay,

67
00:04:44,270 --> 00:04:47,670
so we're not talking about Kubernetes because Kubernetes is a

68
00:04:47,862 --> 00:04:51,926
container orchestration system, right? But actually this

69
00:04:51,950 --> 00:04:55,422
is the technical definition. So coming back to the Borg white

70
00:04:55,478 --> 00:04:59,704
paper and, and omega, right, that, the scheduling part,

71
00:04:59,784 --> 00:05:02,712
the automatic resource bin packaging,

72
00:05:02,888 --> 00:05:06,224
this is a very important feature

73
00:05:06,264 --> 00:05:09,800
of kubernetes. And of course we have various terms,

74
00:05:09,872 --> 00:05:13,768
right? Like naked, naked pods, both which don't

75
00:05:13,816 --> 00:05:17,704
run under a controller. We have things like workload.

76
00:05:17,744 --> 00:05:21,440
So you might say my pod has been scheduled or you can say the

77
00:05:21,472 --> 00:05:25,360
workload has been scheduled. We have various container

78
00:05:25,432 --> 00:05:29,084
design patterns like init containers, sidecar containers,

79
00:05:29,824 --> 00:05:32,724
ambassador pattern, right? For, for containers.

80
00:05:33,104 --> 00:05:37,184
And also for those interested in Kubernetes

81
00:05:37,264 --> 00:05:40,752
administration, we have things like static pods.

82
00:05:40,928 --> 00:05:44,840
Now almost every presentation concerning Kubernetes starts with

83
00:05:44,872 --> 00:05:48,624
this high level view of Kubernetes architecture in

84
00:05:48,664 --> 00:05:52,288
which we have the control plane with API server, scheduler,

85
00:05:52,336 --> 00:05:55,696
control manager, etCD and the

86
00:05:55,840 --> 00:05:58,844
data plane with workers. Right?

87
00:05:59,344 --> 00:06:03,560
Now one might say okay, so this is the special thing concerning

88
00:06:03,592 --> 00:06:06,984
Kubernetes. But if we were to take a look at another

89
00:06:07,144 --> 00:06:10,920
technology, we can see that it

90
00:06:10,952 --> 00:06:14,664
also has a control plane with managers. It all has a

91
00:06:14,744 --> 00:06:18,604
state store, raft based state store like ETCD.

92
00:06:18,904 --> 00:06:22,048
And last but not least, it has a data blame with workers.

93
00:06:22,136 --> 00:06:25,904
So for sure we can see some similarities, right?

94
00:06:26,284 --> 00:06:30,304
Then this begs the question, what's the special thing about kubernetes?

95
00:06:31,124 --> 00:06:35,156
Even though we work with yamls on a daily basis, behind the

96
00:06:35,180 --> 00:06:39,284
scenes, Kubernetes has a nice HTTP based API

97
00:06:39,324 --> 00:06:43,196
server. So behind the scenes they're actually jsons and

98
00:06:43,260 --> 00:06:47,504
some, some protocol buffers, right, for internal calls.

99
00:06:48,584 --> 00:06:52,192
And this API server, which is the core of Kubernetes

100
00:06:52,248 --> 00:06:55,552
architecture implements the controller pattern,

101
00:06:55,608 --> 00:06:59,216
right? What do we mean by controller pattern? It's a simple

102
00:06:59,320 --> 00:07:03,160
watch loop that watches the desired state, meaning the

103
00:07:03,192 --> 00:07:07,136
one that we have in our yamls and the current

104
00:07:07,200 --> 00:07:10,324
state, which is the actual state of the,

105
00:07:10,664 --> 00:07:14,144
let's say objects that we have running in our cluster

106
00:07:14,264 --> 00:07:17,520
and tries to do the reconciliation, right,

107
00:07:17,552 --> 00:07:21,812
the famous reconciliation loop, it's actually the controller

108
00:07:21,868 --> 00:07:25,500
pattern which tries to adjust the current state

109
00:07:25,612 --> 00:07:28,548
in order to match the desired state.

110
00:07:28,636 --> 00:07:31,908
Now the controller mainly does three things.

111
00:07:32,076 --> 00:07:35,184
It observes the desired state, it analyzes,

112
00:07:35,924 --> 00:07:39,676
and last but not least, it corrects the drift of our

113
00:07:39,780 --> 00:07:43,236
current state, right? So the controller,

114
00:07:43,300 --> 00:07:46,464
it's, as I said, it's a, basically it,

115
00:07:47,094 --> 00:07:51,030
a watch loop, a generic watch loop, so to say operators.

116
00:07:51,102 --> 00:07:54,790
The next step, operators are a design pattern for extending

117
00:07:54,862 --> 00:07:58,006
Kubernetes API and creating software to run

118
00:07:58,070 --> 00:08:01,734
kubernetes. This is a rather steep definition.

119
00:08:01,894 --> 00:08:05,406
Now basically an operator is

120
00:08:05,470 --> 00:08:09,310
just a custom controller, right? A custom watch loop.

121
00:08:09,422 --> 00:08:13,754
And most times operators

122
00:08:13,874 --> 00:08:17,894
need some, some custom resources. Here on the right side we have some

123
00:08:18,394 --> 00:08:21,914
custom resource definitions. So if you do Kubectl get

124
00:08:21,954 --> 00:08:26,258
crds, you're gonna see custom resources

125
00:08:26,306 --> 00:08:29,546
that you, you are having in your cluster.

126
00:08:29,690 --> 00:08:33,362
Things like harbor or Jagger or keycloak

127
00:08:33,458 --> 00:08:38,266
configuration resources. Right. Now we're

128
00:08:38,290 --> 00:08:42,174
gonna try to have a demo concerning operator.

129
00:08:42,913 --> 00:08:46,249
Now the, the entire premise of our

130
00:08:46,361 --> 00:08:50,121
setup is as following, so as we said, the operator is

131
00:08:50,137 --> 00:08:54,345
a custom controller. We're going to have an operator running,

132
00:08:54,489 --> 00:08:58,537
we're going to deploy an operator in our cluster. The operator is

133
00:08:58,665 --> 00:09:01,921
being configured by a custom resource. So we're

134
00:09:01,937 --> 00:09:05,521
going to have a custom resource definition. And actually a custom resource is a

135
00:09:05,577 --> 00:09:08,401
way of extending Kubernetes API.

136
00:09:08,537 --> 00:09:11,940
And the entire purpose of this operator is

137
00:09:11,972 --> 00:09:15,988
to aggregate logs from various parts.

138
00:09:16,116 --> 00:09:17,704
So let's see it in action,

139
00:09:19,284 --> 00:09:22,844
starting with some, some small prerequisites.

140
00:09:22,884 --> 00:09:26,124
Right now in kubernetes we have the documentation

141
00:09:26,204 --> 00:09:29,996
at our fingertips. So if we do a Kubectl explain

142
00:09:30,100 --> 00:09:33,744
pod, for example, we can see exactly

143
00:09:34,404 --> 00:09:38,140
how the controller works, so to say, right? So we have some nested

144
00:09:38,172 --> 00:09:42,284
fields, the spec which is the desired state and the status,

145
00:09:42,364 --> 00:09:45,844
the most recently observed status of the pod,

146
00:09:45,884 --> 00:09:49,076
right. If we drill down a little bit and take a look at the

147
00:09:49,100 --> 00:09:53,220
status, we can see the all known phases like

148
00:09:53,292 --> 00:09:56,660
fail, pending, running, succeeded and

149
00:09:56,692 --> 00:10:00,144
unknown. So these are our pods,

150
00:10:03,804 --> 00:10:07,576
specs and status, right. The, the fields that the

151
00:10:07,600 --> 00:10:11,936
controller uses. Now you

152
00:10:11,960 --> 00:10:15,168
might have heard that kubernetes is a computer abstraction.

153
00:10:15,296 --> 00:10:18,456
And why is that? For example, on my local machine, if I would

154
00:10:18,480 --> 00:10:23,560
like to have a sorted view about my processes

155
00:10:23,632 --> 00:10:27,600
resource consumption, I can do a top, I will select CPU

156
00:10:27,632 --> 00:10:31,952
as a key for my sorting. And here we have a sorted

157
00:10:32,008 --> 00:10:34,726
view concerning our resource,

158
00:10:34,840 --> 00:10:38,434
resource consumptions for our process. But guess

159
00:10:38,474 --> 00:10:42,746
what? We can do the same thing in kubernetes so we do a Kubectl ted

160
00:10:42,930 --> 00:10:46,114
top pods. Let's take a look at the containers.

161
00:10:46,234 --> 00:10:49,814
Let's sort by cpu and

162
00:10:51,034 --> 00:10:54,826
let's take a look in all namespaces. So here we have a sorted

163
00:10:54,890 --> 00:10:58,530
view for our pods. Guess what?

164
00:10:58,602 --> 00:11:03,266
We can do the same thing for our node.

165
00:11:03,290 --> 00:11:06,614
So we can do Kubectl top nodes.

166
00:11:07,194 --> 00:11:11,186
Here I have the simple Kubernetes cluster provided by,

167
00:11:11,290 --> 00:11:14,974
by my setup by the Docker desktop solution.

168
00:11:15,754 --> 00:11:19,618
The interesting part is if we increase the verbosity

169
00:11:19,666 --> 00:11:23,842
a little bit, we can see that behind the scenes an API

170
00:11:23,898 --> 00:11:27,694
is being called, more exactly the nodes API.

171
00:11:28,194 --> 00:11:31,994
And we have a response body. So the JSON that

172
00:11:32,034 --> 00:11:34,574
we, we talked in the beginning,

173
00:11:35,194 --> 00:11:44,494
now we can do the same request having

174
00:11:44,914 --> 00:11:48,850
the endpoint, right? So we can do a

175
00:11:48,882 --> 00:11:52,874
row request to this endpoint and

176
00:11:52,914 --> 00:11:56,860
let's pipe it to JQ. And guess

177
00:11:56,892 --> 00:12:00,308
what we're, guess what, we're going to have a response, right? So if we

178
00:12:00,316 --> 00:12:03,484
do Kubectl top pods, top notch,

179
00:12:03,524 --> 00:12:06,980
sorry. We're going to see

180
00:12:07,012 --> 00:12:10,304
that we have the same response. Of course,

181
00:12:11,124 --> 00:12:14,644
previously we had it in nano cores and here we have millicores.

182
00:12:14,684 --> 00:12:18,564
Nonetheless we can talk with API.

183
00:12:18,604 --> 00:12:22,084
So we can see that behind the scenes. It's a nice API.

184
00:12:22,204 --> 00:12:25,968
Now if we take a look at APA resources, let me zoom out a

185
00:12:25,976 --> 00:12:29,604
little bit, we can see that we have our,

186
00:12:30,304 --> 00:12:32,924
let's say vanilla objects like pods,

187
00:12:33,944 --> 00:12:36,644
secret services deployments. Right?

188
00:12:37,584 --> 00:12:41,624
Here we have the APA version, the API groups, and here

189
00:12:41,664 --> 00:12:45,684
the names for our kinds. The kind, it's so to say

190
00:12:46,424 --> 00:12:50,726
object in kubernetes, more exactly, is an API resource endpoint.

191
00:12:50,920 --> 00:12:54,374
Now if we grab four metrics,

192
00:12:55,594 --> 00:12:59,034
we can see that actually this

193
00:12:59,074 --> 00:13:02,698
is the APA, that API endpoint that we use

194
00:13:02,746 --> 00:13:06,298
when we did Kubectl top pods or top nodes,

195
00:13:06,346 --> 00:13:09,762
right? So if we

196
00:13:09,778 --> 00:13:13,354
take a look at this API group, we can see that we have

197
00:13:13,394 --> 00:13:17,134
two objects behind matrix API

198
00:13:17,174 --> 00:13:21,150
group. This is the version, right? And here we have

199
00:13:21,182 --> 00:13:24,926
the kind meaning the objects. Now we have an

200
00:13:24,950 --> 00:13:28,286
idea that behind the scenes there, there's a, there's an

201
00:13:28,310 --> 00:13:32,354
API. We basically talk with the AP to get various information.

202
00:13:32,734 --> 00:13:36,518
Now the interesting part is that we can extend this

203
00:13:36,566 --> 00:13:39,774
API. So for example,

204
00:13:39,894 --> 00:13:44,134
if we would like to extend the API with so to say KCD

205
00:13:44,554 --> 00:13:48,334
API endpoint, we just verified we don't have it.

206
00:13:48,834 --> 00:13:52,634
We need something and that something is a custom resource.

207
00:13:52,714 --> 00:13:56,594
So if we take a look at our custom

208
00:13:56,674 --> 00:13:59,858
resource, there are a couple of important things in here,

209
00:13:59,986 --> 00:14:03,338
meaning the API group. So we said that we

210
00:14:03,386 --> 00:14:07,442
need or we want the KCD API

211
00:14:07,578 --> 00:14:10,802
group. Behind this API group we have a

212
00:14:10,858 --> 00:14:13,894
single object of kind log drain.

213
00:14:14,074 --> 00:14:18,126
Right. And last but not least, another important thing is that

214
00:14:18,270 --> 00:14:23,582
this object has only one spec, meaning the target spec

215
00:14:23,638 --> 00:14:27,430
which is a type string. So now if

216
00:14:27,502 --> 00:14:31,366
we were to apply this

217
00:14:31,430 --> 00:14:33,114
custom resource definition,

218
00:14:34,774 --> 00:14:38,634
we can see that now we have our new APA group

219
00:14:39,884 --> 00:14:43,236
of version V one alpha. And behind this

220
00:14:43,260 --> 00:14:46,796
API group we have this API resource kind

221
00:14:46,900 --> 00:14:50,724
log drain. And the nice thing is we can explain

222
00:14:50,764 --> 00:14:54,372
it. So if we do x explain LD,

223
00:14:54,468 --> 00:14:58,220
the short name logger drain, we can see that is a resource that

224
00:14:58,252 --> 00:15:01,724
allows the configuration of a dim operator. So it needs

225
00:15:01,764 --> 00:15:06,200
an operator, right? But before creating

226
00:15:06,232 --> 00:15:11,624
the operator, let's take a look at the specs. So if

227
00:15:11,664 --> 00:15:15,368
we're looking at the specs we can see that it has

228
00:15:15,496 --> 00:15:18,936
only one field as we we know the

229
00:15:18,960 --> 00:15:22,968
target field and it's a specification

230
00:15:23,096 --> 00:15:27,120
for managing logger aggregation to the demo operator

231
00:15:27,192 --> 00:15:30,704
drain. And the target is used to set

232
00:15:30,784 --> 00:15:33,872
the desired label view for the operator to pick up.

233
00:15:34,008 --> 00:15:37,568
So now this begs the question, what's an operator? We said it's a

234
00:15:37,616 --> 00:15:41,544
custom controller, a custom watch loop,

235
00:15:41,704 --> 00:15:45,684
but actually it's just a simple application, a simple

236
00:15:46,584 --> 00:15:50,424
binary. We can take a look, have the small

237
00:15:50,504 --> 00:15:54,924
script package as a weekend.

238
00:15:56,144 --> 00:16:00,174
Actually let's build it up.

239
00:16:01,154 --> 00:16:05,334
So we need to build our image,

240
00:16:07,914 --> 00:16:12,962
let's use the same tag

241
00:16:13,018 --> 00:16:14,094
and manifest.

242
00:16:17,314 --> 00:16:21,734
And basically we packaged our application

243
00:16:22,594 --> 00:16:27,288
as a docker image and

244
00:16:27,456 --> 00:16:31,324
now we need to deploy it. But keep in mind our

245
00:16:31,664 --> 00:16:35,416
application needs to talk with Kubernetes API. Therefore it

246
00:16:35,440 --> 00:16:39,584
needs some RBAC roles. So we need to create a

247
00:16:39,624 --> 00:16:42,888
service role and some cluster role bindings for our

248
00:16:42,936 --> 00:16:46,376
application. Of course in

249
00:16:46,400 --> 00:16:50,204
order to deploy our application we're gonna need to apply the deployment.

250
00:16:51,164 --> 00:16:54,828
So we have a deployment and

251
00:16:54,916 --> 00:16:58,140
if we take a look at the pods which are

252
00:16:58,172 --> 00:17:02,180
running in the default namespace, we can see that we have our

253
00:17:02,252 --> 00:17:05,716
operator which is the our

254
00:17:05,780 --> 00:17:10,972
application running in a pod. So if we do a Kubectl logs

255
00:17:11,068 --> 00:17:14,708
and follow the dim operator, we can

256
00:17:14,756 --> 00:17:18,532
see that our operator looks for

257
00:17:18,668 --> 00:17:22,224
logger drain objects. Now let's create

258
00:17:23,164 --> 00:17:26,904
our logger drain object. Let me split the screen here.

259
00:17:27,924 --> 00:17:31,276
Now of course keep

260
00:17:31,300 --> 00:17:35,020
in mind on the left side we have the operator, our custom loop

261
00:17:35,052 --> 00:17:38,188
which is running and it's looking for logger drain

262
00:17:38,236 --> 00:17:41,612
object. So we created our custom resource definition

263
00:17:41,748 --> 00:17:45,348
but we don't have any logger drain objects. So if we do a Kubectl

264
00:17:45,396 --> 00:17:47,814
get logger drain, there's nothing.

265
00:17:50,154 --> 00:17:53,694
Now let's create an object. So let's

266
00:17:54,274 --> 00:17:56,774
create our local drain object.

267
00:17:57,674 --> 00:18:01,154
It's of kind. Log drain. Let's call it demo LD.

268
00:18:01,234 --> 00:18:05,294
And here let's set the target as being KCD.

269
00:18:06,074 --> 00:18:09,738
And now as soon as we create our

270
00:18:09,786 --> 00:18:13,642
logger drain object, so we're going to kubectl apply

271
00:18:13,698 --> 00:18:17,676
it, we can say that our pod has

272
00:18:17,740 --> 00:18:21,428
already seen the logger drain object, right? So logger drain

273
00:18:21,476 --> 00:18:25,164
object named demo LD with specs target KCD.

274
00:18:25,324 --> 00:18:29,124
So that's nice. Now we have a logger

275
00:18:29,164 --> 00:18:32,524
drain object which tells to our operator pick

276
00:18:32,564 --> 00:18:36,244
up the logs for all ports that have the label KCD.

277
00:18:36,284 --> 00:18:40,052
But we don't have any pods label kcd with the label

278
00:18:40,108 --> 00:18:43,064
KCD. Therefore we need to create.

279
00:18:44,684 --> 00:18:48,424
I'm going to use a simple Nginx image

280
00:18:49,284 --> 00:18:53,236
and I'll create a naked pod. And as soon as my

281
00:18:53,420 --> 00:18:57,084
nginx pod named pod one will be healthy and

282
00:18:57,204 --> 00:19:00,740
ready, we can see that our operator picked

283
00:19:00,772 --> 00:19:04,852
up its log so it found pod one in

284
00:19:04,948 --> 00:19:08,230
default namespaces. And here we can see the

285
00:19:08,302 --> 00:19:11,918
logs of the nginx based

286
00:19:12,006 --> 00:19:15,734
pod. We can make another naked

287
00:19:15,774 --> 00:19:19,086
pod. Remember, the scope of the operator

288
00:19:19,150 --> 00:19:23,154
was to drain the logs for all pods

289
00:19:23,614 --> 00:19:26,274
with the label target KCD.

290
00:19:27,174 --> 00:19:31,394
So here it's a simple flask based application

291
00:19:31,734 --> 00:19:35,150
and the story remains the same.

292
00:19:35,222 --> 00:19:39,154
As soon as the board is healthy,

293
00:19:39,794 --> 00:19:43,594
we can see that the logs

294
00:19:43,634 --> 00:19:47,114
have been picked up for pod two as well. And here we can

295
00:19:47,154 --> 00:19:49,654
see the pods right now.

296
00:19:50,794 --> 00:19:54,354
Coming back to our presentation, what we've seen,

297
00:19:54,434 --> 00:19:58,002
we've seen that a resource in Kubernetes

298
00:19:58,098 --> 00:20:01,594
is actually an endpoint, right? It's an endpoint.

299
00:20:01,674 --> 00:20:05,970
Kubernetes API operators are custom controllers

300
00:20:06,042 --> 00:20:09,386
which allows us to have opinionated resources

301
00:20:09,530 --> 00:20:13,006
on top of Kubernetes, meaning that we have a way of extended

302
00:20:13,070 --> 00:20:16,950
Kubernetes API. Now this enables us

303
00:20:17,022 --> 00:20:20,422
to build various things on

304
00:20:20,438 --> 00:20:23,874
top of Kubernetes, right? And here

305
00:20:24,174 --> 00:20:28,278
we've seen the entire adoption of platform engineering,

306
00:20:28,366 --> 00:20:32,554
right? It's rather easy to extend Kubernetes API,

307
00:20:32,894 --> 00:20:36,722
but this doesn't mean that you really need to do it. I mean you

308
00:20:36,738 --> 00:20:39,698
can have something that it works,

309
00:20:39,866 --> 00:20:43,834
but it lacks a proper developer

310
00:20:43,874 --> 00:20:46,970
experience or a proper use case, right? So keep

311
00:20:47,002 --> 00:20:50,578
in mind, if you want to extend Kubernetes API is rather easy

312
00:20:50,626 --> 00:20:55,054
using custom resources and custom controllers,

313
00:20:55,674 --> 00:20:59,338
think twice before doing it, right? In many

314
00:20:59,386 --> 00:21:03,490
ways, everything is an abstraction, right? So we're working with abstraction

315
00:21:03,522 --> 00:21:06,850
on daily basis, right? So when you create a custom resource

316
00:21:06,882 --> 00:21:10,090
in an operator, you create an abstraction that

317
00:21:10,122 --> 00:21:13,386
can be used in Kubernetes. As we've seen,

318
00:21:13,410 --> 00:21:16,522
Kubernetes is a platform for building platforms, right?

319
00:21:16,698 --> 00:21:20,546
It's easy to extend its API and it has

320
00:21:20,730 --> 00:21:24,850
almost of a plug and play approach with regards

321
00:21:24,882 --> 00:21:28,714
to the API. And last but not least, a very important thing.

322
00:21:28,874 --> 00:21:32,538
Kubernetes is only as good as the infrastructure it runs

323
00:21:32,586 --> 00:21:37,514
on top of, right? So keep in mind having

324
00:21:38,254 --> 00:21:42,874
multiple small nodes versus

325
00:21:43,254 --> 00:21:47,566
a few larger nodes. This is a ongoing debate and

326
00:21:47,590 --> 00:21:50,878
Kubernetes will not do any magic if the

327
00:21:50,926 --> 00:21:54,994
infrastructure under provision.

328
00:21:56,574 --> 00:21:58,874
That was it. Thank you very much.

329
00:21:59,854 --> 00:22:03,604
Don't forget, if you have any questions with regards to this presentation,

330
00:22:03,774 --> 00:22:06,744
this is my handle. Have a nice one.

331
00:22:06,824 --> 00:22:07,904
Goodbye. Thank you.

