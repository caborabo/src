1
00:00:27,160 --> 00:00:30,698
Hi everyone. Welcome to my talk about code review.

2
00:00:30,866 --> 00:00:34,346
Alternatively, best practices tips and how to not drive

3
00:00:34,370 --> 00:00:38,114
your colleagues into depression with your comments. And without further ado,

4
00:00:38,194 --> 00:00:41,706
let's get started. I'm pretty sure that most of

5
00:00:41,730 --> 00:00:45,562
you know what exactly is code review. But just to reiterate

6
00:00:45,738 --> 00:00:49,514
on what exactly we're talking about here, code review

7
00:00:49,594 --> 00:00:52,642
is just review of codes written by the colleagues.

8
00:00:52,698 --> 00:00:56,100
It's as simple as that. Other colleagues write changes

9
00:00:56,132 --> 00:00:59,780
to the code, they publish them, they suggest these changes,

10
00:00:59,852 --> 00:01:03,132
and then we comment on these changes. Or we

11
00:01:03,148 --> 00:01:06,156
just approve without comments, depending on whether we like the code or

12
00:01:06,180 --> 00:01:09,772
not. Do we even need code review actually, or why do

13
00:01:09,788 --> 00:01:13,204
we need it? Because, well, developers could be

14
00:01:13,284 --> 00:01:17,116
doing something else, right? Instead of arguing comments, checking other people's

15
00:01:17,140 --> 00:01:21,086
code, they could be already spending time on writing new features.

16
00:01:21,180 --> 00:01:25,130
So maybe we don't need it at all. Well,

17
00:01:25,162 --> 00:01:29,010
first of all, more eyes on code means more chances

18
00:01:29,082 --> 00:01:32,602
to catch potential bugs or things like privacy and security issues,

19
00:01:32,658 --> 00:01:36,450
right? It's like additional layer of testing, if you may. If we don't catch

20
00:01:36,482 --> 00:01:39,774
those on time and we actually release the code,

21
00:01:40,194 --> 00:01:43,594
it may result in potential production downtime. It may result

22
00:01:43,714 --> 00:01:47,130
in regulator problems or even ruined customer

23
00:01:47,162 --> 00:01:51,114
trust. So from this point of view, we are interested in catching bugs

24
00:01:51,234 --> 00:01:54,774
as early as possible, which means maybe during review stage.

25
00:01:55,474 --> 00:01:58,650
Alternatively, code review can also mean sharing best

26
00:01:58,682 --> 00:02:01,574
practices within the project or even the company.

27
00:02:03,754 --> 00:02:07,114
One programmer can comment on something suggests

28
00:02:07,154 --> 00:02:10,650
another approach which is used, and this ensures that

29
00:02:10,682 --> 00:02:14,394
another developer or a group of developers know the code styles.

30
00:02:14,514 --> 00:02:17,914
And this can even actually help developers progress

31
00:02:17,954 --> 00:02:21,218
professionally if they get some comments about

32
00:02:21,266 --> 00:02:23,854
an approach, for example, which they hadn't known before.

33
00:02:25,234 --> 00:02:28,530
Finally, code review can stop the

34
00:02:28,562 --> 00:02:31,282
unintended workflows. For example,

35
00:02:31,458 --> 00:02:35,490
usually one developer should not be able to push to production

36
00:02:35,602 --> 00:02:38,962
and verify changes, and code review may act as a security

37
00:02:39,058 --> 00:02:42,750
layer if someone tries to do something bad,

38
00:02:42,862 --> 00:02:45,670
intentionally or unintentionally. Hopefully,

39
00:02:45,742 --> 00:02:49,726
code review may just add a little bit more confidence

40
00:02:49,830 --> 00:02:52,714
that this will be caught early.

41
00:02:54,014 --> 00:02:57,606
So now let's talk a little bit about best practices, which I

42
00:02:57,630 --> 00:03:01,310
think are appropriate in code review. First of all,

43
00:03:01,382 --> 00:03:04,966
regarding a detailed review, if you want to really focus and you

44
00:03:04,990 --> 00:03:08,678
want to make sure that you know and you go thoroughly through authors

45
00:03:08,726 --> 00:03:12,480
changes, it may be helpful to check out the authors branch

46
00:03:12,542 --> 00:03:16,104
locally on your machine and then examine each individual file.

47
00:03:16,924 --> 00:03:20,780
I'm saying this because locally you will usually have your favorite code editor,

48
00:03:20,892 --> 00:03:24,620
which can help you identify syntax errors, and also

49
00:03:24,692 --> 00:03:28,140
you can navigate quickly between files to see the connections.

50
00:03:28,332 --> 00:03:31,892
And all of that may really help you maintain the

51
00:03:31,908 --> 00:03:35,684
context during code review. Also, sometimes, for example,

52
00:03:35,724 --> 00:03:39,236
when I need to really attentively review the code, I book a slot in my

53
00:03:39,260 --> 00:03:42,894
calendar. I put on headphones. Basically, I tried

54
00:03:42,934 --> 00:03:47,014
to ensure that there are no distractions so that I could really

55
00:03:47,134 --> 00:03:50,794
familiarize myself with the context and stay focused.

56
00:03:51,374 --> 00:03:54,814
As opposed to that, sometimes it makes sense to review just syntax

57
00:03:54,894 --> 00:03:58,430
and obvious syntax bias without getting into

58
00:03:58,462 --> 00:04:01,854
the whole business logic. I would say this is appropriate

59
00:04:01,974 --> 00:04:04,998
if you get multiple merge requests per day,

60
00:04:05,166 --> 00:04:09,180
and then you may just not have the time to actually go

61
00:04:09,212 --> 00:04:12,964
through each of the merge requests individually, checking them out

62
00:04:13,004 --> 00:04:16,356
as I discussed earlier. Just I would say

63
00:04:16,380 --> 00:04:20,024
that make sure that the author knows that you are not

64
00:04:20,724 --> 00:04:24,724
reviewing the deep logic, the business logic, but you are mostly reviewing

65
00:04:24,804 --> 00:04:29,108
all the syntax. Now one of my favorite suggestions

66
00:04:29,196 --> 00:04:33,064
is really, really adapt your comment style.

67
00:04:33,444 --> 00:04:36,750
For example, some comment like this may

68
00:04:36,782 --> 00:04:40,262
be appropriate for a more junior person, or the person who

69
00:04:40,278 --> 00:04:43,710
has been working in your project recently, or just

70
00:04:43,742 --> 00:04:47,830
a sensitive person overall, it's a very polite suggestion that hey, can yuri

71
00:04:47,862 --> 00:04:51,154
please remove this serializable term?

72
00:04:51,534 --> 00:04:54,966
And then I explain the reason why was it needed

73
00:04:55,030 --> 00:04:58,190
and then why it is not needed. So you try to be very polite,

74
00:04:58,222 --> 00:05:02,448
you give all the context and just basically make sure that person

75
00:05:02,496 --> 00:05:06,152
is on board with you and doesn't feel anything any

76
00:05:06,208 --> 00:05:09,872
bad things. However, if someone

77
00:05:09,928 --> 00:05:13,536
is more senior experienced or you just know, they will understand exactly what

78
00:05:13,560 --> 00:05:16,792
you are saying. You can just write something that's not needed and it will

79
00:05:16,808 --> 00:05:19,376
be a pointer for them that this is not needed and they will remove it.

80
00:05:19,400 --> 00:05:22,688
And maybe they already have the context, or they will ask you for the context

81
00:05:22,736 --> 00:05:26,496
if they need to. But sometimes this

82
00:05:26,520 --> 00:05:30,464
is enough. So this is up to you to understand which type of person

83
00:05:30,584 --> 00:05:34,634
or which type of style best fits in the given situation.

84
00:05:35,374 --> 00:05:38,598
Beware of emotional damage. Really,

85
00:05:38,726 --> 00:05:42,358
if you put too many comments, I understand we want to comment

86
00:05:42,406 --> 00:05:46,154
on everything. Sometimes there are so many things which can be done differently,

87
00:05:46,494 --> 00:05:49,990
but it still can be overwhelming even for very experienced developers.

88
00:05:50,062 --> 00:05:53,638
Like speaking of my experience, I have more than ten years

89
00:05:53,726 --> 00:05:57,270
and still when I receive a review with

90
00:05:57,302 --> 00:06:00,936
like, I don't know, ten comments or more, my first reaction

91
00:06:01,000 --> 00:06:04,440
is to, I don't know, to try to protect myself, to try

92
00:06:04,472 --> 00:06:06,324
to respond back and so on.

93
00:06:07,624 --> 00:06:11,472
So I would say try keeping only the most significant ones

94
00:06:11,568 --> 00:06:15,032
and maybe move the rest offline. If you

95
00:06:15,088 --> 00:06:19,096
really think that you should write more that your code

96
00:06:19,120 --> 00:06:21,444
review doesn't have enough space for all of your comments,

97
00:06:22,744 --> 00:06:26,526
because the goal is eventually to encourage positive

98
00:06:26,590 --> 00:06:30,166
approach and to be productive and

99
00:06:30,190 --> 00:06:34,190
the developer may risk in not being productive if they

100
00:06:34,222 --> 00:06:37,366
receive too many comments. So yeah, try keeping just the most significant

101
00:06:37,470 --> 00:06:41,474
ones. And if you still need to put more, just move the rest of line.

102
00:06:42,934 --> 00:06:46,286
When you like something, please write about it

103
00:06:46,310 --> 00:06:49,950
as well. We don't only need to comment on whatever needs to be changed.

104
00:06:50,062 --> 00:06:53,398
Well, mostly, yes, that's what we do. But also, it's so nice to feel a

105
00:06:53,406 --> 00:06:57,102
little bit of gratitude. Right? Like you can write very tiny comments like

106
00:06:57,198 --> 00:07:00,846
I like this or thank you, great job. And as

107
00:07:00,870 --> 00:07:05,446
you see, I get hearts for these comments. So it

108
00:07:05,470 --> 00:07:08,462
may make a developer smile, it may bring up their mood.

109
00:07:08,518 --> 00:07:12,110
And happy developer means, after all, more productive developer,

110
00:07:12,142 --> 00:07:15,246
right? And also with a happy developer, it's more pleasant

111
00:07:15,270 --> 00:07:19,030
to work and we may enjoy that more. So yeah, please try

112
00:07:19,062 --> 00:07:22,846
to not always be negative. Try to also emphasize on the good things which you

113
00:07:22,870 --> 00:07:26,580
see. Also, I would say, don't argue back and forth

114
00:07:26,612 --> 00:07:30,412
in comments. Again, it's kind of the same

115
00:07:30,468 --> 00:07:34,132
as when you leave too many comments. People tend to get protective,

116
00:07:34,228 --> 00:07:38,092
and especially because it's a public space. Culture view

117
00:07:38,108 --> 00:07:41,796
is a public space which can be usually viewed by many developers, they might get

118
00:07:41,820 --> 00:07:45,724
the feeling of being publicly attacked. Yes, ideally, if we

119
00:07:45,764 --> 00:07:49,692
were all logical machines, we just only consume the logic of

120
00:07:49,708 --> 00:07:52,954
your comment. We would never actually, I don't know, emotionally react.

121
00:07:52,994 --> 00:07:56,386
But the reality is that we are not. We are all people, we all

122
00:07:56,410 --> 00:07:59,962
have our own issues. You never know which issues are there.

123
00:08:00,018 --> 00:08:03,858
So maybe you could help preventing any triggers by

124
00:08:03,946 --> 00:08:07,254
just following these tips. Like for example,

125
00:08:07,914 --> 00:08:11,282
it doesn't make sense to argue back and forth. If he wrote a comment

126
00:08:11,338 --> 00:08:15,170
and then developer replies and doesn't agree, and then you write back

127
00:08:15,202 --> 00:08:18,354
and then developer writes back, it eventually becomes a battle of egos,

128
00:08:18,394 --> 00:08:21,054
like whose comment is going to be the last? Who is going to win?

129
00:08:21,614 --> 00:08:25,526
I would say if that's not the goal, if the goal is to actually resolve

130
00:08:25,550 --> 00:08:28,510
the issue, just move the conversation offline.

131
00:08:28,702 --> 00:08:31,894
If you see that the developer doesn't agree. Okay,

132
00:08:31,934 --> 00:08:35,334
what is your goal here? Do you still want to push for that?

133
00:08:35,414 --> 00:08:39,022
If yes, sure. Maybe culture view is not the best

134
00:08:39,118 --> 00:08:42,494
place anymore to push for it. Maybe you just

135
00:08:42,534 --> 00:08:46,334
moved to slack channel or moved to oral conversation

136
00:08:46,414 --> 00:08:48,794
or jaspeak any other way of talking.

137
00:08:50,814 --> 00:08:54,486
Just one thing to add here. I would say that if you do this and

138
00:08:54,510 --> 00:08:57,806
eventually they should get resolved offline in the Koji

139
00:08:57,830 --> 00:09:01,774
view, you could make a comment that something like discussed offline or resolved

140
00:09:01,814 --> 00:09:05,230
offline so that if other developers come

141
00:09:05,262 --> 00:09:09,054
back there and they see that you had kind of disagreement

142
00:09:09,134 --> 00:09:12,574
and they don't know what was the result. At least they could

143
00:09:12,614 --> 00:09:16,262
see that hey, it was discussed applying, so if they really are interested

144
00:09:16,398 --> 00:09:20,586
in knowing whatever happens in the end they can actually find you

145
00:09:20,690 --> 00:09:24,546
and ask you what was the outcome. And that is

146
00:09:24,570 --> 00:09:28,138
all for me. Thank you very much for attending this lightning

147
00:09:28,186 --> 00:09:31,770
talk. I really appreciate this. I wish you all

148
00:09:31,882 --> 00:09:35,174
very happy coding, very nice review comments

149
00:09:35,594 --> 00:09:39,122
and yeah, just wishing you to

150
00:09:39,138 --> 00:09:42,234
be very relaxed and productive during your work days.

