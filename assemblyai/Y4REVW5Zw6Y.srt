1
00:00:23,850 --> 00:00:27,414
Thanks for joining my talk implementing chaos engineering and

2
00:00:27,452 --> 00:00:31,046
a riskaverse culture. My name is Kyle Shelton and

3
00:00:31,068 --> 00:00:34,790
I'm a senior DevOps consultant for Toyota Racing development.

4
00:00:35,130 --> 00:00:38,674
A little bit about myself. I have a beautiful wife and three girls.

5
00:00:38,802 --> 00:00:42,406
I'm an avid outdoorsman. I love to be outside, love to

6
00:00:42,428 --> 00:00:46,006
fish, love to hunt, love to hike. I also train for

7
00:00:46,028 --> 00:00:49,590
triathlons and do triathlons recreationally.

8
00:00:50,210 --> 00:00:53,374
I'm an avid outdoors. I'm an avid outdoorsman, but I'm also

9
00:00:53,412 --> 00:00:57,034
an avid I racing and simulation fan. I love racing

10
00:00:57,082 --> 00:01:00,494
simulators. I just built a new pc recently and been doing

11
00:01:00,532 --> 00:01:03,854
a lot of I racing. I also enjoy flight simulators and farming

12
00:01:03,902 --> 00:01:07,426
simulators, and one of my other hobbies is writing and I

13
00:01:07,448 --> 00:01:11,234
have a blog, chaoskyle.com, to where I talk about platform

14
00:01:11,352 --> 00:01:14,706
engineering, DevOps, SRE, mental health,

15
00:01:14,888 --> 00:01:18,440
and things of that nature. So if you're interested in that, check it out.

16
00:01:18,810 --> 00:01:22,674
In today's talk, I'm going to talk about the evolution of distributed

17
00:01:22,722 --> 00:01:26,354
systems and what apps look like today versus

18
00:01:26,402 --> 00:01:30,234
what they look like 1015 years ago. I'm going to kind of go

19
00:01:30,272 --> 00:01:33,674
over the principles of chaos engineering and how to

20
00:01:33,712 --> 00:01:37,174
deal with that conservative mindset. A lot of places

21
00:01:37,222 --> 00:01:41,054
you might work at maybe will laugh at

22
00:01:41,092 --> 00:01:44,826
you if you ask to break things. So I'm

23
00:01:44,858 --> 00:01:48,510
going to kind of go over what that mindset looks like

24
00:01:48,580 --> 00:01:52,874
and how to sell newer technologies

25
00:01:53,002 --> 00:01:56,274
and practices like chaos engineering. Also talk

26
00:01:56,312 --> 00:01:59,906
about the art of persuasion and gaining buy in. And then

27
00:01:59,928 --> 00:02:04,786
I have a case study from my days as an SRE at Splunk that

28
00:02:04,808 --> 00:02:08,854
you can use as a reference point on how to ask for

29
00:02:08,972 --> 00:02:13,298
money to do a lot of tests. And then we'll close out with tools

30
00:02:13,314 --> 00:02:16,200
and resources, and then I'll get into Q A.

31
00:02:17,630 --> 00:02:21,114
So let's start about talking about the

32
00:02:21,152 --> 00:02:24,858
evolution of systems architecture. When I first got started in

33
00:02:24,864 --> 00:02:28,730
my career, I was working for Verizon and we were deploying

34
00:02:29,710 --> 00:02:32,814
VoLTE, which is voiceover. LTE was the

35
00:02:32,852 --> 00:02:36,442
world's second nation's first IP

36
00:02:36,506 --> 00:02:39,902
based voice network, and our deployments looked

37
00:02:39,956 --> 00:02:43,860
like this. We would schedule each,

38
00:02:44,390 --> 00:02:48,126
we call them network equipment centers, data centers,

39
00:02:48,158 --> 00:02:51,662
and we had our core data centers all throughout the country, New Jersey,

40
00:02:51,726 --> 00:02:55,602
California, Dallas, Colorado. And we would schedule six week deployments

41
00:02:55,666 --> 00:02:58,694
to where we would spend four weeks on site,

42
00:02:58,892 --> 00:03:03,414
racking and stacking the servers, getting everything put together,

43
00:03:03,612 --> 00:03:07,650
installing the overcoming system, installing all of the

44
00:03:07,740 --> 00:03:12,070
application software, or as we call them, guest systems,

45
00:03:12,150 --> 00:03:16,060
and then bringing these platforms onto the network and

46
00:03:16,910 --> 00:03:20,358
eventually get subscribers making phone calls

47
00:03:20,374 --> 00:03:23,774
through them. And the process was long and we

48
00:03:23,812 --> 00:03:26,926
had to build out our capacity kind of

49
00:03:26,948 --> 00:03:30,782
in that 40 40 model to where we would only build out to 40%

50
00:03:30,836 --> 00:03:34,126
of our capacity. So that if we ever had to fail over from one

51
00:03:34,148 --> 00:03:38,514
of our, everything was ha, obviously too. So we always had two

52
00:03:38,552 --> 00:03:42,034
things of everything. And so if we ever had to fail over from one

53
00:03:42,072 --> 00:03:45,314
side to the other, that it would never be at 100%, it would only be

54
00:03:45,352 --> 00:03:49,074
at 80%. So there's a lot of overhead, a lot of costs.

55
00:03:49,202 --> 00:03:52,946
We were really good about knowing what type of traffic

56
00:03:52,978 --> 00:03:56,902
we would have. But this was early iPhone days,

57
00:03:56,956 --> 00:04:00,486
so iPhone releases could really mean a huge spike

58
00:04:00,518 --> 00:04:03,754
in traffic, and there's a lot that

59
00:04:03,792 --> 00:04:07,206
went to it. And now if you're deploying

60
00:04:07,238 --> 00:04:11,158
an app with the cloud native revolution in

61
00:04:11,184 --> 00:04:14,158
order to get an mvp into your customers hands,

62
00:04:14,244 --> 00:04:16,846
you can do that within 45 minutes,

63
00:04:16,948 --> 00:04:19,680
basically for simple base cuts. Obviously,

64
00:04:20,290 --> 00:04:24,194
you're not going to deploy a complicated rails app

65
00:04:24,312 --> 00:04:27,714
platform in 45 minutes, but you

66
00:04:27,752 --> 00:04:31,726
have the tools available, using public clouds

67
00:04:31,758 --> 00:04:35,154
or private clouds or whatever, to deploy virtualized systems with

68
00:04:35,192 --> 00:04:38,886
all their dependencies quickly. And so with

69
00:04:39,068 --> 00:04:42,566
the new way of doing things and the new way

70
00:04:42,588 --> 00:04:45,974
of being able to deploy things fastly, being able

71
00:04:46,012 --> 00:04:49,334
to scale and have elasticity. So you only pay for what you

72
00:04:49,372 --> 00:04:53,558
use, right? If you've ever heard one of the AWS pitches,

73
00:04:53,654 --> 00:04:56,906
the big thing is they had all that extra capacity and

74
00:04:56,928 --> 00:05:00,686
they started selling. And so you pay for what you use in

75
00:05:00,708 --> 00:05:04,174
these scenarios, like these new technologies. And this new way

76
00:05:04,212 --> 00:05:08,154
of doing things brings a lot more aspects

77
00:05:08,202 --> 00:05:11,760
of failure and a lot more things that can go wrong

78
00:05:12,710 --> 00:05:16,194
based on abstractions and dependencies into

79
00:05:16,232 --> 00:05:20,526
the system. And so understanding your tailored

80
00:05:20,638 --> 00:05:24,274
understanding what happens when

81
00:05:24,312 --> 00:05:27,826
things break is crucial for modern day applications.

82
00:05:28,018 --> 00:05:31,526
As Warner Vogel said, everything fails all the

83
00:05:31,548 --> 00:05:34,662
time, and you have to be prepared for that. And another thing,

84
00:05:34,716 --> 00:05:38,706
too, is you are abstracting some of the physical

85
00:05:38,898 --> 00:05:42,490
responsibilities through the shared responsibility model. So something

86
00:05:42,560 --> 00:05:46,822
can happen on a data center that you don't own that could affect your resilience.

87
00:05:46,886 --> 00:05:50,586
And so that's another thing that you have to be prepared for. And so

88
00:05:50,688 --> 00:05:54,714
those are some of the challenges of our modern day systems. And that's

89
00:05:54,762 --> 00:05:58,640
why chaos engineering kind of came about.

90
00:06:00,610 --> 00:06:04,720
When I think about what is chaos engineering in my mind,

91
00:06:06,470 --> 00:06:10,066
you define your steady state first. If you are at a

92
00:06:10,088 --> 00:06:13,826
point to where you don't really know what a good day looks like, I would

93
00:06:13,848 --> 00:06:17,494
first figure that out. Get to your steady state. Get to

94
00:06:17,532 --> 00:06:21,430
where you're knowing that your failure rate or your four

95
00:06:21,500 --> 00:06:25,142
five x error count or whatever is at x, whatever a good day

96
00:06:25,196 --> 00:06:29,066
looks like, for your distributed system, that's what's defined as

97
00:06:29,088 --> 00:06:33,750
steady state. So once you have that, then you can start to build hypotheses

98
00:06:33,910 --> 00:06:37,210
around disrupting that steady state.

99
00:06:37,280 --> 00:06:40,830
So you create a control group and an experiment group, and you say, okay,

100
00:06:40,900 --> 00:06:44,814
if I unplug x wire, y will turn

101
00:06:44,852 --> 00:06:47,962
off, right? That's just a basic example of hypothesis,

102
00:06:48,026 --> 00:06:51,358
but that's what it is. If I do something,

103
00:06:51,444 --> 00:06:55,726
x will happen. And then once you have that hypothesis written

104
00:06:55,758 --> 00:06:59,090
down or put down in notes or whatever,

105
00:06:59,160 --> 00:07:03,586
you use the document. That's when you come in and you introduce chaos in

106
00:07:03,608 --> 00:07:06,946
a controlled manner. That's when you come in and you go unplug the cable or

107
00:07:06,968 --> 00:07:11,062
you go pour water on your keyboard to see what happens. And after

108
00:07:11,116 --> 00:07:14,870
you do that, this is a key point, then you're going to observe what happens,

109
00:07:15,020 --> 00:07:18,454
and you're going to look at both groups and then evaluate your hypothesis.

110
00:07:18,502 --> 00:07:22,154
And another mistake that I've seen people made is that they want to get into

111
00:07:22,192 --> 00:07:26,326
chaos engineering without having a good observability

112
00:07:26,438 --> 00:07:30,230
foundation. And if you can't put metrics

113
00:07:30,390 --> 00:07:34,080
on your system, and you don't know how to

114
00:07:35,250 --> 00:07:38,926
put a value or put a score on your system, then you're probably not

115
00:07:38,948 --> 00:07:42,666
going to be very successful with chaos engineering. So I would also focus on

116
00:07:42,708 --> 00:07:46,740
that first, defining your steady state and being able

117
00:07:47,110 --> 00:07:50,658
to observe that steady state is something that you have to. That's one

118
00:07:50,664 --> 00:07:52,930
of the prerequisites for chaos engineering.

119
00:07:55,110 --> 00:07:58,594
There's a website, really cool website, that helpful folks

120
00:07:58,642 --> 00:08:01,890
at Netflix put out called principlesofchaos.org.

121
00:08:02,050 --> 00:08:05,526
And this kind of goes into detail as the principles of

122
00:08:05,548 --> 00:08:09,382
chaos engineering. What was their north star when

123
00:08:09,516 --> 00:08:13,494
know created this type

124
00:08:13,532 --> 00:08:16,278
of engineering? The big thing,

125
00:08:16,284 --> 00:08:19,706
know, you build your hypothesis around the steady state, like I talked about

126
00:08:19,728 --> 00:08:23,966
it, and you're going to want to vary real world events. So if

127
00:08:23,988 --> 00:08:27,806
you search AWS service events or Google service events, they'll give

128
00:08:27,828 --> 00:08:31,310
you a long list of the things that have happened from

129
00:08:31,380 --> 00:08:34,974
the big s three dying outage, way back in the days of December

130
00:08:35,022 --> 00:08:39,010
7, you can see what

131
00:08:39,080 --> 00:08:42,274
has actually happened in the cloud. So, you know, like,

132
00:08:42,312 --> 00:08:46,022
okay, at minimum, this could happen because it's happened

133
00:08:46,076 --> 00:08:49,286
before. You're never going to ever be able to plan for the

134
00:08:49,308 --> 00:08:52,694
unknown, obviously, but those are their

135
00:08:52,732 --> 00:08:56,566
biggest events. Your provider has start there and

136
00:08:56,588 --> 00:09:00,886
work backwards. Use those published

137
00:09:00,918 --> 00:09:04,794
events as a starting point for what to

138
00:09:04,832 --> 00:09:08,314
test on. Run your experiments in prod. You want to get

139
00:09:08,352 --> 00:09:12,250
to where you're running continuous experiments in prod randomly,

140
00:09:12,330 --> 00:09:16,154
automatically, without it having an impact

141
00:09:16,202 --> 00:09:17,120
to your customers.

142
00:09:19,650 --> 00:09:24,062
We have automation pipelines, and we have jobs

143
00:09:24,206 --> 00:09:28,094
that can run and spark within unit tests

144
00:09:28,142 --> 00:09:32,226
for failure. There's also ways to just let

145
00:09:32,248 --> 00:09:35,698
it go in the wild and just when it runs, it runs. There's a

146
00:09:35,704 --> 00:09:38,926
lot of ways you can do this, but keep it automated. Don't have someone sitting

147
00:09:38,958 --> 00:09:42,438
there that has a go and pull the plug and make sure that

148
00:09:42,524 --> 00:09:46,006
it's automated and that you can run it continuously. And the last

149
00:09:46,028 --> 00:09:48,730
thing is you're going to want to minimize blast radius.

150
00:09:49,870 --> 00:09:53,302
You don't want your eyes to bring down production.

151
00:09:53,366 --> 00:09:56,966
You don't want your monitoring and your testing tools

152
00:09:56,998 --> 00:10:00,634
to cause large scale events. So isolate your

153
00:10:00,672 --> 00:10:04,238
test. I'll talk about this when we're talking about buy in, but start

154
00:10:04,324 --> 00:10:07,040
small. Don't go in trying to just,

155
00:10:07,490 --> 00:10:10,430
all right, we want to fail over one region.

156
00:10:10,930 --> 00:10:14,594
And don't go in with the mindset that you're going to

157
00:10:14,632 --> 00:10:17,986
break everything all at once, all the time. Minimize your

158
00:10:18,008 --> 00:10:21,234
blast radius, keep it small and work from there.

159
00:10:21,272 --> 00:10:24,434
Iterate off the small wins so that

160
00:10:24,472 --> 00:10:28,514
you can get confidence from your leadership to get bigger

161
00:10:28,562 --> 00:10:32,520
failures and have bigger events. Do red team events, settings like that.

162
00:10:32,890 --> 00:10:35,394
Let's get into the conservative mindset.

163
00:10:35,522 --> 00:10:39,420
And we've all worked with those leaders or those

164
00:10:40,670 --> 00:10:43,882
managers or principal engineers who have

165
00:10:43,936 --> 00:10:47,626
that very conservative mindset of, oh, we don't want to do

166
00:10:47,648 --> 00:10:50,874
the new stuff yet, or, oh, we don't want to

167
00:10:50,912 --> 00:10:54,654
bring failure in. I thought our goal was to keep the app up

168
00:10:54,692 --> 00:10:58,110
as much as possible. Why would we want to come and start breaking things?

169
00:10:58,180 --> 00:11:02,014
And one of the key things that I've seen when

170
00:11:02,052 --> 00:11:06,526
working with these types of leaders and individuals is it's

171
00:11:06,558 --> 00:11:09,950
a riskaverse bottom line first type of mentality.

172
00:11:10,030 --> 00:11:14,014
And I think, I'm not trying to downplay

173
00:11:14,062 --> 00:11:18,502
the bottom line. Right. I understand business. I understand that sales

174
00:11:18,636 --> 00:11:22,726
generate the revenue which keep everybody employed, and that the

175
00:11:22,748 --> 00:11:26,114
bottom line is very important. I want to stress

176
00:11:26,162 --> 00:11:29,402
that right now. But I also know

177
00:11:29,456 --> 00:11:33,434
that sometimes you have to make investments and you have to make investments in

178
00:11:33,472 --> 00:11:36,262
time engineering, time tools, systems,

179
00:11:36,326 --> 00:11:39,926
platforms, et cetera. Initially that you might

180
00:11:39,968 --> 00:11:43,950
not see return on short term, but their long term

181
00:11:44,370 --> 00:11:49,054
returns are substantial. So be

182
00:11:49,092 --> 00:11:53,220
on the lookout for that type of behavior and understand,

183
00:11:53,670 --> 00:11:57,220
hey, everything does get basically

184
00:11:58,230 --> 00:12:01,746
falls and delves around the bottom line.

185
00:12:01,928 --> 00:12:05,474
But if you notice that leadership has

186
00:12:05,512 --> 00:12:09,046
that bottom line first, well, we can't fail because

187
00:12:09,148 --> 00:12:12,854
it's going to cost us money. Well, if you don't understand your

188
00:12:12,892 --> 00:12:17,694
tailored, it's going to cost you a lot more money. And so recognize

189
00:12:17,762 --> 00:12:22,086
that. Recognize that mindset and be able to counterarguments

190
00:12:22,118 --> 00:12:25,900
when you're going to sell your case another

191
00:12:27,630 --> 00:12:31,386
environment. I think my early days at Splunk,

192
00:12:31,418 --> 00:12:35,040
it was like this to where we had a knock transition. And so

193
00:12:36,050 --> 00:12:40,174
we were transitioning from an overseas knock to building out an

194
00:12:40,212 --> 00:12:43,390
internal team. And during that transition,

195
00:12:44,210 --> 00:12:47,746
we got paged frequently. There was a lot of outages, there was

196
00:12:47,768 --> 00:12:51,186
a lot of things that were going on, and it

197
00:12:51,208 --> 00:12:54,754
sucked. I'm not going to lie, it sucked. Getting paged at

198
00:12:54,792 --> 00:12:59,030
02:00 a.m. Every other night or constantly fighting fires.

199
00:12:59,770 --> 00:13:02,594
There was a lot of fatigue. And you can tell with some of the older

200
00:13:02,642 --> 00:13:06,562
engineers that fatigue. And that was the whole basis of us bringing

201
00:13:06,706 --> 00:13:09,946
that knock back in house because we weren't getting the support from our

202
00:13:09,968 --> 00:13:13,114
overseas team and we needed to get

203
00:13:13,152 --> 00:13:17,462
better. So notice that PTSD,

204
00:13:17,526 --> 00:13:21,114
if you're coming in and everybody's just kind of worn out from getting

205
00:13:21,152 --> 00:13:24,494
paged all the time, that's something to look out for.

206
00:13:24,532 --> 00:13:27,854
And then the third thing that I've noticed in these

207
00:13:27,892 --> 00:13:31,902
conservative mindsets is slow. Everything moves slow. It takes

208
00:13:31,956 --> 00:13:35,294
two weeks to get your change in front of a change board. Then it takes

209
00:13:35,332 --> 00:13:39,570
another two weeks to get a maintenance window approved, and then you got

210
00:13:39,720 --> 00:13:43,394
six weeks in. You're going to run your three lines of code, and if it

211
00:13:43,432 --> 00:13:47,366
breaks, then you have to wait another six weeks to get things in.

212
00:13:47,548 --> 00:13:50,946
And not being able to move releases

213
00:13:51,058 --> 00:13:54,226
fast and not being able to push your code fast. And that's

214
00:13:54,258 --> 00:13:58,326
normally due to that conservative mindset that there's a lot of reasons

215
00:13:58,438 --> 00:14:02,714
that could be there, but it's slow and

216
00:14:02,912 --> 00:14:06,998
nobody likes going slow. I personally hate going slow,

217
00:14:07,174 --> 00:14:10,366
but slow is steady sometimes. And that might

218
00:14:10,388 --> 00:14:14,014
be what works best for that team at that

219
00:14:14,052 --> 00:14:16,880
moment. And your job is to speed things up.

220
00:14:17,650 --> 00:14:21,930
That's what to look out for when you're

221
00:14:22,090 --> 00:14:25,486
finding that you think you might be in that conservative mindset

222
00:14:25,518 --> 00:14:29,614
or conservative environment. Now let's talk about settings,

223
00:14:29,662 --> 00:14:33,246
chaos, engineering. And if there's a skill set that I'm

224
00:14:33,278 --> 00:14:36,374
constantly trying to grow, it's my sales skill set.

225
00:14:36,492 --> 00:14:41,414
I don't work in sales. Right. But there

226
00:14:41,452 --> 00:14:44,706
are situations to where you have to sell something, whether it's

227
00:14:44,738 --> 00:14:48,074
yourself for a job interview, whether it's a tool that you want,

228
00:14:48,112 --> 00:14:51,606
because it's the next best thing, big monitoring

229
00:14:51,638 --> 00:14:55,130
tool or something, or whether it's just you want money

230
00:14:55,200 --> 00:14:59,034
for a soccer team. I had to ask an

231
00:14:59,072 --> 00:15:02,254
executive for a couple of

232
00:15:02,292 --> 00:15:06,126
start a soccer team for our office. And one

233
00:15:06,148 --> 00:15:10,330
of the things I mentioned was that support sales and Sre

234
00:15:10,490 --> 00:15:13,638
just don't get along. We all operate in our own little pods.

235
00:15:13,674 --> 00:15:16,750
There's not a lot of communication and camaraderie.

236
00:15:16,830 --> 00:15:20,674
And so I was like, hey, if we had a soccer team and

237
00:15:20,872 --> 00:15:24,562
we could get groups of all of these

238
00:15:24,616 --> 00:15:28,470
environments together on one mission to

239
00:15:28,620 --> 00:15:31,794
go have some fun, it'll help with the bonding

240
00:15:31,842 --> 00:15:35,894
and the office morale, and it'll help us work better together. And it

241
00:15:35,932 --> 00:15:39,050
worked, and I got the money and sure, shit,

242
00:15:39,790 --> 00:15:43,274
it really helped the teams get along better, and the teams work

243
00:15:43,312 --> 00:15:47,578
together better because there's that just

244
00:15:47,664 --> 00:15:51,434
team. When you're on a soccer team, you're all trying to

245
00:15:51,472 --> 00:15:54,262
beat. We were trying to play the other tech companies in Dallas,

246
00:15:54,326 --> 00:15:57,310
and there's a little bit of pride, and then we don't want to lose.

247
00:15:57,890 --> 00:16:01,358
Yeah, it was fun. I got to be friends with folks I would

248
00:16:01,364 --> 00:16:04,706
have never been friends with because I didn't work with, and I actually met my

249
00:16:04,728 --> 00:16:08,722
wife through that, too. And so being able

250
00:16:08,776 --> 00:16:12,802
to sell is very important. Now, how do we sell

251
00:16:12,936 --> 00:16:16,610
chaos engineering? I think one of the biggest

252
00:16:16,690 --> 00:16:19,718
things that whenever I've asked for

253
00:16:19,884 --> 00:16:23,510
a new technology or something new from a leader,

254
00:16:24,490 --> 00:16:27,646
one of the things I've been asked is total cost ownership

255
00:16:27,698 --> 00:16:31,462
and how to put short term investments

256
00:16:31,526 --> 00:16:34,902
into long term returns.

257
00:16:34,966 --> 00:16:39,274
Right. Let's say I

258
00:16:39,312 --> 00:16:42,542
want this tool that's going to cost us $100,000

259
00:16:42,596 --> 00:16:46,590
a year. Okay, well, what value

260
00:16:46,740 --> 00:16:49,486
are you going to get from that $100,000?

261
00:16:49,588 --> 00:16:52,746
How do I explain? Okay, well, this tool helps

262
00:16:52,778 --> 00:16:55,890
me see things before the customers do.

263
00:16:56,040 --> 00:16:59,666
It helps me fix things before they break and page out

264
00:16:59,768 --> 00:17:03,550
our on call overnight. So our engineers get more sleep,

265
00:17:03,710 --> 00:17:07,186
so they come in and they're not having to flex their schedule because they were

266
00:17:07,208 --> 00:17:11,494
paged the night before. So there's not going to be that fallback on

267
00:17:11,692 --> 00:17:15,366
productivity from that standpoint. And we

268
00:17:15,388 --> 00:17:18,566
can start to create automation so that we get

269
00:17:18,588 --> 00:17:22,506
to the point to where the system is just healing itself. And so how

270
00:17:22,528 --> 00:17:26,202
do you put a number on that? Well, you define total

271
00:17:26,256 --> 00:17:30,010
cost ownership and define that, hey, we might be saving

272
00:17:30,080 --> 00:17:33,786
money by going open source and hosting things ourselves

273
00:17:33,978 --> 00:17:37,342
on the initial software spend, but if we look at the spend

274
00:17:37,396 --> 00:17:41,518
overall from our sres and architects and developers and everybody

275
00:17:41,604 --> 00:17:44,882
that has to put more of their time into

276
00:17:45,016 --> 00:17:49,138
that platform, okay, that $100,000

277
00:17:49,224 --> 00:17:53,198
investment of the managed

278
00:17:53,294 --> 00:17:57,966
tool is going to be less than the $400,000

279
00:17:58,008 --> 00:18:02,342
you're spending on engineering time. So, understanding total

280
00:18:02,396 --> 00:18:06,162
cost ownership, understanding how to explain total cost ownership

281
00:18:06,226 --> 00:18:10,300
has been the biggest way I've been able to sell things

282
00:18:11,310 --> 00:18:14,762
to ask more money, sell a tool or

283
00:18:14,816 --> 00:18:18,682
sell a system or something like that.

284
00:18:18,736 --> 00:18:22,334
So, understanding your total cost ownership and

285
00:18:22,372 --> 00:18:26,270
understanding how to explain total cost ownership is crucial.

286
00:18:27,330 --> 00:18:29,870
Being able to put a number on reliability.

287
00:18:30,690 --> 00:18:34,322
Happy customers equals happy engineers, which equals happy

288
00:18:34,376 --> 00:18:37,794
bosses, which makes everybody happy.

289
00:18:37,912 --> 00:18:39,410
The cost of fragility,

290
00:18:41,430 --> 00:18:44,926
it can break your company, especially if you're

291
00:18:44,958 --> 00:18:48,120
a web SaaS or you provide a service over the web.

292
00:18:48,490 --> 00:18:52,294
People paying customers expect you to deliver on your part. And if

293
00:18:52,332 --> 00:18:55,734
you are not able to, because your systems are not up and

294
00:18:55,772 --> 00:18:58,890
you're not able to fulfill your service

295
00:18:58,960 --> 00:19:02,774
level agreements, it costs you money, it costs engineering

296
00:19:02,822 --> 00:19:05,514
talent, and it could cost your business.

297
00:19:05,632 --> 00:19:09,354
So having those points and

298
00:19:09,392 --> 00:19:13,278
understanding how to talk about those points is key

299
00:19:13,364 --> 00:19:17,150
in settings chaos engineering. So now

300
00:19:17,300 --> 00:19:20,846
we understand what we have to do. How do we do it? Well,

301
00:19:21,028 --> 00:19:24,794
I'll start at the top. The benefit and cost analysis

302
00:19:24,842 --> 00:19:28,340
of total cost ownership is, where are you going to start?

303
00:19:29,110 --> 00:19:32,686
Define that. Get all your data, all your charts and graphs.

304
00:19:32,718 --> 00:19:35,658
I had an old vp who used to say charts and graphs, or it didn't

305
00:19:35,694 --> 00:19:39,126
happen. I even made stickers. And working at

306
00:19:39,148 --> 00:19:42,278
a software observability company kind of makes sense, right?

307
00:19:42,444 --> 00:19:46,006
But it's true, right? Be able to prove your points,

308
00:19:46,188 --> 00:19:49,370
do your homework, bring your case files,

309
00:19:49,870 --> 00:19:54,442
act like a lawyer does when they're trying to persuade a jury their

310
00:19:54,496 --> 00:19:58,090
case, and have all of your detailed documents, notes.

311
00:19:58,750 --> 00:20:01,660
Do surveys with your developers. If you're trying,

312
00:20:02,610 --> 00:20:05,950
do the things that you need to do to make the sale.

313
00:20:06,850 --> 00:20:10,506
Another way to gain buy in is just ask for small pilot programs

314
00:20:10,538 --> 00:20:14,402
like ask for a small. Just, hey, I want to try this

315
00:20:14,456 --> 00:20:18,258
new way of doing things in our test

316
00:20:18,344 --> 00:20:22,354
sandbox environment. Is that okay? Start with a win.

317
00:20:22,472 --> 00:20:24,260
Iterate on that win,

318
00:20:24,890 --> 00:20:28,754
demonstrate that success early, and demonstrate

319
00:20:28,802 --> 00:20:32,194
that you can control the blast radius

320
00:20:32,242 --> 00:20:35,714
and can control the failure. And demonstrate

321
00:20:35,762 --> 00:20:39,226
the ability to say, oh, okay, well, I'm doing this in a

322
00:20:39,248 --> 00:20:42,490
scientific manner to gather more data

323
00:20:42,560 --> 00:20:44,300
to make our system better.

324
00:20:45,710 --> 00:20:48,842
Be able to clearly articulate those

325
00:20:48,896 --> 00:20:52,334
things and speak their language. Right. If you're having to

326
00:20:52,372 --> 00:20:55,870
sell this to a higher exec that's a business leader,

327
00:20:57,010 --> 00:21:00,366
maybe lean less on the technical jargon and more on

328
00:21:00,388 --> 00:21:04,366
the business value jargon. Or if you're having to do this to your CTO and

329
00:21:04,388 --> 00:21:06,946
he's going to want to know, okay, what types of failures are you going to

330
00:21:06,968 --> 00:21:09,874
bring? Are you going to do latency? How is this going to affect us long

331
00:21:09,912 --> 00:21:13,362
term? Are you going to have the ability to completely break

332
00:21:13,416 --> 00:21:16,618
everything and not have it be recovered?

333
00:21:16,654 --> 00:21:20,246
What's your backout plan things of that nature. Speak the language of

334
00:21:20,268 --> 00:21:23,160
the leader that you are pitching to,

335
00:21:23,530 --> 00:21:26,390
and then the last thing is just iterate and approve.

336
00:21:27,050 --> 00:21:30,220
Iteration is the key to this.

337
00:21:30,590 --> 00:21:33,914
Being a DevOps engineer, we build pipelines, and I get

338
00:21:33,952 --> 00:21:37,738
really excited when I get new errors because new errors mean

339
00:21:37,824 --> 00:21:40,970
new improvement. So iterate,

340
00:21:41,050 --> 00:21:44,894
improve, take baby steps, don't do

341
00:21:45,092 --> 00:21:48,814
big things all at once. Start small and work up to

342
00:21:48,852 --> 00:21:52,750
the larger events and the larger scenarios. Don't just go off

343
00:21:52,820 --> 00:21:56,370
blasting right away. It's hard to get.

344
00:21:56,440 --> 00:22:00,194
Like I said, this is one of the hardest things to ask for, because you

345
00:22:00,232 --> 00:22:04,174
are literally asking to break things, but you're

346
00:22:04,222 --> 00:22:08,054
asking to break things to make them better. So be

347
00:22:08,092 --> 00:22:10,440
sure to include that last part.

348
00:22:10,810 --> 00:22:14,198
Now, how do you

349
00:22:14,204 --> 00:22:17,674
go about doing this? So I want to talk about a time where I was

350
00:22:17,712 --> 00:22:20,890
at splunk and we were going through

351
00:22:20,960 --> 00:22:24,394
a very large migration. We were basically going from the

352
00:22:24,432 --> 00:22:28,090
transition of ansible and chef to

353
00:22:28,160 --> 00:22:32,906
puppet and terraform. And so we were rebuilding

354
00:22:32,938 --> 00:22:37,022
our whole provisioning system. And in that migration, we were also

355
00:22:37,076 --> 00:22:40,974
moving to the graviton instances and moving from our d series to our

356
00:22:41,012 --> 00:22:44,078
I series. And so we had to

357
00:22:44,244 --> 00:22:47,890
basically move our whole fleet, 15,000 instances.

358
00:22:49,190 --> 00:22:52,178
I think we did it in like eight and a half months. It was a

359
00:22:52,184 --> 00:22:55,878
crazy big project, and I was tasked with the largest customer,

360
00:22:55,964 --> 00:22:59,526
the biggest, most snowflaked customer we had, with all

361
00:22:59,548 --> 00:23:03,366
the custom configurations. They had

362
00:23:03,548 --> 00:23:06,966
a lot of things that most customers did not because they were the

363
00:23:06,988 --> 00:23:10,986
first customer to give us a million dollars. So they

364
00:23:11,008 --> 00:23:14,358
got what they want, right. And it was imperative

365
00:23:14,454 --> 00:23:18,220
that that migration went absolutely perfect.

366
00:23:18,750 --> 00:23:21,806
Half of their stack was already moving off their security side was

367
00:23:21,828 --> 00:23:26,334
already moving off of our managed team. So if

368
00:23:26,372 --> 00:23:29,966
we failed on this, we could have lost a lot

369
00:23:29,988 --> 00:23:34,370
of revenue. And so our chief cloud officer was

370
00:23:34,440 --> 00:23:38,034
very interested in making this a success. And so I

371
00:23:38,072 --> 00:23:41,666
had to basically ask for $5 million to make

372
00:23:41,688 --> 00:23:45,694
sure it was a success. I asked to duplicate

373
00:23:45,742 --> 00:23:49,462
their environment in another environment so that I could fully test

374
00:23:49,516 --> 00:23:52,934
and fully break things and see how I would recover if I did break things

375
00:23:52,972 --> 00:23:56,614
during the migration and have my backout plan ready

376
00:23:56,652 --> 00:24:00,882
to a T. So I asked, I put all the necessary

377
00:24:00,946 --> 00:24:04,202
data in front of him, told him it's going to take me three months.

378
00:24:04,336 --> 00:24:07,482
This is our plan. We're going to replicate four petabytes of data.

379
00:24:07,616 --> 00:24:11,006
We're going to execute the migration probably two or

380
00:24:11,028 --> 00:24:14,858
three times. And then once we get that migration executed,

381
00:24:15,034 --> 00:24:18,622
we're going to document everything that we think

382
00:24:18,676 --> 00:24:22,410
will happen, and then everything that happened during that migration,

383
00:24:22,490 --> 00:24:25,486
because when you're dealing with big data systems,

384
00:24:25,518 --> 00:24:28,626
it's very difficult to predict things that are going to

385
00:24:28,648 --> 00:24:32,878
happen, especially in the cloud. So I did that. I did all the settings,

386
00:24:33,054 --> 00:24:36,962
ended up executing the migration flawlessly

387
00:24:37,026 --> 00:24:40,902
right through chaos engineering because I was

388
00:24:40,956 --> 00:24:44,726
asking to test and asking to break things on purpose in

389
00:24:44,748 --> 00:24:47,720
a controlled environment that would not impact the customer.

390
00:24:48,270 --> 00:24:52,890
And that investment of $5 million ended up turning

391
00:24:53,310 --> 00:24:57,610
a ten x margin because now we're using graviton

392
00:24:59,310 --> 00:25:03,214
instead of 400 D 424

393
00:25:03,252 --> 00:25:06,666
xl instances. We're now only using 80 I series.

394
00:25:06,698 --> 00:25:10,160
So we got better performance, better cost.

395
00:25:11,490 --> 00:25:15,454
We're saving way much more money on using the newer instances,

396
00:25:15,502 --> 00:25:19,186
and it's a better customer experience. And I don't think that

397
00:25:19,208 --> 00:25:22,302
migration would have happened had we not done those tests.

398
00:25:22,366 --> 00:25:26,022
So that's a $20 million swing, right? Like,

399
00:25:26,076 --> 00:25:29,846
had we failed and had we not spent that $5 million up

400
00:25:29,868 --> 00:25:33,720
front, we would have not been successful. And so

401
00:25:34,090 --> 00:25:37,922
I did experience some catastrophic failures

402
00:25:38,066 --> 00:25:41,434
through my first test when we were doing that. And so we figured that

403
00:25:41,472 --> 00:25:44,806
out on the practice environment and we learned

404
00:25:44,838 --> 00:25:48,934
from our mistakes and we grew. And so it's

405
00:25:48,982 --> 00:25:52,574
hard to ask for money and to ask for tailored, but if you do

406
00:25:52,612 --> 00:25:57,162
it in the right way and you do your homework and you propose

407
00:25:57,306 --> 00:26:01,182
the data at hand and show the total cost and what

408
00:26:01,236 --> 00:26:04,466
happens in the long run, with resilience, it goes a

409
00:26:04,488 --> 00:26:08,082
long way. So I highly suggest asking

410
00:26:08,136 --> 00:26:12,306
for this and asking to be able to

411
00:26:12,328 --> 00:26:15,154
do things like this and to be able to test and to run your red

412
00:26:15,192 --> 00:26:18,274
team exercises and to practice your incidents.

413
00:26:18,322 --> 00:26:21,394
Practice, practices, practice. Firefighters, military,

414
00:26:21,522 --> 00:26:24,594
navy seals spend more time training for their missions

415
00:26:24,642 --> 00:26:28,006
than they do actually executing the missions. Right, because they want it to

416
00:26:28,028 --> 00:26:31,542
be perfect. When you're doing your technical operations,

417
00:26:31,606 --> 00:26:34,646
you want them to be perfect. And the only way to do that is practice.

418
00:26:34,838 --> 00:26:37,882
Some of the tools that I've used in the past,

419
00:26:37,936 --> 00:26:41,530
chaos monkey harness and their chaos engineering platform,

420
00:26:41,600 --> 00:26:45,070
they have an open source litmus, and then they also have an enterprise level.

421
00:26:45,140 --> 00:26:49,162
There's gremlin, which is another great tool. And then chaos

422
00:26:49,306 --> 00:26:53,520
Mesh is a cloud native tool that I really like as well.

423
00:26:54,130 --> 00:26:57,386
Check these out. And that's

424
00:26:57,418 --> 00:27:01,274
the show. Thanks for taking the time to jump

425
00:27:01,322 --> 00:27:04,834
into this talk. I really enjoy talking about chaos

426
00:27:04,922 --> 00:27:07,350
engineering and having influence.

427
00:27:08,170 --> 00:27:11,826
And yeah, check out my blog, chaos.com. I talk about mental

428
00:27:11,858 --> 00:27:14,962
health, I talk about platform engineering, resilience,

429
00:27:15,026 --> 00:27:18,422
chaos engineering, all that. So thanks

430
00:27:18,476 --> 00:27:18,980
for having me.

