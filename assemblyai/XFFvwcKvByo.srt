1
00:00:20,680 --> 00:00:24,414
Hello everybody, and welcome to my talk when Google Build is not enough.

2
00:00:24,574 --> 00:00:28,814
Introduction to Bazel I'm Yershi Khabarov, lead developer at articulf,

3
00:00:28,934 --> 00:00:32,582
where I help people to use Bazel. Today we will

4
00:00:32,598 --> 00:00:36,382
be talking about build process and dependencies, and then we will

5
00:00:36,398 --> 00:00:39,994
talk about Bazel open source build and test tool.

6
00:00:40,534 --> 00:00:43,662
So let's start with build go build.

7
00:00:43,798 --> 00:00:46,942
What is Go build? Go build is a command I used most of

8
00:00:46,958 --> 00:00:50,830
the time for building my Go software, and Gobuild is command which

9
00:00:50,862 --> 00:00:55,034
compiles the packages named by their improper along with their dependencies.

10
00:00:55,444 --> 00:00:59,396
Go build takes a list of Go files as an argument and produces an

11
00:00:59,420 --> 00:01:02,860
exhibit executable binary. The question is,

12
00:01:02,972 --> 00:01:05,704
do we have all the go source files from the beginning?

13
00:01:06,124 --> 00:01:10,356
Sometimes in our go source code we have directories like gorenarate followed

14
00:01:10,380 --> 00:01:13,916
by some arbitrary binary or script. We can have any

15
00:01:13,940 --> 00:01:17,132
other commands that produces some additional Go source files.

16
00:01:17,308 --> 00:01:20,796
Which means as the first step of our build, we have to run

17
00:01:20,860 --> 00:01:24,212
generator, generate those go files, and then

18
00:01:24,268 --> 00:01:28,084
we can run go build. And this is the first set

19
00:01:28,124 --> 00:01:31,228
of our dependencies where we have go packages,

20
00:01:31,356 --> 00:01:33,384
go compiler and generators.

21
00:01:34,724 --> 00:01:38,636
Also we can run build on different environments and platforms.

22
00:01:38,780 --> 00:01:41,980
We can run our builds locally, it could be

23
00:01:42,092 --> 00:01:45,264
run on cellular runner or somewhere else.

24
00:01:45,564 --> 00:01:49,120
And this is the second center. The second set of

25
00:01:49,152 --> 00:01:53,504
our dependencies where we have host machine is the machine where we run our build.

26
00:01:53,624 --> 00:01:57,264
We have target machine is the machine where we build software for.

27
00:01:57,424 --> 00:02:00,680
And we can have a bunch of environment variables that

28
00:02:00,712 --> 00:02:03,816
can affect our build. Let's say we build binaries.

29
00:02:03,920 --> 00:02:08,264
Now publishing we need to make those variables

30
00:02:08,344 --> 00:02:11,816
available for deployment tools. Usually in my

31
00:02:11,840 --> 00:02:16,148
work I plug those binaries into container images or into

32
00:02:16,196 --> 00:02:19,384
target zip archives to use it with AWS lambdas.

33
00:02:19,684 --> 00:02:22,944
And as well as I need to provide some yamls,

34
00:02:24,044 --> 00:02:26,844
some yaml manifests like kubernetes manifests,

35
00:02:26,884 --> 00:02:30,252
helm charts, or cloudformation templates with instructions of how

36
00:02:30,268 --> 00:02:34,532
to deploy those artifacts. And this

37
00:02:34,588 --> 00:02:38,148
is a third set of our dependencies where we have docker to build

38
00:02:38,236 --> 00:02:42,358
container images, customize weight, or any other Yamuna

39
00:02:42,366 --> 00:02:45,110
operating tool, AWC, CLI,

40
00:02:45,182 --> 00:02:48,274
etcetera. So what is the dependency?

41
00:02:48,894 --> 00:02:53,174
Technically, everything involved into a build process or anything can affect

42
00:02:53,294 --> 00:02:58,154
our build process is a dependency. How to control our dependencies

43
00:02:58,654 --> 00:03:02,318
for go packages we can use go mod and go sum files.

44
00:03:02,446 --> 00:03:06,230
For go compiler we can specify version inside the

45
00:03:06,302 --> 00:03:10,082
container image we run built inside, or we can use just a

46
00:03:10,098 --> 00:03:13,570
random Go version installed on host machine for

47
00:03:13,602 --> 00:03:16,174
generators, well, it depends on generator.

48
00:03:16,994 --> 00:03:20,554
For platforms we can use build flags or we can run build on a specific

49
00:03:20,594 --> 00:03:24,018
platform for environment variables. We can specify

50
00:03:24,066 --> 00:03:27,130
them explicitly during the build. For tools like

51
00:03:27,162 --> 00:03:30,414
Docker, customize and YT, well, we can just install.

52
00:03:31,114 --> 00:03:35,006
What else we should consider during the build process we

53
00:03:35,030 --> 00:03:38,662
have to think about is

54
00:03:38,718 --> 00:03:42,526
our build reproducible and is our build

55
00:03:42,630 --> 00:03:47,550
well validated and hermetic? Sometimes we can use docker

56
00:03:47,582 --> 00:03:50,934
images for hermeticity and run our build inside

57
00:03:50,974 --> 00:03:54,622
a docker image. And when build fails,

58
00:03:54,718 --> 00:03:58,310
can we start the build from the failure point but not from the beginning

59
00:03:58,422 --> 00:04:02,066
to save our time? The output for our build process

60
00:04:02,130 --> 00:04:05,654
will be artifacts. Among them we will have go binaries,

61
00:04:06,154 --> 00:04:08,774
container memories or tarzeep archives.

62
00:04:09,594 --> 00:04:12,786
We have to know that we are going to build and publish ready

63
00:04:12,810 --> 00:04:16,454
to go artifacts, but not to deploy them.

64
00:04:17,034 --> 00:04:20,402
So yobuild is not enough. Gobuild is

65
00:04:20,418 --> 00:04:24,018
just one step of the process. While we actually need

66
00:04:24,066 --> 00:04:28,342
in the build architect session, let's define our problem scope.

67
00:04:28,518 --> 00:04:32,358
So we are going to automate our build process. And by automation

68
00:04:32,406 --> 00:04:36,114
I mean as a result we will have one documents for

69
00:04:36,974 --> 00:04:40,646
build and publish our artifacts. So this

70
00:04:40,670 --> 00:04:44,030
process will include downloading and starting all the

71
00:04:44,062 --> 00:04:47,390
necessary dependencies, including generators, compilers, tools,

72
00:04:47,422 --> 00:04:51,744
etcetera. In that during this process we will build artifacts

73
00:04:51,894 --> 00:04:55,284
and then we'll publish those artifacts to ECR three

74
00:04:55,404 --> 00:04:58,596
or somewhere else. Also, we'll try to

75
00:04:58,620 --> 00:05:02,156
make this process as little as possible and as reproducible

76
00:05:02,180 --> 00:05:05,764
as possible, which means we're going to pin all the versions for

77
00:05:05,804 --> 00:05:09,028
all the dependencies we've defined a build process.

78
00:05:09,196 --> 00:05:12,964
Let's talk about Bazel. Bazel is an open source built

79
00:05:13,004 --> 00:05:16,852
and test tool that uses human readable high level build language to define

80
00:05:16,908 --> 00:05:20,710
build in a declarative way, which means to build anything with

81
00:05:20,742 --> 00:05:24,714
Bazel we need to write a build configuration.

82
00:05:25,254 --> 00:05:28,674
Bazel is aimed to build large codices. So Bazel was

83
00:05:28,974 --> 00:05:32,150
created at Google. So when we talk about large cool basis,

84
00:05:32,262 --> 00:05:35,734
think about Google scale. Bazel supports multi language

85
00:05:35,774 --> 00:05:39,246
and multi partner builds. Definitely. We can build with Bazel

86
00:05:39,390 --> 00:05:42,774
many different languages, and Bazel

87
00:05:42,814 --> 00:05:46,550
unifies build approaches across multiple languages and multiple tool

88
00:05:46,582 --> 00:05:50,000
chains, which means with one Bazel build

89
00:05:50,032 --> 00:05:53,520
command we can build applications in written in

90
00:05:53,552 --> 00:05:57,272
different languages. Let's talk about what Bazel can do.

91
00:05:57,448 --> 00:06:00,640
Bazel can build software and it does it in parallel way.

92
00:06:00,792 --> 00:06:04,368
Bazel uses as many codes as it found. We can run

93
00:06:04,456 --> 00:06:08,704
build with Bazel locally or remotely, which means

94
00:06:08,864 --> 00:06:12,600
if our project is large enough, we can spin up remote

95
00:06:12,632 --> 00:06:15,724
runners and build run build there.

96
00:06:16,384 --> 00:06:19,604
We can build everything from sources, including dependencies,

97
00:06:20,184 --> 00:06:24,284
but it caches all the download dependencies in intermediate build results,

98
00:06:24,664 --> 00:06:28,616
which means subsequent build will be much much faster and by

99
00:06:28,640 --> 00:06:32,040
the changes in sources and rebuilds

100
00:06:32,072 --> 00:06:35,864
change parts only, which means again subsequent builds,

101
00:06:35,944 --> 00:06:38,760
even for changes source code will be much faster,

102
00:06:38,912 --> 00:06:42,952
much faster than let's talk about a

103
00:06:42,968 --> 00:06:46,704
couple of important principles. When given the same input,

104
00:06:46,744 --> 00:06:50,160
source code and product configuration, a hermetic build system

105
00:06:50,232 --> 00:06:53,480
always returns the same output. Hermetic builds

106
00:06:53,552 --> 00:06:57,392
are insensitive to libraries and other software installed on the host machine,

107
00:06:57,528 --> 00:07:00,924
which means if we take our build and move it across

108
00:07:01,424 --> 00:07:05,272
different machines, the output will be the same

109
00:07:05,408 --> 00:07:09,362
for the same input. Source identity Hermit

110
00:07:09,378 --> 00:07:13,722
implement system try to ensure the sameness of inputs by using checksums

111
00:07:13,818 --> 00:07:17,442
to identify changes to the build inputs.

112
00:07:17,578 --> 00:07:21,242
As we will see later in our examples,

113
00:07:21,378 --> 00:07:24,530
we'll have checksums for all the dependencies

114
00:07:24,562 --> 00:07:28,074
we use. Sandboxing compilers and other

115
00:07:28,114 --> 00:07:31,946
tools during the build have the access to explicitly

116
00:07:31,970 --> 00:07:35,346
defined inputs only, which means first of

117
00:07:35,370 --> 00:07:38,994
all, we need to define all the inputs explicitly,

118
00:07:39,114 --> 00:07:42,374
and if we don't define them, build will not see them.

119
00:07:42,994 --> 00:07:46,978
Okay, it's demo time. For our demo,

120
00:07:47,106 --> 00:07:50,650
I have simple hello world generator. This program

121
00:07:50,722 --> 00:07:54,610
will print which we can compile and this

122
00:07:54,642 --> 00:07:58,546
code could be found by the link below. So how can

123
00:07:58,570 --> 00:08:02,346
use it? As a first step, we need to build and

124
00:08:02,370 --> 00:08:05,690
we'll have a binary. Then we can reference this

125
00:08:05,722 --> 00:08:09,374
binary from, let's say go generate director.

126
00:08:10,074 --> 00:08:15,026
Then we will invoke go generate and create a

127
00:08:15,050 --> 00:08:18,626
file with the following content. Then we will

128
00:08:18,650 --> 00:08:22,082
go we will run build for this newly

129
00:08:22,178 --> 00:08:26,404
newly generated file and then we can so

130
00:08:26,444 --> 00:08:30,372
let's see how it looks, how it works with Bazel. With Bazel,

131
00:08:30,468 --> 00:08:35,224
we'll have just one invocation Bazel run followed by the label.

132
00:08:35,604 --> 00:08:39,260
So what we have here, Bazel is just a binary

133
00:08:39,452 --> 00:08:42,692
run is a Bazel subcommand. Then we have a

134
00:08:42,708 --> 00:08:46,956
label. Label is a unique name for a build target and

135
00:08:46,980 --> 00:08:50,608
this label consists of several parts. First one double slash

136
00:08:50,796 --> 00:08:54,544
defines a product, double slash go

137
00:08:54,664 --> 00:08:58,424
defines a package and column hello world

138
00:08:58,464 --> 00:09:02,248
is a build target. And now let's look how this product will

139
00:09:02,296 --> 00:09:05,664
be modified with Bazel. So as you can see

140
00:09:05,704 --> 00:09:08,976
here, we don't have any go files, but we

141
00:09:09,000 --> 00:09:12,896
have other files. First one is worthless file. It defines

142
00:09:12,960 --> 00:09:16,896
portal define referenced by double slash and

143
00:09:16,920 --> 00:09:20,154
this file may contain may contain external dependencies.

144
00:09:21,134 --> 00:09:24,566
Also have build files build files define the package like

145
00:09:24,590 --> 00:09:28,554
double slash or root package or double search go package

146
00:09:29,214 --> 00:09:33,142
build files declares zero or more build targets in

147
00:09:33,158 --> 00:09:37,022
most cases for goprojects, build packet structure is

148
00:09:37,038 --> 00:09:41,086
the same as directory structure. As you remember, I've mentioned

149
00:09:41,150 --> 00:09:44,822
human readable high level build image. And this is Starload.

150
00:09:44,918 --> 00:09:48,342
Starlock is a subset of python, and it's limited to

151
00:09:48,438 --> 00:09:52,342
express configurations. It's not, it's not intended for

152
00:09:52,438 --> 00:09:56,474
writing applications. So here is our workforce file.

153
00:09:56,854 --> 00:10:00,830
A role set is in a session for Bazel. It's like a plugin that allows

154
00:10:00,862 --> 00:10:04,198
Bazel to build different software. In our case,

155
00:10:04,366 --> 00:10:07,998
rose Go will be our rule set that allows Bazel to build

156
00:10:08,086 --> 00:10:11,724
go software. Then within this file

157
00:10:12,304 --> 00:10:15,672
we explicitly find go version and this go version

158
00:10:15,728 --> 00:10:19,552
will be downloaded by Bezel. Also in the end of

159
00:10:19,568 --> 00:10:23,144
the file we have a gorepository dependency which references

160
00:10:23,224 --> 00:10:26,884
our hello world generator. As you can see,

161
00:10:27,504 --> 00:10:31,104
all of our dependencies have sum or

162
00:10:31,224 --> 00:10:34,592
checksums. Let's look at build files.

163
00:10:34,728 --> 00:10:37,940
So build files can have zero or more

164
00:10:37,972 --> 00:10:41,348
build targets. Build targets will be defined by rules.

165
00:10:41,436 --> 00:10:44,556
So rule is a function implementation. It takes an

166
00:10:44,580 --> 00:10:48,228
input and produces an output. We have three rules

167
00:10:48,276 --> 00:10:51,304
here, go library and gobindrary.

168
00:10:51,804 --> 00:10:55,348
All those rules define targets. Target is a buildable

169
00:10:55,396 --> 00:10:59,544
unit. The first rule called generatehallogo,

170
00:11:00,204 --> 00:11:04,704
it creates a hollow to go file by invoking our

171
00:11:05,764 --> 00:11:09,020
hello world generator generate file

172
00:11:09,052 --> 00:11:12,356
and creates a library. And third world go Binary

173
00:11:12,460 --> 00:11:15,620
takes our library and creates an executable

174
00:11:15,732 --> 00:11:19,492
binary. So what will happen when we

175
00:11:19,668 --> 00:11:23,064
execute basel run followed by the label?

176
00:11:23,524 --> 00:11:26,664
When we call basel run followed by the label,

177
00:11:27,204 --> 00:11:30,674
Bazel will know that it have to build binary first,

178
00:11:30,974 --> 00:11:34,822
and to build binary you have to build library first, and to build library you

179
00:11:34,838 --> 00:11:39,014
have to generate a loadable file. So when we run

180
00:11:39,134 --> 00:11:41,966
Bazel run command, all this,

181
00:11:42,110 --> 00:11:45,406
those builds happen automatically. Let's look at

182
00:11:45,430 --> 00:11:49,350
another demo. For this demo I have a bunch of mic services

183
00:11:49,542 --> 00:11:52,914
deployed into Kubernetes cluster and running with stilt.

184
00:11:53,494 --> 00:11:57,950
So we have here service one which is drape service which

185
00:11:57,982 --> 00:12:01,982
is listening on port 5000 and it's mapped onto port

186
00:12:02,158 --> 00:12:05,766
55,000 on localhost. Then we have

187
00:12:05,790 --> 00:12:09,542
service Oz. This service will be authorizing all our

188
00:12:09,598 --> 00:12:13,542
coming requests. And third service is envoy proxy

189
00:12:13,678 --> 00:12:18,270
that acts as an paid gateway port 8084

190
00:12:18,302 --> 00:12:22,614
and wei proxy mapped into allocost

191
00:12:22,694 --> 00:12:26,600
and it accepts HTTP requests in a boy will translate those HTTP

192
00:12:26,632 --> 00:12:30,164
requests into JPC requests and we'll call our service one.

193
00:12:30,624 --> 00:12:34,084
I'm going to build all the binaries,

194
00:12:34,664 --> 00:12:38,248
container images and kubernetes manifests with

195
00:12:38,296 --> 00:12:41,764
one command and deploy them into Kubernetes cluster.

196
00:12:42,264 --> 00:12:45,432
Let's see how it could be done and deploys all

197
00:12:45,448 --> 00:12:49,344
these services. I run built everything in the

198
00:12:49,844 --> 00:12:54,012
elements to save a time with zero service

199
00:12:54,068 --> 00:12:57,228
available, which is fine. And we need

200
00:12:57,316 --> 00:13:01,060
some time to propagate these services so we can

201
00:13:01,212 --> 00:13:04,784
use drapes URL and hit the service drape service directly.

202
00:13:05,324 --> 00:13:08,396
Now let's call it again. If I change

203
00:13:08,460 --> 00:13:12,100
this token to invalid one, we'll have

204
00:13:12,212 --> 00:13:16,346
authorized request. Then I can and

205
00:13:16,370 --> 00:13:20,378
this command will stop tilt delete all this,

206
00:13:20,506 --> 00:13:23,994
delete all the pods and delete namespace where

207
00:13:24,034 --> 00:13:27,186
it was deployed. As we've seen, everything was

208
00:13:27,210 --> 00:13:30,866
done with just one comment. Basel run when we work

209
00:13:30,890 --> 00:13:34,242
with Basel, we reference all the build targets

210
00:13:34,298 --> 00:13:37,282
by labels. Labels could be different.

211
00:13:37,338 --> 00:13:41,242
So what are we gonna do with labels? The generic format

212
00:13:41,258 --> 00:13:44,948
for the label is followed by path to the package

213
00:13:45,116 --> 00:13:49,024
column and target name. And this is our

214
00:13:49,364 --> 00:13:53,492
so called internal labels labels within our project we

215
00:13:53,508 --> 00:13:57,292
can with those labels everything recursive.

216
00:13:57,428 --> 00:14:01,260
For example, we can run bazel build double triple

217
00:14:01,292 --> 00:14:05,108
dot and. And that means we build

218
00:14:05,156 --> 00:14:09,224
everything under there special called all

219
00:14:09,304 --> 00:14:14,080
which is the same as triple dot. We also can build everything

220
00:14:14,152 --> 00:14:17,604
recursively under one package. How can build packages

221
00:14:18,424 --> 00:14:22,432
the same with triple dot or old target? Also we

222
00:14:22,448 --> 00:14:26,712
can generate. Sorry. We can build external

223
00:14:26,728 --> 00:14:30,544
dependencies and in this case path labeled

224
00:14:30,584 --> 00:14:34,008
external dependencies start with a sign. We also can

225
00:14:34,096 --> 00:14:36,814
build one target or we can run one target.

226
00:14:37,394 --> 00:14:41,210
Should we write those build files manually? So if we have

227
00:14:41,322 --> 00:14:45,682
quite a big project, we will have elderly

228
00:14:45,698 --> 00:14:49,654
build files, one file per package or per directory.

229
00:14:50,114 --> 00:14:53,154
Unfortunately, we don't need to

230
00:14:53,234 --> 00:14:57,330
run them manually from scratch. There is a tool called Gazelle

231
00:14:57,482 --> 00:14:59,894
which can generate build files for us.

232
00:15:00,314 --> 00:15:03,704
Also it can keep them up to date and format build files.

233
00:15:03,824 --> 00:15:06,524
Also Gazelle manages all the dependencies.

234
00:15:07,584 --> 00:15:10,728
As for other targets like for container images,

235
00:15:10,776 --> 00:15:13,920
yaml manifests and publishing artifacts. Yes,

236
00:15:14,072 --> 00:15:17,600
those targets we have to write manually, but it's for

237
00:15:17,632 --> 00:15:21,404
building stuff. What else we can do with Bazel?

238
00:15:21,944 --> 00:15:25,920
We can ask Bazel some questions like use package

239
00:15:25,952 --> 00:15:29,204
auto x which depends. If package X has

240
00:15:29,884 --> 00:15:33,860
with the same baselo query, we can visualize our dependency here like

241
00:15:33,892 --> 00:15:37,140
this. This one is a validation for

242
00:15:37,212 --> 00:15:40,700
one target and this container

243
00:15:40,732 --> 00:15:43,024
image includes just one go binary.

244
00:15:44,084 --> 00:15:47,844
Bazel is accessible. So as I mentioned before, we have rowsets

245
00:15:47,964 --> 00:15:51,204
which is an extension or plugin for Bazel.

246
00:15:51,324 --> 00:15:54,916
And there are different row sets like Rose

247
00:15:54,940 --> 00:15:58,122
go for working with building go

248
00:15:58,258 --> 00:16:01,994
applications, roS OCI for building containment images,

249
00:16:02,114 --> 00:16:05,014
Ros Proto for working with Protobuf, etcetera.

250
00:16:05,514 --> 00:16:09,546
A lot of different information about existing

251
00:16:09,570 --> 00:16:13,058
rule sets you can find on awesomebyzel.com website.

252
00:16:13,186 --> 00:16:17,234
And as for more info about Bazelo, you can look at Bazel

253
00:16:17,394 --> 00:16:21,694
build website and mentioned above awesome basel.com

254
00:16:22,234 --> 00:16:25,154
and that's it for today. Thank you for your attention.

255
00:16:25,274 --> 00:16:25,714
Happy building.

