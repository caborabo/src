1
00:00:21,050 --> 00:00:24,430
I will be talking about improving application and code

2
00:00:24,500 --> 00:00:28,614
quality be without overengineering thank

3
00:00:28,652 --> 00:00:33,190
you for joining in. What is overengineering?

4
00:00:33,690 --> 00:00:37,694
Overengineering is an approach to software development

5
00:00:37,762 --> 00:00:41,642
that uses more complex and advanced technologies than

6
00:00:41,696 --> 00:00:45,340
are necessary to solve the tasks at hand.

7
00:00:46,110 --> 00:00:49,210
Why does this phenomenon even exist?

8
00:00:49,890 --> 00:00:53,578
Firstly, many developers in principle tend to complicate

9
00:00:53,674 --> 00:00:57,134
code. It is often connected with the desire to

10
00:00:57,172 --> 00:00:59,306
create something impressive.

11
00:00:59,498 --> 00:01:03,182
Secondly, managers often bring unclear tasks.

12
00:01:03,326 --> 00:01:06,962
They may either fail to describe the scope of

13
00:01:07,016 --> 00:01:11,106
problem correctly. Thirdly, the information

14
00:01:11,208 --> 00:01:14,014
space contains a myriad of solutions,

15
00:01:14,062 --> 00:01:17,414
architectures and algorithms that capture the

16
00:01:17,452 --> 00:01:21,810
interest of developers. However, the reality often dictates

17
00:01:21,890 --> 00:01:25,362
that the majority of business tasks can be efficiently

18
00:01:25,426 --> 00:01:29,654
addressed using straightforward solutions. With popular frameworks

19
00:01:29,702 --> 00:01:33,910
and packages, these solutions may not seem

20
00:01:33,990 --> 00:01:38,438
intriguing and may not enhance developers skills.

21
00:01:38,614 --> 00:01:41,838
As a result, we get a complex solution that

22
00:01:41,924 --> 00:01:45,358
does not always solve the task at hand.

23
00:01:45,524 --> 00:01:48,894
It is very expensive for the company in terms of

24
00:01:48,932 --> 00:01:51,440
both implementation and support.

25
00:01:51,890 --> 00:01:55,266
As a metaphor, we could make a spacecraft to

26
00:01:55,288 --> 00:01:58,900
travel between two points in the same city.

27
00:01:59,510 --> 00:02:02,530
Cool, expensive, but useless.

28
00:02:03,110 --> 00:02:06,120
As a specific and straightforward example,

29
00:02:06,570 --> 00:02:10,086
let's consider the task of creating an

30
00:02:10,108 --> 00:02:13,926
application that retrieves statistical data

31
00:02:14,108 --> 00:02:16,950
upon frontend API requests.

32
00:02:17,710 --> 00:02:21,450
The data sources could be other applications that

33
00:02:21,520 --> 00:02:24,826
provide the required information through their

34
00:02:24,928 --> 00:02:28,460
APIs. Context is important.

35
00:02:28,910 --> 00:02:32,990
In reality, such an application does not require high

36
00:02:33,060 --> 00:02:36,794
load. There is no requirement for response

37
00:02:36,842 --> 00:02:40,542
time. There will be several dozen requests per

38
00:02:40,596 --> 00:02:44,302
day. The simplest implementation for such a task

39
00:02:44,366 --> 00:02:48,034
could be an application using fast API or

40
00:02:48,072 --> 00:02:51,954
any other framework. This application in real

41
00:02:51,992 --> 00:02:55,522
time and asynchronously makes API

42
00:02:55,586 --> 00:02:58,630
requests to the specified sources.

43
00:02:59,530 --> 00:03:03,202
It processes the received results

44
00:03:03,266 --> 00:03:06,642
and returns JSOn in response

45
00:03:06,706 --> 00:03:10,422
to the request. If needed, this implementation

46
00:03:10,486 --> 00:03:14,234
can scale through a gateway by increasing the number of

47
00:03:14,272 --> 00:03:17,750
workers. Such a solution would adequately

48
00:03:17,830 --> 00:03:21,770
meet their clients requirements, but the context

49
00:03:21,850 --> 00:03:26,282
in these task may be imprecisely described and developers

50
00:03:26,346 --> 00:03:30,014
may have neglected to clarify these details. There will

51
00:03:30,052 --> 00:03:33,694
always be someone who issues that. The API

52
00:03:33,742 --> 00:03:37,538
for statistics should provide responses very quickly and

53
00:03:37,624 --> 00:03:41,970
the API should withstand a higher level of traffic.

54
00:03:42,310 --> 00:03:45,650
The process of architecture invention begins.

55
00:03:46,010 --> 00:03:49,442
Suggestions emerge to separate the worker

56
00:03:49,586 --> 00:03:53,126
responsible for retrieving data from sources and

57
00:03:53,228 --> 00:03:56,982
the API worker. This evolves into

58
00:03:57,036 --> 00:04:01,638
a system that through buses, fetches data from sources,

59
00:04:01,814 --> 00:04:05,002
stores them in a local repository and then

60
00:04:05,056 --> 00:04:07,834
delivers results from there.

61
00:04:08,032 --> 00:04:11,950
This approach also involves modifying the data

62
00:04:12,020 --> 00:04:15,610
sources. Later on, it becomes apparent

63
00:04:15,690 --> 00:04:19,258
that not all source teams are willing to modify

64
00:04:19,354 --> 00:04:22,910
these service and adopt the bus mechanism.

65
00:04:23,510 --> 00:04:26,606
As a result, this architecture is presented

66
00:04:26,638 --> 00:04:30,914
to these client. What was initially estimated to

67
00:04:30,952 --> 00:04:35,034
take a few days for development turns into a project spanning

68
00:04:35,102 --> 00:04:38,120
several weeks. What comes next,

69
00:04:38,810 --> 00:04:42,454
during development, the team realizes that they

70
00:04:42,492 --> 00:04:45,522
are falling behind schedule and begins

71
00:04:45,586 --> 00:04:48,774
to cut corners with the most critical

72
00:04:48,902 --> 00:04:52,950
being these reduction of code and importantly,

73
00:04:53,030 --> 00:04:56,422
tests are postponed as technical

74
00:04:56,486 --> 00:04:59,890
debt along with many other aspects.

75
00:05:00,070 --> 00:05:04,010
As a result, the code is written and it somehow

76
00:05:04,090 --> 00:05:07,662
functions. Overall, almost everyone is

77
00:05:07,716 --> 00:05:11,150
satisfied except for the client.

78
00:05:11,650 --> 00:05:14,366
It turned out to be very expensive.

79
00:05:14,558 --> 00:05:17,938
Later, the moment arrives when modifications are needed

80
00:05:18,024 --> 00:05:22,098
for these applications. Supporting this in

81
00:05:22,184 --> 00:05:25,414
the application requires making changes to

82
00:05:25,452 --> 00:05:28,390
several nodes of this complex system.

83
00:05:28,540 --> 00:05:32,294
In a simpler scenario, supporting such changes could have been

84
00:05:32,332 --> 00:05:35,350
significantly easier and faster.

85
00:05:36,010 --> 00:05:39,580
What did the company end up with?

86
00:05:40,110 --> 00:05:44,154
An overengineering solution that exceeded the

87
00:05:44,192 --> 00:05:47,734
actual requirements, increased development

88
00:05:47,782 --> 00:05:51,418
costs and time, compromised code quality due

89
00:05:51,434 --> 00:05:54,990
to rusty development and postponed testing,

90
00:05:55,410 --> 00:05:58,762
difficulty in accommodating changes and modifications

91
00:05:58,826 --> 00:06:02,838
in the future leading to higher maintenance costs,

92
00:06:03,034 --> 00:06:06,962
dissatisfaction from the client due to the high costs and

93
00:06:07,016 --> 00:06:10,798
potential complications in system modifications.

94
00:06:10,974 --> 00:06:13,890
In essence, the company obtained a solution that,

95
00:06:13,960 --> 00:06:17,958
despite its complexity, did not align with the practical needs,

96
00:06:18,044 --> 00:06:21,650
resulting in higher expenses and challenges in maintaining

97
00:06:21,730 --> 00:06:25,094
and evolving these system. And this

98
00:06:25,132 --> 00:06:27,240
is just a simple example.

99
00:06:27,950 --> 00:06:32,330
How can we address the challenge of overengineering?

100
00:06:32,830 --> 00:06:36,330
My experience indicates that implementing just

101
00:06:36,400 --> 00:06:39,654
a few key changes can help avoid

102
00:06:39,702 --> 00:06:44,270
unnecessary work and reduce the cost of development and maintenance.

103
00:06:45,010 --> 00:06:48,814
The first key aspect is having a developers in the

104
00:06:48,852 --> 00:06:52,586
team who can accurately assess the task and

105
00:06:52,628 --> 00:06:56,430
the architecture. The second change is organizational.

106
00:06:56,590 --> 00:07:00,014
Implementing a task refinement process is crucial.

107
00:07:00,142 --> 00:07:03,806
Furthermore, a detailed examination of the architecture

108
00:07:03,838 --> 00:07:07,874
is necessary if the architecture becomes intricate

109
00:07:08,002 --> 00:07:11,570
and includes elements that may be useful

110
00:07:11,650 --> 00:07:15,698
in the future. Consider dividing the implementation into iterations

111
00:07:15,794 --> 00:07:19,578
with room for expansion. The fourth change

112
00:07:19,664 --> 00:07:23,660
is the adoption of an iterative development process.

113
00:07:24,030 --> 00:07:28,326
The fifth change involves refactoring and optimization.

114
00:07:28,518 --> 00:07:32,554
The most crucial aspect is that of business scenarios

115
00:07:32,602 --> 00:07:35,946
should be covered by tests during development.

116
00:07:36,138 --> 00:07:40,062
This ensures that working interfaces of the application

117
00:07:40,196 --> 00:07:43,630
remain intact during refactoring and optimization,

118
00:07:43,790 --> 00:07:47,054
preventing unintended disruptions let's

119
00:07:47,102 --> 00:07:50,606
delve into more detail. At the beginning,

120
00:07:50,718 --> 00:07:54,382
it is necessary to thoroughly analyze the task,

121
00:07:54,446 --> 00:07:58,258
considering all business requirements and clarify

122
00:07:58,354 --> 00:08:02,050
all details. Architectural design involves

123
00:08:02,130 --> 00:08:05,494
determining points of change and organizing the

124
00:08:05,532 --> 00:08:09,642
code. Even for small changes that

125
00:08:09,696 --> 00:08:13,686
can be implemented quickly and easily.

126
00:08:13,878 --> 00:08:17,370
It is advisable to consider the impact of

127
00:08:17,440 --> 00:08:21,326
these changes and integrate them into the current

128
00:08:21,508 --> 00:08:24,842
architecture without complicating or damaging

129
00:08:24,906 --> 00:08:28,638
these code. It is also important to consider

130
00:08:28,804 --> 00:08:31,646
load capacity, processing time,

131
00:08:31,748 --> 00:08:35,118
correctness, validation, error, handling,

132
00:08:35,294 --> 00:08:39,442
the possibility of using the change or the

133
00:08:39,496 --> 00:08:41,940
entire implementation as a whole.

134
00:08:42,310 --> 00:08:45,990
Implementing the assigned task can lead to

135
00:08:46,060 --> 00:08:50,002
a significant number of changes. If the task

136
00:08:50,066 --> 00:08:53,270
can be broken down into steps increments,

137
00:08:53,610 --> 00:08:57,174
it is better to do so. It is

138
00:08:57,212 --> 00:09:01,414
best practice to deliver each increment to production independently

139
00:09:01,542 --> 00:09:04,460
if the product allows for it.

140
00:09:05,070 --> 00:09:09,014
For example, let's say we need to change a sorting

141
00:09:09,062 --> 00:09:11,870
field which requires building an index.

142
00:09:12,370 --> 00:09:15,834
It would be logical to first create the index

143
00:09:15,882 --> 00:09:18,270
and deploy it to production.

144
00:09:18,930 --> 00:09:21,806
Then, in the next stage of the code,

145
00:09:21,988 --> 00:09:24,740
switch the sorting to this field.

146
00:09:25,670 --> 00:09:28,766
These are already two independent increments.

147
00:09:28,958 --> 00:09:31,970
As a third step, if appropriate,

148
00:09:32,310 --> 00:09:34,770
the old index can be removed.

149
00:09:35,290 --> 00:09:38,694
It is possible to release all of

150
00:09:38,732 --> 00:09:42,802
these together. In more complex cases,

151
00:09:42,946 --> 00:09:47,510
release, assembly and merge conflicts can become bottlenecks.

152
00:09:47,850 --> 00:09:51,370
The new functionality can be hidden until the final

153
00:09:51,440 --> 00:09:55,110
release, but it can be delivered to production in parts.

154
00:09:55,190 --> 00:09:58,506
The smaller the increment, the easier it is to

155
00:09:58,528 --> 00:10:02,458
work with. It is easier to conduct code reviews.

156
00:10:02,634 --> 00:10:06,314
There are fewer conflicts during merging

157
00:10:06,442 --> 00:10:10,286
and there is a lower probability of making a

158
00:10:10,308 --> 00:10:15,250
mistake. It's better to avoid such situations.

159
00:10:15,750 --> 00:10:19,058
The code should only be implemented according to

160
00:10:19,144 --> 00:10:22,734
the increment plan. Stick to the chosen architectural

161
00:10:22,782 --> 00:10:26,166
approach from the beginning and stay focused on the

162
00:10:26,188 --> 00:10:29,462
goal. The goal, of course, should be clear to

163
00:10:29,516 --> 00:10:33,234
everyone. Additionally, it's crucial at this stage

164
00:10:33,282 --> 00:10:36,390
to write tests that code the increment.

165
00:10:36,810 --> 00:10:41,430
These tests will not only be useful for checking current errors,

166
00:10:41,510 --> 00:10:45,450
but also for future refactoring.

167
00:10:45,950 --> 00:10:49,222
The main thing is not to overcomplicate

168
00:10:49,286 --> 00:10:53,342
it. It's important that the business function works

169
00:10:53,476 --> 00:10:57,534
correctly. After creating the increment, it is important

170
00:10:57,652 --> 00:11:00,702
to deliver these code to the consumer and

171
00:11:00,756 --> 00:11:04,782
gather feedback. Based on the feedback

172
00:11:04,846 --> 00:11:07,730
received, it's important to update the task.

173
00:11:08,150 --> 00:11:11,630
Even if these consumer didn't receive the entire feature

174
00:11:11,710 --> 00:11:15,782
they requested at this stage, but only a part of it,

175
00:11:15,916 --> 00:11:19,462
they may still be able to use it and

176
00:11:19,516 --> 00:11:23,270
adjust the task specification accordingly.

177
00:11:23,770 --> 00:11:27,510
Sometimes they may even cancel further implementation.

178
00:11:28,190 --> 00:11:32,038
If the planned architectural solution remains relevant,

179
00:11:32,134 --> 00:11:35,754
we simply prepare for the next step in implementing the

180
00:11:35,792 --> 00:11:39,382
code accordingly to the plan or proceed

181
00:11:39,446 --> 00:11:43,242
with refactoring. Please note that it's

182
00:11:43,306 --> 00:11:47,390
essential to interact with the client extensively.

183
00:11:47,730 --> 00:11:51,806
Refactoring is a controlled process of improving code

184
00:11:51,908 --> 00:11:54,610
without adding new functionality.

185
00:11:55,270 --> 00:11:59,122
The result of refactoring is clean code and

186
00:11:59,176 --> 00:12:03,198
a simple design. Refactoring is an expensive

187
00:12:03,294 --> 00:12:05,140
process for business.

188
00:12:05,850 --> 00:12:09,734
Programmers receive salaries, but these don't add new

189
00:12:09,772 --> 00:12:13,170
features. However, attempting to implement

190
00:12:13,250 --> 00:12:17,822
perfect code from these start can be significantly more costly.

191
00:12:17,986 --> 00:12:21,562
Refactoring is done iteratively according to the plan or

192
00:12:21,616 --> 00:12:25,418
as needed. The timing of refactoring may depend

193
00:12:25,504 --> 00:12:29,482
on these set of changes. Refactoring should not

194
00:12:29,536 --> 00:12:33,162
involve rewriting these service from scratch.

195
00:12:33,306 --> 00:12:37,102
This is reengineering for refactoring. The first

196
00:12:37,156 --> 00:12:40,266
step is to identify the dirty spots.

197
00:12:40,458 --> 00:12:44,446
These may include code duplication,

198
00:12:44,638 --> 00:12:48,494
long methods, large classes, long parameter

199
00:12:48,542 --> 00:12:51,810
lists, redundant temporary variables,

200
00:12:52,310 --> 00:12:55,718
data classes, ungrouped data,

201
00:12:55,884 --> 00:13:00,322
debugging information and much more then requirements

202
00:13:00,386 --> 00:13:03,400
are set for what needs to be done.

203
00:13:04,170 --> 00:13:08,266
One of the important criteria is the maintainability of

204
00:13:08,288 --> 00:13:12,454
the code and simplification. Do not confuse refactoring

205
00:13:12,502 --> 00:13:16,118
with performance optimization and issue resolution.

206
00:13:16,294 --> 00:13:20,302
Refactoring does not include optimization of

207
00:13:20,356 --> 00:13:24,830
queries to these database or other storage,

208
00:13:25,170 --> 00:13:28,362
increasing speed, reducing memory

209
00:13:28,426 --> 00:13:31,802
consumption. Performance optimization

210
00:13:31,946 --> 00:13:36,420
is also an important stage in creating a quality application.

211
00:13:36,950 --> 00:13:41,214
However, it often overcomplicate code comprehension

212
00:13:41,262 --> 00:13:44,530
and creates a new need for refactoring.

213
00:13:44,890 --> 00:13:48,514
This way the team only developers the necessary

214
00:13:48,562 --> 00:13:51,430
functionality that can be maintained.

215
00:13:52,410 --> 00:13:56,146
Overengineering is minimized. In such solutions.

216
00:13:56,338 --> 00:14:00,022
It is essential to understand that all decisions

217
00:14:00,086 --> 00:14:03,706
should be made collectively by the entire team.

218
00:14:03,888 --> 00:14:08,042
Everyone should contribute to writing code and

219
00:14:08,176 --> 00:14:11,840
knowledge should be shared among all team members.

220
00:14:12,690 --> 00:14:15,760
Also, don't forget to document the code.

221
00:14:16,530 --> 00:14:20,158
When responsibility is shared among everyone,

222
00:14:20,324 --> 00:14:24,078
the quality will be good. If one person bears

223
00:14:24,174 --> 00:14:28,258
their responsibility, the solution will be very subjective and often

224
00:14:28,344 --> 00:14:32,354
suboptimal. I would like to emphasize separately that

225
00:14:32,392 --> 00:14:35,858
it is important to provide the client with a comprehensive

226
00:14:35,954 --> 00:14:39,400
plan for refactoring and optimization from

227
00:14:39,850 --> 00:14:44,002
the outset. They should understand before developers

228
00:14:44,066 --> 00:14:48,354
begins that the development process does not end

229
00:14:48,492 --> 00:14:51,580
when the service is ready.

230
00:14:52,110 --> 00:14:55,370
Most clients understand and appreciate these

231
00:14:55,520 --> 00:14:59,386
if it is explained to them before

232
00:14:59,488 --> 00:15:04,570
implementation begins. To write code without overengineering,

233
00:15:04,650 --> 00:15:08,910
it is sufficient to plan the work before development

234
00:15:09,330 --> 00:15:12,766
begins. If all team members understand the

235
00:15:12,788 --> 00:15:16,240
ultimate goal and what needs to be done,

236
00:15:16,690 --> 00:15:20,186
there are usually no problems. However, if decisions

237
00:15:20,218 --> 00:15:23,406
are made on the fly during development, architecture is

238
00:15:23,428 --> 00:15:27,666
not well thought out and the task is not fully understood.

239
00:15:27,778 --> 00:15:31,270
The product will be expensive and of

240
00:15:31,420 --> 00:15:35,538
very poor quality. Thank you for your attention.

241
00:15:35,714 --> 00:15:37,490
Write your code thoughtfully.

