1
00:00:24,650 --> 00:00:28,070
Hello and thank you for joining me today at Conf 42,

2
00:00:28,140 --> 00:00:31,526
Cloud native. Today I'm going to give a talk on something that

3
00:00:31,548 --> 00:00:35,046
I feel very passionately about and I think is absolutely one

4
00:00:35,068 --> 00:00:38,598
of the most exciting new trends in cloud native, even though it has been around

5
00:00:38,684 --> 00:00:42,386
for longer than, longer than might meet the eye.

6
00:00:42,418 --> 00:00:45,922
Initially, my talk is on ephemeral environments,

7
00:00:45,986 --> 00:00:49,554
and it's called redefining preproduction, because with these environments,

8
00:00:49,682 --> 00:00:52,986
we're are seeing pre production environments

9
00:00:53,098 --> 00:00:57,994
catching up to the advancements that have been made in production

10
00:00:58,042 --> 00:01:01,694
application deployment. My name is Natalie Lunbeck and I work

11
00:01:01,732 --> 00:01:05,690
at Shipyard, and I'm also the primary author of Ephemeralinvironments

12
00:01:05,770 --> 00:01:09,262
IO, which is an open source community resource guide.

13
00:01:09,406 --> 00:01:12,738
You can go there right now. You can also check out our GitHub open a

14
00:01:12,744 --> 00:01:16,402
PR if you have anything you'd like to contribute. Always looking for

15
00:01:16,536 --> 00:01:19,782
new stuff there. All right, so let's get started.

16
00:01:19,916 --> 00:01:23,366
So I wanted to give a quick overview of what we're talking about today.

17
00:01:23,468 --> 00:01:27,270
I wanted to start off with how teams are using ephemeral environments,

18
00:01:28,090 --> 00:01:32,090
but most of all, how teams are using static environments, because many of them

19
00:01:32,240 --> 00:01:35,642
are stuck there not necessarily by choice, but by

20
00:01:35,696 --> 00:01:40,050
habit. I wanted to introduce the concept of ephemeral environments,

21
00:01:40,150 --> 00:01:43,850
and then I wanted to kind of go into how ephemeral environments

22
00:01:43,930 --> 00:01:48,298
exactly simplify the SDLC software development lifecycle.

23
00:01:48,474 --> 00:01:52,560
All right, so this slide, depending on

24
00:01:53,410 --> 00:01:57,154
how well you know it, this might be something that

25
00:01:57,192 --> 00:02:00,654
gives you a lot of stress and anxiety. And hopefully it doesn't. Hopefully,

26
00:02:00,702 --> 00:02:04,194
your environment workflow does not look like this. But if it

27
00:02:04,232 --> 00:02:07,782
does, you can very much see why we

28
00:02:07,836 --> 00:02:11,654
do not like this. Well, first off, this is not

29
00:02:11,772 --> 00:02:15,254
reduced or abstracted. You probably might

30
00:02:15,372 --> 00:02:18,966
only have four static environments total for your whole team,

31
00:02:19,068 --> 00:02:22,746
which is absolutely crazy. When you think about the volume of PRs that you

32
00:02:22,768 --> 00:02:26,586
have opened every day, how are you possibly supposed to

33
00:02:26,768 --> 00:02:29,754
test those one by one in this,

34
00:02:29,792 --> 00:02:32,890
which you really can't? That's where bottlenecks come in.

35
00:02:32,960 --> 00:02:36,634
And then one of the things about this image that gives me the most anxiety

36
00:02:36,682 --> 00:02:39,898
is you can see how these environments are actually just coupled

37
00:02:39,914 --> 00:02:43,294
together, and they share a lot of dependencies. And if you know

38
00:02:43,332 --> 00:02:47,090
how easy it is to break staging, you also know

39
00:02:47,160 --> 00:02:51,074
how staging can then in turn take down all your other

40
00:02:51,112 --> 00:02:54,402
environments. And you never want to be that person on your team.

41
00:02:54,536 --> 00:02:58,086
So fingers crossed, this isn't what you're doing. But if you are

42
00:02:58,108 --> 00:03:01,414
doing that, you've probably thought about a

43
00:03:01,452 --> 00:03:04,710
more modern solution, because this has been done

44
00:03:04,780 --> 00:03:07,846
for a very long time. And I think modern application

45
00:03:07,948 --> 00:03:11,302
workflows, like, we've had so many advancements in production,

46
00:03:11,366 --> 00:03:15,146
but why is pre productionlike stuck in the past the way that it is?

47
00:03:15,248 --> 00:03:18,314
And that's something that I want to talk about, because if you do

48
00:03:18,352 --> 00:03:22,666
have a static environments workflow

49
00:03:22,778 --> 00:03:26,366
set up, you've probably thought about how you can change that, but you

50
00:03:26,388 --> 00:03:29,498
know that it isn't exactly anything trivial.

51
00:03:29,674 --> 00:03:33,186
So I wanted to define what exactly is an

52
00:03:33,208 --> 00:03:37,838
ephemeral environment. And this is courtesy of ephemeralinvironments

53
00:03:37,934 --> 00:03:41,810
IO. It is a short lived, encapsulated deployment of an application,

54
00:03:41,960 --> 00:03:45,486
automatically leveraged on every code change through Gitops.

55
00:03:45,598 --> 00:03:49,218
Sounds pretty great, right? Let's go a little further into that.

56
00:03:49,304 --> 00:03:52,582
They are robust on demand copies of your application for running

57
00:03:52,636 --> 00:03:57,042
tests, previewing features, and collaborating async across teams.

58
00:03:57,186 --> 00:04:00,374
So this is honestly instantly an improvement,

59
00:04:00,422 --> 00:04:03,942
because before, if you had queues

60
00:04:04,006 --> 00:04:07,354
of PRs going into staging and maybe you

61
00:04:07,392 --> 00:04:10,918
had another testing environment, but you really didn't

62
00:04:10,934 --> 00:04:14,366
get to do the type of comprehensive and frequent testing that

63
00:04:14,388 --> 00:04:17,886
you would desire. Ephemeral environments would mean that in

64
00:04:17,908 --> 00:04:21,226
theory you really could just open a PR, which would trigger

65
00:04:21,258 --> 00:04:25,214
a workflow to spin up an ephemeral environment, and it would

66
00:04:25,252 --> 00:04:28,626
automatically trigger the rest of your CI workflow that might not even be

67
00:04:28,648 --> 00:04:31,918
run till production. So it would be running your end to end tests,

68
00:04:32,014 --> 00:04:35,426
your integration tests, and of course unit tests, even though those are

69
00:04:35,448 --> 00:04:38,566
a little easier to do. Although end to

70
00:04:38,588 --> 00:04:42,594
end tests and integration tests obviously need to interact with your database,

71
00:04:42,642 --> 00:04:45,846
so you are going to need some full stack application there.

72
00:04:45,948 --> 00:04:49,226
So this is already a game changer, but I think

73
00:04:49,248 --> 00:04:53,078
that you know that. And hopefully,

74
00:04:53,174 --> 00:04:56,986
again, hopefully this is not your SDLC, but this is what it tends to

75
00:04:57,008 --> 00:05:01,100
look like with long lived environments, environments that never turn off.

76
00:05:02,830 --> 00:05:06,814
You're developing to the point where you're ready to open a pull request and

77
00:05:06,852 --> 00:05:10,686
then queue in one of your colleagues for code review, merge it

78
00:05:10,708 --> 00:05:14,702
to main, deploy it to staging, along with everything

79
00:05:14,756 --> 00:05:17,330
else that might get deployed to staging in a day,

80
00:05:17,400 --> 00:05:21,902
and against all like 15 of those PRS

81
00:05:21,966 --> 00:05:25,394
branch that are merged into staging, your end to end tests are going to run.

82
00:05:25,512 --> 00:05:29,334
And without doubt, I think it's pretty fair

83
00:05:29,372 --> 00:05:32,806
to say that this might break something. This might take down

84
00:05:32,828 --> 00:05:36,454
your staging environment, which is not necessarily bad.

85
00:05:36,492 --> 00:05:40,034
I think it's always great to uncover bugs. It's always a learning experience,

86
00:05:40,172 --> 00:05:43,466
but that's not great, because maybe your staging environment is

87
00:05:43,488 --> 00:05:46,794
coupled to your other static environments, so everything's taken down

88
00:05:46,912 --> 00:05:50,106
and oh well, nobody else's features have been able to be

89
00:05:50,128 --> 00:05:54,198
tested. So that's a pretty major concern. So then

90
00:05:54,224 --> 00:05:58,298
you're going to go back, you're going to hope that you're fixing

91
00:05:58,394 --> 00:06:01,546
the correct bug, but I guess you won't know for a few days because you'll

92
00:06:01,578 --> 00:06:05,438
open that PR, you'll loop in someone again for a code review, merge it

93
00:06:05,444 --> 00:06:09,118
to main, deploy it to staging, and really hope that you fixed

94
00:06:09,134 --> 00:06:12,546
your bug there. But at that point it's been days and days in between,

95
00:06:12,648 --> 00:06:17,038
and you might keep repeating this depending on how

96
00:06:17,064 --> 00:06:20,598
complex your fix is. And you really want to

97
00:06:20,604 --> 00:06:23,750
see those results which you can't necessarily see on your local

98
00:06:23,820 --> 00:06:26,934
environment because of all the dependencies that

99
00:06:26,972 --> 00:06:30,490
you might not have access to until later on in the pipeline.

100
00:06:30,910 --> 00:06:34,586
And then of course at a certain point it passes and

101
00:06:34,768 --> 00:06:38,506
along with a bunch of other things, it's deployed to production, which is

102
00:06:38,528 --> 00:06:41,734
great, but that's a pretty slow release process and

103
00:06:41,792 --> 00:06:45,534
I don't think that that's at all ideal and it's something

104
00:06:45,572 --> 00:06:48,510
that you could be doing a lot faster with.

105
00:06:48,580 --> 00:06:52,238
Of course, now that environments have caught up to

106
00:06:52,324 --> 00:06:55,614
application infrastructure. So I wanted

107
00:06:55,652 --> 00:06:59,038
to just show you a visual of what this looks like when you're using ephemeral

108
00:06:59,054 --> 00:07:02,366
environments. And this is really nice because now we can visualize multiple

109
00:07:02,398 --> 00:07:05,714
things at once, multiple branch being worked on. This is

110
00:07:05,752 --> 00:07:09,174
when you're developing a feature to these point where it's ready

111
00:07:09,212 --> 00:07:12,438
to be opened as a pull request. And then you just

112
00:07:12,524 --> 00:07:15,874
click open pull request and immediately

113
00:07:15,922 --> 00:07:19,494
your CI workflow, probably the same one that you're using much later

114
00:07:19,532 --> 00:07:23,142
in your pipeline, gets triggered and it takes that URL

115
00:07:23,206 --> 00:07:26,746
from your ephemeral environment, points it to your end to end tests, points your

116
00:07:26,768 --> 00:07:30,426
end to end tests to it, and they run against the environment and

117
00:07:30,448 --> 00:07:33,850
then that way they'll uncover bugs within 15

118
00:07:33,920 --> 00:07:37,406
minutes or however long they take to run after you've opened that PR.

119
00:07:37,508 --> 00:07:40,222
So instead of context switching, you can just kind of sit back,

120
00:07:40,276 --> 00:07:43,934
relax, wait for your test to fail and then go right

121
00:07:43,972 --> 00:07:47,250
back. And you can take a lot more risks here, get a lot done

122
00:07:47,320 --> 00:07:50,770
faster just because you're aware that you have this opportunity

123
00:07:50,920 --> 00:07:54,962
to correct them kind of on the spot instead of several days

124
00:07:55,016 --> 00:07:58,520
later. So this is really nice, so everyone can

125
00:07:59,050 --> 00:08:02,326
merge their PR with confidence, merge it to main, deploy it to

126
00:08:02,348 --> 00:08:05,814
staging, and of course your end to end tests will run

127
00:08:05,852 --> 00:08:09,482
again on your staging environment. But this time it's really nice because

128
00:08:09,616 --> 00:08:13,382
they're running against branches that have already been tested.

129
00:08:13,446 --> 00:08:17,386
So anything that they're looking for are just conflicts between the

130
00:08:17,408 --> 00:08:20,966
branches being interacting together instead of

131
00:08:21,008 --> 00:08:24,666
bugs, and the standalone branches themselves. And then you can deploy,

132
00:08:24,778 --> 00:08:29,130
and we tend to see people deploying around 50% faster,

133
00:08:29,210 --> 00:08:32,878
50% more features, which is absolutely great.

134
00:08:33,044 --> 00:08:36,626
Why wouldn't you do it this way? So I wanted to

135
00:08:36,648 --> 00:08:39,774
introduce to you a project. I mentioned this at the beginning,

136
00:08:39,822 --> 00:08:43,570
but this is my open source community site,

137
00:08:43,720 --> 00:08:48,366
maintained with a few other excellent contributors. It's called ephemeralinvironments

138
00:08:48,478 --> 00:08:51,686
IO. And back in 2021, when I was

139
00:08:51,708 --> 00:08:55,046
starting working with shipyard, I was trying to learn about

140
00:08:55,068 --> 00:08:59,078
ephemeral environments. This was a new concept to me, and I

141
00:08:59,164 --> 00:09:03,110
really realized pretty quickly that there are no online resources

142
00:09:03,190 --> 00:09:06,506
on ephemeral environments. So I talked to my team and I

143
00:09:06,528 --> 00:09:10,378
talked to some other professionals in the cloud native community,

144
00:09:10,544 --> 00:09:14,442
and they gave me some great best practices that ephemeral environments

145
00:09:14,506 --> 00:09:18,014
should have in an ideal world. And I wanted to talk to you about them,

146
00:09:18,052 --> 00:09:21,354
because if you're building or looking for an ephemeral environment

147
00:09:21,402 --> 00:09:24,686
solution, it really should check all these boxes in

148
00:09:24,708 --> 00:09:28,158
order for you to get these most value out of such a solution.

149
00:09:28,254 --> 00:09:31,442
Wanted to go into the six pillars of things that we deemed most

150
00:09:31,496 --> 00:09:34,958
important to ephemeral environments, and the first one

151
00:09:34,984 --> 00:09:38,326
of those is the dev workflow. So really in

152
00:09:38,348 --> 00:09:42,738
a perfect world, ephemeral environments should integrate into your dev workflow

153
00:09:42,914 --> 00:09:46,246
pretty seamlessly with no overhead. I mean, you usually

154
00:09:46,428 --> 00:09:50,394
would configure them with your git provider, and then

155
00:09:50,512 --> 00:09:54,214
you should just be able to develop normally, press all the buttons

156
00:09:54,262 --> 00:09:58,070
you normally do, use the same exact git workflow

157
00:09:58,150 --> 00:10:01,366
and they will just pop up. And generally

158
00:10:01,398 --> 00:10:05,342
what this looks like is when you open a PR that triggers your

159
00:10:05,396 --> 00:10:08,670
CI workflow and your ephemeral environment management platform

160
00:10:08,820 --> 00:10:12,538
is listening for changes, and it will spin up ephemeral environments,

161
00:10:12,714 --> 00:10:15,978
it will spin up one based on your PR and it will give

162
00:10:16,004 --> 00:10:19,650
you a link which you can access it, and then every commit you make

163
00:10:19,720 --> 00:10:23,422
thereafter on that PR will also be reflected in the same environment.

164
00:10:23,566 --> 00:10:26,866
And this is honestly really great for development, because as

165
00:10:26,888 --> 00:10:30,854
you're working on a branch, you can keep making changes and then seeing them live,

166
00:10:30,972 --> 00:10:34,614
interacting with them in ways that they would behave in

167
00:10:34,652 --> 00:10:38,434
production, which honestly, you don't normally get that until you're

168
00:10:38,482 --> 00:10:42,042
actually in production. And this is really great for

169
00:10:42,096 --> 00:10:45,418
QA. It simplifies it, it allows QA to happen

170
00:10:45,584 --> 00:10:49,434
much earlier on in the pipeline, and then also on an individual per

171
00:10:49,472 --> 00:10:52,874
branch basis instead of multiple features

172
00:10:52,922 --> 00:10:55,966
being tested in tandem. And then it should be to

173
00:10:55,988 --> 00:10:59,962
the point where you have the confidence, where once you merge a branch,

174
00:11:00,026 --> 00:11:03,962
you feel like it's tested, it passes

175
00:11:04,026 --> 00:11:07,058
all these cases, even your end to end tests are able to

176
00:11:07,064 --> 00:11:10,126
be run against it. So you can kind of almost skip

177
00:11:10,158 --> 00:11:14,430
that staging step and just deploy it with confidence, which feels

178
00:11:14,510 --> 00:11:17,750
really good to do. And then another

179
00:11:17,820 --> 00:11:21,830
feature is that ephemeral environments should promote collaboration,

180
00:11:22,170 --> 00:11:26,182
especially across teams that don't normally get to work

181
00:11:26,236 --> 00:11:29,946
together this easily. So for example, developers working with

182
00:11:29,968 --> 00:11:34,140
developers, a nice thing about this is code review can happen

183
00:11:34,510 --> 00:11:38,250
much earlier, and it can happen in addition to

184
00:11:38,400 --> 00:11:41,834
traditional code review. They can interact with a production like environment

185
00:11:41,882 --> 00:11:45,326
and see those changes, and they can contribute to the

186
00:11:45,348 --> 00:11:48,586
branch and see their changes spun up in that same environment.

187
00:11:48,698 --> 00:11:52,270
So it's honestly an excellent place for collaboration.

188
00:11:52,710 --> 00:11:56,350
Also wonderful place for product to work with developers,

189
00:11:56,430 --> 00:12:00,002
because product can give developers a plan

190
00:12:00,056 --> 00:12:03,586
for a feature, developers can make that happen, share the

191
00:12:03,608 --> 00:12:07,094
link and product can interact with it instead of just seeing a

192
00:12:07,132 --> 00:12:10,198
screen share or screenshots or just

193
00:12:10,284 --> 00:12:13,734
any type of non thorough interaction that wouldn't really

194
00:12:13,772 --> 00:12:17,522
give them the idea of how a feature should be becoming.

195
00:12:17,586 --> 00:12:21,226
So it's really great because they're able to interact with it as much as

196
00:12:21,248 --> 00:12:25,338
they might need in an as realistic environment as possible.

197
00:12:25,504 --> 00:12:29,018
And then of course, as we talked about a little earlier, this is much

198
00:12:29,104 --> 00:12:33,054
easier for QA as well to collaborate, just because they can check

199
00:12:33,092 --> 00:12:37,146
out a branch much earlier on in the process and both user

200
00:12:37,178 --> 00:12:40,846
test it and run automated tests, which does bring us to

201
00:12:40,868 --> 00:12:45,006
our next point, which is testing. So ephemeral environments,

202
00:12:45,198 --> 00:12:48,558
one of their biggest use cases is for testing,

203
00:12:48,654 --> 00:12:52,466
and that's both user and automated testing because

204
00:12:52,568 --> 00:12:55,902
they are very solid environments

205
00:12:55,966 --> 00:12:59,590
for both. The type of testing that you don't normally get to do

206
00:12:59,660 --> 00:13:01,960
sometimes until production even.

207
00:13:02,650 --> 00:13:05,906
And what makes this so easy is they use your CI

208
00:13:05,938 --> 00:13:09,670
CD pipeline and generally what you can do, since they're so easily

209
00:13:09,750 --> 00:13:13,514
shareable and accessible, you can just point your

210
00:13:13,552 --> 00:13:16,906
CI CD pipeline at the ephemeral environments and it

211
00:13:16,928 --> 00:13:20,578
can use that link and that bypass to run the tests

212
00:13:20,614 --> 00:13:24,862
against it. And this, I'm going to say this word a lot, but it

213
00:13:24,916 --> 00:13:28,510
promotes more user authenticated testing and QA,

214
00:13:29,010 --> 00:13:32,654
more testing more often. You're able to do it as

215
00:13:32,692 --> 00:13:35,570
soon as a feature is ready and more and more times.

216
00:13:35,640 --> 00:13:39,934
And because you're doing it at the feature level and then also on every subsequent

217
00:13:39,982 --> 00:13:44,018
merge you are testing, sometimes we see 40

218
00:13:44,104 --> 00:13:47,326
times more often, which sounds fake, but no

219
00:13:47,368 --> 00:13:50,438
people have done it, which is really absolutely

220
00:13:50,524 --> 00:13:53,670
crazy, but it can never be a bad thing.

221
00:13:53,740 --> 00:13:56,806
More and more and more testing is absolutely what you want.

222
00:13:56,908 --> 00:14:00,074
It's never a bad thing to catch bugs earlier. And your

223
00:14:00,112 --> 00:14:03,526
team is often very thankful because nobody likes

224
00:14:03,558 --> 00:14:06,826
to delay a release. And one of the

225
00:14:06,848 --> 00:14:10,266
virtues of ephemeral environments is they're on demand. So you should

226
00:14:10,288 --> 00:14:13,306
absolutely go all in with this, and you

227
00:14:13,328 --> 00:14:16,478
should make them Gitops first. They should really spin up when a

228
00:14:16,484 --> 00:14:19,758
branch is ready. I know I keep saying this, but it's absolutely

229
00:14:19,844 --> 00:14:23,854
essential to them. There really shouldn't be any manual intervention

230
00:14:23,902 --> 00:14:27,806
that prevents people from using them. So if they are Gitops

231
00:14:27,838 --> 00:14:31,634
enabled, they should be there on significant code

232
00:14:31,672 --> 00:14:35,998
changes, and then they should go away on their own to not incur additional

233
00:14:36,094 --> 00:14:40,022
cloud costs. And because of this, there's no

234
00:14:40,076 --> 00:14:43,766
time limit, really. You can have async collab, let's say

235
00:14:43,788 --> 00:14:47,142
you're working in the morning and you want to collaborate with someone who

236
00:14:47,196 --> 00:14:50,482
has later hours than you. You can just spin it down,

237
00:14:50,556 --> 00:14:54,266
wait a few hours, and then your coworker can spin it up and work

238
00:14:54,288 --> 00:14:57,946
on it then. And nobody's getting blocked because everyone's on their

239
00:14:57,968 --> 00:15:01,642
own schedule and you're not worried about incurring additional

240
00:15:01,706 --> 00:15:05,322
costs because this is so much cheaper than your current static

241
00:15:05,386 --> 00:15:09,262
solution. And it's really nice because you will have more of these.

242
00:15:09,316 --> 00:15:12,682
So everyone can have as many

243
00:15:12,756 --> 00:15:16,818
environments as they want. You could really even have one per branch and

244
00:15:16,904 --> 00:15:20,946
have them just whenever you need them, which is

245
00:15:21,048 --> 00:15:24,738
huge virtue. And this is a very important

246
00:15:24,824 --> 00:15:28,406
section. It's something that you absolutely can't overlook. But I would

247
00:15:28,428 --> 00:15:31,666
like to say, I mean, I'd like to say that because they're isolated,

248
00:15:31,778 --> 00:15:34,710
ephemeral environments tend to be more secure.

249
00:15:36,170 --> 00:15:39,674
They should be entirely decoupled from any dependencies or other

250
00:15:39,712 --> 00:15:43,370
environments. And this isn't just for security reasons, but also

251
00:15:43,440 --> 00:15:47,258
just so in case something breaks, they don't take down your entire

252
00:15:47,344 --> 00:15:50,666
environment pipeline. But you still should be sure to take a few

253
00:15:50,688 --> 00:15:55,002
measures into account. One of those is sanitizing your data. You should remove

254
00:15:55,066 --> 00:15:58,570
any PIi just because you shouldn't be testing

255
00:15:58,650 --> 00:16:01,834
with it anyway. So not exclusive to ephemeral environments,

256
00:16:01,882 --> 00:16:05,442
of course, but still very important. And then you should

257
00:16:05,496 --> 00:16:09,780
enable SSO. You really shouldn't be doing any of

258
00:16:10,230 --> 00:16:13,554
the authentication logic on your own. That's just

259
00:16:13,592 --> 00:16:17,410
one more thing to worry about, one more vulnerability. And when you use an SSO

260
00:16:17,490 --> 00:16:20,840
provider, maybe you're using GitHub, maybe Google,

261
00:16:21,290 --> 00:16:24,934
then you don't really need to worry about any

262
00:16:24,972 --> 00:16:27,640
breaches because that's on them.

263
00:16:28,430 --> 00:16:32,022
But you are also able to have introduced granularity

264
00:16:32,086 --> 00:16:35,594
and make sure that you're only allowing people from your

265
00:16:35,632 --> 00:16:39,946
organization or people who might be stakeholders. And then

266
00:16:40,048 --> 00:16:43,166
the last, but certainly not the least, probably one

267
00:16:43,188 --> 00:16:46,734
of the most important considerations for ephemeral environments is

268
00:16:46,772 --> 00:16:50,286
cost control. And this is really nice because since they

269
00:16:50,308 --> 00:16:54,350
are ephemeral by nature, they're short lived, they are really

270
00:16:54,420 --> 00:16:57,842
cost efficient by nature, which is not just great for your

271
00:16:57,896 --> 00:17:01,646
organization's wallet, but also great for the environment, because you're

272
00:17:01,678 --> 00:17:04,386
not using electricity that you don't need to be using.

273
00:17:04,568 --> 00:17:07,734
If you're using the cloud in an elastic way, you're really only using

274
00:17:07,772 --> 00:17:11,654
the resources that you need. And this takes

275
00:17:11,692 --> 00:17:15,138
us into another great benefit, is you don't really tend

276
00:17:15,154 --> 00:17:19,086
to encounter the same resource constraints that your team might have had previously.

277
00:17:19,218 --> 00:17:23,786
And a big part of this is because

278
00:17:23,968 --> 00:17:28,106
when you have just a few static environments going 24/7

279
00:17:28,288 --> 00:17:31,018
that's just a lot of time that you're not using them. So of course you

280
00:17:31,024 --> 00:17:34,466
can only afford a few of them to really be cost effective.

281
00:17:34,518 --> 00:17:38,254
But if you have environments that only last for a few hours, if even

282
00:17:38,292 --> 00:17:41,838
that each, you can really have as many environments as you want at

283
00:17:41,844 --> 00:17:45,230
a given time and still come out ahead with your savings.

284
00:17:45,390 --> 00:17:48,514
I wanted to thank you very much for joining me today as I talked

285
00:17:48,552 --> 00:17:52,274
about ephemeral environments. I certainly hope you found

286
00:17:52,312 --> 00:17:56,050
something useful from this presentation and if you have any more questions

287
00:17:56,120 --> 00:17:59,494
or would like to talk more or find out how you can contribute to

288
00:17:59,532 --> 00:18:02,422
ephemeralinvironments IO, you can email me.

289
00:18:02,476 --> 00:18:06,518
Natalie at Shipyard build always happy to talk about this and

290
00:18:06,684 --> 00:18:10,294
I thoroughly enjoy giving this presentation. I love talking about

291
00:18:10,332 --> 00:18:14,166
ephemeral environments and I think that they're just such a fun and interesting

292
00:18:14,268 --> 00:18:18,118
topic, and I'm very glad that they've picked up the pace in recent years

293
00:18:18,204 --> 00:18:21,934
and I'm looking forward to see seeing what the environment landscape looks

294
00:18:21,972 --> 00:18:25,806
like in a few years. Well, thank you again and I hope you enjoy the

295
00:18:25,828 --> 00:18:29,582
rest of comp 42 cloud native. There are some great talks coming up

296
00:18:29,636 --> 00:18:33,594
and I know you won't be disappointed. All right, have a wonderful

297
00:18:33,642 --> 00:18:35,358
rest of your day. Thank you.

