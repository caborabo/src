1
00:00:25,570 --> 00:00:29,320
Next 20 minutes, I'm going to speak about

2
00:00:30,010 --> 00:00:34,006
platformless, a new concept and how

3
00:00:34,108 --> 00:00:38,230
platformless is affecting enterprise software engineering.

4
00:00:38,730 --> 00:00:43,426
I would like to start this story with greek

5
00:00:43,618 --> 00:00:47,494
myth that in the ancient days we used to

6
00:00:47,532 --> 00:00:50,874
think that Atlas is holding

7
00:00:50,922 --> 00:00:54,510
the world. So everybody thought about this

8
00:00:54,580 --> 00:00:57,310
before they realized the truth.

9
00:00:58,370 --> 00:01:01,562
Similarly, inside an enterprise,

10
00:01:01,706 --> 00:01:06,018
Atlas is the platform. Because any

11
00:01:06,104 --> 00:01:10,174
IT expenditure or any IT related

12
00:01:10,302 --> 00:01:13,070
work that we do as a developer,

13
00:01:13,150 --> 00:01:15,898
architect, project manager,

14
00:01:16,094 --> 00:01:20,002
CIO, all these activities are related

15
00:01:20,066 --> 00:01:23,414
to providing some kind of digital experience

16
00:01:23,612 --> 00:01:27,282
to our end users. We need a platform,

17
00:01:27,436 --> 00:01:31,386
and if you talk to most of the technical teams inside

18
00:01:31,568 --> 00:01:34,970
enterprises, they are building platforms.

19
00:01:35,390 --> 00:01:39,340
Platform is a necessity. But there's a problem.

20
00:01:39,970 --> 00:01:44,234
The problem is application development teams are focusing

21
00:01:44,282 --> 00:01:48,394
on building a platform rather than delivering

22
00:01:48,522 --> 00:01:52,646
applications. So I am in bunch of CTO clubs

23
00:01:52,698 --> 00:01:56,340
in the Bay Area, and whenever we get together,

24
00:01:56,950 --> 00:02:01,166
most of the CTOs and CIOs, even architects

25
00:02:01,198 --> 00:02:05,230
are discussing about the teams are mainly focusing on

26
00:02:05,320 --> 00:02:09,378
Kubernetes, how you can run a service mesh,

27
00:02:09,554 --> 00:02:12,950
how you can have resiliency on microservices,

28
00:02:13,530 --> 00:02:17,438
things like that. Related to, and unfortunately

29
00:02:17,554 --> 00:02:21,254
with that trend, these development

30
00:02:21,302 --> 00:02:24,918
teams are not focusing on application development.

31
00:02:25,094 --> 00:02:29,514
As a result, business is not benefiting what

32
00:02:29,632 --> 00:02:33,360
the technical team should deliver to the business.

33
00:02:33,970 --> 00:02:38,080
So that's where there should be a change

34
00:02:38,450 --> 00:02:41,870
happen in the industry. And we think

35
00:02:41,940 --> 00:02:45,218
it as a focus shift from

36
00:02:45,384 --> 00:02:48,690
platforms, CTO, application development.

37
00:02:49,190 --> 00:02:52,210
So how you can do that,

38
00:02:52,360 --> 00:02:56,774
to do that, the platform should be there, but it

39
00:02:56,812 --> 00:02:59,560
should disappear from the focus.

40
00:03:00,250 --> 00:03:04,066
So that's where this concept or analogy

41
00:03:04,098 --> 00:03:07,666
like dark matter and dark energy will come and

42
00:03:07,788 --> 00:03:11,626
play a role, because even dark matter

43
00:03:11,728 --> 00:03:15,110
is not visible, but it is supporting

44
00:03:15,270 --> 00:03:19,478
to have the universe, these galaxies

45
00:03:19,654 --> 00:03:23,294
and all the different components that we

46
00:03:23,332 --> 00:03:26,846
can find in the space. I'm not going

47
00:03:26,868 --> 00:03:30,670
to talk about this too much. We are going to

48
00:03:30,740 --> 00:03:34,654
tell more about this concept during a conference

49
00:03:34,702 --> 00:03:37,762
that we are running that's called WSO two con

50
00:03:37,896 --> 00:03:41,598
and it's posting on May 7, CTO 9th

51
00:03:41,694 --> 00:03:45,206
in Florida. So if you are interested to get

52
00:03:45,228 --> 00:03:49,602
to know more about how dark matter and platformless

53
00:03:49,666 --> 00:03:53,206
connected, please come to the conference and we

54
00:03:53,228 --> 00:03:57,286
will tell you this story. So, moving back

55
00:03:57,308 --> 00:04:00,714
to the platforms, let's dig in deep into what

56
00:04:00,752 --> 00:04:04,714
exactly that two layers I highlighted earlier on

57
00:04:04,752 --> 00:04:08,922
digital experiences and then platform looks

58
00:04:08,976 --> 00:04:12,302
like. So if you look at the platform,

59
00:04:12,436 --> 00:04:15,322
there are two main layers.

60
00:04:15,466 --> 00:04:19,166
One is a business platform and the second one

61
00:04:19,268 --> 00:04:23,646
we call it as an internal developer platform. So recently

62
00:04:23,758 --> 00:04:27,282
this term internal developer portal also came

63
00:04:27,336 --> 00:04:30,578
to the picture that some of

64
00:04:30,584 --> 00:04:34,594
the analyst firms are referring the internal developer platform

65
00:04:34,712 --> 00:04:38,194
as an internal developer portal. So there

66
00:04:38,232 --> 00:04:41,750
are bunch of different stakeholders inside

67
00:04:41,820 --> 00:04:45,110
the enterprise responsible for

68
00:04:45,180 --> 00:04:48,902
these different layers. If you look at the digital experiences

69
00:04:48,966 --> 00:04:52,666
layer, the product owners are responsible to

70
00:04:52,688 --> 00:04:56,506
deliver that. And if you look at the business platform that I

71
00:04:56,528 --> 00:05:00,194
have highlighted here, the chief architect

72
00:05:00,262 --> 00:05:03,998
and application architects are responsible to deliver that.

73
00:05:04,164 --> 00:05:08,014
And then the internal developer platform has become

74
00:05:08,212 --> 00:05:11,742
the main focus of this new role called

75
00:05:11,796 --> 00:05:15,010
platform engineering. And platform engineering teams are

76
00:05:15,080 --> 00:05:18,254
mainly focusing on delivering that internal

77
00:05:18,302 --> 00:05:21,842
developer platform. So the platform is

78
00:05:21,896 --> 00:05:25,794
consist with these two things, business platform and internal

79
00:05:25,842 --> 00:05:29,542
developer platform. So why

80
00:05:29,596 --> 00:05:33,926
the focus should shift from the building platforms into

81
00:05:34,028 --> 00:05:37,458
application development? It's basically the

82
00:05:37,564 --> 00:05:41,674
business advantage or the competitive advantages an

83
00:05:41,712 --> 00:05:46,502
enterprise can get coming from the digital experiences

84
00:05:46,646 --> 00:05:50,086
and the business platform that they are building, not from

85
00:05:50,128 --> 00:05:53,422
the internal developer platform. Because internal developer platform

86
00:05:53,476 --> 00:05:57,534
is a technical platform and those capabilities are common for

87
00:05:57,572 --> 00:06:01,726
any enterprise. So there won't be a big business

88
00:06:01,828 --> 00:06:05,506
advantage the organization will get by

89
00:06:05,608 --> 00:06:08,020
mainly focusing on that,

90
00:06:08,950 --> 00:06:13,362
kind of elaborate more on the

91
00:06:13,496 --> 00:06:17,014
internal developer platform. We can even divide it into

92
00:06:17,132 --> 00:06:21,160
two sections, an enterprise software engineering platform

93
00:06:21,690 --> 00:06:24,520
and an infrastructure level platform.

94
00:06:24,970 --> 00:06:29,126
Those two are connecting and creating this internal

95
00:06:29,158 --> 00:06:32,586
developer platform mainly. Today,

96
00:06:32,688 --> 00:06:36,854
most of the platform teams are mainly focusing

97
00:06:36,902 --> 00:06:40,018
on the delivery platform, not the enterprise

98
00:06:40,054 --> 00:06:43,920
software engineering platform. So that's an issue

99
00:06:44,290 --> 00:06:48,218
because the delivery should contain

100
00:06:48,314 --> 00:06:51,690
the enterprise software engineering capabilities

101
00:06:51,770 --> 00:06:55,106
as well. Otherwise application developers will be

102
00:06:55,208 --> 00:07:00,046
not that productive in the platform. And if the application developers

103
00:07:00,158 --> 00:07:02,820
are not productive on the platform,

104
00:07:03,190 --> 00:07:07,126
we might go back to these shadow it type of approaches and

105
00:07:07,228 --> 00:07:10,966
application developers will build applications outside

106
00:07:11,068 --> 00:07:14,514
the platform. So this internal

107
00:07:14,562 --> 00:07:18,454
developer platform is facilitating the enterprise software engineering.

108
00:07:18,502 --> 00:07:22,774
As I highlighted in this diagram, it is addressing the development

109
00:07:22,822 --> 00:07:26,118
time as well as it is addressing the runtime.

110
00:07:26,294 --> 00:07:29,890
And then to have more collaboration

111
00:07:30,070 --> 00:07:33,310
you need a marketplace. So that way you design

112
00:07:33,460 --> 00:07:37,310
APIs, services and then it will be available

113
00:07:37,460 --> 00:07:41,722
for discovery and consumption for the application developers.

114
00:07:41,786 --> 00:07:45,774
And application developers can use these concepts like domain

115
00:07:45,822 --> 00:07:50,078
driven design to group these workloads and at the runtime

116
00:07:50,174 --> 00:07:53,794
the same concept should appear as well. So I

117
00:07:53,832 --> 00:07:56,690
introduced a concept called Cell based architecture.

118
00:07:56,850 --> 00:08:00,434
So that's where the runtime is contained

119
00:08:00,482 --> 00:08:04,054
with the cells, that cell A, cell B as

120
00:08:04,092 --> 00:08:07,974
I have highlighted, and the components inside the cell connected

121
00:08:08,022 --> 00:08:11,594
with a mesh. And then you can

122
00:08:11,632 --> 00:08:14,730
secure this environment by bringing various

123
00:08:15,310 --> 00:08:17,846
security principles, authorization,

124
00:08:18,038 --> 00:08:21,094
authentication, entitlement,

125
00:08:21,222 --> 00:08:25,322
so on and so forth. And that way you can build a zero trust environment

126
00:08:25,386 --> 00:08:29,466
and there should be a synergy in between the development time and runtime.

127
00:08:29,578 --> 00:08:33,090
If you are interested about the Sylvester architecture you can read

128
00:08:33,160 --> 00:08:36,754
more. So if you Google from my

129
00:08:36,792 --> 00:08:40,114
name and Sylves architecture, you will get

130
00:08:40,152 --> 00:08:44,100
the paper and you can go through that in detail.

131
00:08:45,370 --> 00:08:48,930
So then going back to this platformless

132
00:08:49,010 --> 00:08:52,886
concept, it contains four fundamental things.

133
00:08:53,068 --> 00:08:57,094
API first, cloud native middleware, developer experience and

134
00:08:57,132 --> 00:09:00,086
then obviously the platform engineering.

135
00:09:00,278 --> 00:09:04,422
So the API

136
00:09:04,486 --> 00:09:08,102
first approach is basically in everywhere

137
00:09:08,166 --> 00:09:11,642
in the organization. You should be able to expose APIs,

138
00:09:11,786 --> 00:09:14,954
secure them, and then you should have internal

139
00:09:15,002 --> 00:09:18,574
access as well as external access to

140
00:09:18,612 --> 00:09:22,074
these APIs. And it has to be facilitated

141
00:09:22,122 --> 00:09:26,242
by the platform that the technical team shouldn't be worried too

142
00:09:26,296 --> 00:09:29,246
much about creating these APIs.

143
00:09:29,358 --> 00:09:32,974
The platform should enable the developers

144
00:09:33,022 --> 00:09:36,978
to create APIs and then publish it in the marketplace

145
00:09:37,074 --> 00:09:40,642
and let the consumers to consume the APIs.

146
00:09:40,706 --> 00:09:44,290
And it can happen at various levels, data APIs,

147
00:09:44,370 --> 00:09:47,834
domain APIs and then at the edge you will get

148
00:09:47,872 --> 00:09:51,100
the experience of edge APIs as well.

149
00:09:51,470 --> 00:09:54,170
Then cloud native middleware is really important.

150
00:09:54,320 --> 00:09:58,614
Middleware is a bit of outdated term, but still middleware

151
00:09:58,662 --> 00:10:02,750
is important, but it has to mainly

152
00:10:03,570 --> 00:10:07,130
model into cloud native architecture.

153
00:10:07,290 --> 00:10:10,794
So I wrote an article some time back by describing middleware

154
00:10:10,842 --> 00:10:13,614
as disappearing into code and infrastructure.

155
00:10:13,742 --> 00:10:17,330
It's already happening. But having

156
00:10:17,400 --> 00:10:21,234
this middleware either in the code or infrastructure is

157
00:10:21,272 --> 00:10:24,594
pretty important. That's where the platform should provide these

158
00:10:24,632 --> 00:10:29,026
middleware capabilities. As example, the security components

159
00:10:29,058 --> 00:10:33,618
that we discussed and various other runtimes like service measures,

160
00:10:33,714 --> 00:10:37,240
message brokers and way to

161
00:10:37,710 --> 00:10:40,650
secure the APIs through API gateways.

162
00:10:41,470 --> 00:10:44,634
All these type of supportive things that you

163
00:10:44,752 --> 00:10:48,940
need to build an application should come in the cloud native middle

164
00:10:49,470 --> 00:10:54,202
and then the developers are the craftments of digital experiences.

165
00:10:54,266 --> 00:10:58,334
So developer experience is really important. So having a

166
00:10:58,372 --> 00:11:01,710
rich developer experience in the platform is key.

167
00:11:01,780 --> 00:11:05,534
So it has CTO be self service and pipeline

168
00:11:05,582 --> 00:11:09,314
tune. That means like when developer starts doing

169
00:11:09,352 --> 00:11:12,786
this application development, it should automatically connect to

170
00:11:12,808 --> 00:11:16,578
the organization approved pipeline

171
00:11:16,754 --> 00:11:20,630
and then they should be able to collaborate these different

172
00:11:20,700 --> 00:11:24,402
type of workloads and consume

173
00:11:24,466 --> 00:11:28,146
them. And sharing should be there and high agility

174
00:11:28,258 --> 00:11:31,514
should be there for the developers. And developers should be able to

175
00:11:31,552 --> 00:11:35,226
use their favorite tools and connect to the platform.

176
00:11:35,328 --> 00:11:39,254
As an example, if developers are preferred to use vs

177
00:11:39,302 --> 00:11:43,102
code as an IDE, they should be able to use

178
00:11:43,156 --> 00:11:46,922
that and if they are willing to use command prompt

179
00:11:47,066 --> 00:11:50,922
to do CLI to do a lot of development,

180
00:11:51,066 --> 00:11:55,074
the platform should support a CLI and platform itself should

181
00:11:55,112 --> 00:11:59,426
have some set of system APIs that the

182
00:11:59,448 --> 00:12:03,166
developers can use it to extend some of these capabilities.

183
00:12:03,358 --> 00:12:07,080
Then the platform engineering is the foundation and the result

184
00:12:07,690 --> 00:12:12,050
should be platformless. So it should provide all these capabilities

185
00:12:12,130 --> 00:12:15,474
and provide that application development environment

186
00:12:15,522 --> 00:12:18,714
for the developers at the development time and

187
00:12:18,752 --> 00:12:22,934
then CI CD during the development

188
00:12:22,982 --> 00:12:26,822
phase two production and then how you can monitor

189
00:12:26,966 --> 00:12:30,574
and manage this development runtime and have

190
00:12:30,612 --> 00:12:33,918
a proper application lifecycle. So you create,

191
00:12:34,004 --> 00:12:37,742
you run and you manage and you deprecate these

192
00:12:37,796 --> 00:12:41,326
runtimes based on the

193
00:12:41,428 --> 00:12:44,786
application needs. And you should be able to find the

194
00:12:44,808 --> 00:12:48,206
dependencies and all the related

195
00:12:48,318 --> 00:12:52,146
observability as well as debugging capabilities as well.

196
00:12:52,248 --> 00:12:55,986
So platform engineering is not only about DevOps,

197
00:12:56,018 --> 00:12:59,714
it's about site reliability engineering

198
00:12:59,842 --> 00:13:04,022
as well as the platform engineering should have a

199
00:13:04,076 --> 00:13:07,422
fair understanding about the application development

200
00:13:07,586 --> 00:13:11,546
because they have to provide this rich developer experience

201
00:13:11,728 --> 00:13:16,534
by understanding the developer

202
00:13:16,582 --> 00:13:21,310
needs. So that's where a platform team will really important

203
00:13:21,460 --> 00:13:25,070
consist with platform engineers as well as people

204
00:13:25,140 --> 00:13:28,910
who got some knowledge about application development.

205
00:13:29,330 --> 00:13:32,602
So to have another analogy about

206
00:13:32,676 --> 00:13:36,194
platformless, earlier days when it comes

207
00:13:36,232 --> 00:13:39,502
to an enterprise, to have emails

208
00:13:39,566 --> 00:13:44,050
like we used to set up these email servers

209
00:13:44,390 --> 00:13:47,666
and then we used to set up chat servers,

210
00:13:47,778 --> 00:13:51,762
all these work related systems

211
00:13:51,826 --> 00:13:55,618
we used to run. But today any enterprise

212
00:13:55,714 --> 00:13:59,034
that will leverage capabilities provided by

213
00:13:59,072 --> 00:14:03,798
Google Workspace or Microsoft 365 or similar solutions

214
00:14:03,894 --> 00:14:07,914
instead of running these servers. So it's basically not

215
00:14:07,952 --> 00:14:11,434
about focusing on running these servers,

216
00:14:11,562 --> 00:14:15,326
mainly focusing on the consumption and the experience that

217
00:14:15,348 --> 00:14:18,990
you get. So basically it's about the collaboration,

218
00:14:19,330 --> 00:14:22,774
not about how you run this workload.

219
00:14:22,922 --> 00:14:26,482
So similarly, on the platform

220
00:14:26,616 --> 00:14:30,562
less environment, just focus on the application

221
00:14:30,696 --> 00:14:34,906
development and you will just add developers

222
00:14:35,038 --> 00:14:39,062
to the platform for them to focusing on business problems

223
00:14:39,196 --> 00:14:42,710
and deliver applications for the enterprise.

224
00:14:43,610 --> 00:14:46,822
So how you can achieve it, there can be two

225
00:14:46,876 --> 00:14:50,634
parts. First part is you build it. So that's where you

226
00:14:50,672 --> 00:14:53,642
have CTO, have a dedicated platform engineering team,

227
00:14:53,776 --> 00:14:57,482
treat the platform as a product and look

228
00:14:57,536 --> 00:15:01,742
at the technology advancements happening and keep

229
00:15:01,796 --> 00:15:04,480
an eye on the future technology changes,

230
00:15:05,250 --> 00:15:08,734
understand the developer needs and build that. You can start

231
00:15:08,772 --> 00:15:12,862
it from scratch, or you can use a framework and build your

232
00:15:12,916 --> 00:15:16,274
platform on top of that. So main thing is

233
00:15:16,312 --> 00:15:19,906
it has to be a dedicated team and it has to treat as a

234
00:15:19,928 --> 00:15:23,566
product and you have to keep on maintaining

235
00:15:23,598 --> 00:15:26,918
it. Just building it and handovering it to the

236
00:15:27,004 --> 00:15:30,674
application developers will not work. The platform engineering

237
00:15:30,722 --> 00:15:34,166
team should mainly focus on that and build it.

238
00:15:34,188 --> 00:15:37,910
WSO it's bigger investment because

239
00:15:37,980 --> 00:15:41,834
it takes time, specific skill set as well

240
00:15:41,872 --> 00:15:46,410
as you have to maintain this, as I explained earlier,

241
00:15:46,750 --> 00:15:50,558
and then as a technology provider, we are helping people

242
00:15:50,644 --> 00:15:54,106
who's building that. That's where we provide API

243
00:15:54,138 --> 00:15:57,754
management integration and identity and access management

244
00:15:57,802 --> 00:16:01,774
products. If somebody is building a platform, they can use all

245
00:16:01,812 --> 00:16:04,914
this cloud native middleware runtimes and build

246
00:16:04,952 --> 00:16:09,202
the platform. So the other part is you

247
00:16:09,256 --> 00:16:12,926
buy off the shelf internal developer

248
00:16:12,958 --> 00:16:16,886
platform when you're choosing an internal developer platform, you have to

249
00:16:16,908 --> 00:16:20,454
take a look at whether it's providing a platformless experience

250
00:16:20,652 --> 00:16:24,402
and the four key features that I explained.

251
00:16:24,546 --> 00:16:27,342
API efforts, cloud native, middleware,

252
00:16:27,506 --> 00:16:31,002
developer experience and platform engineering should

253
00:16:31,056 --> 00:16:34,662
deliver from this platform. There are many choices

254
00:16:34,726 --> 00:16:37,930
in the market, so you can go through them and then

255
00:16:38,000 --> 00:16:41,998
see whether it is meeting your requirements as well as

256
00:16:42,164 --> 00:16:45,594
whether it's addressing platformless capabilities.

257
00:16:45,722 --> 00:16:48,880
So as a technology provider, we have a

258
00:16:49,490 --> 00:16:53,198
solution built that we call it as choreo. Choreo stands

259
00:16:53,214 --> 00:16:56,734
for choreography and how you can choreograph

260
00:16:56,782 --> 00:17:00,674
different type of workloads at the development time,

261
00:17:00,792 --> 00:17:04,114
at the runtime, and not only that at

262
00:17:04,152 --> 00:17:07,526
the people level or the development teams level, how you can

263
00:17:07,628 --> 00:17:10,886
collaborate with each other. So if you are interested

264
00:17:10,988 --> 00:17:14,722
then you can go to wsru.com slash courier

265
00:17:14,786 --> 00:17:17,926
and take a look how this internal developer

266
00:17:17,958 --> 00:17:21,594
platform looks like and whether it is fit into your

267
00:17:21,712 --> 00:17:25,034
requirements. It's a SaaS experience WSo you can just

268
00:17:25,072 --> 00:17:28,810
sign up and try it out. So in summary,

269
00:17:29,550 --> 00:17:33,374
the digital experiences are the key when it comes to an

270
00:17:33,412 --> 00:17:36,782
enterprise. So you have to focus on delivering these

271
00:17:36,836 --> 00:17:40,590
digital experiences. That's where you can create a

272
00:17:40,660 --> 00:17:46,418
differentiator in the market and then the

273
00:17:46,584 --> 00:17:49,986
digital experiences should be modern and it

274
00:17:50,008 --> 00:17:53,874
has to leverage cloud native concepts because we

275
00:17:53,912 --> 00:17:58,086
are in a cloud native era. So how you can use those

276
00:17:58,188 --> 00:18:01,720
different type of cloud native skills and

277
00:18:02,330 --> 00:18:05,638
how you can use this platform is very important.

278
00:18:05,804 --> 00:18:09,638
So platform less is the concept that you can mainly

279
00:18:09,734 --> 00:18:13,530
focus on the application development and then have less

280
00:18:13,600 --> 00:18:17,386
focus on the technical platforms that you are building.

281
00:18:17,568 --> 00:18:21,050
And I think with the requirements

282
00:18:21,130 --> 00:18:24,910
coming from the business, expectations coming

283
00:18:24,980 --> 00:18:28,670
from the end users or the consumers, it's really

284
00:18:28,740 --> 00:18:31,982
important to look at this concept and it's time

285
00:18:32,036 --> 00:18:35,454
to go platformless. So we wrote

286
00:18:35,502 --> 00:18:39,422
a paper about this concept. It's called the platformless

287
00:18:39,486 --> 00:18:43,470
manifesto and it is available under this URL

288
00:18:43,550 --> 00:18:47,298
and it is released using

289
00:18:47,464 --> 00:18:52,250
creative comments by phototo.

290
00:18:52,350 --> 00:18:56,054
So feel free to send a PR with some

291
00:18:56,092 --> 00:18:59,766
improvements or any suggestions that you think. It's currently

292
00:18:59,868 --> 00:19:03,514
under zero eight version and we are in the process of

293
00:19:03,552 --> 00:19:07,082
bringing it to 10 with your feedback as well.

294
00:19:07,216 --> 00:19:11,422
So read the paper and if you have any suggestions, please send

295
00:19:11,476 --> 00:19:14,894
this information. So that's about it.

296
00:19:14,932 --> 00:19:18,526
And if you like to have productive conversations and a

297
00:19:18,548 --> 00:19:22,238
detailed conversation about these concepts, these are my contact

298
00:19:22,324 --> 00:19:27,778
details. I blog in my personal blog blog architectoarchitect.com

299
00:19:27,944 --> 00:19:31,406
and you can read all my readings from much rank

300
00:19:31,438 --> 00:19:34,706
URL I have provided and you can email me on

301
00:19:34,728 --> 00:19:38,898
my email address and you can connect with me in LinkedIn

302
00:19:38,994 --> 00:19:42,358
as well as x platform. These are my contact

303
00:19:42,444 --> 00:19:46,326
details, and if you have any question, you can post it in

304
00:19:46,348 --> 00:19:50,310
the channel. And I am happy to answer

305
00:19:50,380 --> 00:19:53,826
those questions as well. So till

306
00:19:53,858 --> 00:19:57,270
we meet in another conference, thank you very much.

307
00:19:57,420 --> 00:20:00,286
Hope this is useful for.

