1
00:00:27,360 --> 00:00:30,472
Hey everyone, my name is Divine Odaz eight. Today I'm going to be

2
00:00:30,488 --> 00:00:34,848
talking about how you can go from metric tsunami to actionable insights

3
00:00:34,896 --> 00:00:37,764
to simplify your database troubleshooting.

4
00:00:39,624 --> 00:00:43,600
So a little bit about me I'm a technology evangelist at several nines,

5
00:00:43,712 --> 00:00:47,032
a company that empowers organizations to take control

6
00:00:47,088 --> 00:00:50,776
of their data on every environment, giving them a

7
00:00:50,960 --> 00:00:55,336
full lifecycle, dbas experience and mostly certified Kubernetes

8
00:00:55,400 --> 00:00:59,776
application developer is certified PWA solution architecture

9
00:00:59,870 --> 00:01:03,984
and I'm very much excited to speak at Con 42 observability

10
00:01:04,484 --> 00:01:08,156
this 2024. So here's

11
00:01:08,180 --> 00:01:11,740
the agenda for my talk. So we're going to start by discussing

12
00:01:11,772 --> 00:01:16,044
the developer dilemma and also limitations of

13
00:01:16,164 --> 00:01:19,292
legacy database monitoring tools. And then we'll talk about

14
00:01:19,348 --> 00:01:22,940
how you can simplify database troubleshooting with

15
00:01:22,972 --> 00:01:26,436
cluster control. And look at case study for organizations

16
00:01:26,460 --> 00:01:30,436
that are using cluster control to monitor and simplify

17
00:01:30,540 --> 00:01:32,904
their database troubleshooting.

18
00:01:33,804 --> 00:01:37,972
So is this you, are you drowning database metrics?

19
00:01:38,028 --> 00:01:41,108
Do you feel like you're not empowered by overwhelmed?

20
00:01:41,276 --> 00:01:42,904
When issues arise,

21
00:01:44,004 --> 00:01:47,864
you have to navigate through multiple tools for database observability.

22
00:01:49,884 --> 00:01:54,346
This is because of the limitation of legacy database monitoring tools.

23
00:01:54,450 --> 00:01:58,250
So yeah, first the major limitation is graph overload.

24
00:01:58,362 --> 00:02:01,882
Yet these tools have been able to capture a lot of metrics and data

25
00:02:01,938 --> 00:02:05,434
from system operations and database operations.

26
00:02:05,594 --> 00:02:09,586
They've also be able to visualize it, right. In beautiful graphs.

27
00:02:09,610 --> 00:02:13,322
But then again, as developers who control much of the environment

28
00:02:13,458 --> 00:02:17,074
today, right, you don't, most developers don't

29
00:02:17,114 --> 00:02:20,456
understand most of the metrics, right? They are being given,

30
00:02:20,520 --> 00:02:23,672
they just want simplified, actionable insight,

31
00:02:23,728 --> 00:02:27,872
right? Actionable metrics, what the, what they really need to solve their problem

32
00:02:27,928 --> 00:02:31,208
as at that time, and also limited DB support.

33
00:02:31,296 --> 00:02:34,496
So you, you have to use it to,

34
00:02:34,520 --> 00:02:38,072
to monitor your database, right? Your postgres database.

35
00:02:38,168 --> 00:02:41,384
But then again, most organizations don't use just

36
00:02:41,424 --> 00:02:44,688
one database, right? So then again you need another tool

37
00:02:44,736 --> 00:02:48,544
for MySQL, you use Redis, you need another tool for redis

38
00:02:48,704 --> 00:02:52,254
or you use any so

39
00:02:52,294 --> 00:02:56,006
many other database, there a lot of database around for specific problems.

40
00:02:56,030 --> 00:02:59,542
And most organizations use diverse database

41
00:02:59,598 --> 00:03:02,910
environments. So you're stuck with the reason of multiple

42
00:03:02,942 --> 00:03:06,478
tools, which brings about cognitive overload, right,

43
00:03:06,526 --> 00:03:10,782
reduces developer productivity. And another major limitation is

44
00:03:10,958 --> 00:03:14,502
visibility without action. So yes, that is the default, right,

45
00:03:14,558 --> 00:03:18,166
monitoring. But then again, beyond monitoring, beyond observability,

46
00:03:18,270 --> 00:03:21,910
you need to be able to like take actions and like resolved issue,

47
00:03:21,982 --> 00:03:25,790
right? So most of these tools just offer that monitoring,

48
00:03:25,982 --> 00:03:29,526
right? The legacy to software, the monitoring which makes it that you

49
00:03:29,550 --> 00:03:33,574
have to like go implement either manual intervention

50
00:03:33,654 --> 00:03:36,886
or using a different tool to get. I dreams about

51
00:03:36,950 --> 00:03:40,766
cognitive load, cognitive overload. And so

52
00:03:40,870 --> 00:03:44,702
yeah, if you're tired of the limitations of these legacy

53
00:03:44,758 --> 00:03:48,430
tools, you can try cluster control. And that's what we're going to look at

54
00:03:48,462 --> 00:03:52,754
in this talk. So next, simplifying database

55
00:03:52,794 --> 00:03:56,658
troubleshooting with cluster control. So cluster control empowers

56
00:03:56,706 --> 00:04:00,202
you organizations to standardize the

57
00:04:00,218 --> 00:04:04,586
full life cycle operations of their databases, right? It's self hosted,

58
00:04:04,730 --> 00:04:08,314
offers a community version as free forever, and supports

59
00:04:08,354 --> 00:04:11,266
most open source and preparatory database.

60
00:04:11,410 --> 00:04:14,810
You remember what I talked about having devs database environment,

61
00:04:14,962 --> 00:04:17,964
right? So with cluster control, you get Redis,

62
00:04:18,124 --> 00:04:23,020
you'll be able to monitor Redis, be able to monitor postgres,

63
00:04:23,092 --> 00:04:27,204
MySQL, Galleria and several other databases, and also proprietary databases

64
00:04:27,284 --> 00:04:31,652
like MySQL server. Also you get a centralized monitoring,

65
00:04:31,708 --> 00:04:35,860
you're able to see everything on our environment and it supports various

66
00:04:35,972 --> 00:04:40,012
tooling. You can use terraform to orchestrate

67
00:04:40,108 --> 00:04:44,368
cluster control and use ansible and properties. So observability

68
00:04:44,456 --> 00:04:48,072
with coastal control. So just like I talked about in the previous slide,

69
00:04:48,208 --> 00:04:52,184
holistic dashboards, performance monitoring,

70
00:04:52,264 --> 00:04:56,136
operational reports for detection, query node

71
00:04:56,160 --> 00:05:00,504
balancer monitoring and activity center. So let's look at each of them more

72
00:05:00,544 --> 00:05:04,408
in depth. So, holistic dashboard. So with

73
00:05:04,456 --> 00:05:07,584
cluster control, you can view your database

74
00:05:07,624 --> 00:05:11,424
cluster, even if it's in a multi cloud environment, you can

75
00:05:11,464 --> 00:05:15,484
see metrics, right? So from your database, and not just,

76
00:05:15,784 --> 00:05:19,096
not just metrics, right, but metrics you need, right?

77
00:05:19,160 --> 00:05:22,952
Not just graphs, but graphs, you need graphs that important

78
00:05:23,048 --> 00:05:26,240
simplified and you'll be able to track queries and

79
00:05:26,272 --> 00:05:30,344
statements and also gives you server level matrix and network to

80
00:05:30,504 --> 00:05:34,728
impute an output operations and uptime of your server that host

81
00:05:34,776 --> 00:05:38,720
your database and also load balancer monitoring. This is what,

82
00:05:38,832 --> 00:05:42,710
this feature is what many monitoring tools don't offer,

83
00:05:42,782 --> 00:05:46,110
right? So they give you monitoring and

84
00:05:46,142 --> 00:05:50,434
observability on your database nodes. But then again,

85
00:05:50,934 --> 00:05:54,766
in today you really see just one database instance,

86
00:05:54,870 --> 00:05:58,430
you see multiple database instances and how will you like

87
00:05:58,542 --> 00:06:01,862
know what's happening, right? You use a load balancer, you don't know

88
00:06:01,878 --> 00:06:05,912
what's happening in your load balancer. So that load balancer monitoring is very essential

89
00:06:06,038 --> 00:06:09,820
to be able to see traffic distribution, to response

90
00:06:09,852 --> 00:06:13,024
time, right? Throughputs, latency and

91
00:06:14,844 --> 00:06:18,140
all of that features, all of that necessary metrics,

92
00:06:18,172 --> 00:06:22,332
unnecessary statistics in order to keep your database

93
00:06:22,388 --> 00:06:25,904
role performing and enhanced uptime, right?

94
00:06:27,004 --> 00:06:30,584
Performance monitoring. So this is a very key feature that

95
00:06:31,164 --> 00:06:34,198
some of these monitoring tools offer, right?

96
00:06:34,246 --> 00:06:37,390
So advisors, they advise you on console control,

97
00:06:37,462 --> 00:06:41,150
for advisors to advise you containing status and justification.

98
00:06:41,222 --> 00:06:44,830
So like something happens right. You get an advice and

99
00:06:44,982 --> 00:06:48,950
an advice is sent to you, right? With okay, this is what happened,

100
00:06:49,062 --> 00:06:52,526
right. This is what you should do and this is why you should do

101
00:06:52,550 --> 00:06:56,006
this. Right. Those are database growth, right. Db growth to

102
00:06:56,030 --> 00:06:59,462
able to see the growth of your database and tables over time.

103
00:06:59,558 --> 00:07:02,214
Right. Right. On a daily basis, you see, okay,

104
00:07:02,294 --> 00:07:05,838
is this database is growing more than the other in order to make

105
00:07:05,886 --> 00:07:09,166
take actions on knowing what is happening. Because the entire idea

106
00:07:09,190 --> 00:07:13,286
of observability is to know what's happening in your environment and

107
00:07:13,310 --> 00:07:17,206
also database variables know the configuration of your

108
00:07:17,230 --> 00:07:19,566
database. Transaction deadlocks,

109
00:07:19,750 --> 00:07:23,886
no, say database, right. Handles transactions.

110
00:07:24,030 --> 00:07:27,802
Deadlocks do happen. So in order to view that then query monitoring,

111
00:07:27,958 --> 00:07:32,258
this is very important and very essential because like queries

112
00:07:32,346 --> 00:07:35,074
are how we interact with databases, right.

113
00:07:35,234 --> 00:07:38,786
And for query monitoring with custom control,

114
00:07:38,850 --> 00:07:43,466
you get to see top queries, right? Ordered by occurrence,

115
00:07:43,610 --> 00:07:47,386
execution time, know which queries

116
00:07:47,530 --> 00:07:50,930
slowest, which queries most common depends on how you

117
00:07:50,962 --> 00:07:54,198
want to configure. And also queries do.

118
00:07:54,246 --> 00:07:58,366
Some queries do long, some work that when I say it's possible

119
00:07:58,470 --> 00:08:02,262
for a query not to be well written, right. It happens more

120
00:08:02,278 --> 00:08:05,694
than often or not to be optimized, right. So you know,

121
00:08:05,734 --> 00:08:09,030
you get to see, right, which queries and outlier are

122
00:08:09,062 --> 00:08:12,350
taking longer than normal to run. You get an education,

123
00:08:12,462 --> 00:08:16,182
you get an advisor on that and database connection. You had to know

124
00:08:16,238 --> 00:08:20,358
the processes and connections of your database and

125
00:08:20,486 --> 00:08:23,670
monitoring agents, right? You can install monitoring

126
00:08:23,702 --> 00:08:27,694
agents in order to view to take this

127
00:08:27,734 --> 00:08:31,174
metrics and take this data. Costa control uses promotions which

128
00:08:31,214 --> 00:08:34,990
gives you that customized that you give

129
00:08:35,022 --> 00:08:39,542
you the ability to customize, right? And also build

130
00:08:39,598 --> 00:08:42,114
out, let's say you want to build an external,

131
00:08:42,454 --> 00:08:45,750
you want to build another dashboard for

132
00:08:45,822 --> 00:08:49,298
a particular metrics that's not crow guard, right? Over a particular

133
00:08:49,386 --> 00:08:52,970
need. You can plug in Grafana and build out the dashboard

134
00:08:53,002 --> 00:08:56,906
on that. So both detection and response,

135
00:08:57,090 --> 00:09:01,578
I think you get the idea already in real time. You get notification

136
00:09:01,626 --> 00:09:05,698
of what's happening, right? This happens on an advisor or an alarm

137
00:09:05,826 --> 00:09:09,946
that what you need to do at actual recommendation analysis

138
00:09:10,130 --> 00:09:14,694
or your database. You can see from this screenshot alarm

139
00:09:14,734 --> 00:09:18,558
details and cost control also handles recovery.

140
00:09:18,606 --> 00:09:22,590
Right. You know, we talked about, I talked about the limitation

141
00:09:22,742 --> 00:09:25,086
of legacy monitoring tools.

142
00:09:25,190 --> 00:09:29,750
So this is a key feature in the sense that cluster

143
00:09:29,782 --> 00:09:33,926
control handles the recovery for you. In the senses that, okay, with the legacy monitoring

144
00:09:33,950 --> 00:09:37,462
tools you can see, okay, this node is down, this database instance is down.

145
00:09:37,558 --> 00:09:41,094
And then you have to go and bring it back or

146
00:09:41,474 --> 00:09:44,826
you have to go and restart the node or rebuild the node or let's say

147
00:09:44,930 --> 00:09:48,970
there is a replication, right? And the replica, replica mode is.

148
00:09:49,162 --> 00:09:52,250
Replica node is broken, right. So when that breaks,

149
00:09:52,282 --> 00:09:55,858
you have to go and manually change that, right? So with closer control,

150
00:09:55,906 --> 00:09:59,066
there's automatic failover these, you have the ability

151
00:09:59,130 --> 00:10:02,490
to rebuild your node, right, directly from the cluster

152
00:10:02,522 --> 00:10:06,414
control dashboard. And also it's self feeling in the sense of that

153
00:10:07,504 --> 00:10:10,608
if you have a cluster and you have nodes,

154
00:10:10,696 --> 00:10:14,576
the automatically failover, you have the ability to heal your

155
00:10:14,600 --> 00:10:18,344
cluster in case of, okay, during installation or during upgrades, right.

156
00:10:18,384 --> 00:10:22,440
There was dependency mishaps, right. Cluster control can resolve

157
00:10:22,472 --> 00:10:26,048
those kind of issues in order to make sure your database is always up.

158
00:10:26,136 --> 00:10:30,288
And if you choose to manually intervene, right. Or manually do changes,

159
00:10:30,376 --> 00:10:33,546
make changes, you can also schedule maintenance,

160
00:10:33,650 --> 00:10:37,034
right? Schedule maintenance and manually make

161
00:10:37,074 --> 00:10:40,410
changes. And like recovery, of course, maybe through backups,

162
00:10:40,442 --> 00:10:43,914
right. Or however the situation may be

163
00:10:43,994 --> 00:10:47,562
and also scaling, you can scale your database, right?

164
00:10:47,618 --> 00:10:50,898
Just from the construct cost poster control dashboard.

165
00:10:50,986 --> 00:10:54,794
So in the sense that you, you don't need, you bring in another tool or

166
00:10:54,834 --> 00:10:58,466
have to, like as a developer or have to go. Let's say you have a

167
00:10:58,530 --> 00:11:02,252
DBA in your team and activity

168
00:11:02,308 --> 00:11:06,052
center, right? So you see all alarms, right? You see all logs,

169
00:11:06,148 --> 00:11:10,012
you get all notifications, you can integrate your notifications with Slack,

170
00:11:10,188 --> 00:11:13,268
you can integrate with Obgenie,

171
00:11:13,316 --> 00:11:17,164
you can integrate any incident management tool you

172
00:11:17,204 --> 00:11:20,804
use, right? They are welcome. Let's say you perform a recovery

173
00:11:20,844 --> 00:11:24,292
with cosmic control, you perform an action control,

174
00:11:24,348 --> 00:11:27,222
you build a node, you can see all that action,

175
00:11:27,318 --> 00:11:31,126
right? And also with logs, you can see logs or did logs too,

176
00:11:31,190 --> 00:11:35,070
right. To know who perform an action. Because someone like if

177
00:11:35,182 --> 00:11:38,966
many people can have, you can create users and different users to

178
00:11:38,990 --> 00:11:42,606
your cost of control environment that have access. They can be able to

179
00:11:42,630 --> 00:11:45,886
make changes. And it gives you a

180
00:11:45,910 --> 00:11:47,634
virtual DBA experience,

181
00:11:48,374 --> 00:11:51,934
which makes you to deploy faster and

182
00:11:51,974 --> 00:11:54,822
move faster and resolve issues faster,

183
00:11:54,958 --> 00:11:57,870
right. Then operational reports,

184
00:11:57,942 --> 00:12:01,646
this is very, this is very, this is very important, right? So let's

185
00:12:01,670 --> 00:12:05,438
say you go over the weekend,

186
00:12:05,526 --> 00:12:08,878
then you're back from the weekend, let's say long weekend,

187
00:12:08,926 --> 00:12:12,118
right? And you're back from the weekend and you,

188
00:12:12,166 --> 00:12:15,874
you want to get started working, right? You can easily create an operational report

189
00:12:16,374 --> 00:12:20,340
based on database availability, system report or

190
00:12:20,412 --> 00:12:23,676
backup report. And then, okay, you see over time,

191
00:12:23,740 --> 00:12:27,508
right? We'll go do, I will do a demo and show you this

192
00:12:27,556 --> 00:12:30,820
practically, right? How you can create, design and view

193
00:12:30,852 --> 00:12:34,220
it. You see over time how test control shows your database

194
00:12:34,252 --> 00:12:37,788
at a certain time. Let's say something occurred, which recommendation

195
00:12:37,836 --> 00:12:41,988
of recovery actions to carry

196
00:12:42,036 --> 00:12:44,828
out, right? So different types of reports from incident report,

197
00:12:44,916 --> 00:12:47,498
error reports, backup reports,

198
00:12:47,586 --> 00:12:51,362
availability reports. And that gives you assurance you're

199
00:12:51,378 --> 00:12:54,362
starting your day, you know what happened, right, over time, let's say,

200
00:12:54,498 --> 00:12:57,454
going on like the example of weekend.

201
00:12:58,834 --> 00:13:02,578
Going on weekend, right? And that's, and this reports can also

202
00:13:02,626 --> 00:13:06,090
be shared, it can be emailed. And all this gives

203
00:13:06,122 --> 00:13:10,058
you that assurance that your database is well performing. Your databases.

204
00:13:10,226 --> 00:13:13,974
Your databases is, it's up, right, and well

205
00:13:14,014 --> 00:13:17,630
performing. And you be sure that you're confident that you're giving

206
00:13:17,782 --> 00:13:21,550
your, your customers the most, the best

207
00:13:21,582 --> 00:13:24,758
service possible with less time, right.

208
00:13:24,806 --> 00:13:28,534
With less cognitive load, with less manual intervention,

209
00:13:28,654 --> 00:13:32,494
with less cost, right. And you

210
00:13:32,534 --> 00:13:36,390
get better customer satisfaction and also developer satisfaction,

211
00:13:36,422 --> 00:13:40,130
the developer productivity. So now we'll go

212
00:13:40,202 --> 00:13:44,170
into a live demo and just see how cluster control can

213
00:13:44,322 --> 00:13:48,242
help you observe your cluster and simplify database

214
00:13:48,298 --> 00:13:52,666
troubleshooting. So yeah, I have a cluster control environment,

215
00:13:52,810 --> 00:13:56,946
right? So from the onset you get this cluster overview.

216
00:13:57,010 --> 00:14:00,914
Status overview. So you see all the nodes, right? So I have two database

217
00:14:00,954 --> 00:14:04,746
clusters here, of course, Resqo and MySQl

218
00:14:04,770 --> 00:14:08,910
cholera cluster. So I can see there, this courses have,

219
00:14:09,022 --> 00:14:12,150
these two clusters have 17 nodes, right? So I can see,

220
00:14:12,182 --> 00:14:15,966
okay, this is a galera node. This is your primary node.

221
00:14:16,070 --> 00:14:19,702
I can also see, okay, this is Prometheus node. Then I, okay,

222
00:14:19,758 --> 00:14:22,846
then next node I can see, this is the load balancer, right?

223
00:14:22,950 --> 00:14:27,478
Okay, from, from the onset, right, you get that full

224
00:14:27,646 --> 00:14:32,014
single pane of gas overview of all your clusters, right? That's Costa control,

225
00:14:32,174 --> 00:14:35,608
it's manages. So you can also, you can choose to

226
00:14:35,696 --> 00:14:38,904
like deploy a new cluster, you can import a cluster, right,

227
00:14:38,944 --> 00:14:42,200
for this environment I've imported like these two

228
00:14:42,232 --> 00:14:45,672
clusters. So I will go into these clusters

229
00:14:45,728 --> 00:14:49,024
individually, right? And, and show you how

230
00:14:49,064 --> 00:14:52,672
closer control, like all the features I talked about before

231
00:14:52,728 --> 00:14:56,144
this demo. So let's go into the Galera cluster.

232
00:14:56,184 --> 00:14:59,644
So I click, okay, yeah, I'm in the Gallera cluster.

233
00:15:02,074 --> 00:15:05,202
So yeah, I'm in a gal close. I can see the system overview,

234
00:15:05,258 --> 00:15:08,610
right? So what, what operating system is this

235
00:15:08,802 --> 00:15:11,978
cluster control running? I guess is running on rocky,

236
00:15:12,106 --> 00:15:15,442
uh, Linux. I can see the four calls, I can look

237
00:15:15,458 --> 00:15:19,266
at each galara node, right? Can see, okay, this glaring node

238
00:15:19,290 --> 00:15:22,818
has two calls to the, of approximately four

239
00:15:22,866 --> 00:15:26,302
gig running. It's been up and running for

240
00:15:26,418 --> 00:15:29,990
three days. Can see the cpu usage. I can see

241
00:15:30,142 --> 00:15:34,006
the ideal ideals, ideal times, the network usage.

242
00:15:34,110 --> 00:15:37,910
Okay, this, there was more, there was more network

243
00:15:37,982 --> 00:15:41,190
usage. I can see, I can

244
00:15:41,222 --> 00:15:44,894
see the dis input and output, right? I can also go

245
00:15:44,934 --> 00:15:48,030
into each of these, right? And, and zoom

246
00:15:48,062 --> 00:15:51,422
in. And when I zoom in. I, oh, I don't

247
00:15:51,438 --> 00:15:54,554
know if you noticed all the other graphs,

248
00:15:54,594 --> 00:15:58,202
right. Zooms in with respect to this view,

249
00:15:58,298 --> 00:16:02,338
right. This timeline, right. Then also I can,

250
00:16:02,426 --> 00:16:06,146
I can sort this matrix over time, right? So I can come,

251
00:16:06,210 --> 00:16:09,690
I put the date range. So I do, I want to see the

252
00:16:09,722 --> 00:16:13,290
matrix from 15 minutes ago. I can sort that.

253
00:16:13,322 --> 00:16:16,574
I don't want to see the matrix for the last

254
00:16:17,714 --> 00:16:21,634
seven days. But you know, this database has already been already, this course has

255
00:16:21,674 --> 00:16:24,882
only been up for 3d, right? So you can see,

256
00:16:24,938 --> 00:16:29,178
starts just on the 27th. So you get to see like

257
00:16:29,346 --> 00:16:32,402
an overview on what, what is necessary, right.

258
00:16:32,538 --> 00:16:35,618
Then you can go in and see for the pool,

259
00:16:35,706 --> 00:16:39,386
the load balancer, right? And also aside from

260
00:16:39,410 --> 00:16:43,186
the system overview, you can also look at, okay, the MySQL server

261
00:16:43,250 --> 00:16:46,834
specific data, right? So you can see the queries,

262
00:16:46,954 --> 00:16:50,646
you see the queries are being run, the connection usage,

263
00:16:50,810 --> 00:16:52,994
right. You can, you can see,

264
00:16:53,934 --> 00:16:57,102
you can see also this is sort of last seven days. So I

265
00:16:57,118 --> 00:17:00,814
can put it to 1 hour, okay, there,

266
00:17:00,894 --> 00:17:04,550
and there are other metrics, right? Other dashboards I can also look

267
00:17:04,582 --> 00:17:08,014
at. That gives me complete overview of my closet.

268
00:17:08,094 --> 00:17:11,046
And I can go into the nodes, I can see all the nodes in the

269
00:17:11,070 --> 00:17:14,754
cluster, right? And see the, I can see the price

270
00:17:15,214 --> 00:17:18,940
promises node, the proxy SQL node.

271
00:17:19,052 --> 00:17:22,664
Then I can click on it and get an overview of

272
00:17:23,524 --> 00:17:26,900
the request, right? Just like we talked about. I talked

273
00:17:26,932 --> 00:17:30,132
about load balance monitoring. You can see that only,

274
00:17:30,268 --> 00:17:33,820
only one of the three nodes are selected to be writes and

275
00:17:33,852 --> 00:17:37,348
exercise, okay? They need all nodes receive

276
00:17:37,396 --> 00:17:41,788
reads combined with the writer node, writer and reader.

277
00:17:41,916 --> 00:17:45,344
Then you can see that the code script is these

278
00:17:45,384 --> 00:17:49,296
two nodes, right? They are not an active writer, they are

279
00:17:49,320 --> 00:17:55,040
backup nodes, right, because they were shown then

280
00:17:55,112 --> 00:17:58,544
for, for performance monitoring,

281
00:17:58,624 --> 00:18:03,112
right. You can look at the DB code. So these are test based tables,

282
00:18:03,168 --> 00:18:06,960
right? Test database, right. So you can see the largest

283
00:18:06,992 --> 00:18:10,808
database, can see the table count rules, the data size,

284
00:18:10,896 --> 00:18:14,656
index size. You can look at, you can see the data DB

285
00:18:14,720 --> 00:18:18,440
status, you can see the data DDB variables,

286
00:18:18,472 --> 00:18:21,964
the connection of the databases.

287
00:18:22,344 --> 00:18:25,384
Then you can also look at the query monitor,

288
00:18:25,504 --> 00:18:29,648
right? So query monitor, like we talked about, can evaluate this.

289
00:18:29,736 --> 00:18:33,488
Take this Dani test

290
00:18:33,536 --> 00:18:36,784
data. So you can see the is queries, right?

291
00:18:36,824 --> 00:18:39,244
It's sort of a total execution time.

292
00:18:40,044 --> 00:18:43,484
Execution time. So the query counts and you see

293
00:18:43,524 --> 00:18:46,424
the respective dbs, right, that these queries,

294
00:18:46,724 --> 00:18:49,844
there's basic degrees that these queries are set to.

295
00:18:50,004 --> 00:18:53,468
Yeah. You can also, you can also update the settings.

296
00:18:53,556 --> 00:18:57,124
You can also go to the advisor section right there. You know,

297
00:18:57,164 --> 00:19:00,284
advisors is one of the key features I talked about.

298
00:19:00,444 --> 00:19:04,124
So you see a lot of advisors. So green obviously

299
00:19:04,164 --> 00:19:07,970
means that everything is good. That is okay. Then, you know,

300
00:19:08,002 --> 00:19:11,858
you see yellow which is like kind of like a warning, a warning status.

301
00:19:11,946 --> 00:19:15,490
So we can see this morning, right. The one is table access without

302
00:19:15,562 --> 00:19:19,778
using index. See the specific instance that, that this

303
00:19:19,826 --> 00:19:23,442
one in stopped about, right. Specific database

304
00:19:23,498 --> 00:19:27,122
node. And we can see the justification, right.

305
00:19:27,258 --> 00:19:30,610
And everything you need to understand, okay, this table has been

306
00:19:30,642 --> 00:19:33,818
query without using this index. You see that this is the database,

307
00:19:33,866 --> 00:19:37,256
right? With a total of 7000 IO operations,

308
00:19:37,360 --> 00:19:40,328
right. And it gives you the exact number of,

309
00:19:40,416 --> 00:19:44,072
the exact number of rides and the exact number of deletes, right. And you

310
00:19:44,088 --> 00:19:47,724
can see this for, and several other types of

311
00:19:48,344 --> 00:19:52,000
advisors, right. Say check DB accounts without the

312
00:19:52,032 --> 00:19:55,560
password. Oh, okay, this excessive cpu

313
00:19:55,592 --> 00:19:59,040
usage, it shows you that, okay, days and

314
00:19:59,072 --> 00:20:02,004
excessive cpu, this is something you need to look at,

315
00:20:02,144 --> 00:20:05,092
right, and other advisors.

316
00:20:05,148 --> 00:20:08,892
And the good thing is you can also customize,

317
00:20:09,068 --> 00:20:13,020
you can also customize these advisors, right. So if I go here

318
00:20:13,052 --> 00:20:17,356
to manage, I can go to script and I can also

319
00:20:17,460 --> 00:20:20,652
like make changes, right, to cpu's.

320
00:20:20,788 --> 00:20:23,980
So now for this, right, this is

321
00:20:24,012 --> 00:20:28,044
written in CosA control domain specific language,

322
00:20:28,124 --> 00:20:31,286
right. You similar to JavaScript and easy

323
00:20:31,350 --> 00:20:34,966
for developers have development experience. They can easily

324
00:20:35,150 --> 00:20:39,190
understand this, right. And make changes. So now I see, okay, this is

325
00:20:39,342 --> 00:20:42,646
a variable with threshold one in 90. So I

326
00:20:42,670 --> 00:20:46,846
can change this to okay, let's say two unless

327
00:20:47,030 --> 00:20:49,514
compile and run and see what happens.

328
00:20:51,534 --> 00:20:55,226
So I see, okay, then I get, you know from the previous as

329
00:20:55,250 --> 00:20:58,650
well, I saw that CPU usage was okay. But now seeing the

330
00:20:58,682 --> 00:21:02,266
threshold, right, was set to nine, I see that I get

331
00:21:02,290 --> 00:21:05,054
the pump that excessive CPA usage,

332
00:21:06,194 --> 00:21:09,774
CPU's and cpu usage has been high, right?

333
00:21:10,714 --> 00:21:13,854
And I can also, let me edit this back to 90,

334
00:21:18,594 --> 00:21:23,696
I can see now that this is a new, new, a new status,

335
00:21:23,760 --> 00:21:27,664
right. An alarm and say okay, CP usage, cpu usage

336
00:21:27,704 --> 00:21:31,416
is okay. So depending on your needs, depending on what

337
00:21:31,440 --> 00:21:35,224
is, what is, what is the threshold for you, you can actually like

338
00:21:35,264 --> 00:21:39,168
edit, edit advisors, edit your

339
00:21:39,336 --> 00:21:42,616
configurations for your clusters, right, for your load

340
00:21:42,640 --> 00:21:46,484
balancers. Like you can see here, max scale for your different

341
00:21:47,294 --> 00:21:50,606
dbs and dig specific usage. Let me,

342
00:21:50,710 --> 00:21:54,214
let's look into that. You can edit stuff from your needs,

343
00:21:54,334 --> 00:21:57,694
right? So now let's,

344
00:21:57,734 --> 00:22:01,662
let's look at um, now, so now let's look at uh,

345
00:22:01,798 --> 00:22:05,694
alarms, right? So I can go to the alarm tab. So I see

346
00:22:05,734 --> 00:22:09,142
that uh, there's no alarm here, right? So in

347
00:22:09,158 --> 00:22:13,566
order for us to get an alarm, let's simulate a long running query,

348
00:22:13,670 --> 00:22:17,656
right? So I go to the nodes from coastal control, I can ssh

349
00:22:17,760 --> 00:22:21,536
directly into the nodes so I don't have to go to my server provider

350
00:22:21,600 --> 00:22:24,400
or like cloud provider.

351
00:22:24,512 --> 00:22:27,400
So I can ssh into this primary node,

352
00:22:27,472 --> 00:22:30,444
right? So let me,

353
00:22:32,424 --> 00:22:36,364
let me log in then log into my square,

354
00:22:38,464 --> 00:22:39,964
enter the password.

355
00:22:43,194 --> 00:22:46,906
So let me run this sleep query,

356
00:22:47,010 --> 00:22:50,974
right? Let me run the test sleep query.

357
00:22:55,594 --> 00:22:58,882
So yes, we have this query. So I go back

358
00:22:58,898 --> 00:23:02,546
to the console control dashboard and just wait for a few seconds,

359
00:23:02,610 --> 00:23:06,494
right. And I will see that the alarm pops up.

360
00:23:09,324 --> 00:23:13,332
So after a few, after a few seconds, right, you see down

361
00:23:13,468 --> 00:23:16,988
pops up, right? Okay, the title long one long running

362
00:23:17,036 --> 00:23:20,740
query, right? The warning, what category is

363
00:23:20,772 --> 00:23:24,564
it on? DB performance. So you can look in more

364
00:23:24,684 --> 00:23:28,292
into the long running query. I can see

365
00:23:28,348 --> 00:23:31,784
very the exact query that I run

366
00:23:32,544 --> 00:23:35,844
and that shows you like

367
00:23:36,264 --> 00:23:40,392
any operations, right. You get a full overview on like what

368
00:23:40,448 --> 00:23:43,816
actually happened, right. And recommendation is to tune

369
00:23:43,840 --> 00:23:46,824
the query, right? So this is just a slip,

370
00:23:46,944 --> 00:23:49,856
right? After 6 seconds it stops.

371
00:23:50,040 --> 00:23:53,368
So I can choose to mute this query, I can ignore this

372
00:23:53,416 --> 00:23:57,408
query and

373
00:23:57,496 --> 00:24:00,616
the notification goes away, right? And I muted it.

374
00:24:00,640 --> 00:24:04,434
So because I don't want to worry about, this is a demo environment

375
00:24:04,774 --> 00:24:09,174
right? Now let me show you how cursor control

376
00:24:09,334 --> 00:24:13,486
handles for detection. So I'll go into the postgresql

377
00:24:13,550 --> 00:24:17,470
node, right? So there's no alarm. Yes, I'm going to the node. So you see

378
00:24:17,542 --> 00:24:21,390
there's one primary and replica,

379
00:24:21,502 --> 00:24:25,214
right? So what I want to do, right? So in this,

380
00:24:25,294 --> 00:24:29,204
my control for this node, I have auto recovery turned

381
00:24:29,244 --> 00:24:32,140
on, right? So cluster, auto recovery node,

382
00:24:32,172 --> 00:24:35,508
auto recovery. So I can choose to turn

383
00:24:35,556 --> 00:24:38,364
them off, right? So I can choose to turn them off but I want them

384
00:24:38,404 --> 00:24:41,580
on for this. So I can, let me say,

385
00:24:41,652 --> 00:24:45,300
okay, let me stop this node, right? We have

386
00:24:45,332 --> 00:24:48,836
primary node, right? So I stopped the node I want

387
00:24:48,860 --> 00:24:50,864
to first stop, right,

388
00:24:52,164 --> 00:24:55,744
stop. So the job scales gets created, I see,

389
00:24:56,314 --> 00:24:59,298
I can see that the job gets created. I can go and see that,

390
00:24:59,346 --> 00:25:03,010
okay, stop. No, the new job is created, you can see as

391
00:25:03,042 --> 00:25:06,934
the job, right is running and I see restoring

392
00:25:07,434 --> 00:25:10,114
auto recovery, true settings is true,

393
00:25:10,234 --> 00:25:13,610
right? So I go back to the node,

394
00:25:13,682 --> 00:25:16,970
right? See node, I shut down the

395
00:25:17,002 --> 00:25:20,570
node, I get

396
00:25:20,602 --> 00:25:24,404
an alarm that closer failure, critical cursor recovery is

397
00:25:24,444 --> 00:25:28,108
needed, right after,

398
00:25:28,196 --> 00:25:31,684
after. And after a few minutes you see that my

399
00:25:31,724 --> 00:25:34,972
gang replica node became a primary,

400
00:25:35,068 --> 00:25:38,124
right? So it happens fast. And let's go look at the logs,

401
00:25:38,164 --> 00:25:42,084
right? So we see that, okay, recovering the master

402
00:25:42,164 --> 00:25:47,084
as all hosts are down, so crystal control automatically recovers

403
00:25:47,204 --> 00:25:50,834
the node. It recovers the node and starts,

404
00:25:50,954 --> 00:25:54,834
uh, the node again, right? And here

405
00:25:54,874 --> 00:25:58,298
you see from it being filled, uh, my cluster

406
00:25:58,346 --> 00:26:01,454
from cursor failure. You see the cursor failure alarm is gone.

407
00:26:01,794 --> 00:26:05,146
Then the cursor is back up and running, right?

408
00:26:05,210 --> 00:26:09,162
And the initial replica,

409
00:26:09,218 --> 00:26:12,298
replica node, right, became a primary.

410
00:26:12,426 --> 00:26:16,130
And the primary became the replica. Now that we've covered most of the

411
00:26:16,162 --> 00:26:20,210
parts, right, we've covered forward detection, we've covered query monitoring,

412
00:26:20,362 --> 00:26:24,282
performance monitoring, looked at all the dashboards

413
00:26:24,338 --> 00:26:28,122
that cost to control provides you and Costa

414
00:26:28,138 --> 00:26:32,414
controls, recovery features and how you can schedule maintenance.

415
00:26:32,754 --> 00:26:36,290
So now like let's look at activity center.

416
00:26:36,322 --> 00:26:39,522
So while doing all these, right, you know, we looked at

417
00:26:39,538 --> 00:26:42,802
the alarms logged and jobs drive, so that makes up

418
00:26:42,818 --> 00:26:46,666
the activity center. So we can go to the activity set. I see currently there's

419
00:26:46,690 --> 00:26:48,974
no alarm, right? There's no alarm because,

420
00:26:49,154 --> 00:26:52,470
right. There's nothing, there's no issue right

421
00:26:52,502 --> 00:26:55,654
now. And if we want to simulate again, right, like we saw,

422
00:26:55,694 --> 00:26:59,110
we see another alarm pop up. But we can also view all the jobs,

423
00:26:59,142 --> 00:27:02,502
right, with respect to each cluster. So you can see,

424
00:27:02,558 --> 00:27:06,590
let me just zoom in a bit. You can see the

425
00:27:06,622 --> 00:27:10,662
title of each job. You stopped the node, right. There was the noise recovery

426
00:27:10,798 --> 00:27:14,246
backups that previously created, right? And we can

427
00:27:14,270 --> 00:27:17,494
also look at audit logs, right, that shows like who

428
00:27:17,534 --> 00:27:21,462
did what, right? So you have a cluster contour environment. It's not only

429
00:27:21,518 --> 00:27:25,750
managed by one person, right? So you

430
00:27:25,782 --> 00:27:30,878
see that who did what, which user did what. So now this is only

431
00:27:30,926 --> 00:27:34,302
one user I've used, right? So you only see CC admin.

432
00:27:34,438 --> 00:27:38,142
But if there's another user, right, you can always create

433
00:27:38,198 --> 00:27:41,718
users, right? Can easily create a user which poster control

434
00:27:41,806 --> 00:27:46,002
as I create a new user created team, assign the

435
00:27:46,018 --> 00:27:51,210
user to team. I can also implement LDAP organizations

436
00:27:51,402 --> 00:27:55,418
already active directory, so you don't need new credentials

437
00:27:55,466 --> 00:27:59,042
to access lesser control. So it kind of just suits that,

438
00:27:59,098 --> 00:28:02,854
kind of just the world kind of just

439
00:28:04,434 --> 00:28:07,854
slots into like security,

440
00:28:09,534 --> 00:28:13,638
current security regulations, compliance can

441
00:28:13,726 --> 00:28:17,478
set your make LDAP settings and map

442
00:28:17,526 --> 00:28:20,598
out group with respect to each team,

443
00:28:20,766 --> 00:28:24,478
right then, but back to activity

444
00:28:24,526 --> 00:28:28,558
center, right? So that's what a customer to give you to

445
00:28:28,646 --> 00:28:31,718
see what is happening in the cluster, right. And also

446
00:28:31,766 --> 00:28:35,830
to perform actions and also operational reports, right? So yeah,

447
00:28:35,862 --> 00:28:39,214
I've really created some operational report. So let me create

448
00:28:39,254 --> 00:28:42,854
another one to show you how closer control can

449
00:28:42,894 --> 00:28:46,182
help you, like see what happens with you, with your cluster,

450
00:28:46,238 --> 00:28:49,966
right? So I can select, okay, let me select

451
00:28:49,990 --> 00:28:54,350
the postgres cluster. Then I just

452
00:28:54,502 --> 00:28:58,022
say database availability

453
00:28:58,118 --> 00:29:01,534
report. I can put an email for recipient. I can say

454
00:29:01,614 --> 00:29:04,970
for three days the growth rates they change. So I can

455
00:29:05,002 --> 00:29:08,146
create this report and within a few seconds the

456
00:29:08,170 --> 00:29:11,242
report is created. Then I can view this report,

457
00:29:11,338 --> 00:29:15,130
right. And it gets open a new page. I say

458
00:29:15,162 --> 00:29:19,106
okay, what's the availability of this reports

459
00:29:19,210 --> 00:29:22,074
of this post? My postgres cluster.

460
00:29:22,194 --> 00:29:26,314
So 99.98%. Right. And the

461
00:29:26,354 --> 00:29:29,602
uptime, was there any downtime? There was no downtime.

462
00:29:29,698 --> 00:29:33,124
But you remember I simulated

463
00:29:34,744 --> 00:29:38,104
costs are going down a node rather a note,

464
00:29:38,144 --> 00:29:41,656
I simulated node going down, right. But then again you see there

465
00:29:41,680 --> 00:29:44,808
was zero minutes downtime because

466
00:29:44,856 --> 00:29:48,792
of consecrate auto recovery feature. Then you can, you can also create

467
00:29:48,848 --> 00:29:52,480
more operational reports, different types of operational reports,

468
00:29:52,672 --> 00:29:54,964
right. Schema changes,

469
00:29:56,534 --> 00:29:58,994
database groups, capacity reports,

470
00:29:59,294 --> 00:30:03,158
standard system reports, just like give you overview of your

471
00:30:03,206 --> 00:30:06,790
system like CP, Neuro and usage, right. And let's

472
00:30:06,822 --> 00:30:10,198
look at backup reports

473
00:30:10,286 --> 00:30:13,742
and any kind of reports, right. So I can create, okay, let me create a

474
00:30:13,758 --> 00:30:20,110
backup report for the Galleria

475
00:30:20,142 --> 00:30:24,164
cluster. So I create that I can view it.

476
00:30:24,294 --> 00:30:28,032
So you see, okay, the backup was completed. So you see detailed

477
00:30:28,088 --> 00:30:31,608
overview, right, of all the backups, backup size,

478
00:30:31,736 --> 00:30:35,392
storage location. I store this backup in my,

479
00:30:35,568 --> 00:30:38,364
in the roots, in the, in the server. Right.

480
00:30:39,064 --> 00:30:42,448
In the note, right. But then again you can also store

481
00:30:42,456 --> 00:30:46,368
your backup on AWS and you also see the aws,

482
00:30:46,416 --> 00:30:49,664
other clouds. You also see the, the location

483
00:30:49,704 --> 00:30:52,594
of the backups, right. One, the backup is kitted.

484
00:30:52,784 --> 00:30:55,758
You can create verifiable backups, right.

485
00:30:55,926 --> 00:30:59,334
And see backup

486
00:30:59,374 --> 00:31:02,870
rotation. Right. The back of rotation is case one days. And this gives

487
00:31:02,902 --> 00:31:05,750
you an understanding of what's happening with cloths that,

488
00:31:05,782 --> 00:31:09,862
right. What happened before, what's happening now. And that,

489
00:31:09,918 --> 00:31:13,686
that gives you the satisfaction of that, okay, how your

490
00:31:13,710 --> 00:31:16,998
cluster is up now, right. And it's well

491
00:31:17,046 --> 00:31:20,738
performing. And if anything happens, you can easily react.

492
00:31:20,826 --> 00:31:24,082
Right. It's automated reaction and you can obviously

493
00:31:24,138 --> 00:31:27,682
react manually if need be. Right. You see I was easily

494
00:31:27,778 --> 00:31:30,442
able to easily go into a node, right.

495
00:31:30,498 --> 00:31:33,730
And ssh into a node directly from the coastal control

496
00:31:33,802 --> 00:31:37,938
environment, right. So that is pretty, that is pretty helpful.

497
00:31:37,986 --> 00:31:42,642
In case of some emergency situation, I can now perform actions,

498
00:31:42,698 --> 00:31:46,230
right. So now you

499
00:31:46,262 --> 00:31:50,510
see how closing module can help you simplify database

500
00:31:50,582 --> 00:31:53,870
troubleshooting and see what's happening in your

501
00:31:53,902 --> 00:31:57,190
cluster in real time and also perform

502
00:31:57,262 --> 00:32:00,966
actions immediately and how for you to have

503
00:32:00,990 --> 00:32:04,754
a well performing and highly available database.

504
00:32:06,134 --> 00:32:10,288
So now we're going to look at who uses cursor control for observability.

505
00:32:10,486 --> 00:32:14,268
So cross culture is trusted by a lot of organizations.

506
00:32:14,316 --> 00:32:18,076
Some you know, some you don't. So I'm just going to look at two examples,

507
00:32:18,140 --> 00:32:21,900
right. Two case studies for organizations that use cluster

508
00:32:21,932 --> 00:32:25,300
control specifically. They adapted cluster control majorly

509
00:32:25,332 --> 00:32:28,908
for like observability and monitoring. So the first is westp.

510
00:32:28,996 --> 00:32:32,292
So they had a challenge while growing in the market. Westpit is a

511
00:32:32,308 --> 00:32:35,764
swedish finite company, right? They were not able to know what's going

512
00:32:35,804 --> 00:32:39,904
on in their closer. They spend a lot of time tweaking and

513
00:32:40,024 --> 00:32:43,408
manually making changes, right? And manual

514
00:32:43,456 --> 00:32:46,840
customization, which rich man, you know, manual customization

515
00:32:46,952 --> 00:32:50,192
can lead to key person dependence, right? So let's say

516
00:32:50,208 --> 00:32:53,656
the person that did those tweaks and those changes move on from

517
00:32:53,680 --> 00:32:56,952
the company or like something happens, the person is sick at

518
00:32:56,968 --> 00:33:00,664
a particular time, right? Like if the person's dependence is something that

519
00:33:00,744 --> 00:33:04,176
every organization tries to avoid and should avoid and

520
00:33:04,320 --> 00:33:07,688
cost of control when they are, when WesTP adopt control.

521
00:33:07,816 --> 00:33:11,502
So this is the feedback of USB CTO. They were able to ensure

522
00:33:11,598 --> 00:33:14,926
highest possible uptime, right? Because they knew what

523
00:33:14,950 --> 00:33:18,598
was happening in a database when you knew when their database was,

524
00:33:18,766 --> 00:33:21,918
they knew when log queries were occurring, they knew

525
00:33:21,966 --> 00:33:25,542
when the database was running exponentially and what to do.

526
00:33:25,638 --> 00:33:29,398
They knew when, where, when the node was down and

527
00:33:29,486 --> 00:33:32,814
there was auto recovery and all this. So you can read more about

528
00:33:32,894 --> 00:33:36,778
the, the case study there by scanning this QR

529
00:33:36,826 --> 00:33:40,354
code. We also have another example with holiday pirates,

530
00:33:40,434 --> 00:33:44,534
right? Managing and scaling their database was a database

531
00:33:44,994 --> 00:33:49,026
was a challenge for them and immediately solution that gives

532
00:33:49,050 --> 00:33:52,610
them that holistic view, that single plane of class

533
00:33:52,762 --> 00:33:56,738
and full understanding of what's happening and being able to take action.

534
00:33:56,906 --> 00:34:00,410
And now they are modified of the substance of their database and they can

535
00:34:00,482 --> 00:34:03,320
take corrective and preventive measures, right?

536
00:34:03,352 --> 00:34:06,544
So like you saw in the demo, closer control as

537
00:34:06,664 --> 00:34:10,216
a, you know, you see some notifications, some alarms are

538
00:34:10,240 --> 00:34:13,560
like warning warnings and you have the

539
00:34:13,592 --> 00:34:17,800
red, red obviously, so like failure. All right. Very critical alarm,

540
00:34:17,832 --> 00:34:21,032
right? We didn't simulate that in them, but yeah,

541
00:34:21,088 --> 00:34:24,064
very critical alarms. And you have grid for status. All right,

542
00:34:24,224 --> 00:34:27,896
so I can get this notifications on slack

543
00:34:27,960 --> 00:34:31,708
integrated notifications, these alarms and notifications to any

544
00:34:31,756 --> 00:34:35,180
incident management tool you use, right. You can read more

545
00:34:35,212 --> 00:34:39,340
about this case study on by scanning this query code.

546
00:34:39,532 --> 00:34:43,044
Then that is the end of my talk. And thank you very much

547
00:34:43,084 --> 00:34:46,964
for listening and I hope this talk was interesting

548
00:34:47,004 --> 00:34:50,860
and insightful. And if you're looking to like adopt us to control,

549
00:34:51,012 --> 00:34:55,244
you can easily like reach out to me, I on the Talk description,

550
00:34:55,364 --> 00:34:59,154
you can see my socials on LinkedIn and also on

551
00:35:00,054 --> 00:35:03,286
Twitter. And also we host at several

552
00:35:03,350 --> 00:35:07,254
nights we host the Sovereign Debass podcast.

553
00:35:07,294 --> 00:35:11,430
So sovereign divers like I mentioned earlier, enabling companies

554
00:35:11,502 --> 00:35:15,270
to take control of their data right. So community of individuals

555
00:35:15,302 --> 00:35:18,830
from different companies that prioritize data sovereignty,

556
00:35:18,942 --> 00:35:22,310
having control, not just data sovereignty on the

557
00:35:22,342 --> 00:35:26,130
basis of location of where your data is. Right. Or control over the

558
00:35:26,162 --> 00:35:30,226
entire data stack, right. Your infrastructure, the tooling around your

559
00:35:30,250 --> 00:35:34,258
database. So there are so many episodes, a recent episode on

560
00:35:34,386 --> 00:35:38,162
using an open source cloud, right. So you

561
00:35:38,178 --> 00:35:41,586
can check it out on Spotify on YouTube at several

562
00:35:41,650 --> 00:35:45,010
nights. And you can always reach out to me, I'm always active on social

563
00:35:45,082 --> 00:35:48,682
media and yeah, I hope this was a great talk

564
00:35:48,738 --> 00:35:51,634
and was interesting for you to listen.

565
00:35:52,254 --> 00:35:55,074
Do have a great rest of the observability,

566
00:35:55,454 --> 00:35:56,614
comfort to observability.

