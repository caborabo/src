1
00:00:20,650 --> 00:00:23,200
Hello everyone. Thank you for joining today.

2
00:00:24,050 --> 00:00:27,254
My name is I'm thrilled to have the

3
00:00:27,292 --> 00:00:31,138
opportunity to share with you some exciting insights

4
00:00:31,234 --> 00:00:35,030
and practices in the world of python. Today,

5
00:00:35,100 --> 00:00:38,454
I'm going to introduce the topic of building a Python

6
00:00:38,502 --> 00:00:41,050
sandbox for dynamic rule execution.

7
00:00:41,630 --> 00:00:45,510
Our session will uncover not just the theoretical

8
00:00:45,590 --> 00:00:49,514
underpinnings, but also practical technologies and

9
00:00:49,552 --> 00:00:52,720
codes. So let's get started.

10
00:00:53,970 --> 00:00:57,006
Before we dive into today's topic, I'd like

11
00:00:57,028 --> 00:01:00,330
to give you a brief overview of our agenda

12
00:01:00,490 --> 00:01:04,770
so you will know what to expect from our session.

13
00:01:05,350 --> 00:01:09,250
We will begin by defining the case concepts behind

14
00:01:09,320 --> 00:01:12,290
the rule execution and sandboxing.

15
00:01:13,750 --> 00:01:18,120
Understanding these fundamentals is crucial for the subsequent content.

16
00:01:18,970 --> 00:01:23,122
We will discuss the advantage and potential drawbacks

17
00:01:23,266 --> 00:01:27,282
between Docker virtual machines and customized

18
00:01:27,346 --> 00:01:30,682
solutions. This will help us

19
00:01:30,736 --> 00:01:34,182
know why we implement epython sandbox

20
00:01:34,326 --> 00:01:38,006
over using AsiN solutions. Then we'll

21
00:01:38,038 --> 00:01:41,690
transition into practices. This section

22
00:01:41,770 --> 00:01:44,986
is divided into three crucial components,

23
00:01:45,178 --> 00:01:48,350
isolation, security and performance.

24
00:01:51,650 --> 00:01:54,580
Let's talk about the context first.

25
00:01:55,910 --> 00:01:59,778
Imagine world where decisions are made efficiently and

26
00:01:59,864 --> 00:02:03,362
constantly. Let's assume we enter this

27
00:02:03,416 --> 00:02:06,920
rule engine as they heard of this engine.

28
00:02:08,090 --> 00:02:11,814
They are the business logics that dictate how

29
00:02:11,852 --> 00:02:15,990
our system behaves in various scenarios.

30
00:02:16,970 --> 00:02:20,550
As a powerful and easy to use language,

31
00:02:20,710 --> 00:02:24,694
Python is one of the best options to describe basis

32
00:02:24,742 --> 00:02:26,780
logics in a rule engine.

33
00:02:29,550 --> 00:02:32,400
Moving on to the rule engine itself,

34
00:02:32,770 --> 00:02:37,050
it ensures that all the rules are followed to the latter

35
00:02:37,210 --> 00:02:40,190
executed in Python interpreter.

36
00:02:41,250 --> 00:02:44,430
We can assume that without isolation,

37
00:02:45,010 --> 00:02:48,754
rules for different purpose may influence each

38
00:02:48,792 --> 00:02:52,510
other, which cause unexpected behaviors

39
00:02:52,670 --> 00:02:56,454
without control, capable of actions that

40
00:02:56,492 --> 00:03:00,274
may go beyond our intentions, potentially affecting

41
00:03:00,322 --> 00:03:03,720
the engine's civility and security.

42
00:03:05,290 --> 00:03:09,306
As we start a journey to create a sandbox, we must address the

43
00:03:09,328 --> 00:03:13,462
elephant in the room. Why not using established

44
00:03:13,526 --> 00:03:18,406
solutions like virtual machines or docker virtual

45
00:03:18,438 --> 00:03:21,950
machines? Unlike separate entities,

46
00:03:22,610 --> 00:03:26,606
each with its own operating system running

47
00:03:26,708 --> 00:03:30,426
isolation on top of the host OS,

48
00:03:30,618 --> 00:03:34,578
they offer a high level of security due to this

49
00:03:34,664 --> 00:03:38,414
isolation, but at the cost of performance

50
00:03:38,542 --> 00:03:42,866
and resource consumption. On the other hand,

51
00:03:43,048 --> 00:03:47,062
Docker has revolutionized the concept of

52
00:03:47,196 --> 00:03:51,094
containerization. Containers are more

53
00:03:51,132 --> 00:03:54,962
lightweight compared to VMS sharing the host

54
00:03:55,026 --> 00:03:59,190
OS kernel, allowing for processes

55
00:04:00,010 --> 00:04:02,150
and execution isolation.

56
00:04:03,130 --> 00:04:06,730
This makes Docker an attractive option for many

57
00:04:06,800 --> 00:04:10,666
scenarios. When it comes to our root

58
00:04:10,698 --> 00:04:14,650
engine, the balance of performance and resource consumption

59
00:04:14,730 --> 00:04:18,654
takes center stage. Our root engine needs to

60
00:04:18,692 --> 00:04:22,522
execute numerous small tasks at a high

61
00:04:22,596 --> 00:04:26,162
frequency. The startup time of a

62
00:04:26,296 --> 00:04:29,474
virtual machine or even a docker container can

63
00:04:29,512 --> 00:04:33,230
introduce huge latency that's unacceptable

64
00:04:33,310 --> 00:04:36,098
for our use case. Moreover,

65
00:04:36,274 --> 00:04:40,002
the resource overhead, well, smaller with Docker,

66
00:04:40,146 --> 00:04:43,254
is still significant when we talk about the

67
00:04:43,292 --> 00:04:46,070
scale at which our engine operates.

68
00:04:49,470 --> 00:04:53,850
This brings us to our customized solution.

69
00:04:54,430 --> 00:04:58,294
They have crafted a sandbox that is tailored

70
00:04:58,342 --> 00:05:01,280
to the unique demands of our engine.

71
00:05:01,730 --> 00:05:05,162
Our sandbox is designed to be isolated,

72
00:05:05,306 --> 00:05:08,590
secure, and with high performance.

73
00:05:10,770 --> 00:05:13,650
Isolation is the first pillar in our sandbox,

74
00:05:14,390 --> 00:05:17,806
restricting access to hardware resources,

75
00:05:17,918 --> 00:05:21,262
ensuring that the sandbox processes cannot

76
00:05:21,326 --> 00:05:23,970
use excessive resources,

77
00:05:24,310 --> 00:05:28,586
unexpectable network behaviors, or unsorized

78
00:05:28,638 --> 00:05:31,894
operations. But that's on top.

79
00:05:32,092 --> 00:05:35,670
Our sandbox offers extensive customization

80
00:05:36,010 --> 00:05:39,402
options. They understand that one

81
00:05:39,456 --> 00:05:43,702
size doesn't fit all, and so resource limits

82
00:05:43,766 --> 00:05:47,194
and security policies can be tailored to fit

83
00:05:47,232 --> 00:05:51,150
the specific rule for different business scenarios.

84
00:05:52,370 --> 00:05:56,270
Moving to the next pillar security our

85
00:05:56,340 --> 00:06:00,730
prime directive is to prevent

86
00:06:00,810 --> 00:06:04,954
the execution of malicious code. The sandbox

87
00:06:05,002 --> 00:06:09,170
is designed to detect threats before they can cause harm.

88
00:06:09,590 --> 00:06:13,490
The block list mechanism is in place

89
00:06:13,560 --> 00:06:17,682
to control usage over python modules and

90
00:06:17,736 --> 00:06:21,810
functions. We use arrow handling to ensure

91
00:06:21,890 --> 00:06:25,686
that unexpected code behaviors do

92
00:06:25,708 --> 00:06:29,610
not escalate into system crashes.

93
00:06:31,390 --> 00:06:34,950
Finally, we arrive at performance pillar.

94
00:06:35,110 --> 00:06:38,422
Our sandbox is engineered to handle

95
00:06:38,486 --> 00:06:41,902
massive requests with ease. It's built

96
00:06:41,956 --> 00:06:46,080
to withstand the high surplus demands of our engine.

97
00:06:46,690 --> 00:06:50,030
Low latency is the highlight of our solution.

98
00:06:51,890 --> 00:06:55,182
When talking about isolation, we have to

99
00:06:55,236 --> 00:06:59,230
satisfy three key points. Your first is limiting

100
00:06:59,310 --> 00:07:03,042
resource usage. As you can see through the screenshot on

101
00:07:03,096 --> 00:07:06,514
slides, we use the building Python

102
00:07:06,562 --> 00:07:09,670
package resource to achieve this goal.

103
00:07:10,570 --> 00:07:14,502
The underlying of resource is the

104
00:07:14,556 --> 00:07:17,430
setter ulimit API in Linux kernel,

105
00:07:20,510 --> 00:07:25,158
which can be used to specify particular system resources

106
00:07:25,334 --> 00:07:29,354
and to request usage information about either

107
00:07:29,552 --> 00:07:32,400
the current process or its children.

108
00:07:33,170 --> 00:07:36,734
As you can see, with resource package we

109
00:07:36,772 --> 00:07:41,738
can easily control the cpu time, memory, usage stack,

110
00:07:41,914 --> 00:07:44,050
even the fail system quota.

111
00:07:46,070 --> 00:07:49,858
It almost prevents all possible effects to

112
00:07:49,944 --> 00:07:53,634
system that can be caused by

113
00:07:53,672 --> 00:07:58,002
user defined rules. Moreover, the limitation

114
00:07:58,066 --> 00:08:00,680
can be applied and changed in real time.

115
00:08:01,370 --> 00:08:05,074
This means that each rule execution can be functioned

116
00:08:05,122 --> 00:08:09,286
based on its specific needs and the context

117
00:08:09,398 --> 00:08:12,982
of its invocation. Our sandbox

118
00:08:13,046 --> 00:08:16,538
can dynamically adjust resource allocations and

119
00:08:16,624 --> 00:08:20,342
security mirrors for different cases,

120
00:08:20,486 --> 00:08:24,010
processing the same or in the different routes.

121
00:08:24,850 --> 00:08:29,050
This adaptive approach allows us to maximize resource

122
00:08:29,130 --> 00:08:33,630
utilization efficiency while maintaining strict

123
00:08:33,790 --> 00:08:37,550
security policies. Our sandbox

124
00:08:37,630 --> 00:08:41,362
implements strict controls on the execution time

125
00:08:41,416 --> 00:08:44,942
of each process. By monitoring and

126
00:08:45,016 --> 00:08:48,530
managing running time, we prevent logics

127
00:08:48,610 --> 00:08:52,694
like dead loop and ensure that

128
00:08:52,812 --> 00:08:56,342
all operations complete within their allotted time

129
00:08:56,396 --> 00:09:00,918
frames, maintaining a smooth and predictable

130
00:09:01,014 --> 00:09:01,930
performance.

131
00:09:05,790 --> 00:09:09,610
Let's talk about security to secure

132
00:09:09,970 --> 00:09:13,422
rule execution. Our sandbox that leverage the

133
00:09:13,476 --> 00:09:17,262
power of AIST analysis combined with

134
00:09:17,316 --> 00:09:21,070
a block list to filter out potential malicious code

135
00:09:21,140 --> 00:09:24,560
at both the module and function level.

136
00:09:26,290 --> 00:09:30,050
Resolve usage and system call limitations

137
00:09:30,470 --> 00:09:33,858
are reactive. They come into play

138
00:09:33,944 --> 00:09:37,850
during execution. However, our AIST

139
00:09:37,950 --> 00:09:41,474
based analysis represents a proactive

140
00:09:41,522 --> 00:09:45,090
approach by analyzing the code structure

141
00:09:45,170 --> 00:09:48,502
and its semantics. We can identify

142
00:09:48,646 --> 00:09:51,980
and unlock malicious patents before they are running.

143
00:09:53,070 --> 00:09:56,490
Python provides a building package called AIST,

144
00:09:56,830 --> 00:10:00,940
which provides capabilities to traverse and

145
00:10:02,050 --> 00:10:04,110
analyze grammar tree.

146
00:10:05,010 --> 00:10:08,570
By using this package, we can easily find out which package

147
00:10:08,650 --> 00:10:12,202
are imported to the scope and which functions

148
00:10:12,266 --> 00:10:14,210
are used in user roots.

149
00:10:15,110 --> 00:10:18,482
Combined with the block list, we can block malicious code

150
00:10:18,536 --> 00:10:22,222
without running them. With malicious code prevention,

151
00:10:22,286 --> 00:10:25,634
we can save resources and prevent potential

152
00:10:25,682 --> 00:10:29,250
damage to the system or the network,

153
00:10:29,410 --> 00:10:33,302
which might be irreusible even

154
00:10:33,356 --> 00:10:36,520
with strictest execution control.

155
00:10:37,950 --> 00:10:41,302
In the sandbox environment, we also strike

156
00:10:41,366 --> 00:10:44,806
a balance between transparency for the user

157
00:10:44,918 --> 00:10:47,420
and the stability for the service.

158
00:10:48,190 --> 00:10:51,502
Arrow collection plays pelto roles in this

159
00:10:51,556 --> 00:10:55,274
balance. Let's take a closer

160
00:10:55,322 --> 00:10:59,870
look at how we capture and display arrows from

161
00:10:59,940 --> 00:11:04,330
our user rules while simultaneously

162
00:11:04,410 --> 00:11:07,870
shouting our system from potential crashes.

163
00:11:09,410 --> 00:11:12,558
Well, roots run in our sandbox.

164
00:11:12,654 --> 00:11:15,300
It's isolated from the core of our service.

165
00:11:16,070 --> 00:11:19,322
This means that any arrows within ruse

166
00:11:19,406 --> 00:11:23,560
won't escalate to affect the service itself.

167
00:11:24,570 --> 00:11:29,062
As you can see through the screenshot, when ruin counter arrow,

168
00:11:29,206 --> 00:11:32,934
our sandbox doesn't simply shut down in silence.

169
00:11:33,062 --> 00:11:37,562
Instead, to help user has enough information to

170
00:11:37,616 --> 00:11:41,242
detect which part is wrong, the sandbox will try to

171
00:11:41,296 --> 00:11:44,080
print out trace back information,

172
00:11:44,690 --> 00:11:48,590
then return them to users for further investigation.

173
00:11:49,570 --> 00:11:53,454
Now let's talk about performance. Achieving isolation

174
00:11:53,502 --> 00:11:56,946
in a sandbox environment, especially for high

175
00:11:56,968 --> 00:11:59,090
volume request scenarios,

176
00:12:00,310 --> 00:12:03,614
presents a set of unique

177
00:12:03,662 --> 00:12:07,158
challenges. In the initial design,

178
00:12:07,244 --> 00:12:11,270
we considered the approach of spawning

179
00:12:11,690 --> 00:12:15,590
a new sandbox process for every

180
00:12:15,660 --> 00:12:19,926
incoming request. This provides unparalleled

181
00:12:20,038 --> 00:12:23,514
isolation in ensuring that each

182
00:12:23,632 --> 00:12:27,574
rule is executed in a completely separate

183
00:12:27,622 --> 00:12:32,030
environment. However, this method introduces

184
00:12:32,450 --> 00:12:35,550
significant time consumption for each request

185
00:12:36,130 --> 00:12:39,326
because the Python interpreter needs to import

186
00:12:39,508 --> 00:12:43,220
the necessary packages for each new process,

187
00:12:43,910 --> 00:12:48,046
which leads to disk I O saturation when dealing

188
00:12:48,078 --> 00:12:50,770
with a high number of requests.

189
00:12:51,510 --> 00:12:54,962
We found that with only 20 to

190
00:12:55,016 --> 00:12:58,530
30 requests per second, the sandbox will

191
00:12:58,600 --> 00:13:02,022
exhaust the disk bandwidth and

192
00:13:02,076 --> 00:13:05,238
the time consumption for each request will increase from

193
00:13:05,324 --> 00:13:09,414
few milliseconds to hundreds of milliseconds or

194
00:13:09,452 --> 00:13:12,982
even several seconds. We get

195
00:13:13,036 --> 00:13:16,786
here the disresk when mouse

196
00:13:16,818 --> 00:13:20,800
rules use similar Python package in

197
00:13:21,250 --> 00:13:25,514
an experiment shown on the slice

198
00:13:25,642 --> 00:13:28,240
which reproduces this situation.

199
00:13:28,610 --> 00:13:32,394
As you can see, we use a rule which only imports

200
00:13:32,522 --> 00:13:37,630
package requests when having 16

201
00:13:37,710 --> 00:13:41,330
processes in a machine with HCPO cores,

202
00:13:41,910 --> 00:13:45,330
the execution time increased to 300

203
00:13:45,400 --> 00:13:48,870
milliseconds. Generally, executing a rule only

204
00:13:48,940 --> 00:13:52,294
costs several million seconds, so the huge

205
00:13:52,412 --> 00:13:56,470
time consumption in the preloading stage is obviously

206
00:13:56,620 --> 00:13:57,990
unacceptable.

207
00:13:59,870 --> 00:14:03,494
To tackle this performance issue, we established

208
00:14:03,542 --> 00:14:08,090
a Python interpreter pool for interpreter reuse,

209
00:14:08,590 --> 00:14:12,634
and also we preloaded common libraries upon

210
00:14:12,682 --> 00:14:16,410
interpreter startup so the Python interpreter

211
00:14:16,490 --> 00:14:20,938
will not try to import libraries existing in memory

212
00:14:21,114 --> 00:14:24,974
when executing further rules eliminates

213
00:14:25,022 --> 00:14:28,926
discrete significantly speeding up requests,

214
00:14:28,958 --> 00:14:32,946
handling, and reducing library import time to almost

215
00:14:33,048 --> 00:14:37,234
zero, effectively optimizing system performance

216
00:14:37,362 --> 00:14:38,920
and response time.

217
00:14:41,770 --> 00:14:45,442
In conclusion, our Python sandbox

218
00:14:45,506 --> 00:14:49,062
four dynamic rule execution offers a robust and

219
00:14:49,116 --> 00:14:52,470
secure environment for running user defined rules.

220
00:14:53,290 --> 00:14:57,462
It represents a significant step forward

221
00:14:57,596 --> 00:15:00,954
in both flexibility and curative for rule

222
00:15:01,002 --> 00:15:04,462
execution. We hope this invocation will

223
00:15:04,516 --> 00:15:08,160
empower users to achieve more with our platform.

224
00:15:08,850 --> 00:15:11,530
Thank you for joining this technical session.

