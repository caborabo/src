1
00:00:25,650 --> 00:00:29,430
Everyone welcome to comforted to cloud native.

2
00:00:29,770 --> 00:00:34,310
Today we will see the power of serverless computing with cloud functions.

3
00:00:34,810 --> 00:00:38,786
This is Nielsha at Evox Community Guy building various

4
00:00:38,818 --> 00:00:41,842
DevOps communities like Google, Cloud, NCS,

5
00:00:41,906 --> 00:00:45,618
Docker, Hashico Bank. I build a 15 plus hackathon

6
00:00:45,714 --> 00:00:48,982
and I help people, more than a thousand plus

7
00:00:49,036 --> 00:00:52,638
people to to the source. Let's understand

8
00:00:52,724 --> 00:00:56,478
what is serverless computing? Serverless computing in

9
00:00:56,484 --> 00:01:00,494
a layman language is execution model where

10
00:01:00,692 --> 00:01:04,658
your infrastructure will be scaled and

11
00:01:04,744 --> 00:01:08,482
maintained by the service provider. You just

12
00:01:08,616 --> 00:01:12,430
need to set up the small infra, it will automatically scale

13
00:01:12,590 --> 00:01:15,090
infrastructure by the service provider.

14
00:01:15,670 --> 00:01:18,690
This is just a definition for handling.

15
00:01:19,450 --> 00:01:22,710
So let's shift from the traditional model where

16
00:01:22,780 --> 00:01:26,822
we were giving a lot of time to scale our

17
00:01:26,956 --> 00:01:30,634
infrastructure when the user, when the traffic is

18
00:01:30,672 --> 00:01:33,962
more. So let's focus on the core things

19
00:01:34,096 --> 00:01:37,130
apart from working on the scalability.

20
00:01:38,590 --> 00:01:42,318
It takes a lot of time. So why do we waste our time?

21
00:01:42,404 --> 00:01:46,378
So let's shift what are the advantages of serverless canvas?

22
00:01:46,474 --> 00:01:50,574
It is cost effective. When you have lesser traffic, you have

23
00:01:50,612 --> 00:01:53,250
a smaller consumption,

24
00:01:53,990 --> 00:01:58,126
the cost would be small. When you have a higher traffic, the consumption

25
00:01:58,158 --> 00:02:01,234
will be higher, it will have a higher cost, so it

26
00:02:01,272 --> 00:02:04,126
fluctuates. Next is scalability.

27
00:02:04,318 --> 00:02:08,406
So when the traffic has raised it

28
00:02:08,428 --> 00:02:11,606
will automatically scale up your product and it will

29
00:02:11,628 --> 00:02:15,080
trigger that, to scale up that scale up your application.

30
00:02:16,170 --> 00:02:20,486
And the next thing is focus on code, not on the infrastructure.

31
00:02:20,678 --> 00:02:24,026
Eventually we do a lot of things

32
00:02:24,128 --> 00:02:27,130
to maintain our infrastructure in a very good position.

33
00:02:27,280 --> 00:02:30,806
We do scale, we do monitor scaling.

34
00:02:30,838 --> 00:02:35,150
Purpose installed by it. Next is the evolution of serverless

35
00:02:36,290 --> 00:02:40,320
1800. Let's say sorry ninety s

36
00:02:40,690 --> 00:02:43,938
to the era of physical machine and there were a huge computer,

37
00:02:44,104 --> 00:02:47,794
there were huge OS, it was utilized. Then it

38
00:02:47,832 --> 00:02:51,742
came an era of virtualization where VMware

39
00:02:51,806 --> 00:02:55,026
and all the companies partitioned from the

40
00:02:55,048 --> 00:02:58,562
OS and utilized two different things on the same

41
00:02:58,616 --> 00:03:02,622
computer. Then came the era of cloud computing

42
00:03:02,766 --> 00:03:06,946
where people are storing their data on cloud and hosting

43
00:03:06,978 --> 00:03:08,680
their applications on cloud.

44
00:03:10,250 --> 00:03:14,202
Then came container, try to automate and

45
00:03:14,256 --> 00:03:17,626
try to containerize everything and have shifted to

46
00:03:17,648 --> 00:03:20,814
microservices and

47
00:03:20,852 --> 00:03:24,762
all the people are shifted to serverless. As serverless

48
00:03:24,826 --> 00:03:28,234
is everywhere. All the big cloud provider

49
00:03:28,282 --> 00:03:31,566
are providing their serverless services. As some of the

50
00:03:31,588 --> 00:03:34,580
companies utilize it in a better way.

51
00:03:35,190 --> 00:03:38,958
You don't need to take care about the infra besides

52
00:03:38,974 --> 00:03:42,420
service provider do that.

53
00:03:43,270 --> 00:03:46,926
Next is what are the key concept. So it's

54
00:03:46,958 --> 00:03:50,834
eventive execution, automatic scaling and paper execution.

55
00:03:50,882 --> 00:03:54,374
So let's discuss what was event driven. Event driven is if

56
00:03:54,412 --> 00:03:57,830
something is changed in your code or if some

57
00:03:57,980 --> 00:04:01,980
event has occurred. So after that event made call

58
00:04:02,670 --> 00:04:06,666
some of the function or some other thing then this sort

59
00:04:06,688 --> 00:04:10,646
of thing is called event driven execution. Next is automatic

60
00:04:10,678 --> 00:04:14,334
sharing as I already told and paper exhibition be only

61
00:04:14,372 --> 00:04:19,022
what you own with serverless. Serverless people

62
00:04:19,076 --> 00:04:22,454
will say why serverless? So there are the major reasons.

63
00:04:22,522 --> 00:04:27,106
It's cost effective, scalable, time saving,

64
00:04:27,288 --> 00:04:31,102
event driven model computing to cloud functions

65
00:04:31,166 --> 00:04:34,654
the cloud functions is a serverless

66
00:04:34,702 --> 00:04:38,838
service provided by ECP. That's Google cloud platform and it

67
00:04:38,924 --> 00:04:43,320
offers all the things which we discussing until now also

68
00:04:44,090 --> 00:04:45,670
cloud agnostic.

69
00:04:47,470 --> 00:04:51,018
Language agnostic. Why I say language agnostic because it

70
00:04:51,184 --> 00:04:54,774
allows various languages like node, Js, Python, Joe,

71
00:04:54,822 --> 00:04:58,140
Java, net and nowadays UV also

72
00:04:58,590 --> 00:05:02,014
to write their serverless function code in these

73
00:05:02,052 --> 00:05:05,518
languages. We will see all the things in a demo

74
00:05:05,604 --> 00:05:08,590
later on. What are the use cases?

75
00:05:10,290 --> 00:05:13,874
Here are some of the best use cases. People are utilizing in two ways

76
00:05:13,912 --> 00:05:16,770
are enough that is bad hook and API integration.

77
00:05:17,670 --> 00:05:21,602
Let's take one example, simple example, if we

78
00:05:21,656 --> 00:05:25,186
had integrated Jenkins, if we

79
00:05:25,208 --> 00:05:28,626
had deploying another deploying failed, then there

80
00:05:28,648 --> 00:05:32,662
would be alerts and apparently alerts. If we want to call some other

81
00:05:32,716 --> 00:05:36,118
function which will redeploy that by sharing something,

82
00:05:36,284 --> 00:05:39,974
then we can do that with cloud function. Next is

83
00:05:40,012 --> 00:05:43,610
real time beta processing. Let's take an example of

84
00:05:43,760 --> 00:05:46,874
a live cricket match, football, basketball match,

85
00:05:46,912 --> 00:05:51,054
anything. And the application owner would

86
00:05:51,092 --> 00:05:54,542
be showcasing some,

87
00:05:54,596 --> 00:05:58,480
let's say like a game or poll on the screen

88
00:05:58,850 --> 00:06:02,826
and from the data of that the admin,

89
00:06:02,938 --> 00:06:06,862
the owner of the application would trigger something because

90
00:06:06,996 --> 00:06:10,578
he will ask which team will win.

91
00:06:10,744 --> 00:06:14,194
Or let's say if the match

92
00:06:14,232 --> 00:06:18,194
was interesting or something. So the answers

93
00:06:18,242 --> 00:06:22,822
of the users it will change something and

94
00:06:22,876 --> 00:06:26,134
make if this match was liked by many people then

95
00:06:26,172 --> 00:06:28,460
it will have that in the first order.

96
00:06:29,070 --> 00:06:32,778
So these are small things which can be implemented with real time.

97
00:06:32,944 --> 00:06:36,700
Next is image and video processing. So for this

98
00:06:37,950 --> 00:06:41,294
when we store images and videos in

99
00:06:41,332 --> 00:06:45,066
cloud, it gathers a lot of storage.

100
00:06:45,178 --> 00:06:48,686
It needs a lot of storage, so why

101
00:06:48,708 --> 00:06:52,046
not we optimize them? Let's say we

102
00:06:52,068 --> 00:06:55,714
need to just store the image in

103
00:06:55,752 --> 00:06:59,122
the minimum format of two MB and store

104
00:06:59,176 --> 00:07:03,166
them. So if anyone has uploading

105
00:07:03,198 --> 00:07:07,074
that photo in our application, then we can trigger this and

106
00:07:07,192 --> 00:07:10,922
customize the size of the photo to two MB.

107
00:07:11,006 --> 00:07:14,710
So this way it will work. Next is microservice architecture.

108
00:07:15,130 --> 00:07:18,490
So how does it work? When we have our whole application,

109
00:07:18,640 --> 00:07:22,902
we try to modularize them to break them in smaller parts.

110
00:07:23,046 --> 00:07:26,620
So in microservices it can help to

111
00:07:28,270 --> 00:07:32,586
easily automate the things. Next is integrating

112
00:07:32,618 --> 00:07:36,446
with third party service API. You can just see this

113
00:07:36,468 --> 00:07:40,474
is normal example where we are pushing

114
00:07:40,522 --> 00:07:43,758
some comments on GitHub, the GitHub webhook that's a

115
00:07:43,764 --> 00:07:47,360
third party API integration on the cloud platform.

116
00:07:47,970 --> 00:07:51,586
So the webhook will trigger with cloud functions

117
00:07:51,768 --> 00:07:55,206
and it will trigger to slack. So there is two

118
00:07:55,228 --> 00:07:58,966
third party apps and the intervention of them is done by

119
00:07:58,988 --> 00:08:02,530
the cloud function. This way it cloud also helpful

120
00:08:02,610 --> 00:08:06,070
for us next is serverless mobile backend.

121
00:08:06,570 --> 00:08:10,122
So as I already told you an example

122
00:08:10,176 --> 00:08:14,118
of preclaired or basketball game. So similarly

123
00:08:14,294 --> 00:08:17,514
as something is live from the

124
00:08:17,632 --> 00:08:21,802
answers and from the responses of user,

125
00:08:21,946 --> 00:08:25,454
the owner of the application knows which

126
00:08:25,492 --> 00:08:28,750
thing is better and

127
00:08:28,900 --> 00:08:30,880
how to trigger them.

128
00:08:32,470 --> 00:08:36,158
The application could boost about have more user.

129
00:08:36,334 --> 00:08:40,050
So this way the serverless functions are

130
00:08:40,120 --> 00:08:43,620
helpful for it. So serverless I have to back in.

131
00:08:44,970 --> 00:08:49,222
Nowadays the home automation thing is on boom. Everyone is

132
00:08:49,356 --> 00:08:52,466
utilizing their smartphones to spin

133
00:08:52,498 --> 00:08:58,102
up their span, spin up their lives, everything there.

134
00:08:58,156 --> 00:09:02,390
Also this function intervention

135
00:09:02,470 --> 00:09:07,034
would help them. So let's see the

136
00:09:07,072 --> 00:09:11,046
sensor how it works. So when the temperature

137
00:09:11,238 --> 00:09:15,882
doesn't have directly temperature

138
00:09:15,946 --> 00:09:19,706
sensor but eventually from coding perspective

139
00:09:19,818 --> 00:09:23,738
we can utilize the function to integrate the two third party sensors

140
00:09:23,834 --> 00:09:26,970
and have the automation in IoT directly.

141
00:09:27,130 --> 00:09:30,130
So it plays a good role in IoT.

142
00:09:30,710 --> 00:09:34,706
So yeah the thing which I told you directly so

143
00:09:34,808 --> 00:09:39,062
you had a good length of video and then

144
00:09:39,116 --> 00:09:43,094
if someone is uploading the video on your application then

145
00:09:43,132 --> 00:09:46,806
you can figure out how much storage or something should be

146
00:09:46,828 --> 00:09:50,406
done on the video and just store them in the cloud storage.

147
00:09:50,518 --> 00:09:54,186
So it will be to basically help you to optimize your

148
00:09:54,208 --> 00:09:57,594
storage. It will eventually help

149
00:09:57,632 --> 00:10:01,482
you to optimize the cost. Some of the best practices for

150
00:10:01,616 --> 00:10:04,950
cloud functions are design state lab functions.

151
00:10:05,110 --> 00:10:08,446
State lab means independent functions which are

152
00:10:08,468 --> 00:10:12,542
not dependent because sometimes what happens is one

153
00:10:12,596 --> 00:10:16,554
function is triggered on the cloud function and other dependent

154
00:10:16,682 --> 00:10:19,918
other function is dependent on that. So it will wait till

155
00:10:19,934 --> 00:10:23,602
the first function is triggered. So if first function

156
00:10:23,736 --> 00:10:26,918
goes out the next function won't be able to do

157
00:10:27,004 --> 00:10:31,078
its work recurrently. Try to use

158
00:10:31,164 --> 00:10:35,240
states like design state lens function.

159
00:10:36,890 --> 00:10:40,566
Next is handling dependency efficiently to

160
00:10:40,588 --> 00:10:43,918
minimize the dependency, to minimize the parameter

161
00:10:43,954 --> 00:10:47,206
library package sort of thing. Use lightweight

162
00:10:47,238 --> 00:10:50,426
libraries so it will help you to boost

163
00:10:50,458 --> 00:10:54,526
your efficiency and to boost your time. Next is

164
00:10:54,628 --> 00:10:57,902
setting up monitoring and logging. Eventually it is

165
00:10:57,956 --> 00:11:01,338
a good way to monitor and log because sometime

166
00:11:01,434 --> 00:11:05,246
you need to have the minimum storage

167
00:11:05,278 --> 00:11:08,430
or some sort of thing. You have a minimum bandwidth.

168
00:11:08,510 --> 00:11:12,098
So how you will decide that so something is some

169
00:11:12,264 --> 00:11:15,566
thing has gone up above your bandwidth

170
00:11:15,598 --> 00:11:19,330
then you should be notified securing function

171
00:11:19,400 --> 00:11:23,830
code and dependencies. So even if you are utilizing third party

172
00:11:24,970 --> 00:11:27,782
libraries then you should have a least privilege with them.

173
00:11:27,836 --> 00:11:31,318
Because sometimes if I use a third party library

174
00:11:31,414 --> 00:11:34,454
and it has security concerns, security vulnerabilities,

175
00:11:34,582 --> 00:11:37,866
and I had it bigger in my live project and the whole thing will

176
00:11:37,888 --> 00:11:41,820
be gone to have security scan before that and also

177
00:11:42,830 --> 00:11:46,538
to give them least access, least privileges.

178
00:11:46,634 --> 00:11:50,510
So it will be benefits for us because as a security person

179
00:11:50,660 --> 00:11:53,906
we should also, sorry, as an infrastructure person we should also

180
00:11:53,928 --> 00:11:57,060
consider security as one of the core major things,

181
00:11:57,750 --> 00:12:01,682
optimizing cloud function performance. So cloud

182
00:12:01,736 --> 00:12:05,542
starts involved strategies. So sometime what happens is the

183
00:12:05,596 --> 00:12:09,174
serverless function is working on a low end,

184
00:12:09,292 --> 00:12:12,434
low end is minimum end, it is going at minimum.

185
00:12:12,482 --> 00:12:16,214
And from almost one month and something,

186
00:12:16,412 --> 00:12:19,830
some huge traffic has came as some good sale

187
00:12:19,910 --> 00:12:23,660
is there in Amazon or something, then a huge traffic will be there.

188
00:12:24,030 --> 00:12:26,970
So how to optimize them,

189
00:12:27,040 --> 00:12:30,860
because when cloud starts and strategies are not there,

190
00:12:31,390 --> 00:12:35,142
it could break the like

191
00:12:35,216 --> 00:12:39,262
in this technique, what you can do is every

192
00:12:39,316 --> 00:12:43,294
day takes a time where you are infecting a traffic,

193
00:12:43,342 --> 00:12:47,006
good traffic, or every month, every monthly or every weekly

194
00:12:47,038 --> 00:12:50,354
you can figure out as per your perspective. So it

195
00:12:50,392 --> 00:12:53,666
will help you to optimize your function

196
00:12:53,848 --> 00:12:57,990
whenever it is in need. Next is minimizing

197
00:12:58,890 --> 00:13:02,662
function execution time. So it is really important

198
00:13:02,796 --> 00:13:06,840
to optimize them because we need to try and test them.

199
00:13:07,450 --> 00:13:10,774
How we can get the idea, let's take the

200
00:13:10,812 --> 00:13:14,454
execution time of function is 10 seconds and we are figuring

201
00:13:14,502 --> 00:13:18,374
that we have figured 16

202
00:13:18,422 --> 00:13:21,866
seconds, so it is not a good use case. How we

203
00:13:21,888 --> 00:13:25,674
will figure that we need to test drive and then

204
00:13:25,792 --> 00:13:29,018
we can figure it out. Next is fine tuning

205
00:13:29,034 --> 00:13:32,794
of time out of values. It's same as inner keys

206
00:13:32,842 --> 00:13:36,338
with the execution time. But yeah, we need

207
00:13:36,344 --> 00:13:39,998
to figure out that ensuring security in cloud functions,

208
00:13:40,094 --> 00:13:44,050
so security is also main concern in each and every aspect.

209
00:13:44,390 --> 00:13:47,858
So utilizing IAM rules and giving the

210
00:13:47,864 --> 00:13:51,222
minimum privileges to the app. Next is

211
00:13:51,276 --> 00:13:54,934
securing function code dependencies. So try

212
00:13:54,972 --> 00:13:58,758
to avoid giving your password, your passcodes

213
00:13:58,774 --> 00:14:02,086
or app codes and your functions

214
00:14:02,118 --> 00:14:05,900
and store them some other parallel, some other way.

215
00:14:06,270 --> 00:14:09,366
We have key management systems

216
00:14:09,398 --> 00:14:13,150
in every cloud provider and some of the projects we use

217
00:14:13,300 --> 00:14:17,466
vault also to store our secrets. So yeah, try to utilize

218
00:14:17,578 --> 00:14:21,600
the various secret tools handling consider data

219
00:14:22,290 --> 00:14:25,938
and script all the data. And also there are many services

220
00:14:26,024 --> 00:14:29,460
by the Google provider so you can use them.

221
00:14:30,150 --> 00:14:32,740
This is the shift which is there.

222
00:14:33,190 --> 00:14:34,690
So firstly,

223
00:14:35,930 --> 00:14:39,414
how human has shifted as a

224
00:14:39,452 --> 00:14:43,526
human from the animal sort

225
00:14:43,548 --> 00:14:46,770
of thing, the physical,

226
00:14:46,850 --> 00:14:50,426
virtual, virtual continuous. Then came the

227
00:14:50,448 --> 00:14:53,386
serverless. So you can understand the whole thing,

228
00:14:53,488 --> 00:14:57,014
whole economic specs like diplomacy.

229
00:14:57,142 --> 00:15:00,526
I have

230
00:15:00,548 --> 00:15:03,518
made good resources for all the cloud people.

231
00:15:03,684 --> 00:15:07,146
You can do visit this on GitHub

232
00:15:07,178 --> 00:15:10,670
and it's public, you can utilize the good resources.

233
00:15:11,010 --> 00:15:15,550
You can connect me tag with me for inquiring

234
00:15:15,710 --> 00:15:19,778
and now we will go ahead for the demo. So yeah

235
00:15:19,864 --> 00:15:23,650
I already made the demo. So go on to Google

236
00:15:23,720 --> 00:15:27,478
Cloud, search for power functions and then create

237
00:15:27,564 --> 00:15:30,440
functions. You can write the name,

238
00:15:31,050 --> 00:15:34,934
you can then select the

239
00:15:34,972 --> 00:15:40,006
region. Google Cloud also supports

240
00:15:40,198 --> 00:15:44,060
to reduce the carbon footprint so it is showing low carbon in that.

241
00:15:44,990 --> 00:15:48,262
And here are the types, these are the HTTP

242
00:15:48,326 --> 00:15:52,318
curbserve cloud storage firestore so

243
00:15:52,404 --> 00:15:55,998
if something so if something

244
00:15:56,164 --> 00:15:59,994
HTTPs requests are there then it will be good. The password

245
00:16:00,042 --> 00:16:03,840
is public and subscribe. They are the different

246
00:16:04,290 --> 00:16:07,394
techniques you can use and you can also customize the thing.

247
00:16:07,512 --> 00:16:10,820
So these are the allocated and then you can set all the things.

248
00:16:11,430 --> 00:16:14,958
You can also set how many instance you want for auto

249
00:16:14,974 --> 00:16:18,614
scaling. These are the all things you can figure out once

250
00:16:18,732 --> 00:16:20,520
when you are on the cloud function.

251
00:16:21,770 --> 00:16:25,590
After making the cloud function you can see

252
00:16:25,660 --> 00:16:29,402
you can select many languages over here you

253
00:16:29,456 --> 00:16:33,798
have python node react

254
00:16:33,974 --> 00:16:37,878
and. Net java all the over here I'll

255
00:16:37,894 --> 00:16:42,134
choose python over here and we have your HTTP request

256
00:16:42,182 --> 00:16:45,870
over here. We can upload the file from local

257
00:16:45,940 --> 00:16:50,014
from the cloud storage and we can also edit the file over here seen

258
00:16:50,052 --> 00:16:53,182
on the right hand side we will customize and you can test

259
00:16:53,236 --> 00:16:56,318
the function over here. The name is given in hello.

260
00:16:56,484 --> 00:16:59,694
We will just check them and change, try to

261
00:16:59,732 --> 00:17:02,926
change that. It will take one or two

262
00:17:02,948 --> 00:17:07,974
minutes. Cloud that now

263
00:17:08,012 --> 00:17:11,494
I have changed hello world to my name and it should

264
00:17:11,532 --> 00:17:15,000
work perfectly. See the function is ready to test.

265
00:17:15,450 --> 00:17:18,806
Functions is ready. Yeah that can be on both the

266
00:17:18,828 --> 00:17:22,930
things here also and on the console also. Hello Neil

267
00:17:23,010 --> 00:17:26,440
it's there. You can try and figure out

268
00:17:27,450 --> 00:17:28,500
you can connect with me.

