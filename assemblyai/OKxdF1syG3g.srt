1
00:00:25,090 --> 00:00:28,950
Folks at CoN 42, thanks so much for joining into my talk today.

2
00:00:29,100 --> 00:00:32,470
Today I want to talk with you about observability.

3
00:00:32,970 --> 00:00:36,600
What is the importance of having observability in your system

4
00:00:36,970 --> 00:00:40,326
and some of the key pillars about it. I'm also going

5
00:00:40,348 --> 00:00:44,550
to talk to you about opentelemetry and how it works and

6
00:00:44,620 --> 00:00:48,578
where it fits within this entire observability system. So let's

7
00:00:48,594 --> 00:00:52,026
get started with that a little bit. About me I'm

8
00:00:52,058 --> 00:00:55,834
Siddhant. I'm a developer advocate at Siglens

9
00:00:55,962 --> 00:00:59,518
and I'm also a co organizer at cloud native community

10
00:00:59,604 --> 00:01:03,598
groups nasic. Along with that, I'm also a community

11
00:01:03,684 --> 00:01:06,530
manager at a couple of tech communities.

12
00:01:07,270 --> 00:01:10,546
Now if that didn't make it obvious already, I'm a

13
00:01:10,568 --> 00:01:14,366
huge geek when it comes to tech. I love talking about Linux

14
00:01:14,478 --> 00:01:18,226
as well as Kubernetes and I've also started to geek

15
00:01:18,258 --> 00:01:21,974
out about various books and about health.

16
00:01:22,172 --> 00:01:25,366
If you want to connect with me after this talk, feel free to

17
00:01:25,388 --> 00:01:28,682
find me on my socials. Now before I

18
00:01:28,736 --> 00:01:32,406
talk about anything technical, let's imagine a scenario.

19
00:01:32,598 --> 00:01:36,854
You have a server. Let's say it's running on, on Prem

20
00:01:36,982 --> 00:01:41,146
in your own data center and on top of the server

21
00:01:41,258 --> 00:01:44,666
you have your applications running. You've got your healthy

22
00:01:44,698 --> 00:01:48,206
applications, you've got your healthy databases, and all

23
00:01:48,228 --> 00:01:52,202
of your users or your customers are able to properly

24
00:01:52,266 --> 00:01:55,426
access your applications. And everybody is happy.

25
00:01:55,528 --> 00:01:59,282
The developers are happy, your operation teams are happy and

26
00:01:59,336 --> 00:02:03,026
most of all your customers are happy. Now all

27
00:02:03,048 --> 00:02:06,902
of a sudden something happens and your server goes down

28
00:02:06,956 --> 00:02:10,354
for whatever reason, maybe because of a power failure,

29
00:02:10,482 --> 00:02:13,510
maybe because there's too much load on the system,

30
00:02:13,660 --> 00:02:17,654
or it could be a plethora of different reasons your

31
00:02:17,692 --> 00:02:20,986
server has gone down. That means it's going to lead to a

32
00:02:21,008 --> 00:02:24,506
cascading number of other errors. You're soon going to

33
00:02:24,528 --> 00:02:28,474
start seeing some faults in your application and

34
00:02:28,512 --> 00:02:31,834
your database as well. In the extreme worst

35
00:02:31,882 --> 00:02:35,626
case, your data might be completely lost.

36
00:02:35,738 --> 00:02:39,354
You might start losing old data as well as new incoming

37
00:02:39,402 --> 00:02:43,194
data. And this is going to cause a lot of unhappy

38
00:02:43,242 --> 00:02:46,434
users, which at the end of the day

39
00:02:46,472 --> 00:02:50,402
is going to cost a lot in terms of business value and

40
00:02:50,456 --> 00:02:53,780
revenue as well. And none of us want that right.

41
00:02:54,870 --> 00:02:58,566
And this entire thing has happened at 03:00 a.m.

42
00:02:58,668 --> 00:03:02,310
And your engineers, your operations folks are getting

43
00:03:02,460 --> 00:03:06,262
a ton of calls as to what's wrong with the server. They are working

44
00:03:06,316 --> 00:03:09,094
tirelessly to try and bring the server back up,

45
00:03:09,212 --> 00:03:12,950
but they have absolutely no idea what's wrong with the servers.

46
00:03:13,110 --> 00:03:16,282
This is because you haven't put in any sort of way

47
00:03:16,336 --> 00:03:20,182
to get visibility within your servers as to what's happening

48
00:03:20,256 --> 00:03:23,886
within it in the first place, right? So that's what we're going

49
00:03:23,908 --> 00:03:27,614
to talk about today. That's where observability comes

50
00:03:27,652 --> 00:03:30,480
into play and can really help you out.

51
00:03:31,090 --> 00:03:34,706
So observability in a nutshell allows you to get

52
00:03:34,808 --> 00:03:38,642
deep insights into your system and it allows you to use

53
00:03:38,696 --> 00:03:42,350
all of this data to evaluate your performance

54
00:03:42,510 --> 00:03:46,194
and improve it as well. And it's also useful for

55
00:03:46,232 --> 00:03:50,246
debugging issues and predicting any sort of future issues.

56
00:03:50,428 --> 00:03:53,926
Let me give you an example about predicting issues. Let's say

57
00:03:53,948 --> 00:03:57,926
you're an ecommerce website and you have spikes during certain periods of the

58
00:03:57,948 --> 00:04:01,558
day, right? So in this case, whenever you have a spike

59
00:04:01,654 --> 00:04:05,802
you would require more resources. So you need to allocate more

60
00:04:05,856 --> 00:04:09,366
resources or provision more resources from your cloud provider

61
00:04:09,478 --> 00:04:13,550
in order to maintain a healthy uptime. There are also

62
00:04:13,620 --> 00:04:17,182
three main pillars of observability. But before

63
00:04:17,236 --> 00:04:21,550
getting into that, let me try and give you an analogy to understand observability.

64
00:04:22,290 --> 00:04:25,840
Let's say you drive a car and you do your own

65
00:04:26,290 --> 00:04:29,746
repairing and maintenance for your car. Now if you did not have

66
00:04:29,768 --> 00:04:33,026
the correct tools, how are you going to know what's going on

67
00:04:33,048 --> 00:04:36,390
within your car? If you try to understand what's happening

68
00:04:36,460 --> 00:04:40,178
in your entire engine without ever opening your bonnet,

69
00:04:40,274 --> 00:04:43,878
you have no idea what's going to happen. For example,

70
00:04:44,044 --> 00:04:48,026
let's say your tire has low air in it. You wouldn't know

71
00:04:48,048 --> 00:04:51,034
that unless you have the right tools, correct?

72
00:04:51,232 --> 00:04:54,438
That's exactly what we want to achieve within observability.

73
00:04:54,614 --> 00:04:57,850
But for our software and for our servers.

74
00:04:58,830 --> 00:05:02,654
Now talking about the key pillars of observability, we have got three key

75
00:05:02,692 --> 00:05:06,606
pillars. The first one of them is logs. Logs are

76
00:05:06,628 --> 00:05:10,302
simply timestamped data with some information about

77
00:05:10,356 --> 00:05:14,114
an event that has happened. For example, my application

78
00:05:14,232 --> 00:05:18,420
could have thrown me a warning at 02:15 a.m.

79
00:05:18,870 --> 00:05:22,642
Now obviously nobody is going to sit at 02:15 a.m.

80
00:05:22,696 --> 00:05:26,502
And continuously monitor the logs, right? So that's where we

81
00:05:26,556 --> 00:05:30,070
generate logs using some sort of observability tool

82
00:05:30,220 --> 00:05:33,686
and we store it in some sort of observability back end.

83
00:05:33,788 --> 00:05:37,710
More on this later. The second pillar of observability

84
00:05:37,810 --> 00:05:41,514
is metrics. Now metrics involve things like your

85
00:05:41,552 --> 00:05:44,714
CPU utilization over a long period of time,

86
00:05:44,832 --> 00:05:47,738
your memory utilization over a period of time,

87
00:05:47,824 --> 00:05:51,374
and other similar things. It can

88
00:05:51,412 --> 00:05:55,086
also include things like your HTTP requests as well.

89
00:05:55,188 --> 00:05:58,474
How many requests were dropped, how many were accepted,

90
00:05:58,602 --> 00:06:01,662
and similar types of details. Next,

91
00:06:01,716 --> 00:06:05,538
we have traces. Now traces is

92
00:06:05,624 --> 00:06:08,820
useful for figuring out the performances of your application.

93
00:06:09,350 --> 00:06:12,994
Now, in this diagram, you can see that for going from

94
00:06:13,032 --> 00:06:16,166
A to B, it takes 50 milliseconds. Now, A and

95
00:06:16,188 --> 00:06:20,278
B are simply some function calls. So function

96
00:06:20,364 --> 00:06:23,986
A makes a call to function B, and it takes 50 milliseconds

97
00:06:24,018 --> 00:06:27,846
for that entire process to wrap up. Then function b tries to

98
00:06:27,868 --> 00:06:31,242
go to function C, function c tries to go to function D,

99
00:06:31,296 --> 00:06:35,354
and so on. The amount of time it's taking for this entire

100
00:06:35,472 --> 00:06:39,222
transaction to happen, this entire communication between various

101
00:06:39,286 --> 00:06:43,322
functions to happen, is what we call as a span

102
00:06:43,466 --> 00:06:47,182
and the entire process for it to

103
00:06:47,236 --> 00:06:50,270
complete, that is what we call as a trace.

104
00:06:51,090 --> 00:06:54,242
So now let's talk a little bit about what is open

105
00:06:54,296 --> 00:06:57,534
telemetry. Now, opentelemetry is simply

106
00:06:57,582 --> 00:07:01,678
a framework which you can use for implementing observability

107
00:07:01,774 --> 00:07:06,466
within your systems. Now, to give you a little bit of a backstory,

108
00:07:06,658 --> 00:07:09,814
before the introduction of open telemetry, there were

109
00:07:09,852 --> 00:07:13,430
around 14 or 15 different standards for observability.

110
00:07:13,770 --> 00:07:17,286
If you come from the web development world, you know how much of

111
00:07:17,308 --> 00:07:20,730
a pain this can be, having multiple standards for the exact

112
00:07:20,800 --> 00:07:24,166
same thing. When Opentelemetry was created,

113
00:07:24,278 --> 00:07:27,670
the project had an aim of unifying all these standards,

114
00:07:27,830 --> 00:07:31,786
and it has so far achieved this goal.

115
00:07:31,978 --> 00:07:35,502
A lot of the existing standards have all

116
00:07:35,556 --> 00:07:39,786
pretty much been merged into Opentelemetry, and Opentelemetry

117
00:07:39,818 --> 00:07:44,130
is becoming a de facto for observability standards.

118
00:07:44,470 --> 00:07:48,318
Moving on. I might call Opentelemetry as Otel,

119
00:07:48,414 --> 00:07:52,850
which is just an abbreviation, a short form for saying Opentelemetry.

120
00:07:53,750 --> 00:07:57,398
Now, Opentelemetry works in a couple of different ways.

121
00:07:57,564 --> 00:08:01,154
If you look on the left in the entire microservices column,

122
00:08:01,282 --> 00:08:05,094
that is where you actually try and instrument your code.

123
00:08:05,292 --> 00:08:09,238
So Opentelemetry has a couple of developer kits,

124
00:08:09,334 --> 00:08:13,094
SDKs. Using those SDKs, you will instrument

125
00:08:13,142 --> 00:08:16,346
your code that, hey, this is my function.

126
00:08:16,528 --> 00:08:20,154
I want Opentelemetry to tell me how much time it

127
00:08:20,192 --> 00:08:24,206
takes to go from this one function to the second function to

128
00:08:24,228 --> 00:08:28,014
this third function or whatever. So for that you

129
00:08:28,052 --> 00:08:32,362
have the Otel SDKs, you have Otel APIs as well.

130
00:08:32,516 --> 00:08:35,858
And there's also a really useful feature which is

131
00:08:35,944 --> 00:08:39,282
compatible with just a few languages for now called

132
00:08:39,336 --> 00:08:42,946
as Opentelemetry auto instrumentation. It's just as it

133
00:08:42,968 --> 00:08:46,386
sounds, it tries and automatically instrument all of

134
00:08:46,408 --> 00:08:50,006
your code. For now, I have seen it work with

135
00:08:50,028 --> 00:08:53,734
node JS, but there are a couple of other languages as well,

136
00:08:53,772 --> 00:08:57,174
which it supports. Then you can also use

137
00:08:57,292 --> 00:09:01,114
opentelemetry for your infrastructure. For example, if you are running

138
00:09:01,232 --> 00:09:05,014
opentelemetry on a VM, you can collect the system logs,

139
00:09:05,062 --> 00:09:08,246
the memory usage, the RAM usage, the system calls,

140
00:09:08,278 --> 00:09:11,854
et cetera. Same thing you can do with Kubernetes as well.

141
00:09:11,972 --> 00:09:15,322
There is the opentelemetry operator for kubernetes,

142
00:09:15,466 --> 00:09:18,590
and you can install it with a simple helm chart.

143
00:09:19,170 --> 00:09:22,526
Now, once you have instrumented your code or

144
00:09:22,548 --> 00:09:26,462
your infrastructure, you have something called as an opentelemetry

145
00:09:26,526 --> 00:09:30,626
collector. The collector simply acts as a way to collect all

146
00:09:30,648 --> 00:09:34,594
of your telemetry data. Telemetry data and observability data

147
00:09:34,632 --> 00:09:38,310
are the same thing. So telemetry data includes all of your three things,

148
00:09:38,460 --> 00:09:40,710
logs, traces and metrics.

149
00:09:41,930 --> 00:09:45,622
Once the opentelemetry collector collects all of that telemetry data

150
00:09:45,676 --> 00:09:49,350
and it processes it properly, it sends it to an observability

151
00:09:49,430 --> 00:09:52,790
front end, or rather an observability backend.

152
00:09:52,950 --> 00:09:56,218
Now, this backend can be something like

153
00:09:56,384 --> 00:09:59,734
Grafana or Loki or siglens,

154
00:09:59,782 --> 00:10:03,502
for example, which helps you store all of this data,

155
00:10:03,636 --> 00:10:07,486
filter through all of this data, create graphs, create some

156
00:10:07,508 --> 00:10:11,438
sort of analytics and so on. Now, how does the

157
00:10:11,524 --> 00:10:15,406
opentelemetry collector actually work? So here I'm

158
00:10:15,438 --> 00:10:19,246
taking an example with Argo. If you don't know what is Argo?

159
00:10:19,278 --> 00:10:22,786
CD? Argo is basically a tool which allows you to

160
00:10:22,808 --> 00:10:26,790
implement Githubs within your entire software workflow.

161
00:10:27,850 --> 00:10:31,794
Now, to talk about how the entire Opentelemetry

162
00:10:31,842 --> 00:10:35,270
collector works, Argo, within its entire

163
00:10:35,340 --> 00:10:39,094
code base has some sort of built in mechanisms for collecting

164
00:10:39,142 --> 00:10:42,714
this telemetry data. You simply need to configure within it

165
00:10:42,752 --> 00:10:46,214
that the endpoint where you want this telemetry

166
00:10:46,262 --> 00:10:49,754
data to go is open telemetry and it exists over

167
00:10:49,792 --> 00:10:53,534
here. Once that is done, Argo will send

168
00:10:53,572 --> 00:10:57,626
the information to an open telemetry receiver. The receiver's

169
00:10:57,658 --> 00:11:01,374
job is simply to receive whatever data is being sent by this

170
00:11:01,412 --> 00:11:04,798
external source. It doesn't necessarily have to be Argo.

171
00:11:04,894 --> 00:11:08,322
It could be a number of other applications, it could

172
00:11:08,376 --> 00:11:12,126
even be a custom application. Once the receiver

173
00:11:12,158 --> 00:11:15,134
has the data, it'll send it over to the processor.

174
00:11:15,262 --> 00:11:18,706
Now, the processor is used for adding some additional data onto

175
00:11:18,738 --> 00:11:22,200
the existing telemetry data. For example,

176
00:11:22,650 --> 00:11:25,862
I've gotten a warning log from Argo that hey,

177
00:11:25,916 --> 00:11:28,380
your deployment has failed for whatever reason.

178
00:11:28,830 --> 00:11:32,614
Now, within the processor, I can configure the processor

179
00:11:32,662 --> 00:11:36,090
in such a way that it will attach some details about

180
00:11:36,160 --> 00:11:39,574
CPU usage, memory usage, maybe some batch

181
00:11:39,622 --> 00:11:42,926
process that's happening in the background to

182
00:11:43,028 --> 00:11:46,190
this particular log which I've received from Argo.

183
00:11:46,770 --> 00:11:50,254
Once those entire processes are done, the next step is

184
00:11:50,292 --> 00:11:53,842
the exporter. Exporter's job is simply to send

185
00:11:53,896 --> 00:11:57,090
the data to some sort of observability backend.

186
00:11:57,430 --> 00:12:00,738
Opentelemetry does not store any of the data

187
00:12:00,824 --> 00:12:04,338
which it collects. It'll collect it, it'll process it,

188
00:12:04,424 --> 00:12:08,850
and its job is done. If you don't send it to any sort of external

189
00:12:09,010 --> 00:12:12,754
observability storage area or an observability backend,

190
00:12:12,882 --> 00:12:16,626
this data is going to be lost. So that's where the exporter's

191
00:12:16,658 --> 00:12:19,882
job comes into play. The exporter will send the data

192
00:12:19,936 --> 00:12:23,274
to an observability backend, such as siglens for example.

193
00:12:23,472 --> 00:12:26,906
There are other options as well, but I'll take siglens as

194
00:12:26,928 --> 00:12:30,250
the example here. Now, if you want to get started

195
00:12:30,320 --> 00:12:33,374
with Opentelemetry, there are two ways depending on

196
00:12:33,412 --> 00:12:36,606
who you are. If you are a developer, then you

197
00:12:36,628 --> 00:12:40,494
can use the API of Opentelemetry. It also has

198
00:12:40,532 --> 00:12:44,206
a number of different SDKs which you can use for instrumenting

199
00:12:44,238 --> 00:12:48,514
your code, and you can find all of that on Opentelemetry's website.

200
00:12:48,712 --> 00:12:52,382
And if you're an operations person, you're a system administrator,

201
00:12:52,526 --> 00:12:55,926
there's a completely different roadmap for you. I'm going

202
00:12:55,948 --> 00:12:59,734
to talk about it from an administrator's perspective, since that's the

203
00:12:59,772 --> 00:13:02,120
field that I have some experience with.

204
00:13:03,130 --> 00:13:06,214
So as an administrator, or rather an

205
00:13:06,252 --> 00:13:09,434
operations person, you have two ways to install it.

206
00:13:09,552 --> 00:13:13,130
You can either install it using Docker compose,

207
00:13:14,190 --> 00:13:17,194
which you can find in the documentation again,

208
00:13:17,392 --> 00:13:20,906
and docker. I'm taking the docker way and assuming that

209
00:13:20,928 --> 00:13:24,382
you want to run it on a simple VM. The second

210
00:13:24,436 --> 00:13:27,774
way is using Helm. Helm is a package manager for

211
00:13:27,812 --> 00:13:31,674
Kubernetes, so if you want to install Opentelemetry onto

212
00:13:31,722 --> 00:13:35,078
Kubernetes, you would do that using helm.

213
00:13:35,194 --> 00:13:38,926
Now there are a lot more in depth processes such as the Opentelemetry

214
00:13:38,958 --> 00:13:42,270
operator and all that comes into play for Kubernetes,

215
00:13:42,350 --> 00:13:45,538
but that will go outside the scope

216
00:13:45,554 --> 00:13:47,880
of this talk, so we're going to skip that for now.

217
00:13:48,570 --> 00:13:53,042
Once you have installed opentelemetry using Docker

218
00:13:53,186 --> 00:13:56,514
or using helm, this configuration

219
00:13:56,562 --> 00:14:00,750
that you can see on the screen is what an open telemetry's

220
00:14:00,770 --> 00:14:03,978
configuration might look like. So let's just quickly

221
00:14:04,064 --> 00:14:06,860
take a look through all of these configuration options.

222
00:14:07,470 --> 00:14:10,814
First, you can see that we have the receivers, and over

223
00:14:10,852 --> 00:14:14,720
there you're simply mentioning the type of protocol that

224
00:14:15,170 --> 00:14:19,950
you're receiving the data with, whether it's via GRPC or HTTP,

225
00:14:20,370 --> 00:14:24,046
and you are mentioning an endpoint as well. So in here for

226
00:14:24,068 --> 00:14:28,166
the HTTP protocol in specific Opentelemetry

227
00:14:28,218 --> 00:14:31,938
is expecting some data to come in from localhost on

228
00:14:32,024 --> 00:14:35,362
port 4318. Now after

229
00:14:35,416 --> 00:14:39,046
that the telemetry data which

230
00:14:39,068 --> 00:14:42,434
the receiver has gotten is going to head over to the processor.

231
00:14:42,562 --> 00:14:46,562
The processor will have its own thing. Over here you have a batch

232
00:14:46,626 --> 00:14:50,502
process. You can attach a number of other processes

233
00:14:50,566 --> 00:14:54,358
as well. And all of that you can find either in the documentation

234
00:14:54,534 --> 00:14:58,022
or on Opentelemetry's GitHub

235
00:14:58,086 --> 00:15:01,350
page. Next thing we have is the exporters,

236
00:15:01,430 --> 00:15:04,826
which again I mentioned what it is. The exporter is simply

237
00:15:04,858 --> 00:15:07,978
going to send the data to some external storage.

238
00:15:08,154 --> 00:15:11,722
Now over here you have exporter type of OTLP.

239
00:15:11,786 --> 00:15:15,278
This means that the data which is getting exported

240
00:15:15,374 --> 00:15:19,086
is going to be in the format that opentelemetry supports,

241
00:15:19,198 --> 00:15:23,026
and it goes to this endpoint. Now over here, this is just an example

242
00:15:23,128 --> 00:15:26,978
endpoint, but this can be absolutely anything

243
00:15:27,144 --> 00:15:31,010
as long as the observability backend supports the

244
00:15:31,080 --> 00:15:34,502
opentelemetry endpoint, which at this point pretty

245
00:15:34,556 --> 00:15:38,622
much every single observability backend will be supporting the opentelemetry

246
00:15:38,706 --> 00:15:42,042
data format. Then you also have some

247
00:15:42,096 --> 00:15:45,500
extensions and service checks which you can put into place.

248
00:15:45,950 --> 00:15:48,586
Talking about pipeline, this is something important.

249
00:15:48,768 --> 00:15:52,238
The pipeline is simply how you want all of the data to

250
00:15:52,244 --> 00:15:55,390
be formatted. So for example, for traces,

251
00:15:55,890 --> 00:15:59,534
I first want my opentelemetry traces to be

252
00:15:59,572 --> 00:16:03,214
collected. Then I want my processes to run in this order.

253
00:16:03,332 --> 00:16:06,574
Now since over here we just have one single processor,

254
00:16:06,702 --> 00:16:09,874
that's the only thing which is mentioned. But if we had a couple of

255
00:16:09,912 --> 00:16:13,950
other processes, for example CPU utilization,

256
00:16:14,030 --> 00:16:17,486
memory utilization, we would put that here in which

257
00:16:17,528 --> 00:16:21,298
order we wanted. So if I wanted first CPU utilization,

258
00:16:21,474 --> 00:16:24,966
then I wanted information about batch, that's how my order would

259
00:16:24,988 --> 00:16:28,394
be. If I wanted the details of batch first, my batch would

260
00:16:28,432 --> 00:16:33,526
come first, and then I would mention my CPU

261
00:16:33,558 --> 00:16:36,922
usage categories. And yeah,

262
00:16:36,976 --> 00:16:40,310
that's the end of my talk. Thank you so much for being patient

263
00:16:40,390 --> 00:16:44,282
and listening to this talk. I hope you found it useful

264
00:16:44,346 --> 00:16:49,002
and informative. And yeah, if you want to go ahead and try out opentelemetry,

265
00:16:49,146 --> 00:16:53,230
feel free to check out its website and you can even use siglens as

266
00:16:53,300 --> 00:16:57,166
one of its backends, the observability backend where

267
00:16:57,188 --> 00:17:00,654
you store all of the data and this is the website where you can find

268
00:17:00,692 --> 00:17:05,714
out everything about siglens. Yeah, if you found this informative,

269
00:17:05,842 --> 00:17:09,814
please do let me know and share about this on socials as well.

270
00:17:09,932 --> 00:17:13,714
And yeah, looking forward to connecting with all of you. Lovely audience,

271
00:17:13,842 --> 00:17:14,980
thanks for listening to my talk.

