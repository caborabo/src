1
00:00:20,680 --> 00:00:24,086
Hello everyone, and welcome to another conformity two talk.

2
00:00:24,190 --> 00:00:27,406
I'm very excited to be presenting to you today and thanks so

3
00:00:27,430 --> 00:00:30,552
much for joining me as I try to tell you how how go taught me

4
00:00:30,568 --> 00:00:33,616
to love building applications again. But first,

5
00:00:33,720 --> 00:00:37,248
a little bit of background about myself. My name is Andrew Williams.

6
00:00:37,336 --> 00:00:40,656
I'm a software engineer author. I've been leader of

7
00:00:40,680 --> 00:00:44,912
various technical teams, and I've been working in open source for the last 20 years.

8
00:00:45,088 --> 00:00:48,552
It's possible that I bumped into you at earlier projects. I've been a

9
00:00:48,568 --> 00:00:51,536
core developer in the maven and enlightenment projects,

10
00:00:51,600 --> 00:00:55,096
including the foundation libraries, which taught me a lot

11
00:00:55,160 --> 00:00:59,514
about widget toolkits and how you can build applications that are efficient.

12
00:01:00,054 --> 00:01:03,262
I founded the fine project when I started being a

13
00:01:03,278 --> 00:01:05,834
Go developer early in 2018,

14
00:01:06,334 --> 00:01:09,966
and I'm now also the CEO at Finelabs, where we build products and

15
00:01:09,990 --> 00:01:13,806
services that help businesses and individuals to get more out of

16
00:01:13,830 --> 00:01:16,554
their applications built with the fine toolkit.

17
00:01:16,974 --> 00:01:20,310
When I'm not developing or hanging out in

18
00:01:20,342 --> 00:01:24,240
open source support channels, I do quite enjoy a bit of

19
00:01:24,312 --> 00:01:27,624
Sci-Fi going to some music concerts

20
00:01:27,664 --> 00:01:31,160
like the Zelda one you see there pictured, or riding

21
00:01:31,192 --> 00:01:34,504
around my garden on a train. Three very different

22
00:01:34,624 --> 00:01:38,152
interests. I wanted to be able to express this in one. So I thought about

23
00:01:38,208 --> 00:01:41,960
asking chatgpt or an OpenAI client if they could come

24
00:01:41,992 --> 00:01:46,080
together in some way. And then I realized it's not really necessary because

25
00:01:46,232 --> 00:01:49,730
Disney World is actually all of those things together,

26
00:01:49,882 --> 00:01:53,498
the happiest place on earth. Now that might be

27
00:01:53,586 --> 00:01:57,770
quite a peculiar segue for something that is about a go

28
00:01:57,922 --> 00:02:01,650
programming talk, but there is a connection. I promise if you've

29
00:02:01,682 --> 00:02:05,202
been to one of those attractions, you'll know that one of the key things about

30
00:02:05,258 --> 00:02:08,730
it is all of the crew in the park come

31
00:02:08,762 --> 00:02:12,602
together as a really great community to give you a fantastic experience.

32
00:02:12,778 --> 00:02:16,274
And I think that has been a huge part of my experience

33
00:02:16,394 --> 00:02:20,234
with the Go programming language is the people around it and the

34
00:02:20,274 --> 00:02:24,114
support that's available for anything that you're trying to do. It's helped shape this

35
00:02:24,154 --> 00:02:27,882
project and hopefully we can give a little bit back through the fine

36
00:02:27,938 --> 00:02:31,538
toolkit and talks like this. But before we dive

37
00:02:31,586 --> 00:02:35,722
into the details, let me do a small background on graphical

38
00:02:35,778 --> 00:02:39,570
application development. The picture that you can see there is

39
00:02:39,602 --> 00:02:43,416
something very early days back in the 1970s. It's a system called

40
00:02:43,480 --> 00:02:47,424
Star, built on the alto from Xerox

41
00:02:47,464 --> 00:02:50,864
ParC. Things have obviously come a long way from there,

42
00:02:50,984 --> 00:02:54,464
and yet at the same times, kind of they haven't.

43
00:02:54,624 --> 00:02:57,952
So this was a little bit before the C programming language, but only

44
00:02:58,008 --> 00:03:01,480
slightly. In fact, most graphical systems that you see

45
00:03:01,592 --> 00:03:05,160
now have a fairly substantial C heritage in

46
00:03:05,192 --> 00:03:08,392
them, which means you're going to have to deal with memory

47
00:03:08,448 --> 00:03:12,164
management and thread handling. And also

48
00:03:12,244 --> 00:03:15,956
these platforms were built before Webb was really popular,

49
00:03:16,100 --> 00:03:19,084
and so it wasn't really baked in. In fact,

50
00:03:19,124 --> 00:03:22,276
when you look at it, if you were to be coding in C like some

51
00:03:22,300 --> 00:03:25,452
of the toolkits are based, they didn't even have a good understanding

52
00:03:25,468 --> 00:03:29,260
of strings, never mind what Unicode and multibyte runes

53
00:03:29,292 --> 00:03:32,340
were going to be. So we've got a lot of things that are kind of

54
00:03:32,372 --> 00:03:36,160
missing because of where they came from. There are modern

55
00:03:36,232 --> 00:03:39,368
alternatives that we can work with. In fact, there's lots of

56
00:03:39,456 --> 00:03:43,056
options available in Go and Rust and JavaScript, but a

57
00:03:43,080 --> 00:03:46,624
lot of these are bindings over old technologies,

58
00:03:46,744 --> 00:03:50,552
which means that you don't have the same learning experience you

59
00:03:50,568 --> 00:03:54,656
don't have, I suppose the idiomatic way that

60
00:03:54,680 --> 00:03:59,124
this all comes together to feel completely obvious to code with.

61
00:03:59,544 --> 00:04:03,480
I think that's one of the main reasons that it seems to be

62
00:04:03,512 --> 00:04:07,272
quite complex to learn application development. Even some

63
00:04:07,288 --> 00:04:10,680
of the best in class platforms, like those from Apple and Google,

64
00:04:10,792 --> 00:04:13,936
are based on a lot of heritage. That means that

65
00:04:13,960 --> 00:04:17,800
you have to know things, or it makes assumptions about your experience,

66
00:04:17,992 --> 00:04:22,152
which is really not ideal at all. And because

67
00:04:22,208 --> 00:04:25,816
they bring a lot of legacy with them, they could be really,

68
00:04:25,920 --> 00:04:29,772
really large to get started with. I saw a hello world example with

69
00:04:29,788 --> 00:04:33,732
a toolkit that I won't name that required you download 10gb

70
00:04:33,748 --> 00:04:37,308
of data, and it took up 40gb on your disk before

71
00:04:37,356 --> 00:04:39,584
you could even write your first line of code.

72
00:04:40,044 --> 00:04:43,624
So really, there's a lot that could be done better here.

73
00:04:44,084 --> 00:04:46,996
And like I said, there are modern alternatives available,

74
00:04:47,140 --> 00:04:50,172
but they are typically platform specific. Companies putting

75
00:04:50,228 --> 00:04:53,970
effort into this space want you to build applications for their platform,

76
00:04:54,092 --> 00:04:57,234
not for everybody's platform at the same time.

77
00:04:57,854 --> 00:05:02,062
And so this sets the scene for an opportunity that

78
00:05:02,118 --> 00:05:06,126
any language or project could come along and fulfill. And I

79
00:05:06,150 --> 00:05:09,270
have found that go does a really good job at filling the gap

80
00:05:09,302 --> 00:05:12,182
there. Why? Well, to start with,

81
00:05:12,318 --> 00:05:15,782
as you all know, you get to write your program once and then it

82
00:05:15,798 --> 00:05:18,234
can compile to run on any device.

83
00:05:19,014 --> 00:05:22,526
Applications are going to just work. The single binary distributions

84
00:05:22,590 --> 00:05:26,062
that we create have no runtime dependencies and, and aren't going to

85
00:05:26,078 --> 00:05:29,590
require any setup for your end users. We're getting

86
00:05:29,662 --> 00:05:33,790
native performance on all platforms at no extra cost. The compiler

87
00:05:33,822 --> 00:05:37,150
is just doing that for us. So the applications are going to run as though

88
00:05:37,182 --> 00:05:40,886
they were hand coded for every single system we

89
00:05:40,910 --> 00:05:44,246
get. The joy of working with a modern programming language with

90
00:05:44,270 --> 00:05:48,070
all the benefits that come with that. The techniques have improved

91
00:05:48,102 --> 00:05:51,518
over the years, and having certain modern standards means we can spend

92
00:05:51,566 --> 00:05:54,904
less time worrying about how we write the code, how we pull it together,

93
00:05:55,024 --> 00:05:58,200
and more time spent actually building the things that we

94
00:05:58,232 --> 00:06:01,776
are looking to create. And all of this, I think,

95
00:06:01,840 --> 00:06:05,216
means that go is providing a great way to lower the barrier of

96
00:06:05,240 --> 00:06:09,564
entry to building graphical applications, just like it does command line applications.

97
00:06:10,224 --> 00:06:13,904
And so we have a new hope for app developers.

98
00:06:13,984 --> 00:06:17,240
And this is where the fine project stepped in. We saw

99
00:06:17,312 --> 00:06:20,473
that opportunity and we thought, there's got to be a way

100
00:06:20,973 --> 00:06:23,342
to make a toolkit that's just as simple to, to build graph collapse as that

101
00:06:23,358 --> 00:06:25,674
which we have for command line apps.

102
00:06:26,694 --> 00:06:29,558
Now, I've got a few photos in here. I think they're all of gophers.

103
00:06:29,606 --> 00:06:32,790
This one certainly is. As you'll know, some of the others might

104
00:06:32,822 --> 00:06:36,262
not be. I'm not so great on understanding the different types of

105
00:06:36,278 --> 00:06:39,422
nature, but hopefully they can provide a pleasant interlude through the

106
00:06:39,438 --> 00:06:42,934
various sections of this talk. So I've told why

107
00:06:42,974 --> 00:06:46,190
it might be good to have this opportunity to build

108
00:06:46,222 --> 00:06:49,468
again. But why would we start a new

109
00:06:49,596 --> 00:06:53,508
open source native app toolkit when there are so many others out there?

110
00:06:53,676 --> 00:06:57,460
Well, for all the reasons before, it's great to have a fresh start and

111
00:06:57,492 --> 00:06:59,784
build on the technologies that are now available.

112
00:07:00,564 --> 00:07:04,020
We wanted to have something that was easy to understand and simple

113
00:07:04,052 --> 00:07:07,844
to contribute to. And that's only possible if you have a completely open

114
00:07:07,924 --> 00:07:11,744
ecosystem, all of the libraries and the supports as well,

115
00:07:12,444 --> 00:07:16,036
to create platform independent native apps like Go and

116
00:07:16,060 --> 00:07:19,284
a couple of other languages are uniquely connected, capable of doing,

117
00:07:19,944 --> 00:07:24,192
and at the same time to deliver natively onto all of these platforms

118
00:07:24,248 --> 00:07:28,072
that are taking lightweight applications and running with really

119
00:07:28,168 --> 00:07:31,696
good performance and looping right back to

120
00:07:31,720 --> 00:07:35,576
the beginning of my introduction there to be community driven, to make

121
00:07:35,600 --> 00:07:39,024
the most of this fantastic group that we have around us to give

122
00:07:39,064 --> 00:07:42,376
back, but also to develop our platform along

123
00:07:42,440 --> 00:07:46,336
with the people that are using it and feeding back their experiences

124
00:07:46,400 --> 00:07:50,004
along the way. And that is the find toolkit.

125
00:07:50,504 --> 00:07:53,544
We aim to deliver the simplest way for

126
00:07:53,584 --> 00:07:57,672
developing beautiful and user friendly native graphical applications for desktop,

127
00:07:57,728 --> 00:08:01,200
mobile and beyond, such as the web and embedded devices

128
00:08:01,272 --> 00:08:04,644
and other things that you might see a fine app running on.

129
00:08:05,024 --> 00:08:08,912
The project, like I said, has been going for around six years now,

130
00:08:09,088 --> 00:08:12,320
which does seem like a very long time, but there's a huge amount of work

131
00:08:12,352 --> 00:08:16,236
here. And with this little graph of GitHub stars

132
00:08:16,380 --> 00:08:19,780
you can see that this is a project that has grown faster than any other

133
00:08:19,812 --> 00:08:23,052
like it, and continues to grow month on month.

134
00:08:23,188 --> 00:08:26,356
Hopefully some folk here haven't heard of it and are excited about the

135
00:08:26,380 --> 00:08:30,284
opportunities, so maybe you'll all go away. Give us a little star and

136
00:08:30,364 --> 00:08:33,584
try out your first project after finishing the video today.

137
00:08:34,164 --> 00:08:38,148
And a fine application is going to work on

138
00:08:38,196 --> 00:08:41,572
all desktop and laptop computers as you'd expect. All of

139
00:08:41,588 --> 00:08:44,942
the targets on of go executable I

140
00:08:44,958 --> 00:08:48,342
suppose. But of course we've got mobile device support

141
00:08:48,398 --> 00:08:52,086
baked in there as well, so your applications can compile to native

142
00:08:52,150 --> 00:08:55,942
iOS and Android devices, and we're delivering over

143
00:08:55,998 --> 00:08:59,542
the web as well. The support there is not quite

144
00:08:59,598 --> 00:09:03,270
100% complete, but it's very close. The next release will take it there,

145
00:09:03,382 --> 00:09:06,846
which will enable your applications to run through the browser if

146
00:09:06,870 --> 00:09:10,874
the user doesn't have a device available to install the software onto.

147
00:09:11,394 --> 00:09:14,626
And like I said, embedded devices are a possibility there as

148
00:09:14,650 --> 00:09:18,538
well. It takes a little bit more code because it doesn't have the traditional

149
00:09:18,626 --> 00:09:22,954
user interactions, but it is possible. And we've seen devices

150
00:09:23,034 --> 00:09:26,666
running with tiny little screens in industrial settings or

151
00:09:26,770 --> 00:09:30,254
kiosks and things like that built off Raspberry PI devices as well.

152
00:09:30,754 --> 00:09:34,410
And so our first hopefully gopher in the wild there says

153
00:09:34,522 --> 00:09:38,002
let's build our first app, we'll get it done in

154
00:09:38,018 --> 00:09:41,770
just a couple of minutes. If you haven't built

155
00:09:41,882 --> 00:09:45,330
a go app before of any kind,

156
00:09:45,442 --> 00:09:48,650
you're first going to need to install a go compiler.

157
00:09:48,802 --> 00:09:52,770
We're working with at least version 1.17, but of course

158
00:09:52,842 --> 00:09:56,734
everybody should be using one more recent than that to get your security updates.

159
00:09:57,194 --> 00:10:01,026
Because we're working with low level graphics and building native

160
00:10:01,090 --> 00:10:04,690
applications, it's going to be necessary to install a c compiler

161
00:10:04,722 --> 00:10:07,960
as well, I'm afraid. Now, if you're a Linux user, there's a good chance

162
00:10:07,992 --> 00:10:11,408
it's there already. If you're on Mac and you have been doing any

163
00:10:11,456 --> 00:10:14,684
application development, you'll already have Xcode installed as well.

164
00:10:15,144 --> 00:10:18,752
Windows users will probably need to go through a little setup for msys two

165
00:10:18,848 --> 00:10:22,200
and Mingwoo. There's more information on our

166
00:10:22,232 --> 00:10:26,072
website if you're having a little bit of trouble getting set up, and if

167
00:10:26,088 --> 00:10:30,152
you're going to be developing with Android, you'll need the libraries downloaded. But onto any

168
00:10:30,248 --> 00:10:34,124
type of computer, it should be possible to run off just

169
00:10:34,164 --> 00:10:37,732
about anything. IOS because of Apple's licensing requires

170
00:10:37,748 --> 00:10:40,956
that you're running on an Apple Mac computer. But of course

171
00:10:41,140 --> 00:10:45,084
when it comes to coding your app, that's not necessary. That's really

172
00:10:45,124 --> 00:10:49,308
just when it comes to the build time so you can get the application binary

173
00:10:49,356 --> 00:10:52,892
prepared for iOS devices. Hopefully that all makes sense.

174
00:10:52,948 --> 00:10:56,540
Like I said, there's more information on the find IO website if you need

175
00:10:56,572 --> 00:11:00,424
to check that out in more detail. But let's go

176
00:11:00,464 --> 00:11:03,244
and start setting up our new project.

177
00:11:04,104 --> 00:11:07,520
Because we're using modules like all good go programs

178
00:11:07,552 --> 00:11:10,992
do, we'll create a new project directory and

179
00:11:11,008 --> 00:11:13,524
then initialize the module in that space,

180
00:11:14,104 --> 00:11:17,440
and then to install the fine code off the web, we'll just

181
00:11:17,472 --> 00:11:21,408
go get fine IO fine V two at

182
00:11:21,496 --> 00:11:25,320
latest. That's going to download the latest released

183
00:11:25,352 --> 00:11:29,364
version of fine, and that's of the V two major version.

184
00:11:29,704 --> 00:11:33,168
As you'll have noticed with some projects go quite rightly

185
00:11:33,256 --> 00:11:37,632
changes the import path if you have a major breaking API change,

186
00:11:37,808 --> 00:11:41,256
which we did a number of years ago, we're trying to keep everything

187
00:11:41,320 --> 00:11:44,856
now within the V two namespace, but that import path is

188
00:11:44,880 --> 00:11:48,144
pretty straightforward to understand. And next we're

189
00:11:48,184 --> 00:11:52,280
going to write some code. I'm going to possibly use

190
00:11:52,312 --> 00:11:55,954
Vim here. Actually, I'm just going to show you the code on screen and avoid

191
00:11:55,994 --> 00:11:59,666
the live code. Other text editors are available, of course, and you might

192
00:11:59,770 --> 00:12:03,330
well choose to use a more substantial development environment

193
00:12:03,402 --> 00:12:07,418
to edit your go. But here is our first fine

194
00:12:07,466 --> 00:12:10,810
application. It's pretty straightforward. We have our

195
00:12:10,842 --> 00:12:14,586
main package because it's an executable. We're going to import

196
00:12:14,730 --> 00:12:18,486
two sub packages of the Find project app

197
00:12:18,610 --> 00:12:21,678
and the widget packages, and do make sure it has v two

198
00:12:21,726 --> 00:12:25,718
in the import path there. It's possible that some systems can auto import

199
00:12:25,766 --> 00:12:29,726
the wrong version. We'll open our main function

200
00:12:29,830 --> 00:12:33,350
and call app new. This is what initializes the

201
00:12:33,382 --> 00:12:36,742
application in memory. It configures everything for the computer that

202
00:12:36,758 --> 00:12:40,686
it's going to be running on and gets all of the internal state

203
00:12:40,750 --> 00:12:44,246
prepared to run a full application. We'll create

204
00:12:44,350 --> 00:12:47,856
a window for that app using new window and

205
00:12:47,880 --> 00:12:51,120
the string that we pass it there. Hello is going to be used in the

206
00:12:51,152 --> 00:12:54,520
title bar if our system has title bars,

207
00:12:54,632 --> 00:12:58,084
typical, I suppose, on a desktop computer, but less so on mobile.

208
00:12:58,624 --> 00:13:02,232
The content of our application is just basically there

209
00:13:02,408 --> 00:13:05,584
inside the setcontent call, as you might

210
00:13:05,704 --> 00:13:09,096
not get any prizes for guessing. That's going to set the content of our

211
00:13:09,120 --> 00:13:12,404
window and we're passing in a new label widget.

212
00:13:12,824 --> 00:13:16,376
All widgets in fine are created with a simple constructor from

213
00:13:16,400 --> 00:13:20,448
the widget package. And so here we'll be creating a label and we're

214
00:13:20,496 --> 00:13:24,604
passing the string hello fine to display in the content area.

215
00:13:25,224 --> 00:13:28,360
Lastly, we call, show and run on the window,

216
00:13:28,472 --> 00:13:32,324
which is a shortcut for showing the window and running the application.

217
00:13:32,624 --> 00:13:35,992
You can have multiple windows, you could show them and hide them separately.

218
00:13:36,128 --> 00:13:39,438
We just need to make sure that our application has a call to run

219
00:13:39,536 --> 00:13:42,826
at some point, usually at the end of the main method, because that's going

220
00:13:42,850 --> 00:13:46,570
to keep running until your application quits. Okay,

221
00:13:46,642 --> 00:13:49,794
so we have written our code. What do we do

222
00:13:49,834 --> 00:13:53,450
next? Well, we want to run it, but we have just

223
00:13:53,482 --> 00:13:57,138
made some new imports. So for good practice

224
00:13:57,186 --> 00:14:01,054
we'll call go mod Tidy in case there's any downloads necessary.

225
00:14:01,394 --> 00:14:05,002
And then we're just going to go run and that is going

226
00:14:05,018 --> 00:14:08,160
to load the window that you see on screen. If it was bigger,

227
00:14:08,192 --> 00:14:11,184
you would see hello written in the title bar, but you can certainly make out

228
00:14:11,224 --> 00:14:14,312
hello fine in the content area. So there you

229
00:14:14,328 --> 00:14:18,008
go. That's the first application written, but we should

230
00:14:18,056 --> 00:14:21,456
probably do something a little bit more substantial because hello fine

231
00:14:21,560 --> 00:14:24,640
isn't really going to excite

232
00:14:24,672 --> 00:14:28,244
you enough, I suppose, to feel that this talk was worth looking at.

233
00:14:28,624 --> 00:14:31,728
Instead, let's look at a markdown editor,

234
00:14:31,816 --> 00:14:35,164
something that we could actually use in our day to day activities.

235
00:14:35,624 --> 00:14:39,664
So I'm going to arrange this as you see on screen, with an adaptive grid

236
00:14:39,784 --> 00:14:43,656
that has an entry for the input and a rich text widget

237
00:14:43,760 --> 00:14:47,440
for the rendering. Now, adaptive grid might be a new term

238
00:14:47,472 --> 00:14:51,408
to you. We use the word adaptive to mean that it will orient according to

239
00:14:51,456 --> 00:14:54,816
the output display. So in this case a

240
00:14:54,840 --> 00:14:58,224
normal window will position left and right the items inside

241
00:14:58,264 --> 00:15:01,824
it. And if you were running in a landscape screen

242
00:15:01,904 --> 00:15:05,582
on a device, it would do the same. But a user rotating,

243
00:15:05,718 --> 00:15:08,910
perhaps their phone or tablet, would arrange the content

244
00:15:08,982 --> 00:15:13,006
appropriately. And to make the application work I'm

245
00:15:13,030 --> 00:15:17,158
going to put together a connection from the entries unchanged

246
00:15:17,206 --> 00:15:20,574
event to the pars markdown function

247
00:15:20,614 --> 00:15:24,478
called in the rich text, so that each time there's a textual change

248
00:15:24,646 --> 00:15:27,474
we then update the output to render it.

249
00:15:28,014 --> 00:15:31,906
Hopefully that makes sense. Let's just look at a little bit of code again.

250
00:15:32,010 --> 00:15:35,922
It's not a massive application. We start out the same

251
00:15:36,058 --> 00:15:39,794
with an extra import here for the container package, which is where

252
00:15:39,874 --> 00:15:42,814
these containers that I mentioned are all stored.

253
00:15:43,354 --> 00:15:46,842
We will start our main function in the same way by opening

254
00:15:46,898 --> 00:15:50,186
an app and then creating a window. And this

255
00:15:50,210 --> 00:15:54,454
time it's the content of the application that is a little more complex.

256
00:15:54,894 --> 00:15:58,310
We'll create a new widget called Edit, and that is a

257
00:15:58,342 --> 00:16:02,294
multi line entry. It has nothing stored in it right now and

258
00:16:02,334 --> 00:16:05,838
it is set to be multi line so that we can write lots of lines

259
00:16:05,886 --> 00:16:09,214
of content. Our second widget there,

260
00:16:09,254 --> 00:16:12,994
which is called preview, is our new rich text widget.

261
00:16:13,494 --> 00:16:16,774
Here I'm using a demonstration that markdown can be passed

262
00:16:16,814 --> 00:16:19,878
into the constructor. So new rich text from Markdown.

263
00:16:20,006 --> 00:16:22,848
You could have any markdown document passed in there,

264
00:16:22,936 --> 00:16:27,164
but we have an empty one to match the content of our entry widget.

265
00:16:27,664 --> 00:16:31,528
And then the next line is the thing that makes the connection every

266
00:16:31,576 --> 00:16:34,936
time the entry is changed. We want

267
00:16:34,960 --> 00:16:39,200
the preview to parse the new markdown. And this works because

268
00:16:39,312 --> 00:16:43,144
unchanged is a function that takes a single string parameter

269
00:16:43,264 --> 00:16:46,648
passing the new content, and parsmarkdown

270
00:16:46,736 --> 00:16:50,670
receives a single string parameter which is expected to be

271
00:16:50,792 --> 00:16:53,454
the markdown content which you're to parse.

272
00:16:53,994 --> 00:16:58,186
Then we set the content of our window to be that new container

273
00:16:58,210 --> 00:17:01,578
that I mentioned. It's an adaptive grid, and we say

274
00:17:01,626 --> 00:17:04,834
that it should have two rows or columns depending

275
00:17:04,874 --> 00:17:08,258
on the way around that it is, and they are the edit and the preview

276
00:17:08,346 --> 00:17:12,010
widgets. So then just again we show and run

277
00:17:12,042 --> 00:17:15,490
that content. Hopefully this time it will

278
00:17:15,522 --> 00:17:18,964
look a little bit more impressive. There we go.

279
00:17:19,084 --> 00:17:22,340
So as you can see, we have our entry where

280
00:17:22,372 --> 00:17:26,244
we're entering markdown on the left, and on the right hand side

281
00:17:26,404 --> 00:17:29,836
we have our rendered markdown. It includes various types

282
00:17:29,860 --> 00:17:33,052
of typeface, some a divider

283
00:17:33,148 --> 00:17:37,068
link, and an image as well, which are all just part of the rich text

284
00:17:37,116 --> 00:17:41,092
widget and the markdown parser built into. Fine, I could leave that

285
00:17:41,108 --> 00:17:44,300
there. It's a pretty cool application and something that you might choose

286
00:17:44,332 --> 00:17:47,656
to use or build on yourself. But before we move

287
00:17:47,680 --> 00:17:50,976
on, let me show you that the same code, exactly the

288
00:17:51,000 --> 00:17:54,824
same code, can be used to build a mobile application

289
00:17:54,864 --> 00:17:58,632
instead. And this is in fact that same application

290
00:17:58,808 --> 00:18:02,368
running in the iPhone simulator, it's gone into light

291
00:18:02,416 --> 00:18:06,168
mode because that's the default for iOS. Whereas before I was on my desktop

292
00:18:06,216 --> 00:18:10,184
where I prefer a dark mode setup, and here we have very

293
00:18:10,224 --> 00:18:13,646
similar content on the left, and it's been rendered on

294
00:18:13,670 --> 00:18:17,046
the right hand side, as you would expect. But as I

295
00:18:17,070 --> 00:18:20,510
promised before, we can rotate the device

296
00:18:20,622 --> 00:18:24,758
and have that adaptive grid change the orientation.

297
00:18:24,926 --> 00:18:28,646
So if we were actually utilizing a portrait

298
00:18:28,750 --> 00:18:32,550
mode, we would still be able to interact with the application rather

299
00:18:32,582 --> 00:18:35,994
than having it squeezed up with a central divider.

300
00:18:36,654 --> 00:18:39,616
Excellent. So that is our application running,

301
00:18:39,710 --> 00:18:43,412
but there's a lot more of course to building an application than simply

302
00:18:43,468 --> 00:18:46,516
writing some code and running it. So let's move

303
00:18:46,540 --> 00:18:49,144
on there to testing and distribution.

304
00:18:49,564 --> 00:18:53,180
The first thing I wanted to touch on is unit testing, which has

305
00:18:53,212 --> 00:18:56,704
typically been quite difficult with a graphical application.

306
00:18:57,284 --> 00:19:00,804
But this is going to be really a lot easier. I mean

307
00:19:00,844 --> 00:19:04,332
go has unit test support baked right in. You can see here the steps we're

308
00:19:04,348 --> 00:19:07,714
going to run. We'll edit some code and then we'll just run the

309
00:19:07,754 --> 00:19:11,418
test runner and see the output. So let's have a

310
00:19:11,426 --> 00:19:15,202
quick look at the unit test here. The imports are slightly different

311
00:19:15,378 --> 00:19:18,810
and we're happy to be running in a test package. Seems like best

312
00:19:18,842 --> 00:19:22,146
practice there as well. I'm using the assert package which I find

313
00:19:22,170 --> 00:19:25,474
to be very helpful with my test assertions. And I'm

314
00:19:25,514 --> 00:19:29,122
also importing a test package from fine. So let's see why this

315
00:19:29,138 --> 00:19:32,748
is useful. We open a new test function

316
00:19:32,866 --> 00:19:36,680
and for this I'm going to test the selected text of an entry.

317
00:19:36,872 --> 00:19:40,640
So I'm creating a new entry widget and then I'm going

318
00:19:40,672 --> 00:19:44,288
to simulate the user typing some content

319
00:19:44,376 --> 00:19:48,160
into this entry using our test package. So we call type

320
00:19:48,312 --> 00:19:51,832
and say that the hello string should be typed into the entry.

321
00:19:51,968 --> 00:19:55,592
And then we check that the text content is in

322
00:19:55,608 --> 00:19:58,484
fact hello. This test is going to pass.

323
00:19:58,964 --> 00:20:03,004
Then we could use another function of the test package called double tap.

324
00:20:03,164 --> 00:20:06,492
And that as you might guess is going to simulate the user

325
00:20:06,548 --> 00:20:11,012
having tap twice in the content quickly, which should select

326
00:20:11,108 --> 00:20:14,652
the word underneath where the tap

327
00:20:14,708 --> 00:20:18,292
event happened. And here it is,

328
00:20:18,428 --> 00:20:22,140
the general area. We don't specify

329
00:20:22,212 --> 00:20:25,364
the coordinates specifically because that is the full

330
00:20:25,404 --> 00:20:28,860
content that the selected text is equal

331
00:20:28,892 --> 00:20:32,196
to. Hello. And also we can check that

332
00:20:32,220 --> 00:20:35,844
the cursor column has moved to the end so

333
00:20:35,884 --> 00:20:39,524
we can run that like a regular unit test. And it's not going to pop

334
00:20:39,564 --> 00:20:42,984
up windows on screen, it's not going to grab our keyboard focus.

335
00:20:43,404 --> 00:20:47,316
The test runner is able to completely execute

336
00:20:47,340 --> 00:20:50,908
a fine application in memory without requiring those

337
00:20:50,956 --> 00:20:54,834
input and output devices. So they run really fast as well.

338
00:20:55,294 --> 00:20:58,754
But let's move on to packaging your application.

339
00:20:59,374 --> 00:21:03,030
There's a really helpful command line tool also called fine.

340
00:21:03,142 --> 00:21:06,430
You can get it by calling Go install, you pass

341
00:21:06,462 --> 00:21:11,030
it this URL fine IO fine v two CMD

342
00:21:11,182 --> 00:21:14,430
fine at latest. It's always a good idea

343
00:21:14,462 --> 00:21:18,586
to have this tool at the same version of the library that you're installing and

344
00:21:18,610 --> 00:21:22,106
that is going to help us with our local packaging

345
00:21:22,130 --> 00:21:26,242
of a graphical app. I mentioned that we build single binaries like

346
00:21:26,298 --> 00:21:30,274
Anygo, but graphical apps on some platforms expect

347
00:21:30,394 --> 00:21:34,054
more metadata or bundling to be present.

348
00:21:34,554 --> 00:21:37,826
So instead of just go build we can now call

349
00:21:37,890 --> 00:21:41,810
find package and that is going to create just the right type

350
00:21:41,842 --> 00:21:44,958
of artifact for our platform. So if

351
00:21:45,006 --> 00:21:48,334
I was running that on my Mac, it would create

352
00:21:48,374 --> 00:21:52,834
a app bundle which I could then drag into the applications folder.

353
00:21:53,294 --> 00:21:56,470
If it was windows it would be a exe as you'd expect, but with the

354
00:21:56,502 --> 00:22:00,478
icon and other metadata embedded. Now as a developer,

355
00:22:00,606 --> 00:22:03,782
often what I want to do is compile the app that I've been building on

356
00:22:03,918 --> 00:22:07,206
and just use it locally. So we have a tool for that as well.

357
00:22:07,270 --> 00:22:10,524
It's just fine install. If you do that and then

358
00:22:10,564 --> 00:22:14,572
go to your application launcher like I've done here, you can search for your application

359
00:22:14,628 --> 00:22:18,020
and it will be registered and installed. But like

360
00:22:18,052 --> 00:22:21,884
normal on the Mac, it's simply in the applications directory.

361
00:22:22,044 --> 00:22:26,140
For your Windows computer. It would be in the start menu and

362
00:22:26,172 --> 00:22:29,412
somewhere in the program files. That's great. I've got

363
00:22:29,428 --> 00:22:32,476
it on my local computer, but I want to do more. I want to get

364
00:22:32,500 --> 00:22:35,772
this out to other people. So we also

365
00:22:35,828 --> 00:22:39,122
have as go would have you expect, the ability

366
00:22:39,178 --> 00:22:42,626
to cross compile to other systems. So here I could build my

367
00:22:42,650 --> 00:22:45,762
Windows executable from whatever platform I'm currently

368
00:22:45,818 --> 00:22:49,226
running on. Or as I showed earlier,

369
00:22:49,410 --> 00:22:53,202
we could have a mobile app built in the same way with

370
00:22:53,218 --> 00:22:55,854
the OS specified as Android or iOS.

371
00:22:56,554 --> 00:23:00,374
There's a little bit more data needing to be passed in here because

372
00:23:00,714 --> 00:23:04,298
the sandboxes on mobile platforms require to have some

373
00:23:04,346 --> 00:23:08,484
unique identifiers called the app id. So we pass one of those in

374
00:23:08,644 --> 00:23:12,164
and you can see a screenshot here how your iOS

375
00:23:12,244 --> 00:23:16,504
group could look like if you installed a few fine applications using those tools.

376
00:23:16,884 --> 00:23:20,756
Now I mentioned earlier, you do need some c compiler

377
00:23:20,820 --> 00:23:24,116
installation for this to work. And the cross compiling is no different.

378
00:23:24,260 --> 00:23:27,316
It can be a little bit complicated to manage. And if you would

379
00:23:27,340 --> 00:23:30,756
prefer not to, or if you're having any trouble, then you should check out the

380
00:23:30,780 --> 00:23:33,912
find cross tool that's going to manage all of this

381
00:23:33,968 --> 00:23:37,576
for you. In containers that are going to bundle

382
00:23:37,600 --> 00:23:40,592
the developer tools, it will launch the container,

383
00:23:40,688 --> 00:23:44,184
do the compile, close the instance down and provide you

384
00:23:44,224 --> 00:23:47,724
with output files. And so here

385
00:23:48,144 --> 00:23:51,176
you can see the different files that you might have available.

386
00:23:51,360 --> 00:23:54,224
For our project, we created main go already.

387
00:23:54,384 --> 00:23:58,426
We had the go mod file and I dropped an icon Png in there to

388
00:23:58,450 --> 00:24:01,802
be used for the application metadata. And on the second row

389
00:24:01,818 --> 00:24:05,054
of icons there you can see I have my Android app, the APK,

390
00:24:05,554 --> 00:24:09,042
the macOS app, and the Windows

391
00:24:09,098 --> 00:24:12,530
app, which is a Exe, and I could share those with anybody I wanted

392
00:24:12,562 --> 00:24:16,386
to across the network, uploading to the Internet, or just downloading it onto

393
00:24:16,410 --> 00:24:19,930
their phones when they come around for dinner. So we've packaged our

394
00:24:19,962 --> 00:24:24,214
applications, but how do we get them further afield?

395
00:24:24,564 --> 00:24:27,972
Well, the find app is also going to be able to help you

396
00:24:27,988 --> 00:24:31,604
with that. We have a release sub command which is

397
00:24:31,644 --> 00:24:35,172
aiming to help you get your applications up to the

398
00:24:35,268 --> 00:24:39,012
stores and marketplaces. So here a quick example.

399
00:24:39,068 --> 00:24:42,156
I'm releasing my app with a specific app id. I think

400
00:24:42,180 --> 00:24:45,724
this command would typically be used on Linux where there's not a standard

401
00:24:45,764 --> 00:24:49,236
store. So it's going to bundle up the artifacts ready to be

402
00:24:49,260 --> 00:24:52,554
distributed in whichever manner for iOS

403
00:24:52,714 --> 00:24:56,026
there is of course a standard store. In fact, most geographies, it's the

404
00:24:56,050 --> 00:24:59,842
only store. And you would upload that by

405
00:24:59,978 --> 00:25:03,874
having an Apple account and getting a profile and a certificate

406
00:25:03,994 --> 00:25:07,226
distributed to you signed by them.

407
00:25:07,330 --> 00:25:10,954
You'll download that locally and then using this release command, you can

408
00:25:11,034 --> 00:25:15,794
build the app bundle with the appropriate signing and

409
00:25:15,834 --> 00:25:19,556
it will actually create a slightly different type of, of file output.

410
00:25:19,700 --> 00:25:23,596
And you will then install that to the, upload that to the store by dragging

411
00:25:23,620 --> 00:25:27,156
it into Apple's transporter app. It's similar.

412
00:25:27,220 --> 00:25:30,932
Again, we want to release for the Android OS. We're going to

413
00:25:30,948 --> 00:25:34,628
tell it the key store that's available, which is a Java key store which you

414
00:25:34,636 --> 00:25:38,596
can either set up yourself or download from Google's

415
00:25:38,660 --> 00:25:42,516
Play Store, I think. And once you've signed that, then you'll be

416
00:25:42,540 --> 00:25:45,860
able to just upload your new aPk by dragging it

417
00:25:45,892 --> 00:25:49,864
into the browser window when you're configuring the app to be distributed

418
00:25:49,944 --> 00:25:53,824
through their website. Now, there's a lot of parameters here

419
00:25:53,864 --> 00:25:56,880
that I have discussed. It can get confusing.

420
00:25:56,992 --> 00:26:00,536
So we added a new file called Findapp Toml,

421
00:26:00,600 --> 00:26:04,072
which is a simple text markup. And as you can see here,

422
00:26:04,208 --> 00:26:08,096
we have got various standard parameters that allow you

423
00:26:08,160 --> 00:26:11,736
to write them once save it into your source control

424
00:26:11,840 --> 00:26:15,066
so you don't have to remember what all of those parameters are.

425
00:26:15,200 --> 00:26:18,502
And we'll also auto increment some of those numbers when the release

426
00:26:18,558 --> 00:26:22,038
process is executing. Whoa. Okay. So hopefully

427
00:26:22,126 --> 00:26:25,270
that has helped to show how you can get the

428
00:26:25,302 --> 00:26:28,806
tools installed, write some code, and create an application all the way out to the

429
00:26:28,830 --> 00:26:32,678
store. But of course we didn't see too much of the app

430
00:26:32,766 --> 00:26:36,142
toolkit itself. So let's explore that a little bit

431
00:26:36,158 --> 00:26:39,646
further. So there is a find demo application

432
00:26:39,710 --> 00:26:43,000
that you can run and that shows the various things available.

433
00:26:43,152 --> 00:26:45,604
And we'll start here with graphical capabilities.

434
00:26:46,384 --> 00:26:49,384
You can draw, as you would expect, lines,

435
00:26:49,544 --> 00:26:52,804
rectangles and rounded rectangles, circles.

436
00:26:53,224 --> 00:26:57,408
We also have text, of course, different types of gradients

437
00:26:57,576 --> 00:27:01,368
and also images. We have both vector images

438
00:27:01,496 --> 00:27:05,880
and raster images. And all of those graphical

439
00:27:05,952 --> 00:27:09,446
elements are what are pulled together to make everything that you see

440
00:27:09,470 --> 00:27:12,838
on screen, and also they are optimized

441
00:27:12,926 --> 00:27:16,062
to make the most of your graphics card. So we use OpenGL

442
00:27:16,118 --> 00:27:19,958
and various hardware acceleration capabilities to make sure it's always super

443
00:27:20,006 --> 00:27:23,334
fast. Also, if you tap down to the

444
00:27:23,374 --> 00:27:26,902
theme icons, you'll see that we have them bundled

445
00:27:26,958 --> 00:27:30,790
into the applications so you can have standard icon capabilities

446
00:27:30,862 --> 00:27:34,888
in your app that people will recognize, so you don't have to worry about that.

447
00:27:35,046 --> 00:27:38,824
And also we have the light and dark theme that you've seen both of already,

448
00:27:39,444 --> 00:27:43,292
the toolkit. So your application is going to blend in with the desktop

449
00:27:43,388 --> 00:27:45,744
or the mobile that it is running on.

450
00:27:46,204 --> 00:27:50,268
So also of course, as you might expect from a widget toolkit,

451
00:27:50,396 --> 00:27:53,844
there's lots of widgets available. I've grouped this into basic

452
00:27:53,884 --> 00:27:57,740
widgets like the label which you have seen. We have buttons that can

453
00:27:57,772 --> 00:28:01,500
have an icon as well as text progress bars. There's a

454
00:28:01,532 --> 00:28:05,518
card for grouping items together, and also the rich text

455
00:28:05,606 --> 00:28:08,674
that you have seen which supports markdown as well.

456
00:28:09,094 --> 00:28:12,914
And there are a few other things like a toolbar,

457
00:28:13,414 --> 00:28:16,598
text grid and accordion item separators.

458
00:28:16,686 --> 00:28:19,822
All sorts of things there that help to display information to

459
00:28:19,838 --> 00:28:23,874
your user or arrange or group items on your screen.

460
00:28:24,414 --> 00:28:27,790
Then we have input the types of things that you might want

461
00:28:27,822 --> 00:28:31,066
for building forms or getting data from your users.

462
00:28:31,566 --> 00:28:34,434
A password entry where you can hide and show the content,

463
00:28:34,814 --> 00:28:38,022
sliders for inputting a range of values, a checkbox,

464
00:28:38,158 --> 00:28:41,342
radio item. They both come in group forms as well,

465
00:28:41,478 --> 00:28:45,102
and a select like a dropdown. There's also an editable

466
00:28:45,158 --> 00:28:48,950
select. We can have an entire form as

467
00:28:48,982 --> 00:28:52,750
well. And that means it's possible

468
00:28:52,822 --> 00:28:56,990
to get all sorts of different kinds of data input into your application,

469
00:28:57,102 --> 00:29:01,310
again using just standard widgets. And these could pack into a

470
00:29:01,342 --> 00:29:05,314
form as well in whatever combination you're looking for.

471
00:29:05,814 --> 00:29:09,350
Those are all quite straightforward. You know, one line shows you one item

472
00:29:09,382 --> 00:29:13,110
on screen pretty much, but then you add a

473
00:29:13,142 --> 00:29:15,990
little desire to show lots of data,

474
00:29:16,182 --> 00:29:19,454
something where you need to scroll very fast through

475
00:29:19,494 --> 00:29:23,264
lots of things like your tweets or your email inbox.

476
00:29:23,414 --> 00:29:27,116
So we added the type of widget called collection. Now,

477
00:29:27,140 --> 00:29:30,772
there's actually a few of them, but here I'm illustrating with

478
00:29:30,828 --> 00:29:34,364
list. We're using a few callbacks that mean that

479
00:29:34,404 --> 00:29:37,564
we as the toolkit can take

480
00:29:37,604 --> 00:29:40,892
minimal data and display only what is necessary on screen at

481
00:29:40,908 --> 00:29:44,388
any point in time. So it's very quick and you can scroll through

482
00:29:44,476 --> 00:29:48,344
hundreds of thousands of items with no slowdown in your application.

483
00:29:49,464 --> 00:29:53,392
For the list with these three items, the first function is asking

484
00:29:53,448 --> 00:29:57,284
how many items are there so we know how long to make the scroll bar.

485
00:29:57,704 --> 00:30:01,584
The second callback which is here creating a new label

486
00:30:01,744 --> 00:30:05,600
is creating the template object and this is what's going to be reused

487
00:30:05,712 --> 00:30:09,084
each time a new item needs to be displayed on screen.

488
00:30:09,544 --> 00:30:12,792
The last callback is called the update callback and

489
00:30:12,808 --> 00:30:16,276
that says for a certain item id and

490
00:30:16,300 --> 00:30:20,024
a reusable object, make sure that the right data is displayed

491
00:30:20,364 --> 00:30:23,940
and so we will call the last one quite a lot. As you scroll

492
00:30:23,972 --> 00:30:27,780
through creation, the template object creation

493
00:30:27,892 --> 00:30:31,652
doesn't get called much because that's a lot slower. So with this way we

494
00:30:31,668 --> 00:30:34,984
can support really fast user interface with lots of data.

495
00:30:35,444 --> 00:30:38,028
And like I said, there's a few of them. So you could see we also

496
00:30:38,076 --> 00:30:41,530
have table and tree and also the grid wrap.

497
00:30:41,612 --> 00:30:45,314
Thinking of things like file

498
00:30:45,814 --> 00:30:49,790
browser where you've got lots and lots of files but not necessarily lists but

499
00:30:49,942 --> 00:30:53,834
displaying them as icons in sort of square areas instead.

500
00:30:54,374 --> 00:30:58,194
Lastly, if you want to put more complex

501
00:30:58,494 --> 00:31:01,934
applications together, you're probably going to look for various types of

502
00:31:01,974 --> 00:31:05,614
containers that help to move items or position them in screen

503
00:31:05,694 --> 00:31:09,216
with potentially some interaction. Here we have the

504
00:31:09,320 --> 00:31:12,856
horizontal split in code, but there's a vertical split as well and that allows

505
00:31:12,880 --> 00:31:16,048
your user to move the space allocation

506
00:31:16,176 --> 00:31:19,608
around the user interface. We have app tabs

507
00:31:19,736 --> 00:31:24,064
which allows you to have different areas of the application separated behind tabs,

508
00:31:24,224 --> 00:31:28,168
and also a version of that called doc tabs, more suitable for managing

509
00:31:28,216 --> 00:31:31,344
documentation, different documents and you can add

510
00:31:31,424 --> 00:31:35,364
them and close tabs away when you're done with those documents.

511
00:31:35,864 --> 00:31:39,336
Also you could have a scroll around just about any content if you want to

512
00:31:39,360 --> 00:31:42,536
have your window be smaller than the content that is currently

513
00:31:42,600 --> 00:31:46,444
visible. What I've showed you so far, the content was basically

514
00:31:47,224 --> 00:31:50,904
keeping the user interface open. The default window

515
00:31:50,944 --> 00:31:54,480
size is so that all of the items can be visible at the same time.

516
00:31:54,552 --> 00:31:57,844
And so scroll can help us to shrink that down a little bit.

517
00:31:58,144 --> 00:32:01,274
But a container can have any layout that you want.

518
00:32:01,464 --> 00:32:04,990
You can just say container new and pass it a layout and then the

519
00:32:05,022 --> 00:32:08,414
objects that it should be responsible for. And that

520
00:32:08,574 --> 00:32:11,982
layout could be anything. You can implement the layer interface

521
00:32:12,078 --> 00:32:15,294
which simply says how big should something be at its minimum

522
00:32:15,414 --> 00:32:18,434
and what do you do to lay things out internally?

523
00:32:18,894 --> 00:32:22,230
But the last two illustrations there, the darker colored

524
00:32:22,262 --> 00:32:26,078
one there is the border, but the second is lots of different layouts

525
00:32:26,126 --> 00:32:29,326
in different containers brought together. So you can see how it's possible

526
00:32:29,390 --> 00:32:32,974
to build up a complex application with the basic

527
00:32:33,014 --> 00:32:36,670
functionality that I've already showed you. There are various

528
00:32:36,742 --> 00:32:40,638
other common activities in a graphical application that you

529
00:32:40,686 --> 00:32:44,422
might be familiar with the dialogues, things that we might want

530
00:32:44,438 --> 00:32:48,030
to be displaying to our users on a fairly like

531
00:32:48,062 --> 00:32:51,910
a confirmation dialogue. Are you confirming this

532
00:32:51,942 --> 00:32:55,734
next step? We could have our input,

533
00:32:56,514 --> 00:32:58,254
we could display information,

534
00:32:59,434 --> 00:33:03,254
or we could have the need for a color to be chosen.

535
00:33:03,794 --> 00:33:07,714
All pretty standard ways that we might ask users for information.

536
00:33:07,874 --> 00:33:11,534
And these are all provided through the dialogues package in find.

537
00:33:12,314 --> 00:33:15,450
Lastly, there is also the file dialog. You can

538
00:33:15,482 --> 00:33:19,218
open files and save files. This is where things get a little

539
00:33:19,266 --> 00:33:22,808
bit more complex because a file is actually not

540
00:33:22,856 --> 00:33:26,392
such a concrete thing as you might imagine. Like a color. We can

541
00:33:26,408 --> 00:33:29,904
pick a color, but when we're looking for file input,

542
00:33:30,024 --> 00:33:33,736
it may not be a specific file on the system that we're looking for.

543
00:33:33,880 --> 00:33:37,296
So working with files in a platform agnostic

544
00:33:37,320 --> 00:33:40,704
way is a little more complex. So I wanted to show you this

545
00:33:40,744 --> 00:33:44,404
illustration about how we can open a file

546
00:33:44,944 --> 00:33:48,724
with the dialogue package we'll call show file open and

547
00:33:48,764 --> 00:33:52,076
in a similar way to the collection widgets,

548
00:33:52,100 --> 00:33:55,304
we use callbacks here instead of a standard constructor.

549
00:33:55,964 --> 00:33:59,380
Our callback is going to be executed when the user has made

550
00:33:59,412 --> 00:34:03,372
their choice, and so we have some checks to make in our code here.

551
00:34:03,508 --> 00:34:07,276
Firstly, we ask if there was an error. Did something go wrong when

552
00:34:07,300 --> 00:34:10,624
they were picking their file? If so, we'll show an error.

553
00:34:11,084 --> 00:34:14,431
Also, it's possible they pick nothing, in which case the reader to

554
00:34:14,447 --> 00:34:17,563
the file would be nil. So we will return then as well.

555
00:34:18,023 --> 00:34:21,431
The rest of this is handling what we should do with the file that we

556
00:34:21,447 --> 00:34:24,799
were passed. Now you'll notice the parameter is a

557
00:34:24,831 --> 00:34:28,191
URI read closer. It's not a file at all.

558
00:34:28,367 --> 00:34:31,975
It's like a reader, in fact. So we will use ioutil or the

559
00:34:31,999 --> 00:34:36,135
replacement in the IO package to read all of the content into our

560
00:34:36,159 --> 00:34:39,345
variable data. If there was no error,

561
00:34:39,519 --> 00:34:42,973
then we will make sure that the file is closed when we're done, or rather

562
00:34:43,013 --> 00:34:47,133
the stream of data. We will set the text of our

563
00:34:47,173 --> 00:34:51,269
entry widget for this illustration to the content of the data. So we've essentially

564
00:34:51,301 --> 00:34:54,821
opened a text file and dumped it to screen as this is

565
00:34:54,837 --> 00:34:58,029
a URI read closer. We have an additional function on top

566
00:34:58,061 --> 00:35:01,453
of the standard readcloser functionality, the ability to get its

567
00:35:01,493 --> 00:35:06,165
URI, that is the universal resource identifier,

568
00:35:06,229 --> 00:35:09,576
I think. So by doing that we can find out

569
00:35:09,640 --> 00:35:13,520
where this data came from. It might be a file path like you have

570
00:35:13,552 --> 00:35:17,088
seen in, I suppose, file based

571
00:35:17,136 --> 00:35:20,112
access in a web browser. If you've built your web server, you'll be familiar with

572
00:35:20,128 --> 00:35:23,208
it. It could be a remote source on an HTTP

573
00:35:23,256 --> 00:35:27,328
server. So you might look at that and find it's a URL

574
00:35:27,416 --> 00:35:30,872
inside it, or it could be something completely different

575
00:35:31,048 --> 00:35:34,308
based on the data provider that's available on the current

576
00:35:34,356 --> 00:35:38,220
system. Of course if something went wrong, we'll show an error again,

577
00:35:38,412 --> 00:35:42,196
and that is all passed into the show file open. And we

578
00:35:42,220 --> 00:35:45,060
also tell it which window to display the dialog in,

579
00:35:45,252 --> 00:35:48,532
because in fine, minimizing the number of windows open

580
00:35:48,628 --> 00:35:52,468
is desirable. And so we display dialogues inside a window

581
00:35:52,556 --> 00:35:56,428
rather than separate to them. So I showed you before

582
00:35:56,596 --> 00:36:00,384
that it can create a file open dialogue

583
00:36:00,424 --> 00:36:04,324
like that, relatively familiar, and we're looking at files,

584
00:36:04,704 --> 00:36:08,680
but we won't always be looking at files. And this is why it's important to

585
00:36:08,712 --> 00:36:12,512
not assume that there is a file there. Here I've just

586
00:36:12,568 --> 00:36:16,392
opened the same code on an iOS app, a fine based iOS

587
00:36:16,448 --> 00:36:20,216
app, and it has allowed me to pick files based on what's

588
00:36:20,240 --> 00:36:23,864
available on the current system. You might notice that this is

589
00:36:23,944 --> 00:36:27,380
a standard picker from iOS and it's allowing me to access

590
00:36:27,452 --> 00:36:29,744
data from the web through iCloud.

591
00:36:30,204 --> 00:36:34,060
Equally, I could use that for importing data from other applications

592
00:36:34,132 --> 00:36:37,844
like Dropbox or my gallery app, and in those situations

593
00:36:37,884 --> 00:36:41,544
it's actually going to be streaming data directly from one app to another.

594
00:36:41,924 --> 00:36:44,964
And so there was no file there at all, which is why this is so

595
00:36:45,004 --> 00:36:48,604
much more flexible. And you should consider taking this pattern if you're working

596
00:36:48,644 --> 00:36:51,928
with files in your application. Goodness,

597
00:36:51,976 --> 00:36:55,496
this has been a bit of a fly through. Apologies for there's just so much

598
00:36:55,520 --> 00:36:59,272
to cover, but there are so many things I didn't manage to show you.

599
00:36:59,448 --> 00:37:03,056
You can have a main menu in your window, you could have a system

600
00:37:03,120 --> 00:37:06,844
tray if you're running on a desktop based runtime

601
00:37:07,424 --> 00:37:10,600
and that code is still the same code

602
00:37:10,672 --> 00:37:13,920
running in your application, you just do a runtime check to see that it is.

603
00:37:13,952 --> 00:37:17,416
In fact, you can use data binding as well. This is a

604
00:37:17,440 --> 00:37:20,710
slightly more advanced topic, but it means that you can have your data source

605
00:37:20,832 --> 00:37:24,410
separate from your user interface code, and you will be able to wire

606
00:37:24,442 --> 00:37:27,826
those together with our data binding package that

607
00:37:27,850 --> 00:37:31,714
uses events and a two way data binding model so they can

608
00:37:31,754 --> 00:37:34,734
stay in sync without having to depend on one another.

609
00:37:35,274 --> 00:37:39,114
And as you saw earlier, there is the find demo app that covers a huge

610
00:37:39,154 --> 00:37:42,306
amount of the things that you can see, and probably

611
00:37:42,370 --> 00:37:45,534
all of the functionality is demonstrated in there at some place,

612
00:37:45,994 --> 00:37:49,484
but that's the standard toolkit. We also have

613
00:37:49,824 --> 00:37:53,424
a great community out there that are contributing their own work as

614
00:37:53,464 --> 00:37:57,656
well. The ability, because of Go's packaging system

615
00:37:57,760 --> 00:38:01,960
to just import an external source and call

616
00:38:01,992 --> 00:38:05,752
the constructor it makes available and we'll have a widget in our UI.

617
00:38:05,888 --> 00:38:09,968
It's going to work just like any other widget. So here

618
00:38:10,096 --> 00:38:13,516
I've just used the Find X package,

619
00:38:13,620 --> 00:38:16,564
which is the community contributions to the find project,

620
00:38:16,724 --> 00:38:20,212
to create a new map widget. And then I display that in my window and

621
00:38:20,228 --> 00:38:23,996
I have a map. Similarly, there's a terminal.

622
00:38:24,140 --> 00:38:27,788
You can drop a full blown terminal into any find based application

623
00:38:27,916 --> 00:38:32,384
by using the terminal package, which is one of the fine repositories.

624
00:38:33,044 --> 00:38:35,624
And it's just there another widget in your application.

625
00:38:36,404 --> 00:38:39,716
So many possibilities here, it's just impossible to cover

626
00:38:39,740 --> 00:38:43,252
them all. Hopefully. This looks like a

627
00:38:43,268 --> 00:38:47,292
joyous thing that I was demonstrating. It's just so easy to get started.

628
00:38:47,468 --> 00:38:51,172
In fact, hundreds, in fact hundreds of thousands of people

629
00:38:51,308 --> 00:38:54,228
have given this a go and built applications of their own.

630
00:38:54,396 --> 00:38:58,236
There's a number of open source projects that you can absolutely check out.

631
00:38:58,340 --> 00:39:02,356
If you go to apps find IO, you can find some of these fantastic

632
00:39:02,420 --> 00:39:05,406
applications out there. Terminals, games,

633
00:39:05,550 --> 00:39:09,270
music players, chat apps, notes, all sorts of things.

634
00:39:09,462 --> 00:39:12,494
If you're wondering where to get started or how you might build

635
00:39:12,534 --> 00:39:16,046
something, it's a great place to look because all of these applications are

636
00:39:16,070 --> 00:39:19,974
open source and well coded to describe how the application is

637
00:39:20,014 --> 00:39:23,878
put together. At Finelabs we are working on

638
00:39:23,926 --> 00:39:27,486
an app builder, so you don't even have to do the coding. You can

639
00:39:27,510 --> 00:39:30,684
drop into a project and visually put your application together.

640
00:39:30,984 --> 00:39:34,408
You can find out more and sign up to be a tester at fission app

641
00:39:34,496 --> 00:39:38,024
if that is interesting to you. But of course it doesn't

642
00:39:38,064 --> 00:39:41,448
have to stop at a single application. You could,

643
00:39:41,536 --> 00:39:45,712
if you wanted, go bigger. And in fact the community has done

644
00:39:45,768 --> 00:39:49,688
just that. There is a desktop environment called Find Desk

645
00:39:49,776 --> 00:39:53,368
that is part of the Phishos distribution, which is a Linux

646
00:39:53,416 --> 00:39:57,740
based operating system where all of the applications are fine applications.

647
00:39:57,852 --> 00:40:01,020
You can see a whole load of them on screen there, like the chess game,

648
00:40:01,092 --> 00:40:04,460
text edit calculator. And in fact an application for

649
00:40:04,492 --> 00:40:08,012
managing your applications, all written using the technology that you've

650
00:40:08,028 --> 00:40:11,644
seen in this presentation. And of course we have a

651
00:40:11,684 --> 00:40:14,988
lovely login manager as well to complete the look.

652
00:40:15,156 --> 00:40:18,492
Indeed, you can see we're running on that system now with virtual

653
00:40:18,548 --> 00:40:22,144
desktops and a little terminal at the top.

654
00:40:22,654 --> 00:40:25,390
There's all sorts of things that you could do with this,

655
00:40:25,542 --> 00:40:29,006
including an integration with that application

656
00:40:29,070 --> 00:40:32,494
editor that I mentioned earlier. There we can

657
00:40:32,574 --> 00:40:35,634
see the calculator app for example.

658
00:40:36,814 --> 00:40:40,294
Hopefully that has inspired you to check it out,

659
00:40:40,454 --> 00:40:44,350
have a go and build something that you can imagine but haven't

660
00:40:44,382 --> 00:40:47,988
figured out how to code. If you'd like to learn more,

661
00:40:48,086 --> 00:40:51,768
then just feel free to jump right in. We've got a load of documentation

662
00:40:51,856 --> 00:40:55,200
at docs find IO or if you prefer video. We've got

663
00:40:55,232 --> 00:40:58,544
a find IO YouTube channel with plenty of tutorials and

664
00:40:58,584 --> 00:41:01,928
demonstrations. If you prefer to read

665
00:41:01,976 --> 00:41:05,592
books, then you can check out building cross platform GUI applications

666
00:41:05,648 --> 00:41:08,968
with fine. That's published by Pact and available on Amazon and

667
00:41:09,016 --> 00:41:11,960
in Barnes and Noble and good booksellers everywhere.

668
00:41:12,112 --> 00:41:15,296
I'd really appreciate it if you would leave a review of the

669
00:41:15,320 --> 00:41:18,520
book if you enjoy it. Of course, this project

670
00:41:18,592 --> 00:41:22,088
would not be possible without the contributions of everybody who's been involved

671
00:41:22,136 --> 00:41:26,008
over the years. We have a fantastic team, but of course we're always grateful

672
00:41:26,136 --> 00:41:29,488
to welcome new people in. Whether you're interested in coding,

673
00:41:29,616 --> 00:41:33,032
testing, writing, documentation, or helping us with the design,

674
00:41:33,088 --> 00:41:37,080
the sites, anything that you see, it's all open source. You can get started wherever

675
00:41:37,112 --> 00:41:40,444
you'd like and it's hosted at our GitHub organization,

676
00:41:40,784 --> 00:41:44,460
starting with of course, the main library, which is

677
00:41:44,492 --> 00:41:48,116
in the fine repository. It would be lovely if you

678
00:41:48,140 --> 00:41:52,204
wanted to support our work through sponsorship. Do check out the URL.

679
00:41:52,244 --> 00:41:56,084
We've got so many amazing sponsors that have contributed over the years,

680
00:41:56,204 --> 00:41:59,380
but it's not just monetary. If you can help

681
00:41:59,452 --> 00:42:03,148
us in any way, do reach out and just

682
00:42:03,236 --> 00:42:07,076
help to be part of the future of this project. Thank you

683
00:42:07,100 --> 00:42:10,800
so much everyone. I hope that you've enjoyed this talk, and I also

684
00:42:10,912 --> 00:42:14,552
hope that you enjoy the rest of Comp 42. Have a fantastic day

685
00:42:14,608 --> 00:42:16,624
and hopefully I'll see you at another event sometime.

