1
00:00:27,040 --> 00:00:30,574
Hi everyone, and welcome to this session. First of all, thank you very much to

2
00:00:30,614 --> 00:00:34,404
the Con 42 audio organizers for allowing me this time to

3
00:00:34,444 --> 00:00:37,892
speak. Let's jump straight into it. So my session is all about

4
00:00:37,948 --> 00:00:41,164
platform engineering at Dynatrace. The journey that we've been

5
00:00:41,204 --> 00:00:44,584
on and continue to be on from

6
00:00:45,004 --> 00:00:48,964
up to a thousand developers and enabling 1000 developers

7
00:00:49,004 --> 00:00:52,812
with platform engineering at Dynatrace, some of what we've achieved and some

8
00:00:52,828 --> 00:00:55,556
of the lessons we've learned so far. So a quick agenda.

9
00:00:55,620 --> 00:00:59,188
We'll do an introduction. Who am I? I'll have to explain

10
00:00:59,316 --> 00:01:02,596
the dinosaurs perform conference and the hands on training session so that

11
00:01:02,620 --> 00:01:06,196
you understand how I got involved in

12
00:01:06,220 --> 00:01:09,428
all of this. We'll zoom out to the wider Dynatrace

13
00:01:09,476 --> 00:01:12,780
use cases across the organization. We'll talk

14
00:01:12,812 --> 00:01:16,108
about some of the discoveries, some of the lessons learned, and then,

15
00:01:16,156 --> 00:01:20,484
of course, I'll wrap up with what's next. Where are we going next

16
00:01:20,564 --> 00:01:24,516
as an organization? So first up, who am I? My name

17
00:01:24,540 --> 00:01:28,714
is Adam Gardner. I'm a CNCF ambassador. I'm also a

18
00:01:28,794 --> 00:01:32,562
developer relations expert at Dynatrace. And I spent about

19
00:01:32,618 --> 00:01:36,634
nine months working on this area of platform engineering

20
00:01:36,794 --> 00:01:40,850
at Dynatrace. So this story begins where

21
00:01:41,042 --> 00:01:44,730
Andy Andreas Grabner, a fellow CNCF ambassador and

22
00:01:44,762 --> 00:01:48,002
also works at Dynatrace, came to me and said,

23
00:01:48,058 --> 00:01:51,546
Adam, we want to do something for the perform conference

24
00:01:51,610 --> 00:01:54,912
in Las Vegas. Now, perform is the yearly

25
00:01:55,098 --> 00:01:58,060
flagship conference for Dynatrace in Las Vegas.

26
00:01:58,172 --> 00:02:02,132
And Andy said, we want to create an observable platform engineering

27
00:02:02,268 --> 00:02:05,676
hot session. What's a hot session? It's the hands on training.

28
00:02:05,780 --> 00:02:09,580
The day before the conference, prospects and customers come

29
00:02:09,612 --> 00:02:12,820
into the room and we enable them on some topics. So there's

30
00:02:12,852 --> 00:02:16,452
about ten rooms. Some of them are on dashboarding, some are on alert,

31
00:02:16,508 --> 00:02:20,036
some are on kubernetes, open telemetry and so on and so

32
00:02:20,060 --> 00:02:24,144
on. So of course we wanted to put together a platform

33
00:02:24,224 --> 00:02:27,992
engineering demo. It was a little bit of a unique setup

34
00:02:28,048 --> 00:02:31,560
because we had the instructors, of course, who were playing the

35
00:02:31,592 --> 00:02:35,400
role of the platform team, delivering that software

36
00:02:35,432 --> 00:02:38,720
as a product to the application teams. And each

37
00:02:38,752 --> 00:02:42,288
of the users that would come into the training session

38
00:02:42,376 --> 00:02:45,952
would model an individual app team. This is

39
00:02:46,008 --> 00:02:49,480
one of the sessions. I think we ran six of these sessions

40
00:02:49,592 --> 00:02:53,046
that URL, by the way, everything I'm talking about is

41
00:02:53,150 --> 00:02:56,558
available for you to spin up in a GitHub code space. You can

42
00:02:56,606 --> 00:03:00,270
actually spin this demo up yourself if you want to have a play around

43
00:03:00,302 --> 00:03:03,702
with it. So what was the platform? Well, the platform was

44
00:03:03,758 --> 00:03:07,990
based on GitLab. So GitLab was on the cluster

45
00:03:08,182 --> 00:03:12,142
being our source of truth. We did it because we didn't want

46
00:03:12,238 --> 00:03:15,718
or need the people walking into the room to have any

47
00:03:15,766 --> 00:03:18,918
sort of dependencies. Then we had Argo CD,

48
00:03:19,046 --> 00:03:22,662
argo workflows, and Argo rollouts to deliver

49
00:03:22,718 --> 00:03:25,646
the GitOps side of the solution. Backstage, of course,

50
00:03:25,710 --> 00:03:29,446
is the platform UI. Captain will watch what Argo is

51
00:03:29,470 --> 00:03:33,846
deploying and actually generate Dora metrics. So the open telemetry data

52
00:03:33,990 --> 00:03:37,622
for those deployments, of course, we've got open telemetry

53
00:03:37,718 --> 00:03:41,158
and the open telemetry collector on the cluster cert manager

54
00:03:41,206 --> 00:03:44,278
to generate TL's certificates. Open feature for

55
00:03:44,326 --> 00:03:47,846
feature flagging. Open feature is a vendor neutral

56
00:03:47,910 --> 00:03:51,072
specification for feature flagging. We've got cloud events,

57
00:03:51,198 --> 00:03:54,932
we've got NginX ingress, obviously, to get into the cluster, and then

58
00:03:54,948 --> 00:03:58,476
we've got a whole host of security scanning. So products like

59
00:03:58,500 --> 00:04:01,668
Kubehunter, Cube audit, cube bench and so on.

60
00:04:01,796 --> 00:04:05,300
So all of this data, all of this observability data is

61
00:04:05,332 --> 00:04:08,452
getting fed back into an observability platform

62
00:04:08,508 --> 00:04:11,044
of your choice. In this case, we were using, of course,

63
00:04:11,164 --> 00:04:14,260
Dynatrace. So, talking of the observability,

64
00:04:14,412 --> 00:04:17,472
it starts as soon as you spin up the environment,

65
00:04:17,568 --> 00:04:20,840
because we need to know whether the environment actually spun up successfully.

66
00:04:20,912 --> 00:04:25,000
And this is what you're looking at, an open telemetry trace of the

67
00:04:25,112 --> 00:04:29,176
platform itself, signaling that it's healthy. Once the

68
00:04:29,200 --> 00:04:32,584
platform has spun up, this is what it looks like. So Argo

69
00:04:32,624 --> 00:04:36,104
is managing everything else that's on the cluster, and then

70
00:04:36,144 --> 00:04:39,024
as users, we start to use the platform.

71
00:04:39,144 --> 00:04:43,032
So in terms of the platform capabilities, you've got two. You can create

72
00:04:43,128 --> 00:04:46,748
or onboard a new application, and when you hit choose,

73
00:04:46,876 --> 00:04:50,900
it walks you through a workflow that says, well, what's the application

74
00:04:50,972 --> 00:04:54,100
name? What version should it be? Do you want Dora metrics

75
00:04:54,212 --> 00:04:58,700
tracking this deployment? Do you want security scans, observability tooling,

76
00:04:58,732 --> 00:05:01,528
like dashboards and things? Next. Next. Next.

77
00:05:01,726 --> 00:05:05,492
And the platform goes and deploys your application.

78
00:05:05,668 --> 00:05:09,668
The second one is more about the 360 feedback for the platform team.

79
00:05:09,796 --> 00:05:13,826
Us, the instructors, of course, we need feedback to

80
00:05:13,850 --> 00:05:17,234
see whether the application teams are actually enjoying

81
00:05:17,354 --> 00:05:21,258
or find this whole thing useful. So when someone picks

82
00:05:21,306 --> 00:05:24,762
choose on the feedback form, they get a form,

83
00:05:24,858 --> 00:05:28,482
they fill out, it packages up that feedback as a

84
00:05:28,498 --> 00:05:31,794
cloud event and then sends that into dynatrace. And so

85
00:05:31,834 --> 00:05:35,386
we as a platform team, can see that feedback in real time. What about the

86
00:05:35,410 --> 00:05:39,002
use cases? If we zoom out across Dynatrace, because a curious

87
00:05:39,058 --> 00:05:43,230
thing happened on day two, after we delivered all of those sessions,

88
00:05:43,382 --> 00:05:46,790
I was standing upstairs and someone came across and

89
00:05:46,822 --> 00:05:50,454
said, oh, I hear you doing platform engineering. Can you tell me more about

90
00:05:50,494 --> 00:05:53,910
it? Went through the spiel and said, okay, that sounds good.

91
00:05:54,022 --> 00:05:56,582
And then someone else came up and someone else came up. And by the end

92
00:05:56,598 --> 00:06:00,438
of the day, I'd spoken to almost every other department,

93
00:06:00,526 --> 00:06:03,918
sales engineering services, d one, the post salespeople,

94
00:06:04,046 --> 00:06:07,950
research and development, the devs, and also the support organization.

95
00:06:08,142 --> 00:06:11,430
And boiling it down, they could all do with platform engineering.

96
00:06:11,502 --> 00:06:15,854
And it really came down to these use cases. Easily accessible disposable

97
00:06:15,934 --> 00:06:19,534
environments. So this is the sales engineering and post sales want to

98
00:06:19,614 --> 00:06:23,278
rock up at a customer site, demo something like open feature or open

99
00:06:23,326 --> 00:06:27,462
telemetry. Show the customer, tear down the environment and walk away.

100
00:06:27,558 --> 00:06:31,478
They don't want to worry about provisioning or anything like that. Now imagine

101
00:06:31,526 --> 00:06:35,174
you're a developer who's just been hired by Dynatrace. If you're a Java developer,

102
00:06:35,214 --> 00:06:38,662
you might need a template for a spring boot application. Or if you're

103
00:06:38,678 --> 00:06:42,654
a Dynatrace app developer, you need a template for a Dynatrace app. Get you

104
00:06:42,694 --> 00:06:46,934
up and running as fast as possible. Of course, the basic

105
00:06:47,094 --> 00:06:50,230
normal things like provisioning infrastructure, cpu, memory,

106
00:06:50,342 --> 00:06:53,718
network, clusters, buckets, storage buckets, that kind

107
00:06:53,726 --> 00:06:57,782
of thing. And possibly the most interesting or novel use case I saw throughout

108
00:06:57,798 --> 00:07:01,782
the day was the support ticket. So when a support ticket comes in,

109
00:07:01,878 --> 00:07:05,346
the support team need a reproducible

110
00:07:05,410 --> 00:07:08,690
environment. But then, of course, when they've solved that support ticket, they just

111
00:07:08,722 --> 00:07:12,370
want to throw that environment away. So the platform engineering

112
00:07:12,442 --> 00:07:15,850
aspect comes in. What can we layer on top of that to make all of

113
00:07:15,882 --> 00:07:19,250
these use cases accessible? So summing all of this

114
00:07:19,282 --> 00:07:23,018
up, this nine month journey, what have I discovered? What have we

115
00:07:23,066 --> 00:07:26,618
discovered on our way to 1000

116
00:07:26,706 --> 00:07:29,792
developers using this sort of technology? At dynatrace,

117
00:07:29,898 --> 00:07:33,548
platforms are products. You're maybe not going to have money changing

118
00:07:33,596 --> 00:07:37,124
hands, but time is money. So you're going to have to convince

119
00:07:37,204 --> 00:07:40,916
someone that it's worth putting a team together to work on

120
00:07:40,940 --> 00:07:45,124
this stuff. So treat it like a product. Have a roadmap,

121
00:07:45,164 --> 00:07:49,236
have a product manager, have a sales tactic,

122
00:07:49,420 --> 00:07:52,740
an outreach program where you go out to other teams and

123
00:07:52,772 --> 00:07:56,508
talk about what you're doing, because people only have

124
00:07:56,596 --> 00:08:00,116
a finite amount of time and attention. Make sure you

125
00:08:00,140 --> 00:08:03,350
grab them and keep them. Platforms are abstractions. They're a

126
00:08:03,382 --> 00:08:07,374
way to take the complex and make it a commodity.

127
00:08:07,454 --> 00:08:10,542
They're also opportunities to offer guidance,

128
00:08:10,638 --> 00:08:13,750
best practices or enforce policies. So if you've got

129
00:08:13,782 --> 00:08:17,126
something complicated, platform engineering allows you

130
00:08:17,150 --> 00:08:20,966
as an organization to scale that in the most efficient way. But talking

131
00:08:21,030 --> 00:08:24,670
about platform engineering, we couldn't talk about

132
00:08:24,702 --> 00:08:28,254
it without complexity because it can be quite easy and tempting.

133
00:08:28,294 --> 00:08:32,174
You'll see in a moment. I fell for this as well, to just do

134
00:08:32,214 --> 00:08:35,852
everything, shove everything in there. But complexity.

135
00:08:35,908 --> 00:08:39,244
In platforms, we're talking about bloat. It leads to security,

136
00:08:39,404 --> 00:08:42,548
performance, compliance and maintenance issues.

137
00:08:42,636 --> 00:08:46,292
The smaller you can keep the product, the better your outcomes, the easier

138
00:08:46,348 --> 00:08:49,780
it will be to maintain. Talking about enforcing policies,

139
00:08:49,892 --> 00:08:53,716
guidance and best practices, this is actually when you spin up the platform

140
00:08:53,780 --> 00:08:56,996
demo, this is what you get. You get a checkbox that says, do you want

141
00:08:57,020 --> 00:09:00,540
Dora metrics enabled or disabled for this deployment?

142
00:09:00,652 --> 00:09:04,076
Do you want to include security scans or dynastrace

143
00:09:04,100 --> 00:09:06,694
or observable configuration like dashboards?

144
00:09:07,074 --> 00:09:10,802
Now, you may have no idea how that works. You might not be

145
00:09:10,818 --> 00:09:14,466
a security expert or know how security tooling works at all,

146
00:09:14,570 --> 00:09:18,290
but because there is a nice, simple yes or no box,

147
00:09:18,402 --> 00:09:22,034
you're more likely to say, yeah, well, I'll have some of that.

148
00:09:22,114 --> 00:09:25,594
As a platform owner, as the platform team, I can

149
00:09:25,634 --> 00:09:28,874
pre select that that is by default enabled, so I can

150
00:09:28,914 --> 00:09:32,466
guide you down the right paths. Wrapping all of this up. The lessons

151
00:09:32,530 --> 00:09:35,894
learned dry. Don't repeat yourself. Don't do

152
00:09:35,934 --> 00:09:39,126
things more than once. And this is a problem we're trying to solve with platform

153
00:09:39,190 --> 00:09:42,742
engineering at dynatrace. We've got a thousand developers, we've got

154
00:09:42,798 --> 00:09:46,318
many teams, and they're all doing things a slightly different

155
00:09:46,366 --> 00:09:50,166
way, in their own way, with their own stacks. Keep it

156
00:09:50,190 --> 00:09:53,974
simple. I think I've already covered this to death, but it's really, really important.

157
00:09:54,094 --> 00:09:57,390
A feature today that you implement is a support

158
00:09:57,502 --> 00:10:00,750
ticket tomorrow. If it's not there, you can't get a support ticket

159
00:10:00,782 --> 00:10:04,210
for it. So really, really be clinical and critical about what

160
00:10:04,242 --> 00:10:08,034
you're including. Avoid gold plating. That goes to the same

161
00:10:08,194 --> 00:10:12,706
idea. Keep it simple. The MVSP we're

162
00:10:12,730 --> 00:10:15,654
all familiar with MVP, minimal viable product.

163
00:10:15,994 --> 00:10:18,554
MVSP is minimal viable,

164
00:10:18,634 --> 00:10:22,594
secure product. I'll talk about that more in a moment. I said,

165
00:10:22,634 --> 00:10:26,066
I fell victim to this as well, because as soon as we developed

166
00:10:26,250 --> 00:10:29,690
the MVSP for this demo, this happened.

167
00:10:29,722 --> 00:10:33,132
I thought, oh, we could add feature flagging, and we can add

168
00:10:33,258 --> 00:10:36,408
Kaiverno and chaos tools and policy and compliance

169
00:10:36,456 --> 00:10:39,816
tools and on and on and on. And actually, there were no comments.

170
00:10:39,920 --> 00:10:43,696
Nobody wanted this stuff. So to me, that's a pretty good signal.

171
00:10:43,760 --> 00:10:47,600
Don't build it. And I went and closed all the issues. So it's

172
00:10:47,632 --> 00:10:50,664
very tempting. It's very hard to say no. Now,

173
00:10:50,704 --> 00:10:55,364
talking about the minimal, viable, secure product. This is actually an initiative

174
00:10:55,864 --> 00:10:59,920
that is a checklist. And it goes through all the things that it means

175
00:10:59,992 --> 00:11:03,168
to develop an enterprise ready, secure product.

176
00:11:03,296 --> 00:11:06,600
And it already has backing from some

177
00:11:06,632 --> 00:11:09,832
big names there, Salesforce, Google, the USA,

178
00:11:09,888 --> 00:11:13,288
CISA organization, Okta and so on and so forth.

179
00:11:13,376 --> 00:11:16,568
So I recommend checking out MVSP. That said,

180
00:11:16,616 --> 00:11:20,344
though there are some exceptions, and if I was a product manager,

181
00:11:20,424 --> 00:11:24,304
if I could meet these three indicators, I would say

182
00:11:24,424 --> 00:11:28,364
you don't need MVSP, you maybe just need MVP.

183
00:11:28,744 --> 00:11:32,456
So where the product or the thing that you're building is temporary or

184
00:11:32,480 --> 00:11:35,712
throwaway and it doesn't touch important systems. Now important

185
00:11:35,808 --> 00:11:39,600
is up to you to define. I define it as not touching customer data,

186
00:11:39,672 --> 00:11:43,604
not touching production data, not really touching any real

187
00:11:43,984 --> 00:11:48,200
stuff at all. Because if you can meet these three qualifications,

188
00:11:48,352 --> 00:11:51,512
you can assume a breach. You can basically say,

189
00:11:51,568 --> 00:11:54,960
okay, I know there is a bad guy looking at this data.

190
00:11:55,112 --> 00:11:59,096
It doesn't matter, there's nothing real in there. Talking about things

191
00:11:59,160 --> 00:12:02,872
that you may want to read, you may want to research the Cloud

192
00:12:02,928 --> 00:12:06,496
Native Computing foundation app delivery group have

193
00:12:06,520 --> 00:12:10,504
put out two brilliant pieces of content, the platform's whitepaper

194
00:12:10,664 --> 00:12:14,376
and the follow up, which is the platform engineering maturity model.

195
00:12:14,480 --> 00:12:18,312
So both of those combined, the white paper will give you a general introduction and

196
00:12:18,328 --> 00:12:22,046
the maturity model will really give you that checklist of where

197
00:12:22,070 --> 00:12:25,278
you are today with platform engineering and how you can and what you

198
00:12:25,286 --> 00:12:28,734
need to think about to get to the next level.

199
00:12:28,894 --> 00:12:32,334
Where do we go next in Dynatrace? What's next on this

200
00:12:32,374 --> 00:12:36,398
journey? We're using this activity as a testing

201
00:12:36,446 --> 00:12:40,374
ground to scale this across our organizations, as I've already said

202
00:12:40,414 --> 00:12:43,598
across those teams to more than 1000 developers.

203
00:12:43,726 --> 00:12:47,394
During this, we realized we needed a supported open

204
00:12:47,434 --> 00:12:50,642
telemetry collector distribution from Dynatrace. And I'm

205
00:12:50,658 --> 00:12:55,178
happy to say that has actually been delivered now. So of course we deployed backstage

206
00:12:55,266 --> 00:12:59,866
and I wanted to integrate that with Dynatrace. We do have a backstage plugin,

207
00:13:00,010 --> 00:13:03,610
but we actually, as part of this work, we're developing a new,

208
00:13:03,722 --> 00:13:07,050
improved, updated backstage plugin. We're working

209
00:13:07,122 --> 00:13:11,106
on cloud native standards for pipeline observability. So a pipeline

210
00:13:11,170 --> 00:13:14,850
run started, a pipeline run finished, an error occurred and so

211
00:13:14,882 --> 00:13:18,726
on and so forth, and how we standardize that across the company,

212
00:13:18,830 --> 00:13:22,430
but hopefully across the industry as well. In this demo, we're using

213
00:13:22,542 --> 00:13:25,982
Dynastrace Monoco tooling, but we're now looking at more cloud

214
00:13:26,038 --> 00:13:29,342
native ways like crossplane and or operators

215
00:13:29,438 --> 00:13:32,622
for configuration as code. So that work is currently in

216
00:13:32,638 --> 00:13:36,870
progress. As well and we're looking at dev containers. So this whole setup

217
00:13:36,982 --> 00:13:40,198
is based on the dev container standard and

218
00:13:40,286 --> 00:13:43,654
we're looking at how we standardize our disposable

219
00:13:43,734 --> 00:13:47,558
environments using the dev container specification. So with that,

220
00:13:47,606 --> 00:13:50,606
thank you very much for your time. I hope it was useful.

221
00:13:50,750 --> 00:13:54,190
Here are a couple of links. The QR codes, the left one goes to

222
00:13:54,302 --> 00:13:57,718
the hands on demo. You can spin that up in a code space,

223
00:13:57,846 --> 00:14:01,614
play around, destroy it when you're done. GitHub give

224
00:14:01,654 --> 00:14:04,774
you 2000 minutes I think for free per month.

225
00:14:04,894 --> 00:14:07,974
So yeah, go feel free to play around with

226
00:14:08,014 --> 00:14:11,430
this. Connect with me on LinkedIn if you get stuck or you need any

227
00:14:11,462 --> 00:14:14,924
help. And the links at the bottom are all of the white papers,

228
00:14:15,004 --> 00:14:18,612
the MVSP and the backstage plugin that I've discussed

229
00:14:18,668 --> 00:14:21,892
during this session. Thank you so

230
00:14:21,948 --> 00:14:25,284
much for your time and yeah, enjoy the rest of the conference and

231
00:14:25,364 --> 00:14:28,404
good luck on your platform engineering journey.

232
00:14:28,524 --> 00:14:29,820
Thanks. I'll see you soon.

