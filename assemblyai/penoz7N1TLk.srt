1
00:00:27,240 --> 00:00:30,444
Hello everyone, I am Srijan Rastogi. Thanks for joining in on my

2
00:00:30,484 --> 00:00:33,828
presentation on the topic no more flying blind, unlock observability

3
00:00:33,916 --> 00:00:37,436
for smooth selling with GoFr. Here we will be

4
00:00:37,460 --> 00:00:41,220
discussing about observability, what are its building blocks? How it benefits

5
00:00:41,252 --> 00:00:44,580
the developer to gain insights of the application and then we will

6
00:00:44,612 --> 00:00:49,076
dive into GoFr and its features regarding observability. In

7
00:00:49,100 --> 00:00:53,100
todays digital age, applications are becoming increasingly

8
00:00:53,132 --> 00:00:56,516
complex, often built using microservices architecture.

9
00:00:56,660 --> 00:01:00,812
This complexity makes it challenging to understand how these systems behave

10
00:01:00,908 --> 00:01:04,924
and identify issues when they arise. Thats where observability comes

11
00:01:04,964 --> 00:01:08,264
in for your help. What is observability?

12
00:01:08,564 --> 00:01:12,188
Observability is ability to understand the internal state

13
00:01:12,236 --> 00:01:15,820
of the system. By examining its external output.

14
00:01:15,972 --> 00:01:19,092
It provides a holistic view of your system health,

15
00:01:19,228 --> 00:01:23,322
enabling us to troubleshoot problems, optimize performance and ensure

16
00:01:23,418 --> 00:01:24,894
application reliability.

17
00:01:26,674 --> 00:01:30,554
The building blocks of observability are considered to be metrics,

18
00:01:30,634 --> 00:01:34,394
logs and traces. These three building blocks work together

19
00:01:34,474 --> 00:01:37,014
to provide a comprehensive view of your system.

20
00:01:37,874 --> 00:01:41,402
Metrics offer a high level overview. Logs provide

21
00:01:41,458 --> 00:01:45,346
detailed information about specific events and traces help us

22
00:01:45,370 --> 00:01:47,974
understand the flow of execution across services.

23
00:01:49,974 --> 00:01:53,870
What are the benefits of observability? By having a clear understanding

24
00:01:53,902 --> 00:01:57,774
of our systems behavior, you can identify and fix problems

25
00:01:57,814 --> 00:02:01,390
much faster. Observability helps you optimize your applications

26
00:02:01,502 --> 00:02:05,630
performance and stability, leading to a better user experience.

27
00:02:05,822 --> 00:02:08,870
Additionally, you can proactively identify potential

28
00:02:08,942 --> 00:02:12,854
issues before even they impact users, which causes

29
00:02:12,894 --> 00:02:16,724
to reduce your downtime and ensuring business continuity.

30
00:02:17,824 --> 00:02:21,616
Now let's get started with GoFr. GoFr is an

31
00:02:21,640 --> 00:02:25,272
open source and it has a large and active community of users who

32
00:02:25,288 --> 00:02:29,040
are happy to help. GoFr also provides comprehensive documentation,

33
00:02:29,112 --> 00:02:33,280
tutorials and forums to guide you through the installation and configuration process.

34
00:02:33,472 --> 00:02:37,124
You can visit us on the mentioned website or our GitHub repo.

35
00:02:39,584 --> 00:02:42,852
Let's see how we can build a simple hello API

36
00:02:42,948 --> 00:02:46,700
using GoFr. I have created a directory of the name GoFr

37
00:02:46,732 --> 00:02:50,252
hello API. Let's initialize the gomod for it with the same

38
00:02:50,308 --> 00:02:50,904
name.

39
00:02:54,044 --> 00:02:57,076
So to get GoFr as a dependency we would need to

40
00:02:57,100 --> 00:03:00,924
run command go get gofr.dev. Also to add

41
00:03:00,964 --> 00:03:04,988
the configs of the application we would need to add a configs directory

42
00:03:05,116 --> 00:03:09,040
in which we can add a .env file which

43
00:03:09,072 --> 00:03:12,824
will have configs for our application regarding

44
00:03:12,904 --> 00:03:16,936
HTTP server, databases and also we

45
00:03:16,960 --> 00:03:20,164
are adding trace exporter which we will discuss later.

46
00:03:20,624 --> 00:03:24,512
Now let's get started with the main file main.go.

47
00:03:24,648 --> 00:03:28,072
In the main function we would be initializing a

48
00:03:28,128 --> 00:03:31,256
app which is returned by the

49
00:03:31,280 --> 00:03:35,780
GoFr new function. It gives us an instance of a GoFr application

50
00:03:35,932 --> 00:03:38,836
using which we can register handlers,

51
00:03:39,020 --> 00:03:43,084
run DB migrations, or start the server here in hello

52
00:03:43,124 --> 00:03:47,124
server hello handler. We are returning hello

53
00:03:47,164 --> 00:03:50,660
world and nil as the error all the

54
00:03:50,692 --> 00:03:54,544
GoFr handlers return interface and error type.

55
00:03:55,004 --> 00:03:58,028
Now let's get started with the server.

56
00:03:58,156 --> 00:04:01,706
Before that we need to run go mod tidy. Now let's get started

57
00:04:01,770 --> 00:04:04,534
with the server. As you can see,

58
00:04:05,554 --> 00:04:08,858
the server is getting initialized at 9000.

59
00:04:08,946 --> 00:04:12,618
The metrics are already being initialized at 2121,

60
00:04:12,706 --> 00:04:16,770
and our traces are being exported to the mentioned website.

61
00:04:16,962 --> 00:04:20,770
So let's hit the server and

62
00:04:20,802 --> 00:04:24,458
see what we get in return. So as you can see we

63
00:04:24,466 --> 00:04:28,384
are getting hello world. Now let's check the metrics server.

64
00:04:30,644 --> 00:04:34,548
Here you can see GoFr provides the

65
00:04:34,676 --> 00:04:38,532
memory metrics. Also you can see the HTTP

66
00:04:38,588 --> 00:04:42,204
response with the specific routes

67
00:04:42,364 --> 00:04:45,860
with the status port, how much time it took, and all

68
00:04:45,892 --> 00:04:50,144
the go routines. Memory related metrics

69
00:04:50,924 --> 00:04:54,944
now we can hit more request and see if the metrics are updated.

70
00:04:55,064 --> 00:04:58,904
Yes. Now the GoFr also provides you with the

71
00:04:59,064 --> 00:05:02,480
health check functionality. You can hit

72
00:05:02,512 --> 00:05:06,328
that on the server dot well known

73
00:05:06,456 --> 00:05:09,744
slash alive endpoint so

74
00:05:09,864 --> 00:05:12,724
it returns that the status is for the service.

75
00:05:13,224 --> 00:05:17,476
Also you can see that these are the logs which are

76
00:05:17,640 --> 00:05:21,544
perfectly formatted on the terminal for our application.

77
00:05:21,964 --> 00:05:25,780
Now let's see how the traces are being shown in our

78
00:05:25,892 --> 00:05:29,724
GoFr tracer UI. These are the

79
00:05:29,884 --> 00:05:33,824
correlation ids which are respect, which are

80
00:05:34,244 --> 00:05:38,460
unique for all the requests and which are used to track the

81
00:05:38,492 --> 00:05:42,532
application flow. Let's search for that. Here you

82
00:05:42,548 --> 00:05:45,944
can see that we have the traces like we hit

83
00:05:45,984 --> 00:05:49,944
the get endpoint at hello and the GoFr router,

84
00:05:50,104 --> 00:05:53,884
how much time it took, and all the other necessary details.

85
00:05:56,344 --> 00:06:00,312
Now as we have seen the implementation from GoFr,

86
00:06:00,488 --> 00:06:04,444
let's see how GoFr helps you overcome the challenges of observability.

87
00:06:04,864 --> 00:06:08,944
It provides a centralized inbuilt platform for all your observability

88
00:06:09,024 --> 00:06:12,056
needs. Lets explore how GoFr can empower

89
00:06:12,120 --> 00:06:15,400
your development and operations teams. It collects

90
00:06:15,432 --> 00:06:19,104
metrics, data which can be used to identify bottlenecks and track

91
00:06:19,144 --> 00:06:22,640
the health of your application over time logs which can

92
00:06:22,672 --> 00:06:27,016
be helpful for debugging and troubleshooting issues. Distributed tracing

93
00:06:27,160 --> 00:06:30,312
helps you pinpoint the root cause of issues in complex

94
00:06:30,368 --> 00:06:33,896
systems. Now lets get started with

95
00:06:33,920 --> 00:06:37,468
the building blocks of observability. Let's start with metrics.

96
00:06:37,596 --> 00:06:40,932
Metrics are the foundation of observability. They provide us

97
00:06:40,948 --> 00:06:44,196
with quantifiable data points that allows us to

98
00:06:44,220 --> 00:06:47,876
measure the performance and health of your system. Think of metrics

99
00:06:47,900 --> 00:06:51,628
as gauges on your car's dashboard. They tell us how fast

100
00:06:51,676 --> 00:06:54,908
you are going, how much fuel you have left, and if there

101
00:06:54,956 --> 00:06:59,436
are any potential problems. In GoFr's perspective,

102
00:06:59,540 --> 00:07:03,074
there are many different types of metrics that can be used in GoFr,

103
00:07:03,244 --> 00:07:06,846
but some of the most common ones falls into three categories,

104
00:07:07,030 --> 00:07:11,014
application performance, infrastructure performance and user behavior.

105
00:07:11,174 --> 00:07:15,158
By analyzing these metrics in GoFr, you can gain valuable

106
00:07:15,246 --> 00:07:17,718
insights into how your system is performing,

107
00:07:17,846 --> 00:07:21,318
identify potential issues, and ultimately deliver a better

108
00:07:21,366 --> 00:07:25,350
user experience. GoFr also empowers you to create custom

109
00:07:25,422 --> 00:07:28,434
metrics for your specific use, case and needs.

110
00:07:29,474 --> 00:07:33,226
Now let's discuss about logging think of logs as

111
00:07:33,250 --> 00:07:36,378
your application diary. They capture what's happening

112
00:07:36,426 --> 00:07:40,306
inside your code at a different point of time. Logs are the

113
00:07:40,330 --> 00:07:44,138
one of the three pillars of observability alongside with metrics and traces.

114
00:07:44,306 --> 00:07:47,994
While metrics offer high level overviews and traces shows

115
00:07:48,074 --> 00:07:51,842
request flows, logs provide the detailed stories behind the

116
00:07:51,858 --> 00:07:55,930
scene. In GoFr's perspective, it provides

117
00:07:55,962 --> 00:07:59,162
logs for every single detail of your application,

118
00:07:59,338 --> 00:08:02,018
like reading of configs, databases,

119
00:08:02,146 --> 00:08:05,354
server starts, etcetera. It provides beautiful

120
00:08:05,394 --> 00:08:08,666
terminal logs as shown in the image. The logs

121
00:08:08,690 --> 00:08:12,370
can also be exported in a well structured JSON format

122
00:08:12,482 --> 00:08:15,574
which helps you in filtering on the basis of keys.

123
00:08:16,794 --> 00:08:19,906
Now let's talk about traces. Distributed tracing

124
00:08:19,970 --> 00:08:23,462
is a powerful technique for monitoring and debugging applications,

125
00:08:23,658 --> 00:08:26,958
especially those built with microservices architecture.

126
00:08:27,126 --> 00:08:30,718
By tracing requests across different services, we gain

127
00:08:30,766 --> 00:08:34,182
valuable insights into how our application is functioning

128
00:08:34,238 --> 00:08:38,366
as a whole. GoFr highlights

129
00:08:38,390 --> 00:08:41,894
the integration with tracing tools like Zipkin

130
00:08:41,974 --> 00:08:45,470
and Jaeger. It also has a internal

131
00:08:45,622 --> 00:08:49,514
tracing tool which we will discuss later and

132
00:08:49,854 --> 00:08:53,390
also trace ids are used to track requests

133
00:08:53,462 --> 00:08:56,798
across microservices. Visualizing the request

134
00:08:56,846 --> 00:09:00,702
flow helps pinpointing the bottleneckness and performance

135
00:09:00,798 --> 00:09:04,422
issues, leading to faster debugging and improved application

136
00:09:04,478 --> 00:09:09,062
health. Overall, distributed tracing empowers developments

137
00:09:09,198 --> 00:09:12,614
developers to build robust and scalable applications

138
00:09:12,774 --> 00:09:16,826
with the help of GoFr. So as we discussed in

139
00:09:16,850 --> 00:09:20,698
now, the benefits of observability features in GoFr and how

140
00:09:20,746 --> 00:09:24,026
it enhances the efficiency of developing an application.

141
00:09:24,210 --> 00:09:28,414
Here is a quick summary of them. GoFr removes the

142
00:09:29,154 --> 00:09:33,034
need for multiple tools and provide a uniform platform for

143
00:09:33,074 --> 00:09:36,954
all your observability needs. It quickly identify and

144
00:09:36,994 --> 00:09:41,338
resolve issues. With GoFr's powerful analytics and visualization

145
00:09:41,426 --> 00:09:45,180
capabilities, you can also gain deeper insights

146
00:09:45,212 --> 00:09:48,892
into application behavior to make informed development

147
00:09:48,988 --> 00:09:53,140
decisions. GoFr is also an open source platform,

148
00:09:53,292 --> 00:09:56,824
eliminating the need for expensive propriety solutions.

149
00:09:57,564 --> 00:10:00,988
Now let's see. In live action

150
00:10:01,076 --> 00:10:04,844
for the microservices. Here I have created two microservices

151
00:10:04,924 --> 00:10:07,980
order func and order data so

152
00:10:08,092 --> 00:10:11,242
let's see, for order data configs we have app name,

153
00:10:11,298 --> 00:10:14,374
app version, HTTP port and the DB configurations.

154
00:10:15,034 --> 00:10:18,282
Similarly, like we have created the migration also to create the

155
00:10:18,298 --> 00:10:22,002
orders table. And if we go to orders func,

156
00:10:22,098 --> 00:10:26,082
we have added the same configurations here where data service being the

157
00:10:26,218 --> 00:10:29,894
URL for the downstream service. So let's start the

158
00:10:30,234 --> 00:10:34,026
order data service. So if we see like

159
00:10:34,050 --> 00:10:37,678
the DB is connected because the log migration that we wrote

160
00:10:37,826 --> 00:10:41,870
successfully, so the table would have been created. Let's run the order func

161
00:10:41,902 --> 00:10:46,750
service. Now the service is being started on

162
00:10:46,782 --> 00:10:50,194
port 8080. Now let's hit some requests.

163
00:10:52,494 --> 00:10:54,394
We are using jmeter for that.

164
00:10:55,894 --> 00:10:59,358
So now we can see that there are multiple

165
00:10:59,406 --> 00:11:02,790
requests coming on both the order data service and

166
00:11:02,822 --> 00:11:06,724
the order the function. Here we can see the downstream URL also

167
00:11:07,424 --> 00:11:08,804
for the data service.

168
00:11:11,464 --> 00:11:15,160
So now if we go to check the metrics here, we have

169
00:11:15,192 --> 00:11:18,720
used Grafana to visualize the metrics. I will

170
00:11:18,752 --> 00:11:22,472
attach the dashboard JSON file in my repo so you

171
00:11:22,488 --> 00:11:26,804
can take a look over that. So let's see how metrics visualization

172
00:11:27,104 --> 00:11:30,900
comes into play. So we can see that go

173
00:11:30,932 --> 00:11:34,284
routines memory utilization is being visualized using

174
00:11:34,324 --> 00:11:37,660
GoFr metrics. We are also showing the response

175
00:11:37,692 --> 00:11:41,620
time SLA for the metrics and the heat

176
00:11:41,652 --> 00:11:45,164
map for them. Request count and request code is also

177
00:11:45,204 --> 00:11:48,420
shown. So this would be helpful. Like to know

178
00:11:48,452 --> 00:11:51,988
the service how many requests came, which type of request it got.

179
00:11:52,156 --> 00:11:55,524
We can see like it is showing the path, it is showing the method over

180
00:11:55,564 --> 00:11:59,066
that. And in the status code we can see like this type of status code

181
00:11:59,090 --> 00:12:02,658
it responded with. Similarly we see

182
00:12:02,706 --> 00:12:08,374
like p 90, p 95, all of those percentiles.

183
00:12:09,034 --> 00:12:12,626
Also like we can also see like which route and which path

184
00:12:12,690 --> 00:12:16,106
combo combination return, which status code, how many times.

185
00:12:16,170 --> 00:12:19,906
So here we only have two execs, 200 and

186
00:12:19,930 --> 00:12:23,558
201s. So yeah, for outbound request,

187
00:12:23,646 --> 00:12:27,154
since it is a data layer, we will have SQL DB

188
00:12:27,814 --> 00:12:31,478
metrics. We can also see like we are showing how many, how much time

189
00:12:31,526 --> 00:12:35,022
did the DB took to respond, like which

190
00:12:35,198 --> 00:12:38,486
type of queries we ran on the Db and

191
00:12:38,510 --> 00:12:42,206
how many DB connections were open. Same as we

192
00:12:42,230 --> 00:12:45,702
can also see the order

193
00:12:45,758 --> 00:12:49,430
func here we can see like we can see the versions also similarly

194
00:12:49,462 --> 00:12:53,016
go routines, memory inbound request.

195
00:12:53,160 --> 00:12:57,544
Here there is a point that we can notice, like this

196
00:12:57,584 --> 00:13:01,560
point of time. We can see that it took a lot of time to

197
00:13:01,592 --> 00:13:05,312
process the request at 99.9%. So here we

198
00:13:05,328 --> 00:13:08,544
can debug like and like find

199
00:13:08,584 --> 00:13:12,280
the root cause for that. What would be the reason like for this much

200
00:13:12,312 --> 00:13:15,664
time of the request for responding and see like

201
00:13:15,704 --> 00:13:19,436
how many requests are being hit. What is this response code for that?

202
00:13:19,560 --> 00:13:23,404
Similarly, as we discussed for order data,

203
00:13:23,524 --> 00:13:26,836
we can see like post was the main culprit for the response

204
00:13:26,860 --> 00:13:31,484
time. Similarly, we can see the response

205
00:13:31,524 --> 00:13:35,060
codes and output. So here we can see like order data was

206
00:13:35,092 --> 00:13:38,884
the culprit. So we can see like DB was taking a lot of time.

207
00:13:38,924 --> 00:13:41,756
Like it took around 4.5 seconds. So we can see.

208
00:13:41,820 --> 00:13:45,904
And regarding the next peak,

209
00:13:46,024 --> 00:13:50,496
we will need to check with order func. So here, let's check with order func

210
00:13:50,600 --> 00:13:54,536
tracer. Also, we will add a trace exporter config

211
00:13:54,600 --> 00:13:57,696
equal to GoFr. So yeah, let's restart the

212
00:13:57,800 --> 00:14:01,112
services again. First we will restart the order

213
00:14:01,168 --> 00:14:06,488
data service showing

214
00:14:06,536 --> 00:14:10,280
these sales. Yeah, so now tracer

215
00:14:10,312 --> 00:14:12,924
is being exported. Let's start this service as well.

216
00:14:13,464 --> 00:14:17,192
So yeah, again, we will be making some requests on

217
00:14:17,208 --> 00:14:20,324
the services. Use jmeter again for that.

218
00:14:21,384 --> 00:14:25,112
Yeah, and now since we have these trace ids, correlation ids,

219
00:14:25,208 --> 00:14:29,048
so we can use any one of that to see the traces at the

220
00:14:29,096 --> 00:14:32,804
tracer dot gofr dot dev. Let me just copy paste it.

221
00:14:33,304 --> 00:14:36,800
Let's see, like first of all, let's see the response of

222
00:14:36,992 --> 00:14:37,884
the service.

223
00:14:44,244 --> 00:14:47,980
So yeah, as we discussed further, like we have a health check

224
00:14:48,012 --> 00:14:51,428
endpoint. It shows like the downstream service order data is up.

225
00:14:51,596 --> 00:14:55,024
Now we can see the tracer UI.

226
00:14:55,604 --> 00:14:59,476
We just need to go to this URL, copy paste the tracer

227
00:14:59,580 --> 00:15:03,860
id, and we can see like this

228
00:15:03,892 --> 00:15:07,882
type of request we hid from where it circulates, like from where it went,

229
00:15:08,028 --> 00:15:12,034
all the details like method schema, status code.

230
00:15:14,094 --> 00:15:17,262
Thank you for joining in.

231
00:15:17,358 --> 00:15:20,594
You can explore all the content being used on this

232
00:15:20,934 --> 00:15:24,214
given GitHub repo. Also do visit GoFr dot

233
00:15:24,294 --> 00:15:27,334
dev and give us a star to support us. Thank you.

