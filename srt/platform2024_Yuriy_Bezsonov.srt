1
00:00:14,120 --> 00:00:17,980
My name is Yuri Besonov, and I am
senior solution architect at AWS.

2
00:00:18,430 --> 00:00:22,520
In my role, I work with the customers
and AWS partners on solutions

3
00:00:22,529 --> 00:00:24,290
related to container technologies.

4
00:00:24,830 --> 00:00:27,640
In today's talk, I am going
to walk you through a journey.

5
00:00:27,945 --> 00:00:32,055
Which we see customers are facing
when choosing to build their own

6
00:00:32,095 --> 00:00:37,114
internal development platform or
internal delivery platform and expose

7
00:00:37,144 --> 00:00:38,985
internal APIs on top of Kubernetes.

8
00:00:41,004 --> 00:00:44,245
We will discuss today the different
application delivery streams,

9
00:00:44,415 --> 00:00:48,135
we see out of the air what are
infrastructure controllers and

10
00:00:48,135 --> 00:00:51,504
how you can use them to accelerate
delivery time of your application.

11
00:00:51,754 --> 00:00:55,195
We also define what are
compositions in Kubernetes and

12
00:00:55,195 --> 00:00:56,964
review the tooling that support it.

13
00:00:57,264 --> 00:01:00,475
We are going to finish with an
overview of a solution that you

14
00:01:00,475 --> 00:01:02,674
can try in your own environment.

15
00:01:03,154 --> 00:01:07,794
But before we talk about delivery
streams, let's define a problem statement.

16
00:01:08,015 --> 00:01:10,854
Let's set up the context
with a sample application.

17
00:01:11,950 --> 00:01:16,860
Our sample application is taken
from EKS workshop and it is a good

18
00:01:16,860 --> 00:01:21,260
representation of an application that
consists of multiple sub applications,

19
00:01:21,480 --> 00:01:23,349
which have one or more components.

20
00:01:23,950 --> 00:01:28,109
Those components can be runtime
components, for example, Kubernetes

21
00:01:28,380 --> 00:01:34,300
pod deployment services, ingresses,
which lives live inside the cluster,

22
00:01:34,330 --> 00:01:37,669
inside the Kubernetes cluster,
and also infrastructure resources.

23
00:01:37,669 --> 00:01:42,595
Thank you such as AWS services in this
case, which lives outside of the cluster,

24
00:01:42,615 --> 00:01:48,345
for example, Amazon DynamoDB, Amazon MQ,
or Amazon Relational Database Services.

25
00:01:48,774 --> 00:01:52,404
When deploying an application, we need
to consider not only deploying its

26
00:01:52,405 --> 00:01:54,794
runtime, but also its backend services.

27
00:01:55,355 --> 00:01:59,975
And in this case, we need to take care
about the components which live inside the

28
00:01:59,975 --> 00:02:02,554
cluster and outside of Kubernetes cluster.

29
00:02:02,914 --> 00:02:06,425
In the next slide, I will walk you
through some of the delivery streams

30
00:02:06,425 --> 00:02:10,655
we, we see out of there, some of the
delivery methods and the time it takes

31
00:02:10,655 --> 00:02:13,055
to deploy an application in each stream.

32
00:02:14,704 --> 00:02:18,845
The first stream is when developers
simply deploy a run times and

33
00:02:18,845 --> 00:02:20,584
configuration to Kubernetes.

34
00:02:20,825 --> 00:02:24,995
Usually the components Kubernetes
configuration and its runtime group.

35
00:02:25,105 --> 00:02:27,134
together in a single repository.

36
00:02:27,434 --> 00:02:31,515
Kubernetes supports the creation of and
management of external networking and

37
00:02:31,515 --> 00:02:33,924
storage services since the very beginning.

38
00:02:34,224 --> 00:02:38,994
And those AWS response resources, which
corresponds to those services, can

39
00:02:38,994 --> 00:02:43,764
be managed in a single stream as part
of application runtime configuration.

40
00:02:43,765 --> 00:02:48,684
For example, Kubernetes manifests
such as services, ingress, and

41
00:02:48,694 --> 00:02:50,854
persistent volumes can in turn.

42
00:02:51,144 --> 00:02:55,605
Deploy application load balancer, network
load balancer, and persistent load

43
00:02:55,635 --> 00:02:58,125
balancer using the Kubernetes constructs.

44
00:02:58,565 --> 00:03:01,715
These delivery streams usually
take minutes to complete.

45
00:03:02,525 --> 00:03:06,445
The second stream, more complicated
stream, is usually happens when

46
00:03:06,475 --> 00:03:08,605
additional back end services are needed.

47
00:03:08,925 --> 00:03:13,105
A pattern which we see is an
infrastructure definition repository that

48
00:03:13,105 --> 00:03:15,195
holds the entire organizational file.

49
00:03:15,475 --> 00:03:19,525
Infrastructure as a code definition,
for example, Amazon DynamoDB,

50
00:03:19,585 --> 00:03:21,865
RDS, S3, and other components.

51
00:03:22,855 --> 00:03:26,745
An infrastructure, DevOps, or platform
team, you may have different names

52
00:03:26,745 --> 00:03:30,615
for those teams, needs to approve the
pull request, which will trigger the

53
00:03:30,615 --> 00:03:33,805
creation of AWS services in AWS account.

54
00:03:34,355 --> 00:03:39,175
Since this stream includes handover
process from one team to another, these

55
00:03:39,175 --> 00:03:43,795
delivery streams can take sometimes
The last stream is the slowest one.

56
00:03:44,155 --> 00:03:47,835
It involves some traditional ticketing
system to provision resources.

57
00:03:48,475 --> 00:03:52,185
The database team here is just an
example, it can be any other team.

58
00:03:52,235 --> 00:03:56,655
But the pattern here is that the
developers have no way to influence or

59
00:03:56,655 --> 00:04:01,265
trigger a change on the infrastructure
service side and they have to wait

60
00:04:01,675 --> 00:04:06,525
for other team to proceed their
request to fulfill their tickets.

61
00:04:07,995 --> 00:04:13,215
And the question that we ask ourselves
and developers often ask ourselves, how

62
00:04:13,215 --> 00:04:15,955
we can make the deployment process faster?

63
00:04:16,105 --> 00:04:20,475
How we can improve turnaround from
changing the line of code of the

64
00:04:20,475 --> 00:04:24,545
application to deployed infrastructure
and running application in the cloud?

65
00:04:25,370 --> 00:04:29,830
And before diving into techniques and
practices of achieving this, of improving

66
00:04:29,830 --> 00:04:34,400
this process, let's set the requirement
of each team, because they are different.

67
00:04:34,760 --> 00:04:38,510
From a platform team perspective,
they want to build consistent

68
00:04:38,780 --> 00:04:42,490
deployment process, while
enforcing organizational standards.

69
00:04:42,760 --> 00:04:46,080
They need secure environment, they need
compliant environment, and they need

70
00:04:46,080 --> 00:04:50,380
observability, because they may have
many environments for various teams.

71
00:04:50,910 --> 00:04:55,015
Application developers, on the other
hand, want to have full ownership of

72
00:04:55,175 --> 00:04:59,815
their application components, including
its backend infrastructure services, and

73
00:04:59,815 --> 00:05:04,515
they would like to have it in the easy
way, and they would like to have it fast.

74
00:05:05,405 --> 00:05:08,805
In the infrastructure as a code
domain, we already saw a definition

75
00:05:08,825 --> 00:05:12,015
of clear boundaries and ownership
when provisioning resources.

76
00:05:12,385 --> 00:05:17,835
This quote is taken from AWS Cloud
Deployment Kit CDK Best Practices

77
00:05:17,835 --> 00:05:23,065
Guide, and it calls out that whoever
that develop and manage their own time.

78
00:05:23,580 --> 00:05:25,590
should also manage the infrastructure.

79
00:05:25,780 --> 00:05:29,360
That's why infrastructure and
runtime code should live in the same

80
00:05:29,360 --> 00:05:30,850
package, in the same repository.

81
00:05:32,410 --> 00:05:36,810
When you scan this QR code, you
will it will take you to AWS CDK

82
00:05:36,820 --> 00:05:40,530
best practices guide, where you can
read the details of that approach.

83
00:05:41,190 --> 00:05:47,180
And by applying this practice, we can
see now that a developer managed both

84
00:05:47,200 --> 00:05:50,930
the runtime and the infrastructure
definition in the same code repository.

85
00:05:51,460 --> 00:05:56,725
Once code is being merged, Two streams
are triggered automatically, one to

86
00:05:56,725 --> 00:06:01,635
Kubernetes, to the cluster, creating
the runtime deployment spot and so on.

87
00:06:02,065 --> 00:06:06,195
And the existing back end services
we discussed previously, like load

88
00:06:06,195 --> 00:06:10,475
balancer or persistent volume, which
can be deployed from the cluster.

89
00:06:10,705 --> 00:06:14,405
The second stream goes directly
to an infrastructure as a code

90
00:06:14,435 --> 00:06:17,225
tooling, whether it's AWS CDK.

91
00:06:17,495 --> 00:06:20,655
which generate a CloudFormation
template or Terraform.

92
00:06:20,975 --> 00:06:24,395
And in turn, these tools create
the needed infrastructure.

93
00:06:24,675 --> 00:06:29,025
Applying this practice reduces the
deployment time from hours to minutes.

94
00:06:30,185 --> 00:06:34,595
Focusing on Kubernetes again, we can build
a similar process using the well known

95
00:06:34,625 --> 00:06:39,555
operators framework to build and maintain
external services from within Kubernetes.

96
00:06:41,355 --> 00:06:45,215
It's true that operators frameworks
can be used to deploy and maintain

97
00:06:45,215 --> 00:06:49,975
external systems to Kubernetes,
but writing your own operator, it

98
00:06:49,975 --> 00:06:54,785
is rather complex and what I would
call undifferentiated heavy lifting.

99
00:06:55,415 --> 00:07:00,355
This is where pre built infrastructure
controllers can help us significantly

100
00:07:00,355 --> 00:07:02,125
speed up implementation time.

101
00:07:02,705 --> 00:07:06,375
Those infrastructure controllers are
pre built controllers that allow you

102
00:07:06,375 --> 00:07:08,575
to manage cloud services using the.

103
00:07:09,195 --> 00:07:13,945
your known Kubernetes API like
you do it with your runtime.

104
00:07:14,645 --> 00:07:19,365
It allows you to create your own
platform API on top of Kubernetes and

105
00:07:19,375 --> 00:07:24,325
have a declarative way, a declarative
infrastructure configuration which would

106
00:07:24,325 --> 00:07:29,935
help you leverage the Kubernetes ecosystem
to provision external resources as well

107
00:07:29,935 --> 00:07:31,885
as internal resources in the cluster.

108
00:07:32,970 --> 00:07:38,100
Two of the main tools available now
are AWS controller for Kubernetes

109
00:07:38,190 --> 00:07:40,200
insured, a CK, and cross plane.

110
00:07:40,900 --> 00:07:43,270
A CK is developed by AWS.

111
00:07:43,480 --> 00:07:49,050
It enables the management of variety
of AWS resources, AWS services, and

112
00:07:49,050 --> 00:07:54,030
it is supported by AWS cross plane
is A-C-N-C-F of pet Source project

113
00:07:54,240 --> 00:07:58,950
with an extensible framework, and
hence a broad community around it.

114
00:08:00,365 --> 00:08:04,885
Returning to our previous
diagram, we can see how those

115
00:08:04,885 --> 00:08:08,865
tools can help us to provision
the application backing services.

116
00:08:09,315 --> 00:08:14,785
At that point, developers might ask
if that means that they need to have

117
00:08:14,815 --> 00:08:18,765
extensible knowledge around infrastructure
configuration, and need to know how to

118
00:08:18,785 --> 00:08:23,775
deploy those various cloud services, how
to combine them together in the right way.

119
00:08:24,685 --> 00:08:26,875
And, No, it's not necessary.

120
00:08:27,135 --> 00:08:29,125
Let's have a look at this example.

121
00:08:29,315 --> 00:08:33,085
On the bottom, developers simply
request the database instances.

122
00:08:33,465 --> 00:08:37,915
It doesn't really matter which
instances the developers need database.

123
00:08:38,155 --> 00:08:40,735
Of course, after that, they
have a responsibility to

124
00:08:40,735 --> 00:08:42,255
configure it upon creation.

125
00:08:42,505 --> 00:08:46,175
ensure it is running and being able
to modify it when necessary to have

126
00:08:46,175 --> 00:08:48,435
control over that database instance.

127
00:08:48,995 --> 00:08:53,965
However, the platform team might
decide to have different implementation

128
00:08:53,975 --> 00:08:59,295
depends on when this instance run in
cloud or on premise and abstract the

129
00:08:59,535 --> 00:09:02,815
implementation details from the developer.

130
00:09:03,225 --> 00:09:07,715
In our example, we see that the platform
team can decide to implement this database

131
00:09:07,805 --> 00:09:10,165
instance on premise using Apple's Grail.

132
00:09:10,425 --> 00:09:14,235
Scale l database and permit
use instance for observability.

133
00:09:15,175 --> 00:09:18,505
On the other hand, on AWS,
they want to leverage.

134
00:09:18,925 --> 00:09:20,635
Im for identification.

135
00:09:20,755 --> 00:09:24,805
Amazon, RDS for database and Amazon
Cloud watch for observability

136
00:09:24,985 --> 00:09:29,245
and use more managed services
to reduce operational overhead.

137
00:09:29,545 --> 00:09:33,855
This method is usually called a
composition, which means an obstruction

138
00:09:33,855 --> 00:09:39,225
of the underlying implementation
details by providing simple set of API.

139
00:09:40,085 --> 00:09:43,595
Going back to infrastructure as a
code, we already have this capability

140
00:09:43,635 --> 00:09:47,925
of building abstraction of different
implementations while providing clear

141
00:09:47,955 --> 00:09:50,165
interfaces on how to consume this.

142
00:09:50,645 --> 00:09:54,865
And as you can see in this slide, these
quotes can be taken from the documentation

143
00:09:54,865 --> 00:09:59,995
side of AWS CDK and HashiCorp
Terraform and describe exactly that.

144
00:10:00,195 --> 00:10:04,165
Composition is the key pattern
for defining high level,

145
00:10:04,245 --> 00:10:06,585
Abstractions through construct.

146
00:10:06,765 --> 00:10:10,425
In AWS CDK we even call it
the same way, a composition.

147
00:10:11,855 --> 00:10:15,915
Going back to the previous diagram,
we should know how we would use

148
00:10:15,935 --> 00:10:20,455
infrastructure as a code tooling with
composition to abstract the implementation

149
00:10:20,455 --> 00:10:22,845
detail of our database instance.

150
00:10:23,815 --> 00:10:26,655
But how Kubernetes?

151
00:10:28,290 --> 00:10:33,040
The CNCF Application Delivery Workgroup
published the platform whitepaper, calling

152
00:10:33,100 --> 00:10:37,540
out two open source projects available
now that can help with compositions.

153
00:10:37,810 --> 00:10:40,620
Those projects are Kubela and Crossplane.

154
00:10:40,930 --> 00:10:46,260
Kubela is a software delivery platform
that implements an open application model.

155
00:10:46,490 --> 00:10:49,740
This model focuses on building
applications rather than

156
00:10:50,350 --> 00:10:52,360
configuring Kubernetes objects
and can be more flexible.

157
00:10:52,370 --> 00:10:54,840
More natural, more native for developers.

158
00:10:55,910 --> 00:10:59,250
Crossplane is the same tool that we
discussed previously, but this time

159
00:10:59,380 --> 00:11:03,080
it is about the capability to build
platform on top of Kubernetes, as well

160
00:11:03,090 --> 00:11:06,200
as providing infrastructure controllers.

161
00:11:07,280 --> 00:11:11,490
Another advantage of using Kubernetes
API to provision AWS resources.

162
00:11:12,045 --> 00:11:15,705
Is that you can leverage the extensive
Kubernetes ecosystem tooling to

163
00:11:15,745 --> 00:11:19,365
package, deploy, and validate
your infrastructure definitions.

164
00:11:20,505 --> 00:11:24,775
The same way like you would use it
with runtime configuration with your

165
00:11:24,775 --> 00:11:26,715
manifest, deployment, and ports.

166
00:11:27,145 --> 00:11:31,675
A small example can be using Helm
or CDK8s for packaging components.

167
00:11:32,035 --> 00:11:37,155
Argo CD or Flux for GitOps to reconcile
the state of repository with a state

168
00:11:37,155 --> 00:11:38,985
of the cluster and infrastructure.

169
00:11:39,225 --> 00:11:49,955
Kiverno open policy agent for po I'm
going to show you how to use it in

170
00:11:49,975 --> 00:11:54,055
practice, how to use composition and
infrastructure controllers together.

171
00:11:54,265 --> 00:12:00,175
We at AWS built a solution reference for
managing AWS services using infrastructure

172
00:12:00,175 --> 00:12:02,185
controllers through compositions.

173
00:12:03,135 --> 00:12:06,585
In this solution, we demonstrate
how to provision Amazon EKS

174
00:12:06,605 --> 00:12:10,155
cluster using compositions and
infrastructure controllers.

175
00:12:10,355 --> 00:12:12,945
Yes, you can even provision
the cluster itself.

176
00:12:13,140 --> 00:12:19,030
With with the help of compositions, once
a platform team adds a cluster composition

177
00:12:19,030 --> 00:12:24,130
manifests to the repository, the GitHub
student reconcile the composition request

178
00:12:24,460 --> 00:12:29,920
and which in turns triggers the creation
of a cluster with all the needed tooling

179
00:12:29,920 --> 00:12:34,640
deployed to that cluster you have
cluster with all the necessary components

180
00:12:34,640 --> 00:12:37,580
which allow you to do next step.

181
00:12:38,325 --> 00:12:42,765
The solution also describes an
application onboarding PO process where

182
00:12:43,195 --> 00:12:47,965
a developer commits its runtime code
and infrastructure configuration to the

183
00:12:47,965 --> 00:12:50,275
application specific git repository.

184
00:12:51,225 --> 00:12:54,485
After that developer creates
a pull request to centralized

185
00:12:54,485 --> 00:12:58,930
repository, so the cluster GitHubs
tooling will start reconcile the

186
00:12:58,930 --> 00:13:00,970
application specific repository.

187
00:13:01,520 --> 00:13:03,860
Once the platform team approves the pr.

188
00:13:04,870 --> 00:13:09,640
The GitOps tooling starts the
reconciliation of application repository.

189
00:13:10,170 --> 00:13:14,020
From there, the cluster infrastructure
controller tooling will provision

190
00:13:14,060 --> 00:13:17,990
the relevant AWS resources
for that specific application.

191
00:13:19,125 --> 00:13:25,375
It will create a complete life cycle from
the written line of code to the deployed

192
00:13:25,375 --> 00:13:30,365
application with all of the required
infrastructure and solution components.

193
00:13:32,305 --> 00:13:37,495
The solution itself is covered in the
series of blog posts and have a detailed

194
00:13:37,505 --> 00:13:39,445
sample code to get started with.

195
00:13:39,635 --> 00:13:43,485
If you scan this QR code, you will
get additional information and

196
00:13:43,485 --> 00:13:47,915
you will be able to try to the
solution in your own AWS account.

197
00:13:48,895 --> 00:13:54,462
To summarize what we learned today, we saw
how grouping runtime and infrastructure

198
00:13:54,462 --> 00:13:57,445
defines clear responsibility
boundaries, how infrastructure

199
00:13:57,445 --> 00:14:02,525
controllers extend Kubernetes
capabilities to provision AWS services.

200
00:14:02,725 --> 00:14:07,385
We also seen that Kubernetes
API can enable standardization.

201
00:14:07,665 --> 00:14:12,070
This allowed us to And we will leverage
the Kubernetes ecosystem tooling,

202
00:14:12,240 --> 00:14:17,270
especially DDoS for provisioning
not only Kubernetes resources,

203
00:14:17,270 --> 00:14:19,550
but also infrastructure resources.

204
00:14:20,150 --> 00:14:22,560
With that, I would like to say thank you.

205
00:14:22,730 --> 00:14:26,890
I hope you enjoyed the session
and please feel free to reach out

206
00:14:26,890 --> 00:14:30,460
on LinkedIn and have a discussion
about anything related to platforms,

207
00:14:30,460 --> 00:14:32,390
containers, and architectures.

208
00:14:32,700 --> 00:14:36,820
And I would really appreciate if
you spent one minute and answer on

209
00:14:36,820 --> 00:14:38,645
a short survey about the sessions.

210
00:14:38,915 --> 00:14:40,965
Your feedback is very valuable.

211
00:14:41,175 --> 00:14:41,765
Thank you.

