1
00:00:14,240 --> 00:00:14,660
All right.

2
00:00:15,415 --> 00:00:21,194
Before we dive into the topic, so
let's quickly revisit the problem.

3
00:00:21,904 --> 00:00:27,405
You have a groundbreaking idea for your
new application, and you have wisely

4
00:00:27,415 --> 00:00:30,074
chosen to use container for deployment.

5
00:00:30,794 --> 00:00:36,525
But the challenge remains, how do you
effectively run this container on AWS?

6
00:00:37,805 --> 00:00:41,995
Hi, my name is Chakri Thipsupha,
a solution architect from AWS.

7
00:00:42,665 --> 00:00:46,104
And today I will walk you
through some of the ways to run

8
00:00:46,104 --> 00:00:48,925
containers on our cloud platform.

9
00:00:49,394 --> 00:00:50,944
So let's explore the options.

10
00:00:51,644 --> 00:00:57,275
Considering that nearly 80 percent of
all cloud containers run on AWS today.

11
00:00:58,015 --> 00:01:03,355
It's clearly that AWS is a platform of
choice when it comes to containerization.

12
00:01:03,775 --> 00:01:08,824
But why customers select us for
hosting their container workloads then?

13
00:01:09,985 --> 00:01:13,674
It is, that is mainly
because, AWS makes it easy.

14
00:01:13,854 --> 00:01:19,524
Easier to build container ecosystem
by offering more than 34 ways to run

15
00:01:19,524 --> 00:01:23,744
container in the cloud, providing
flexibility to suit database

16
00:01:24,194 --> 00:01:25,904
requirements from our customer.

17
00:01:26,864 --> 00:01:33,184
And these are some of the key services
that you can build, you can deploy,

18
00:01:33,194 --> 00:01:38,454
and also manage your containerized
application with ease and efficiency.

19
00:01:39,174 --> 00:01:42,964
I would like to divide this
service into three layers.

20
00:01:43,629 --> 00:01:45,789
So starting from the first one.

21
00:01:46,029 --> 00:01:48,879
So this one is the image repository.

22
00:01:49,509 --> 00:01:54,129
we have Amazon Elastic Container
Logistic, or Amazon ECR.

23
00:01:54,759 --> 00:01:58,739
you can upload or push
your container, image here.

24
00:01:59,129 --> 00:02:03,629
the same time you can also scan it,
on push or so, or you can scan it.

25
00:02:03,709 --> 00:02:08,679
A pretty good period, audibly as
well, like every week or every month,

26
00:02:09,709 --> 00:02:14,489
you can keep track of the version
here for your container image.

27
00:02:15,129 --> 00:02:20,864
And after that, you already have your
container, in image inside the cloud.

28
00:02:21,334 --> 00:02:23,784
Then you need to choose the orchestrator.

29
00:02:24,454 --> 00:02:28,784
So here I include some of the
options, that you can choose from.

30
00:02:29,294 --> 00:02:31,544
we have Amazon Elastic Container Service.

31
00:02:32,504 --> 00:02:37,424
We have, Amazon, Elastic App Kubernetes
Service, and also AWS AppRunner.

32
00:02:37,944 --> 00:02:41,654
So we also have some kind of,
third party, orchestrator as well.

33
00:02:41,864 --> 00:02:42,944
For example, Red Hat.

34
00:02:43,264 --> 00:02:46,214
But today we are going to
explore these three options.

35
00:02:46,215 --> 00:02:46,299
Bye bye.

36
00:02:47,179 --> 00:02:52,499
And then when you select the office
data that will be covered later, your

37
00:02:52,509 --> 00:02:54,089
container needs to run somewhere, right?

38
00:02:54,489 --> 00:02:56,779
so that is the layer of the compute.

39
00:02:57,389 --> 00:03:01,600
you have the choice to run it on
Fargate, which is the serverless option.

40
00:03:01,959 --> 00:03:05,309
And also another option
to run is on EC2 instance.

41
00:03:05,840 --> 00:03:09,769
So these are the three main
categories of the service that

42
00:03:09,780 --> 00:03:11,079
we are going to cover today.

43
00:03:13,930 --> 00:03:19,330
Before we dive deeper into those
services, I would want to pause a

44
00:03:19,330 --> 00:03:24,400
little bit and share about the shared
responsibility model on Airbus.

45
00:03:25,330 --> 00:03:28,190
Some of you might have
heard about this before.

46
00:03:28,765 --> 00:03:35,464
the key point is that, no matter what
AWS service you use, the availability

47
00:03:35,534 --> 00:03:40,914
and also the security posture of your
application is the joint, responsibility

48
00:03:40,954 --> 00:03:42,894
between you, the customer and AWS.

49
00:03:43,594 --> 00:03:44,344
us AWS.

50
00:03:44,684 --> 00:03:50,714
So they're going to be part of the
stack that we own responsibility for,

51
00:03:51,104 --> 00:03:56,094
and they will be part of the stack that
you will own the responsibility for.

52
00:03:56,864 --> 00:04:02,004
We are going to use this lens of shared
responsibility to go through each of

53
00:04:02,004 --> 00:04:04,164
the service that I mentioned last slide.

54
00:04:06,574 --> 00:04:09,134
this is the early days
of container on AWS.

55
00:04:09,504 --> 00:04:15,154
Around 2013, containers were starting
to become more and more popular.

56
00:04:15,184 --> 00:04:20,724
And we saw customers using EC2
instance to install container runtime

57
00:04:20,734 --> 00:04:23,284
like Docker to run web applications.

58
00:04:24,044 --> 00:04:26,914
So with one instance, it's totally fine.

59
00:04:27,944 --> 00:04:32,624
But how about with hundred
or, thousand instances?

60
00:04:33,139 --> 00:04:38,419
Customer also started to use,
Kubernetes or Mesos to orchestrate

61
00:04:38,539 --> 00:04:43,249
their workload, to maintain their own
control plane in separate, EC2 instance.

62
00:04:44,569 --> 00:04:47,899
So that was the first
opportunity that we spotted.

63
00:04:48,780 --> 00:04:54,610
It just felt so wrong that the customer
have to run more instance to just

64
00:04:54,650 --> 00:04:57,030
manage their existing, instance here.

65
00:04:59,220 --> 00:05:00,910
So that's why in 2015.

66
00:05:02,915 --> 00:05:09,945
we have ECS, we basically move the
container orchestrator down here to

67
00:05:11,085 --> 00:05:16,845
AWS side of responsibility and then
use that container orchestrator.

68
00:05:18,010 --> 00:05:25,019
To communicate with the EC2 instance
via the agent, but, you still need

69
00:05:25,020 --> 00:05:30,000
to own a lot of things, of course,
including load balancer, including,

70
00:05:30,000 --> 00:05:36,309
auto scaling algorithm, and also
CICD pipeline in both, CICD pipeline

71
00:05:36,330 --> 00:05:41,280
for your container image, and also
CICD pipeline for your application.

72
00:05:42,659 --> 00:05:47,560
So this was still a lot of stuff
that were in the customer side of

73
00:05:47,810 --> 00:05:52,779
responsibility, stability, not to
mention OS patching, runtime patching.

74
00:05:52,780 --> 00:05:58,360
agent patching for someone who just
wants to run the web application

75
00:05:58,380 --> 00:06:00,380
is just still too much for them.

76
00:06:01,730 --> 00:06:10,659
That's why, in 2017, so we moved the line
of responsibility higher with Fargate.

77
00:06:11,590 --> 00:06:13,370
So here we move the line.

78
00:06:14,400 --> 00:06:18,969
so Fargate is address Fargate is
the serverless option, that you

79
00:06:18,969 --> 00:06:21,690
can use to run your container.

80
00:06:22,330 --> 00:06:27,299
So it means that if you want to run
container, you don't have to ever

81
00:06:27,299 --> 00:06:29,650
launch an EC2 instance anymore.

82
00:06:31,119 --> 00:06:33,174
we took responsibility for.

83
00:06:33,365 --> 00:06:40,265
Uh, underlying tasks like patching and, OS
patching, agent patching and everything.

84
00:06:41,085 --> 00:06:44,935
You as the customer don't need to
worry about instance layer at all.

85
00:06:45,414 --> 00:06:49,895
But there are still some of the tasks
that, still belong to you, the customer.

86
00:06:50,495 --> 00:06:55,345
So yeah, you can guess load balancer,
auto scaling, and both CI CD pipeline

87
00:06:55,355 --> 00:06:57,915
for container and for, application code.

88
00:06:58,915 --> 00:07:06,425
The SAM also apply for, elastic Kubernetes
service, which we launched in 2018.

89
00:07:07,615 --> 00:07:12,023
For this one, we saw a lot of customers
run, Kubernetes, on the cloud.

90
00:07:12,223 --> 00:07:16,073
self managed Kubernetes, workload
in their own EC2 instance.

91
00:07:16,523 --> 00:07:21,643
That's why we also would like to have
a Kubernetes control plane that will

92
00:07:21,683 --> 00:07:27,223
take care of, the availability or,
and also upgrading of the version.

93
00:07:27,673 --> 00:07:30,713
as well in AWS side of responsibility.

94
00:07:31,483 --> 00:07:35,193
And, for EKS, it also supports EC2.

95
00:07:35,723 --> 00:07:39,993
And it also can support Fargate
as well, if you would like to

96
00:07:39,993 --> 00:07:41,853
have a serverless offering.

97
00:07:43,423 --> 00:07:52,073
But now, it came to the point that, how we
would like to make it more easier for you.

98
00:07:53,343 --> 00:07:54,223
You can guess, right?

99
00:07:54,793 --> 00:07:59,093
in 2021, we can move
the line higher again.

100
00:07:59,953 --> 00:08:04,623
So here you don't need to take
care of your container at all.

101
00:08:04,843 --> 00:08:07,273
You don't need to take
care of the load balancer.

102
00:08:07,303 --> 00:08:11,263
You don't need to take care of
CICD pipeline for your, code or

103
00:08:11,273 --> 00:08:13,583
for your, container image at all.

104
00:08:14,903 --> 00:08:16,663
Even auto scaling, so you can see.

105
00:08:17,413 --> 00:08:24,073
So we launched AWS AppRunner, and, so you
just need to take care of your application

106
00:08:24,073 --> 00:08:29,613
source codes, and, We can see how does
it work when it comes to AWS AppRender.

107
00:08:30,153 --> 00:08:30,653
So let's see.

108
00:08:32,973 --> 00:08:40,413
So this is how, the experience of
the user for AppRender looks like.

109
00:08:41,748 --> 00:08:44,308
We can start from the
web development team.

110
00:08:44,568 --> 00:08:48,938
Either they can have the source
code in GitHub, or they already

111
00:08:48,948 --> 00:08:54,218
have the image and put it into
ECR, which is the image repository.

112
00:08:54,288 --> 00:08:55,168
We have two choices.

113
00:08:55,798 --> 00:09:03,058
And then with the right permission, So
you allow to, the app runner to load

114
00:09:03,058 --> 00:09:09,648
the source code from GitHub or load the,
image from container image repository.

115
00:09:09,798 --> 00:09:11,218
It's a repository, right?

116
00:09:11,338 --> 00:09:12,078
Like ECR.

117
00:09:13,398 --> 00:09:18,978
And it's just one simple API call
that you can make to, create a

118
00:09:18,978 --> 00:09:21,198
service inside AWS AppRunner.

119
00:09:22,238 --> 00:09:26,238
after that, It will take a while,
like 7 to 10 minutes, depending

120
00:09:26,238 --> 00:09:31,318
on your size of the source code
and also the size of the image.

121
00:09:31,898 --> 00:09:34,618
It will return the URL.

122
00:09:34,968 --> 00:09:41,608
So this URL can be internal use or it can
be internet facing application as well.

123
00:09:42,098 --> 00:09:44,888
depending on the option that you selected.

124
00:09:46,518 --> 00:09:49,958
You won't see the instance or file gate.

125
00:09:49,958 --> 00:09:51,508
You won't see anything.

126
00:09:51,823 --> 00:09:56,733
It will just return the URL and
then the client can make the

127
00:09:56,773 --> 00:09:58,713
HTTP request to that endpoint.

128
00:10:00,573 --> 00:10:04,513
So let's see it in action after this.

129
00:10:05,713 --> 00:10:05,933
Yep.

130
00:10:06,163 --> 00:10:13,503
So I will just give an example of the
demo, how we can have an image and then

131
00:10:14,403 --> 00:10:18,503
create the AWS AppRunner application.

132
00:10:18,933 --> 00:10:20,183
So let's see in action.

133
00:10:22,613 --> 00:10:27,043
So here that we have the
doctor image already.

134
00:10:27,913 --> 00:10:30,623
So here we have one image.

135
00:10:30,883 --> 00:10:32,483
I already tagged it.

136
00:10:33,723 --> 00:10:36,023
Here the size is 300 megabytes.

137
00:10:36,573 --> 00:10:38,373
It's my web application.

138
00:10:39,628 --> 00:10:46,328
And then we would like to push this one
to ECR, which is the image repository.

139
00:10:46,588 --> 00:10:51,048
If you can remember the first layer
that I mentioned, I already create

140
00:10:51,058 --> 00:10:53,988
the private, repository here.

141
00:10:54,038 --> 00:10:55,288
the name is, Hotel.

142
00:10:56,498 --> 00:11:00,818
And you can also see the command,
how to push it, from your local

143
00:11:00,818 --> 00:11:03,078
device or from your local computer.

144
00:11:03,618 --> 00:11:08,658
Here, I just copy the
instruction here to push my.

145
00:11:09,503 --> 00:11:10,933
Yeah, image to ECR.

146
00:11:11,833 --> 00:11:13,953
Just copy here because
I already tagged it.

147
00:11:14,563 --> 00:11:15,953
And login to ECR.

148
00:11:17,063 --> 00:11:17,413
yep.

149
00:11:18,303 --> 00:11:20,963
And, yeah, I already pushed that.

150
00:11:21,033 --> 00:11:22,923
Let's check inside the ECR.

151
00:11:24,483 --> 00:11:26,663
So here, is the image that we put.

152
00:11:26,963 --> 00:11:29,953
And, so the version is the latest one.

153
00:11:30,343 --> 00:11:31,823
The size is 100 megabytes.

154
00:11:32,818 --> 00:11:37,578
now we can create the, service in app run.

155
00:11:37,638 --> 00:11:42,838
So this is app run and as I
mentioned that, we can either

156
00:11:42,838 --> 00:11:49,018
select from using the code from
repository in GitHub or from ECR.

157
00:11:49,238 --> 00:11:54,048
but now we are going to use
ECR and we can browse that is

158
00:11:54,048 --> 00:11:55,698
the hotel, if I'm not wrong.

159
00:11:55,818 --> 00:11:56,118
Yep.

160
00:11:56,468 --> 00:11:58,643
Hotel with the LA tag lettuce.

161
00:11:59,958 --> 00:12:04,068
And here you can also, need
to provide the credential.

162
00:12:04,638 --> 00:12:09,198
the IAM role that allows App Render
to download the, image from ECR.

163
00:12:10,128 --> 00:12:15,198
Specify the, name of the service
and also the size of your Fargate.

164
00:12:15,703 --> 00:12:20,653
so this one just go with how many CPU
and how many, how much of the ramp.

165
00:12:22,393 --> 00:12:25,553
and also the port here can
specify, which product you

166
00:12:25,553 --> 00:12:28,363
would like to open auto scaling.

167
00:12:28,393 --> 00:12:33,193
If you have more requests, it
will scale up from one instead to

168
00:12:33,253 --> 00:12:35,143
25 instead of five gate for you.

169
00:12:36,593 --> 00:12:38,113
And, for.

170
00:12:39,283 --> 00:12:40,023
networking.

171
00:12:40,683 --> 00:12:44,753
So you can choose either, public
endpoint or a private endpoint.

172
00:12:44,973 --> 00:12:49,513
You can like, configure in terms of
incoming and also outgoing as well.

173
00:12:51,083 --> 00:12:51,263
Yeah.

174
00:12:51,263 --> 00:12:52,523
And I think that's it.

175
00:12:52,783 --> 00:12:54,823
And you can click next.

176
00:12:56,078 --> 00:12:57,248
And also review here.

177
00:12:58,908 --> 00:12:59,508
So

178
00:13:01,538 --> 00:13:04,098
just take some time to create and deploy.

179
00:13:04,478 --> 00:13:07,548
So let's see, just create it.

180
00:13:08,148 --> 00:13:12,398
And it will take some time like 7
or to 10 minutes for in my case.

181
00:13:12,788 --> 00:13:16,408
So here we have the service and
the status is running already.

182
00:13:17,918 --> 00:13:23,518
So going into this, we would
like to see some logs down there.

183
00:13:24,168 --> 00:13:31,348
Here's the logs, showing that the app
runner just pulled the, image from ECR

184
00:13:31,348 --> 00:13:33,718
and then deploy it through the pipeline.

185
00:13:34,878 --> 00:13:37,488
the deployment ID here
is already successful.

186
00:13:38,618 --> 00:13:40,318
So what else?

187
00:13:40,508 --> 00:13:45,408
So something that we can configure later,
we can have, Connection to our database.

188
00:13:45,568 --> 00:13:51,668
We can have the connection to our
parameter store like SSM or a secret

189
00:13:51,668 --> 00:13:56,598
manager to store SQL username and
password or something like that.

190
00:13:57,138 --> 00:14:02,648
So here for the networking on outgoing
side, I would like to connect to my

191
00:14:02,708 --> 00:14:09,128
RDS instance that sit into another VPC.

192
00:14:09,808 --> 00:14:10,848
You can configure later.

193
00:14:12,363 --> 00:14:13,823
so let's test it out.

194
00:14:14,283 --> 00:14:16,113
So we have the UI already here.

195
00:14:16,253 --> 00:14:18,303
It can be custom later as well.

196
00:14:18,773 --> 00:14:20,583
So I just use the same one.

197
00:14:21,023 --> 00:14:23,703
And voila, my web application is working.

198
00:14:24,463 --> 00:14:27,703
this is the room management in my hotel.

199
00:14:27,713 --> 00:14:29,133
It's called Chakri Hotel.

200
00:14:29,538 --> 00:14:34,488
And we can list the room from our
RDS instance or database instance.

201
00:14:35,178 --> 00:14:36,098
And we have three rooms.

202
00:14:36,538 --> 00:14:37,438
Can we add some more?

203
00:14:37,638 --> 00:14:43,398
So here I would like to add a room in
room number four and the fourth floor.

204
00:14:44,058 --> 00:14:44,948
And we already added.

205
00:14:45,348 --> 00:14:48,108
So this one is right to the database.

206
00:14:48,583 --> 00:14:52,213
And you can see that, it's
already, be there and we can

207
00:14:52,223 --> 00:14:53,633
read from the database already.

208
00:14:54,153 --> 00:14:59,453
So you can see that it quite easy
to get going with, AppRender.

209
00:14:59,863 --> 00:15:04,833
And, you can explore other option
as well, like easy, ECS and EKS,

210
00:15:04,903 --> 00:15:06,343
depending on, your use case.

211
00:15:07,653 --> 00:15:16,558
So then, coming into how can we choose
from numbers of orchestrator then.

212
00:15:16,958 --> 00:15:23,438
So I have three main, criteria for you to
choose from and to be considered as well.

213
00:15:23,718 --> 00:15:29,268
So the first one is the, in terms
of the operational complexity and

214
00:15:29,268 --> 00:15:34,708
also the flexibility because these
two factors or these two criteria

215
00:15:35,088 --> 00:15:36,838
tend to get go the same way.

216
00:15:37,468 --> 00:15:42,598
So for AppRunner, you don't
really have any, complex

217
00:15:42,788 --> 00:15:44,768
operational complexity at all.

218
00:15:45,478 --> 00:15:49,818
It's quite low because you just have
your code and then upload it or, you

219
00:15:49,818 --> 00:15:53,868
have your container image and then
just click to create a service and then

220
00:15:54,318 --> 00:15:55,658
you have your application endpoint.

221
00:15:56,378 --> 00:16:01,658
But for ECS, you still have to manage
the infrastructure like Fargate.

222
00:16:01,978 --> 00:16:05,208
You need to still manage the CIC pipeline.

223
00:16:05,818 --> 00:16:11,458
the auto scaling and everything just
like EKS as well, you need to upgrading

224
00:16:11,458 --> 00:16:18,238
your OS, upgrading your, EC2 instance,
version of EKS, control plane as well.

225
00:16:19,568 --> 00:16:25,138
And the flexibility is quite high in
terms of EKS because, you can run all

226
00:16:25,178 --> 00:16:30,158
the open source or CNCF project, that
support Kubernetes, you can run it on EKS.

227
00:16:31,743 --> 00:16:35,403
So this is the first thing,
operational complexity and flexibility.

228
00:16:35,583 --> 00:16:36,703
It goes the same way.

229
00:16:37,923 --> 00:16:39,583
And then how about the scalability?

230
00:16:40,633 --> 00:16:47,843
So as you can see for app runner, you
can do automatically scale depending on

231
00:16:47,853 --> 00:16:51,413
the number of requests you can remember.

232
00:16:51,963 --> 00:16:59,793
But for ECS and EKS, you can scale
based on different metrics, like

233
00:16:59,803 --> 00:17:05,853
CPU utilization, memory utilization,
request count that comes into your

234
00:17:05,873 --> 00:17:07,723
load balancer, or other metrics.

235
00:17:08,293 --> 00:17:10,903
So you can scale based on a lot of things.

236
00:17:11,443 --> 00:17:15,953
So it gives you more flexibility
here for ECS and EKS.

237
00:17:17,543 --> 00:17:23,703
And the next one, how about a cost
optimization capability for app running?

238
00:17:23,743 --> 00:17:27,563
Unfortunately that you cannot
do much because, we take care

239
00:17:27,563 --> 00:17:29,033
of everything under the hood.

240
00:17:29,393 --> 00:17:34,498
We use ECS with Fargate to provide
the, AWS app runner, service, but for

241
00:17:34,498 --> 00:17:41,163
ECS and EKS, you can use the Reserve
instance, you can use saving plan.

242
00:17:41,253 --> 00:17:45,873
You can use, like auto scaling
to cover the cost optimization.

243
00:17:45,883 --> 00:17:53,253
You can use, graph on, which is the,
arm CBU based, to provide better price

244
00:17:53,253 --> 00:17:56,113
performance, compared to Xic architecture.

245
00:17:56,923 --> 00:18:00,873
So you can see that you can have
multiple criteria to choose, your

246
00:18:00,873 --> 00:18:02,693
orchestrated based on, use case.

247
00:18:02,793 --> 00:18:06,823
for example, if you would like to,
if you would like your workload to

248
00:18:06,823 --> 00:18:10,923
be portable between cloud, between,
Multiple cloud or on prem as well.

249
00:18:11,233 --> 00:18:17,473
So EKS may be a better option because
ECS is our proprietary orchestrator.

250
00:18:19,413 --> 00:18:23,993
So the rule of thumb is that,
always start your experiment with

251
00:18:23,993 --> 00:18:25,423
the highest abstraction first.

252
00:18:25,873 --> 00:18:29,433
and only go down to the
stack if you need to.

253
00:18:29,713 --> 00:18:33,253
So you can start do some
experiment from AppRunner.

254
00:18:33,293 --> 00:18:38,533
And then if it doesn't work, if you
would like to, control the scaling

255
00:18:38,543 --> 00:18:40,753
mechanism, then you move to ECS.

256
00:18:41,283 --> 00:18:45,773
And if you would like to run
a lot of CNCF, open source

257
00:18:45,793 --> 00:18:48,383
project, you can use EKS instead.

258
00:18:48,983 --> 00:18:50,033
So this is the rule of thumb.

259
00:18:52,693 --> 00:18:57,253
As we come to an end of my
presentation, it's clear that

260
00:18:57,513 --> 00:19:02,573
eService offers unique advantages
and also considerations to take in.

261
00:19:03,133 --> 00:19:08,733
So now I would like to leave you with
a question, which of these services

262
00:19:09,083 --> 00:19:14,383
align best with your organization goals
and needs for containerization on AWS?

263
00:19:15,273 --> 00:19:19,963
Your answer may not be immediate,
but exploring this option

264
00:19:19,973 --> 00:19:24,483
further could lead to valuable
insight for your cloud strategy.

265
00:19:25,173 --> 00:19:27,273
So thank you so much for your attention.

266
00:19:27,313 --> 00:19:31,033
And, yeah, so I welcome
any further discussion.

267
00:19:31,043 --> 00:19:36,823
You can reach out to me via LinkedIn
or yeah, you can just contact

268
00:19:36,823 --> 00:19:38,473
me and ask anything about AWS.

269
00:19:39,163 --> 00:19:39,883
Thank you so much, Dan.

