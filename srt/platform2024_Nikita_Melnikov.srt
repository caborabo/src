1
00:00:14,300 --> 00:00:16,050
My name is Nikita Melnikov.

2
00:00:16,660 --> 00:00:18,749
I am VP of engineering at Atlantic money.

3
00:00:19,329 --> 00:00:23,270
And today we will talk about
affordable currency, about financial

4
00:00:23,270 --> 00:00:26,119
systems, about its challenges.

5
00:00:26,494 --> 00:00:31,185
And how to use Acro model
to solve everything we need

6
00:00:31,635 --> 00:00:33,684
in this kind of systems.

7
00:00:34,175 --> 00:00:37,925
So about me as I've said before, I'm
VP of engineering at Atlantic money.

8
00:00:38,575 --> 00:00:41,684
Also I am Ex Syncop Bank
and Ex Syncop Investments.

9
00:00:42,064 --> 00:00:44,195
I have more than 10 years in FinTech.

10
00:00:44,555 --> 00:00:46,255
I was working on high load systems.

11
00:00:46,465 --> 00:00:49,405
We had more than 300,
000 requests per second.

12
00:00:49,845 --> 00:00:53,035
And also I love Scala,
Golang, Postgres and Kafka.

13
00:00:53,555 --> 00:00:54,175
Let's begin.

14
00:00:55,945 --> 00:00:57,945
Let's take a look on the agenda.

15
00:00:58,395 --> 00:01:00,325
We will cover few topics.

16
00:01:00,365 --> 00:01:05,005
We will go from the problem to
the solution that I propose.

17
00:01:05,535 --> 00:01:07,745
The problem is about
financial transactions and

18
00:01:07,745 --> 00:01:09,495
what problems could we have.

19
00:01:09,995 --> 00:01:13,485
After that we will shift to traditional
approach and their limitations.

20
00:01:14,435 --> 00:01:19,285
And we, of course, speak about
asynchronous processing, about

21
00:01:19,325 --> 00:01:23,405
Kafka, how to implement asynchronous
processing using Kafka, why do

22
00:01:23,405 --> 00:01:25,125
we need it, how it could help us.

23
00:01:25,595 --> 00:01:28,665
And the main topic is
AccuModel, of course.

24
00:01:29,215 --> 00:01:30,545
Let's start.

25
00:01:31,515 --> 00:01:33,855
So what is financial transaction?

26
00:01:33,935 --> 00:01:41,555
We will use our company as an example,
and we will review the standard

27
00:01:41,555 --> 00:01:46,745
process for our cases customer
can create a transfer in our app.

28
00:01:47,275 --> 00:01:53,105
So for example, you want to
send 100 to 90 euros to someone.

29
00:01:53,105 --> 00:01:54,875
You're creating the transfer in our app.

30
00:01:55,585 --> 00:02:02,835
You send 100 payment to our app and
we can send euros to your recipient.

31
00:02:04,275 --> 00:02:05,685
Let's simplify it a bit.

32
00:02:05,845 --> 00:02:08,295
So we are waiting for dollars.

33
00:02:08,585 --> 00:02:09,815
We run some checks.

34
00:02:10,825 --> 00:02:12,205
We send euros.

35
00:02:13,135 --> 00:02:14,015
Sounds simple, right?

36
00:02:14,065 --> 00:02:19,005
But in fact, what happens
in the real world?

37
00:02:19,895 --> 00:02:20,745
First of all.

38
00:02:21,970 --> 00:02:28,380
As we discussed before, customer creates
USD to Euro transfer system, weights

39
00:02:28,390 --> 00:02:30,410
for USD, the same as before, right?

40
00:02:31,450 --> 00:02:33,660
System writes the payment details.

41
00:02:33,740 --> 00:02:39,429
So we should know when we've got your
payment amount sender, recipient,

42
00:02:39,429 --> 00:02:43,539
your bank information and any
other information that we need.

43
00:02:44,549 --> 00:02:45,769
After that, system runs on checks.

44
00:02:46,734 --> 00:02:47,554
What checks?

45
00:02:47,924 --> 00:02:51,374
For example, we must check sanction lists.

46
00:02:51,784 --> 00:02:55,454
We should check your payment
in our anti fraud system.

47
00:02:55,994 --> 00:02:58,374
We should check your payment limits.

48
00:02:58,844 --> 00:03:01,744
We should calculate fees and many more.

49
00:03:02,584 --> 00:03:04,704
As many as you can imagine.

50
00:03:05,424 --> 00:03:09,554
Of course, we have to exchange
currencies to send another

51
00:03:09,554 --> 00:03:10,704
currency to your recipient.

52
00:03:13,189 --> 00:03:16,509
And finally, we can send
EUR to the recipient.

53
00:03:18,109 --> 00:03:19,619
Where is the problem?

54
00:03:20,539 --> 00:03:23,059
Of course, there can be many problems.

55
00:03:23,289 --> 00:03:27,839
In terms of compliance,
operations, finance and so on.

56
00:03:28,749 --> 00:03:32,329
But we will review only one
technical problem today.

57
00:03:33,009 --> 00:03:34,399
The problem is lost update.

58
00:03:35,399 --> 00:03:36,839
Let's take a look on the diagram.

59
00:03:36,989 --> 00:03:37,939
What happens here?

60
00:03:38,429 --> 00:03:44,189
When transfer system receive
your payment, we should find

61
00:03:44,209 --> 00:03:46,079
proper transfer in the database.

62
00:03:47,129 --> 00:03:51,949
After finding, we should check the
sender and recipient, for example,

63
00:03:51,959 --> 00:03:55,959
in our compliance service, we are
getting, okay, everything is fine.

64
00:03:56,009 --> 00:03:57,219
So we can go further.

65
00:03:57,689 --> 00:04:01,639
We are processing the request,
doing some relations, applying

66
00:04:01,639 --> 00:04:03,569
fees, exchanging currencies.

67
00:04:03,729 --> 00:04:05,609
And finally, we should
update the transfers.

68
00:04:05,649 --> 00:04:08,709
So just to set the status,
let everything's fine.

69
00:04:08,719 --> 00:04:10,909
So we've paid out the
money for your recipient.

70
00:04:12,054 --> 00:04:13,014
Where the problem?

71
00:04:13,534 --> 00:04:20,224
The problem is when compliance
system decided to cancel the transfer

72
00:04:20,254 --> 00:04:24,464
at the same time while we are
processing the original transfer.

73
00:04:25,714 --> 00:04:32,624
So the process looks mostly the same,
but after successful checks in Compliance

74
00:04:32,624 --> 00:04:35,004
service can decide to cancel the transfer.

75
00:04:35,294 --> 00:04:38,734
So it hits in point transfer slash cancel.

76
00:04:38,944 --> 00:04:43,614
And we should select transfer for
restriction and update transfer as well.

77
00:04:44,534 --> 00:04:47,744
Let's take a look on
two transactions here.

78
00:04:48,214 --> 00:04:51,424
On the left, we have
compliance transaction.

79
00:04:51,904 --> 00:04:56,454
On the right, we have our
payment to our system.

80
00:04:56,954 --> 00:04:58,574
So we are starting the transaction.

81
00:04:59,004 --> 00:05:02,314
We are selecting transfer
We are getting result.

82
00:05:02,534 --> 00:05:03,884
So result is the same.

83
00:05:03,884 --> 00:05:06,854
So ID 1 status created.

84
00:05:06,854 --> 00:05:10,884
Everything should be fine in
both transactions After that, we

85
00:05:10,884 --> 00:05:11,684
are setting different statuses.

86
00:05:12,484 --> 00:05:14,974
For compliance, we should
set status cancelled.

87
00:05:15,224 --> 00:05:21,304
For our payment, we should set
status payment received Okay, cool.

88
00:05:21,494 --> 00:05:26,074
We're committing the changes
Where is the problem?

89
00:05:26,444 --> 00:05:32,639
The problem is here If we will
select transfer right after this

90
00:05:32,639 --> 00:05:37,139
changes, we can get undefined status.

91
00:05:37,199 --> 00:05:42,189
So because we have two concurrent
transactions and we don't know

92
00:05:42,219 --> 00:05:46,869
what exactly we want to have at
the end, and we cannot guarantee

93
00:05:47,179 --> 00:05:48,949
the order of the statuses.

94
00:05:49,289 --> 00:05:52,709
So the status can be undefined, it
can be canceled, it can be payment

95
00:05:52,719 --> 00:05:54,769
received or any other, of course.

96
00:05:56,029 --> 00:06:02,509
Let's try to solve it and we'll
talk about traditional approaches.

97
00:06:02,679 --> 00:06:07,779
Of course, I don't have the
time to provide all possible

98
00:06:07,779 --> 00:06:09,189
options, how to solve it.

99
00:06:09,789 --> 00:06:13,879
And also we are limited by a
technology that we use now.

100
00:06:13,889 --> 00:06:17,434
Let's imagine we have
Postgres database, right?

101
00:06:17,944 --> 00:06:21,504
And we can solve it
like a, in, in that way.

102
00:06:22,169 --> 00:06:27,709
We have database transaction, how
it looks like the same as before.

103
00:06:27,709 --> 00:06:28,909
We're starting the transaction.

104
00:06:29,879 --> 00:06:37,229
We are selecting transfer for update
now, and we can commit the changes.

105
00:06:38,679 --> 00:06:39,579
Everything is okay.

106
00:06:40,669 --> 00:06:43,359
Let's try to implement it on the diagram.

107
00:06:44,199 --> 00:06:46,349
So this is the same diagram as before.

108
00:06:47,084 --> 00:06:48,514
Except just one small thing.

109
00:06:49,014 --> 00:06:52,424
Instead of just selecting the transfer,
we are selecting it for update.

110
00:06:52,924 --> 00:06:57,444
We are starting from payment receiving
process, so we are selecting for

111
00:06:57,444 --> 00:07:01,404
update, we are checking sender
and recipient, everything is fine.

112
00:07:01,794 --> 00:07:06,364
At that moment, compliance system
decided to cancel and restrict transfer.

113
00:07:07,404 --> 00:07:09,979
It does select for update as well.

114
00:07:10,649 --> 00:07:15,599
But it should wait until we have
one open transaction for update for

115
00:07:15,599 --> 00:07:18,189
one single row or for many rows.

116
00:07:18,529 --> 00:07:22,789
Postgres knows that everything
should be blocked until the

117
00:07:22,799 --> 00:07:26,579
first process will be completed.

118
00:07:28,839 --> 00:07:35,219
So the one, the first process when we
are receiving the payment is Pending

119
00:07:35,219 --> 00:07:37,429
now, so we are selected transfer.

120
00:07:37,439 --> 00:07:38,949
We are doing some calculations.

121
00:07:39,519 --> 00:07:41,359
We are working on the processing.

122
00:07:42,059 --> 00:07:45,979
And finally, we do update on the step six.

123
00:07:47,189 --> 00:07:51,749
Once we committed changes, we can
continue with the second process.

124
00:07:52,809 --> 00:07:57,799
We're selecting we already sent
select for update request from

125
00:07:57,799 --> 00:08:02,879
compliance service the, our database,
and we were waiting for the result.

126
00:08:02,909 --> 00:08:06,459
And now the result is finally
here and we can continue.

127
00:08:06,889 --> 00:08:08,429
With everything solved, actually.

128
00:08:08,449 --> 00:08:10,189
So everything is super simple here.

129
00:08:10,189 --> 00:08:13,529
So there are only two
Database transactions.

130
00:08:13,529 --> 00:08:19,089
We don't have any new abstractions or any
new tools, but where is the limitation?

131
00:08:20,649 --> 00:08:22,359
Let's make a quick calculation.

132
00:08:22,569 --> 00:08:29,989
So let's imagine we have processing time,
average processing time, five seconds

133
00:08:30,499 --> 00:08:33,269
And we have 100 operations per second.

134
00:08:33,669 --> 00:08:37,219
That means that we should
have 500 active transactions.

135
00:08:38,499 --> 00:08:40,529
Doesn't seem complicated, right?

136
00:08:40,719 --> 00:08:43,379
Postgres definitely could handle this.

137
00:08:44,209 --> 00:08:45,629
And yes and no.

138
00:08:46,159 --> 00:08:49,349
There are two drawbacks.

139
00:08:49,659 --> 00:08:51,639
First of all is resources.

140
00:08:51,939 --> 00:08:54,624
We have many active
transactions per second.

141
00:08:55,354 --> 00:08:59,694
that do nothing, actually, because we
are waiting, we are going to external

142
00:08:59,694 --> 00:09:05,484
services, we are writing some audit data,
we are getting data from another service.

143
00:09:05,524 --> 00:09:06,784
So many things.

144
00:09:06,834 --> 00:09:14,804
So while we do this transaction is active
and we cannot work with this locked

145
00:09:14,844 --> 00:09:16,664
row, for example, with this transfer.

146
00:09:17,584 --> 00:09:21,464
And the second point is
about your connection pools.

147
00:09:21,734 --> 00:09:27,414
So I believe most of you have a
connection pooling system in your apps.

148
00:09:27,424 --> 00:09:32,564
So for example it can be limited up
to 16 connections to your Postgres

149
00:09:32,564 --> 00:09:37,044
instance and everything should be fine
actually, because we have different

150
00:09:37,054 --> 00:09:42,954
transfers, but the problem will be
if you have multiple concurrent.

151
00:09:44,644 --> 00:09:46,224
Transactions in the database.

152
00:09:46,584 --> 00:09:52,884
Let's imagine we have 16 concurrent
process at the same time So that means

153
00:09:53,164 --> 00:09:58,034
that the first connection will be
acquired by actual transaction So we

154
00:09:58,034 --> 00:10:01,454
are we got the result from the database.

155
00:10:01,654 --> 00:10:06,164
We start doing something We are processing
it to five second and finally we can

156
00:10:06,164 --> 00:10:11,754
release during this time The second
operation will be waiting at the third

157
00:10:11,814 --> 00:10:21,424
and the fifth and the sixth and so on
so The contention of the on the lock

158
00:10:21,524 --> 00:10:27,324
and on the data database in fact if we
Want to work with the same transfer?

159
00:10:27,624 --> 00:10:32,074
it will be quite a problem because
at the end you can end up with just

160
00:10:32,075 --> 00:10:40,294
a Empty connection pool because every
connection is busy And you cannot run

161
00:10:40,354 --> 00:10:42,654
anything else on these connection pools.

162
00:10:42,984 --> 00:10:46,074
You cannot serve customers
requests, you cannot serve in other

163
00:10:46,074 --> 00:10:48,324
transfers, and here's the problem.

164
00:10:49,104 --> 00:10:55,264
Okay, let's try to
solve it in another way.

165
00:10:55,774 --> 00:10:56,614
Let's try locks.

166
00:10:57,834 --> 00:11:03,854
Of course, locks can be implemented in
different systems in different ways.

167
00:11:03,864 --> 00:11:06,684
But in fact, today we'll
talk about local locks.

168
00:11:07,924 --> 00:11:08,794
And distributed locks.

169
00:11:09,084 --> 00:11:10,794
Let's start with local locks.

170
00:11:11,304 --> 00:11:15,524
In Golang it can be done
via just a mutex object.

171
00:11:16,544 --> 00:11:17,384
How it works?

172
00:11:17,774 --> 00:11:20,524
We should run something on the transfer.

173
00:11:20,884 --> 00:11:26,524
We are trying to acquire the mutex
and defer a function to unlock it.

174
00:11:26,754 --> 00:11:33,014
If mutex was already locked
the goroutine will be unlocked.

175
00:11:33,554 --> 00:11:34,834
We'll be painting actually.

176
00:11:34,844 --> 00:11:38,604
We will wait until the
lock will be resolved.

177
00:11:39,474 --> 00:11:40,564
Everything is simple, right?

178
00:11:40,674 --> 00:11:43,334
But the problem is obvious, actually.

179
00:11:43,334 --> 00:11:44,944
So if you have multiple nodes.

180
00:11:45,934 --> 00:11:50,314
You have multiple endpoints or
processes or whatever, or maybe your

181
00:11:50,314 --> 00:11:56,244
consistent rotor on NGINX or any
another balancer was broken or after

182
00:11:56,244 --> 00:11:59,054
start you can end up with this scheme.

183
00:11:59,494 --> 00:12:00,824
So one node.

184
00:12:01,009 --> 00:12:08,889
Holds a lock, local lock for one transfer
and the node 2 got a request for the

185
00:12:08,889 --> 00:12:11,119
same transfer with different endpoint.

186
00:12:11,419 --> 00:12:14,899
That means that locks doesn't
work at all, so you don't need it.

187
00:12:15,399 --> 00:12:17,739
Let's try another approach.

188
00:12:18,349 --> 00:12:20,909
So this is about distributed locks.

189
00:12:21,529 --> 00:12:25,920
Of course, it's become a bit A bit
complex because you shouldn't produce

190
00:12:25,920 --> 00:12:27,860
new infrastructure things here.

191
00:12:28,150 --> 00:12:32,650
And also you should understand how
it works and your engineers as well.

192
00:12:33,050 --> 00:12:34,610
So let's start with diagram.

193
00:12:34,610 --> 00:12:38,590
So the key difference actually
is that instead of just that.

194
00:12:40,925 --> 00:12:44,265
Mutex in a single node
application, you have distributed

195
00:12:44,265 --> 00:12:45,855
lock manager, how it works.

196
00:12:45,855 --> 00:12:52,845
Node 1 can request for lock in a lock
manager, and if it was not acquired by

197
00:12:52,865 --> 00:12:54,865
another process, we can run the lock.

198
00:12:55,055 --> 00:12:58,345
If node 2 will try to request
the same lock, it will wait.

199
00:12:58,435 --> 00:12:59,765
So it works the same.

200
00:12:59,965 --> 00:13:04,565
So if node one has the access, it
can safely access some resources.

201
00:13:04,875 --> 00:13:08,895
And if everything is done, so
we can just release the lock.

202
00:13:09,195 --> 00:13:13,135
And right after that, lock manager
will run the lock to the second node.

203
00:13:13,325 --> 00:13:14,845
Everything is super simple here.

204
00:13:15,980 --> 00:13:16,720
About storages.

205
00:13:17,160 --> 00:13:19,260
Actually, there are a lot of options.

206
00:13:19,760 --> 00:13:22,100
We will just just name a few.

207
00:13:22,100 --> 00:13:26,660
Hazelcast, Zookeeper, UTCD,
Console, Redis, whatever you need,

208
00:13:26,750 --> 00:13:30,840
whatever you know, whatever you
like, so you can use everything.

209
00:13:31,390 --> 00:13:33,150
What about limitations here?

210
00:13:34,030 --> 00:13:40,550
Limitations are quite Quite complex,
actually, because under load,

211
00:13:40,920 --> 00:13:45,480
it can be quite challenging to
understand how the system will work.

212
00:13:46,060 --> 00:13:48,000
Because of problem of ordering.

213
00:13:48,875 --> 00:13:53,775
So let's imagine you have multiple nodes,
for example, a cluster with 16 nodes.

214
00:13:55,215 --> 00:14:00,555
They can be placed in a different
zones, in a different data centers, in

215
00:14:00,555 --> 00:14:07,795
a different networks, because of many
things, just have different timing to

216
00:14:07,875 --> 00:14:13,951
access your lock manager, for example,
Hazelcast, or for example, Zookeeper.

217
00:14:15,501 --> 00:14:16,411
This is the first problem.

218
00:14:16,431 --> 00:14:24,261
So we cannot understand why we've got
a lock to the node that, for example,

219
00:14:24,331 --> 00:14:27,301
call it later than the first one.

220
00:14:27,681 --> 00:14:31,451
So it is quite challenging to
understand how it works, just because

221
00:14:31,451 --> 00:14:34,141
of the problem of the ordering.

222
00:14:35,651 --> 00:14:36,241
Timeouts.

223
00:14:37,421 --> 00:14:39,551
There are actually multiple timeouts.

224
00:14:39,591 --> 00:14:42,021
So first of all, it is
lock acquisition timeout.

225
00:14:42,021 --> 00:14:48,246
So we As engineers should understand,
so I'm trying to get a lock in our lock

226
00:14:48,246 --> 00:14:53,966
manager we should be able to set some
time out because we cannot wait infinite

227
00:14:54,006 --> 00:14:57,936
time for this lock because it just, it
will just hang in the process, right?

228
00:14:57,986 --> 00:15:03,416
And we should understand how to set this
time out, how to guarantee this time out.

229
00:15:04,066 --> 00:15:10,276
And the second point is how to manage this
timeout when we already acquired the lock.

230
00:15:10,826 --> 00:15:15,826
Let's imagine we've spent three
seconds to wait for a lock.

231
00:15:16,106 --> 00:15:20,786
And now we should limit the time
when we process, when we run actual

232
00:15:20,786 --> 00:15:22,106
logic, back end logic, right?

233
00:15:22,106 --> 00:15:26,666
And we already have two points
here, so we should respect timeouts.

234
00:15:27,146 --> 00:15:31,866
We should respect holding timeouts
and we should understand how to

235
00:15:31,866 --> 00:15:36,076
work with them What should we
do if we didn't get the lock?

236
00:15:36,576 --> 00:15:38,186
Probably everything should be fine, right?

237
00:15:38,186 --> 00:15:43,726
So we just didn't do anything
What if we got the lock?

238
00:15:44,676 --> 00:15:50,926
but we lost the lock or The process
was crashed When we hold the lock

239
00:15:51,436 --> 00:15:52,746
this is challenging, actually.

240
00:15:52,786 --> 00:15:54,256
Because you should
respect it in your code.

241
00:15:54,466 --> 00:15:59,126
So every process should understand
that it can be it can be dropped.

242
00:16:00,066 --> 00:16:03,166
The server can fail and
how to restore the process.

243
00:16:03,796 --> 00:16:07,616
And you should understand this
partial state that was in, that was

244
00:16:07,616 --> 00:16:10,346
implemented during the lock holding.

245
00:16:11,671 --> 00:16:13,631
And of course, potential deadlocks.

246
00:16:13,841 --> 00:16:18,611
That means that, for example, we
want to hold a lock for transfer, for

247
00:16:18,611 --> 00:16:21,821
check, for customer, for recipient.

248
00:16:21,821 --> 00:16:29,601
And the, Modify the state, we
need to touch every object there.

249
00:16:29,921 --> 00:16:34,541
And potentially it can be challenging
to understand and to guarantee that

250
00:16:34,581 --> 00:16:36,031
there is no deadlock installed.

251
00:16:36,041 --> 00:16:40,901
Deadlock is when, for example, we've
got a lock for transfer, we are

252
00:16:40,901 --> 00:16:44,311
trying to get lock for recipient,
but other process started with the

253
00:16:44,331 --> 00:16:46,331
recipient and after the transfer.

254
00:16:46,531 --> 00:16:47,011
The second.

255
00:16:47,621 --> 00:16:52,611
The second transaction got a lock
for cpn and after that it's trying

256
00:16:53,071 --> 00:16:57,636
to get a lock for transfer, but it
holds this lock is for this, the

257
00:16:57,636 --> 00:16:58,976
first node for the first process.

258
00:16:59,256 --> 00:17:03,416
And it is quite challenging and I
don't know how to guarantee that

259
00:17:03,416 --> 00:17:07,366
there is no deadlocks at all instead
of just testing, but testing is

260
00:17:07,866 --> 00:17:09,736
super complex in distributed systems.

261
00:17:09,736 --> 00:17:13,646
So I don't have so many times to
test distributed system on my own.

262
00:17:14,586 --> 00:17:14,926
Okay.

263
00:17:15,296 --> 00:17:18,586
Let's write the switch to
asynchronous processing.

264
00:17:19,326 --> 00:17:24,126
Let's first define what
the transfer model is.

265
00:17:25,231 --> 00:17:27,531
Actually, it is finite
state machine, right?

266
00:17:27,751 --> 00:17:32,921
Because of transfer has multiple
statuses, state transitions occur

267
00:17:33,171 --> 00:17:38,501
via commands, each state defines
allowed commands, and commands

268
00:17:38,501 --> 00:17:40,681
trigger actions and state changes.

269
00:17:41,676 --> 00:17:42,176
That's all.

270
00:17:42,186 --> 00:17:43,846
So finite state machine
is the same, right?

271
00:17:43,846 --> 00:17:48,416
So it's just a switching before states
because of something, because of

272
00:17:48,416 --> 00:17:50,296
some events or commands or whatever.

273
00:17:50,526 --> 00:17:55,766
So we cannot go from payment received
to payment waiting just because

274
00:17:56,646 --> 00:17:58,306
it's impossible in our domain.

275
00:17:59,166 --> 00:18:00,346
Let's take a look on the code.

276
00:18:02,066 --> 00:18:04,666
First of all, let's define transfer.

277
00:18:05,446 --> 00:18:09,316
For simplicity, it could
have only id and status.

278
00:18:10,996 --> 00:18:12,236
What is VSAM here?

279
00:18:12,296 --> 00:18:13,176
Vini State Machine.

280
00:18:13,176 --> 00:18:15,706
So we have a transfer created.

281
00:18:16,586 --> 00:18:18,006
We have command.

282
00:18:18,821 --> 00:18:23,431
Received payment and we can move our
transfer to payment received, right?

283
00:18:23,831 --> 00:18:25,921
So let's define statuses.

284
00:18:26,251 --> 00:18:30,251
We have created, payment received,
checks sent, checks pending, and so on.

285
00:18:30,251 --> 00:18:36,851
So all our tree of choices and
transitions from status to status.

286
00:18:37,391 --> 00:18:39,711
And of course, we need
to define a command.

287
00:18:39,941 --> 00:18:43,611
So a command is something that can
happen in your in your application.

288
00:18:43,651 --> 00:18:47,961
It can be done via HTTP
endpoints, your PC endpoints

289
00:18:48,011 --> 00:18:50,681
broker messages time or whatever.

290
00:18:50,931 --> 00:18:55,791
So in fact, we need just something
to tell to the transfer that it

291
00:18:55,791 --> 00:18:58,381
should move from one step to another.

292
00:18:58,881 --> 00:19:02,911
And let's take a look on the code,
how could we handle this comment.

293
00:19:03,561 --> 00:19:06,341
Of course, we we won't
review everything here.

294
00:19:06,381 --> 00:19:08,971
We will start with something super simple.

295
00:19:09,021 --> 00:19:11,591
So payment receive payment comment.

296
00:19:12,541 --> 00:19:14,281
First of all, we should check the status.

297
00:19:15,261 --> 00:19:15,911
The code is simplified.

298
00:19:15,931 --> 00:19:19,251
We ignore error handling
here error cases and so on.

299
00:19:19,251 --> 00:19:20,781
So just the pure logic.

300
00:19:21,111 --> 00:19:22,301
We should check the status.

301
00:19:22,791 --> 00:19:24,631
So we've got a receive payment command.

302
00:19:24,681 --> 00:19:29,901
We know that status should
be only status created.

303
00:19:30,801 --> 00:19:33,061
If not, we should throw some error.

304
00:19:33,061 --> 00:19:35,761
We need to write payment details.

305
00:19:35,761 --> 00:19:38,151
We have to set status.

306
00:19:38,491 --> 00:19:40,361
We have to save the state.

307
00:19:40,761 --> 00:19:43,561
And we should tell to the transfer.

308
00:19:44,071 --> 00:19:49,031
that we need to run some checks
to move the transfer further.

309
00:19:50,091 --> 00:19:50,521
Okay.

310
00:19:51,161 --> 00:19:51,511
Cool.

311
00:19:52,671 --> 00:19:54,631
Requirements for asynchronous processing.

312
00:19:54,661 --> 00:19:56,711
So now we know the model.

313
00:19:56,761 --> 00:20:01,931
Now we understand the transfer is
actual FSM model and we need comments.

314
00:20:01,931 --> 00:20:02,871
We need messages.

315
00:20:03,011 --> 00:20:03,751
Now we need states.

316
00:20:04,756 --> 00:20:07,726
Let's make some
requirements for our system.

317
00:20:08,056 --> 00:20:11,306
First of all, we need
communication through messages.

318
00:20:11,716 --> 00:20:15,126
Messages are comments
or events or whatever.

319
00:20:15,236 --> 00:20:19,836
This is something that we can tell
from one service to another service

320
00:20:20,106 --> 00:20:22,426
that It needs to run something.

321
00:20:23,316 --> 00:20:26,616
Also, we need one at a
time message handling.

322
00:20:26,996 --> 00:20:32,566
That means that if we got a command
for transfer A, only one command

323
00:20:32,646 --> 00:20:35,286
can be executed for this transfer.

324
00:20:35,876 --> 00:20:39,746
If we have the second, it
should be queued somehow.

325
00:20:41,181 --> 00:20:43,311
Also, we need durable message store.

326
00:20:43,681 --> 00:20:48,811
That means that we should keep our
messages for some time because of

327
00:20:48,861 --> 00:20:53,061
node failures, location failures,
data centers failures and many more

328
00:20:53,061 --> 00:20:54,331
because of many reasons, actually.

329
00:20:54,381 --> 00:20:58,881
Because we we would need
to replay messages somehow.

330
00:20:59,091 --> 00:21:00,501
Maybe we need analytics.

331
00:21:00,541 --> 00:21:02,561
Maybe we deployed something broken.

