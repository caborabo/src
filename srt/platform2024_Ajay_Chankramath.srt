1
00:00:14,069 --> 00:00:16,079
Hello, my name is Ajay Shankarwad.

2
00:00:16,539 --> 00:00:21,607
I'm the CTO and Managing Director
for Platforms and Products at Brilio.

3
00:00:21,607 --> 00:00:25,550
Brilio is a 10 year old digital
transformation company who has been

4
00:00:25,550 --> 00:00:29,060
actually doing a lot of work within the
platform engineering space and Gen AI.

5
00:00:29,060 --> 00:00:29,319
Bye bye.

6
00:00:30,150 --> 00:00:34,350
my topic for today is going to be AI
Augmented Platform Engineering, which

7
00:00:34,350 --> 00:00:36,380
sort of brings together both those ideas.

8
00:00:37,589 --> 00:00:39,630
So let's just jump right in.

9
00:00:40,410 --> 00:00:43,439
So what I wanted to talk about
today was how do you actually apply

10
00:00:43,440 --> 00:00:46,879
some of the GEN AI principles to
improve the platform engineering

11
00:00:46,889 --> 00:00:49,119
experience across multiple platforms.

12
00:00:49,670 --> 00:00:52,820
vertical domains that you
have within your organization.

13
00:00:53,580 --> 00:00:56,600
These vertical domains are
typically things like your banking

14
00:00:56,640 --> 00:00:59,699
industry or your healthcare
industry or automotive industry,

15
00:00:59,710 --> 00:01:01,390
whatever industry that you are in.

16
00:01:01,805 --> 00:01:06,475
trying to build the products and deliver
them with efficiency and, reliability.

17
00:01:07,184 --> 00:01:09,675
So what I'm going to be talking
about today, number one, going

18
00:01:09,675 --> 00:01:12,315
to start talking about, the
platform engineering as a whole.

19
00:01:12,315 --> 00:01:15,524
What does it mean, or how do
I define platform engineering?

20
00:01:16,295 --> 00:01:19,064
then we'll talk a little bit
about Gen AI, the advances in

21
00:01:19,064 --> 00:01:20,625
Gen AI that we see these days.

22
00:01:20,755 --> 00:01:24,275
then we'll jump right into
LLMs and why epochs matter

23
00:01:24,275 --> 00:01:26,345
within, training, your models.

24
00:01:27,210 --> 00:01:31,629
then we'll start talking about
applying the ranks, to LLMs in the

25
00:01:31,630 --> 00:01:33,209
context of platform engineering.

26
00:01:33,349 --> 00:01:37,889
to understand that better, I might, take
a case study on BFSI, and this is one of

27
00:01:37,899 --> 00:01:39,669
the verticals I was just talking about.

28
00:01:40,049 --> 00:01:42,819
And then I'll conclude with,
some discussion about, how do

29
00:01:42,819 --> 00:01:44,019
you actually get started on this?

30
00:01:45,319 --> 00:01:48,300
as you really start talking about this,
the first thing to think about, Platform

31
00:01:48,310 --> 00:01:52,000
engineering is the fact that, why are
you actually doing platform engineering?

32
00:01:52,010 --> 00:01:54,290
And why do you need to
improve that performance more?

33
00:01:54,800 --> 00:01:55,949
It's fairly simple, right?

34
00:01:56,059 --> 00:02:00,110
So think about if you find a few of
your time to market any organization

35
00:02:00,230 --> 00:02:02,379
wanting to have faster time to market.

36
00:02:02,910 --> 00:02:06,350
So this is where you would need things
like your, Code generation and you're

37
00:02:06,350 --> 00:02:10,120
improving your developer productivity
and which everything that you need

38
00:02:10,120 --> 00:02:14,820
to actually start translating your
ideas, your product ideas into your

39
00:02:14,820 --> 00:02:20,580
products that actually gets deployed
to production as you do that, reducing

40
00:02:20,590 --> 00:02:23,650
the cost is also a significant part
of how you should do it, right?

41
00:02:23,660 --> 00:02:28,080
because you need to find a way
to find to reduce the kind of

42
00:02:28,080 --> 00:02:29,460
repetitive tasks that you have.

43
00:02:29,910 --> 00:02:32,970
As well as, improve your utilization
of your existing resources,

44
00:02:32,970 --> 00:02:35,940
whether it is cloud resources,
on prem resources, doesn't matter

45
00:02:35,960 --> 00:02:37,360
any kind of resources you have.

46
00:02:37,830 --> 00:02:41,010
As you can start using that less,
you're going to reduce the cost.

47
00:02:41,730 --> 00:02:44,490
All these things lead into that
developer productivity space.

48
00:02:44,680 --> 00:02:48,225
This is where you are going to have
The reduced cognitive load of your

49
00:02:48,225 --> 00:02:51,985
developers trying to make sure that the
developers can actually get their work

50
00:02:51,985 --> 00:02:54,775
done faster and they can be more happier.

51
00:02:55,575 --> 00:03:00,345
So none of these things have anything to
do with Gen AI or LLMs as a whole, right?

52
00:03:00,395 --> 00:03:02,805
so what we are really talking about
is that if you were to apply Gen

53
00:03:02,805 --> 00:03:06,790
AI to some of these principles,
We believe that it can actually

54
00:03:06,890 --> 00:03:09,020
yield better results in the end.

55
00:03:10,000 --> 00:03:12,900
having said that, one thing that
we should be talking about is

56
00:03:12,910 --> 00:03:14,270
what is Platform Engineering?

57
00:03:15,200 --> 00:03:18,300
I don't think we should be really
talking about that in 2024, but

58
00:03:18,300 --> 00:03:21,260
at the same time, we do have this
confusion all the time with respect

59
00:03:21,260 --> 00:03:22,890
to what is Platform Engineering?

60
00:03:23,280 --> 00:03:25,150
How does it fit into the larger ecosystem?

61
00:03:26,050 --> 00:03:29,260
let's just spend a few minutes
trying to understand how I

62
00:03:29,260 --> 00:03:30,420
define Platform Engineering.

63
00:03:31,150 --> 00:03:33,780
there are a few things that you
see on the slide, so think of it

64
00:03:33,780 --> 00:03:35,100
like eight or nine different axes.

65
00:03:35,350 --> 00:03:38,680
the first thing to think about is what
we always think about from a runtime

66
00:03:38,680 --> 00:03:40,170
point, if you're an application runtime.

67
00:03:40,280 --> 00:03:43,700
If you have a certain type of
applications, architected in certain

68
00:03:43,700 --> 00:03:46,760
ways, maybe you have containers and
those containers require orchestration.

69
00:03:48,050 --> 00:03:51,370
and generally think of it like your
microservices are containerized.

70
00:03:51,570 --> 00:03:54,730
as you try and do that, You need to
really look at your workload and figure

71
00:03:54,730 --> 00:03:55,960
out what's the best way to do it.

72
00:03:56,160 --> 00:04:01,290
And that process of translating
your application to that runtime of

73
00:04:01,330 --> 00:04:05,100
those applications is, completely
within the scope of platform daily.

74
00:04:06,310 --> 00:04:07,800
The other part of it is a service mesh.

75
00:04:07,810 --> 00:04:10,710
This is where you really make sure
that your microservices can talk to

76
00:04:10,710 --> 00:04:13,630
each other and make sure that there
are tools like Istio and all that,

77
00:04:13,640 --> 00:04:17,800
that ensure that there is efficient
communication between your microservices

78
00:04:18,160 --> 00:04:20,280
and your runtime is managed well.

79
00:04:21,230 --> 00:04:24,180
Anytime you talk about platforms
dating, the first thing that probably

80
00:04:24,180 --> 00:04:25,820
comes to everybody's mind is pipelines.

81
00:04:26,000 --> 00:04:29,930
So to those pipelines goes things like
compliance and governance that are

82
00:04:29,950 --> 00:04:31,460
built in as part of your pipelines.

83
00:04:32,750 --> 00:04:36,800
Any organization will have their
own set of service catalogs,

84
00:04:36,860 --> 00:04:40,560
their own set of services that you
really want to actually expose.

85
00:04:40,840 --> 00:04:43,610
So those things are, again,
part of platform engineering.

86
00:04:44,060 --> 00:04:47,170
Observability requires
no further explanation.

87
00:04:47,190 --> 00:04:51,660
we all understand what that is, but,
it's not just building the observability

88
00:04:51,660 --> 00:04:53,830
platforms and really maintaining that.

89
00:04:54,240 --> 00:04:57,140
It's sometimes also about instrumenting
and having the observability

90
00:04:57,150 --> 00:05:00,490
strategy as to how you're actually
going to observe your systems.

91
00:05:01,695 --> 00:05:06,015
any applications require data and managing
that database and the data infrastructure

92
00:05:06,015 --> 00:05:07,575
is integral part of micro GA.

93
00:05:08,885 --> 00:05:11,465
So is the, developer
experience reporting you?

94
00:05:11,525 --> 00:05:15,055
So there are a lot of tools these days
that actually, provide you reports

95
00:05:15,055 --> 00:05:18,085
with respect to how your developer
experience is improving, what kind of

96
00:05:18,085 --> 00:05:23,075
metrics you're tracking and are these the
lagging or the, or the leading metrics

97
00:05:23,075 --> 00:05:24,245
and how do you actually attack that?

98
00:05:24,365 --> 00:05:27,275
All those things are typically
part of platform change space.

99
00:05:28,110 --> 00:05:31,100
But if you have all these 8 axes,
the question really becomes, how do

100
00:05:31,100 --> 00:05:32,470
you actually bring it all together?

101
00:05:32,590 --> 00:05:36,430
How do you actually make sure that it all
works as part of your path to production

102
00:05:36,490 --> 00:05:38,310
and as part of your value chain?

103
00:05:38,830 --> 00:05:41,610
This is where the internet
developer platforms and the

104
00:05:41,610 --> 00:05:42,990
orchestrators around it will come in.

105
00:05:43,470 --> 00:05:47,815
So these orchestrators make sure that
all these, different capabilities of this

106
00:05:48,195 --> 00:05:51,575
different classes of capabilities work
together within the platform ecosystem.

107
00:05:52,475 --> 00:05:55,125
So that's how I would
define platform engineering.

108
00:05:56,175 --> 00:06:00,605
So now let's also take a step back and
really talk about use platforms nearing

109
00:06:00,615 --> 00:06:03,095
DevOps and TSD SRE, DevEx and all that.

110
00:06:03,725 --> 00:06:07,935
and these are conversations I still
have, with a lot of people I talk to.

111
00:06:08,445 --> 00:06:11,655
so one of the easiest ways to look
at this is that, your platform

112
00:06:11,655 --> 00:06:14,805
engineering is the core to all of
these terms that we're talking about.

113
00:06:15,095 --> 00:06:19,835
If you think of DevOps as a cultural
paradigm, a way of doing things that

114
00:06:19,835 --> 00:06:24,365
is efficient and making sure that your
development process is efficient enough

115
00:06:24,365 --> 00:06:28,615
and your developers can actually get the
job done in the most efficient manner, a

116
00:06:28,615 --> 00:06:30,505
platform engineering sort of enables that.

117
00:06:30,980 --> 00:06:34,590
And at the same time, your developer
experience requires platform engineering.

118
00:06:34,620 --> 00:06:37,550
So anything that we talk about with
the developer experience, whether it

119
00:06:37,550 --> 00:06:41,332
is ensuring that you're reducing the
cognitive load of the developers that

120
00:06:41,332 --> 00:06:45,510
requires platform engineering, and
it supports the whole SRE framework.

121
00:06:45,550 --> 00:06:47,920
So SRE being the Site
Reliability Engineering.

122
00:06:48,100 --> 00:06:50,770
that really requires some of the
platform's data capabilities.

123
00:06:51,350 --> 00:06:55,480
again, a very simplistic way of looking
at it, but this ensures that, there is no

124
00:06:55,550 --> 00:06:59,629
confusion with respect to what platform
is doing and what the scope of that is.

125
00:07:00,310 --> 00:07:03,080
we also need, can maybe, spend
a couple of minutes on the

126
00:07:03,080 --> 00:07:04,500
actual evolution of this, right?

127
00:07:04,640 --> 00:07:10,670
we know that, 10, 15 years back, And
when public clouds weren't as popular

128
00:07:10,740 --> 00:07:14,080
as it is today, we used to have data
centers and we used to have this idea

129
00:07:14,080 --> 00:07:18,680
of DevOps, where we could really try
and ensure that your developers were

130
00:07:19,110 --> 00:07:21,030
working in it as efficient as possible.

131
00:07:21,850 --> 00:07:25,570
Over time, we actually started seeing
a lot more of those configuration

132
00:07:25,570 --> 00:07:29,795
management, large set of servers and
scalable tissues and things like that.

133
00:07:29,795 --> 00:07:32,640
At that point, we started doing a
lot more configuration management.

134
00:07:33,010 --> 00:07:34,470
And, then the DevOps in the early.

135
00:07:34,485 --> 00:07:36,726
Principles of platform
sharing started coming.

136
00:07:36,726 --> 00:07:43,685
As we started moving to cloud, where the
whole idea of cloud not being a location,

137
00:07:43,695 --> 00:07:50,345
being an idea of a way of actually doing
your work, a way of working, platform

138
00:07:50,355 --> 00:07:51,955
sharing became a lot more prevalent.

139
00:07:52,145 --> 00:07:55,365
And that is what has led to the
current state, where you typically

140
00:07:55,365 --> 00:07:58,565
have a hybrid cloud or a multi, at
least a multi cloud situation for

141
00:07:58,565 --> 00:08:02,475
any organization, and they are really
starting to see how can you make your

142
00:08:02,475 --> 00:08:04,395
platform activities a lot more efficient.

143
00:08:04,955 --> 00:08:08,907
This is where both AI led and AI infused
platforms have become very popular.

144
00:08:10,387 --> 00:08:15,597
in the larger context of domain specific
ways of looking at platform engineering.

145
00:08:15,647 --> 00:08:18,247
when I say domain specific,
going back to the previous point,

146
00:08:18,687 --> 00:08:22,065
about those banking services or
healthcare services or automotive

147
00:08:22,065 --> 00:08:23,657
services and those kinds of things.

148
00:08:24,357 --> 00:08:28,607
If you look at it, think of it like, at
the end, this Venn diagram, where one

149
00:08:28,607 --> 00:08:32,437
of the circles here is those Dell AI
capabilities in platform engineering.

150
00:08:32,542 --> 00:08:36,142
so these are, any kind of air
capabilities, not particularly

151
00:08:36,182 --> 00:08:39,712
a predictive or a generative
capability, but it's some kind

152
00:08:39,712 --> 00:08:40,942
of generally a capabilities.

153
00:08:41,522 --> 00:08:45,012
then you also have certain industry
abstraction of those platforms, right?

154
00:08:45,012 --> 00:08:49,262
And so for any kind of specific domain
platforms, you'll have certain industry

155
00:08:49,262 --> 00:08:52,792
specific data that is available and
you need to extract that out and

156
00:08:52,802 --> 00:08:57,802
now applying the elements for these
platforms will also improve that.

157
00:08:59,912 --> 00:09:03,102
But in order for all these things to work
together, what are the things that we need

158
00:09:03,112 --> 00:09:05,922
to think about is that the organization
should be able to support that.

159
00:09:06,702 --> 00:09:11,512
So anything that you're doing, the
core of the whole success is going to

160
00:09:11,522 --> 00:09:15,841
be that console that you really bring
about as part of your organization DNA.

161
00:09:16,822 --> 00:09:19,732
And as we just spoke about so
AI hype, even though that's

162
00:09:19,732 --> 00:09:20,742
been on for a couple of years.

163
00:09:21,587 --> 00:09:25,137
we all know that, we have been using AI
in one form or the other for a while.

164
00:09:25,527 --> 00:09:27,727
We have, predictive AI for a while.

165
00:09:27,747 --> 00:09:31,357
We have been using forecasting and
trend analysis and tension management

166
00:09:31,687 --> 00:09:32,987
and a lot of those kinds of things.

167
00:09:33,417 --> 00:09:38,087
I've been using AI for many years, but
with the advent of gen AI, we have,

168
00:09:38,157 --> 00:09:41,767
we are seeing a lot more advances in
core generation, test generation, all

169
00:09:41,767 --> 00:09:46,537
that kind of things, which obviously
needs NLMs, these large language models

170
00:09:46,857 --> 00:09:52,517
like OpenAI GPT or Codex, which has
Really, a boon to the whole Gen AI,

171
00:09:52,617 --> 00:09:53,817
development that we're seeing now.

172
00:09:55,157 --> 00:09:58,717
So looking at some of the LLMs that's
available today, I'm not going to go

173
00:09:58,717 --> 00:10:03,387
through each and every one of them, but as
you can see, things like GPT 4 has helped

174
00:10:03,387 --> 00:10:08,327
a lot with the code generation and the
general assistance of DevOps activities.

175
00:10:08,882 --> 00:10:13,182
And CodeX has definitely helped things
like your IEC and API integration on that.

176
00:10:13,622 --> 00:10:17,492
So as you really start looking at what
are the kind of models that you need

177
00:10:17,692 --> 00:10:21,742
to improve your platform engineering
experience, you have to first think about,

178
00:10:21,762 --> 00:10:25,422
what is the problem that you're trying
to solve, and how can you actually apply

179
00:10:25,422 --> 00:10:26,712
some of these very specific elements.

180
00:10:28,722 --> 00:10:32,652
As you really start training your
models, the epochs come into play.

181
00:10:32,822 --> 00:10:36,422
in the epochs and whole process of really
trying to make sure that you iterate

182
00:10:36,462 --> 00:10:41,142
through your training process so that you
are converging on the right kind of data,

183
00:10:41,232 --> 00:10:46,422
right kind of models without having a
situation where you're really starting to,

184
00:10:46,482 --> 00:10:48,842
not train them enough or over train them.

185
00:10:49,532 --> 00:10:53,372
So this is where that convergent
process is extremely important.

186
00:10:54,167 --> 00:10:55,997
In order to do that, you
need to find the right apox.

187
00:10:56,717 --> 00:10:59,897
Let's look at a very simple example
of how something like this could work.

188
00:11:01,087 --> 00:11:05,837
So if you, as you really start training
your s using epoch, one of the ideas

189
00:11:05,837 --> 00:11:08,647
that you need to do is first you
start with some kind of, modeling

190
00:11:08,827 --> 00:11:11,057
initiation and, tokenizing the process.

191
00:11:11,387 --> 00:11:14,407
Once you set that, know, you have
to really start looking at, can you

192
00:11:14,407 --> 00:11:16,177
actually set your hyper parameters?

193
00:11:16,177 --> 00:11:18,157
These hyper parameters
are things like Neo.

194
00:11:18,827 --> 00:11:20,287
What's the number of feed
blocks that you have?

195
00:11:20,677 --> 00:11:23,487
What's the batch size that you're
training as well as some of the

196
00:11:23,487 --> 00:11:24,587
learning rates and all that.

197
00:11:25,187 --> 00:11:28,517
And once you do that, you really go
into your data sets and start, you're

198
00:11:28,617 --> 00:11:32,037
ensuring that you load your data, make
sure that you have the right kind of

199
00:11:32,117 --> 00:11:33,787
data that is coming out of the process.

200
00:11:34,652 --> 00:11:39,292
Then you actually go in and initialize
that, optimization process, using

201
00:11:39,302 --> 00:11:42,432
the model parameters that you step,
set in the previous state, and then

202
00:11:42,432 --> 00:11:44,162
set your mode of learning rate.

203
00:11:44,642 --> 00:11:48,532
At that point, you can really start going
to an iterative process where you really

204
00:11:48,532 --> 00:11:50,812
start determining what the epochs are.

205
00:11:51,117 --> 00:11:54,227
And for each APOC release, once you
actually go through the training

206
00:11:54,227 --> 00:11:57,827
process, make sure that after
each batch is trained, see if

207
00:11:57,827 --> 00:12:02,677
that level of maturity has, the
optimization maturity has reached.

208
00:12:03,127 --> 00:12:06,707
And once you have reached that,
you end up essentially saving that

209
00:12:06,807 --> 00:12:11,497
trained model and the tokenizer,
make sure that you move on to the

210
00:12:12,407 --> 00:12:14,727
point where you have an optimal fit.

211
00:12:17,277 --> 00:12:19,197
this is all great, right?

212
00:12:19,327 --> 00:12:23,582
And so we looked at the LLMs and looked
at how you know how you can train that

213
00:12:23,642 --> 00:12:27,232
once you do that, one thing that you
really have to think about when you

214
00:12:27,232 --> 00:12:30,112
talk about, especially when you talk
about domain specific platform is

215
00:12:30,132 --> 00:12:32,362
getting is, the application of rags.

216
00:12:32,362 --> 00:12:33,922
So the retrieval augmented generation.

217
00:12:34,262 --> 00:12:37,112
so essentially think of rag
is something that actually

218
00:12:37,142 --> 00:12:38,862
bridges your training data gaps.

219
00:12:38,942 --> 00:12:41,002
So you train the data
in the previous step.

220
00:12:41,042 --> 00:12:45,262
And once you have that, you obviously
have significant amount of knowledge.

221
00:12:45,572 --> 00:12:49,292
But you might still have some gaps if
you haven't trained it the level in which

222
00:12:49,292 --> 00:12:50,962
you want to train it for the domains.

223
00:12:52,112 --> 00:12:55,852
And this allows the LLMs to be a lot
more relevant, a lot more accurate,

224
00:12:55,922 --> 00:12:59,692
and essentially achieve what you really
want to achieve, which is to reduce

225
00:12:59,692 --> 00:13:02,842
the cognitive load of the developers,
make sure that they are more effective.

226
00:13:03,512 --> 00:13:05,252
Again, a very simple way of looking at it.

227
00:13:05,352 --> 00:13:10,912
So what on the left side is, if you have
an NLM without the rags, what you end up

228
00:13:10,912 --> 00:13:14,672
doing is that you write the query, you
send it to LLM, and you get the output.

229
00:13:15,182 --> 00:13:20,092
But what if you can actually send some
domain and organization specific data?

230
00:13:20,792 --> 00:13:23,812
As you send that, what you really
find is that you can actually

231
00:13:23,812 --> 00:13:25,162
create a lot more data sources.

232
00:13:25,667 --> 00:13:30,047
Which eventually would turn into an
augmented query, not more efficient

233
00:13:30,047 --> 00:13:31,997
query that will yield better outputs.

234
00:13:32,507 --> 00:13:35,657
So very simplistic high level
view of how the RACs can help.

235
00:13:37,037 --> 00:13:40,684
So now let's look at a case study,
and specifically on the banking

236
00:13:40,684 --> 00:13:41,994
and financial services domain.

237
00:13:41,994 --> 00:13:45,859
as to how you could actually
Enhance your developer experience

238
00:13:45,939 --> 00:13:47,689
for this particular domain.

239
00:13:47,699 --> 00:13:50,829
essentially, these engineers are
building products within this domain,

240
00:13:51,299 --> 00:13:54,619
and you're going to integrate some
traditional platform sharing activities

241
00:13:54,619 --> 00:13:56,369
to go with the last as you do this.

242
00:13:58,199 --> 00:14:01,379
So the approach is going to be,
but first I recommend is going

243
00:14:01,379 --> 00:14:05,059
to be like in the start with
identifying those critical BFSI APIs.

244
00:14:05,724 --> 00:14:08,564
and we'll talk what those things
are and then we really start

245
00:14:08,564 --> 00:14:11,664
thinking about what are those domain
specific lags that you would need?

246
00:14:12,124 --> 00:14:14,264
This is the most critical step, right?

247
00:14:14,294 --> 00:14:17,264
So you're really going to figure out
where you're going to get this data from.

248
00:14:17,924 --> 00:14:19,484
Keep all this terminology aside.

249
00:14:19,494 --> 00:14:22,584
It's just like you want to build some
things where you get the data from.

250
00:14:23,144 --> 00:14:27,504
Once you do that, the steps 3 to 8,
as you can see, are very generic to

251
00:14:27,514 --> 00:14:29,594
building any kind of platform activity.

252
00:14:30,119 --> 00:14:33,079
Whether it is an engineering platform
or business platform, it doesn't matter.

253
00:14:33,129 --> 00:14:34,769
Those steps should remain the same.

254
00:14:35,309 --> 00:14:37,899
And we will actually go through
the process to understand how that.

255
00:14:39,809 --> 00:14:42,869
So the first step is identifying
your domain specific APIs.

256
00:14:43,079 --> 00:14:44,619
So what are these domain specific APIs?

257
00:14:45,409 --> 00:14:46,119
Fairly simple.

258
00:14:46,119 --> 00:14:49,779
Again, if you are in the banking and
financial services industry, the kind

259
00:14:49,789 --> 00:14:52,979
of things that are important to you
are things like your account creation,

260
00:14:53,679 --> 00:14:57,479
the balance in account balance, the
transactions and those kinds of things.

261
00:14:57,869 --> 00:15:00,459
About as well as things like
your payment processing, your

262
00:15:00,459 --> 00:15:01,569
loan management, all that.

263
00:15:01,599 --> 00:15:06,269
So you need to clearly identify what
those APIs are, what those functions are.

264
00:15:06,759 --> 00:15:09,609
If you can't get that right,
then anything that you do

265
00:15:09,609 --> 00:15:10,959
later isn't going to be useful.

266
00:15:10,979 --> 00:15:14,639
So it's very important for you
to do some product management.

267
00:15:14,819 --> 00:15:17,779
Involve your product management
teams to make sure that you clearly

268
00:15:17,779 --> 00:15:19,889
understand what the business needs are.

269
00:15:20,219 --> 00:15:25,079
and even between two, two different
banks, engaged in similar activities, your

270
00:15:25,579 --> 00:15:28,739
requirements might be different depending
on where your business priorities are.

271
00:15:29,859 --> 00:15:32,479
Once you do that, the question
becomes like, how do you

272
00:15:32,479 --> 00:15:34,179
develop a domain specific RACs?

273
00:15:34,719 --> 00:15:37,929
so as you try and do it, there are a
few things that you should look at.

274
00:15:37,969 --> 00:15:39,789
Think of this like the
data sources, right?

275
00:15:39,879 --> 00:15:42,769
Your internal documentation,
your regulatory guidelines,

276
00:15:42,769 --> 00:15:44,229
your ontologies and taxonomies.

277
00:15:44,954 --> 00:15:47,844
Pretty much anything that where
you can actually get this data

278
00:15:47,884 --> 00:15:49,024
from would be extremely useful.

279
00:15:49,924 --> 00:15:52,654
there are things like, for
example, open banking API.

280
00:15:52,684 --> 00:15:56,234
So you might want to have your API
comply to that within the lags.

281
00:15:56,234 --> 00:15:59,464
So essentially you include that
information as you develop the lags.

282
00:16:00,129 --> 00:16:02,619
Then you also need to really look
at it from the point of view,

283
00:16:02,629 --> 00:16:03,709
what are the models available?

284
00:16:03,979 --> 00:16:06,959
What are the knowledge graphs that
you can incorporate those things to?

285
00:16:07,239 --> 00:16:10,399
So again, this is not an exhaustive
list of things, this should be like

286
00:16:10,399 --> 00:16:13,649
a potentially the kind of things
that you might look into or any kind

287
00:16:13,649 --> 00:16:15,909
of data sources that you look into.

288
00:16:16,454 --> 00:16:21,194
This might actually turn out to be a
good guideline for you to start with, and

289
00:16:21,194 --> 00:16:23,254
keep in mind that this is very specific.

290
00:16:23,304 --> 00:16:27,124
In this case, it's very specific for the
banking, financial services industry,

291
00:16:27,554 --> 00:16:30,644
but as you really start looking at
healthcare, you can probably find some

292
00:16:30,644 --> 00:16:35,454
very similar kind of, equivalent, max for
the, for, the things that you see here.

293
00:16:35,454 --> 00:16:40,524
Now, once you do that, Then the next
set of steps are going to be again.

294
00:16:40,524 --> 00:16:43,754
I'm going to use some pseudocode to
show this, but it's going to be fairly

295
00:16:43,754 --> 00:16:47,234
straightforward from the point if you
know how platforms are built, right?

296
00:16:47,284 --> 00:16:51,194
So think of us like the first step in
the process would be to define your A.

297
00:16:51,194 --> 00:16:51,384
P.

298
00:16:51,384 --> 00:16:51,474
I.

299
00:16:51,484 --> 00:16:51,554
S.

300
00:16:51,574 --> 00:16:52,304
For the common task.

301
00:16:52,864 --> 00:16:54,464
So what are these common
tasks in this case?

302
00:16:54,834 --> 00:16:59,524
all the things that we spoke about in
step one, then once you have that, you

303
00:16:59,524 --> 00:17:00,984
essentially create those integration A.

304
00:17:00,984 --> 00:17:01,194
P.

305
00:17:01,194 --> 00:17:01,294
I.

306
00:17:01,304 --> 00:17:01,334
S.

307
00:17:01,374 --> 00:17:02,874
essentially define those A.

308
00:17:02,874 --> 00:17:03,104
P.

309
00:17:03,104 --> 00:17:03,114
I.

310
00:17:03,114 --> 00:17:03,264
S.

311
00:17:03,274 --> 00:17:04,264
For your usage.

312
00:17:04,314 --> 00:17:08,614
And then once you define it, Go ahead and
start exposing those APIs so that these

313
00:17:08,624 --> 00:17:09,894
things can be used by your developers.

314
00:17:12,294 --> 00:17:14,854
Next step in the process would
be to set up a SimCell portal.

315
00:17:14,944 --> 00:17:18,694
so in the SimCell portal, again,
fairly straightforward idea.

316
00:17:18,764 --> 00:17:20,994
Go ahead and initialize
the portal framework.

317
00:17:20,994 --> 00:17:25,054
And this is where we talked about that,
integration, framework that actually

318
00:17:25,054 --> 00:17:28,934
brings to your, pretty much all the steps
within the platform's data ecosystem.

319
00:17:29,959 --> 00:17:34,139
And you can go ahead and add the
appropriate documentation, and you can

320
00:17:34,139 --> 00:17:37,199
see that, this is actually pulling in
the data that you actually collected

321
00:17:37,199 --> 00:17:40,589
from various data sources, and then
go ahead and add this into your

322
00:17:40,599 --> 00:17:44,109
sandbox environment and make sure that
you go ahead and deploy that port.

323
00:17:45,639 --> 00:17:48,529
The next step of the process would be
to have your firmware environments.

324
00:17:48,529 --> 00:17:51,319
As a developer, you need to make sure that
you have the right kind of environments

325
00:17:51,369 --> 00:17:52,789
to continue your development process.

326
00:17:53,464 --> 00:17:57,474
So you start by creating your
dev containers and then publish

327
00:17:57,474 --> 00:18:00,124
those dev containers and provide
instructions for the local server.

328
00:18:00,454 --> 00:18:04,384
So this is where you would actually
provide that, right kind of configurations

329
00:18:04,444 --> 00:18:09,414
and the instructions for the developers
to execute so that they can actually get

330
00:18:09,414 --> 00:18:11,444
this deployed on your local environments.

331
00:18:13,074 --> 00:18:14,914
next one is again, fairly straightforward.

332
00:18:15,074 --> 00:18:16,334
Think about it from your
end to end observability.

333
00:18:17,694 --> 00:18:20,674
As you start setting up your
observability, you need to

334
00:18:20,714 --> 00:18:23,424
think about your logging, your
monitoring, your tracing, the

335
00:18:23,434 --> 00:18:24,964
metrics activities and all that.

336
00:18:25,014 --> 00:18:26,604
And once you have all of those things,

337
00:18:28,784 --> 00:18:32,234
expose those tools to the developers
so that developers have access

338
00:18:32,234 --> 00:18:33,864
to it and can work with it.

339
00:18:35,364 --> 00:18:38,134
And, at that point, you already
set up your site pipelines.

340
00:18:39,049 --> 00:18:42,119
Your pipelines, are things that you
would actually set up as part of this

341
00:18:42,129 --> 00:18:47,169
step, but then your developers would
then go ahead and instantiate it every

342
00:18:47,199 --> 00:18:48,469
time they are actually running through.

343
00:18:48,909 --> 00:18:51,839
So essentially things that will
happen here is that you just create

344
00:18:51,839 --> 00:18:56,119
your pipelines, the IC pipeline,
then add them their property stages

345
00:18:56,119 --> 00:18:59,469
in there for security compliance and
automated testing and things like that.

346
00:19:00,159 --> 00:19:04,379
And the compliance would mostly
happening, happen during the, during

347
00:19:04,379 --> 00:19:08,029
every step of the pipeline, making
sure that you have some kind of

348
00:19:08,029 --> 00:19:09,929
compliance at every point that changes.

349
00:19:10,929 --> 00:19:14,009
the last step of the process would be
to have your security and compliance.

350
00:19:14,219 --> 00:19:17,639
So essentially, this is where you're going
to be checking your, your vulnerability

351
00:19:17,639 --> 00:19:21,079
scanning and to know some of the
compliance checks that are required by

352
00:19:21,079 --> 00:19:22,949
the industry and by your organization.

353
00:19:23,169 --> 00:19:27,399
And then ensuring that these are built
into the pipeline and report some of

354
00:19:27,409 --> 00:19:31,429
these things back to the observability
platform or wherever the developers

355
00:19:31,429 --> 00:19:34,529
need to report that back to, so
that whole ecosystem works together.

356
00:19:35,459 --> 00:19:38,529
so as you can see, a lot of
these things are, very similar.

357
00:19:38,579 --> 00:19:42,849
The steps three to eight were exactly
similar, irrespective of any kind

358
00:19:42,849 --> 00:19:44,199
of domain that you would do this in.

359
00:19:44,629 --> 00:19:46,939
And that's the beauty of how
you would actually develop this.

360
00:19:47,349 --> 00:19:47,379
Sure.

361
00:19:48,554 --> 00:19:51,854
Having looked at this case study,
one of the things that really have

362
00:19:51,854 --> 00:19:54,944
to think about is how is this really
helping or how should this be helping?

363
00:19:56,079 --> 00:19:59,849
Today, if you really look at a,
general organization, lots of things

364
00:19:59,879 --> 00:20:02,979
without using significant amount of
platform engineering improvements,

365
00:20:03,699 --> 00:20:07,979
that about, 70 percent of the time for
your developers are overhead based.

366
00:20:08,059 --> 00:20:12,259
what it might surprise you, but
it's only about 30 percent of your

367
00:20:12,259 --> 00:20:14,059
developers time is productive.

368
00:20:14,819 --> 00:20:18,019
The rest of the time is an overhead,
something that is duplicated work,

369
00:20:18,039 --> 00:20:19,389
something that they can avoid.

370
00:20:19,879 --> 00:20:24,069
But applying some platform engineering
principles, what we, what the data shows

371
00:20:24,069 --> 00:20:28,739
us is that it can improve significantly,
your value add can increase significantly

372
00:20:28,749 --> 00:20:30,699
from 30 percent to 60 percent.

373
00:20:31,249 --> 00:20:32,459
This is significant, right?

374
00:20:32,759 --> 00:20:33,629
But is that enough?

375
00:20:34,099 --> 00:20:35,099
probably not, right?

376
00:20:35,119 --> 00:20:37,249
Our goal is to increase
that as much as possible.

377
00:20:38,049 --> 00:20:42,979
So one of the things that we see is that
applying GNI with RACS, you can increase

378
00:20:42,979 --> 00:20:45,839
that further at least up to 90 percent.

379
00:20:46,604 --> 00:20:48,424
I haven't seen a lot of data yet.

380
00:20:48,594 --> 00:20:51,794
I'm starting to see a lot of very
promising data in this space.

381
00:20:52,474 --> 00:20:55,444
But if you have some very specific
data that shows that improvement, I

382
00:20:55,604 --> 00:20:58,224
would love to see, love to talk to
you and see a lot more about that.

383
00:21:00,074 --> 00:21:02,714
you also have to think about, as
you really look at this, what's

384
00:21:02,714 --> 00:21:06,054
the leverage that Gen AI with
WAX is bringing to the table?

385
00:21:06,484 --> 00:21:09,364
We know a lot about the coding
and debugging and the testing

386
00:21:09,364 --> 00:21:10,254
and the monitoring and observing.

387
00:21:10,254 --> 00:21:10,824
Do you think?

388
00:21:10,834 --> 00:21:12,024
Great ideas, Baird.

389
00:21:12,314 --> 00:21:15,114
that platforms, georeferencing
can be applied and improved.

390
00:21:15,364 --> 00:21:19,184
But, there is also significant
leverage that we're seeing within

391
00:21:19,194 --> 00:21:22,304
the solution architecture, the
requirements analysis and user research.

392
00:21:22,354 --> 00:21:25,854
So you should be really thinking
about having that holistic leverage

393
00:21:25,914 --> 00:21:29,424
across your overall ecosystem as you
go through your path to production,

394
00:21:29,454 --> 00:21:32,924
as you really try and make sure that
you've done it and deliver your product.

395
00:21:34,254 --> 00:21:38,014
in conclusion, I just wanted to say
that, AI is literally changing the

396
00:21:38,014 --> 00:21:40,584
way we are doing platform engineering.

397
00:21:40,584 --> 00:21:44,374
It's definitely pushing some of
the boundaries, but, it's been very

398
00:21:44,374 --> 00:21:46,244
expensive to train some of these LNFs.

399
00:21:46,254 --> 00:21:48,534
So we need to focus on their
parts, make sure that we get

400
00:21:48,534 --> 00:21:49,714
the right kind of focus there.

401
00:21:50,164 --> 00:21:53,094
and ultimately, the difference
is going to be the racks, right?

402
00:21:53,304 --> 00:21:57,484
Especially when you're doing the
domain specific work, the real benefit

403
00:21:57,504 --> 00:22:00,704
is going to be by having the racks,
that taking it to that next step.

404
00:22:01,114 --> 00:22:04,984
and one thing never to forget is
the fact that why are we doing this?

405
00:22:04,994 --> 00:22:07,724
And metrics really tell you
why you're doing it, what you

406
00:22:07,724 --> 00:22:08,664
want to achieve out of it.

407
00:22:09,064 --> 00:22:10,254
Those things doesn't change.

408
00:22:10,554 --> 00:22:13,704
So if you really have one eye on
the metrics, you should be able

409
00:22:13,704 --> 00:22:17,384
to always find that, okay, is this
what I'm really trying to achieve?

410
00:22:17,424 --> 00:22:18,804
And am I able to achieve that?

411
00:22:19,034 --> 00:22:21,494
So with that said, I
just wanted to thank you.

412
00:22:21,724 --> 00:22:26,164
For your time, if you want to connect
with me, go ahead and connect me

413
00:22:26,164 --> 00:22:27,924
on LinkedIn using that QR code.

414
00:22:27,924 --> 00:22:31,184
If you want to learn more about my
company, definitely check out that.

415
00:22:31,344 --> 00:22:35,165
So thank you so much and I
appreciate you listening to this.

