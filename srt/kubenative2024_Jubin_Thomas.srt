1
00:00:14,000 --> 00:00:14,850
Good day, everyone.

2
00:00:14,910 --> 00:00:15,910
I am Jubin Thomas.

3
00:00:15,990 --> 00:00:19,850
I work as a technical architect at
Signet Jewelers, having 14 plus years of

4
00:00:19,850 --> 00:00:21,450
experience in supply chain and retail.

5
00:00:22,170 --> 00:00:24,320
I'm also a senior member of IEEE.

6
00:00:24,930 --> 00:00:28,239
Before I move on to my topic, I
would like to thank Mark and all the

7
00:00:28,240 --> 00:00:32,369
organizers of CubeNative Conference
2024 to invite me as a speaker.

8
00:00:32,870 --> 00:00:37,300
Today, I would like to discuss
about architecting order management

9
00:00:37,300 --> 00:00:41,560
systems with scalable microservices
with the help of Kubernetes.

10
00:00:42,689 --> 00:00:47,509
So as you all know, microservices has
taken the world by storm and order

11
00:00:47,509 --> 00:00:52,949
management system is one of the systems
where microservices has actually helped

12
00:00:53,430 --> 00:01:00,349
to scale in a very some of the companies
who already have the implementation

13
00:01:00,349 --> 00:01:07,269
of microservices are Netflix, Spotify,
eBay, Amazon Web Services, Airbnb, Uber,

14
00:01:07,739 --> 00:01:10,429
Nike, Twitter, Walmart, and Verizon.

15
00:01:12,389 --> 00:01:18,969
The agenda today is basically to go
over the overview and infrastructure

16
00:01:18,999 --> 00:01:21,059
architecture of microservices.

17
00:01:21,069 --> 00:01:22,549
What are microservices?

18
00:01:23,059 --> 00:01:24,649
When should we use them?

19
00:01:25,199 --> 00:01:27,489
What is the right size for a microservice?

20
00:01:27,489 --> 00:01:29,649
Why is microservice better than monoliths?

21
00:01:30,209 --> 00:01:31,569
Infrastructure architecture.

22
00:01:32,159 --> 00:01:36,739
Then we will go over the software
architecture and design capability

23
00:01:36,740 --> 00:01:41,479
centric design, understanding the
route and a small example of a

24
00:01:41,480 --> 00:01:43,669
shopping menu or a shopping cart.

25
00:01:44,169 --> 00:01:48,939
The microservice scalability,
the disadvantages with the CRUD.

26
00:01:49,509 --> 00:01:53,679
And then we will also discuss about the
testing strategies with microservices

27
00:01:53,689 --> 00:01:55,979
like microservice testing tools.

28
00:01:56,469 --> 00:02:01,459
And finally, we will discuss about
what is docker and kubernetes and

29
00:02:01,489 --> 00:02:06,069
we will go through the kubernetes
architecture and the kubernetes concepts.

30
00:02:08,149 --> 00:02:09,239
So what is a microservice?

31
00:02:09,879 --> 00:02:15,149
Microservice is an approach to a
Engineer focus on building single

32
00:02:15,149 --> 00:02:20,719
function modules with well defined
interface and operations and It basically

33
00:02:20,739 --> 00:02:23,189
minimizes the risk and scope of change.

34
00:02:23,459 --> 00:02:27,319
It is easy to deploy easy to
understand across the business

35
00:02:29,384 --> 00:02:34,404
And the diagram which over here
is something which gives us a good

36
00:02:34,444 --> 00:02:40,094
comparison between a monolith architecture
versus the microservice architecture.

37
00:02:40,444 --> 00:02:45,254
So if you see the image on the left
hand side, it says that there is a

38
00:02:45,254 --> 00:02:48,674
user interface which connects to the
business logic and which connects

39
00:02:48,674 --> 00:02:51,954
to the data layer and data layer is
actually connected to the database.

40
00:02:51,974 --> 00:03:00,449
So there is a monolithic structure in
place, which gives a very hard dependency

41
00:03:00,769 --> 00:03:04,019
of deploying any particular new feature.

42
00:03:04,319 --> 00:03:08,049
But at the same time, if you look
into the microservice architecture,

43
00:03:08,719 --> 00:03:13,059
The same user interface is actually
divided into multiple microservices

44
00:03:13,409 --> 00:03:17,399
and these microservices are actually
connected to the respective database.

45
00:03:17,669 --> 00:03:23,989
So this gives us a flexibility to deploy
these individual components separately.

46
00:03:24,009 --> 00:03:30,549
So that is basically a great advantage
which microservices provides to us.

47
00:03:31,549 --> 00:03:33,889
Now what is the right
size for a microservice?

48
00:03:34,299 --> 00:03:38,729
Now this question comes that, what kind
of size we should have for a microservice

49
00:03:38,729 --> 00:03:42,099
or how can we define the business
logic of a particular microservice.

50
00:03:42,389 --> 00:03:47,599
So the answer to that question is the
business function or domain of the service

51
00:03:47,599 --> 00:03:50,659
determines more important than its scale.

52
00:03:51,479 --> 00:03:56,099
So you know, for example, I was talking
about the order management system.

53
00:03:56,109 --> 00:04:01,259
So like payments is the one of
the module of order management.

54
00:04:01,349 --> 00:04:02,289
And then we have.

55
00:04:02,604 --> 00:04:08,034
checkout as one of the different
module of the auto management system.

56
00:04:08,044 --> 00:04:13,474
These module itself is actually playing
a more important role comparatively than

57
00:04:13,474 --> 00:04:15,854
the scale of these individual modules.

58
00:04:16,254 --> 00:04:21,044
So one microservice might have dozen
of entities and the other the dozen

59
00:04:21,044 --> 00:04:25,104
of entities, more importantly, it
is a part of the microservice play.

60
00:04:26,769 --> 00:04:31,009
And emphasizing user stories will
enable us to precisely outline

61
00:04:31,009 --> 00:04:33,059
the limits of the business domain.

62
00:04:34,059 --> 00:04:36,649
Now, why is Microsoft is
better than monoliths?

63
00:04:37,244 --> 00:04:42,064
So as we discussed in one of the previous
slides, this monolith architecture

64
00:04:42,234 --> 00:04:44,864
is built as a large single unit.

65
00:04:45,184 --> 00:04:48,004
It has RDBMS, which we
call it as database.

66
00:04:48,054 --> 00:04:49,444
Then it has the backend code.

67
00:04:49,664 --> 00:04:51,854
It could be in Java or any other language.

68
00:04:52,174 --> 00:04:56,354
And then we have the front end
code like HTML, JSP and ASP.

69
00:04:56,914 --> 00:05:01,034
And these features additionally
requires the entire unit to be deployed.

70
00:05:01,244 --> 00:05:03,384
See, this is the dependency
which you were talking about.

71
00:05:03,514 --> 00:05:03,544
Okay.

72
00:05:03,659 --> 00:05:09,039
When we need to scale, we have to have
multiple copies of the entire application.

73
00:05:09,579 --> 00:05:12,719
And on the other hand, the
microservices is small.

74
00:05:13,189 --> 00:05:15,409
autonomous services that work together.

75
00:05:15,669 --> 00:05:21,209
It is loosely coupled with bounded
context, and it is a natural consequence

76
00:05:21,209 --> 00:05:24,149
of applying SRP at the architecture level.

77
00:05:26,899 --> 00:05:33,949
And this is a typical flow diagram of
how the monolithic app is in picture

78
00:05:33,959 --> 00:05:36,739
versus the microservice architecture.

79
00:05:36,739 --> 00:05:39,819
So on the left hand side,
the image what we see is.

80
00:05:40,099 --> 00:05:44,869
Basically for a monolith app wherein
we see that there's a UI layer and

81
00:05:44,869 --> 00:05:49,779
then the, business layer, database
layer, and the front end, everything is

82
00:05:49,779 --> 00:05:52,239
all together as a single application.

83
00:05:52,269 --> 00:05:56,289
And as I was talking about the order
management system, so these four

84
00:05:56,289 --> 00:05:59,409
functionality, like the shopping
cart, or basically the checkout

85
00:05:59,419 --> 00:06:04,269
functionality, then the order system,
which basically places the order.

86
00:06:04,269 --> 00:06:08,789
Then we have the customer system, which
basically maintains a track of different

87
00:06:08,789 --> 00:06:10,829
customers for that particular brand.

88
00:06:11,189 --> 00:06:12,839
And then we have the inventory system.

89
00:06:12,839 --> 00:06:18,219
So all of these four systems
is all together binded in a

90
00:06:18,219 --> 00:06:20,229
single monolith application.

91
00:06:20,449 --> 00:06:24,389
But at the same time, if you look
into the right hand side, these

92
00:06:24,679 --> 00:06:29,859
four different applications like the
shopping cart, order, customer, and

93
00:06:29,899 --> 00:06:37,084
inventory, it The dependency is actually
broken here and all these four are

94
00:06:37,274 --> 00:06:39,244
four separate entities altogether.

95
00:06:39,244 --> 00:06:43,094
So customer is a separate entity,
order is a separate entity, shopping

96
00:06:43,104 --> 00:06:45,714
cart is a separate entity, inventory
is actually a separate entity.

97
00:06:46,044 --> 00:06:50,894
And this is the greatest advantage
which microservice provides that it also

98
00:06:51,134 --> 00:06:53,774
helps to dependency of the database.

99
00:06:53,774 --> 00:07:00,874
So if you see customer is actually having
a radius and order is basically in MongoDB

100
00:07:01,084 --> 00:07:05,454
and shopping cart is in SQL server and
inventory is actually the oracle database.

101
00:07:05,464 --> 00:07:09,014
So it gives us the flexibility to
have multiple entities, multiple

102
00:07:09,024 --> 00:07:11,894
databases, but at the same
time it can talk to each other.

103
00:07:12,894 --> 00:07:19,095
Now I will actually go through the the
capability centric design, which is one

104
00:07:19,095 --> 00:07:22,265
of the design technique in microservices.

105
00:07:22,315 --> 00:07:26,565
Basically the business centric development
focuses on business capabilities.

106
00:07:26,695 --> 00:07:31,385
So the microservices is actually
built based on capabilities.

107
00:07:31,395 --> 00:07:36,315
So as we saw the example, which I
was previously telling the example

108
00:07:36,335 --> 00:07:39,745
of order being a separate entity
inventory being a separate entity.

109
00:07:39,955 --> 00:07:41,975
So these are different capabilities.

110
00:07:42,260 --> 00:07:47,130
which this monolith system, which is
order management system can provide.

111
00:07:47,150 --> 00:07:51,150
And the responsibility what we have
right now is to break this monolith

112
00:07:51,160 --> 00:07:54,340
system into multiple microservices.

113
00:07:54,580 --> 00:07:56,970
And each of these individual systems.

114
00:07:57,130 --> 00:08:02,110
functionalities like the inventory
or payments or checkout, all

115
00:08:02,110 --> 00:08:03,630
these are different capabilities.

116
00:08:03,640 --> 00:08:07,020
So here in this case, we see that
each capability is having the

117
00:08:07,020 --> 00:08:08,800
front end back end in the database.

118
00:08:09,100 --> 00:08:12,280
And then there is a product team
which basically operates these

119
00:08:14,570 --> 00:08:15,840
Now understanding the root.

120
00:08:16,270 --> 00:08:21,695
So An aggregate will have one of its
components objects be the aggregate root.

121
00:08:21,855 --> 00:08:25,825
Any references from outside the aggregate
should only go to the aggregate root.

122
00:08:26,245 --> 00:08:29,825
The root can thus ensure the
integrity of the aggregate as a whole.

123
00:08:30,675 --> 00:08:35,965
And if you look into this, the order
is actually connected to all these

124
00:08:36,045 --> 00:08:39,675
different microservices like the payment
strategy and the payment is actually

125
00:08:39,685 --> 00:08:41,915
having credit card, cash, bank transfer.

126
00:08:42,215 --> 00:08:45,245
At the same time, order is actually
connected to the customer because the

127
00:08:45,245 --> 00:08:48,975
customer is the one who places the order
and then the order can have multiple

128
00:08:48,985 --> 00:08:51,405
line items and it has a shipping address.

129
00:08:51,755 --> 00:08:57,585
So this gives us a better picture of
how this is actually divided but at

130
00:08:57,595 --> 00:08:59,175
the same time connected to each other.

131
00:08:59,675 --> 00:09:04,355
Now this is a typical shopping
menu or a shopping cart.

132
00:09:04,385 --> 00:09:09,085
So we have the order being the primary
microservice, and then we have the

133
00:09:09,085 --> 00:09:14,015
do domain layers wherein we have
different entities like order or

134
00:09:14,075 --> 00:09:16,025
item, shipping, address and payment.

135
00:09:16,415 --> 00:09:17,945
And then we have the service port.

136
00:09:18,255 --> 00:09:23,125
Which is Order Repository, Order Service,
Order Web Service, Order Query Web

137
00:09:23,125 --> 00:09:26,735
Service, Shipping Address Web Service,
Payment Web Service, and then we have

138
00:09:26,735 --> 00:09:31,475
the utilities like Order Factory, Order
Status Converter, Record State Converter.

139
00:09:31,705 --> 00:09:32,975
What are these adapters?

140
00:09:33,075 --> 00:09:38,025
So we have these several adapters
which helps us to connect to the system

141
00:09:38,055 --> 00:09:41,955
individually like the order repository
adapter, order service adapter, order

142
00:09:41,955 --> 00:09:46,445
web service adapter, order query web
service adapter, and so on and so forth.

143
00:09:46,685 --> 00:09:50,455
So these adapters, which basically
consists of actual implementation

144
00:09:50,455 --> 00:09:54,545
of the ports like database
access, web services, API, etc.

145
00:09:54,955 --> 00:09:59,455
And the converters are actually
used to convert an enum value to a

146
00:09:59,455 --> 00:10:02,025
proper integer value in the database.

147
00:10:02,035 --> 00:10:05,624
For example, order status
complete is mapped to an integer

148
00:10:05,625 --> 00:10:06,755
value 100 in the database.

149
00:10:09,300 --> 00:10:13,860
Now CRUD, as we all know about CRUD,
CRUD is is basically create, read,

150
00:10:13,910 --> 00:10:15,830
update, and delete functionality.

151
00:10:16,170 --> 00:10:19,930
So it basically has a presentation layer,
then a service layer, then business

152
00:10:19,930 --> 00:10:24,700
logic layer, and the data access layer,
where we can basically query the database

153
00:10:24,740 --> 00:10:26,790
and push the updates to the database.

154
00:10:27,200 --> 00:10:29,120
So what is the disadvantage with CRUD?

155
00:10:29,290 --> 00:10:33,480
It is basically doing a mismatch between
the read and write representations

156
00:10:33,480 --> 00:10:37,785
of the data, It risks data connection
while records are logged in the

157
00:10:37,785 --> 00:10:42,515
data store in a collaborative domain
where multiple actors operate in

158
00:10:42,535 --> 00:10:44,735
parallel on the same set of data.

159
00:10:45,035 --> 00:10:50,555
These risks increase as the complexity
and throughput of the system grows.

160
00:10:50,935 --> 00:10:54,434
It can manage security and
permission more quickly.

161
00:10:54,625 --> 00:11:00,465
complex because each entity is subject
to both read and write operations, which

162
00:11:00,465 --> 00:11:02,905
might expose data in the wrong context.

163
00:11:04,695 --> 00:11:09,165
Now we will discuss about the different
testing strategies with microservice.

164
00:11:09,195 --> 00:11:17,045
Just like the other systems, Microservice
also has the various testing like we

165
00:11:17,045 --> 00:11:20,505
have the unit testing is basically the
smallest piece of testable software

166
00:11:20,505 --> 00:11:24,145
in the application to determine
whether it behaves as expected.

167
00:11:24,615 --> 00:11:27,975
Then we have the component
testing, which basically helps

168
00:11:27,975 --> 00:11:30,145
us to do component level testing.

169
00:11:30,295 --> 00:11:33,335
Then finally, then we also have
the integration testing, which

170
00:11:33,335 --> 00:11:37,465
defines the communication paths and
integrations between components to

171
00:11:37,515 --> 00:11:39,175
test and detect interface errors.

172
00:11:39,260 --> 00:11:39,780
defects.

173
00:11:40,160 --> 00:11:44,500
And then we have the integrate integration
contract testing, wherein we basically

174
00:11:44,730 --> 00:11:49,270
do a contract Test within the boundary
of an external system verifying that

175
00:11:49,270 --> 00:11:53,970
it meets the contract expected by a
consuming service And finally there is

176
00:11:53,970 --> 00:11:57,400
an end to end testing which basically
tells that a system meets external

177
00:11:57,680 --> 00:12:01,600
requirements and achieves its goals
Testing the entire system from end to

178
00:12:01,600 --> 00:12:07,065
end And some of the tools which we can
actually use for microservice testing

179
00:12:07,285 --> 00:12:12,555
is Cucumber and JUnit, which helps us
to do a mock, and then we have Mockito,

180
00:12:12,595 --> 00:12:19,115
which is a great tool to basically mock
the service responses when each service

181
00:12:19,115 --> 00:12:20,515
is actually connected to the other one.

182
00:12:21,515 --> 00:12:24,435
Moving on to the side of deployment land.

183
00:12:24,445 --> 00:12:27,415
Now, I actually spoke about microservices.

184
00:12:27,415 --> 00:12:28,985
I spoke about the monolith systems.

185
00:12:29,355 --> 00:12:33,665
Now, when it comes to the
deployment, there are a few things

186
00:12:33,685 --> 00:12:38,315
which microservice comes handy
with, and it really helps a lot.

187
00:12:38,555 --> 00:12:40,685
Especially when we work with docker.

188
00:12:40,975 --> 00:12:41,845
Now, what is a docker?

189
00:12:41,855 --> 00:12:45,475
Docker is an open source platform
for developers and sysadmins

190
00:12:45,475 --> 00:12:49,105
to develop, deploy and run
applications within the containers.

191
00:12:49,505 --> 00:12:52,065
It works on the principle
of build, ship and run.

192
00:12:52,435 --> 00:12:56,955
As you all know that build is a
command, build container images on local

193
00:12:56,965 --> 00:13:01,805
laptop or automated through continuous
integration pipeline ship container images

194
00:13:01,805 --> 00:13:03,865
through container registry, et cetera.

195
00:13:03,895 --> 00:13:06,975
And run is to run anywhere
on cloud and on prem.

196
00:13:07,770 --> 00:13:11,620
So this is a typical docker
architecture where we have a client

197
00:13:11,650 --> 00:13:16,690
side, which basically does a docker
build, docker pull and docker run.

198
00:13:16,980 --> 00:13:21,240
And then we have a docker host,
within that we have a docker daemon

199
00:13:21,280 --> 00:13:23,220
and the containers with the images.

200
00:13:23,540 --> 00:13:27,180
And at the other hand it has a
registry, and all of these are

201
00:13:27,180 --> 00:13:28,640
actually interconnected to each other.

202
00:13:28,640 --> 00:13:30,490
Now let me talk about kubernetes.

203
00:13:30,780 --> 00:13:34,980
Kubernetes is an open source
system for container orchestration.

204
00:13:35,000 --> 00:13:37,820
So we spoke about the
docker and the containers.

205
00:13:37,820 --> 00:13:43,334
So kubernetes is basically a platform
which helps us to manage these containers.

206
00:13:43,405 --> 00:13:45,345
containers in an effective way.

207
00:13:45,755 --> 00:13:50,375
And it is focused around scheduling,
scaling self healing and auto repairing.

208
00:13:52,245 --> 00:13:57,255
So this is a typical Kubernetes
architecture where we have an API, which

209
00:13:57,275 --> 00:14:00,825
basically connects to CLI interface.

210
00:14:01,125 --> 00:14:04,265
And then we have a Kubernetes
masters, which connects to multiple

211
00:14:04,325 --> 00:14:05,955
nodes and the image registry.

212
00:14:06,955 --> 00:14:08,215
And there are.

213
00:14:08,545 --> 00:14:13,405
certain kubernetes parameters which
I would like to talk about and

214
00:14:13,405 --> 00:14:16,295
when we talk about kubernetes, we
definitely talk about these things.

215
00:14:16,295 --> 00:14:17,505
So one is pods.

216
00:14:18,335 --> 00:14:21,715
So pods is one or more
containers and volumes.

217
00:14:22,415 --> 00:14:23,925
It has shared namespace.

218
00:14:24,300 --> 00:14:26,919
one IP, it has one IP per pod.

219
00:14:28,600 --> 00:14:29,940
And then we have services.

220
00:14:30,260 --> 00:14:35,100
Services is something which gives
us a stable network endpoint and

221
00:14:35,100 --> 00:14:38,570
it has a label selector and also
the load balancing within it.

222
00:14:39,070 --> 00:14:41,580
This is what I would like
to share as part of my talk.

223
00:14:41,580 --> 00:14:44,280
I thank you so much to listen to me.

224
00:14:44,310 --> 00:14:45,700
This is my email ID, jubin.

225
00:14:45,730 --> 00:14:47,360
thomas at itriplee.

226
00:14:47,360 --> 00:14:47,390
org.

227
00:14:47,740 --> 00:14:50,350
I request you to please reach out
to me if you have any questions.

228
00:14:50,630 --> 00:14:52,390
And once again, thank you for having me.

