1
00:00:13,999 --> 00:00:17,950
I am Alexander Kolubov, and today
I am going to talk on high load

2
00:00:17,950 --> 00:00:20,189
systems and the challenges they bring.

3
00:00:20,909 --> 00:00:25,189
My presentation will be based on my
extensive experience in social network

4
00:00:25,190 --> 00:00:27,150
development and product management.

5
00:00:27,660 --> 00:00:31,419
If you are interested, fasten
the seatbelts and join the ride.

6
00:00:32,655 --> 00:00:36,614
First, let me introduce myself and
share some light on my experience.

7
00:00:37,595 --> 00:00:41,464
I worked as a team lead at one
of the biggest social networks,

8
00:00:41,625 --> 00:00:46,344
where I led teams up to 10 members,
including sales specialists, and

9
00:00:46,384 --> 00:00:50,034
analysts, and project managers.

10
00:00:50,195 --> 00:00:54,824
As a developer, I designed, developed,
and maintained various features for the

11
00:00:54,835 --> 00:01:01,695
desktop and mobile web versions of a
social network across backend, frontend,

12
00:01:02,485 --> 00:01:08,015
I have redesigned the social network
interface for multiple user sections,

13
00:01:08,524 --> 00:01:13,625
completely rewrote network widgets
for external sites, maintained privacy

14
00:01:13,655 --> 00:01:19,354
settings for closed profiles and content
archiving function, overhauled the backend

15
00:01:19,444 --> 00:01:24,895
and frontend for the mail notification
system, handling millions of emails daily.

16
00:01:25,380 --> 00:01:30,649
And finally, I have created a system
for conducting NPS and CSI surveys

17
00:01:30,740 --> 00:01:36,039
that covered the two largest Russian
social networks and some of their users.

18
00:01:37,055 --> 00:01:40,085
Today, I want to touch upon the
following aspects of the topic.

19
00:01:40,155 --> 00:01:45,715
We'll briefly discuss how to define
if the system is high load or not.

20
00:01:46,704 --> 00:01:51,274
Then we'll talk about the way high
loads change the system requirements.

21
00:01:51,615 --> 00:01:56,484
And based on my expertise, I'll highlight
what approaches and technologies can

22
00:01:56,505 --> 00:01:58,405
help overcome high load challenges.

23
00:02:00,255 --> 00:02:01,515
Let's begin with definition.

24
00:02:02,154 --> 00:02:04,735
What system can we call high load?

25
00:02:05,340 --> 00:02:08,930
A system is considered high load
if it meets several criteria.

26
00:02:09,410 --> 00:02:11,260
First of all, high request volume.

27
00:02:12,440 --> 00:02:16,400
The system must hold
millions of requests daily.

28
00:02:16,680 --> 00:02:19,099
Second is a large user base.

29
00:02:20,210 --> 00:02:22,779
Support millions of concurrent users.

30
00:02:24,820 --> 00:02:27,089
Next is extensive data management.

31
00:02:27,609 --> 00:02:30,359
Manage terabytes or
even petabytes of data.

32
00:02:31,170 --> 00:02:35,500
Performance and scalability maintains
responsiveness under increasing loads.

33
00:02:36,674 --> 00:02:41,435
Complex operations performs resource
intensive calculations or data processing.

34
00:02:42,375 --> 00:02:46,834
High reliability requires 99.

35
00:02:46,915 --> 00:02:49,165
9 percent or higher time.

36
00:02:50,375 --> 00:02:53,804
Geographical distribution
serves users across multiple

37
00:02:53,804 --> 00:02:55,644
locations with low latency.

38
00:02:56,715 --> 00:03:00,225
Concrete processing handles
numerous concurrent operations

39
00:03:00,295 --> 00:03:01,955
and finally load balancing.

40
00:03:02,500 --> 00:03:05,930
Distributes traffic effectively
to avoid bottlenecks.

41
00:03:07,590 --> 00:03:10,460
Basically, this is what we
already can call High Load.

42
00:03:11,040 --> 00:03:15,510
One more thing I want to mention is
that if I were to give a one sentence

43
00:03:15,510 --> 00:03:20,790
definition of what High Load system is,
I would say that High Load is it when

44
00:03:20,979 --> 00:03:26,259
usual methods for processing requests,
storing data, and managing infrastructure

45
00:03:26,289 --> 00:03:30,380
are no longer enough, and there is
a need to create custom solutions.

46
00:03:31,810 --> 00:03:35,030
Let's take a look at VK
social network loads.

47
00:03:35,190 --> 00:03:39,740
Here is what the system had to
process already a couple of years ago.

48
00:03:40,589 --> 00:03:42,630
100 million users per month.

49
00:03:43,274 --> 00:03:50,855
100 million posts and content creations
per day, and 9 billion post views per day.

50
00:03:52,715 --> 00:03:56,605
The numbers you've seen on the
previous slide results in these

51
00:03:56,625 --> 00:04:00,785
performance metrics, so we can
definitely call VK loads are high.

52
00:04:02,264 --> 00:04:06,564
Now that we have defined that our system
is high load, we can take a step further

53
00:04:06,605 --> 00:04:12,304
and take a look at the difficulties
the management of such systems entails.

54
00:04:13,845 --> 00:04:18,235
First of all, it's performance over
maintaining fast response times and

55
00:04:18,235 --> 00:04:20,334
processing under high load conditions.

56
00:04:20,844 --> 00:04:25,875
Besides, we need to store, retrieve and
process large volumes of data effectively.

57
00:04:26,534 --> 00:04:32,214
Then we'll have to provide that
scalability is possible at any stage.

58
00:04:32,715 --> 00:04:35,985
Ensuring the system remains
operational and available despite

59
00:04:36,015 --> 00:04:37,965
high traffic and potential failures.

60
00:04:38,565 --> 00:04:42,935
And definitely we need to build
systems that can recover from failures

61
00:04:42,974 --> 00:04:44,735
and continue to operate smoothly.

62
00:04:47,045 --> 00:04:51,734
Apart from challenges, high load
systems bring certain risks, and

63
00:04:51,734 --> 00:04:55,075
that is why we have to question
some of the traditional tools.

64
00:04:55,599 --> 00:05:00,190
The main issue with external solutions
is that they are not highly specialized.

65
00:05:00,620 --> 00:05:05,659
Instead, they are designed for broad
market applicability, and it often

66
00:05:05,659 --> 00:05:07,530
comes at the expense of performance.

67
00:05:08,229 --> 00:05:10,140
There is also an issue with security.

68
00:05:10,439 --> 00:05:14,770
On one hand, external solutions are
usually well tested due to their

69
00:05:14,790 --> 00:05:19,985
large user base, But on the other
hand, fixing identified issues

70
00:05:19,985 --> 00:05:22,455
quickly and precisely is challenging.

71
00:05:22,945 --> 00:05:28,135
Moreover, updating to a fixed version
might lead to compatibility problems.

72
00:05:29,115 --> 00:05:32,994
External solutions also require
ongoing tweaking and fixing, which

73
00:05:32,994 --> 00:05:37,105
is very difficult, unless you're
a committer of that solution.

74
00:05:38,164 --> 00:05:40,604
And finally, they may
not scale effectively.

75
00:05:43,160 --> 00:05:47,790
Naturally, with the growing loads,
reliability, data management,

76
00:05:47,790 --> 00:05:49,620
scaling requirements are increasing.

77
00:05:50,719 --> 00:05:55,340
For example, in the past, downtime
for maintenance was acceptable.

78
00:05:55,910 --> 00:05:59,980
Users had lower expectations
and fewer alternatives.

79
00:06:01,010 --> 00:06:04,980
Today, with the vast availability
of online services and the high

80
00:06:04,980 --> 00:06:09,380
competition among them, even short
periods of downtime can lead to

81
00:06:09,380 --> 00:06:14,979
significant user dissatisfaction and
negatively affect net promoter score.

82
00:06:16,969 --> 00:06:21,360
Quick recovery used to mean a
service was never considered down.

83
00:06:22,470 --> 00:06:28,900
Today, according to the five
nines standard, it's mean 99.

84
00:06:28,950 --> 00:06:34,100
999 percent uptime, which is often
referenced in the tech industry,

85
00:06:34,220 --> 00:06:38,579
only about five minutes of downtime
per year are considered acceptable.

86
00:06:40,649 --> 00:06:45,399
Also users previously kept
backups, but now cloud services

87
00:06:45,399 --> 00:06:47,559
must ensure zero data loss.

88
00:06:49,515 --> 00:06:54,015
While systems were once planned in
advance, there is now a need for them

89
00:06:54,015 --> 00:06:59,155
to scale linearly at any moment due
to possible explosive audience growth.

90
00:07:00,425 --> 00:07:03,015
And convenience and time to market.

91
00:07:03,374 --> 00:07:06,295
In a competitive environment,
it's essential to launch

92
00:07:06,295 --> 00:07:07,699
features quickly and efficiently.

93
00:07:10,300 --> 00:07:14,400
Further on, we'll discuss some possible
ways on how to overcome these challenges

94
00:07:14,400 --> 00:07:16,960
and meet the highly lowered requirements.

95
00:07:18,890 --> 00:07:23,390
Here you can see how VK social
network grew and gradually transformed

96
00:07:23,390 --> 00:07:28,380
its architecture and adapted or
created technologies that suited

97
00:07:28,530 --> 00:07:30,680
the scale and new requirements.

98
00:07:32,099 --> 00:07:32,849
Here is what happened.

99
00:07:33,630 --> 00:07:37,630
As long as platform growth
attracted a large audience,

100
00:07:38,070 --> 00:07:42,629
numerous bottlenecks appeared and
optimizations became a necessity.

101
00:07:44,800 --> 00:07:52,040
Databases could no longer keep up, project
code base became too large and too slow.

102
00:07:52,509 --> 00:07:57,429
The volume of user generated content
also increased, creating new bottlenecks.

103
00:07:59,180 --> 00:08:05,470
In normal sized projects, traditional
databases like MySQL and PostgreSQL,

104
00:08:05,590 --> 00:08:08,399
etc., can meet all your needs.

105
00:08:08,770 --> 00:08:12,779
However, in high load projects,
each need often requires a

106
00:08:12,780 --> 00:08:14,580
separate data storage solution.

107
00:08:15,825 --> 00:08:19,914
As the load increased, it became
crucial to switch to custom, highly

108
00:08:19,914 --> 00:08:27,154
specialized databases with data stored
in simple, fast, low level structures.

109
00:08:27,715 --> 00:08:35,144
In 2009, when relational databases
couldn't be effectively, couldn't

110
00:08:35,144 --> 00:08:38,934
effectively handle the growing
load, the team started developing

111
00:08:38,944 --> 00:08:41,424
their own data storage engines.

112
00:08:43,235 --> 00:08:49,605
This engine functions as microservices
with embedded databases written in C

113
00:08:49,615 --> 00:08:57,365
or C Currently, there are about 800
engine clusters, each responsible

114
00:08:57,385 --> 00:09:02,164
for its own logic, such as messages,
recommendations, photos, hints,

115
00:09:02,285 --> 00:09:04,844
letters, lists, logs, news, etc.

116
00:09:05,444 --> 00:09:10,814
For each task needing a specific
data structure or unusual queries,

117
00:09:10,854 --> 00:09:13,535
the FC team creates a new engine.

118
00:09:14,580 --> 00:09:17,980
The custom engines proved
to be much more efficient.

119
00:09:18,550 --> 00:09:21,510
Engines use simple data
structures, as I said.

120
00:09:21,520 --> 00:09:26,799
In some cases, they store data
as nearly bare indexes leading to

121
00:09:26,809 --> 00:09:30,529
minimal structuring and processing
and at the reading stage.

122
00:09:30,839 --> 00:09:33,939
This approach increased data
access and processing speed.

123
00:09:35,649 --> 00:09:39,089
We also get more efficient
data replication and sharding.

124
00:09:39,489 --> 00:09:45,659
Reliance on master slave replication
and strict data level sharding enables

125
00:09:45,909 --> 00:09:48,389
horizontal scaling without any issues.

126
00:09:50,109 --> 00:09:52,099
Also, all data is heavily cached.

127
00:09:52,664 --> 00:09:54,564
often pre computed and in advance.

128
00:09:54,565 --> 00:09:59,674
Caches are sharded with custom
wrappers for automatic keys

129
00:09:59,674 --> 00:10:01,624
count calculation on code level.

130
00:10:03,044 --> 00:10:08,364
In large systems like ours, caching moves
from merely improving performance as main

131
00:10:08,374 --> 00:10:10,944
goal to reducing load on the backend.

132
00:10:13,854 --> 00:10:16,974
The next challenge was optimizing
the application code itself.

133
00:10:17,964 --> 00:10:23,194
It was written in PHP and became too slow,
but changing the language was impossible.

134
00:10:23,194 --> 00:10:26,259
The with millions of lines
of code in the project.

135
00:10:26,929 --> 00:10:33,699
So the goal of QPHP compiler is
to transform PHP code into C This

136
00:10:33,699 --> 00:10:38,389
approach boosts performance without
the extensive problems associated

137
00:10:38,459 --> 00:10:40,799
with rewriting the entire code base.

138
00:10:41,349 --> 00:10:44,189
The team started improving the
system from bottlenecks and

139
00:10:44,189 --> 00:10:45,869
for them it was the language.

140
00:10:46,929 --> 00:10:47,989
Not the code itself.

141
00:10:48,989 --> 00:10:54,739
Finally, in real production environments,
KPHP proved to be from seven to

142
00:10:54,799 --> 00:10:56,719
10 times faster than the standard.

143
00:10:57,359 --> 00:10:58,469
Just simple PHP.

144
00:11:00,379 --> 00:11:03,079
KPHP was adopted as a backend of VK.

145
00:11:03,589 --> 00:11:10,189
By now it's supports PHP 7 and
8 features, making it compatible

146
00:11:10,219 --> 00:11:12,039
with modern PHP standards.

147
00:11:12,089 --> 00:11:16,549
KPHP allows fast compilation and
efficient development cycles.

148
00:11:17,644 --> 00:11:23,224
It enforces strict typing to reduce
bugs and improve code quality, and uses

149
00:11:23,264 --> 00:11:25,384
shared memory for efficient management.

150
00:11:26,404 --> 00:11:31,394
The system supports parallelization
and coroutines so multiple

151
00:11:31,394 --> 00:11:36,514
processes can run simultaneously,
and optimizes code flow in line.

152
00:11:38,054 --> 00:11:42,134
It enhances performance on systems
with non uniform memory access.

153
00:11:42,205 --> 00:11:48,384
Then, with the NullVerify linter, the team
enhanced code quality and reliability.

154
00:11:49,144 --> 00:11:53,844
NullVerify is designed for large
codebases and focuses on analyzing

155
00:11:53,845 --> 00:11:55,594
git divs before they are pushed.

156
00:11:56,734 --> 00:12:02,354
It indexes around 1 million lines
of code per second and analyzes

157
00:12:02,354 --> 00:12:04,464
about 100, 000 lines per second.

158
00:12:06,084 --> 00:12:08,884
Besides, it can run on
standard PHP projects.

159
00:12:11,574 --> 00:12:16,374
Application was also partly transitioned
to a microservices architecture

160
00:12:16,944 --> 00:12:18,524
to accelerate time to market.

161
00:12:19,284 --> 00:12:23,544
This shift allowed to develop services
in various programming languages.

162
00:12:23,944 --> 00:12:25,004
It also provided.

163
00:12:26,979 --> 00:12:29,599
greater flexibility in
the development process.

164
00:12:30,679 --> 00:12:36,019
By breaking down the system into smaller
independent services, it became possible

165
00:12:36,619 --> 00:12:42,089
to deploy updates more rapidly and ensure
that each component can be optimized

166
00:12:42,089 --> 00:12:43,719
with the most suitable technology.

167
00:12:44,789 --> 00:12:51,269
As I have said, after optimizing database
and code, the team began breaking the

168
00:12:51,269 --> 00:12:56,199
project into optimized microservices,
and the focus shifted to addressing

169
00:12:56,219 --> 00:13:00,909
the most significant bottlenecks
in content, storage, and delivery.

170
00:13:03,889 --> 00:13:07,909
Images emerged as a critical
bottleneck in the social network.

171
00:13:08,719 --> 00:13:13,039
So the problem is that the same image
needs to be displayed in multiple

172
00:13:13,039 --> 00:13:14,659
sizes due to interface issues.

173
00:13:14,779 --> 00:13:18,099
requirements and different
platforms, mobile with retina,

174
00:13:18,119 --> 00:13:21,769
non retina, web, and so on.

175
00:13:21,789 --> 00:13:26,809
Before the resized images
before this, before changes to

176
00:13:26,809 --> 00:13:30,079
the resized images, occupied a
significant amount of storage space.

177
00:13:31,439 --> 00:13:37,909
But now the team eliminated breakout sizes
and instead implemented Dynamic Resetting.

178
00:13:38,789 --> 00:13:43,699
They introduced another microservice
called Image Processor that

179
00:13:43,989 --> 00:13:46,549
generates required sizes on the fly.

180
00:13:47,249 --> 00:13:51,819
Additionally, they transitioned
to serving images in WP format.

181
00:13:53,499 --> 00:13:55,659
This change was very cost effective.

182
00:13:56,459 --> 00:14:00,609
The optimizations led to significant
improvements as highlighted on the slide.

183
00:14:02,359 --> 00:14:05,939
So it's always worth identifying
and optimizing the biggest

184
00:14:05,959 --> 00:14:08,179
bottlenecks for better performance.

185
00:14:09,274 --> 00:14:14,284
While the choice of technologies is
unique for each high load company,

186
00:14:15,264 --> 00:14:19,454
many approaches overlap and demonstrate
effectiveness across the board.

187
00:14:20,419 --> 00:14:25,149
We've discussed some of the VK's
strategies, and it's worth noting

188
00:14:25,159 --> 00:14:29,499
that many of other tech giants
also employ similar approaches

189
00:14:29,539 --> 00:14:31,359
to tackle high load challenges.

190
00:14:32,669 --> 00:14:36,309
For example, Netflix used a
combination of micro services

191
00:14:36,809 --> 00:14:40,759
and distributed architecture
to deliver content efficiently.

192
00:14:41,839 --> 00:14:43,859
They implemented caching
strategies using EV cache.

193
00:14:45,229 --> 00:14:48,749
and have developed their
own data storage solutions.

194
00:14:49,979 --> 00:14:53,989
As one of the Russian's largest tech
companies, Yandex uses a variety

195
00:14:54,079 --> 00:14:58,749
of in house databases and caching
solutions to manage its search engines.

196
00:14:59,829 --> 00:15:02,239
and other services.

197
00:15:02,709 --> 00:15:08,569
I cannot but mention Clickhouse here,
a highly specialized database developed

198
00:15:08,579 --> 00:15:10,729
by Yandex to meet its specific needs.

199
00:15:11,999 --> 00:15:16,369
This solution proved to be so
fast and efficient that it's

200
00:15:16,379 --> 00:15:17,759
now widely used by others.

201
00:15:18,714 --> 00:15:23,714
Yandex created an open source database
management system that stores and process

202
00:15:23,714 --> 00:15:29,154
data by columns rather than rows and
its highly performance query processing

203
00:15:29,154 --> 00:15:34,154
makes it ideal for handling large
volumes of data and real time analytics.

204
00:15:34,734 --> 00:15:35,785
VK also uses.

205
00:15:37,784 --> 00:15:42,024
LinkedIn implements a distributed
storage system called Espresso

206
00:15:43,074 --> 00:15:48,024
for its real time data needs and
leverages caching with Apache Kafka

207
00:15:48,054 --> 00:15:49,734
to manage high throughput messaging.

208
00:15:50,704 --> 00:15:54,244
Tweeter employs a custom built
storage solution called Manhattan

209
00:15:54,254 --> 00:15:59,734
designed to handle large
volumes of tweets and user data.

210
00:16:01,254 --> 00:16:03,014
Same decisions in all companies.

211
00:16:03,514 --> 00:16:07,124
Wrapping up, let's us quickly
revise that we discussed today.

212
00:16:08,244 --> 00:16:12,234
First of all, high load systems are
applications built to support a large

213
00:16:12,254 --> 00:16:16,734
number of users and transactions
at the same time, and they require

214
00:16:16,794 --> 00:16:18,814
excellent performance and reliability.

215
00:16:19,284 --> 00:16:24,694
Second, the challenges of high load
systems includes limits of scalability,

216
00:16:24,694 --> 00:16:29,974
reliability issues, performance
slowdowns, and complicated integrations.

217
00:16:31,469 --> 00:16:34,989
Then we've mentioned that high
load systems have specific

218
00:16:34,989 --> 00:16:39,529
requirements, preventing data loss,
allowing fast feature updates,

219
00:16:39,879 --> 00:16:41,679
and keeping downtime to a minimum.

220
00:16:43,059 --> 00:16:46,499
Next, using external
solutions can become risky.

221
00:16:46,939 --> 00:16:51,959
Under high load, so often there is a
need to go for some custom solution.

222
00:16:51,960 --> 00:16:53,609
Where to begin?

223
00:16:53,899 --> 00:16:58,779
You need to identify the key bottlenecks
and then find a way to approach them.

224
00:16:59,499 --> 00:17:01,749
So this is where the optimizations begin.

225
00:17:02,929 --> 00:17:06,219
Among other technologies, high load
systems usually rely on effective

226
00:17:06,219 --> 00:17:11,129
scalable data storage with good
caching, compiled languages, distributed

227
00:17:11,159 --> 00:17:12,769
architecture, and good tooling.

228
00:17:13,429 --> 00:17:18,339
And still, there are no fixed rules
for creating high load applications.

229
00:17:18,599 --> 00:17:20,779
It's always an experimental process.

230
00:17:22,179 --> 00:17:23,439
Thank you for your time.

231
00:17:23,439 --> 00:17:28,363
If you have any questions on the
topic, I will be glad to answer them.

232
00:17:28,363 --> 00:17:30,565
Feel free to message me in Telegram.

233
00:17:30,565 --> 00:17:30,879
Bye.

