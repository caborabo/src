1
00:00:14,120 --> 00:00:14,850
Hello, everyone.

2
00:00:15,100 --> 00:00:17,019
Super happy to join COM32.

3
00:00:17,510 --> 00:00:20,250
This is Lone from
Electrolux Group in Sweden.

4
00:00:20,599 --> 00:00:25,260
Today, my colleague Vladimir and
I are going to share our work in

5
00:00:25,260 --> 00:00:27,250
the field of platform engineering.

6
00:00:27,700 --> 00:00:31,069
Including infrastructure,
orchestration and cost engineering.

7
00:00:31,810 --> 00:00:34,930
So today's talk will be
divided into four parts.

8
00:00:35,140 --> 00:00:39,130
First, I will briefly introduce
the context of the whole work.

9
00:00:39,640 --> 00:00:45,699
Secondly, Vladimir will share more about
infrastructure orchestration with the

10
00:00:45,699 --> 00:00:48,199
help of our internal developer platform.

11
00:00:48,799 --> 00:00:52,310
Then I will talk more about
cost engineering and also

12
00:00:52,350 --> 00:00:53,890
our open source projects.

13
00:00:56,185 --> 00:00:58,165
Let's start from the context.

14
00:00:58,825 --> 00:01:02,495
At Electrolux, there are many
categories of appliances.

15
00:01:03,105 --> 00:01:07,585
In our organization, we mainly
work on the home appliances,

16
00:01:07,815 --> 00:01:09,434
including three categories.

17
00:01:09,725 --> 00:01:15,304
Taste, an oven, for example, care,
a washing machine, and well being,

18
00:01:15,484 --> 00:01:17,274
an air purifier, for example.

19
00:01:18,174 --> 00:01:19,975
These are connected appliances.

20
00:01:20,715 --> 00:01:25,695
Imagine this lady bought our oven,
made it connected to the internet

21
00:01:25,715 --> 00:01:27,384
via our mobile application.

22
00:01:28,044 --> 00:01:32,334
She places some food in it, and
the camera recognizes the food.

23
00:01:32,645 --> 00:01:36,115
And the suggests the cooking
mode, temperature and duration.

24
00:01:36,664 --> 00:01:40,854
Then the lady can interact with
the oven using voice assistant in

25
00:01:40,854 --> 00:01:45,014
the mobile application and the sets
up everything with several clicks.

26
00:01:45,665 --> 00:01:50,545
Finally, the oven cooks the food and keeps
sending updates to the mobile application.

27
00:01:52,594 --> 00:01:54,564
To support this magical experience.

28
00:01:54,895 --> 00:01:59,955
There are many different developer
teams, and from our side, we work as a

29
00:01:59,955 --> 00:02:05,724
platform engineering team, and we want
to empower our developers to focus on

30
00:02:05,755 --> 00:02:08,155
innovation and reduce the complexity.

31
00:02:08,874 --> 00:02:12,115
That's why we build our own
internal developer platform.

32
00:02:12,380 --> 00:02:15,310
Which is the core of our
developer experience.

33
00:02:16,120 --> 00:02:20,709
In this way, we provide nice support
by adding features to the platform

34
00:02:20,810 --> 00:02:22,700
instead of repeating the work.

35
00:02:23,800 --> 00:02:28,079
Our platform today covers different
domains, like infrastructure,

36
00:02:28,100 --> 00:02:30,910
provisioning, service management, etc.

37
00:02:31,530 --> 00:02:33,249
And we keep adding new domains.

38
00:02:33,770 --> 00:02:37,810
One new domain that we added
recently is cloud cost, which I

39
00:02:37,890 --> 00:02:39,450
will share more during this talk.

40
00:02:40,400 --> 00:02:44,709
However, I have to say that
IDP is not the silver bullet to

41
00:02:44,730 --> 00:02:46,830
address all the complex scenarios.

42
00:02:47,269 --> 00:02:50,540
We will share the whole journey
with you in the next 20 minutes.

43
00:02:50,609 --> 00:02:56,650
So let's take a further look at our
techniques deck, which is very diverse.

44
00:02:57,329 --> 00:03:00,850
Many different coding languages
are used by our developer teams.

45
00:03:01,435 --> 00:03:07,525
We also have a set of CICD tools
like CircleCI, Jenkins, AgileCD, etc.

46
00:03:08,414 --> 00:03:12,344
As appliances are connected from
different places all over the world,

47
00:03:12,644 --> 00:03:17,315
we need to run various of services
globally on different cloud providers

48
00:03:17,614 --> 00:03:20,135
like AWS, Azure, and Google Cloud.

49
00:03:22,205 --> 00:03:25,855
However, at the same time,
this diverse tech stack also

50
00:03:25,855 --> 00:03:27,484
brings us extra challenges.

51
00:03:28,335 --> 00:03:33,765
So feel free to leave a comment if your
developers or you have faced or have been

52
00:03:33,765 --> 00:03:36,265
facing some issues from the left column.

53
00:03:36,954 --> 00:03:41,125
For example, too many different
tools, multi cloud setup, etc.

54
00:03:41,795 --> 00:03:46,984
Or drop another comment if you
work as an SRE and are facing some

55
00:03:46,985 --> 00:03:51,774
challenges in the right column, like
too many direct messages, not enough

56
00:03:51,774 --> 00:03:53,675
time for development, and so on.

57
00:03:54,950 --> 00:03:58,690
If you have challenges in both
columns, we feel you very much because

58
00:03:58,730 --> 00:04:00,570
we were in a similar situation.

59
00:04:01,410 --> 00:04:05,660
Now I would love to invite Vladimir
to share the journey of addressing

60
00:04:05,679 --> 00:04:08,009
these issues with the help of IDP.

61
00:04:08,789 --> 00:04:10,630
Vladimir, welcome to the stage.

62
00:04:11,630 --> 00:04:13,850
I can explain how it was in the past.

63
00:04:14,569 --> 00:04:18,800
Hello everyone, my name is Vladimir,
I am a senior SRE at platform

64
00:04:18,830 --> 00:04:20,659
engineering team at Electrolux.

65
00:04:21,370 --> 00:04:26,880
And about three years ago, SRE team
handled bunch of support requests daily.

66
00:04:27,960 --> 00:04:32,290
Such routine requests as access
control, infrastructure issues, getting

67
00:04:32,290 --> 00:04:34,770
data from prod databases, and etc.

68
00:04:35,310 --> 00:04:39,510
It feels every day that you are the
most important person in the world.

69
00:04:41,030 --> 00:04:45,650
If you work in this direction,
developers are blocked by us and waiting

70
00:04:45,670 --> 00:04:47,500
for our response for a long time.

71
00:04:50,270 --> 00:04:53,400
We decided to automate
as much as possible.

72
00:04:54,079 --> 00:04:58,039
We started with the Python script that
did automation for a Terraform code.

73
00:04:58,669 --> 00:05:03,589
So at least we could do this thing
faster, but it didn't solve the challenge.

74
00:05:04,280 --> 00:05:08,850
We did brainstorming what we should
provide to developers, so they don't

75
00:05:08,859 --> 00:05:12,919
need to ask us for the support and
manage infrastructure by themselves.

76
00:05:13,905 --> 00:05:17,544
When I joined the organization,
there were around 20 developers.

77
00:05:17,545 --> 00:05:22,725
Now there are more than 300, and
our organization is still growing.

78
00:05:23,375 --> 00:05:27,674
Unfortunately, the size of our
platform team is not growing that much.

79
00:05:30,505 --> 00:05:33,924
So we decided to provide
a platform instead.

80
00:05:34,515 --> 00:05:37,005
Our first solution was
a self made platform.

81
00:05:37,385 --> 00:05:40,645
The next, as many in the
industry, we moved to backstage.

82
00:05:41,125 --> 00:05:47,105
When it was released in the beginning,
we used only UI from backstage, but

83
00:05:47,304 --> 00:05:52,784
later we took back in part two, most
of the site features as authentication

84
00:05:53,005 --> 00:05:58,985
catalog, to avoid extra work from our
side, developer journey starts from

85
00:05:58,985 --> 00:06:01,245
getting all necessary access for work.

86
00:06:03,285 --> 00:06:07,585
We launched a user onboarding
plugin for new joiners to replace

87
00:06:07,635 --> 00:06:09,585
the manual steps we did before.

88
00:06:10,780 --> 00:06:14,120
For now, engineering leads
can grant every access that is

89
00:06:14,130 --> 00:06:16,810
required and never reach out to us.

90
00:06:17,700 --> 00:06:22,040
From this slide, you can see different
vendors that are covered by this plugin.

91
00:06:23,040 --> 00:06:28,510
After they got all the necessary
accesses, it comes to infrastructure.

92
00:06:28,850 --> 00:06:33,220
You wouldn't expect developers to be
able to create all resources, even

93
00:06:33,260 --> 00:06:35,140
if they have access to everything.

94
00:06:36,900 --> 00:06:41,830
Somehow, we need to control it and
it's complicated task for them to do

95
00:06:41,830 --> 00:06:46,479
it without knowing the infrastructure
and best practices of setting it up.

96
00:06:47,440 --> 00:06:52,430
So we looked into two types of
use cases, developer usually

97
00:06:52,610 --> 00:06:54,220
come to us for the support.

98
00:06:55,770 --> 00:07:02,260
They want to create a resource like
AWS Kafka, radius, and et cetera.

99
00:07:02,940 --> 00:07:07,820
And second one is, create some new
resources that are not supported by IDP.

100
00:07:08,340 --> 00:07:12,150
For example, for some POC, because
they need to investigate new

101
00:07:12,150 --> 00:07:14,520
technologies to use it in IOT.

102
00:07:15,520 --> 00:07:20,415
We created for them UI, where they can
define and provision their infrastructure.

103
00:07:21,105 --> 00:07:22,425
Here is an example.

104
00:07:23,295 --> 00:07:25,515
Our backend runs in Kubernetes.

105
00:07:25,525 --> 00:07:31,685
So very frequently dev team need to
provision or destroy new EKS clusters.

106
00:07:32,635 --> 00:07:37,865
Developers can go to IDP, select
EKS template and IDP will provision

107
00:07:38,055 --> 00:07:39,445
different resources for them.

108
00:07:41,175 --> 00:07:44,979
For example, it creates
VPC and EKS cluster.

109
00:07:45,710 --> 00:07:49,850
Then it installs autoscaler,
ingress controller, datadoc

110
00:07:49,850 --> 00:07:51,960
agent, and our own cost exporter.

111
00:07:52,775 --> 00:07:57,525
Developers don't need to know how to
configure the cluster to publish logs or

112
00:07:57,525 --> 00:08:00,125
metrics into our observability platform.

113
00:08:00,985 --> 00:08:04,544
Cause data will be displayed
in IDP automatically as well.

114
00:08:07,485 --> 00:08:12,623
Sometimes developers need something
that is not supported by IDP.

115
00:08:12,623 --> 00:08:16,405
They create their own Terraform
modules for provisioning.

116
00:08:16,665 --> 00:08:21,885
The resources, for example, we
don't use DNS configuration so

117
00:08:21,885 --> 00:08:26,865
frequent, and there is no need to
develop IDP, IDP component for that.

118
00:08:29,235 --> 00:08:34,105
Any Terraform code still go via
IDP and we keep managing and

119
00:08:34,115 --> 00:08:36,405
tracking everything in one place.

120
00:08:39,085 --> 00:08:42,455
We already have a bunch of
different infrastructure templates

121
00:08:42,645 --> 00:08:43,985
that defined by our team.

122
00:08:45,235 --> 00:08:48,505
Developers teams can use the
template to provision the

123
00:08:48,515 --> 00:08:50,265
infrastructure they need in the cloud.

124
00:08:50,265 --> 00:08:50,325
Thank you.

125
00:08:51,425 --> 00:08:52,175
How it works?

126
00:08:52,345 --> 00:08:53,695
it has a few layers.

127
00:08:54,405 --> 00:08:57,955
First one is a backend API,
that's serving our developers

128
00:08:58,525 --> 00:09:00,465
and providing interface for them.

129
00:09:01,215 --> 00:09:05,475
Second one is a Terraform modules
that are ready for production usage.

130
00:09:06,505 --> 00:09:13,925
And, third one is a cloud APIs we use for
getting data from cloud, like metadata, or

131
00:09:13,925 --> 00:09:16,695
even using for creating resources there.

132
00:09:17,750 --> 00:09:23,880
We have a versioning of the templates,
and if we make some improvements with a

133
00:09:23,880 --> 00:09:27,920
new version, the running infrastructure
will be updated automatically.

134
00:09:29,860 --> 00:09:34,110
Another is very important part
of the platform is a service.

135
00:09:34,785 --> 00:09:38,635
Developers are deploying it every
day and they need some tool to

136
00:09:38,645 --> 00:09:40,485
see the current status of it.

137
00:09:41,425 --> 00:09:44,675
We added services to the platform as well.

138
00:09:45,285 --> 00:09:49,715
Now they can use different features
like CICD status, secret lists,

139
00:09:50,465 --> 00:09:56,675
images in Docker registry and manage
services in Kubernetes by restarting,

140
00:09:56,945 --> 00:09:58,805
killing the posts and et cetera.

141
00:09:59,385 --> 00:10:03,055
And everything is available
in one page, no need to have

142
00:10:03,055 --> 00:10:04,715
a direct access to clusters.

143
00:10:05,390 --> 00:10:11,160
If they need to roll out change or some
specific version of their service, we

144
00:10:11,300 --> 00:10:13,670
have manual deployment feature for that

145
00:10:16,500 --> 00:10:17,590
by using IDP.

146
00:10:17,950 --> 00:10:22,400
You are getting not only provisioned
infrastructure, but also getting more

147
00:10:22,430 --> 00:10:27,480
information of how your infra works
and, for developer it was a big change.

148
00:10:28,780 --> 00:10:33,570
Once one backend developer shared
with me, that before infrastructure

149
00:10:33,640 --> 00:10:35,480
was a, like a black box.

150
00:10:35,560 --> 00:10:39,280
For him, something abstractive,
scary, and hard to understand.

151
00:10:39,990 --> 00:10:43,490
Starting using IDP, he
learned much more simply.

152
00:10:44,205 --> 00:10:48,215
Because we visualized it,
ensure that it's, tested and

153
00:10:48,215 --> 00:10:49,775
safe for developers to use.

154
00:10:50,315 --> 00:10:53,415
And he was able to start
doing things on his own.

155
00:10:54,175 --> 00:10:59,325
Internally and externally, because of, the
public talks like that one, we started to

156
00:10:59,325 --> 00:11:03,915
receive feedbacks that it would be great
to have same solution in their companies,

157
00:11:04,255 --> 00:11:06,665
since everyone facing the same challenges.

158
00:11:07,175 --> 00:11:12,335
Meanwhile, we were not already that
happy with the support we can provide

159
00:11:12,535 --> 00:11:15,315
because we built IDP very customized.

160
00:11:15,930 --> 00:11:22,780
And, it supported only AWS cloud, while
people in our organization started to

161
00:11:22,780 --> 00:11:25,350
request the Google and Azure clouds.

162
00:11:28,080 --> 00:11:32,620
We did another brainstorming and ended up
with building the open source version that

163
00:11:32,640 --> 00:11:34,870
is going to soon replace our current IDP.

164
00:11:35,520 --> 00:11:38,060
How it looks like you
can see from the video.

165
00:11:38,740 --> 00:11:42,760
The first version of our open source
project is going to be focused

166
00:11:42,760 --> 00:11:44,400
on infrastructure management.

167
00:11:45,260 --> 00:11:51,299
How I showed today and, We will add
much more features for services,

168
00:11:51,329 --> 00:11:53,579
cost, and et cetera, a bit later on.

169
00:11:54,859 --> 00:12:00,049
In summary, we have automated a lot of
daily routine tasks and got the time to

170
00:12:00,059 --> 00:12:05,159
focus more on developing, new features
that will be very helpful for everyone.

171
00:12:06,249 --> 00:12:09,529
In the next part, my friend
Lonk will explain how we

172
00:12:09,529 --> 00:12:11,059
are going to open source it.

173
00:12:11,739 --> 00:12:12,939
Lonk, the stage is yours.

174
00:12:13,939 --> 00:12:14,709
Okay.

175
00:12:15,259 --> 00:12:17,479
Thank you, Vladimir, for
the nice presentation.

176
00:12:18,399 --> 00:12:22,089
Next, I would like to share
more about cost engineering

177
00:12:22,139 --> 00:12:24,129
and our open source projects.

178
00:12:24,889 --> 00:12:28,959
Before going into the details, let's
take a look at an example first.

179
00:12:30,289 --> 00:12:31,579
Or maybe a question to you.

180
00:12:32,079 --> 00:12:34,799
Does your infrastructure
or service burn money?

181
00:12:35,869 --> 00:12:40,869
In our case, Electrolux sells
appliances to consumers with a

182
00:12:40,869 --> 00:12:43,179
fixed price, as shown in the slide.

183
00:12:44,029 --> 00:12:48,149
After buying the appliance, the
consumer can onboard it to cloud

184
00:12:48,259 --> 00:12:51,879
and interact with the appliance
using our mobile application.

185
00:12:53,309 --> 00:12:58,314
This means both the mobile application
And the appliance communicates with our

186
00:12:58,354 --> 00:13:06,134
cloud infrastructure, which constantly
cost some money for consumers, they only

187
00:13:06,134 --> 00:13:08,564
pay for the fixed price of an appliance.

188
00:13:08,884 --> 00:13:13,864
However, for Electrolux is crucial
to keep track of the cloud cost.

189
00:13:16,334 --> 00:13:20,274
In order to better control the
cloud cost, we start from collecting

190
00:13:20,274 --> 00:13:22,124
the needs from different teams.

191
00:13:23,084 --> 00:13:27,684
From the management team, they usually
ask the following questions, like

192
00:13:27,694 --> 00:13:30,394
what is the total cost of Project X?

193
00:13:30,884 --> 00:13:32,184
What is the cost chain?

194
00:13:32,704 --> 00:13:34,494
How to optimize cloud cost?

195
00:13:35,374 --> 00:13:39,524
These questions are usually higher
level questions and require cost

196
00:13:39,564 --> 00:13:41,384
aggregation from multiple clouds.

197
00:13:42,624 --> 00:13:48,074
Then, from developers, they care more
about the cost of their own services.

198
00:13:48,074 --> 00:13:51,194
Thank you for your time, For
example, what is the correlation

199
00:13:51,194 --> 00:13:53,374
between the service usage and cost?

200
00:13:54,544 --> 00:13:57,984
And there's also the same kinds
of needs in your organization?

201
00:13:59,204 --> 00:14:02,064
In many cases, it's true
at our organization.

202
00:14:02,554 --> 00:14:06,754
However, we also received
different feedback from developers.

203
00:14:07,354 --> 00:14:11,824
And their answer is, they just
don't care about cloud cost.

204
00:14:12,444 --> 00:14:16,534
I think I pretty understand this
because developers want to focus more

205
00:14:16,534 --> 00:14:19,264
on writing code and delivering features.

206
00:14:20,669 --> 00:14:26,019
The problem here is that when there is
a spike in cloud cost, the management

207
00:14:26,019 --> 00:14:30,929
team usually asks to analyze the
reason and about how to fix it.

208
00:14:32,109 --> 00:14:36,739
Our platform engineering team can take
the investigation at the beginning, but

209
00:14:36,779 --> 00:14:41,499
we don't know the actual usage of the
related cloud resources by developers.

210
00:14:42,329 --> 00:14:45,489
Then we have to kick the
ball back to developer teams.

211
00:14:45,914 --> 00:14:50,244
And at that time, they have to
care about cloud cost and take

212
00:14:50,284 --> 00:14:52,424
proper actions to control the cost.

213
00:14:53,424 --> 00:14:56,754
In order to address these
issues, there are two directions.

214
00:14:57,464 --> 00:15:01,534
One is multi cloud cost
aggregation, which is helpful for

215
00:15:01,584 --> 00:15:03,264
answering high level questions.

216
00:15:03,944 --> 00:15:07,284
For existing solutions,
there are some limitations.

217
00:15:07,504 --> 00:15:11,814
For example, users might be
overwhelmed by the features, and the

218
00:15:11,824 --> 00:15:16,284
subscription might not ship, even if
you only need several key features.

219
00:15:17,539 --> 00:15:23,429
And direction, another direction focuses
more on developers requirements and is

220
00:15:23,429 --> 00:15:25,879
related to fine grained cost breakdown.

221
00:15:26,949 --> 00:15:32,199
Each cloud provider usually provides nice
tools for analyzing tool, analyzing cost.

222
00:15:32,549 --> 00:15:37,539
But the limitation is one provider can
only support checking its own cloud cost.

223
00:15:38,069 --> 00:15:43,289
Users have to switch among different
tools when they have multiple cloud costs.

224
00:15:44,774 --> 00:15:49,194
So in our organization, we have
implemented two different products

225
00:15:49,244 --> 00:15:51,294
for addressing these limitations.

226
00:15:52,024 --> 00:15:56,434
One is called InfoWallet, an open
sourced multi cloud cost aggregation

227
00:15:56,434 --> 00:15:58,754
solution, which I will introduce later.

228
00:15:59,174 --> 00:16:03,454
And another one is a set of cost
metric exporters, which I will

229
00:16:03,474 --> 00:16:05,164
introduce in the next slide.

230
00:16:07,394 --> 00:16:12,864
So a cost metric exporter is a
service That fetches cost information

231
00:16:12,874 --> 00:16:17,574
from a cloud provider and transform
them into promising as metrics.

232
00:16:18,544 --> 00:16:22,014
For example, we have AWS cost exporter.

233
00:16:22,294 --> 00:16:29,854
It uses AWS cost exporter APIs to get the,
sorry, AWS cost explorer APIs to get the

234
00:16:29,894 --> 00:16:33,244
cost data from an AWS account regularly.

235
00:16:33,944 --> 00:16:37,024
Then expose the data as a premises metric.

236
00:16:37,644 --> 00:16:41,724
Then it becomes available for
different observability platforms

237
00:16:41,794 --> 00:16:43,614
like Grafana and Datadog.

238
00:16:44,849 --> 00:16:47,959
There are several benefits
of having cost exporters.

239
00:16:48,439 --> 00:16:53,159
First, the architecture is vendor
neutral because the costs, cloud

240
00:16:53,159 --> 00:16:57,789
costs from different cloud providers
are finally exposed as metrics.

241
00:16:58,449 --> 00:17:02,619
It's extensible as well because
you can implement your own cost

242
00:17:02,659 --> 00:17:05,429
exporter by following the same steps.

243
00:17:06,809 --> 00:17:10,629
These exporters can be deployed
into different clusters to

244
00:17:10,629 --> 00:17:12,099
make it scalable as well.

245
00:17:12,789 --> 00:17:18,809
Furthermore, The ultimate benefit of
having cost exporters is now we can

246
00:17:18,819 --> 00:17:23,829
have cost metrics displayed on the same
dashboard where service metrics are.

247
00:17:24,649 --> 00:17:28,549
This is very helpful for developers
to understand the correlations.

248
00:17:28,894 --> 00:17:34,944
Between the usage of cloud resources
by a service and its total cost, our

249
00:17:34,944 --> 00:17:39,854
cost exporters have been listed on the
premises official documentation page.

250
00:17:40,184 --> 00:17:44,324
You can find more information where
the link on the slack on the slide.

251
00:17:45,324 --> 00:17:50,154
As mentioned just now, we implemented
another product called InfoWallet,

252
00:17:50,494 --> 00:17:53,414
which is a backstage plug in for
multi cloud cost aggregations.

253
00:17:55,329 --> 00:17:59,779
To use InfoWallet, site admins
only need to configure a set of

254
00:17:59,799 --> 00:18:04,749
integrations, for example, some
credentials for their Azure cloud

255
00:18:04,749 --> 00:18:07,729
subscriptions and AWS cloud accounts.

256
00:18:09,009 --> 00:18:13,139
Then InfoWallet retrieves all the
cost data from different cloud

257
00:18:13,139 --> 00:18:18,099
providers and aggregates the
cost based on the user's needs.

258
00:18:18,819 --> 00:18:23,169
This answers the previously mentioned
questions, like what is Project X

259
00:18:23,169 --> 00:18:25,429
cost in category cloud computing?

260
00:18:25,430 --> 00:18:25,499
for listening.

261
00:18:26,469 --> 00:18:28,899
I hope you become interested in it.

262
00:18:29,039 --> 00:18:33,059
I will show you more about using
it, using our demo website later on.

263
00:18:35,259 --> 00:18:39,499
So before the demo, I would
like to mention that we recently

264
00:18:39,509 --> 00:18:42,959
released a new feature called
Business Metrics on InfoWallet.

265
00:18:43,849 --> 00:18:45,319
Why we need such a feature?

266
00:18:45,999 --> 00:18:51,029
Because without a context, it is
hard to answer whether an increase

267
00:18:51,049 --> 00:18:53,189
of your cloud cost is good or not.

268
00:18:53,819 --> 00:18:59,714
For example, if the number of active users
on your platform has doubled, the increase

269
00:18:59,744 --> 00:19:05,814
of the related cloud cost is not very
high, then it may make sense because the

270
00:19:05,954 --> 00:19:08,754
unit cost of one active user might drop.

271
00:19:09,584 --> 00:19:14,104
That's why unit economics is
a crucial metric to understand

272
00:19:14,154 --> 00:19:15,634
the business efficiency.

273
00:19:17,134 --> 00:19:22,464
InfoWallet enables users to fetch metrics
from different observability platforms

274
00:19:22,784 --> 00:19:25,484
and display them on the same cost graph.

275
00:19:26,354 --> 00:19:28,394
Here I have a real story to share.

276
00:19:29,134 --> 00:19:33,524
Around one month ago, we observed
that the daily cost of the

277
00:19:33,574 --> 00:19:35,774
IoT category increased a lot.

278
00:19:36,234 --> 00:19:40,814
However, the number of connected
appliances did not increase that much.

279
00:19:41,514 --> 00:19:45,044
So we shared the findings
with our IoT team, and they

280
00:19:45,044 --> 00:19:49,114
quickly located the problematic
environment thanks to InfoWallet.

281
00:19:49,989 --> 00:19:54,599
The reason is that some of the air
conditioners are misconfigured to

282
00:19:54,599 --> 00:19:56,589
send unnecessary messages to AWS.

283
00:19:56,589 --> 00:19:57,679
IOT.

284
00:19:58,629 --> 00:20:03,749
In summary, without having related
business metrics for cloud costs,

285
00:20:04,069 --> 00:20:08,179
it becomes difficult to justify
the increase of cloud cost.

286
00:20:09,049 --> 00:20:10,459
I'm proud to say that both.

287
00:20:10,979 --> 00:20:15,379
Cloud cost, cost exporters and
InfoWallet have been open sourced

288
00:20:15,389 --> 00:20:17,349
and our GitHub organization.

289
00:20:18,119 --> 00:20:22,439
InfoWallet also provides you a demo
website to easily try its features.

290
00:20:23,039 --> 00:20:25,089
So now let's take a look together.

291
00:20:27,959 --> 00:20:33,349
So this is our GitHub organization,
Electrolux open source software.

292
00:20:33,874 --> 00:20:38,014
And there is a replica of InfoWallet,
you can find all the documentations,

293
00:20:38,014 --> 00:20:43,884
source code and the related issues
here, and you can also visit our

294
00:20:43,914 --> 00:20:45,834
demo website using this link.

295
00:20:48,184 --> 00:20:53,374
So here is a sandbox environment,
on backstage, and we have installed

296
00:20:53,384 --> 00:20:55,354
the latest version of InfoWallet.

297
00:20:55,984 --> 00:20:59,704
Though the cost data and
metric data are faked.

298
00:21:00,074 --> 00:21:04,564
But I think it's easy to get
the idea off having info wallet.

299
00:21:05,294 --> 00:21:09,644
So here you can see we fetch info
wallet fetches different cloud cost.

300
00:21:09,984 --> 00:21:13,014
And by default, it aggregates
everything for you.

301
00:21:13,324 --> 00:21:16,684
So at the first site, you
are able to check the total

302
00:21:16,684 --> 00:21:18,354
cost of your cloud resources.

303
00:21:19,254 --> 00:21:22,704
And then you can select
different time ranges.

304
00:21:22,984 --> 00:21:28,144
It sends another API to, another set
of APIs to fetch cloud cost and also

305
00:21:28,144 --> 00:21:33,614
caches the data so that you don't need
to fetch cost from cloud every time.

306
00:21:34,554 --> 00:21:38,064
And then, all the cost data
can be analyzed and can be

307
00:21:38,084 --> 00:21:39,694
grouped by different dimensions.

308
00:21:40,209 --> 00:21:45,489
For example, by the name of account,
like here we have several AWS accounts,

309
00:21:45,519 --> 00:21:47,709
actual account, and also Google account.

310
00:21:48,349 --> 00:21:54,309
And then it shows you the summary of each,
account's, cost, the portions, and also

311
00:21:54,309 --> 00:21:57,609
the increase or decrease of each account.

312
00:21:58,789 --> 00:22:02,539
Then you can also check like
the total cost of different

313
00:22:02,539 --> 00:22:05,089
providers and also cost category.

314
00:22:05,599 --> 00:22:08,204
So these are the categories
defined by focus.

315
00:22:09,034 --> 00:22:13,604
And actually, InfoWallet aggregates
costs from different cloud providers

316
00:22:13,894 --> 00:22:16,224
into these standard categories.

317
00:22:16,564 --> 00:22:22,964
For example, compute category can contain
AWS EC2 costs plus Azure Functions costs.

318
00:22:24,719 --> 00:22:30,349
Of course, you can also, twitch between
monthly cost and daily cost, and you

319
00:22:30,389 --> 00:22:35,729
can also use filters to focus more
on, for example, a specific category

320
00:22:35,799 --> 00:22:39,729
of cost or a specific wonders cost.

321
00:22:40,729 --> 00:22:47,729
And here you can also switch to show
or hide business metrics and, to check

322
00:22:47,759 --> 00:22:50,109
the details of each category's cost.

323
00:22:52,479 --> 00:22:56,279
So feel free to give it a try and
leave your comments on GitHub.

324
00:22:56,669 --> 00:22:58,769
We will be super happy
to hear your feedback.

325
00:23:01,059 --> 00:23:02,939
All right, back to the slides.

326
00:23:03,719 --> 00:23:08,289
The tools are nice, but I have to say
that it's only a good starting point.

327
00:23:08,779 --> 00:23:13,409
The goal is to optimize the cloud
cost, while it is fundamental to

328
00:23:13,419 --> 00:23:15,269
have sufficient cost observability.

329
00:23:16,714 --> 00:23:21,154
With the help of these tools,
developers are able to check a service's

330
00:23:21,194 --> 00:23:23,154
abnormal behavior regarding cost.

331
00:23:23,734 --> 00:23:28,384
Here is an example of fixing
misconfigurations of logging and

332
00:23:28,384 --> 00:23:30,384
saving unnecessary cloud cost.

333
00:23:33,214 --> 00:23:38,644
We also organized cost optimization
programs regularly in our organization.

334
00:23:39,374 --> 00:23:45,104
It sounds like a competition and is quite
interesting for developers to participate.

335
00:23:45,934 --> 00:23:51,704
We provide cost observability tools
where our IDP and then developers

336
00:23:51,734 --> 00:23:55,954
analyze their cloud costs and
propose actions for saving cost.

337
00:23:56,644 --> 00:24:01,254
In the last round of this program,
we are happy to see that developers

338
00:24:01,264 --> 00:24:05,664
made many good optimizations
from different directions, and we

339
00:24:05,664 --> 00:24:08,994
saved more than 30, 000 per month.

340
00:24:11,474 --> 00:24:13,794
To summarize for developers.

341
00:24:14,144 --> 00:24:18,194
It's very important to achieve
cost efficiency from cost

342
00:24:18,254 --> 00:24:21,474
awareness for platform engineers.

343
00:24:22,004 --> 00:24:26,474
When you design your cost management
solutions, it is recommended to

344
00:24:26,474 --> 00:24:31,364
follow FOCUS, which is a vendor
neutral, open source specification for

345
00:24:31,394 --> 00:24:33,824
consistent cost and usage data sets.

346
00:24:34,974 --> 00:24:39,174
And for everyone, cost engineering
is not only about techniques.

347
00:24:39,484 --> 00:24:40,764
But also about culture.

348
00:24:41,114 --> 00:24:45,544
For example, cost optimization
programs can be very helpful for your

349
00:24:45,544 --> 00:24:47,534
organization to build such a culture.

350
00:24:50,344 --> 00:24:54,214
Till now, we have shared our
recent work in infrastructure

351
00:24:54,244 --> 00:24:56,554
orchestration and cost engineering.

352
00:24:57,284 --> 00:25:02,444
To summarize today's talk, we started
from discussing various challenges

353
00:25:02,914 --> 00:25:07,674
and then Vamir shared more about
infrastructure orchestration and

354
00:25:07,674 --> 00:25:11,404
service management using IDP at last.

355
00:25:11,464 --> 00:25:16,474
I also shared the work about cost
engineering and open source projects.

356
00:25:18,014 --> 00:25:21,194
You can find all the related
open source projects here.

357
00:25:21,574 --> 00:25:24,964
Feel free to give it a try and
drop your comment on GitHub.

358
00:25:25,644 --> 00:25:27,984
Thank you so much for
listening to our talk.

359
00:25:28,354 --> 00:25:30,994
We hope you enjoyed it
and let's connect it.

360
00:25:31,054 --> 00:25:35,334
If you have any questions,
see you next time at Com 42.

361
00:25:35,884 --> 00:25:36,214
Cheers.

