1
00:00:15,969 --> 00:00:18,590
Hello, everyone, and
welcome to our session.

2
00:00:19,020 --> 00:00:21,430
Let me start this session
with a bold statement.

3
00:00:21,970 --> 00:00:26,929
The next big revolution in platform
engineering isn't about a new tool.

4
00:00:26,930 --> 00:00:31,789
It's about reimagining the
entire concept of a platform.

5
00:00:32,494 --> 00:00:33,805
My name is Martin Sarkovsky.

6
00:00:34,044 --> 00:00:37,875
I'm a senior solutions architect
with AWS and have a long history in

7
00:00:37,955 --> 00:00:40,054
designing and also building platforms.

8
00:00:40,434 --> 00:00:44,584
And today with me is Marina Burkhardt,
also solutions architect at AWS.

9
00:00:44,894 --> 00:00:48,354
And Marina has a strong DevOps
background and experience in

10
00:00:48,385 --> 00:00:50,994
administrating and operating platforms.

11
00:00:51,405 --> 00:00:55,285
And we both as solutions architects
are very much interested in

12
00:00:55,304 --> 00:00:57,615
building the platform of the future.

13
00:00:57,845 --> 00:01:03,140
So today we want to share our perspective
on the future of platform engineering.

14
00:01:03,790 --> 00:01:05,319
But first, let's look back.

15
00:01:05,610 --> 00:01:06,990
Why are we doing this?

16
00:01:07,009 --> 00:01:09,190
Why are we building platforms?

17
00:01:09,489 --> 00:01:10,969
And what are platforms?

18
00:01:11,429 --> 00:01:17,130
I would define it as a group of
technologies that are used in as a base.

19
00:01:18,060 --> 00:01:22,990
And upon this base, upon this
platform, we can develop application

20
00:01:23,260 --> 00:01:25,260
processes and other technologies.

21
00:01:25,600 --> 00:01:28,990
So we basically build some
common components that handle

22
00:01:28,990 --> 00:01:30,290
a lot of generic stuff.

23
00:01:30,630 --> 00:01:35,829
And on top of that, we can build
something that is special and unique.

24
00:01:36,889 --> 00:01:41,579
and we know this is a concept that
has been used in many industries

25
00:01:41,629 --> 00:01:43,279
and they were very successful with.

26
00:01:43,664 --> 00:01:46,834
using platforms to
transformize their business.

27
00:01:47,174 --> 00:01:48,734
How does it work with software?

28
00:01:48,934 --> 00:01:52,874
let's think of the main goals of
platforms in software development.

29
00:01:53,164 --> 00:01:56,904
It's about increasing the
development speed and still

30
00:01:56,904 --> 00:01:59,894
meeting all the requirements
that you get for our software.

31
00:02:00,324 --> 00:02:06,384
And in order to have this right balance
between Very high speed and high quality

32
00:02:06,444 --> 00:02:07,944
and meeting all the requirements.

33
00:02:08,374 --> 00:02:10,514
We need something that is helping us.

34
00:02:10,754 --> 00:02:12,114
We need abstractions.

35
00:02:12,604 --> 00:02:15,524
And often those abstractions
come with standardizations.

36
00:02:16,904 --> 00:02:19,844
platforms often enforce standards.

37
00:02:20,524 --> 00:02:24,204
And if I talk about standards,
I often hear people saying that

38
00:02:24,354 --> 00:02:27,844
standards are taking away all
the nice freedom and flexibility.

39
00:02:28,124 --> 00:02:31,364
Because people think of
standards as limitations.

40
00:02:32,014 --> 00:02:36,524
But I would say, and this is an old
statement now, it's quite the opposite.

41
00:02:37,204 --> 00:02:39,774
Standards actually enable innovation.

42
00:02:40,114 --> 00:02:43,794
Standards help you to scale and
standards remove all the friction.

43
00:02:44,044 --> 00:02:46,504
I want to give you a few examples
where I believe that is true.

44
00:02:46,924 --> 00:02:50,025
think of this as a highly
standardized piece of paper.

45
00:02:50,625 --> 00:02:53,085
210 by 297 millimeters.

46
00:02:53,364 --> 00:02:56,415
it's not roughly 200 by 300 millimeters.

47
00:02:56,484 --> 00:03:02,385
No, it is exactly 210 by 297 millimeters.

48
00:03:02,785 --> 00:03:05,505
Which is, by the way, exactly
one sixteenth of a square meter.

49
00:03:05,855 --> 00:03:11,255
And this standard, 210 by 297
millimeters, It's called DIN A4.

50
00:03:11,524 --> 00:03:12,734
And I believe it's a great standard.

51
00:03:12,804 --> 00:03:17,204
Because if we're talking about
DIN A4, no one has to argue how

52
00:03:17,204 --> 00:03:18,995
big that piece of paper will be.

53
00:03:19,344 --> 00:03:21,285
We can rely on a certain size.

54
00:03:21,635 --> 00:03:24,114
And we can build something
that is supporting that.

55
00:03:24,134 --> 00:03:27,614
we have fitting envelopes, we
have folders, drawers, pockets, we

56
00:03:27,624 --> 00:03:28,589
all know how to build something.

57
00:03:28,729 --> 00:03:29,729
the right size for them.

58
00:03:29,899 --> 00:03:33,259
We can even build printers, fax
machines, but we don't do that anymore.

59
00:03:33,259 --> 00:03:37,449
But, like all those, things that work
together with that piece of paper.

60
00:03:37,869 --> 00:03:41,959
And yes, if we have that
standardized piece of paper, we

61
00:03:41,959 --> 00:03:43,419
have to adjust to that standard.

62
00:03:43,789 --> 00:03:49,413
So if we write a letter and I have this
very long sentence in mind, I have to

63
00:03:49,413 --> 00:03:52,624
use a line break because of 210 by 297.

64
00:03:55,014 --> 00:03:59,324
if I want to draw a picture, I have
to accommodate that into this format.

65
00:04:00,744 --> 00:04:01,664
But think about it.

66
00:04:01,934 --> 00:04:04,034
Does that really limit
you in writing texts?

67
00:04:04,584 --> 00:04:06,484
Does that limit you in drawing pictures?

68
00:04:06,584 --> 00:04:08,004
we have seen great texts.

69
00:04:08,014 --> 00:04:11,184
We have seen a lot of
art on a piece of paper.

70
00:04:11,254 --> 00:04:11,694
Standardized text.

71
00:04:12,544 --> 00:04:13,354
piece of paper.

72
00:04:13,654 --> 00:04:15,354
And we have the same with technology.

73
00:04:15,574 --> 00:04:17,404
let me give you one
example, very low level.

74
00:04:17,564 --> 00:04:22,704
we are using HTTP to make sure
that our browsers can talk to

75
00:04:22,714 --> 00:04:24,544
web servers, to other computers.

76
00:04:25,024 --> 00:04:26,884
And we are using this standard everywhere.

77
00:04:27,144 --> 00:04:29,844
So actually we can't imagine
a world without that standard.

78
00:04:30,334 --> 00:04:32,314
yeah, there are some limitations.

79
00:04:32,624 --> 00:04:35,804
There are some standardizations
in, in, in HTTP.

80
00:04:36,104 --> 00:04:39,654
but this standard actually has
enabled the internet and it never

81
00:04:39,654 --> 00:04:41,274
put a limit to the innovations.

82
00:04:41,779 --> 00:04:44,149
that we are seeing
today with the internet.

83
00:04:45,309 --> 00:04:48,819
So we have to realize a few
things, locking things down

84
00:04:49,119 --> 00:04:50,689
and agreeing on a few things.

85
00:04:51,544 --> 00:04:52,514
can actually help us.

86
00:04:52,794 --> 00:04:57,914
It can boost innovation and it
can boost creativity because those

87
00:04:57,924 --> 00:05:02,164
standards and abstractions, they
help us to remove the cognitive

88
00:05:02,214 --> 00:05:04,304
overload we would have otherwise.

89
00:05:04,544 --> 00:05:08,264
So they help us with increasing the
speed of development and they also help

90
00:05:08,264 --> 00:05:10,274
us to still meet all the requirements.

91
00:05:10,574 --> 00:05:14,199
So if we want to be successful
with software development, We need

92
00:05:14,199 --> 00:05:16,769
kind of abstractions and standards.

93
00:05:16,919 --> 00:05:19,349
So we need those platforms.

94
00:05:20,719 --> 00:05:25,729
But there are many platforms and
platform engineering is a term nowadays.

95
00:05:25,769 --> 00:05:29,929
So what makes a platform a great platform?

96
00:05:30,749 --> 00:05:35,959
Marina will explain some of the key
characteristics for a successful platform.

97
00:05:38,019 --> 00:05:40,529
there isn't a golden answer
to Martin's question.

98
00:05:40,579 --> 00:05:44,439
But at least I brought you here three
different characteristics that I think and

99
00:05:44,449 --> 00:05:49,459
consider that every single great platform
should have in order to be successful.

100
00:05:49,869 --> 00:05:51,149
So let's dive into those ones.

101
00:05:52,559 --> 00:05:56,239
As we just mentioned, platforms are
going to come with abstractions.

102
00:05:56,699 --> 00:06:00,709
So that means abstractions and
standards are going to be in place.

103
00:06:01,119 --> 00:06:04,759
And you might think that those
are going to limit you, but

104
00:06:04,759 --> 00:06:06,229
actually totally the opposite.

105
00:06:06,449 --> 00:06:08,489
A platform should be an enabler.

106
00:06:09,059 --> 00:06:13,179
A platform should hide the complexity
and should make it easier to use.

107
00:06:13,879 --> 00:06:19,329
And in order to achieve that, you should
have a high level of transparency and

108
00:06:19,329 --> 00:06:21,154
you make usage of shared information.

109
00:06:21,294 --> 00:06:21,894
components.

110
00:06:22,864 --> 00:06:24,814
So a platform shouldn't be a black box.

111
00:06:25,234 --> 00:06:29,519
A platform should have a high level
of documentation so that every single

112
00:06:29,519 --> 00:06:34,424
person out there in the different teams
can read that documentation, understand

113
00:06:34,424 --> 00:06:38,694
how the doc and understand how the
components were built and which one

114
00:06:38,694 --> 00:06:40,944
was the intention of the usage of them.

115
00:06:41,774 --> 00:06:46,764
And also you can, Make the code of
the platform open source, at least

116
00:06:46,814 --> 00:06:48,654
internally for your different teams.

117
00:06:49,214 --> 00:06:53,684
And with a combination of two, of those
two, those things, you're going to

118
00:06:53,684 --> 00:06:58,584
create a shared responsibility feeling
across the different teams, which at the

119
00:06:58,584 --> 00:07:00,384
end is going to be beneficial for you.

120
00:07:01,469 --> 00:07:04,279
Nevertheless, you do not
want to reinvent the wheel.

121
00:07:04,329 --> 00:07:09,719
So that means you would like to have those
components that you built shared across

122
00:07:09,719 --> 00:07:15,619
the whole platform so that multiple teams
can benefit of those components as well.

123
00:07:16,879 --> 00:07:21,379
Second characteristics, from great
platform is that you would like that

124
00:07:21,389 --> 00:07:24,429
your platform is also extensible.

125
00:07:24,999 --> 00:07:28,739
So that means you do not have to foresee
which are the features that every

126
00:07:28,769 --> 00:07:33,439
single team is going to need in the
future, but at least stay flexible in

127
00:07:33,439 --> 00:07:36,670
such a way that you can learn, which
one are the technologies that they

128
00:07:36,670 --> 00:07:43,190
are using, learn about the new tools
that every team might implement or use

129
00:07:43,190 --> 00:07:48,730
from time to time, and also stay alert
about different architectural patterns.

130
00:07:49,040 --> 00:07:52,370
There are trends in the industry
and in the market out there.

131
00:07:53,120 --> 00:07:58,752
So that means you do not wanna, force
anyone to use a specific pattern,

132
00:07:58,953 --> 00:08:04,833
tool, technology integration, but make
and, or build the platform in such a

133
00:08:04,833 --> 00:08:11,343
way that it's attractive for multiple
teams and all the teams actually to

134
00:08:11,343 --> 00:08:14,313
really make usage of your platform.

135
00:08:14,813 --> 00:08:21,113
When that happens, More and more teams
are going to, use or want to implement

136
00:08:21,203 --> 00:08:25,743
things on top of your platform, and
therefore you would like to be able

137
00:08:25,743 --> 00:08:27,333
to scale that platform as well.

138
00:08:27,933 --> 00:08:32,703
And that would be able just if you have
a high level of automation in place.

139
00:08:33,033 --> 00:08:39,113
So you can use infrastructure as code,
like for example, AWS, in CDK to just

140
00:08:39,338 --> 00:08:46,208
Make usage of the possibility of having
a great automation and keep the pace of

141
00:08:46,228 --> 00:08:48,788
new teams onboarding in your platform.

142
00:08:50,273 --> 00:08:53,113
The third characteristic is
that you would like that your

143
00:08:53,123 --> 00:08:55,333
platform is also evolutionary.

144
00:08:55,553 --> 00:09:00,513
So that means you do not want to
have a platform that is static.

145
00:09:00,573 --> 00:09:04,993
You want something dynamic that keeps
the pace of technology out there.

146
00:09:06,938 --> 00:09:11,998
With the time you would like that this
platform actually reduces the TCO.

147
00:09:12,018 --> 00:09:16,848
So the total cost of ownership
make it more efficient and

148
00:09:17,018 --> 00:09:19,108
more performant as well.

149
00:09:19,568 --> 00:09:24,058
And with the time it should be
easier and easier to use as well.

150
00:09:24,498 --> 00:09:27,378
How do you achieve this
evolutionary characteristic?

151
00:09:27,588 --> 00:09:30,108
By treating the platform as a product.

152
00:09:30,298 --> 00:09:34,478
So that means having a product mindset.

153
00:09:35,623 --> 00:09:39,173
Nevertheless, something that
experience taught me is that you

154
00:09:39,213 --> 00:09:41,583
can have the best intentions.

155
00:09:41,613 --> 00:09:47,253
You could have the best, specialist
knowledgeable in a specific topic,

156
00:09:47,413 --> 00:09:52,283
but if you do not have mechanisms in
place, there's no way that you can

157
00:09:52,283 --> 00:09:56,123
say, So you can scale this across
your organization and have the

158
00:09:56,133 --> 00:09:58,903
impact that you would like to have.

159
00:09:59,483 --> 00:10:04,433
Therefore, I brought you four different
characteristics, of those mechanisms that

160
00:10:04,453 --> 00:10:11,453
I would invite you to think and consider
when building and designing your platform.

161
00:10:11,883 --> 00:10:14,273
Being the first one about abstractions.

162
00:10:14,303 --> 00:10:19,323
So we want to build a platform in such
a way that It has the complexity, but

163
00:10:19,703 --> 00:10:25,453
it has a high level of transparency so
that everyone is going to be able to

164
00:10:25,463 --> 00:10:27,633
know how those components were built.

165
00:10:28,843 --> 00:10:34,103
You would like to have some same defaults,
so having the possibility to set some,

166
00:10:34,473 --> 00:10:40,483
values per default that helps the teams to
reduce the mistakes, to reduce the errors,

167
00:10:40,753 --> 00:10:45,633
but at the same time, have a high level
of flexibility because you were going

168
00:10:45,633 --> 00:10:51,523
to, give them a set of configurations
that are already properly set it up.

169
00:10:52,293 --> 00:10:55,133
The third abstraction is about automation.

170
00:10:55,143 --> 00:11:00,323
So you would like to keep the
pace of technology, but increase

171
00:11:00,323 --> 00:11:02,653
the speed of every development.

172
00:11:04,163 --> 00:11:07,463
and at the same time, reduce
the friction of the processes.

173
00:11:07,693 --> 00:11:12,023
And last but not least, those platforms
should actually help you with some

174
00:11:12,023 --> 00:11:14,463
control security things related.

175
00:11:15,083 --> 00:11:18,503
So we want to help you to, or to enforce.

176
00:11:18,853 --> 00:11:23,563
Compliance measures and follow
any regulation that you have to

177
00:11:23,563 --> 00:11:27,313
take in consideration related to
the market and the industry that

178
00:11:27,513 --> 00:11:32,873
you are part of while having this
high level of share responsibility

179
00:11:32,933 --> 00:11:34,563
across the whole different teams.

180
00:11:35,813 --> 00:11:40,923
And the question here would be, whom is
this platform actually going to enable?

181
00:11:43,843 --> 00:11:46,743
And here, I want to talk
about a great quote from Peter

182
00:11:46,783 --> 00:11:48,113
Gillett Moss from ThoughtWorks.

183
00:11:48,373 --> 00:11:53,603
He said, the platforms are a very
great way for centralizing expertise.

184
00:11:53,968 --> 00:11:56,838
But he also said you cannot
centralize innovation.

185
00:11:57,218 --> 00:12:01,638
You have to leave that to the teams
that are the closest to the customer.

186
00:12:02,278 --> 00:12:05,528
Because those teams, they
obviously have the best ideas.

187
00:12:05,918 --> 00:12:09,978
And they will build innovation
on top of a platform.

188
00:12:10,448 --> 00:12:13,458
Let's think about those teams,
that are doing the innovation.

189
00:12:14,598 --> 00:12:17,018
how do those innovative
teams actually work?

190
00:12:17,828 --> 00:12:22,118
usually those teams are
small and self sufficient.

191
00:12:22,568 --> 00:12:26,148
So that means they can do most
or maybe all of their work

192
00:12:26,188 --> 00:12:29,758
independently from all the other
teams that are also doing innovation.

193
00:12:30,178 --> 00:12:34,598
And they can make most or all
of their decisions on their own.

194
00:12:36,638 --> 00:12:37,698
Let's think about this.

195
00:12:37,968 --> 00:12:39,688
Autonomies, teams.

196
00:12:41,303 --> 00:12:42,073
on a platform.

197
00:12:42,543 --> 00:12:43,473
How does that work?

198
00:12:44,053 --> 00:12:49,303
Here, we need to talk about the
centralized versus decentralized approach.

199
00:12:50,193 --> 00:12:54,883
Let me start with the maybe more
traditional centralized approach.

200
00:12:57,143 --> 00:13:01,133
We have a platform and that
platform is designed and also

201
00:13:01,183 --> 00:13:02,693
operated by a platform team.

202
00:13:03,473 --> 00:13:06,253
And of course, we learned the
platform needs to be evolutionary.

203
00:13:06,663 --> 00:13:10,153
So we have to add new features
to our platform all the time.

204
00:13:10,473 --> 00:13:11,343
And in a perfect world.

205
00:13:12,468 --> 00:13:17,858
Your platform team would anticipate
every single feature request and they

206
00:13:17,858 --> 00:13:22,228
would implement all the features before
someone even asked about the feature.

207
00:13:22,948 --> 00:13:24,488
But now let's look back to the reality.

208
00:13:24,688 --> 00:13:26,408
So in reality, it's different.

209
00:13:26,618 --> 00:13:30,018
In reality, app teams often request
a new feature, and they want this

210
00:13:30,048 --> 00:13:34,488
feature as soon as possible because
they need it for the innovation.

211
00:13:35,158 --> 00:13:38,168
And then your platform team needs
to understand this new feature.

212
00:13:38,633 --> 00:13:42,613
And then the platform team needs
to build the new feature and all

213
00:13:42,613 --> 00:13:47,673
of this while operating a central
platform that is growing a lot.

214
00:13:48,063 --> 00:13:52,223
So you're basically moving the
cognitive load from the app

215
00:13:52,223 --> 00:13:54,873
team down to the platform team.

216
00:13:55,553 --> 00:13:58,933
And if you get more and more app
teams doing this, What will happen?

217
00:13:59,153 --> 00:14:03,283
You will overload the platform
team and your platform team

218
00:14:03,863 --> 00:14:05,133
will become your bottleneck.

219
00:14:05,743 --> 00:14:07,203
Because what are we doing here?

220
00:14:08,153 --> 00:14:13,043
We are not only centralizing
expertise, we are also trying to

221
00:14:13,123 --> 00:14:15,273
centralize the platform innovation.

222
00:14:16,163 --> 00:14:19,503
How does it work for a
decentralized platform approach?

223
00:14:20,358 --> 00:14:24,048
in that approach, the platform
team is designing blueprints

224
00:14:25,118 --> 00:14:26,458
as a platform component.

225
00:14:26,828 --> 00:14:31,038
And all the app teams, they can use
these blueprints and they can use them

226
00:14:31,278 --> 00:14:34,178
and create their own versions of that.

227
00:14:34,478 --> 00:14:37,398
So we actually put a bit
more responsibility into

228
00:14:37,398 --> 00:14:39,148
the hands of the developers.

229
00:14:39,418 --> 00:14:43,678
So the developers, the app teams,
they own the entire lifecycle of

230
00:14:43,678 --> 00:14:48,308
the application, including all
that they're using as a base.

231
00:14:48,608 --> 00:14:52,848
And, you could think maybe they have now
the cognitive overload, but they don't

232
00:14:52,948 --> 00:14:58,198
get this cognitive overload because
platform components, the blueprints,

233
00:14:58,908 --> 00:15:02,518
they are using abstractions that
are provided by the platform team.

234
00:15:02,728 --> 00:15:06,598
So they basically don't have to reinvent
everything and build it from scratch.

235
00:15:06,658 --> 00:15:08,988
They can build upon those abstractions.

236
00:15:09,618 --> 00:15:12,088
So they don't get this cognitive
overload to understand.

237
00:15:12,518 --> 00:15:16,388
The full stack completely from the
beginning, so app teams can operate their

238
00:15:16,418 --> 00:15:21,578
own stack, but they still meet all the
central requirements, and if required,

239
00:15:21,608 --> 00:15:25,958
they can evolve the stack, maybe on their
own or together with the platform team.

240
00:15:26,368 --> 00:15:27,618
So what are we doing here?

241
00:15:28,568 --> 00:15:32,363
We are centralizing the
expertise into those blueprints.

242
00:15:33,293 --> 00:15:37,563
But then we decentralize the
innovation to the app teams.

243
00:15:38,883 --> 00:15:39,953
Let's think that a bit through.

244
00:15:39,953 --> 00:15:41,403
How would that work in reality?

245
00:15:41,903 --> 00:15:46,953
if we have this shared responsibility
between app teams and platform

246
00:15:46,953 --> 00:15:52,433
team, Who's doing what, who is
responsible for what part of this deck?

247
00:15:53,163 --> 00:15:55,813
here we need to talk about
ownership patterns and Marina

248
00:15:55,853 --> 00:15:57,073
will discuss a few of them.

249
00:15:59,593 --> 00:16:01,723
So there are different approaches.

250
00:16:02,243 --> 00:16:05,963
And I brought you three of the
ownership patterns that I've seen the

251
00:16:05,963 --> 00:16:11,303
most with our AWS customers in the
way they have treated the productive

252
00:16:11,303 --> 00:16:13,443
workloads in their AWS accounts.

253
00:16:14,053 --> 00:16:17,343
By being the first one,
treating the whole AWS system.

254
00:16:17,633 --> 00:16:19,833
Account itself as the platform.

255
00:16:20,493 --> 00:16:24,933
And the way you can imagine this is
like by having an AWS account vending

256
00:16:24,933 --> 00:16:29,483
machine that is going to be owned by the
platform engineering team, but it's going

257
00:16:29,483 --> 00:16:35,703
to provide AWS accounts with already
some, building blocks and components

258
00:16:35,843 --> 00:16:41,363
defined and deployed in the AWS account
to every single team out there in your

259
00:16:41,823 --> 00:16:47,243
organization that needs an AWS account
in order to run the resources needed for

260
00:16:47,683 --> 00:16:49,763
the different projects and use cases.

261
00:16:50,913 --> 00:16:55,313
And those components might be
related to networking, observability,

262
00:16:55,323 --> 00:16:58,593
security, or anything out
there that comes to your mind.

263
00:16:59,103 --> 00:17:02,313
Where the platform engineering team
is going to, for the networking, for

264
00:17:02,313 --> 00:17:04,723
example, design the whole network, like.

265
00:17:05,218 --> 00:17:09,598
how many VPCs is going to, that account
is going to have, how many subnets

266
00:17:09,608 --> 00:17:14,208
what's, how does the routing table
for example, look like, and so on

267
00:17:14,888 --> 00:17:18,998
related to observability, you might
have already some, I don't know, logs

268
00:17:19,008 --> 00:17:23,798
defines metric, some dashboard, all of
the, all of this may be in CloudWatch

269
00:17:24,238 --> 00:17:29,808
and also specify and already implement
some security mechanisms in that account

270
00:17:30,768 --> 00:17:32,928
How can this platform engineering build?

271
00:17:33,128 --> 00:17:38,488
such a vending machine through,
for example, the usage of AWS,

272
00:17:38,748 --> 00:17:45,288
organizations, AWS config, CloudWatch,
and IIM, for example, as well.

273
00:17:46,218 --> 00:17:50,953
The second ownership pattern
is related to managed clusters.

274
00:17:51,293 --> 00:17:56,653
Where in the other approach, you had a
higher level of flexibility, but lower

275
00:17:56,653 --> 00:18:01,143
level of abstraction that might not
really be needed by every single team.

276
00:18:01,303 --> 00:18:06,333
Like for example, a team that runs
some containers, would not really.

277
00:18:06,763 --> 00:18:13,693
Care about what's the VPC that it's
already there in place in the AWS account,

278
00:18:13,973 --> 00:18:20,933
but instead having a possibility to just
run the containers in a cluster that

279
00:18:20,933 --> 00:18:23,263
it's already managed by another team.

280
00:18:23,853 --> 00:18:28,433
So that means, They still would like
to have those standards components to

281
00:18:28,433 --> 00:18:33,683
networking and observability, but tailored
specifically for a managed cluster.

282
00:18:34,153 --> 00:18:38,463
So for example, they would like to have
some health checks, or maybe have the

283
00:18:38,473 --> 00:18:43,003
possibility to monitor how many containers
are running the, in the whole, Cluster

284
00:18:43,003 --> 00:18:49,023
itself, or maybe have some possibility
to manage the users that are going to

285
00:18:49,023 --> 00:18:55,653
have access to the cluster and also some
input and output rules for the whole,

286
00:18:55,873 --> 00:18:58,253
container itself that it's running there.

287
00:18:58,803 --> 00:19:03,473
So this option is going to have
a lower level of flexibility, but

288
00:19:03,473 --> 00:19:05,363
a higher level of abstraction.

289
00:19:06,988 --> 00:19:12,958
And the third ownership pattern is related
to the deployable application patterns.

290
00:19:13,668 --> 00:19:21,718
So this is like providing blueprints,
like providing some AWS CDK constructs.

291
00:19:22,348 --> 00:19:27,823
this might be For you not resonate as
a platform and rather like blueprints

292
00:19:27,863 --> 00:19:30,663
and guidelines on how to deploy things.

293
00:19:31,043 --> 00:19:35,563
But this is yet another ownership
pattern for a platform itself.

294
00:19:36,073 --> 00:19:40,023
And this is pretty much a
modern way also of treating it.

295
00:19:40,033 --> 00:19:41,093
Then I also seen.

296
00:19:41,358 --> 00:19:47,588
A lot of times we're actually the teams
that might benefit the most of this are

297
00:19:47,618 --> 00:19:51,728
the high performing teams are the ones
that are already used to work with,

298
00:19:51,728 --> 00:19:57,878
for example, AWS accounts and need some
blueprints that helps them to deploy some

299
00:19:57,918 --> 00:20:00,858
applications faster with some standards.

300
00:20:01,578 --> 00:20:06,158
that are well defined in there with some
architectural patterns, as well that

301
00:20:06,158 --> 00:20:12,218
might help them to reduce the development
time and improve already, the possibility

302
00:20:12,278 --> 00:20:14,328
of building something on top as well.

303
00:20:16,583 --> 00:20:20,913
Having now those three ownership patterns
in mind, I would like to hand over

304
00:20:20,943 --> 00:20:26,083
to Martin, who is going to actually
explain how, by having the possibility

305
00:20:26,083 --> 00:20:30,668
and the freedom of different patterns,
you do not have to force How can I

306
00:20:30,668 --> 00:20:36,928
use any team in order to implement
and make usage of this platform?

307
00:20:37,928 --> 00:20:41,688
you don't have to decide
exclusively what pattern to use.

308
00:20:42,568 --> 00:20:44,408
You get the freedom of choice.

309
00:20:45,448 --> 00:20:47,008
Let me show you how that could work.

310
00:20:47,108 --> 00:20:50,028
Let's imagine we have this
platform team and they're dealing

311
00:20:50,028 --> 00:20:51,648
with, let's say, four teams.

312
00:20:52,198 --> 00:20:54,268
And these are decentralized dev teams.

313
00:20:55,378 --> 00:20:58,468
first of all of our teams get
those pre configured accounts

314
00:20:58,728 --> 00:21:00,268
from the account vending machine.

315
00:21:00,898 --> 00:21:04,108
And, team one is perfectly
fine with that account.

316
00:21:04,158 --> 00:21:07,328
So they get this pre configured
account as a base level platform,

317
00:21:07,358 --> 00:21:10,818
and they build everything else on
top of that, completely on their own.

318
00:21:11,568 --> 00:21:12,658
team two is different.

319
00:21:13,218 --> 00:21:14,838
They use those managed clusters.

320
00:21:15,008 --> 00:21:19,433
And on top of that, They also want to
have those deployable patterns, maybe

321
00:21:19,873 --> 00:21:21,883
in a cluster that could be a hand chart.

322
00:21:23,043 --> 00:21:28,053
team three, deploys the application
into a managed cluster, but they

323
00:21:28,053 --> 00:21:30,803
don't need all those patterns on top.

324
00:21:30,823 --> 00:21:33,143
They have their own way of doing things.

325
00:21:33,833 --> 00:21:36,003
And team four, let's say
they are the serverless game.

326
00:21:36,263 --> 00:21:40,703
So they use those templated patterns
for serverless applications in

327
00:21:40,703 --> 00:21:42,843
their pre configured account.

328
00:21:43,413 --> 00:21:45,903
now we have four different
ways of doing things.

329
00:21:48,253 --> 00:21:50,093
Let's reimagine the term platform.

330
00:21:50,953 --> 00:21:53,343
All of this is your platform.

331
00:21:53,813 --> 00:21:58,443
Some parts of your platform are more
central, like the account vending

332
00:21:58,763 --> 00:22:00,243
or maybe the managed cluster.

333
00:22:00,893 --> 00:22:04,243
And some parts are more
decentralized, like all those

334
00:22:04,293 --> 00:22:05,673
deployable application patterns.

335
00:22:06,348 --> 00:22:06,888
And so on.

336
00:22:07,348 --> 00:22:11,858
And by giving all the teams the freedom
of choice, you don't have to force a team

337
00:22:12,138 --> 00:22:18,528
to follow one approach that might work
for you, but that wouldn't work for them.

338
00:22:19,208 --> 00:22:23,608
So the idea is to make the platform not
too restrictive, but make the platform

339
00:22:23,648 --> 00:22:24,848
open to innovation and innovation.

340
00:22:25,128 --> 00:22:26,108
and to development.

341
00:22:26,408 --> 00:22:30,488
And I can recommend working towards
those decentralized teams with shared

342
00:22:30,488 --> 00:22:33,198
patterns and services as a platform.

343
00:22:33,678 --> 00:22:40,178
And you can see those blueprints that are
shared on your platform as a golden path.

344
00:22:41,048 --> 00:22:44,468
Maybe this concept of a golden
path is very well known, and maybe

345
00:22:44,468 --> 00:22:45,978
also the concept of a paved road.

346
00:22:46,148 --> 00:22:50,238
And let's see those
blueprints as a golden path.

347
00:22:50,593 --> 00:22:51,583
on a paved road.

348
00:22:51,793 --> 00:22:54,903
While this is the golden path,
there's still a bit room to do

349
00:22:54,903 --> 00:22:57,393
things differently on a paved road.

350
00:22:57,743 --> 00:23:02,853
So that's your opinionated and
supported way of using technology.

351
00:23:03,153 --> 00:23:07,443
So this is the way to make it for
the teams as easy as possible to use

352
00:23:07,473 --> 00:23:09,563
technology and to use your platform.

353
00:23:10,593 --> 00:23:11,783
But we want to be flexible.

354
00:23:12,053 --> 00:23:15,763
So if someone has an alternative
idea, let them go with left or right.

355
00:23:16,273 --> 00:23:20,753
from that golden path on the paved
road still, to a certain degree.

356
00:23:20,803 --> 00:23:23,803
there are still guardrails,
outside of that paved road.

357
00:23:24,203 --> 00:23:29,243
Maybe this idea will open another
road, maybe a new shortcut,

358
00:23:29,813 --> 00:23:33,913
maybe, this improvement will
even be your new golden path.

359
00:23:34,263 --> 00:23:40,763
So basically treat your platform as a
product, make it similar to your product

360
00:23:40,773 --> 00:23:42,363
development, have a product mindset.

361
00:23:42,893 --> 00:23:48,153
When building your platform, how can
you do that while we can learn from the

362
00:23:48,153 --> 00:23:50,123
development of open source software?

363
00:23:50,698 --> 00:23:53,278
products because they
follow the same principles.

364
00:23:53,508 --> 00:23:57,718
So whenever you build something for
your platform, make it versioned.

365
00:23:58,068 --> 00:24:01,908
So a version piece of software that
can be evolved by the user community,

366
00:24:02,278 --> 00:24:06,088
maybe make the platform team as the
main contributor, but allow other

367
00:24:06,088 --> 00:24:09,738
ones to contribute and create their
own version, make it decentralized.

368
00:24:09,788 --> 00:24:14,518
So every component should have
an independent life cycle that

369
00:24:14,518 --> 00:24:17,138
makes the scaling much easier
because you have smaller pieces.

370
00:24:17,473 --> 00:24:22,333
And, it also reduced the blast radius and
dependencies and so on and make it usable.

371
00:24:22,463 --> 00:24:26,543
So if you have this product mindset that
we just discussed, you would create good

372
00:24:26,583 --> 00:24:32,683
accessibility, like good documentation,
scaffolding, a CLI, a UI integration,

373
00:24:32,723 --> 00:24:34,853
and so on, and then make it customizable.

374
00:24:34,873 --> 00:24:36,543
So be open to changes.

375
00:24:36,913 --> 00:24:38,863
Allow someone to
parameterize your product.

376
00:24:39,683 --> 00:24:43,593
your platform components, allow to
choose escape hatches, if possible,

377
00:24:43,783 --> 00:24:46,113
let them fork it, let them change it.

378
00:24:46,183 --> 00:24:52,353
If they need, don't build a black box,
make it transparent, make it a white box.

379
00:24:52,403 --> 00:24:56,723
Don't hide the implementation of your
platform because people rely on it

380
00:24:56,983 --> 00:24:58,293
and then make it self https: otter.

381
00:24:58,293 --> 00:25:02,153
ai so everything should be fully
automated as much as possible.

382
00:25:02,473 --> 00:25:05,593
So everything can be requested
and deployed via APIs.

383
00:25:05,953 --> 00:25:10,363
So that is an evolutionary
platform, guided by the principles

384
00:25:10,423 --> 00:25:12,713
of open source development.

385
00:25:13,093 --> 00:25:18,863
And one last thing to mention here,
always stay ahead with your platform.

386
00:25:19,143 --> 00:25:23,983
So we discussed this, a platform
will always build on a certain base,

387
00:25:24,383 --> 00:25:26,073
like the AWS Cloud, for instance.

388
00:25:26,793 --> 00:25:29,733
And we also discussed that
your platform should evolve.

389
00:25:30,823 --> 00:25:32,413
But here's one thing to remember.

390
00:25:32,713 --> 00:25:37,033
The base where you built your
platform on does also evolve.

391
00:25:37,613 --> 00:25:41,533
So if you don't evolve your platform,
the things that you're building on top of

392
00:25:41,533 --> 00:25:46,823
that base, and you don't adapt it to the
base, you will have a sinking platform.

393
00:25:47,343 --> 00:25:50,263
A platform that has no
true benefits anymore.

394
00:25:50,453 --> 00:25:53,593
Maybe the platform even makes
it more difficult to do things,

395
00:25:54,063 --> 00:25:55,563
compared to the native approach.

396
00:25:55,663 --> 00:25:59,213
So that will be a platform was a
burden and no one wants to use that.

397
00:26:00,023 --> 00:26:03,893
So if you always evolve your platform
and you're always adapted to the base,

398
00:26:04,803 --> 00:26:08,263
you will have something that we would
call a floating platform, a platform

399
00:26:08,263 --> 00:26:09,933
that is always ahead of the base.

400
00:26:10,373 --> 00:26:13,253
And that is a platform
that offers true benefits.

401
00:26:13,733 --> 00:26:15,643
to all the users of the platform.

402
00:26:15,863 --> 00:26:18,513
So a platform that enables all your teams.

403
00:26:18,743 --> 00:26:23,063
So our recommendation is always
build floating platforms.

404
00:26:25,353 --> 00:26:26,303
What did we learn today?

405
00:26:26,563 --> 00:26:28,703
So standards are not limitations.

406
00:26:29,323 --> 00:26:31,913
Often I would say they
are the key to innovation.

407
00:26:32,233 --> 00:26:36,403
So don't build a platform for the
sake of having a platform, for the

408
00:26:36,403 --> 00:26:39,393
sake of doing platform engineering.

409
00:26:39,673 --> 00:26:42,403
Build a platform that enables
all the users your teams.

410
00:26:42,713 --> 00:26:45,573
A platform that is
extensible and evolutionary.

411
00:26:46,103 --> 00:26:51,503
And always think about decentralization of
the platform, the centralized blueprints.

412
00:26:51,903 --> 00:26:53,303
And if you do that, make it work.

413
00:26:53,643 --> 00:26:58,633
As flexible as possible, build a
golden path, but be flexible and

414
00:26:58,633 --> 00:27:02,043
always stay ahead with your platform.

415
00:27:02,753 --> 00:27:04,863
Thanks a lot for listening
to our talk today.

416
00:27:05,103 --> 00:27:06,433
we really value your feedback.

417
00:27:06,753 --> 00:27:08,813
there are two links, how you can reach us.

418
00:27:09,133 --> 00:27:11,463
we're happy to discuss that
concept even further with you.

419
00:27:11,753 --> 00:27:14,603
And if you have some feedback for
us, if you liked what we told you

420
00:27:14,603 --> 00:27:16,608
today, There's a feedback link.

421
00:27:16,878 --> 00:27:18,238
We're happy to hear your feedback.

422
00:27:18,238 --> 00:27:20,538
It only takes 15 seconds
to fill out the survey.

423
00:27:20,908 --> 00:27:22,968
Thank you so much for joining us today.

