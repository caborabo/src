1
00:00:14,320 --> 00:00:18,660
Hi, and welcome to my presentation
about AI Augmented DevOps

2
00:00:19,309 --> 00:00:21,039
with Platform Engineering.

3
00:00:21,970 --> 00:00:23,869
First quickly to myself.

4
00:00:24,069 --> 00:00:30,770
My name is Roman Roth, and I am the
global chief of DevOps and also a partner.

5
00:00:33,175 --> 00:00:40,694
22 years ago, as a junior NET engineer,
right from the university, I became

6
00:00:40,694 --> 00:00:45,745
then an expert software engineer, then
an architect, and finally a consultant.

7
00:00:46,625 --> 00:00:51,375
And during that time, what always
was at my heart is how can we

8
00:00:51,375 --> 00:00:52,775
continuously deliver value?

9
00:00:53,075 --> 00:00:57,435
How can we automate things and
how can we ensure the quality

10
00:00:57,435 --> 00:00:58,485
of what we are building?

11
00:00:58,665 --> 00:01:03,245
And when the whole DevOps movement
started, I jumped right on top of

12
00:01:03,295 --> 00:01:09,215
that, became one of the organizers of
the DevOps Meetup Zurich, which is a

13
00:01:09,225 --> 00:01:13,314
monthly meetup with over 2, 000 persons.

14
00:01:13,675 --> 00:01:19,654
And I'm also one of the organizers of
the DevOps Day Zurich, which is a two day

15
00:01:19,914 --> 00:01:22,154
conference, which we are doing yearly.

16
00:01:22,485 --> 00:01:25,904
And these DevOps Days, they are
all around the world in all of

17
00:01:25,934 --> 00:01:28,101
the big cities, around the world.

18
00:01:28,101 --> 00:01:31,085
And I am the president
of the DevOps Day Zurich.

19
00:01:32,490 --> 00:01:35,759
You can already see DevOps
lies very close to my heart.

20
00:01:36,070 --> 00:01:42,899
This is also why I have my own
YouTube channel with over 250 videos

21
00:01:42,949 --> 00:01:47,590
all around DevOps, architecture,
platform engineering, and so on.

22
00:01:47,899 --> 00:01:52,669
And I also blog a lot, tweet
a lot, and I even write at the

23
00:01:52,669 --> 00:01:54,630
moment my own book about that.

24
00:01:54,929 --> 00:01:56,210
digital factory.

25
00:01:57,410 --> 00:02:01,400
If you want to learn more about
DevOps, platform engineering,

26
00:02:01,430 --> 00:02:06,300
and so on, please subscribe to
one of my social media channels.

27
00:02:07,170 --> 00:02:09,899
In my projects, I work for
different clients in different

28
00:02:09,900 --> 00:02:15,204
industries to DevOps transformation,
introduce platform engineering.

29
00:02:15,404 --> 00:02:22,054
And currently I'm the product manager of a
platform project, which we are doing with

30
00:02:22,165 --> 00:02:25,234
LGT, which is a bank in Liechtenstein.

31
00:02:25,625 --> 00:02:30,805
And I will show you during
this presentation, a demo of

32
00:02:30,865 --> 00:02:35,165
AI augmented DevOps and how we
have implemented that into that.

33
00:02:35,165 --> 00:02:40,964
So stay with me and let's now
dive into the actual presentation.

34
00:02:41,725 --> 00:02:48,834
So one thing that happens also potentially
to you, what it also happens, of course

35
00:02:48,834 --> 00:02:54,854
to me is that the management, the
business or the CEO is coming to you

36
00:02:54,854 --> 00:03:01,944
and say, Romano, we need to have AI
because AI is a absolute game changer.

37
00:03:01,944 --> 00:03:06,194
We need to put AI into
our development process.

38
00:03:07,299 --> 00:03:15,609
And one good thing to do when
you get such an ask is to ask why

39
00:03:15,779 --> 00:03:18,289
do you would like to have that?

40
00:03:18,299 --> 00:03:21,619
Why do you want to have that?

41
00:03:21,700 --> 00:03:24,759
What is the root cause of that ask?

42
00:03:25,480 --> 00:03:29,610
And usually what you get
is, the following answer.

43
00:03:29,860 --> 00:03:32,830
We want to have a faster time to market.

44
00:03:33,170 --> 00:03:36,790
We want to get more value for
the money and the higher price.

45
00:03:37,095 --> 00:03:43,635
Quality out of it, which then leads to,
of course, higher customer satisfaction.

46
00:03:44,405 --> 00:03:53,365
Now, with that, what we need to do is
we need to analyze our value stream

47
00:03:53,905 --> 00:03:59,770
because modern software development
is a continuous process, which

48
00:03:59,770 --> 00:04:04,860
you can see there in that infinity
loop, across the whole value stream.

49
00:04:05,340 --> 00:04:10,650
And of course, when you look at the value
stream, then you have different practices

50
00:04:11,090 --> 00:04:14,540
that you are doing in that very process.

51
00:04:15,270 --> 00:04:21,050
Now, I already told you what we need
to do is analyze that value stream and

52
00:04:21,050 --> 00:04:24,790
for that we use value stream mapping.

53
00:04:25,269 --> 00:04:30,860
And this is a very important
technique to identify the bottlenecks.

54
00:04:30,860 --> 00:04:36,380
And this is also Where we
potentially can then use AI.

55
00:04:37,290 --> 00:04:39,100
how do we do value stream mapping?

56
00:04:39,140 --> 00:04:44,760
First of all, you need to bring all
of the people that work across one

57
00:04:44,770 --> 00:04:50,639
of these value streams, which produce
one or many products, into a room.

58
00:04:51,259 --> 00:04:56,290
You give them post its and you say,
okay, what are the steps that we need

59
00:04:56,670 --> 00:05:02,710
From idea until production and you get
that example here, feature definition,

60
00:05:02,720 --> 00:05:04,779
design, code, test, and so on.

61
00:05:05,000 --> 00:05:09,199
Of course, in your value stream,
this will be far more complicated.

62
00:05:09,200 --> 00:05:13,060
Usually, the value streams, when I do
value stream mapping, they are much,

63
00:05:13,060 --> 00:05:15,940
much bigger than this small example.

64
00:05:17,390 --> 00:05:23,910
After that, you say, okay, now let's
have a look who is working in this step,

65
00:05:23,910 --> 00:05:29,120
or who is responsible for that step,
and you get product owner, architect,

66
00:05:29,160 --> 00:05:31,799
developer, and tester, and so on.

67
00:05:32,579 --> 00:05:38,390
And then, you say, okay, now we need to
measure The efficiency of each one of

68
00:05:38,450 --> 00:05:44,690
these steps, and we do that by defining
the lead time LT, which is the time

69
00:05:44,740 --> 00:05:52,000
from step beginning until step end
when the next step can continue, and

70
00:05:52,029 --> 00:05:54,650
it includes all of the waiting time.

71
00:05:55,250 --> 00:06:01,040
And then you say, okay, and how much
is really actually working time in

72
00:06:01,040 --> 00:06:03,110
there, which is the process time.

73
00:06:03,310 --> 00:06:08,740
That you can see there, which is
PT, and then you say, okay, and

74
00:06:08,740 --> 00:06:11,150
what is the quality of that step?

75
00:06:11,250 --> 00:06:15,400
And that's the percentage complete
and accurate, the percentage C and

76
00:06:15,400 --> 00:06:19,290
A that you can see there, which
is a measurement, which says how

77
00:06:19,299 --> 00:06:21,810
much rework do we need to do?

78
00:06:22,020 --> 00:06:24,060
when, the quality is not good.

79
00:06:24,320 --> 00:06:28,975
And for example, when you have 80
percent like in the feature definition,

80
00:06:29,005 --> 00:06:34,775
it means that in 20 percent of the
cases, we need to go back to that step

81
00:06:35,035 --> 00:06:40,225
because the quality of that feature
definition was not good enough.

82
00:06:40,924 --> 00:06:46,455
And then suddenly you get this
picture here and immediately you

83
00:06:46,485 --> 00:06:49,005
can see where the bottlenecks are.

84
00:06:49,025 --> 00:06:54,185
For example, in code and test,
massive discrepancies between

85
00:06:54,315 --> 00:06:55,825
process time and lead time.

86
00:06:55,825 --> 00:06:58,565
For example, in test, we have
a process time, actual work

87
00:06:58,565 --> 00:07:01,404
where the tester is working.

88
00:07:01,865 --> 00:07:08,795
of eight hours and the lead time is three
hundred thirty six hours, which is huge.

89
00:07:08,795 --> 00:07:13,335
There is a lot of waiting time and
a lot of inefficiencies in there.

90
00:07:13,754 --> 00:07:17,905
Also, the percentage C and A
complete inaccuracy is 50%, which

91
00:07:17,905 --> 00:07:22,144
means in 50 percent of the case,
we need to go back to that step

92
00:07:22,174 --> 00:07:25,585
because the quality was not good.

93
00:07:25,985 --> 00:07:32,005
So when you have done that,
you have identified potential

94
00:07:32,205 --> 00:07:36,594
bottlenecks where you could use AI.

95
00:07:36,775 --> 00:07:43,735
But I always say think about it because
potentially also another solution

96
00:07:43,745 --> 00:07:50,264
might be better and even adapting the
process could be a simpler solution.

97
00:07:50,465 --> 00:07:53,970
But, of course, You could use AI.

98
00:07:54,300 --> 00:08:02,000
So when you look at that, then you,
you immediately see some of the spots

99
00:08:02,429 --> 00:08:09,550
where you potentially can use AI in
your whole development value stream,

100
00:08:09,760 --> 00:08:11,910
which are highlighted in there.

101
00:08:12,110 --> 00:08:16,389
So these are potential areas
where you could use AI.

102
00:08:16,610 --> 00:08:17,080
AI.

103
00:08:17,740 --> 00:08:20,650
I also showed that in a other picture.

104
00:08:20,750 --> 00:08:26,300
So to give you also a little bit
of input, what possibilities are

105
00:08:26,340 --> 00:08:31,770
out there for AI augmented DevOps
use cases in a value stream.

106
00:08:32,130 --> 00:08:40,040
So for example, in plan, we can use AI
to analyze historic project data, predict

107
00:08:40,100 --> 00:08:44,070
risks, resource needs, And delivery time.

108
00:08:44,070 --> 00:08:46,050
So that could be something.

109
00:08:46,050 --> 00:08:50,570
And of course, there are more
examples as you can see there in code.

110
00:08:51,370 --> 00:08:56,510
You all know, co pilot generate,
refactor, debug, and explain code.

111
00:08:56,510 --> 00:09:02,530
Of course, in build, you can do auto
remediation of security vulnerabilities.

112
00:09:02,530 --> 00:09:11,190
For example, in test, you can do an impact
analysis of the changes and predict what

113
00:09:11,260 --> 00:09:18,710
the impact is off that change and then
execute accordingly test cases in deploy.

114
00:09:18,960 --> 00:09:23,390
You can use a I to predict the
impact off the deployment and

115
00:09:23,390 --> 00:09:26,800
also monitor the deployment,
health and auto trigger rollbacks.

116
00:09:28,465 --> 00:09:33,605
In release, you can do continuous
release verification and also again,

117
00:09:33,815 --> 00:09:39,775
impact analysis in operate, you can
detect and fix configuration drift fully

118
00:09:39,775 --> 00:09:45,984
automatically, and in monitor, you can do
pattern recognition, anomaly detection,

119
00:09:45,994 --> 00:09:48,459
event correlation, root cause analysis.

120
00:09:48,730 --> 00:09:54,450
and also self healing, by the way,
this is usually what I just told you.

121
00:09:54,690 --> 00:10:01,360
This is called AI Ops, and this
is a technique that is also

122
00:10:01,409 --> 00:10:05,680
quite long out there, which is
absolutely ready to use already.

123
00:10:07,690 --> 00:10:14,730
So you can see all of these use
cases, but for these use cases, you

124
00:10:14,780 --> 00:10:17,589
need to have the right foundation.

125
00:10:18,755 --> 00:10:23,025
And now you ask, why do we need
to have the right foundation?

126
00:10:23,515 --> 00:10:24,735
Let's have a quick look.

127
00:10:24,855 --> 00:10:30,645
So normally what you have is
different projects or products that

128
00:10:30,645 --> 00:10:35,205
you are developing, and you have
different streams, value streams.

129
00:10:35,785 --> 00:10:41,005
That are developing these, and these
can be internal developed, mixed with

130
00:10:41,055 --> 00:10:47,695
externals or only externals, but all
of them have their local development

131
00:10:47,695 --> 00:10:55,225
environment, which means you also have
quite a huge tool landscape in there.

132
00:10:56,035 --> 00:11:00,275
So where the world at
the moment is moving.

133
00:11:00,805 --> 00:11:05,775
It's moving in the direction of platform
engineering, which is an important thing.

134
00:11:06,020 --> 00:11:13,370
What you want to have is one platform
where all of these tools are built up,

135
00:11:13,830 --> 00:11:20,300
which leads then to have a clear set of
services and a clear set of products.

136
00:11:21,290 --> 00:11:26,170
That, you can use or which
the developer can use, and

137
00:11:26,200 --> 00:11:28,030
this leads to standardization.

138
00:11:28,030 --> 00:11:33,970
And this is very important when it
comes to AI augmented operations,

139
00:11:34,330 --> 00:11:36,420
because that is the foundation.

140
00:11:36,550 --> 00:11:39,879
And only with that,
this whole thing scales.

141
00:11:41,400 --> 00:11:45,310
The target operating model, which
we need for platform engineering

142
00:11:45,310 --> 00:11:49,800
and of course also for AI
Augmented DevOps looks like this.

143
00:11:50,030 --> 00:11:55,490
at the moment, we have different
product teams with all of the

144
00:11:55,490 --> 00:11:57,819
people in there that are needed.

145
00:11:58,195 --> 00:12:01,855
And the cognitive load and
the complexity is quite high.

146
00:12:01,925 --> 00:12:06,545
And what we want to have is this
target operating model where we

147
00:12:06,735 --> 00:12:11,684
still have the product teams, but
you see they are much smaller.

148
00:12:11,744 --> 00:12:15,385
They also cover a much
smaller technical stack.

149
00:12:15,725 --> 00:12:23,465
While the platform team, creates a self
service platform, with of course a bigger

150
00:12:23,755 --> 00:12:31,095
technology stack, but that is a product
that they are delivering to product teams.

151
00:12:31,554 --> 00:12:34,275
let's have a quick different look on that.

152
00:12:34,495 --> 00:12:38,094
So we have the platform team
that develops, builds, and

153
00:12:38,134 --> 00:12:39,934
maintains that platform.

154
00:12:40,285 --> 00:12:47,315
With different capabilities and different
tools in there, and they are enabling

155
00:12:47,605 --> 00:12:53,355
the product teams to develop their
product, the product teams, they are

156
00:12:53,355 --> 00:12:59,315
practicing DevOps, and they are building,
running and maintaining the product.

157
00:12:59,525 --> 00:13:00,395
Their products.

158
00:13:00,425 --> 00:13:05,855
It is not the platform team that
maintains, or operates their products.

159
00:13:05,955 --> 00:13:09,535
It is the product teams that
are doing the platform team

160
00:13:09,675 --> 00:13:12,995
only gives to the product teams.

161
00:13:13,715 --> 00:13:17,014
The capabilities and the tools.

162
00:13:17,245 --> 00:13:23,205
that they need to use or they
want to use, for their products.

163
00:13:23,395 --> 00:13:26,385
And this means that the product
teams generate value for the

164
00:13:26,385 --> 00:13:31,924
customer while the platform team
generates value to the product teams.

165
00:13:33,410 --> 00:13:37,320
When we look from an architecture
perspective, how this looks

166
00:13:37,370 --> 00:13:38,880
then this looks like this.

167
00:13:38,900 --> 00:13:45,399
You have, of course, your platform with
CLI and, with, with, self service portal.

168
00:13:45,720 --> 00:13:47,350
And you have all of the tools.

169
00:13:47,419 --> 00:13:49,569
You are not hiding away these tools.

170
00:13:49,569 --> 00:13:53,409
You just integrate these
tools into your platform.

171
00:13:53,630 --> 00:13:55,310
And that's a very important thing.

172
00:13:56,025 --> 00:13:59,095
And then usually you have your
internal developer portal.

173
00:13:59,305 --> 00:14:04,534
This is something you usually,
relate to backstage and many

174
00:14:04,535 --> 00:14:06,405
companies are using backstage.

175
00:14:06,605 --> 00:14:12,205
But as you can see, this is only
that tiny layer on top of that.

176
00:14:12,454 --> 00:14:18,605
And this is also why some companies
are not so satisfied with backstage

177
00:14:18,965 --> 00:14:21,115
because it is only that layer.

178
00:14:21,415 --> 00:14:25,525
That layer below these layers,
these multiple layers, they are not

179
00:14:25,555 --> 00:14:29,165
included in backstage because what
you need to have is, of course,

180
00:14:29,185 --> 00:14:30,934
also provisioning and automation.

181
00:14:30,935 --> 00:14:39,214
You need to automate things in there
and what you also need to have is you

182
00:14:39,214 --> 00:14:42,075
need to integrate all of these tools.

183
00:14:42,705 --> 00:14:48,115
Into your platform, and this is
something where I recommend to use

184
00:14:48,215 --> 00:14:53,175
adapters because when you integrate
these tools, you never know when

185
00:14:53,185 --> 00:14:55,765
one of these tools is this dying.

186
00:14:56,094 --> 00:15:01,080
I even don't know how long
GitLab will be on the market.

187
00:15:01,240 --> 00:15:04,460
This is why we have a GitLab adapter.

188
00:15:04,790 --> 00:15:09,600
And then on top of that, a unified
integration block for repositories,

189
00:15:10,100 --> 00:15:15,410
which means we can integrate
GitLab, GitHub, or whatever we want.

190
00:15:16,195 --> 00:15:24,294
And into that, and this makes it much
more easier to replace one of these tools.

191
00:15:24,745 --> 00:15:28,484
So this is the high level
architecture of a platform.

192
00:15:28,774 --> 00:15:33,674
And this leads us to a very
important architectural principle

193
00:15:33,684 --> 00:15:35,074
that I want to give you.

194
00:15:35,454 --> 00:15:40,924
when you are building a platform,
what you need to do is you need to

195
00:15:40,924 --> 00:15:43,824
create a so called floating platform.

196
00:15:44,394 --> 00:15:50,734
And a floating platform means that you
are just plugging in all of the services,

197
00:15:50,824 --> 00:15:58,854
all of the tools, All of the DevOps
platforms like GitHub, GitLab, and so on.

198
00:15:59,284 --> 00:16:03,814
And you get this developer
experience on top of that.

199
00:16:04,284 --> 00:16:11,924
What you never ever should do is duplicate
A feature from one of the tools of one,

200
00:16:11,924 --> 00:16:18,514
one of the platforms below you just
integrate that with that you have a

201
00:16:18,514 --> 00:16:25,404
floating platform, which floats with the
tools, because when they are creating

202
00:16:25,404 --> 00:16:29,049
new features, You float on top of them.

203
00:16:30,029 --> 00:16:37,509
As soon as you are going to hide
anything away, abstract anything away,

204
00:16:37,559 --> 00:16:43,749
or implement or duplicate a feature,
your platform will start to sink.

205
00:16:43,909 --> 00:16:45,229
And that's a huge problem.

206
00:16:45,289 --> 00:16:46,789
always remember that.

207
00:16:47,039 --> 00:16:49,409
you need to build a floating platform.

208
00:16:50,169 --> 00:16:56,249
Now, of course, and I bring that
picture again, many of you will say, but

209
00:16:56,569 --> 00:17:01,029
Romano, AI is just that tiny box there.

210
00:17:01,389 --> 00:17:04,449
But nowadays, AI is
everywhere and it's huge.

211
00:17:05,069 --> 00:17:09,999
Yes, of course, in your platform,
it is just a capability.

212
00:17:10,519 --> 00:17:15,549
But when we zoom into that
box, then it looks like this.

213
00:17:16,249 --> 00:17:19,429
Up top, you have the product
development teams that are

214
00:17:19,439 --> 00:17:22,019
using your developer portal.

215
00:17:22,369 --> 00:17:25,739
You also expose some CLIs and APIs.

216
00:17:26,054 --> 00:17:31,724
And below that, and this is important, you
have the application, you have chatbots,

217
00:17:31,784 --> 00:17:37,274
which I will show you in a minute, you
have AI coding assistance, you potentially

218
00:17:37,274 --> 00:17:39,564
have a knowledge management and so on.

219
00:17:40,454 --> 00:17:44,914
Below that, you have the tooling layer
where you have prompt engineering, error

220
00:17:45,824 --> 00:17:49,224
cases, vector databases, and so on.

221
00:17:49,274 --> 00:17:52,344
And below that, you have the models.

222
00:17:53,019 --> 00:17:57,779
With a model hub, with enterprise
specific models, all of that.

223
00:17:57,849 --> 00:18:04,579
And below that you integrate
all of the APIs of the Gen AI

224
00:18:04,669 --> 00:18:06,869
infrastructure that is out there.

225
00:18:07,149 --> 00:18:07,209
thank you.

226
00:18:07,609 --> 00:18:16,509
This is how you integrate, AI
augmented DevOps into your platform.

227
00:18:17,069 --> 00:18:25,069
And with that, we are going to have a look
how that looks like in a real platform.

228
00:18:25,789 --> 00:18:27,009
So let's.

229
00:18:27,519 --> 00:18:36,469
switch here, what you can see here
is, already that platform that

230
00:18:36,489 --> 00:18:40,209
we have built together with LGT.

231
00:18:40,499 --> 00:18:43,679
LGT is a bank in Liechtenstein.

232
00:18:44,094 --> 00:18:49,404
And together with them,
we have built this portal.

233
00:18:49,544 --> 00:18:52,444
Now we are on the so called Zulu plane.

234
00:18:52,664 --> 00:18:58,764
This is the portal that we use
at Zühlke for our projects.

235
00:18:59,184 --> 00:19:04,404
so when we do client projects, we develop
them if we are allowed with Zühlke.

236
00:19:04,894 --> 00:19:10,704
This platform entity has their
own instance of that platform.

237
00:19:12,024 --> 00:19:17,314
So what you can see already, this
is what the developer usually sees.

238
00:19:17,804 --> 00:19:22,214
You, of course, have, you have
documentation and you can even

239
00:19:22,214 --> 00:19:26,874
switch here to a AI assistant
where you can ask questions

240
00:19:26,874 --> 00:19:29,794
like, how can I create a cluster?

241
00:19:29,934 --> 00:19:31,014
And so on.

242
00:19:31,534 --> 00:19:33,394
We also have here, the AI chat.

243
00:19:33,584 --> 00:19:34,944
I quickly go into that.

244
00:19:35,354 --> 00:19:37,854
here you can see our AI chat.

245
00:19:37,995 --> 00:19:40,304
And this is also an important thing.

246
00:19:40,314 --> 00:19:42,804
We developed that for Zühlke.

247
00:19:43,094 --> 00:19:52,054
It looks similar to chat GPT, but
this is a chat, that we rolled out at

248
00:19:52,344 --> 00:20:01,004
Zühlke, so that we can use chat GPT, or
whatever LLM that we, have behind that.

249
00:20:01,559 --> 00:20:07,469
In a standardized and, also, a
standardized and a government way.

250
00:20:07,769 --> 00:20:15,459
And, of course, you, can type in, what
is DevOps, for example, in here, and

251
00:20:15,819 --> 00:20:20,099
chat GPT like you get the answer of that.

252
00:20:20,979 --> 00:20:26,139
It is very important to understand that,
the employees don't, You need to know what

253
00:20:26,249 --> 00:20:29,439
kind of LLM or service is behind that.

254
00:20:29,749 --> 00:20:35,809
And you can even replace these services
quite easily when you have LLM.

255
00:20:36,199 --> 00:20:40,609
Such a platform that provides
you with these services in a

256
00:20:40,609 --> 00:20:42,559
standardized, governed way.

257
00:20:43,839 --> 00:20:48,159
Now, we go to the platform itself.

258
00:20:48,209 --> 00:20:53,849
This is where the platform
plane is implemented.

259
00:20:54,149 --> 00:20:55,584
so we implement this.

260
00:20:55,724 --> 00:20:56,674
The platform plane.

261
00:20:56,684 --> 00:21:00,564
This is the product with
this platform plane.

262
00:21:02,034 --> 00:21:05,264
I will not show you everything
because there is a ton of

263
00:21:05,704 --> 00:21:07,434
things that I could show you.

264
00:21:07,434 --> 00:21:11,584
There are also videos on my
YouTube channel which explain

265
00:21:11,584 --> 00:21:13,284
this platform in more detail.

266
00:21:13,624 --> 00:21:20,024
We just go now to the AI cases that
we started to implement in here.

267
00:21:20,754 --> 00:21:26,189
We have here the registry, which
is The registry, the container

268
00:21:26,189 --> 00:21:31,519
registry, we go here, for example,
to these Argo CD operator.

269
00:21:32,099 --> 00:21:36,199
We can click here on one of
them, and we see here the

270
00:21:36,199 --> 00:21:39,019
layers of this container image.

271
00:21:39,519 --> 00:21:45,359
And what we got from the developers
as feedback is we have some

272
00:21:45,359 --> 00:21:48,049
difficulties with our containers.

273
00:21:49,039 --> 00:21:50,719
Could you help us?

274
00:21:51,739 --> 00:21:55,949
The platform team itself is
too small to really help them

275
00:21:55,969 --> 00:21:57,889
with their container images.

276
00:21:57,929 --> 00:22:05,709
But what we could do is show them the
layering and add a button to, to analyze

277
00:22:05,749 --> 00:22:10,369
that and what you can see here is
just a large language model, which is

278
00:22:10,549 --> 00:22:14,289
optimized for container image analysis.

279
00:22:14,609 --> 00:22:15,779
And it's very awesome.

280
00:22:15,839 --> 00:22:23,719
And this is also one part of how
you can leverage AI augmented

281
00:22:23,939 --> 00:22:26,599
DevOps into your platform.

282
00:22:27,169 --> 00:22:32,039
And the developers really,
like that, they, they're using

283
00:22:32,049 --> 00:22:34,159
that quite often, quite a lot.

284
00:22:35,009 --> 00:22:37,659
We are now going to the platform itself.

285
00:22:37,779 --> 00:22:42,059
So here, we have the Kubernetes
cluster with, all of the

286
00:22:42,079 --> 00:22:43,989
applications that are running.

287
00:22:44,349 --> 00:22:48,549
And again, because when you have
such a platform, you have all

288
00:22:48,569 --> 00:22:50,629
of the log files also in there.

289
00:22:51,009 --> 00:22:57,249
And then you can just analyze such
a namespace, that you can see here.

290
00:22:57,509 --> 00:23:04,559
you see how this chatbot is analyzing
these, log files that you have in there.

291
00:23:04,769 --> 00:23:08,359
This was, unfortunately
not a very good example.

292
00:23:08,360 --> 00:23:09,609
I go to that one.

293
00:23:10,529 --> 00:23:11,349
It's also not

