1
00:00:14,680 --> 00:00:18,719
Hi, and welcome to my presentation
about AI Augmented DevOps

2
00:00:19,660 --> 00:00:21,340
with Platform Engineering.

3
00:00:22,300 --> 00:00:28,220
First, quickly to myself, my name
is Roman Roth and I am the global

4
00:00:28,220 --> 00:00:31,089
chief of DevOps and also a partner.

5
00:00:31,489 --> 00:00:40,260
I joined Zilke 22 years ago as a junior
NET engineer right from the university.

6
00:00:40,429 --> 00:00:44,500
I became then an expert software
engineer, then an architect,

7
00:00:44,580 --> 00:00:46,090
and finally a consultant.

8
00:00:47,715 --> 00:00:51,715
During that time, what always
was at my heart is how can we

9
00:00:51,715 --> 00:00:53,125
continuously deliver value?

10
00:00:53,435 --> 00:00:55,035
How can we automate things?

11
00:00:55,225 --> 00:00:58,815
And how can we ensure the
quality of what we are building?

12
00:00:59,004 --> 00:01:03,244
And when the whole DevOps movement
started, I jumped right on

13
00:01:03,244 --> 00:01:07,514
top of that, became one of the
organizers of the DevOps movement.

14
00:01:07,835 --> 00:01:13,385
Meetup Zurich, which is a monthly
meetup with over 2, 000, persons.

15
00:01:13,745 --> 00:01:19,715
And I'm also one of the organizers of
DevOps Day Zurich, which is a two day

16
00:01:19,975 --> 00:01:22,215
conference, which we are doing yearly.

17
00:01:22,555 --> 00:01:26,825
And these DevOps Days, they are all around
the world and all of the big cities.

18
00:01:27,175 --> 00:01:30,885
around the world, and I am the
president of the DevOps Day Series.

19
00:01:32,535 --> 00:01:35,835
You can already see DevOps
lies very close to my heart.

20
00:01:36,155 --> 00:01:42,955
This is also why I have my own
YouTube channel with over 250 videos

21
00:01:43,004 --> 00:01:47,655
all around DevOps, architecture,
platform engineering, and so on.

22
00:01:47,985 --> 00:01:53,435
And I also blog a lot, tweet a lot,
and I even write at the moment my

23
00:01:53,465 --> 00:01:56,245
own book about the digital factory.

24
00:01:57,475 --> 00:02:01,465
If you want to learn more about
DevOps, platform engineering,

25
00:02:01,505 --> 00:02:06,345
and so on, please subscribe to
one of my social media channels.

26
00:02:07,235 --> 00:02:10,985
In my projects, I work for different
clients in different industries to

27
00:02:11,365 --> 00:02:16,694
DevOps transformation, introduce
platform engineering, and currently,

28
00:02:16,824 --> 00:02:22,985
I'm the product manager of a platform
project which we are doing with LGT,

29
00:02:23,024 --> 00:02:25,305
which is a bank in Liechtenstein.

30
00:02:25,705 --> 00:02:30,860
And, I will show you during
this presentation a demo of

31
00:02:30,940 --> 00:02:35,230
AI Augmented DevOps and how we
have implemented that into that.

32
00:02:35,280 --> 00:02:40,210
stay with me and let's now dive
into the actual presentation.

33
00:02:41,575 --> 00:02:48,205
One thing that is also potentially to
you, what it also happens, of course, to

34
00:02:48,205 --> 00:02:54,094
me is that the management, the business
or the CEO, the CIO is coming to you

35
00:02:54,095 --> 00:03:01,185
and say, Romano, we need to have AI
because AI is a salute game changer.

36
00:03:01,185 --> 00:03:05,445
We need to put AI into
our development process.

37
00:03:06,565 --> 00:03:07,755
And one good thing.

38
00:03:08,305 --> 00:03:17,535
To do when you get such an ask is to
ask, why do you would like to have that?

39
00:03:17,545 --> 00:03:20,845
Why do you want to have that?

40
00:03:20,954 --> 00:03:23,914
What is the root cause of that ask?

41
00:03:24,684 --> 00:03:28,794
And usually what you get
is, the following answer.

42
00:03:29,074 --> 00:03:31,944
We want to have a faster time to market.

43
00:03:32,364 --> 00:03:37,414
We want to get more value for the
money and higher quality out of

44
00:03:37,414 --> 00:03:42,824
it, which then leads to, of course,
higher customer satisfaction.

45
00:03:43,604 --> 00:03:52,554
Now, with that, what we need to do is
we need to analyze our value stream,

46
00:03:53,094 --> 00:03:58,959
because modern software development
is a continuous process, which

47
00:03:58,959 --> 00:04:04,039
you can see there in that infinity
loop, across the whole value stream.

48
00:04:04,549 --> 00:04:09,859
And of course, when you look at the value
stream, then you have different practices

49
00:04:09,909 --> 00:04:13,349
that you are doing in that very process.

50
00:04:14,079 --> 00:04:19,859
Now, I already told you what we need
to do is analyze that value stream and

51
00:04:19,859 --> 00:04:23,599
for that we use value stream mapping.

52
00:04:24,079 --> 00:04:29,669
And this is a very important
technique to identify the bottlenecks.

53
00:04:29,719 --> 00:04:35,744
And this is also Where we
potentially can then use AI.

54
00:04:36,604 --> 00:04:38,374
How do we do value stream mapping?

55
00:04:38,434 --> 00:04:44,074
First of all, you need to bring all
of the people that work across one

56
00:04:44,084 --> 00:04:49,924
of these value streams, which produce
one or many products, into a room.

57
00:04:50,574 --> 00:04:55,034
You give them post its and you
say, What are the steps that we

58
00:04:55,034 --> 00:04:58,274
need from idea until production?

59
00:04:58,304 --> 00:05:04,064
And you get that example here, feature
definition, design, code, test, and so on.

60
00:05:04,284 --> 00:05:08,484
Of course, in your value stream,
this will be far more complicated.

61
00:05:08,484 --> 00:05:12,364
Usually, the value streams, when I do
value stream mapping, they are much,

62
00:05:12,364 --> 00:05:15,024
much bigger than this small example.

63
00:05:16,684 --> 00:05:23,194
After that, you say, okay, now let's
have a look who is working in this step

64
00:05:23,194 --> 00:05:25,204
or who is responsible for that step.

65
00:05:25,904 --> 00:05:31,054
And you get product owner, architect,
developer, and tester, and so on.

66
00:05:31,874 --> 00:05:34,384
And then you say, okay,
now we need to measure.

67
00:05:34,969 --> 00:05:41,069
The efficiency of each one of these
steps and we do that by defining the

68
00:05:41,069 --> 00:05:47,959
lead time lt which is the time from
step beginning until step end when

69
00:05:47,959 --> 00:05:53,929
the next step can continue and it
includes all of the waiting time.

70
00:05:54,544 --> 00:06:00,574
And then you say, okay, and how much is
really actually working time in there?

71
00:06:00,754 --> 00:06:04,974
Which is the process time that
you can see there, which is pt.

72
00:06:05,784 --> 00:06:10,314
And then you say, okay, and what
is the quality of that, step?

73
00:06:10,314 --> 00:06:14,874
And that's the percentage complete and
accuracy, the percentage C and D that you

74
00:06:14,874 --> 00:06:17,064
can see there, which is a measurement.

75
00:06:17,319 --> 00:06:23,069
Which says how much rework do we need
to do, when, the quality is not good.

76
00:06:23,369 --> 00:06:28,229
And for example, when you have 80%,
like in the feature definition, it

77
00:06:28,349 --> 00:06:34,679
means that in 20% of the cases, we need
to go back to that step because the

78
00:06:34,679 --> 00:06:37,439
quality of that feature definition was.

79
00:06:38,394 --> 00:06:39,164
Good enough.

80
00:06:39,924 --> 00:06:45,464
And then suddenly you get this
picture here and immediately you

81
00:06:45,464 --> 00:06:48,024
can see where the bottlenecks are.

82
00:06:48,034 --> 00:06:49,434
For example, in code and test.

83
00:06:50,054 --> 00:06:54,854
massive discrepancies between
process time and lead time.

84
00:06:54,854 --> 00:06:59,034
For example, in tests, we have a process
time, actual work where the tester is

85
00:06:59,034 --> 00:07:06,874
working of eight hours and the lead
time is 336 hours, which is huge.

86
00:07:06,874 --> 00:07:11,374
There is a lot of waiting time and
a lot of inefficiencies in there.

87
00:07:11,824 --> 00:07:16,354
Also, the percentage C and a complete
and accuracy is 50%, which means.

88
00:07:16,380 --> 00:07:20,229
In 50 percent of the case, we
need to go back to that step

89
00:07:20,229 --> 00:07:23,609
because the quality was not good.

90
00:07:24,689 --> 00:07:31,059
When you have done that, you have
identified potential bottlenecks

91
00:07:31,259 --> 00:07:35,099
where you could use a bot.

92
00:07:35,520 --> 00:07:41,809
I always say, think about it, because
Potentially, also another solution

93
00:07:41,819 --> 00:07:48,309
might be better and even adapting the
process could be a simple solution,

94
00:07:48,549 --> 00:07:52,039
but of course, you could use AI.

95
00:07:52,939 --> 00:08:00,284
When you look at that, then you, you
immediately see, Some of the spots

96
00:08:00,504 --> 00:08:07,634
where you potentially can use AI in
your whole development value stream

97
00:08:07,854 --> 00:08:09,984
which are highlighted in there.

98
00:08:10,904 --> 00:08:14,934
These are potential areas
where you could use AI.

99
00:08:15,824 --> 00:08:18,714
I also showed that in a other picture.

100
00:08:18,834 --> 00:08:24,384
So to give you also a little bit
of input, what possibilities are

101
00:08:24,424 --> 00:08:29,844
out there for AI augmented DevOps
use cases in a value stream.

102
00:08:30,214 --> 00:08:37,524
So for example, in plan, we can use AI
to analyze historic project data, Predict

103
00:08:37,604 --> 00:08:41,564
risks, resource needs, and delivery times.

104
00:08:41,574 --> 00:08:43,544
So that could be something.

105
00:08:43,544 --> 00:08:46,904
And of course, there are more
examples, as you can see there.

106
00:08:47,284 --> 00:08:53,374
In code, you all know, co pilot,
generate, refactor, debug,

107
00:08:53,374 --> 00:08:55,039
and explain code, of course.

108
00:08:55,329 --> 00:09:01,129
In build, you can do auto remediation of
security vulnerabilities, for example.

109
00:09:01,539 --> 00:09:09,349
In test, you can do an impact analysis
of the changes and predict, what the

110
00:09:09,349 --> 00:09:15,449
impact is of, of, of that change and
then execute accordingly, test cases.

111
00:09:15,954 --> 00:09:21,304
In Deploy, you can use AI to
predict the impact of the deployment

112
00:09:21,354 --> 00:09:24,574
and also monitor the deployment
health and auto trigger rollbacks.

113
00:09:26,594 --> 00:09:31,744
In Release, You can do continuous
release verification and also again,

114
00:09:31,964 --> 00:09:37,104
impact analysis in operate, you
can detect and fix configuration

115
00:09:37,114 --> 00:09:38,774
drift fully automatically.

116
00:09:39,044 --> 00:09:44,544
And in monitor, you can do pattern
recognition, anomaly detection, event

117
00:09:44,564 --> 00:09:48,964
correlation, root cause analysis,
and also self healing, by the way.

118
00:09:49,414 --> 00:09:55,954
This is usually, what I just told
you, this is called AI Ops, and

119
00:09:56,124 --> 00:09:58,459
this is a technique that is used.

120
00:09:58,869 --> 00:10:03,819
Also, quite long out there, which
is absolutely ready to use already.

121
00:10:05,799 --> 00:10:12,869
So you can see all of these use
cases, but for these use cases, you

122
00:10:12,919 --> 00:10:15,729
need to have the right foundation.

123
00:10:16,899 --> 00:10:21,139
And now you ask, why do we need
to have the right foundation?

124
00:10:21,644 --> 00:10:22,594
Let's have a quick look.

125
00:10:23,894 --> 00:10:28,564
Normally, what you have is
different projects or products

126
00:10:28,594 --> 00:10:29,304
that you are developing.

127
00:10:30,084 --> 00:10:35,304
And you have different streams, value
streams, that are developing these.

128
00:10:35,819 --> 00:10:42,219
And this can be internal developed mixed
with externals or only externals, but

129
00:10:42,489 --> 00:10:49,639
all of them have their local development
environment, which means you also have

130
00:10:49,709 --> 00:10:53,369
quite a huge tool landscape in there.

131
00:10:54,209 --> 00:10:58,159
So where the world at
the moment is moving.

132
00:10:58,959 --> 00:11:03,939
It's moving in the direction of platform
engineering, which is an important thing.

133
00:11:04,189 --> 00:11:10,469
What you want to have is one platform
where all of these tools are built.

134
00:11:11,979 --> 00:11:17,739
Which leads then to have a clear
set of services and a clear set

135
00:11:17,889 --> 00:11:23,439
of products that you can use
or which the developer can use.

136
00:11:24,129 --> 00:11:26,259
and this leads to standardization.

137
00:11:26,260 --> 00:11:32,149
And this is very important when it
comes to AI augmented operations

138
00:11:32,539 --> 00:11:34,589
because that is the foundation.

139
00:11:34,719 --> 00:11:38,229
And only with that,
this whole thing scales.

140
00:11:38,229 --> 00:11:38,359
Thanks.

141
00:11:39,569 --> 00:11:43,479
The target operating model, which
we need for platform engineering,

142
00:11:43,479 --> 00:11:47,969
and of course, also for AI
augmented DevOps looks like this.

143
00:11:48,199 --> 00:11:54,839
at the moment, we have different product
teams with all of the people in there

144
00:11:54,839 --> 00:12:00,019
that are needed, and the cognitive
load and the complexity is quite high.

145
00:12:00,089 --> 00:12:05,189
And what we want to have is this
target operating model, where we still

146
00:12:05,209 --> 00:12:11,294
have the product teams, But they are
much smaller, they also cover a much

147
00:12:11,294 --> 00:12:18,874
smaller technical stack, while platform
team, creates a self service platform,

148
00:12:19,134 --> 00:12:24,684
with, of course, a bigger technology
stack, but that is a product that

149
00:12:24,794 --> 00:12:28,344
they are delivering product teams.

150
00:12:28,869 --> 00:12:31,569
let's have a quick,
different look on that.

151
00:12:31,799 --> 00:12:36,539
So we have the platform team that
develops, builds, maintains that

152
00:12:36,599 --> 00:12:42,209
platform with different capabilities
and different tools in there.

153
00:12:42,964 --> 00:12:48,214
And they are enabling the product
teams to develop their product.

154
00:12:48,274 --> 00:12:55,264
The product teams, they are practicing
DevOps, and they are building, running,

155
00:12:55,324 --> 00:12:57,634
and maintaining their products.

156
00:12:57,744 --> 00:13:00,769
It is not the platform team
that maintains the product.

157
00:13:01,159 --> 00:13:06,539
or operates their products, it is
the product teams that the platform

158
00:13:06,539 --> 00:13:13,609
team only gives to the product
teams, the capabilities and the

159
00:13:13,659 --> 00:13:20,439
tools that they need to use, or they
want to use, for their products.

160
00:13:21,044 --> 00:13:24,034
And this means that the product
teams generate value for the

161
00:13:24,034 --> 00:13:29,564
customer while the platform team
generates value to the product teams.

162
00:13:31,054 --> 00:13:34,964
When we look from an architectural
perspective how this looks

163
00:13:34,964 --> 00:13:37,644
like, then this looks like this.

164
00:13:37,664 --> 00:13:40,434
You have, of course, your platform.

165
00:13:40,759 --> 00:13:46,839
With CLI and, with, with, self service
portal, and you have all of the tools, you

166
00:13:46,839 --> 00:13:52,769
are not hiding away these tools, you just
integrate these tools into your platform,

167
00:13:52,769 --> 00:13:54,439
and that's a very important thing.

168
00:13:55,159 --> 00:13:58,279
And then usually you have your
internal developer portal.

169
00:13:58,479 --> 00:14:03,099
This is something you
usually, relate to backstage.

170
00:14:03,229 --> 00:14:05,569
And many companies are using backstage.

171
00:14:05,779 --> 00:14:11,189
But as you can see, this is only
that tiny layer on top of that.

172
00:14:11,639 --> 00:14:17,759
And this is also why some companies
are not so satisfied with backstage,

173
00:14:18,139 --> 00:14:20,289
because it is only that layer.

174
00:14:20,290 --> 00:14:20,297
Bye.

175
00:14:20,297 --> 00:14:20,304
Bye.

176
00:14:20,594 --> 00:14:24,704
That layer below, these layers,
these multiple layers, they are not

177
00:14:24,734 --> 00:14:28,654
included in Backstage because what
you need to have is, of course, also

178
00:14:28,664 --> 00:14:33,014
provisioning and automation, you
need to automate things, in there.

179
00:14:33,324 --> 00:14:39,354
And what, what you also need to
have is you need to integrate all

180
00:14:39,404 --> 00:14:42,394
of these tools into your platform.

181
00:14:42,724 --> 00:14:48,074
And this is something where I
recommend to use adapters because.

182
00:14:48,784 --> 00:14:54,194
When you integrate these tools, you never
know when one of these tools is dying.

183
00:14:54,544 --> 00:14:59,514
I even don't know how long
GitLab will be on the market.

184
00:14:59,674 --> 00:15:02,894
This is why we have a GitLab adapter.

185
00:15:03,244 --> 00:15:07,645
And then on top of that, a unified
integration block for repositories.

186
00:15:07,645 --> 00:15:15,874
Which means we can integrate GitLab,
GitHub, or whatever we want into that.

187
00:15:16,144 --> 00:15:23,009
And This makes it much more easier
to replace one of these tools.

188
00:15:24,099 --> 00:15:27,329
This is the high level
architecture of a platform.

189
00:15:27,609 --> 00:15:32,509
And this leads us to a very
important architectural principle

190
00:15:32,519 --> 00:15:33,869
that I want to give you.

191
00:15:34,259 --> 00:15:39,739
when you are building a platform,
what you need to do is you need to

192
00:15:39,739 --> 00:15:42,419
create a so called floating platform.

193
00:15:43,219 --> 00:15:49,549
And a floating platform means that you
are just plugging in all of the services,

194
00:15:49,629 --> 00:15:58,059
all of the tools, all of the DevOps
platforms, like GitHub, GitLab, and so on.

195
00:15:58,499 --> 00:16:03,034
And you get this developer
experience on top of that.

196
00:16:03,484 --> 00:16:10,004
What you never, ever should do is
duplicate a feature from one of the

197
00:16:10,004 --> 00:16:12,994
tools or from one of the platforms below.

198
00:16:13,344 --> 00:16:15,164
You just integrate that.

199
00:16:15,574 --> 00:16:23,054
With that, you have a floating platform
which floats with the tools because

200
00:16:23,074 --> 00:16:25,374
when they are creating new features.

201
00:16:25,619 --> 00:16:34,139
You float on top of them as soon as
you are going to imp to hide anything

202
00:16:34,139 --> 00:16:38,849
away, abstract anything away, or
implement or duplicate a feature,

203
00:16:39,339 --> 00:16:42,259
your platform will start to sink.

204
00:16:42,639 --> 00:16:43,939
And that's a huge problem.

205
00:16:43,999 --> 00:16:50,449
Always remember that you need to build
a floating platform now, of course,

206
00:16:50,549 --> 00:16:56,599
and I bring that picture again, many
of you will say, but Romano, AI is

207
00:16:56,629 --> 00:17:02,929
just that tiny box there, but nowadays
AI is everywhere and it's huge.

208
00:17:03,559 --> 00:17:10,759
Yes, of course, in your platform, it
is just a capability, but when we zoom

209
00:17:10,799 --> 00:17:14,034
into that box, Then it looks like this.

210
00:17:14,744 --> 00:17:17,924
Off top, you have the product
development teams that are

211
00:17:17,934 --> 00:17:20,314
using your developer portal.

212
00:17:20,874 --> 00:17:24,404
You also expose some CLIs and APIs.

213
00:17:24,724 --> 00:17:28,954
And below that, and this is
important, you have the application.

214
00:17:28,964 --> 00:17:32,064
You have chatbots, which I
will show you in a minute.

215
00:17:32,114 --> 00:17:34,624
You have AI coding assistants.

216
00:17:35,149 --> 00:17:38,209
You potentially have a
knowledge management and so on.

217
00:17:39,119 --> 00:17:43,089
Below that you have the tooling layer
where you have prompt engineering,

218
00:17:43,209 --> 00:17:47,889
error cases, vector databases and so on.

219
00:17:47,929 --> 00:17:54,299
And below that you have the models,
with a model hub, with enterprise

220
00:17:54,379 --> 00:17:56,499
specific models, all of that.

221
00:17:56,559 --> 00:18:03,304
And below that, You integrate
all of the APIs of the Gen AI

222
00:18:03,384 --> 00:18:05,584
infrastructure that is out there.

223
00:18:06,564 --> 00:18:15,554
This is how you integrate, AI
Augmented DevOps into your platform.

224
00:18:16,134 --> 00:18:24,104
And with that, we are going to have a look
how that looks like in a real platform.

225
00:18:25,694 --> 00:18:26,084
Let's.

226
00:18:26,579 --> 00:18:27,299
switch here.

227
00:18:27,839 --> 00:18:35,939
What you can see here is,
already that platform that we

228
00:18:35,949 --> 00:18:38,319
have built together with LGT.

229
00:18:38,629 --> 00:18:46,069
LGT is a bank in Liechtenstein
and together with them, we have

230
00:18:46,189 --> 00:18:51,514
built these Portal, now we are
on the so called Sulu plane.

231
00:18:51,764 --> 00:18:57,834
This is the portal that we use
at Zühlke for our projects.

232
00:18:58,384 --> 00:19:02,134
when we do client projects,
we develop them, if we are

233
00:19:02,144 --> 00:19:04,704
allowed, with this platform.

234
00:19:05,084 --> 00:19:09,254
LGT has their own instance of platform.

235
00:19:11,864 --> 00:19:16,204
But you can see already, this is
what the developer usually sees.

236
00:19:16,584 --> 00:19:20,534
You of course have, you have
documentation and you can even

237
00:19:20,534 --> 00:19:25,954
switch here to a AI assistant where
you can ask questions like, how

238
00:19:25,974 --> 00:19:29,314
can I create a cluster and so on.

239
00:19:29,315 --> 00:19:31,684
We also have here the AI chat.

240
00:19:32,094 --> 00:19:33,244
Quickly go into that.

241
00:19:34,084 --> 00:19:36,874
Here you can see our AI chat.

242
00:19:37,574 --> 00:19:39,164
This is also an important thing.

243
00:19:39,174 --> 00:19:41,634
We developed that for Zühlke.

244
00:19:42,484 --> 00:19:50,914
Looks similar to chat GPT, but this
is a chat, that we rolled out at

245
00:19:50,954 --> 00:19:59,645
Zühlke so that we can use chat GPT,
or whatever LLM that we, have behind

246
00:19:59,655 --> 00:20:06,305
that in a standardized and, also,
a standardized and governed way.

247
00:20:06,645 --> 00:20:14,575
And, of course, you, can type in, what
is DevOps, for example, in here and

248
00:20:14,955 --> 00:20:17,839
chat GPT, like you get the default.

249
00:20:18,420 --> 00:20:22,124
The answer of that is very
important to understand that.

250
00:20:22,425 --> 00:20:30,165
Um, the employees don't need to know what
kind of LLM or service is behind them.

251
00:20:30,555 --> 00:20:37,795
And you can even replace these services
quite easily when you have such a

252
00:20:37,795 --> 00:20:42,815
platform that provides you with these
services in a standardized government.

253
00:20:44,645 --> 00:20:48,935
Now we go to the platform itself.

254
00:20:49,015 --> 00:20:52,765
This is where the platform plane is.

255
00:20:53,085 --> 00:20:54,675
is implemented.

256
00:20:54,965 --> 00:20:57,465
so we implement the platform plane.

257
00:20:57,505 --> 00:21:01,005
This is the product with,
this platform plane.

258
00:21:02,515 --> 00:21:05,735
I will not show you everything
because there is a ton of,

259
00:21:05,775 --> 00:21:07,935
things that I could show you.

260
00:21:07,965 --> 00:21:12,095
There are also videos on my
YouTube channel which explain

261
00:21:12,095 --> 00:21:13,795
this platform in more detail.

262
00:21:14,135 --> 00:21:20,535
We just go now to the AI cases that
we started to implement in here.

263
00:21:21,275 --> 00:21:26,915
We have here the registry, which is
the register, the container registry.

264
00:21:27,305 --> 00:21:31,325
we go here, for example,
to these Argo CD operator.

265
00:21:31,425 --> 00:21:35,525
we can click here on one
of them and we see here the

266
00:21:35,525 --> 00:21:38,345
layers of this container image.

267
00:21:38,845 --> 00:21:45,530
And what we got from the developers as
feedback is that We have some difficulties

268
00:21:45,600 --> 00:21:49,180
with our containers, could you help us?

269
00:21:50,420 --> 00:21:54,600
The platform team itself is
too small to really help them

270
00:21:54,620 --> 00:21:56,530
with their container images.

271
00:21:56,580 --> 00:22:00,640
But what we could do
is show them layering.

272
00:22:01,025 --> 00:22:07,325
And add a button to, to, to analyze
that and what you can see here is

273
00:22:07,345 --> 00:22:13,495
just a large language model, which is
optimized for container image analysis.

274
00:22:14,005 --> 00:22:15,175
And it's very awesome.

275
00:22:15,245 --> 00:22:23,835
And this is also one part of how you
can leverage AI augmented DevOps.

276
00:22:24,385 --> 00:22:30,925
Into your platform and the developers
really, like that, they, they're

277
00:22:30,925 --> 00:22:33,545
using that quite off quite a lot.

278
00:22:34,385 --> 00:22:37,025
We are now going to the platform itself.

279
00:22:37,135 --> 00:22:41,415
So here, we have the Kubernetes
cluster with, all of the

280
00:22:41,445 --> 00:22:43,325
applications that are running.

281
00:22:43,715 --> 00:22:47,915
And again, because when you have
such a platform, you have all

282
00:22:47,925 --> 00:22:49,995
of the log files also in there.

283
00:22:50,385 --> 00:22:56,865
And then you can just analyze such
a namespace that you can see here.

284
00:22:58,145 --> 00:23:05,725
You see how this chatbot is analyzing
these log files that you have in there.

285
00:23:06,025 --> 00:23:09,945
This was unfortunately
not a very good example.

286
00:23:10,165 --> 00:23:11,155
I go to that one.

287
00:23:12,115 --> 00:23:14,185
It's also not so good example.

288
00:23:16,685 --> 00:23:24,225
What you can see already is that it
is quite awesome to have these, These,

289
00:23:24,275 --> 00:23:27,495
these, analysis with AIs in there.

290
00:23:28,985 --> 00:23:34,255
We even go one step further
and enable also the developers

291
00:23:34,365 --> 00:23:37,615
to use these AI use cases.

292
00:23:38,625 --> 00:23:43,385
For example, you have here the
Azure OpenAI, that they can use.

293
00:23:43,385 --> 00:23:48,885
So this is the service catalog where
they can add services to their data.

294
00:23:49,250 --> 00:23:50,170
application.

295
00:23:50,440 --> 00:23:57,300
You also have here a whole LLM platform
that we can give them so that they can

296
00:23:57,490 --> 00:24:00,860
build on top of that their AI use cases.

297
00:24:00,910 --> 00:24:07,230
And this is exactly what some
of the developers have done.

298
00:24:07,230 --> 00:24:14,230
You see here that AI space and that
we have here and also this Zen AI.

299
00:24:14,380 --> 00:24:16,670
This is the home of the reference finder.

300
00:24:17,290 --> 00:24:20,450
this is this application that
we just have implemented.

301
00:24:20,490 --> 00:24:24,710
Unfortunately, I'm not allowed
to type anything in here because

302
00:24:24,900 --> 00:24:28,650
most of the things that you
have in here are confidential.

303
00:24:28,970 --> 00:24:35,240
But what we can do as, as Zulke
employees, find project references,

304
00:24:35,480 --> 00:24:39,270
which we then can use, with in our bits.

305
00:24:39,280 --> 00:24:41,870
And this is really an
absolute awesome thing.

306
00:24:42,810 --> 00:24:48,430
They have built on top of the platform
that we have these reference binders in.

307
00:24:49,195 --> 00:24:53,815
Nearly no time because all of
the services were already there.

308
00:24:54,465 --> 00:24:59,995
The second thing is this at Zen
AI here, they want to improve the

309
00:24:59,995 --> 00:25:02,315
whole bidding process, at Zilke.

310
00:25:02,855 --> 00:25:08,325
And, we have here things like
spin sales analysis, summarizer,

311
00:25:08,455 --> 00:25:13,285
improved text, AI chat with search,
workshop assistant, and so on.

312
00:25:13,485 --> 00:25:19,270
These are all AI agents with
specific system prompts that are

313
00:25:19,270 --> 00:25:21,780
highly optimized for our use case.

314
00:25:22,090 --> 00:25:26,800
I quickly just go into the
company analyzer and here I

315
00:25:26,830 --> 00:25:29,590
just search for the company.

316
00:25:31,440 --> 00:25:36,520
Here is a specialized prompt behind
a system prompt, which goes, of

317
00:25:36,520 --> 00:25:41,470
course, also to the internet, gathers
the information and gives that

318
00:25:41,480 --> 00:25:42,679
information back to the company.

319
00:25:42,680 --> 00:25:49,870
In a structured way, which you can
see here, including the references.

320
00:25:51,080 --> 00:26:00,600
These use cases are very powerful, and it
enables your company to do AI augmented

321
00:26:00,720 --> 00:26:04,230
DevOps and to do these AI, use cases.

322
00:26:05,480 --> 00:26:07,309
With that, we are going to continue.

323
00:26:07,600 --> 00:26:15,520
Back to presentation and we
are closing now with a summary.

324
00:26:15,570 --> 00:26:21,760
So what I just told you is we, when
you want to go into the direction

325
00:26:21,790 --> 00:26:27,885
of AI augmented DevOps with platform
engineering, It is very important

326
00:26:27,935 --> 00:26:30,175
to analyze your value stream.

327
00:26:31,065 --> 00:26:34,835
Not everything needs
to be solved with AIA.

328
00:26:35,855 --> 00:26:41,175
Sometimes it is far better
to just go and improve the

329
00:26:41,175 --> 00:26:43,575
process or rethink the process.

330
00:26:44,620 --> 00:26:50,070
This is why it is absolutely necessary
that you understand your value

331
00:26:50,090 --> 00:26:54,170
stream, that you are doing value
stream mapping, analyze where the

332
00:26:54,170 --> 00:27:01,130
problem areas are, and then think
about a potential solution first as,

333
00:27:01,400 --> 00:27:04,980
a process adaption and only last.

334
00:27:05,395 --> 00:27:11,645
think about using AI, but if you want
to go into this direction, then you need

335
00:27:11,705 --> 00:27:16,565
to have a target operating model with
platform engineering, you need to build

336
00:27:16,635 --> 00:27:24,135
up a platform engineering team that Builds
a self service platform, which should

337
00:27:24,255 --> 00:27:30,725
be a floating platform, which floats on
top of all of the tools and all of the

338
00:27:30,725 --> 00:27:33,345
platforms, cloud providers, everything.

339
00:27:33,675 --> 00:27:36,115
It needs to float on top of that.

340
00:27:37,685 --> 00:27:41,675
In there, AI is just a capability.

341
00:27:41,985 --> 00:27:47,165
And of course, that's quite a
huge capability, as we just saw.

342
00:27:47,515 --> 00:27:54,560
But having this AI capability
really, and encourages all of the

343
00:27:54,560 --> 00:28:01,960
people to use these AI use cases
in the whole DevOps lifecycle.

344
00:28:02,260 --> 00:28:07,620
And by having that you can
implement all of these use cases.

345
00:28:08,265 --> 00:28:11,965
What I did is I showed
you some of the use cases.

346
00:28:12,025 --> 00:28:16,495
Most of the use cases are
still under heavy development.

347
00:28:16,685 --> 00:28:21,895
For example, currently, we are thinking
about, I showed you that lock analysis.

348
00:28:21,915 --> 00:28:26,705
We are thinking about having a
second button where you could click

349
00:28:26,745 --> 00:28:32,695
and say, okay, fix that problem and
create a pull request out of that.

350
00:28:33,225 --> 00:28:37,295
And, a third thing that we are
currently also, developing is.

351
00:28:38,120 --> 00:28:46,440
A copilot for Visual Studio, which
uses the AI capabilities of that

352
00:28:46,470 --> 00:28:52,280
platform that you don't need to
pay that yearly subscription.

353
00:28:52,280 --> 00:29:00,456
So you see, by having such a platform,
this is an absolutely huge enabler for the

354
00:29:00,456 --> 00:29:04,160
development team, but also the business.

355
00:29:05,440 --> 00:29:11,210
And what you can clearly see is that we
are entering the age of industrial The

356
00:29:11,320 --> 00:29:14,310
software development these platform teams.

357
00:29:14,310 --> 00:29:19,610
They are building the platform which
enables The development team to do ai

358
00:29:19,610 --> 00:29:27,355
augmented devops, but it also enables
The business, because we start, we get

359
00:29:27,435 --> 00:29:33,055
a faster time to market more value for
the money and the higher quality, and

360
00:29:33,405 --> 00:29:42,365
it drives the whole, enterprise in the
direction of, AI driven, innovation.

361
00:29:43,105 --> 00:29:47,165
So with that, thank you very
much and see you next time.

