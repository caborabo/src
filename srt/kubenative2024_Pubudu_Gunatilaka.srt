1
00:00:14,070 --> 00:00:18,320
Hello everyone, welcome to the session
on streamlining API governance.

2
00:00:18,690 --> 00:00:20,660
Kubernetes native API management.

3
00:00:21,285 --> 00:00:22,945
My name is Puputhugunathilaka.

4
00:00:22,975 --> 00:00:25,625
I'm a senior technical leader at WSO2.

5
00:00:26,235 --> 00:00:30,634
My experience extends across the
API management landscape, as well as

6
00:00:30,635 --> 00:00:36,785
the cloud native technologies that
include, contain orchestration systems,

7
00:00:36,794 --> 00:00:39,004
service measures, and many more.

8
00:00:39,985 --> 00:00:45,345
In this talk, I will highlight the
Kubernetes Gateway API, exploring its

9
00:00:45,355 --> 00:00:51,604
transformative impact, not only in the
Kubernetes ecosystem, but also in the.

10
00:00:51,950 --> 00:00:53,800
broader API management landscape.

11
00:00:54,570 --> 00:01:01,455
We'll dive into how this new API is
reshaping the way we Approach API

12
00:01:01,485 --> 00:01:07,695
governance traffic management and service
extensibility within kubernetes ecosystem

13
00:01:08,955 --> 00:01:15,024
Let's kick things off by diving into
what a typical application architecture

14
00:01:15,125 --> 00:01:21,025
looks like in kubernetes Here I have
a design and architecture for movie

15
00:01:21,025 --> 00:01:26,895
ticketing system where users can book
tickets through the platform The system

16
00:01:26,895 --> 00:01:34,205
consists of various services like order
payment, movie, and theater services.

17
00:01:34,575 --> 00:01:39,505
To make the application accessible
to external client applications,

18
00:01:39,875 --> 00:01:41,965
the Ingress Controller is used.

19
00:01:42,475 --> 00:01:46,885
However, you will need to implement
essential functionalities such

20
00:01:46,885 --> 00:01:52,934
as security, rate limiting, and
others within the service itself,

21
00:01:52,935 --> 00:01:59,085
as the Ingress Controller does not
inherently provide capabilities.

22
00:01:59,985 --> 00:02:03,165
Let's dive into the ingress
resource in Kubernetes.

23
00:02:03,735 --> 00:02:10,275
Here is an example of how you can define
a service within an ingress resource

24
00:02:10,455 --> 00:02:12,904
to make it accessible externally.

25
00:02:13,565 --> 00:02:19,005
Typically, host based and path based
routing are the most common methods

26
00:02:19,785 --> 00:02:23,325
used to set up ingress routing.

27
00:02:23,955 --> 00:02:29,724
You will need to specify the service
name and the port for this approach.

28
00:02:30,484 --> 00:02:37,035
For advanced functionalities such as path
rewriting, course configuration, session

29
00:02:37,045 --> 00:02:43,045
management, and timeout settings, you will
need to leverage annotations provided by

30
00:02:43,055 --> 00:02:45,665
the specific Ingress controller in use.

31
00:02:46,164 --> 00:02:50,985
In this case, this annotation
handles path rewriting.

32
00:02:51,940 --> 00:02:55,500
request to a target path like order list.

33
00:02:56,450 --> 00:03:03,569
While annotations offer flexibility,
they can become difficult to manage as

34
00:03:03,569 --> 00:03:05,969
the configuration grows more complex.

35
00:03:06,280 --> 00:03:12,480
This approach does not scale well
as handling numerous annotations

36
00:03:12,480 --> 00:03:17,720
across various services can lead
to maintenance challenges and

37
00:03:17,720 --> 00:03:20,090
increase operational overhead.

38
00:03:20,870 --> 00:03:27,040
Let's take a look at some challenges
with the Kubernetes Ingress when it

39
00:03:27,080 --> 00:03:32,540
comes to managing traffic and providing
advanced functionalities for services.

40
00:03:33,465 --> 00:03:39,135
One of the key constraints is that
Ingress is primarily designed to

41
00:03:39,145 --> 00:03:42,685
handle HTTP and HTTPS traffic.

42
00:03:43,425 --> 00:03:47,144
It lacks native support for
other protocols like TCP,

43
00:03:47,185 --> 00:03:49,705
UDP, WebSocket, likewise.

44
00:03:50,460 --> 00:03:55,540
This means if the application
requires protocol flexibility, you

45
00:03:55,540 --> 00:04:00,850
will need to use additional tools or
controllers to manage that traffic.

46
00:04:02,010 --> 00:04:07,140
Ingress only supports basic
routing configurations such as

47
00:04:07,160 --> 00:04:10,190
host based or path based routing.

48
00:04:10,990 --> 00:04:18,130
It does not have out of the box capability
for more advanced capabilities such as

49
00:04:18,380 --> 00:04:24,149
traffic splitting, which allows you to
do distribute traffic between different

50
00:04:24,330 --> 00:04:30,239
versions of your applications or
header based routing, which can direct

51
00:04:30,239 --> 00:04:32,674
traffic based on the specific route.

52
00:04:33,674 --> 00:04:37,924
While Kubernetes is highly
flexible, the Ingress resource

53
00:04:37,954 --> 00:04:40,384
itself isn't very extensible.

54
00:04:41,224 --> 00:04:46,354
If you need additional features,
you often have to rely on custom

55
00:04:46,384 --> 00:04:49,154
controllers or third party tools.

56
00:04:49,884 --> 00:04:54,564
This makes the setup more
complex and harder to maintain

57
00:04:54,634 --> 00:04:56,594
as your requirements evolve.

58
00:04:57,714 --> 00:05:02,024
Security configurations within
Ingress are quite minimal.

59
00:05:02,814 --> 00:05:08,924
For more advanced security features
like mutual TLS, you will need to add

60
00:05:08,954 --> 00:05:15,544
extra configurations or use custom
implementations which increase the

61
00:05:15,574 --> 00:05:18,464
complexity and maintenance burden.

62
00:05:19,344 --> 00:05:24,014
Ingress lacks built in tools
for detailed observability.

63
00:05:24,344 --> 00:05:30,614
It does not provide native metrics or
traffic monitoring capabilities, making

64
00:05:30,614 --> 00:05:36,814
it harder to get insights into the
performance and behavior of your services

65
00:05:37,304 --> 00:05:40,614
without adding extra monitoring tools.

66
00:05:41,854 --> 00:05:48,604
Lastly, Ingress does not offer granular
control over traffic behavior, such as

67
00:05:49,104 --> 00:05:52,744
retries, timeouts, or rate limiting.

68
00:05:53,294 --> 00:05:58,664
These are crucial for fine tuning the
performance and reliability of your

69
00:05:58,664 --> 00:06:03,704
services, and without native support,
you will need to configure these

70
00:06:03,714 --> 00:06:10,154
features manually or rely on additional
tools, which can complicate your setup.

71
00:06:10,904 --> 00:06:17,829
Overall, while Kubernetes English provides
basic functionality, It has several

72
00:06:17,829 --> 00:06:23,759
limitations when it comes to more advanced
traffic management and observability.

73
00:06:24,469 --> 00:06:28,789
You will need to adapt tools
or configurations to fill

74
00:06:28,809 --> 00:06:33,769
these gaps as your applications
grows and become more complex.

75
00:06:34,769 --> 00:06:40,679
In 2019, the Kubernetes community
introduced the Kubernetes Gateway,

76
00:06:40,679 --> 00:06:46,319
a PIA significant evolution in the
landscape of API gateway management.

77
00:06:46,709 --> 00:06:53,269
Within Kubernetes, this new API was
developed with the specific goal of

78
00:06:53,329 --> 00:06:58,999
addressing many of the limitations found
in the traditional ingress resource.

79
00:07:00,894 --> 00:07:07,614
The Gateway API offers a more
robust and flexible set of features.

80
00:07:07,944 --> 00:07:12,304
providing greater extensibility
and the functionality than

81
00:07:12,304 --> 00:07:13,794
the ingress specification.

82
00:07:14,434 --> 00:07:20,034
It goes beyond simple routing by
incorporating capabilities often

83
00:07:20,114 --> 00:07:25,974
associated with API management
such as enhanced traffic control,

84
00:07:26,464 --> 00:07:28,774
security, and observability.

85
00:07:29,274 --> 00:07:35,654
In essence, it brings API management
like features natively into Kubernetes,

86
00:07:36,224 --> 00:07:42,034
enabling more granular control over
traffic routing, protocol handling,

87
00:07:42,044 --> 00:07:47,314
and advanced configurations,
making it a powerful alternative to

88
00:07:47,314 --> 00:07:50,344
Ingress for complex applications.

89
00:07:51,344 --> 00:07:57,999
The Kubernetes Gateway API specification
introduces role oriented kubernetes

90
00:07:58,099 --> 00:08:04,599
custom resources are extensions of
the kubernetes api which provides the

91
00:08:04,609 --> 00:08:11,379
ability to users to define their own
definitions in kubernetes for their use

92
00:08:11,409 --> 00:08:18,719
cases in this context infrastructure
providers manage gateway class while

93
00:08:18,720 --> 00:08:25,509
kubernetes cluster administrators
oversee the gateway custom resource.

94
00:08:26,599 --> 00:08:31,889
API or the application developers
play a pivotal role in crafting

95
00:08:31,899 --> 00:08:38,909
HTTP routes incorporating essential
information related to the API.

96
00:08:38,910 --> 00:08:45,569
This representation of roles ensure
a streamlined and efficient workflow

97
00:08:46,109 --> 00:08:48,294
within the Kubernetes environment.

98
00:08:49,294 --> 00:08:54,674
The primary aim of the Kubernetes
Gateway API is to standardize and

99
00:08:54,684 --> 00:09:00,834
simplify the entire API gateway
management process within Kubernetes.

100
00:09:01,264 --> 00:09:06,754
It offers a user friendly,
configuration approach streamlining

101
00:09:06,764 --> 00:09:09,054
the overall management experience.

102
00:09:09,774 --> 00:09:15,134
The collaborative nature of this
initiative ensures that gateways,

103
00:09:15,544 --> 00:09:20,204
regardless of their implementation,
can seamlessly collaborate,

104
00:09:20,634 --> 00:09:24,794
communicate using a common language,
and function as a single entity.

105
00:09:25,734 --> 00:09:28,744
Integral components of a unified system.

106
00:09:29,834 --> 00:09:34,784
Through the standardization of
APIs, the Kubernetes Gateway API

107
00:09:34,784 --> 00:09:40,634
unlocks the potential for dynamic
configuration, efficient scaling,

108
00:09:41,144 --> 00:09:43,284
and seamless service discovery.

109
00:09:43,824 --> 00:09:49,744
Furthermore, this standardization
facilitates smooth integration with

110
00:09:49,754 --> 00:09:54,584
the broader Kubernetes ecosystem,
extending its capabilities to

111
00:09:54,584 --> 00:10:00,399
include tooling, support for diverse
frameworks, application management,

112
00:10:00,469 --> 00:10:02,709
security, monitoring, and logging.

113
00:10:04,469 --> 00:10:08,719
One notable advantage is the
cohesive and collaborative

114
00:10:08,859 --> 00:10:14,939
community serving as a driving
force behind continuous improvement.

115
00:10:16,419 --> 00:10:21,899
This community ensures that
standards evolve and adapting

116
00:10:21,909 --> 00:10:27,119
sync with the dynamic needs of
ever growing Kubernetes ecosystem.

117
00:10:29,999 --> 00:10:35,119
Here is an example of how an
equivalent gateway API definition

118
00:10:35,119 --> 00:10:39,989
would look when compared to
ingress resource for order service.

119
00:10:40,619 --> 00:10:46,439
In this case, the application developer
takes the responsibility of writing

120
00:10:46,439 --> 00:10:48,079
the HTTP route for the service.

121
00:10:49,119 --> 00:10:53,389
This HTTP route consists
four key sections.

122
00:10:53,939 --> 00:10:59,779
In the hostname section, you can specify
the hostname for exposing your API.

123
00:11:01,209 --> 00:11:06,819
The rules section allows you
to define rules for the API.

124
00:11:07,299 --> 00:11:12,019
In this instance, a rule for
the pause method of the orders

125
00:11:12,069 --> 00:11:14,439
resource has been created.

126
00:11:15,269 --> 00:11:17,399
Moving on to the filters section.

127
00:11:18,069 --> 00:11:20,929
Two filters have been defined here.

128
00:11:21,504 --> 00:11:25,044
URL rewrite and the
request header modifier.

129
00:11:26,004 --> 00:11:32,104
The URL rewrite filter transform
the order's path to order list while

130
00:11:32,294 --> 00:11:38,504
request header modifier adds a new
header called XOREDID to the request.

131
00:11:39,934 --> 00:11:45,904
Under the backend refs, the backend
service name and port are specified.

132
00:11:46,564 --> 00:11:54,579
The flow is structured such that if the
request lands with the pause method Of the

133
00:11:54,649 --> 00:12:03,039
orders resource path these two filters are
then applied and the request is ultimately

134
00:12:03,039 --> 00:12:08,919
routed to the back end service which
is in this case is the order service.

135
00:12:09,919 --> 00:12:17,009
When we compare the two Kubernetes
resources, the HTTP route resource

136
00:12:17,019 --> 00:12:23,569
stands out as being far more
structured and flexible than the

137
00:12:23,569 --> 00:12:26,219
traditional Ingress resource.

138
00:12:26,399 --> 00:12:33,679
HTTP route allows users to define detailed
filters or execution paths for each

139
00:12:33,819 --> 00:12:42,789
routing role, providing much better Create
a control over how traffic is managed this

140
00:12:42,789 --> 00:12:49,309
increased flexibility enabled application
developers to implement more fine grained

141
00:12:49,309 --> 00:12:56,174
access control and apply additional
quality of service features which are

142
00:12:56,174 --> 00:12:58,744
not as easily achievable with Ingress.

143
00:12:59,504 --> 00:13:05,984
In the context of API management,
these filters can function as a set of

144
00:13:06,044 --> 00:13:13,054
policies applied to the resource or to
the API, such as rate limiting, traffic

145
00:13:13,054 --> 00:13:17,534
stripping, or even security policies
like authorization, authentication.

146
00:13:18,419 --> 00:13:27,589
Likewise, this level of control makes
a HTTP route a powerful way of managing

147
00:13:27,589 --> 00:13:34,954
complex traffic scenarios enhancing
performance and security for your

148
00:13:34,954 --> 00:13:38,014
APIs within Kubernetes environment.

149
00:13:38,014 --> 00:13:43,694
One of the standout features of the
Kubernetes gateway API is the flexibility

150
00:13:44,284 --> 00:13:46,994
it brings to service management.

151
00:13:47,564 --> 00:13:51,994
From the start, the project was
designed with extensibility in mind.

152
00:13:52,534 --> 00:13:58,684
For example, in this HTTP route resource,
you can specify the Kubernetes service

153
00:13:58,704 --> 00:14:01,684
name and port used in the backend refs.

154
00:14:02,424 --> 00:14:08,844
However, there are scenarios where
more detailed configurations are

155
00:14:08,874 --> 00:14:14,714
required, such as defining the
service protocol, timeout settings,

156
00:14:14,714 --> 00:14:17,414
and other backend specific options.

157
00:14:18,289 --> 00:14:24,899
In such cases, the Gateway API allows
implementation providers to create

158
00:14:24,919 --> 00:14:27,389
their own custom resource definitions.

159
00:14:27,819 --> 00:14:34,549
For instance, you can define a custom
resource called backend, where you can

160
00:14:34,549 --> 00:14:38,539
include the additional information not
covered in the default configuration.

161
00:14:40,639 --> 00:14:48,009
Once this custom resource is in place, you
can reference it under back end refs in

162
00:14:48,009 --> 00:14:51,279
the HTTP route for more detailed control.

163
00:14:53,119 --> 00:14:58,519
This same extensibility applies
to filters, enabling developers

164
00:14:58,519 --> 00:15:03,849
to define custom API policies
tailored to their specific needs.

165
00:15:04,479 --> 00:15:12,229
Whether it's traffic management, security,
or performance enhancement, The Gateway

166
00:15:12,289 --> 00:15:19,459
API's ability to integrate custom
resources offers a much richer framework

167
00:15:19,459 --> 00:15:22,019
for managing Kubernetes services.

168
00:15:22,439 --> 00:15:28,159
WSO2 APK is an implementation built
on top of the Kubernetes Gateway

169
00:15:28,209 --> 00:15:34,109
API, extending its capabilities
with additional custom resources.

170
00:15:34,759 --> 00:15:39,549
These custom resources have been
designed to address gaps in the

171
00:15:39,549 --> 00:15:45,149
default gateway API, providing
more comprehensive configurations.

172
00:15:45,974 --> 00:15:52,104
This includes definitions for backend
services, as well as policies for rate

173
00:15:52,144 --> 00:15:58,934
limiting, authentication, scopes, and
more, allowing for enhanced control

174
00:15:59,304 --> 00:16:02,124
and functionality within the platform.

175
00:16:03,124 --> 00:16:08,294
With the Kubernetes Gateway API,
the Ingress Controller is replaced

176
00:16:08,304 --> 00:16:14,224
by an API Gateway, enabling users
to apply more advanced quality of

177
00:16:14,224 --> 00:16:17,034
service features to their services.

178
00:16:17,594 --> 00:16:24,244
In contrast to the Ingress Controller,
where developers had to implement security

179
00:16:24,254 --> 00:16:31,254
rate limiting and other quality of service
features within the service itself.

180
00:16:31,504 --> 00:16:38,494
Making it difficult to scale, but with
the Gateway API, it allows the API

181
00:16:38,494 --> 00:16:41,104
Gateway to handle these responsibilities.

182
00:16:41,914 --> 00:16:49,004
This shift enables service developers
to focus on their core business

183
00:16:49,004 --> 00:16:54,664
logic, while leaving quality of
service management like security

184
00:16:55,354 --> 00:16:57,714
and traffic control to the gateway.

185
00:16:58,714 --> 00:17:03,734
So if you look at some history
context of API gateways.

186
00:17:04,584 --> 00:17:10,514
Early gateways functioned as converters
where it enables communication between

187
00:17:11,014 --> 00:17:13,054
different network architectures.

188
00:17:13,624 --> 00:17:17,244
Then there were proxy servers,
hardware load balancers.

189
00:17:18,244 --> 00:17:24,219
In the early 2000s, application
delivery controllers such as Nginx,

190
00:17:24,219 --> 00:17:26,364
Citrix, and Fi were introduced.

191
00:17:27,444 --> 00:17:35,034
With web services APIs, SOAP gateways came
into the picture by enabling integration,

192
00:17:35,054 --> 00:17:41,104
protocol conversion, and security
enforcement for SOAP based services.

193
00:17:42,974 --> 00:17:48,054
As web APIs and service oriented
architectures gained prominence,

194
00:17:48,494 --> 00:17:50,844
REST API gateways were introduced.

195
00:17:51,514 --> 00:17:56,354
The evolution continued with
the surge of microservices, edge

196
00:17:56,374 --> 00:18:01,894
computing, and IoT, leading to the
introduction of micro gateways.

197
00:18:02,594 --> 00:18:07,514
In the present landscape, we witness
the emergence of cloud gateways.

198
00:18:07,939 --> 00:18:15,679
Equipped with advanced AI and ML
capabilities, making the latest chapter in

199
00:18:15,689 --> 00:18:19,009
the evolutionary journey of API gateways.

200
00:18:20,439 --> 00:18:26,169
With the Kubernetes Gateway API,
we move forward one step further.

201
00:18:27,169 --> 00:18:32,829
API gateway is the crucial runtime
in the API management architecture.

202
00:18:33,839 --> 00:18:39,049
Envoy has emerged as the preferred
solution for re architecting API

203
00:18:39,959 --> 00:18:46,059
gateways, since it is specifically
designed for cloud native environment.

204
00:18:47,549 --> 00:18:51,859
Being open source, it benefits
from community driven approach.

205
00:18:52,539 --> 00:18:58,589
With developers worldwide contributing
to its enhancements and making it

206
00:18:58,589 --> 00:19:01,099
a dynamic and ever evolving tool.

207
00:19:02,069 --> 00:19:08,269
A noteworthy point is the adoption
of Envoy as a runtime for English

208
00:19:08,319 --> 00:19:10,099
controllers in Kubernetes.

209
00:19:11,074 --> 00:19:16,804
Several existing controllers leverage
Envoy as a production ready edge

210
00:19:16,814 --> 00:19:22,914
proxy, solidifying its reliability and
performance in real world scenarios.

211
00:19:24,364 --> 00:19:30,004
It does not just stop at being a
proxy, it comes packed with essential

212
00:19:30,014 --> 00:19:36,094
API management features such as
authentication, authorization, rate

213
00:19:36,114 --> 00:19:39,434
limiting, response caching, etc.

214
00:19:40,284 --> 00:19:45,364
Envoy also comes with the support
for REST and gRPC services.

215
00:19:46,034 --> 00:19:52,466
Extensibility features includes native
filters, Lua filters, Wasm modules, etc.

216
00:19:52,466 --> 00:19:58,634
where you can write your own
code and plug with Envoy.

217
00:20:00,474 --> 00:20:05,754
Envoy is incredibly versatile,
fitting into different deployment

218
00:20:05,764 --> 00:20:07,684
scenarios effortlessly.

219
00:20:09,304 --> 00:20:16,129
Whether it's serving as a sidecar in a
service mesh, Hosted in TOL as a front

220
00:20:16,159 --> 00:20:19,559
proxy, Envoy adapts with the architecture.

221
00:20:20,759 --> 00:20:25,619
In a nutshell, and no isn't
just tool, it's a game changer.

222
00:20:25,619 --> 00:20:27,509
In the API management scene,

223
00:20:28,509 --> 00:20:34,719
the API gateway is a central component
of the API management platform, but it is

224
00:20:34,779 --> 00:20:37,959
just one part of the larger architecture.

225
00:20:38,539 --> 00:20:44,599
The platform is divided into two planes,
the control plane and the data plane.

226
00:20:45,159 --> 00:20:50,029
The control plane includes the
API management portals, while the

227
00:20:50,029 --> 00:20:55,149
data plane consists of runtime
components and your microservices.

228
00:20:56,299 --> 00:21:00,399
The control plane sends control
instructions to the data

229
00:21:00,399 --> 00:21:02,809
plane, guiding its behavior.

230
00:21:03,759 --> 00:21:08,469
The architecture offers flexibility,
allowing you to deploy multiple

231
00:21:09,079 --> 00:21:14,009
data planes across different
cloud environments, regions,

232
00:21:14,159 --> 00:21:17,579
or even in on premise setups.

233
00:21:18,319 --> 00:21:25,639
A major advantage is that with a single
control plane, you can efficiently

234
00:21:26,159 --> 00:21:31,759
manage and govern all the data planes,
no matter where they are deployed.

235
00:21:32,759 --> 00:21:39,769
In this setup, the API developer or the
application developer is responsible for

236
00:21:40,359 --> 00:21:48,559
creating services and configuring the API
gateway using Kubernetes custom resources.

237
00:21:49,229 --> 00:21:55,939
However, the key control instructions
such as subscriptions, applications,

238
00:21:56,029 --> 00:22:00,399
and other various policies still
come from the control plane.

239
00:22:01,069 --> 00:22:07,839
These artifacts are essential because
without them, the APIs are not accessible.

240
00:22:08,239 --> 00:22:15,849
The control plane ensures that API
governance is centrally enforced,

241
00:22:16,249 --> 00:22:22,619
managing critical aspects like access
control, security, and traffic management.

242
00:22:23,419 --> 00:22:30,829
It acts as the back office for API product
managers, providing a platform where

243
00:22:31,079 --> 00:22:38,149
they can enhance the API with additional
features such as documentation, policy

244
00:22:38,149 --> 00:22:40,389
enforcement, rate limiting and more.

245
00:22:41,559 --> 00:22:46,289
This centralized governance
allows for streamlined management

246
00:22:46,779 --> 00:22:52,369
and consistent application of
policies across all services.

247
00:22:55,064 --> 00:23:00,104
The Kubernetes Gateway API
specification ensures that all

248
00:23:00,164 --> 00:23:03,864
gateways adhere to a unified standard.

249
00:23:04,544 --> 00:23:09,144
The standardization enables a
single unified control plane

250
00:23:09,704 --> 00:23:13,074
to effectively manage multiple
API gateway implementations

251
00:23:15,564 --> 00:23:20,394
within a single installation
regardless of their implementation.

252
00:23:21,204 --> 00:23:26,664
This underlying approach simplifies
governance, streamlines operations

253
00:23:26,704 --> 00:23:33,554
and enhances the overall manageability
of diverse API gateway instances.

254
00:23:34,554 --> 00:23:39,424
With the Kubernetes Gateway API
standardization, API gateways

255
00:23:39,464 --> 00:23:44,744
evolving into a vital but commoditized
part of the infrastructure.

256
00:23:45,474 --> 00:23:51,044
I hope you can remember in the early days
You were worried about the file format

257
00:23:51,054 --> 00:23:58,684
of your file system that is FAT32 or NTFS
Today you are not much worried about it

258
00:23:59,124 --> 00:24:06,504
Sooner or later this will happen to the
api gateways as well As it becomes a

259
00:24:06,564 --> 00:24:09,644
commoditized part of the infrastructure

260
00:24:10,644 --> 00:24:16,824
once the api gateway becomes commoditized
part of the infrastructure developers

261
00:24:16,964 --> 00:24:23,844
are freed from The complexities of
gateway management they can focus

262
00:24:23,864 --> 00:24:31,114
more on building and managing apis
and other core development tasks with

263
00:24:31,114 --> 00:24:38,184
this Focus will be moved to the api
management aspects which includes api

264
00:24:38,234 --> 00:24:47,259
lifecycle management api governance
api marketplace version management API

265
00:24:47,259 --> 00:24:49,509
productization, API insights, and more.

266
00:24:50,889 --> 00:24:56,569
Although these features are available
on the existing API management solution,

267
00:24:57,069 --> 00:25:03,769
to fully leverage the benefits of the
cloud native ecosystem, many of these

268
00:25:03,779 --> 00:25:06,159
features will need to be redesigned.

269
00:25:07,749 --> 00:25:14,049
This will involve seamless integration
with various third party services

270
00:25:14,049 --> 00:25:19,069
available on the Kubernetes to
enable more comprehensive and

271
00:25:19,069 --> 00:25:21,999
robust API management solution.

272
00:25:21,999 --> 00:25:25,139
With that I would like
to wrap up my session.

273
00:25:25,149 --> 00:25:29,329
I hope you found it
informative and engaging.

274
00:25:29,689 --> 00:25:34,619
Thank you for your time And
I trust you gained valuable

275
00:25:34,709 --> 00:25:36,279
insight from the discussion

