1
00:00:14,249 --> 00:00:17,820
Hello and welcome to con
42 platform engineer 24.

2
00:00:17,919 --> 00:00:21,230
I'm Haral and I'm going to talk
about developing and creating.

3
00:00:21,870 --> 00:00:22,820
Telephone providers.

4
00:00:24,150 --> 00:00:25,909
We'll talk a bit about an IEC refresher.

5
00:00:25,909 --> 00:00:27,400
What's infrastructure as code?

6
00:00:27,519 --> 00:00:31,799
Where do I start when I want to create a
provider and how do I go about creating

7
00:00:31,799 --> 00:00:33,400
a provider including a live demo?

8
00:00:34,760 --> 00:00:39,679
First of all, I'm Harald Safra, Data
Platform Engineering Team Lead at RISC V.

9
00:00:39,850 --> 00:00:44,890
Macam manages all the online databases,
everything that has to do with online

10
00:00:44,890 --> 00:00:48,650
systems and access either to end
customers or to analytical systems.

11
00:00:49,650 --> 00:00:55,370
Infrastructure as code is a programmatic
definition of infrastructure elements.

12
00:00:56,129 --> 00:00:59,619
It allows repeatable, documented
processes, you don't have to

13
00:00:59,669 --> 00:01:03,380
click through UIs or do the same
manual task again and again.

14
00:01:04,590 --> 00:01:08,240
And there are two general approaches to
how you go about infrastructure as code.

15
00:01:08,940 --> 00:01:10,519
The first of them is declarative.

16
00:01:10,720 --> 00:01:15,509
The user defines what they want
to achieve, and then the platform

17
00:01:15,509 --> 00:01:18,970
framework does the work for them
and provides the infrastructure.

18
00:01:20,380 --> 00:01:21,809
The other one is imperative.

19
00:01:21,959 --> 00:01:23,809
The user defines how
they want to create it.

20
00:01:23,929 --> 00:01:29,690
They iterate over loops, they create the
code or code like structures that go ahead

21
00:01:29,699 --> 00:01:34,919
and create infrastructure elements, and
we can contrast Terraform and Pulumi.

22
00:01:35,354 --> 00:01:36,114
On either side,

23
00:01:38,525 --> 00:01:42,995
different providers are the plugins
that interface with the infrastructure.

24
00:01:43,005 --> 00:01:43,324
A P.

25
00:01:43,324 --> 00:01:43,485
I.

26
00:01:43,735 --> 00:01:50,544
Terraform core is a framework that
knows how to create a object and

27
00:01:50,544 --> 00:01:54,644
infrastructure element, but doesn't
have any idea about how it how the

28
00:01:54,644 --> 00:01:56,454
infrastructure is created and managed.

29
00:01:57,610 --> 00:02:01,820
To increase over that to create from
providers interface between core

30
00:02:02,050 --> 00:02:08,200
and the infrastructure API and core
interfaces with a provider over RPC

31
00:02:10,000 --> 00:02:15,710
as of today, there are 4400 plus
providers and the list goes on and

32
00:02:15,710 --> 00:02:21,399
on and the main thing to remember is
that anyone can create more providers.

33
00:02:21,579 --> 00:02:26,950
You don't have to be any first to go.

34
00:02:27,379 --> 00:02:31,279
You don't have to be part
of the infrastructure team.

35
00:02:31,279 --> 00:02:36,439
You don't have to be part of the
product or the company at all.

36
00:02:36,940 --> 00:02:39,529
When I need to create a
provider for external databases

37
00:02:39,940 --> 00:02:41,929
that can be used in my team.

38
00:02:41,989 --> 00:02:46,350
But I didn't, I was not part
of the database development.

39
00:02:47,220 --> 00:02:48,489
So anyone can create one.

40
00:02:49,079 --> 00:02:52,379
As long as there's a public API
that allows you to interface.

41
00:02:54,560 --> 00:02:57,190
So where do I start when I
create, want to create a provider?

42
00:02:59,290 --> 00:03:03,170
The first is to understand a bit
about the architecture of the process.

43
00:03:03,350 --> 00:03:05,490
So we have Terraform
Core on the left side.

44
00:03:06,060 --> 00:03:10,869
And Terraform Core is the executable
that you run and manages the operations.

45
00:03:10,880 --> 00:03:15,279
It knows how to rate infrastructure, it
knows how to route infrastructure, and

46
00:03:15,279 --> 00:03:21,420
it knows how to calculate deltas between
the needed state and the current state.

47
00:03:21,430 --> 00:03:21,489
Thank you.

48
00:03:22,744 --> 00:03:26,635
It interfaces over RPC
with a Terraform provider.

49
00:03:26,904 --> 00:03:29,055
That's a, that's the plugin
that you will develop.

50
00:03:30,544 --> 00:03:35,015
And that Terraform provider that's
sitting in Golang specific, specifically

51
00:03:35,584 --> 00:03:37,224
interfaces with a client library.

52
00:03:38,974 --> 00:03:44,114
And that client library interfaces over
native protocol with the infrastructure.

53
00:03:44,394 --> 00:03:48,564
The native protocol could be HTTP
calls, gRPC, SQL system calls.

54
00:03:49,124 --> 00:03:53,825
REST API, anything that infrastructures
knows how to understand and implement

55
00:03:56,454 --> 00:03:57,285
the API.

56
00:03:57,935 --> 00:04:00,694
You need for the API, you need
to find the correct API to

57
00:04:00,695 --> 00:04:02,044
interface with the infrastructure.

58
00:04:02,124 --> 00:04:05,604
There could be old versions, new
versions that are easier to work with.

59
00:04:06,435 --> 00:04:09,934
But, if there's a version that
has an existing Golang client for

60
00:04:09,934 --> 00:04:13,334
it, I would advise to go for it
because it will be easier for you

61
00:04:13,334 --> 00:04:16,334
to create the plugin with that.

62
00:04:19,274 --> 00:04:20,374
Obviously, as I mentioned.

63
00:04:21,119 --> 00:04:25,229
The provider is written in Go, so
you need to know Go, understand?

64
00:04:26,799 --> 00:04:29,789
Go is a compiled and high
level programming language.

65
00:04:30,499 --> 00:04:32,359
You need to understand and
get first thing though.

66
00:04:32,359 --> 00:04:36,009
You don't need to have a specific
deep understanding of it.

67
00:04:36,539 --> 00:04:40,029
You can use the Google
Chat GPTX to go along.

68
00:04:40,859 --> 00:04:43,849
But you need to understand the
constructs, control structures,

69
00:04:43,849 --> 00:04:44,559
and everything like that.

70
00:04:46,549 --> 00:04:48,579
There's a good step by
step tutorial that I used.

71
00:04:49,139 --> 00:04:54,569
Under go dot dev slash tour, it
will help you go step by step

72
00:04:54,829 --> 00:04:59,309
learning, go from basic primitive
types, controls, infrastructure,

73
00:04:59,309 --> 00:05:01,479
interfaces, things like that.

74
00:05:03,649 --> 00:05:06,949
I found the simple language to understand
to learn, especially if you have

75
00:05:06,959 --> 00:05:08,709
knowledge under the programming languages.

76
00:05:09,854 --> 00:05:14,554
It's compiled, which I like because the
compiler now finds errors that you don't

77
00:05:14,564 --> 00:05:16,834
have, you don't bump into during runtime.

78
00:05:17,964 --> 00:05:22,394
One gotcha that I found that there
are no exceptions, meaning you

79
00:05:22,394 --> 00:05:25,154
need to explicitly check for error
conditions for function calls.

80
00:05:25,534 --> 00:05:27,784
Otherwise, your code will just panic out.

81
00:05:29,924 --> 00:05:33,134
Remember that check, check
return values, the underscore

82
00:05:33,184 --> 00:05:35,524
ERR, return value is a friend.

83
00:05:36,524 --> 00:05:37,924
HashiCorp's documentation.

84
00:05:38,359 --> 00:05:42,959
Is the thing that the commission used
in school recommended it's located in

85
00:05:42,959 --> 00:05:50,959
their development portal within the
link here and you can also scan the QR

86
00:05:50,969 --> 00:05:56,629
and find that read the docs again, and
they will give you a basic understanding

87
00:05:56,630 --> 00:05:59,159
on how strings plug into one another.

88
00:06:01,850 --> 00:06:05,660
After you've learned Go, you've
read the documentation from the

89
00:06:05,660 --> 00:06:10,840
HashiCorp documentation, you can
go ahead and create a provider.

90
00:06:11,730 --> 00:06:16,300
And I will be using a demo
to make this a bit more real.

91
00:06:16,300 --> 00:06:24,059
This demo is a plugin, plugin that
creates managed lines in a text file.

92
00:06:24,279 --> 00:06:27,289
Simple lines and simple text files.

93
00:06:28,270 --> 00:06:30,390
All files are managed in a single path.

94
00:06:31,600 --> 00:06:35,800
There's a file resource that has
file name and the lines array.

95
00:06:37,550 --> 00:06:41,140
The file API was provided
for you by me and is limited.

96
00:06:41,440 --> 00:06:42,720
It doesn't have a lot of primitives.

97
00:06:42,790 --> 00:06:46,299
You could read line, you could write,
and you can count the number of lines.

98
00:06:47,075 --> 00:06:49,145
In the file, but not a lot more than that.

99
00:06:50,595 --> 00:06:55,975
And you can see that the resource
definition on the left, which has a file

100
00:06:56,155 --> 00:07:01,914
or one and two lines like one line two
maps into a file that has two text lines.

101
00:07:03,995 --> 00:07:07,144
You can grab the code under my GitHub.

102
00:07:07,890 --> 00:07:12,880
Repo, Terraform provider file that
you can also scan the QR to get

103
00:07:13,880 --> 00:07:18,790
the different plugins framework in the
recommended way to create a providers

104
00:07:18,930 --> 00:07:24,799
that have virus, 2 or 3 different ways
and do an API specification change.

105
00:07:25,329 --> 00:07:27,419
The new way is the plugin framework.

106
00:07:27,459 --> 00:07:28,399
It allows.

107
00:07:29,439 --> 00:07:34,679
Need to manage your business logic
and focus on your business logic and

108
00:07:34,679 --> 00:07:39,709
have the plugin framework do the hard
nesting of connecting to core over RPC

109
00:07:42,229 --> 00:07:46,009
and you start working on that by cloning
the telephone provider scaffolding firm

110
00:07:46,149 --> 00:07:52,069
repo and to your private repository and
then you can customize it from there.

111
00:07:54,914 --> 00:07:58,314
When working with Terraform,
there are four basic operations

112
00:07:58,724 --> 00:08:02,854
that Terraform core needs to be
able to run over infrastructure,

113
00:08:05,444 --> 00:08:09,244
they provision infrastructure and
they amend the Terraform state

114
00:08:09,434 --> 00:08:13,765
accordingly to create operation
of the creates the resource.

115
00:08:13,765 --> 00:08:17,744
It could create a file in our case,
but we also create an EC2 server.

116
00:08:18,119 --> 00:08:21,519
It could also create a user
in a managed, SAS database.

117
00:08:23,099 --> 00:08:25,849
The read operation reads the
current infrastructure state.

118
00:08:27,599 --> 00:08:31,549
The update operation changes attributes
that can be changed according to the API.

119
00:08:31,969 --> 00:08:33,979
Obviously, not all
attributes can be changed.

120
00:08:34,059 --> 00:08:39,429
If you want, if you go back to
the EC2 example, if you want to

121
00:08:39,449 --> 00:08:44,119
recreate the EC2 server, some things
can be updated, like the SSH key.

122
00:08:46,174 --> 00:08:50,064
To destroy and create it, but
some attributes can be updated

123
00:08:50,174 --> 00:08:52,074
and update API does that.

124
00:08:53,414 --> 00:08:57,504
The last operation is delete, which
removes the regions and Terraform Core

125
00:08:57,794 --> 00:08:59,874
also uses that for recreate operations.

126
00:09:00,184 --> 00:09:04,524
In case a user wants to change attributes
that can be changed without destroying,

127
00:09:04,694 --> 00:09:06,424
Terraform Core will go ahead and delete.

128
00:09:07,404 --> 00:09:11,034
And recreate resource by
using Destroy and Create.

129
00:09:11,034 --> 00:09:11,304
Again,

130
00:09:12,304 --> 00:09:18,934
if you look over the code, you can see
that, this is the clone, and there are

131
00:09:18,934 --> 00:09:20,614
a few things that I mentioned earlier.

132
00:09:20,854 --> 00:09:25,384
The file, API that I provided for
you has a few basic operations.

133
00:09:25,444 --> 00:09:30,294
Read dry, count the lines, remove files,
and remove lines from whatever files.

134
00:09:30,444 --> 00:09:35,924
That's something that I add
that the ation and examples and.

135
00:09:36,334 --> 00:09:41,264
If you look the quicker resource here,
file resource, you can see that each of

136
00:09:41,264 --> 00:09:45,164
the primitives that I mentioned earlier
has, a method associated with that.

137
00:09:45,164 --> 00:09:49,604
So we have a delete method and an
update method and a read method

138
00:09:49,604 --> 00:09:53,924
and a create method and a few
others that covered, bit later on.

139
00:09:54,964 --> 00:10:01,464
And if we expand the create method,
for example, we can see that it has.

140
00:10:01,974 --> 00:10:08,484
A code that has to do with interface
interfacing with their phone call.

141
00:10:09,104 --> 00:10:15,534
It basically gets the copies
of the request from there from

142
00:10:15,534 --> 00:10:18,044
core into a local variable.

143
00:10:19,184 --> 00:10:24,384
Then there is logic that does the
operation and the infrastructure

144
00:10:24,434 --> 00:10:28,854
in this case, creating a file
and writing lines into it.

145
00:10:31,404 --> 00:10:33,994
And then it returns return value back.

146
00:10:34,389 --> 00:10:37,349
To tell from court to allow
it to know what happened and

147
00:10:37,349 --> 00:10:39,219
allow it to amend the state.

148
00:10:39,219 --> 00:10:39,799
Accordingly,

149
00:10:40,799 --> 00:10:44,999
each of the resources and data
has schemas and attributes.

150
00:10:45,589 --> 00:10:48,439
Schemas and attributes are the
mapping between configuration

151
00:10:48,439 --> 00:10:49,949
blocks to provide the code.

152
00:10:51,339 --> 00:10:55,659
And they define what parameters
are needed to create a

153
00:10:55,709 --> 00:10:58,409
structure to change its values.

154
00:10:58,879 --> 00:11:02,169
Some of them can be mandatory, some
of them can be the option, but these

155
00:11:02,169 --> 00:11:05,779
are the parameters that are needed
to create the infrastructure itself.

156
00:11:06,764 --> 00:11:10,544
Schemas have attributes that define
data, specific data elements,

157
00:11:11,214 --> 00:11:12,744
and each attribute has a type.

158
00:11:13,394 --> 00:11:17,384
The type could be a primitive, an instance
before, a string, or it could be a complex

159
00:11:17,724 --> 00:11:20,034
data type like a map, an object, a list.

160
00:11:22,384 --> 00:11:27,284
Each of the attributes also has
properties, a description, it's optional,

161
00:11:27,294 --> 00:11:28,774
sensitive, and other properties.

162
00:11:29,694 --> 00:11:33,649
And it can also have optional validators,
The check that the user supply values

163
00:11:33,659 --> 00:11:35,889
match what the infrastructure provider.

164
00:11:38,189 --> 00:11:41,579
If you take a look at the code,
you can see that this is all

165
00:11:41,619 --> 00:11:44,549
implemented in a schema function.

166
00:11:46,009 --> 00:11:50,109
And the file has two attributes.

167
00:11:50,509 --> 00:11:51,599
First of all, the file itself.

168
00:11:51,889 --> 00:11:56,909
has a description, file data
resource, and it has two attributes.

169
00:11:58,129 --> 00:12:02,759
One of them is a file name, which should
have this, description of file name.

170
00:12:03,189 --> 00:12:04,059
It's required

171
00:12:06,689 --> 00:12:10,869
and has a validator that map that,
forces the file to have a specific, to

172
00:12:10,879 --> 00:12:12,449
match a specific regular expression.

173
00:12:14,019 --> 00:12:18,649
It also has an additional attribute
called lines, which is a list attribute.

174
00:12:19,509 --> 00:12:25,539
And each one of those It's a string value,
so it's a list of elements of TypeString.

175
00:12:26,479 --> 00:12:32,689
And in this specific case, it also has
a validator that enforces the line to

176
00:12:32,689 --> 00:12:35,219
have at least two lives, as an example.

177
00:12:36,619 --> 00:12:41,389
You should note that descriptions
under the attributes and under the

178
00:12:41,389 --> 00:12:47,049
filename do use them because they
are then copied over to the document,

179
00:12:47,049 --> 00:12:49,589
automatically created their documentation.

180
00:12:51,629 --> 00:12:55,540
That, that creates that basically
copies the description and

181
00:12:55,540 --> 00:12:58,150
filing and, an element type here.

182
00:12:58,850 --> 00:13:04,400
And then you can see this combination
later on copied into publishing to

183
00:13:04,460 --> 00:13:06,530
terraform registry for your end users.

184
00:13:07,530 --> 00:13:08,160
Types.

185
00:13:08,550 --> 00:13:12,090
The plug types are not
native go nine types.

186
00:13:12,300 --> 00:13:16,085
They have additional methods
and in, functionality to handle

187
00:13:16,085 --> 00:13:17,765
null values and unknown values.

188
00:13:19,005 --> 00:13:24,735
For example, in N 64 and other
primitive have a is null method that

189
00:13:24,735 --> 00:13:30,205
returns if it's null or not, and
primitives are actually using the value.

190
00:13:30,905 --> 00:13:35,205
Type method, for example, the
N64 has a method called value N64

191
00:13:35,705 --> 00:13:38,335
that returns a native Golang N64.

192
00:13:39,665 --> 00:13:42,915
Collections are converted into
Golang types with the as method.

193
00:13:43,295 --> 00:13:47,155
for example, list, you can grab
the list, the elements of a list

194
00:13:47,215 --> 00:13:50,995
as the native Golang type with
elements as, and then cast them

195
00:13:50,995 --> 00:13:54,835
into a slice or array of strings.

196
00:13:54,970 --> 00:13:56,359
You

197
00:13:58,540 --> 00:14:02,180
should go back to the code,
you can see and go back to, for

198
00:14:02,180 --> 00:14:03,300
example, the create function.

199
00:14:05,185 --> 00:14:13,245
You can see that the full name of the
file is created by appending the base

200
00:14:13,265 --> 00:14:19,675
path for the provider with the file name,
which is, which is, framework string

201
00:14:19,695 --> 00:14:24,835
type, but we grabbed the value, the
goal and value with various string that

202
00:14:24,835 --> 00:14:29,415
returns it into a native string that we
can use to, to append into other values.

203
00:14:30,415 --> 00:14:32,645
After he created the provider.

204
00:14:32,725 --> 00:14:37,265
You're quite happy that you want to run
it, but you want to see that it works.

205
00:14:38,435 --> 00:14:42,365
first of all, you don't have
to publish the provider into

206
00:14:43,135 --> 00:14:44,795
there from registry to run it.

207
00:14:44,815 --> 00:14:46,165
You can use to run it locally.

208
00:14:46,825 --> 00:14:49,655
You can use that, do that
by using the dev overrides.

209
00:14:50,840 --> 00:14:55,589
Is stanza inside the Xena configuration
file and then send the TFC like a

210
00:14:55,590 --> 00:14:59,220
shake file to that's fine for in
this example, you can see that the

211
00:14:59,230 --> 00:15:05,350
C like on shake file has develop
rise and maps that the registry

212
00:15:05,350 --> 00:15:08,390
address into a local path on my Mac.

213
00:15:11,120 --> 00:15:15,960
You can use log based debugging for
simple cases, but you can also use

214
00:15:15,960 --> 00:15:19,370
debugger based debugging, which is
far more powerful for complex 1.

215
00:15:20,270 --> 00:15:23,390
So you do that by running the main.

216
00:15:23,720 --> 00:15:27,289
Method of your provider with
my dash debug equals three.

217
00:15:28,370 --> 00:15:30,440
It will output an inbound driver.

218
00:15:30,530 --> 00:15:37,800
You copy it to wherever you want to run,
and then you run terraform action and

219
00:15:37,800 --> 00:15:40,280
that the action will break the debugger.

220
00:15:40,590 --> 00:15:41,780
Let's see how that works.

221
00:15:43,860 --> 00:15:45,410
First of all, I have my code here.

222
00:15:46,870 --> 00:15:50,040
Let's look at the run configuration and
see that everything works correctly.

223
00:15:51,380 --> 00:15:53,860
So we have a debug and you
can see there's a program.

224
00:15:53,890 --> 00:15:57,170
Agreements have dash debug equals true.

225
00:15:59,665 --> 00:16:03,805
I said the break point, for example, let's
say I want to debug the read operation.

226
00:16:03,945 --> 00:16:09,985
So I set the break point here
and then I run the program.

227
00:16:11,535 --> 00:16:18,535
If we compile and then output an
environment variable, which I copy

228
00:16:20,595 --> 00:16:22,275
and then based here

229
00:16:23,275 --> 00:16:23,805
as it is.

230
00:16:24,175 --> 00:16:27,495
Now, this directory has a
configuration for Terraform.

231
00:16:28,005 --> 00:16:37,005
So it has a provider block, a provider
file that defines the base path,

232
00:16:37,015 --> 00:16:38,880
which is This is that directory.

233
00:16:39,350 --> 00:16:45,370
It also has a resources file that defines
2 file resources, file 1 and file 2.

234
00:16:45,390 --> 00:16:47,930
You can see that each
file has a few lines.

235
00:16:48,670 --> 00:16:53,200
And if we cap the file 1, for
example, you can see that it

236
00:16:53,220 --> 00:16:55,009
has 2 lines that are defined.

237
00:16:56,230 --> 00:17:03,140
As I mentioned earlier, I exported the
TF3 attached providers, and now if I run

238
00:17:03,160 --> 00:17:12,180
Terraform plan, it will start, and then
it will pop up the debugger, and you

239
00:17:12,180 --> 00:17:17,669
can see that the Terraform run itself
is waiting for the debugger output.

240
00:17:19,050 --> 00:17:22,290
You can use the debugger to
just basically scroll through.

241
00:17:23,255 --> 00:17:25,235
Code your code like everything else.

242
00:17:26,315 --> 00:17:30,035
And you can see, for example, that
the full name here that is created

243
00:17:30,135 --> 00:17:31,985
is a read operation for file 2.

244
00:17:33,855 --> 00:17:38,925
If we want, we do the program again,
it will continue running and then

245
00:17:38,965 --> 00:17:40,645
it will end and refresh the state.

246
00:17:41,340 --> 00:17:44,900
If you don't need that, and
you can see that it's just the

247
00:17:44,900 --> 00:17:47,150
state and the real equation.

248
00:17:47,180 --> 00:17:49,790
And in this case, there's
no change in the file.

249
00:17:49,790 --> 00:17:52,060
So there are no changes infrastructure.

250
00:17:54,670 --> 00:17:57,240
When you're done with that, obviously
you want to stop the debugger.

251
00:17:58,240 --> 00:18:00,350
And then we can go back
to the presentation

252
00:18:01,350 --> 00:18:06,250
after you debug the code, you're happy
with your test and automatic test

253
00:18:06,340 --> 00:18:11,530
and accepting this for your resources
and data sources and to allow you

254
00:18:11,530 --> 00:18:17,780
both to check the code is working
correctly and what to be later on

255
00:18:17,810 --> 00:18:19,540
interface into the GitHub actions.

256
00:18:19,965 --> 00:18:25,835
The state is already checked in basically
in this test suite, and if you want

257
00:18:25,845 --> 00:18:29,955
to create a test operation by yourself
on the infrastructure itself, you need

258
00:18:30,245 --> 00:18:32,335
to add them to the acceptance test.

259
00:18:32,645 --> 00:18:36,885
You can run the test
manually with make test, and

260
00:18:39,065 --> 00:18:42,015
the way it happens is to
create a resource on the score.

261
00:18:42,280 --> 00:18:47,180
Test dot go fight in the same
directory and the make will grab them.

262
00:18:47,780 --> 00:18:53,490
So if we go back to the code, close
the menu, you can see that, for

263
00:18:53,490 --> 00:18:57,790
example, the fighter sauce has a
file resource test underscore go.

264
00:18:59,510 --> 00:19:01,630
And this has function.

265
00:19:01,690 --> 00:19:08,240
Each function is a test that has
pre check steps for the test.

266
00:19:09,460 --> 00:19:13,680
And as I said, the test, the
state of the check in place.

267
00:19:14,415 --> 00:19:18,305
For example, in this case, it configs
with a function that we'll see a

268
00:19:18,305 --> 00:19:24,865
bit later, and then it will need
to create, create a file, like if I

269
00:19:24,865 --> 00:19:30,855
want, it has 2 lines, 1 and 2, and it
checks the attribute, just checks the

270
00:19:30,855 --> 00:19:32,385
attribute that the file name is file 1.

271
00:19:33,190 --> 00:19:39,410
The second step in this step is to
actually update file one with lines two

272
00:19:39,410 --> 00:19:46,870
and three instead of one and two and check
that the lines and the first and the zero

273
00:19:47,190 --> 00:19:49,330
place in the first line is equal to two.

274
00:19:50,990 --> 00:19:54,450
Both of these functions
use a set of function.

275
00:19:55,400 --> 00:20:03,380
Test X, but it could be whatever
you want, just returns and a term

276
00:20:03,430 --> 00:20:04,990
from configuration file, basically.

277
00:20:04,990 --> 00:20:09,030
So we have a provider stanza
and a resource stanza.

278
00:20:09,600 --> 00:20:14,540
And you can see that the values
are pending into here just to

279
00:20:14,540 --> 00:20:18,220
make creating configuration files
easier instead of just writing them

280
00:20:18,220 --> 00:20:20,030
here explicitly again and again.

281
00:20:21,810 --> 00:20:27,220
When we're done with that, you can,
you can run the acceptance test, and in

282
00:20:27,220 --> 00:20:29,230
this case, they passed, which is nice.

283
00:20:30,230 --> 00:20:32,690
You created your code, you debugged
it, you created the acceptance

284
00:20:32,690 --> 00:20:35,090
test, you created the commutation,
you are all fine and happy.

285
00:20:35,970 --> 00:20:37,710
You want to publish it
and therefore register.

286
00:20:38,130 --> 00:20:40,210
The first is create a GPG key.

287
00:20:41,385 --> 00:20:45,315
You'll use for and definitely registry
will use to validate code is indeed yours.

288
00:20:46,875 --> 00:20:50,535
Send the GitHub secrets
GPG private key and pass.

289
00:20:50,535 --> 00:20:51,495
Raise accordingly.

290
00:20:53,195 --> 00:20:55,500
Create a Git tag named V.

291
00:20:56,000 --> 00:21:02,020
The V version would be V 0.1, 0.0 V 2.3.

292
00:21:02,370 --> 00:21:05,075
Make sure that the funnel
sematic versioning, and.

293
00:21:05,550 --> 00:21:10,890
This tag is what drives the GitHub action
that's included with a telephone provider

294
00:21:10,970 --> 00:21:14,110
by the framework and that action builds.

295
00:21:14,920 --> 00:21:19,980
Both, both all the executables and
also pushes a WebBook to read to

296
00:21:19,980 --> 00:21:23,375
Terraform registry to allow you
to grab new, the new resource.

297
00:21:24,295 --> 00:21:26,405
So you need the tag, really.

298
00:21:28,025 --> 00:21:31,295
The next thing is you log into
Terraform Registry and add the repo.

299
00:21:31,345 --> 00:21:34,280
once you've done that, you
authenticate back to GitHub.

300
00:21:34,670 --> 00:21:38,905
it'll create a WebEx hook that
will, push in new updates.

301
00:21:39,455 --> 00:21:44,955
That are tagged into Terraform
Registry and you wait a bit.

302
00:21:45,035 --> 00:21:48,835
It takes a few minutes and for Terraform
Registry to grab the changes from GitHub.

303
00:21:48,855 --> 00:21:52,615
And then you can see your
provider published into Terraform

304
00:21:53,095 --> 00:21:54,275
for other people to use.

305
00:21:54,975 --> 00:21:58,855
Every published into
Terraform for the public.

306
00:21:59,105 --> 00:22:03,275
So be aware not to publish any kind
of proprietary code or anything

307
00:22:03,285 --> 00:22:07,835
that's, Let's discuss the secret
that we can't really divulge

308
00:22:08,835 --> 00:22:09,605
to wrap it up.

309
00:22:09,605 --> 00:22:16,455
Me and my team started from manual
management of this specific database.

310
00:22:16,555 --> 00:22:21,235
we have used Terraform extensively for
other cases, but in this specific database

311
00:22:21,235 --> 00:22:26,175
that we need to manage, we had the
manual management script and confluence.

312
00:22:28,475 --> 00:22:31,385
I had to let go and learn
Terraform framework.

313
00:22:32,735 --> 00:22:36,115
I created a provider and
release a few more features.

314
00:22:36,930 --> 00:22:44,410
It's a free conversion, zero dot format,
and I published a provider and my team

315
00:22:44,410 --> 00:22:48,610
is it, and I hope that other people
around the world use it too, because

316
00:22:48,610 --> 00:22:51,450
it makes managing databases easy.

317
00:22:53,340 --> 00:22:54,490
Thank you all for your time.

318
00:22:55,080 --> 00:22:55,960
I'm Haral Safra.

319
00:22:55,960 --> 00:23:01,050
You can find my contact details LinkedIn
and get up, get a profile below.

320
00:23:01,900 --> 00:23:03,380
I would be more than welcome.

321
00:23:03,720 --> 00:23:04,660
Any questions.

322
00:23:05,070 --> 00:23:07,680
If you have anything, reach
out to me and we got to help

323
00:23:07,690 --> 00:23:08,840
with anything that you need.

324
00:23:09,900 --> 00:23:10,630
Thank you for your time.

325
00:23:10,850 --> 00:23:11,970
Thank you for being here with me.

