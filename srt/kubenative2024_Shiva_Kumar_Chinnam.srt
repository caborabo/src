1
00:00:14,300 --> 00:00:16,990
Hi, hope you've been
having a great day today.

2
00:00:17,670 --> 00:00:18,720
My name is Shiva Kumar.

3
00:00:19,030 --> 00:00:22,770
I'm a senior cloud engineer
at an insurance technology

4
00:00:22,770 --> 00:00:24,090
startup called Realtic.

5
00:00:24,620 --> 00:00:28,020
Today I'll be talking about
enhancing healthcare Processing

6
00:00:28,040 --> 00:00:29,440
reliability with Kubernetes.

7
00:00:30,880 --> 00:00:32,439
So this is going to be our agenda.

8
00:00:32,890 --> 00:00:36,430
We'll be talking about introduction
to healthcare data challenges.

9
00:00:36,819 --> 00:00:39,339
We'll talk, spend some time
on the Kubernetes itself.

10
00:00:39,839 --> 00:00:43,779
What kind of impact Kubernetes can
have on the healthcare industry,

11
00:00:44,239 --> 00:00:45,759
how it is doing right now.

12
00:00:46,139 --> 00:00:50,789
We'll go through one case study, how A
specific company was able to reduce the

13
00:00:50,919 --> 00:00:56,969
downtime and enhance their reliability
and we'll talk about Key kubernetes

14
00:00:56,969 --> 00:01:03,559
features that are useful for healthcare
processing and we'll talk about how

15
00:01:03,669 --> 00:01:07,669
a different Implementation strategy
how different healthcare companies can

16
00:01:07,729 --> 00:01:11,699
implement kubernetes and how they can
use it And we'll also talk about some

17
00:01:11,719 --> 00:01:16,639
future outlook and that's it talking
about healthcare data challenges, as

18
00:01:16,649 --> 00:01:22,259
you can imagine, we'll be dealing with a
lot of sensitive patient data in there.

19
00:01:22,699 --> 00:01:29,619
And a large number of health care
companies process health care data and

20
00:01:30,089 --> 00:01:36,419
the reliability and availability of this
systems is very critical and you need it

21
00:01:36,419 --> 00:01:37,939
for the patient safety and well being.

22
00:01:37,940 --> 00:01:44,159
And any downtime or data loss can
potentially lead to delays in the

23
00:01:44,159 --> 00:01:48,689
treatment, compromise patient outcomes and
significant operational disruptions for

24
00:01:48,689 --> 00:01:51,119
these companies and also for the patients.

25
00:01:52,589 --> 00:01:58,819
So talking about healthcare let's spend
a little bit of time on why we need to

26
00:01:58,819 --> 00:02:00,729
talk about healthcare industry at all.

27
00:02:01,169 --> 00:02:04,790
So this is one of the largest
industries In the united states

28
00:02:05,160 --> 00:02:07,780
in 2022, it was equivalent to 4.

29
00:02:07,820 --> 00:02:12,670
5 trillion dollars and Also usa in usa.

30
00:02:13,120 --> 00:02:16,540
It's one of the highest healthcare
spend per person in the world.

31
00:02:17,660 --> 00:02:22,809
So there's a lot of money here a
lot of Infrastructure companies are

32
00:02:22,840 --> 00:02:27,479
working on healthcare area so when
we talk about healthcare, industry

33
00:02:27,799 --> 00:02:32,534
It all includes all these areas like
healthcare We are talking about hospitals

34
00:02:32,834 --> 00:02:37,345
the softwares they use Apps they use
and then the small small facilities

35
00:02:37,395 --> 00:02:39,305
where there are individual practices.

36
00:02:39,595 --> 00:02:43,125
We are talking about insurance
companies and data processing

37
00:02:43,215 --> 00:02:44,925
behind these insurance companies.

38
00:02:44,985 --> 00:02:48,235
When we send the claims, what happens
behind the insurance companies.

39
00:02:48,615 --> 00:02:51,585
And it was talking about medical
device companies and also the

40
00:02:51,615 --> 00:02:55,125
health education how the Doctors
are being trained what kind of

41
00:02:55,125 --> 00:02:56,615
software they are using and all that.

42
00:02:56,725 --> 00:02:59,625
When you're talking about healthcare
industry It encompasses all of

43
00:02:59,625 --> 00:03:06,595
this stuff, but today we'll be
focusing on a small area So this

44
00:03:06,595 --> 00:03:08,355
is where our company works as well.

45
00:03:09,495 --> 00:03:12,865
So i'll be talking about healthcare
insurance claim processing because

46
00:03:13,015 --> 00:03:18,885
this case study is based on one such
company that I am familiar with.

47
00:03:19,275 --> 00:03:27,315
So let's look at the overview of what
happens when a patient goes to a hospital.

48
00:03:27,655 --> 00:03:34,225
So when a patient goes to a hospital
providers be it individual doctors or the

49
00:03:34,235 --> 00:03:39,415
hospitals they file a claim to insurance
companies based on the care they provided.

50
00:03:40,105 --> 00:03:42,765
And these insurance companies
are technically called providers.

51
00:03:43,105 --> 00:03:47,935
payers within the healthcare industry
when they receive these claims they go

52
00:03:47,935 --> 00:03:52,755
through a bunch of policies different
healthcare policies and make sure

53
00:03:53,415 --> 00:03:58,675
the process or procedures that are
performed on the patient for the

54
00:03:58,675 --> 00:04:01,105
specific use case are actually valid.

55
00:04:01,595 --> 00:04:02,505
There could be some

56
00:04:04,765 --> 00:04:09,325
simple rules a person cannot have
three knee surgeries Because two

57
00:04:09,325 --> 00:04:11,605
needs, you can only replace two needs.

58
00:04:11,605 --> 00:04:12,925
So that's one example.

59
00:04:13,215 --> 00:04:18,115
So it could be a simple basic rules
or could be a complex multi step rules

60
00:04:18,545 --> 00:04:23,695
based on healthcare policies of different
states and different kind of is it

61
00:04:23,755 --> 00:04:26,215
Medicare, Medicaid or different process.

62
00:04:26,655 --> 00:04:32,105
So, they go through all the, each for
each claim insurance company goes through

63
00:04:32,105 --> 00:04:36,345
all this and they also take care of
take help from different companies,

64
00:04:36,735 --> 00:04:41,465
which actually goes helps the insurance
providers process all this data.

65
00:04:42,505 --> 00:04:45,155
So our company also works in this area.

66
00:04:45,175 --> 00:04:50,535
We receive claims from the insurance
companies, we process them, and

67
00:04:50,535 --> 00:04:51,945
then we send it back to them.

68
00:04:52,085 --> 00:04:53,825
So this is how the whole.

69
00:04:54,575 --> 00:04:56,735
processing works for
the healthcare claims.

70
00:04:57,235 --> 00:05:01,185
Since we're talking about advantages
of using Kubernetes in this space

71
00:05:01,565 --> 00:05:05,155
we'll go through a little bit of
overview of what Kubernetes is.

72
00:05:05,615 --> 00:05:09,825
So Kubernetes is an open source
platform which can help automating

73
00:05:09,825 --> 00:05:14,175
the deployment, scaling and operation
of the containerized applications.

74
00:05:14,185 --> 00:05:21,485
So we are basically placing our
Applications inside Docker containers or

75
00:05:21,565 --> 00:05:26,845
other type of containers and Kubernetes
helps us deploy them and manage them

76
00:05:28,105 --> 00:05:29,995
across different multiple nodes.

77
00:05:31,125 --> 00:05:34,435
So it is designed to manage complex
applications across multiple

78
00:05:34,455 --> 00:05:38,055
nodes, ensuring the consistency,
reliability, and scalability.

79
00:05:38,535 --> 00:05:42,415
The key features of Kubernetes which
are really helpful for managing the

80
00:05:42,415 --> 00:05:44,315
applications are like automated scaling.

81
00:05:44,315 --> 00:05:50,650
So there are features like Horizontal
order scaling, where based on the resource

82
00:05:50,650 --> 00:05:59,360
usage, Kubernetes itself can create
multiple replicas of the same application.

83
00:06:00,025 --> 00:06:01,745
Where it can handle more traffic.

84
00:06:01,995 --> 00:06:07,165
And it can also, we can also do vertical
autoscaling, where a single port can

85
00:06:07,175 --> 00:06:12,275
take, can vertically scale increasing
the CPU or the memory of a single port.

86
00:06:12,415 --> 00:06:13,785
So different types of scaling.

87
00:06:14,125 --> 00:06:17,665
And if there are any issues in
the underlying infrastructure,

88
00:06:17,885 --> 00:06:21,185
Kubernetes can automatically bring
up a new instance of the application.

89
00:06:21,565 --> 00:06:22,845
We call that self healing.

90
00:06:24,025 --> 00:06:28,315
And when there are new changes to the
application It's possible to do the

91
00:06:28,315 --> 00:06:33,365
rolling deployments where there are
say 10 instances of the application.

92
00:06:33,785 --> 00:06:37,165
You can slowly roll the new
version of the application easily,

93
00:06:37,165 --> 00:06:39,485
like you roll Say there is a 1.

94
00:06:40,115 --> 00:06:46,315
0, we have 10 pods already present,
we can so each pod would go through

95
00:06:46,665 --> 00:06:49,405
so a new pod will come up with a 2.

96
00:06:49,405 --> 00:06:50,075
0 and one with 1.

97
00:06:50,365 --> 00:06:54,335
0 will go down, then slowly all
the pods will transform into 2.

98
00:06:54,335 --> 00:06:55,015
0.

99
00:06:56,465 --> 00:06:58,195
So that's a rolling updates are plausible.

100
00:06:58,475 --> 00:07:01,775
And we can also do the canary
deployments where we can send a

101
00:07:02,085 --> 00:07:03,485
small percentage of the traffic.

102
00:07:03,905 --> 00:07:08,975
To the new version of the application,
make sure things are looking great.

103
00:07:09,125 --> 00:07:12,445
And then we can, and then we
can do the rolling deployment.

104
00:07:14,055 --> 00:07:20,355
And it's also possible to do all of
this securely, using the inbuilt RBAC

105
00:07:21,055 --> 00:07:25,545
role based access control, where we
can define Which users and which roles

106
00:07:25,825 --> 00:07:31,045
can have what kind of access, what
kind of actions they can perform on a,

107
00:07:31,325 --> 00:07:35,925
on the Kubernetes cluster or in this
different resources like namespace.

108
00:07:36,295 --> 00:07:40,735
We can restrict what a user or a
role can do in specific namespaces

109
00:07:40,735 --> 00:07:43,025
or in specific type of resources.

110
00:07:44,325 --> 00:07:47,375
So those are the small
introduction to Kubernetes.

111
00:07:48,845 --> 00:07:49,255
So

112
00:07:51,525 --> 00:07:57,025
this use case is based on a
conversation with a colleague or friend.

113
00:07:57,175 --> 00:08:01,765
At a conference this is a large
health insurance company where they

114
00:08:01,765 --> 00:08:05,175
were, where they had a different
setup before, and they were able to

115
00:08:05,175 --> 00:08:06,945
transform to Kubernetes infrastructure.

116
00:08:07,285 --> 00:08:13,625
And these are the, actual numbers
with what improvement they had seen.

117
00:08:14,005 --> 00:08:17,485
It has led to 50 percent reduction
in their downtime, especially when

118
00:08:17,485 --> 00:08:20,965
they are doing the new deployments,
they were able to have a very

119
00:08:20,965 --> 00:08:22,725
shorter maintenance windows.

120
00:08:23,145 --> 00:08:26,355
And they're also able to overall
increase the reliability because

121
00:08:26,475 --> 00:08:30,345
of the self healing nature of the
Kubernetes where some instance goes

122
00:08:30,405 --> 00:08:34,285
down and they're able to bring back
a new instance and take the traffic

123
00:08:34,325 --> 00:08:35,965
without any interruption to the service.

124
00:08:36,465 --> 00:08:41,485
And automatically scaling the loads
different use cases where they're able to.

125
00:08:41,995 --> 00:08:44,075
process the batch batch claims.

126
00:08:44,535 --> 00:08:45,605
And yeah, self healing.

127
00:08:45,605 --> 00:08:46,975
We already talked about that.

128
00:08:48,865 --> 00:08:50,555
So this is, this was a setup.

129
00:08:51,175 --> 00:08:55,395
So previously it was an on premise
setup where it had a couple of data

130
00:08:55,405 --> 00:09:01,385
centers and they were deploying these
applications directly on the bare

131
00:09:01,385 --> 00:09:03,315
metal instances using the Ansible.

132
00:09:03,775 --> 00:09:05,785
So using Ansible, all the.

133
00:09:06,805 --> 00:09:14,015
Build was going on in GitHub and the
images are being built there through

134
00:09:14,015 --> 00:09:17,845
the CI CD within the GitHub and
the Docker image was stored in the

135
00:09:17,845 --> 00:09:20,805
Docker registry, not Docker registry.

136
00:09:20,995 --> 00:09:26,685
So they're actually building the binaries
Java binaries, and then they were

137
00:09:26,685 --> 00:09:32,615
able to pull these from the registry
and then deploy them directly in the

138
00:09:32,755 --> 00:09:34,995
instances like bare metal instances.

139
00:09:36,105 --> 00:09:37,375
That's how they've been doing it.

140
00:09:37,405 --> 00:09:41,445
It was also a patchwork of both
Ansible and some shell scripts.

141
00:09:41,885 --> 00:09:46,667
There were several challenges doing
this, uh, one of the challenges

142
00:09:46,667 --> 00:09:51,685
was it was difficult to maintain a
lot of code, especially since they

143
00:09:51,685 --> 00:09:54,035
had a microservices architecture.

144
00:09:55,365 --> 00:09:59,295
It was clear to them after some time,
it would be better to transform into

145
00:09:59,295 --> 00:10:01,575
a Kubernetes based infrastructure.

146
00:10:02,825 --> 00:10:04,725
So they moved to
kubernetes infrastructure.

147
00:10:05,155 --> 00:10:09,315
Kubernetes was being managed
on they were using the EKS,

148
00:10:09,745 --> 00:10:12,085
AWS managed kubernetes service.

149
00:10:12,565 --> 00:10:18,285
And they moved to the github architecture
where they were using the Argo CD.

150
00:10:18,615 --> 00:10:23,275
So that all the manifest, helm charts
and everything was written in the,

151
00:10:25,965 --> 00:10:27,385
was stored in the github.

152
00:10:27,905 --> 00:10:32,715
And Argo CD was directly deploying
these applications from docker

153
00:10:32,715 --> 00:10:38,475
registry to the cluster based on
the manifest in the git repository.

154
00:10:38,905 --> 00:10:44,075
So any changes they had a clear change
control where any changes are going

155
00:10:44,075 --> 00:10:48,055
through this, but previously through
Ansible they were running these

156
00:10:48,055 --> 00:10:52,465
Ansible scripts from local and people
had to make changes in their local.

157
00:10:52,475 --> 00:10:56,865
Sometimes those changes were not
committed that led to some problems.

158
00:10:58,140 --> 00:11:04,080
But through Argo CD through GitOps
stuff it was very easy for everyone,

159
00:11:04,120 --> 00:11:05,680
like it was more transparent.

160
00:11:06,260 --> 00:11:10,470
So this has this whole transformation
has led to a like 50 percent reduction

161
00:11:10,470 --> 00:11:14,330
in their downtime and they were
able to reliably and consistently.

162
00:11:14,590 --> 00:11:20,320
Do the deployments other than great
advantage they had was especially when

163
00:11:20,320 --> 00:11:25,700
they were doing the batch processing
because typically the way health

164
00:11:25,700 --> 00:11:30,670
insurance industry works is They take
all the claims throughout the day and

165
00:11:30,670 --> 00:11:33,340
send it as a batch over the night to the

166
00:11:35,390 --> 00:11:39,940
sent, not sent, yeah, they sent to
the processing companies and also do

167
00:11:39,970 --> 00:11:42,120
their batch processing at once per day.

168
00:11:42,630 --> 00:11:49,210
So they had to scale these infrastructure
once a day and they don't need that

169
00:11:49,210 --> 00:11:50,470
infrastructure throughout the day.

170
00:11:50,810 --> 00:11:56,530
So through using the AWS EKS auto scaling
groups and that stuff and Kubernetes,

171
00:11:56,580 --> 00:11:59,250
they were able to get much cost savings.

172
00:12:04,650 --> 00:12:08,790
So other features that were really
useful for them, the, what these

173
00:12:09,150 --> 00:12:13,310
rolling updates previously they
were only able to use do the.

174
00:12:14,090 --> 00:12:19,140
Deployments once per week, and when they
were doing the deployments they had to

175
00:12:19,180 --> 00:12:24,010
take down the data center and then do
the deployment and then get back the

176
00:12:24,010 --> 00:12:27,860
data center in the maintenance windows,
but using the rolling updates, they

177
00:12:27,860 --> 00:12:31,948
did not have any downtime, especially
for the web applications where the With

178
00:12:31,998 --> 00:12:36,282
the application had to be available
for the whole time and they were able

179
00:12:36,282 --> 00:12:39,808
to do the canary deployments, test
their stuff before completely deploying

180
00:12:39,808 --> 00:12:41,378
the new versions of the application.

181
00:12:41,908 --> 00:12:43,668
And the spark jobs is interesting.

182
00:12:43,738 --> 00:12:47,298
So I started using Airflow.

183
00:12:47,668 --> 00:12:51,628
So in Airflow, when you're writing
the DAGs, there are some Kubernetes

184
00:12:51,628 --> 00:12:56,988
operators where you can actually
run your jobs within the Kubernetes.

185
00:12:57,418 --> 00:13:03,758
While Airflow manages the jobs and
yeah, obviously the it's easy to

186
00:13:03,758 --> 00:13:08,138
implement integrations like Datadog
for real time monitoring of it.

187
00:13:08,558 --> 00:13:13,588
And also easy to maintain the security
and compliance using the RBAC stuff.

188
00:13:14,168 --> 00:13:18,308
And obviously CNCF has a huge
landscape where there are new

189
00:13:18,388 --> 00:13:23,188
applications are coming up, which are
very useful for different use cases.

190
00:13:26,448 --> 00:13:34,368
So apart from this based on this, even if
any new healthcare companies wants to use

191
00:13:34,478 --> 00:13:36,928
Kubernetes because of these advantages.

192
00:13:37,228 --> 00:13:39,818
So this is, this would be
an implementation strategy,

193
00:13:39,948 --> 00:13:41,478
how they can think about it.

194
00:13:41,888 --> 00:13:45,078
So any company has to go
through the assessment.

195
00:13:45,078 --> 00:13:48,548
Kubernetes is not really
useful in all the use cases.

196
00:13:48,968 --> 00:13:51,298
Especially if your
application is very small.

197
00:13:51,798 --> 00:13:57,988
A specific use case, and you don't have
many microservices kind of architecture.

198
00:13:58,418 --> 00:14:02,368
It may be simple to use other
services, like directly deploying

199
00:14:02,368 --> 00:14:07,248
them on EC2 instances, or use Elastic
Beanstalk, or even AWS Lambda.

200
00:14:07,588 --> 00:14:13,348
So we have to first assess If Kubernetes
is the right solution for the use case

201
00:14:13,898 --> 00:14:18,418
one to determine and then start planning
it, there are different ways of doing it.

202
00:14:18,758 --> 00:14:23,118
First, you have to take care of
containerizing your application,

203
00:14:23,168 --> 00:14:26,548
having the proper pipelines to
create this containerization.

204
00:14:27,123 --> 00:14:30,213
And then start writing the Helm
charts and then automating the

205
00:14:30,213 --> 00:14:32,573
deployments using the GitLab GitOps.

206
00:14:33,773 --> 00:14:38,153
So plan all that stuff and then
start with one microservice.

207
00:14:38,843 --> 00:14:43,133
And then do the pilot deployment
with small scale stuff.

208
00:14:43,603 --> 00:14:47,613
And then you can start Moving all
your microservice into it, and then

209
00:14:47,613 --> 00:14:48,983
you can scale your application.

210
00:14:49,333 --> 00:14:51,693
And obviously we have to implement
the monitoring to make sure

211
00:14:51,693 --> 00:14:53,943
everything is working as planned.

212
00:14:57,403 --> 00:15:04,363
The future of Kubernetes looks great,
especially considering how active the

213
00:15:04,363 --> 00:15:08,973
whole community is around Kubernetes.

214
00:15:09,633 --> 00:15:17,193
That also includes Most of the
AML applications helping health

215
00:15:17,333 --> 00:15:21,803
industry obviously comes with a
lot of data and having insights

216
00:15:21,863 --> 00:15:24,063
and using them to reduce the.

217
00:15:26,708 --> 00:15:28,648
Healthcare costs would be very nice.

218
00:15:29,088 --> 00:15:35,078
And a Kubernetes at the forefront
of all this AI and that stuff.

219
00:15:35,528 --> 00:15:39,918
So it's great to move on to
this architecture build that.

220
00:15:41,578 --> 00:15:44,858
expertise within your company
so that it will be useful when

221
00:15:45,108 --> 00:15:47,388
you are doing AML stuff as well.

222
00:15:47,388 --> 00:15:53,158
And it's definitely very easy to
implement security stuff using Kubernetes

223
00:15:54,248 --> 00:15:57,778
and the lab with the CNC landscape
growing, there are many use cases

224
00:15:57,798 --> 00:15:58,788
that you can implement on Kubernetes.

225
00:16:01,368 --> 00:16:07,418
So yeah, now I conclude saying
for healthcare industries for any

226
00:16:07,418 --> 00:16:09,978
company in the healthcare industry,
it will be very beneficial.

227
00:16:10,648 --> 00:16:13,658
to use Kubernetes with all its benefits.

228
00:16:14,208 --> 00:16:15,138
That's all for today.

229
00:16:15,188 --> 00:16:17,028
Thank you for listening to this talk.

230
00:16:17,568 --> 00:16:17,978
Have a great day.

