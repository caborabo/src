1
00:00:13,960 --> 00:00:18,789
Welcome to Conf42 and welcome to billions
of records in MySQL lessons learned.

2
00:00:19,259 --> 00:00:22,330
I'm very excited to walk you through
my experience working with bigger

3
00:00:22,330 --> 00:00:25,830
data sets with billions of records in
MySQL, as you can see on the screen.

4
00:00:26,220 --> 00:00:29,349
And I hope you will learn
something from my talk.

5
00:00:30,740 --> 00:00:31,869
So let's get right into it.

6
00:00:32,370 --> 00:00:34,980
To begin with, I would like
to show you two queries.

7
00:00:35,150 --> 00:00:39,200
One query is a query searching
for data without an eta sign.

8
00:00:39,775 --> 00:00:44,295
And the second query is searching for
data with an eta sign in Boolean mode.

9
00:00:44,635 --> 00:00:50,114
These queries are something that is known
as queries with a full text search index.

10
00:00:50,334 --> 00:00:54,225
Such queries are very prevalent in
MySQL when we are searching for data

11
00:00:55,644 --> 00:00:58,515
in using the full text search index.

12
00:00:58,855 --> 00:01:04,604
Meaning that our queries using the index
will have the match against clauses.

13
00:01:04,604 --> 00:01:07,505
As you can see, they have
match against something.

14
00:01:08,205 --> 00:01:14,664
And if your query is Runs under my scale,
and if it has such clauses, it is most

15
00:01:14,664 --> 00:01:17,514
likely using the full text search index.

16
00:01:18,005 --> 00:01:23,225
And the full text search index
means that it's privy to all kinds

17
00:01:23,225 --> 00:01:27,395
of behavior that you would likely,
most likely wouldn't expect.

18
00:01:27,785 --> 00:01:28,595
In this case.

19
00:01:28,625 --> 00:01:31,715
One query completes very
quick and the other time out.

20
00:01:32,895 --> 00:01:37,695
And the reason behind this is
that because the second query has

21
00:01:37,695 --> 00:01:40,405
a bug within itself, the bug is.

22
00:01:40,665 --> 00:01:46,205
It has a number that you can see on
your screen and the core reason behind

23
00:01:46,205 --> 00:01:51,435
this bug, I assume I found this bug
somewhere around in 2014 or 2015 when

24
00:01:51,435 --> 00:01:54,695
I was building a data breach search
engine, which I will also share with you.

25
00:01:55,345 --> 00:01:59,704
The core reason behind this bug
is that I assume the query takes

26
00:01:59,704 --> 00:02:04,274
a different path within a database
and as such the query times out.

27
00:02:05,520 --> 00:02:08,550
Again, this is some weird
behavior within MariaDB.

28
00:02:08,560 --> 00:02:13,819
So this is a glance of something you
will see during this talk, but before

29
00:02:13,819 --> 00:02:17,300
we get too much into the stock, I
should probably introduce myself.

30
00:02:17,329 --> 00:02:18,070
My name is Lukas.

31
00:02:18,800 --> 00:02:20,260
I'm an author.

32
00:02:20,459 --> 00:02:23,930
I am originally a security guy, but
I switched to databases a couple

33
00:02:23,930 --> 00:02:28,740
of years ago, I wrote a book titled
Hacking MySQL, Breaking, Optimizing

34
00:02:28,779 --> 00:02:33,549
and Securing MySQL for Your Use Case,
which can be accessed at hackingmysql.

35
00:02:33,550 --> 00:02:33,890
com.

36
00:02:36,094 --> 00:02:41,594
And I've built one of the most prominent
Databricks search engines to this day.

37
00:02:41,654 --> 00:02:42,974
I run BridgeDirectory.

38
00:02:43,204 --> 00:02:48,684
com, which is a Databricks search engine,
which in essence makes you able to

39
00:02:48,714 --> 00:02:52,874
provide your email address, username, IP
address, or whatever details you want.

40
00:02:53,394 --> 00:02:58,914
And then runs a search through
stolen and leaked data to tell you

41
00:02:58,914 --> 00:03:00,904
whether you are at risk or not.

42
00:03:02,795 --> 00:03:06,524
I also very frequently blog in
various blocks including bridge

43
00:03:06,554 --> 00:03:10,004
directory, my own blog, I blogged
for archetype when it existed.

44
00:03:10,484 --> 00:03:14,165
There was a SQL client, a block
for DB visualizer, Redgate,

45
00:03:14,204 --> 00:03:15,644
and other mediums as well.

46
00:03:17,204 --> 00:03:20,644
Aside from that, I also have a
YouTube channel called Database Dive.

47
00:03:20,644 --> 00:03:25,414
If anyone wants to have a gander
through YouTube videos depicting

48
00:03:25,414 --> 00:03:27,134
databases, you're more than welcome to.

49
00:03:27,619 --> 00:03:30,969
And I also found bugs in MySQL.

50
00:03:31,139 --> 00:03:34,689
And I also run my own blog that
you can see on screen as well.

51
00:03:35,499 --> 00:03:40,429
So the agenda for this talk right
here would be performance basics.

52
00:03:40,439 --> 00:03:45,330
I'm going to walk you through engines
available in MySQL, how to optimize

53
00:03:45,789 --> 00:03:49,500
schema and data types, how to
optimize your data for performance.

54
00:03:49,755 --> 00:03:54,615
Security, how to optimize for big data
and security, how to work with your

55
00:03:54,625 --> 00:03:56,325
backups, how to optimize your backups.

56
00:03:56,325 --> 00:04:03,235
We're gonna get a glance, a look into
advanced MySQL features and have some

57
00:04:03,264 --> 00:04:05,394
tools to improve performance as well.

58
00:04:05,915 --> 00:04:09,295
So starting from the bottom
we have performance basics.

59
00:04:09,645 --> 00:04:13,455
Now to follow along with this,
you would have to have some

60
00:04:13,455 --> 00:04:17,385
sort of minimal understanding of
MySQL or databases in general.

61
00:04:17,795 --> 00:04:21,964
So when I, when you see some sort of
titles here on the screen, such as my.

62
00:04:21,964 --> 00:04:26,765
cnf, these are most likely file names
that are related to the database.

63
00:04:26,765 --> 00:04:30,135
I will try to explain as they come across.

64
00:04:30,145 --> 00:04:31,045
So for example, my.

65
00:04:31,045 --> 00:04:32,255
ini or my.

66
00:04:32,405 --> 00:04:36,925
cnf is a configuration file that you
use to configure your MySQL database

67
00:04:37,905 --> 00:04:45,395
and configuring your server means that
you glance through the documentation.

68
00:04:45,845 --> 00:04:50,475
Get the parameters applicable
to your storage engine for your

69
00:04:50,475 --> 00:04:54,605
database because all databases
come with certain storage engines.

70
00:04:54,615 --> 00:04:57,145
For MySQL, the primary
storage engine is InnoDB.

71
00:04:58,215 --> 00:05:02,045
And InnoDB has a couple of
parameters that you need to optimize.

72
00:05:02,095 --> 00:05:03,395
That is the buffer pool.

73
00:05:03,875 --> 00:05:09,235
InnoDB buffer pool size, that's
the InnoDB log file size.

74
00:05:09,835 --> 00:05:13,335
And some other parameters
such as InnoDB flush log at

75
00:05:13,335 --> 00:05:15,675
transaction commits and so on.

76
00:05:16,440 --> 00:05:20,660
After these parameters have been
optimized you only search for what

77
00:05:20,660 --> 00:05:24,819
you need so that your database
is not very busy to begin with.

78
00:05:25,220 --> 00:05:32,229
So if you search for example one book with
a limit one clause, if you only need to

79
00:05:32,229 --> 00:05:37,400
return one book, your database doesn't
scan through maybe 15, 000 or 20, 000

80
00:05:37,409 --> 00:05:39,859
books and returns the results faster.

81
00:05:40,459 --> 00:05:44,664
If you use MySQL, you should consider
using InnoDB, which is the primary

82
00:05:44,664 --> 00:05:50,454
storage engine, which is going to be
used by all MySQL database anyway.

83
00:05:51,724 --> 00:05:55,544
But if you changed the storage engine for
whatever reason, please switch it back,

84
00:05:55,575 --> 00:06:01,215
because MySAM, as you probably changed it
to, is not a very reliable storage engine.

85
00:06:01,274 --> 00:06:04,884
And most of the features that have
been available within that storage

86
00:06:04,884 --> 00:06:09,624
engine have been available within
Maria, within InnoDB as well.

87
00:06:11,304 --> 00:06:14,274
And also you need to follow
performance best practices.

88
00:06:14,764 --> 00:06:18,474
Performance best practices can
often be found on the same YouTube

89
00:06:18,484 --> 00:06:19,484
channels, for example, at 1.

90
00:06:19,824 --> 00:06:25,414
hiron on documentation or by
reading just simple blogs.

91
00:06:25,794 --> 00:06:29,424
So after you have your what's about.

92
00:06:30,025 --> 00:06:31,045
The basics, right?

93
00:06:31,045 --> 00:06:34,145
You need to change, you need to
choose your storage engines or

94
00:06:34,275 --> 00:06:35,755
change them for that matter, right?

95
00:06:36,155 --> 00:06:41,125
So the majority of you who will be
using MySQL or MariaDB or Percona

96
00:06:41,145 --> 00:06:45,914
server or whatever you use, you're
going to be using InnoDB or ExtraDB,

97
00:06:45,915 --> 00:06:51,905
which is one of the primary storage
engines available within MySQL.

98
00:06:52,805 --> 00:06:56,285
And There are a couple of other
options as you can see on the screen.

99
00:06:56,285 --> 00:07:01,585
There is MySAM, there is Memory, there is
CSV, there is Archive, there is Blackhole,

100
00:07:01,915 --> 00:07:06,695
and if you use MariaDB, there are gonna be
a couple of other options such as Connect.

101
00:07:07,214 --> 00:07:11,584
If you use Percona Server, you might
be able to see instead of InnoDB, you

102
00:07:11,585 --> 00:07:14,105
maybe use ExtraDB as you can see here.

103
00:07:14,155 --> 00:07:18,175
ExtraDB is essentially the same
as InnoDB, but With a couple of

104
00:07:18,215 --> 00:07:22,435
enhancements choose storage engines
carefully, depending on your use case.

105
00:07:23,424 --> 00:07:26,895
It's, it depends on what kind
of storage engine will you need.

106
00:07:26,954 --> 00:07:31,724
Most of you for most of your use
cases will need InnoDB, but if you

107
00:07:31,735 --> 00:07:37,365
really need to count the exact count
of rows within all of your tables.

108
00:07:37,670 --> 00:07:43,270
Sometimes you may put mySum into the
mix, but again, I wouldn't recommend

109
00:07:43,280 --> 00:07:46,710
using mySum for anything else than
just counting rows in your table

110
00:07:46,710 --> 00:07:48,250
because it's not meant for that.

111
00:07:48,820 --> 00:07:53,940
The only thing that it is good for is
counting rows within a table because

112
00:07:53,940 --> 00:08:00,080
mySum, it stores the internal row count
of the table in its metadata, which

113
00:08:00,090 --> 00:08:05,250
InnoDB does not, which is why, which is
precisely the reason why InnoDB cannot

114
00:08:05,330 --> 00:08:10,550
show the exact row count of your of
the rows in your table with MySAM can.

115
00:08:11,130 --> 00:08:15,110
So anyway, after you chose the storage
engine, You need to optimize the schema.

116
00:08:15,570 --> 00:08:19,160
Here you need to keep in
mind a couple of principles.

117
00:08:19,160 --> 00:08:25,909
Keep things simple, no matter what you're
working with, keeping things simple will

118
00:08:25,950 --> 00:08:28,280
alleviate you for most of the problems.

119
00:08:28,890 --> 00:08:34,840
Avoid innovating, avoid inventing new
things, inventing new stuff changing

120
00:08:34,850 --> 00:08:36,630
things where this is not necessary.

121
00:08:36,630 --> 00:08:40,540
Adhere to the documentation
because will answer most of

122
00:08:40,540 --> 00:08:41,700
the questions that you have.

123
00:08:42,110 --> 00:08:46,710
And if you have any further questions,
you can consider visiting conferences

124
00:08:46,720 --> 00:08:50,640
like this one, or you can consider
asking questions on Stack Overflow.

125
00:08:50,640 --> 00:08:54,609
I think they have even the DBA Stack
Exchange Forum, or whatever it's called.

126
00:08:55,000 --> 00:08:58,919
And people are very active there, and
you will get your answers answered your

127
00:08:58,920 --> 00:09:00,859
questions answered relatively quickly.

128
00:09:01,640 --> 00:09:05,530
Now, the other thing you can do is
there is certain parameters that

129
00:09:05,530 --> 00:09:09,700
you can, for example, disable, for
example, strict trans tables or strict

130
00:09:09,760 --> 00:09:12,040
all tables for automated truncation.

131
00:09:12,750 --> 00:09:18,320
So that means that if your data is too
long to be entered into a database,

132
00:09:18,950 --> 00:09:23,310
it will be automatically truncated and
MySQL will not come back with any errors.

133
00:09:23,630 --> 00:09:27,930
Again, this is not applicable for
all use cases, but Maybe for you it

134
00:09:27,930 --> 00:09:35,229
is you may also choose to avoid text
values, which means that your data will

135
00:09:35,230 --> 00:09:38,609
not cover as much space on the disk.

136
00:09:39,370 --> 00:09:44,710
And keep in mind that also, as I said,
all data types come with essential

137
00:09:44,780 --> 00:09:46,360
data space on the disk, right?

138
00:09:46,360 --> 00:09:50,640
VARCHAR data types, they will occupy
most likely the length in bytes

139
00:09:50,670 --> 00:09:53,070
plus one or two bytes on the disk.

140
00:09:53,570 --> 00:09:54,200
And so on.

141
00:09:54,520 --> 00:09:59,360
If you run bigger datasets, this is
another issue that you need to deal with.

142
00:09:59,740 --> 00:10:07,490
For this thing, you need to to load data
in, you would need to avoid big overhead.

143
00:10:07,900 --> 00:10:12,960
That means that you should avoid
using insert queries and using,

144
00:10:13,010 --> 00:10:15,000
and use load data in file.

145
00:10:15,050 --> 00:10:20,580
If possible, it has a lots of
available parameters that you can use.

146
00:10:20,990 --> 00:10:25,240
As you can see on the screen, you can
set the character set, you can set

147
00:10:25,250 --> 00:10:27,500
what your fields will be terminated by.

148
00:10:27,540 --> 00:10:33,260
This is a typo here, it's, it should
be terminated by, lines terminated by,

149
00:10:33,270 --> 00:10:35,569
or escaped by, and yada, yada, yada.

150
00:10:35,750 --> 00:10:42,930
It helps your database understand what
kind of raw data you're working with.

151
00:10:43,350 --> 00:10:48,440
And if you're working with raw data,
the good thing is with your database,

152
00:10:49,260 --> 00:10:55,655
is that It inserts data instantly into
your database as opposed to insert

153
00:10:55,785 --> 00:11:02,175
statements when they have to go through a
bunch of operations to just insert data.

154
00:11:02,205 --> 00:11:06,405
They have to unlock the database,
check for data integrity, insert

155
00:11:06,455 --> 00:11:10,775
data, prepare the database for
the next insert, and yada yada.

156
00:11:10,825 --> 00:11:14,235
And do this for every
insert, so it takes up time.

157
00:11:15,300 --> 00:11:18,230
Another thing that you
can do is partitioning.

158
00:11:18,240 --> 00:11:22,620
So partitioning is very useful if you run,
for example, data breach search engines.

159
00:11:23,120 --> 00:11:28,570
When you have bigger data sets, So
partitioning, in essence, what it means

160
00:11:28,590 --> 00:11:34,810
is you split your table into smaller
tables that are treated as smaller

161
00:11:34,810 --> 00:11:43,700
tables by your application, but your
database still sees them as a whole.

162
00:11:44,059 --> 00:11:48,300
So on one level, they're treated
as, let's say, smaller tables when

163
00:11:48,300 --> 00:11:51,100
you need to search through them,
but when you need to work with them,

164
00:11:51,100 --> 00:11:53,269
they're still one intact table.

165
00:11:53,670 --> 00:11:57,470
And this is why they are so much bigger
when you see their size on the disk.

166
00:11:57,930 --> 00:12:02,170
Because if you have, for example,
five partitions your table size

167
00:12:02,180 --> 00:12:05,580
will most likely be five times
bigger than ordinary size, right?

168
00:12:07,280 --> 00:12:13,880
And this is why people working with
MySQL with big data sets, They often

169
00:12:14,170 --> 00:12:20,290
run out of space or do something, run
out of, run into issues similar to that.

170
00:12:20,730 --> 00:12:28,490
So they most likely run into issues
working with big data because one

171
00:12:28,490 --> 00:12:31,400
thing they don't understand, certain
functionality of certain queries,

172
00:12:31,410 --> 00:12:35,470
such as alter table which alter
table, how it works internally

173
00:12:35,710 --> 00:12:37,800
is it makes a copy of the disk.

174
00:12:37,810 --> 00:12:40,590
So when you need to update
data with alter table.

175
00:12:41,155 --> 00:12:47,555
It makes a copy of the table on the disk,
it updates that copy, and then it swaps

176
00:12:47,565 --> 00:12:54,505
the newly created table on the disk with
your original table, which means that it

177
00:12:54,575 --> 00:13:01,305
most likely for tables that have a lot
of data, it will be a lot it will consume

178
00:13:01,305 --> 00:13:05,675
a lot of time, basically, and if you
don't have enough space on the disk, for

179
00:13:05,675 --> 00:13:08,305
example, if your table is, 200 gigabytes.

180
00:13:08,305 --> 00:13:12,465
And if you have only 57 gigabytes of space
on the disk, you will run out of space.

181
00:13:12,985 --> 00:13:19,055
So what some people do is instead
of running update queries when

182
00:13:19,065 --> 00:13:23,365
they need to update data because
they need to run update queries

183
00:13:23,385 --> 00:13:28,985
with alter table, which would make
a copy of the table on the disk.

184
00:13:30,995 --> 00:13:34,465
They, in essence, make
use of the default clause.

185
00:13:34,655 --> 00:13:40,295
So the default clause is used when you
create a table and you set a default

186
00:13:40,305 --> 00:13:42,835
value of a column to some value.

187
00:13:43,285 --> 00:13:49,385
That means, in your database's point
of view that means that one column that

188
00:13:49,385 --> 00:13:53,905
you set, or more columns, whatever the
count is for you, one or more columns

189
00:13:54,035 --> 00:13:57,845
has a value that is already preset.

190
00:13:58,230 --> 00:14:00,700
And it doesn't need to be updated, right?

191
00:14:01,220 --> 00:14:05,650
The second thing you need to keep in mind
are the character sets and collations.

192
00:14:05,990 --> 00:14:09,100
So these character sets and
collations, they directly depend

193
00:14:09,120 --> 00:14:13,880
on the kind of data that you are
storing in the database, right?

194
00:14:14,329 --> 00:14:17,719
So if you're using, for example,
Arabic data sets, right?

195
00:14:17,740 --> 00:14:21,250
So you will need to make use
of Arabic character sets.

196
00:14:21,660 --> 00:14:24,570
if you're using, I don't
know, Hebrew datasets, right?

197
00:14:24,590 --> 00:14:27,650
You need to make use of
Hebrew character sets.

198
00:14:27,890 --> 00:14:35,070
But in most cases, you will need
to use UTF 8 MB4 Unicode CI, which

199
00:14:35,600 --> 00:14:37,650
is the original form of Unicode.

200
00:14:39,180 --> 00:14:44,370
And please don't use UTF because
this is not really UTF 8.

201
00:14:47,350 --> 00:14:53,660
You will see because original UTF 8
with 4 bytes per character it supports

202
00:14:53,770 --> 00:14:55,780
4 bytes per character, as I said, right?

203
00:14:56,300 --> 00:15:01,129
But UTF 8 in MySQL, it supports only
3 bytes per character, which means

204
00:15:01,130 --> 00:15:02,960
that some queries can error out.

205
00:15:03,130 --> 00:15:07,000
Especially if you're working with
big data, that can be a concern.

206
00:15:07,425 --> 00:15:15,045
If you add columns after, if you
add columns into a table and the

207
00:15:15,045 --> 00:15:21,044
column is the last column, it will
be wise to apply some sort of hacks

208
00:15:21,045 --> 00:15:22,225
called setSessionAlterAlgorithm,

209
00:15:24,575 --> 00:15:28,585
which on the screen, which means
that you set the algorithm of

210
00:15:28,625 --> 00:15:30,635
the alter query to instant.

211
00:15:31,120 --> 00:15:37,710
And when you set the alter algorithm to
instant, the column, if it is the last

212
00:15:37,710 --> 00:15:45,140
column you add to the table is added
instantly, but is and without any IO

213
00:15:45,140 --> 00:15:49,220
on the disk or whatever, but it only
works in newer MariaDB versions, right?

214
00:15:50,635 --> 00:15:54,945
And such hacks can be found all across
the documentation and all across

215
00:15:54,965 --> 00:15:56,995
Stack Overflow, so please look around.

216
00:15:57,435 --> 00:16:03,435
So after you optimize your data for
MySQL or your MySQL for big data,

217
00:16:03,695 --> 00:16:07,025
whatever is around you also need
to backup your bigger datasets.

218
00:16:07,525 --> 00:16:12,645
Backing up 1 billion rows in
MySQL isn't a very useful task

219
00:16:12,645 --> 00:16:14,895
and isn't a very easy task.

220
00:16:14,895 --> 00:16:20,434
So let's say it like that, because
MySQL dump, it likely won't work.

221
00:16:20,735 --> 00:16:25,474
It will back up your datasets and
you will be able to restore them.

222
00:16:25,475 --> 00:16:28,745
But the first thing that's going
to happen is your file will

223
00:16:28,745 --> 00:16:31,335
going to be exceedingly large.

224
00:16:31,895 --> 00:16:37,485
And the second thing this is
going to happen is that the time

225
00:16:37,485 --> 00:16:42,535
that you need to recover the data
will also be out of proportion.

226
00:16:42,545 --> 00:16:45,465
Like you will need to wait a week,
two weeks, three weeks, or even a

227
00:16:45,465 --> 00:16:49,384
month, or even your query will even
timeout because, the second thing

228
00:16:49,394 --> 00:16:54,244
you need to take into account is
that the backups have multiple types.

229
00:16:54,244 --> 00:16:56,024
They can be physical,
which means that you.

230
00:16:56,239 --> 00:16:59,089
Take backups of physical
files within your database.

231
00:16:59,589 --> 00:17:04,239
They can be logical, which means that
you take backups of queries, recreate

232
00:17:04,279 --> 00:17:07,209
data inside of your database and so on.

233
00:17:07,679 --> 00:17:12,049
But with big data sets, the
problem is that these things,

234
00:17:12,049 --> 00:17:14,169
they all come with overhead.

235
00:17:14,994 --> 00:17:19,524
And basically to avoid that, you need
to make use of queries like select

236
00:17:19,524 --> 00:17:22,314
into out file and load data in file.

237
00:17:22,774 --> 00:17:26,614
These two queries, in essence,
they back up raw data sets.

238
00:17:26,794 --> 00:17:34,394
So select into out file will in
essence select every row in a table

239
00:17:34,714 --> 00:17:40,634
and load it into a file, which for the
first part is significantly smaller

240
00:17:40,634 --> 00:17:43,184
than files with logical backups.

241
00:17:44,439 --> 00:17:47,629
That is with INSERT, INTO statements,
CREATE TABLE statements, whatever.

242
00:17:48,129 --> 00:17:52,709
And LOADDATA and FILE will be used
to load the data into a database.

243
00:17:53,969 --> 00:17:59,229
Backups taken with SELECT, INTO, OUT
file and backed up with LOADDATA and FILE

244
00:17:59,239 --> 00:18:05,759
have significantly less overhead than
those taken with logical MySQL dumps.

245
00:18:05,759 --> 00:18:07,839
So this is something you
need to keep in mind.

246
00:18:08,389 --> 00:18:12,460
In In some cases, you also need to
keep in mind some advanced features

247
00:18:12,520 --> 00:18:17,750
such as the default clause can be
used in place of an update clause

248
00:18:17,760 --> 00:18:19,680
sometimes, as I mentioned before, right?

249
00:18:20,180 --> 00:18:25,840
If you need to use a unique index, that
means that if you need to get rid of some

250
00:18:25,850 --> 00:18:32,550
values in a column, And that column is
pretty large that that means that MySQL

251
00:18:32,580 --> 00:18:36,660
again will have to make use of the Altar
query, which in essence copies your data

252
00:18:37,390 --> 00:18:39,570
into another table and then swaps it over.

253
00:18:39,910 --> 00:18:43,320
To avoid all this, you can
use unique sort features.

254
00:18:43,340 --> 00:18:48,770
That means that you in essence
run Linux or Cygwin on Windows.

255
00:18:49,225 --> 00:18:53,845
And then load your data into a
text file using the same select

256
00:18:53,845 --> 00:18:55,265
into out file or whatever.

257
00:18:56,155 --> 00:19:01,725
And then basically utilize sort unique,
sort with a unique flag, and then

258
00:19:01,755 --> 00:19:05,275
specify your file into some other file.

259
00:19:06,005 --> 00:19:13,675
And this command that you can see on your
screen right now is, it will it will drop

260
00:19:13,685 --> 00:19:15,515
all of the duplicates from that file.

261
00:19:15,955 --> 00:19:20,755
So in essence, you will load into your
database the data without duplicates.

262
00:19:21,345 --> 00:19:28,025
You can sometimes use insert ignore
instead of insert, which means that you

263
00:19:28,025 --> 00:19:32,985
will ignore some errors or all errors
that may occur when inserting data.

264
00:19:32,985 --> 00:19:36,685
That may be useful when you're
inserting into some columns

265
00:19:36,685 --> 00:19:38,495
instead of all columns or whatever.

266
00:19:38,495 --> 00:19:43,135
And you can also delete data according
to time periods if it's necessary.

267
00:19:43,675 --> 00:19:48,875
So if you use, for example, queries like
delete from something for a portion of

268
00:19:48,895 --> 00:19:56,065
time period, from this to that, it will
also delete rows relatively quickly.

269
00:19:56,335 --> 00:20:00,315
Also, you can make use of the truncate
clause, which means that in essence,

270
00:20:00,315 --> 00:20:06,405
your table will be truncated, which
means in other words, all rows

271
00:20:06,415 --> 00:20:08,065
within that table will be deleted.

272
00:20:08,075 --> 00:20:13,405
And such queries are significantly
faster than using the delete clause

273
00:20:13,505 --> 00:20:17,675
because they don't come with as much
overhead for your database as well.

274
00:20:18,365 --> 00:20:21,515
And the last thing that you need to keep
in mind is that if you use the InnoDB

275
00:20:22,205 --> 00:20:27,785
storage engine, you are able to kill
queries using the show process list query.

276
00:20:28,160 --> 00:20:32,020
So if you, for example, if you run a
Databricks search engine if you run a

277
00:20:32,020 --> 00:20:36,500
Databricks search engine and someone,
and you forgot to rate limit, let's say,

278
00:20:36,500 --> 00:20:42,560
or do something like that, and someone,
some genius decides to run 10 million

279
00:20:42,560 --> 00:20:46,600
queries at once, and your application
obviously lags out because there is a

280
00:20:46,600 --> 00:20:53,310
lot of strain on the database, you can
use InnoDB to basically show the queries,

281
00:20:53,550 --> 00:20:59,100
use queries like show process list, They
will return the IDs of the queries that

282
00:20:59,100 --> 00:21:03,850
are currently running in the database
and then you can just kill them one

283
00:21:03,860 --> 00:21:08,800
by one or just all of them at once by
using kill statement named kill and then

284
00:21:08,800 --> 00:21:14,000
ID and then your query will be killed
killed no longer exist in the database

285
00:21:14,020 --> 00:21:18,450
and then you can, your application will
be less laggy and then you can implement

286
00:21:18,450 --> 00:21:24,030
your load balancers, your rate limiters,
whatever, and then you can go on.

287
00:21:25,990 --> 00:21:29,260
The tools that you may
need to use is are varied.

288
00:21:29,470 --> 00:21:35,390
The most likely tool most useful
tool for your use case will be you

289
00:21:35,390 --> 00:21:39,670
yourself because nobody knows your
database better than you, right?

290
00:21:40,350 --> 00:21:46,570
If you run a MariaDB also has tools such
as MariaDB Secure Installation, MySQL

291
00:21:46,590 --> 00:21:48,120
Secure Installation, there's a symlink.

292
00:21:48,810 --> 00:21:52,870
And these tools will walk you through
a couple of things that you may need

293
00:21:52,940 --> 00:21:55,230
to do to secure your database instance.

294
00:21:57,270 --> 00:22:04,305
And if your queries are slow, MariaDB and
MySQL have such things as The slow query

295
00:22:04,305 --> 00:22:10,885
log that you, it logs all slow queries,
advanced users of MySQL will also know

296
00:22:10,885 --> 00:22:16,525
that there is such thing as the MySQL
enterprise edition, which in essence is

297
00:22:16,625 --> 00:22:21,205
enterprise edition of MySQL, which is
a firewall and an audit appliance, if I

298
00:22:21,205 --> 00:22:24,815
remember correctly, it costs thousands
of dollars, if I remember correctly, but

299
00:22:24,815 --> 00:22:27,635
But it lets you further secure MySQL.

300
00:22:27,895 --> 00:22:32,175
Aside from the Enterprise Edition,
there's tools like DbVisualizer, ArcType,

301
00:22:32,175 --> 00:22:33,715
which is now a part of ClickHouse.

302
00:22:34,195 --> 00:22:37,905
There's RedGate Monitor, there's
ClusterControl by several

303
00:22:37,915 --> 00:22:39,445
nines, and et cetera, et cetera.

304
00:22:39,865 --> 00:22:43,565
So these things, some of them
act as SQL clients, for example,

305
00:22:43,565 --> 00:22:45,105
DbVisualizer and ArcType.

306
00:22:45,355 --> 00:22:50,535
Some of them act as, double as SQL
editors, the same DbVisualizer, right?

307
00:22:50,575 --> 00:22:53,645
They let you edit your data
as if it was a spreadsheet.

308
00:22:54,215 --> 00:22:58,775
Some of you monitor, some of them monitor
other things and et cetera, et cetera.

309
00:22:58,785 --> 00:23:05,375
So aside from using tools there's
such thing as a Schrodinger's

310
00:23:05,405 --> 00:23:10,475
paradox that you may be, maybe
heard of, and maybe not heard of.

311
00:23:10,595 --> 00:23:15,815
So in the database world there is
such thing as a data definition files,

312
00:23:15,835 --> 00:23:20,275
which is FRM files, which you can see
on the screen and then the data files.

313
00:23:20,285 --> 00:23:22,605
So FRM files, in essence, they.

314
00:23:23,175 --> 00:23:27,105
They contain information about
the data files, and the data

315
00:23:27,105 --> 00:23:28,655
files contain the data itself.

316
00:23:29,075 --> 00:23:32,975
In some situations, in very rare
situations, if you insert bigger

317
00:23:33,005 --> 00:23:38,555
datasets into MySQL, and your, for
example, electricity goes out, you may

318
00:23:38,565 --> 00:23:42,795
be able to see that your data file is
missing, but the FRAM file still exists.

319
00:23:43,295 --> 00:23:46,405
And that will be the case of
the Schrodinger's Paradox, where

320
00:23:47,485 --> 00:23:51,105
Your database sees the table
existing, but you cannot drop it.

321
00:23:51,535 --> 00:23:55,765
In order to drop it, you need to most
likely shut down the database instance.

322
00:23:55,825 --> 00:24:02,005
You can just add the data file to your
data directory and the database in

323
00:24:02,025 --> 00:24:05,025
question, and then just drop it like that.

324
00:24:05,355 --> 00:24:08,345
And there's a bunch of other
ways, but I will not get into that

325
00:24:08,345 --> 00:24:09,685
because we simply don't have time.

326
00:24:10,545 --> 00:24:11,455
But thank you.

327
00:24:11,615 --> 00:24:16,375
So this was my speech and this was the
things I learned and I wanted to share

328
00:24:16,385 --> 00:24:21,151
when working with billions of rows and
bigger data sets in MySQL and MariaDB.

329
00:24:21,151 --> 00:24:25,635
And I would be very grateful if you could
share some feedback of my, from our talk.

330
00:24:25,685 --> 00:24:28,125
That is on my website slash feedback.

331
00:24:28,125 --> 00:24:29,355
So lucasvilleacres.

332
00:24:29,395 --> 00:24:30,925
com slash feedback.

333
00:24:30,955 --> 00:24:33,925
It will direct you to a
Google form, which you can.

334
00:24:34,555 --> 00:24:38,085
Which I would ask you to fill out,
it takes one or two minutes, and then

335
00:24:38,175 --> 00:24:44,365
I will see if I am a good speaker or
not, and what I can improve, and so on.

336
00:24:45,045 --> 00:24:48,195
And also, I would suggest you to
visit my website, breachdirectory.

337
00:24:49,255 --> 00:24:56,135
com, to in essence check if you
are at risk of identity theft.

338
00:24:56,795 --> 00:24:59,905
Put your email address into the
data breach search engine, and

339
00:24:59,915 --> 00:25:03,615
it will run a search through a
bunch of known data breaches.

340
00:25:04,450 --> 00:25:06,180
And the return with results.

341
00:25:06,390 --> 00:25:11,420
Aside from that keep in touch with the
documentation, blogs, database, YouTube

342
00:25:11,440 --> 00:25:15,280
channels, such as Database Dive and
so on, and you should be good to go.

343
00:25:15,410 --> 00:25:18,020
So thank you so much for watching.

344
00:25:18,370 --> 00:25:22,680
I hope you enjoyed this talk and I hope
you will enjoy upcoming talks as well.

345
00:25:22,980 --> 00:25:23,300
Thank you.

