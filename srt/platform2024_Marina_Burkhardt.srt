1
00:00:14,740 --> 00:00:17,390
Hello, everyone, and
welcome to our session.

2
00:00:17,809 --> 00:00:20,240
Let me start this session
with a bold statement.

3
00:00:20,750 --> 00:00:25,740
The next big revolution in platform
engineering isn't about a new tool.

4
00:00:26,340 --> 00:00:30,570
It's about reimagining the
entire concept of a platform.

5
00:00:31,280 --> 00:00:32,589
My name is Martin Zarkowski.

6
00:00:32,830 --> 00:00:36,660
I'm a senior solutions architect
with AWS and have a long history in

7
00:00:36,740 --> 00:00:38,850
designing and also building platforms.

8
00:00:39,210 --> 00:00:43,379
And today with me is Marina Burkhardt,
also solutions architect at AWS.

9
00:00:43,669 --> 00:00:47,139
And Marina has a strong DevOps
background and experience in

10
00:00:47,170 --> 00:00:49,860
administrating and operating platforms.

11
00:00:50,190 --> 00:00:54,080
And we both, as solutions architects,
are very much interested in

12
00:00:54,110 --> 00:00:55,230
building the platform together.

13
00:00:55,650 --> 00:00:56,410
of the future.

14
00:00:56,610 --> 00:01:01,960
So today we want to share our perspective
on the future of platform engineering.

15
00:01:02,570 --> 00:01:04,119
But first, let's look back.

16
00:01:04,390 --> 00:01:05,770
Why are we doing this?

17
00:01:05,789 --> 00:01:07,980
Why are we building platforms?

18
00:01:08,280 --> 00:01:09,740
And what are platforms?

19
00:01:10,050 --> 00:01:15,610
Would I would define it as a group of
technologies, that are used in as a base.

20
00:01:16,260 --> 00:01:21,190
And upon this base, upon this
platform, we can develop application

21
00:01:21,450 --> 00:01:23,460
processes and other technologies.

22
00:01:23,740 --> 00:01:27,190
So we basically build some
common components that handle

23
00:01:27,190 --> 00:01:28,490
a lot of generic stuff.

24
00:01:28,820 --> 00:01:33,990
And on top of that, we can build
something that is special and unique.

25
00:01:35,080 --> 00:01:40,000
and we know this is a concept that
has been used in many industries and

26
00:01:40,000 --> 00:01:41,530
they were very successful with this.

27
00:01:41,850 --> 00:01:45,140
using platforms to
transformize their business.

28
00:01:45,360 --> 00:01:46,940
How does it work with software?

29
00:01:47,130 --> 00:01:51,060
let's think of the main goals of
platforms in software development.

30
00:01:51,350 --> 00:01:55,920
It's about increasing the development
speed and still meeting all the

31
00:01:55,920 --> 00:01:58,090
requirements that we get for our software.

32
00:01:58,510 --> 00:02:04,580
And in order to have this right balance
between very high speed And high quality

33
00:02:04,640 --> 00:02:08,700
and meeting all the requirements, we
need something that is helping us.

34
00:02:08,950 --> 00:02:10,450
We need abstractions.

35
00:02:10,800 --> 00:02:14,800
And often those abstractions
come with standardizations.

36
00:02:15,070 --> 00:02:18,700
So platforms often enforce standards.

37
00:02:19,100 --> 00:02:22,790
And if I talk about standards,
I often hear people saying that

38
00:02:22,900 --> 00:02:26,430
standards are taking away all
the nice freedom and flexibility.

39
00:02:26,700 --> 00:02:29,940
Because people think of
standards as limitations.

40
00:02:30,590 --> 00:02:35,100
But I would say, and this is a bold
statement now, it's quite the opposite.

41
00:02:35,740 --> 00:02:38,350
Standards actually enable innovation.

42
00:02:38,630 --> 00:02:42,380
Standards help you to scale and
standards remove all the friction.

43
00:02:42,610 --> 00:02:45,100
I want to give you a few examples
where I believe that is true.

44
00:02:45,460 --> 00:02:49,140
So think of this highly
standardized piece of paper.

45
00:02:49,740 --> 00:02:52,210
210 by 297 millimeters.

46
00:02:52,490 --> 00:02:55,530
it's not roughly 200 by 300 millimeters.

47
00:02:55,590 --> 00:02:56,010
No.

48
00:02:56,540 --> 00:02:58,969
It is exactly 210 by 297 millimeters.

49
00:02:59,240 --> 00:03:04,620
by 297 millimeters, which is, by the
way, exactly 1 16th of a square meter.

50
00:03:04,960 --> 00:03:10,380
And this standard 210 by 297
millimeters, it's called DIN A4.

51
00:03:10,640 --> 00:03:14,110
And I believe it's a great standard
because our If we're talking about

52
00:03:14,120 --> 00:03:18,110
DNA4, no one has to argue how
big that piece of paper will be.

53
00:03:18,460 --> 00:03:20,400
We can rely on a certain size.

54
00:03:20,750 --> 00:03:23,229
And we can build something
that is, supporting that.

55
00:03:23,240 --> 00:03:26,390
we have fitting envelopes, we
have folders, drawers, pockets.

56
00:03:26,560 --> 00:03:28,840
They all, we all know
the right size for them.

57
00:03:29,010 --> 00:03:32,370
We can even build printers, fax
machines, but we don't do that anymore.

58
00:03:32,370 --> 00:03:36,580
But, like all those, things that work
together with that piece of paper.

59
00:03:36,980 --> 00:03:38,630
And yes, if we have that.

60
00:03:39,005 --> 00:03:42,555
Standardized piece of paper, we
have to adjust to that standard.

61
00:03:42,855 --> 00:03:46,945
So if we write a letter, and I
have this very long sentence in

62
00:03:46,945 --> 00:03:54,015
mind, I have to use a line break
because of 210 by 297 millimeters.

63
00:03:54,195 --> 00:03:58,425
Or if I want to draw a picture, I have
to accommodate that into this format.

64
00:03:58,425 --> 00:04:03,665
But think about it, does that
really limit you in writing texts?

65
00:04:03,895 --> 00:04:05,885
Does that limit you in drawing pictures?

66
00:04:05,885 --> 00:04:08,745
But we have seen great texts,
we have seen a lot of art.

67
00:04:09,325 --> 00:04:12,825
on a piece of paper,
standardized piece of paper.

68
00:04:13,135 --> 00:04:14,835
And we have the same with technology.

69
00:04:15,055 --> 00:04:16,915
let me give you one
example, very low level.

70
00:04:17,035 --> 00:04:22,370
we are using HTTP to make sure
that our browsers Can talk to web

71
00:04:22,370 --> 00:04:26,410
servers, to other computers, and we
are using this standard everywhere.

72
00:04:26,590 --> 00:04:29,410
So actually we can't imagine
a world without that standard.

73
00:04:29,820 --> 00:04:31,890
yeah, there are some limitations.

74
00:04:32,100 --> 00:04:35,105
There are some
standardizations in, in HTP.

75
00:04:35,335 --> 00:04:39,135
but this standard actually has
enabled the internet and it never put

76
00:04:39,135 --> 00:04:43,515
a limit to the innovations that we
are seeing today with the internet.

77
00:04:44,565 --> 00:04:48,105
So we have to realize a few
things, locking things down

78
00:04:48,375 --> 00:04:50,085
and agreeing on a few things.

79
00:04:50,775 --> 00:04:51,785
can actually help us.

80
00:04:52,035 --> 00:04:57,135
It can boost innovation and it
can boost creativity because those

81
00:04:57,145 --> 00:05:01,395
standards and abstractions, they
help us to remove the cognitive

82
00:05:01,455 --> 00:05:03,535
overload we would have otherwise.

83
00:05:03,775 --> 00:05:07,495
So they help us with increasing the
speed of development and they also help

84
00:05:07,505 --> 00:05:09,555
us to still meet all the requirements.

85
00:05:09,795 --> 00:05:13,445
So if we want to be successful
with software development, We need

86
00:05:13,445 --> 00:05:18,605
kind of abstractions and standards,
so we need those platforms.

87
00:05:19,965 --> 00:05:24,974
But there are many platforms and
platform engineering is a term nowadays.

88
00:05:24,995 --> 00:05:27,275
So what makes a platform?

89
00:05:28,185 --> 00:05:29,195
A great platform.

90
00:05:29,985 --> 00:05:35,225
Maria will explain some of the key
characteristics for a successful platform.

91
00:05:36,125 --> 00:05:38,725
there isn't a golden answer
to Martin's question.

92
00:05:38,845 --> 00:05:41,905
But at least I brought you here
three different characteristics

93
00:05:41,945 --> 00:05:46,145
that I think and consider that every
single great platform should have.

94
00:05:46,370 --> 00:05:47,760
in order to be successful.

95
00:05:48,110 --> 00:05:49,450
So let's dive into those ones.

96
00:05:50,830 --> 00:05:54,670
As we just mentioned, platforms are
going to come with abstractions.

97
00:05:54,930 --> 00:05:59,010
So that means abstractions and
standards are going to be in place.

98
00:05:59,400 --> 00:06:03,040
And you might think that those
are going to limit you, but

99
00:06:03,040 --> 00:06:04,450
actually totally the opposite.

100
00:06:04,735 --> 00:06:06,795
A platform should be an enabler.

101
00:06:07,345 --> 00:06:11,505
A platform should hide the complexity
and should make it easier to use.

102
00:06:12,165 --> 00:06:17,125
And in order to achieve that, you
should have a high level of transparency

103
00:06:17,375 --> 00:06:20,295
and make usage of shared components.

104
00:06:21,145 --> 00:06:23,135
So a platform shouldn't be a black box.

105
00:06:23,515 --> 00:06:27,875
A platform should have a high level
of documentation so that every single

106
00:06:27,875 --> 00:06:31,845
person out there in the different
teams can read that documentation,

107
00:06:31,905 --> 00:06:36,925
understand how the doc, understand how
the components were built and which one

108
00:06:36,925 --> 00:06:39,125
was the intention of the usage of them.

109
00:06:40,005 --> 00:06:45,035
And also you can, make the code of
the platform open source, at least

110
00:06:45,065 --> 00:06:47,025
internally for your different teams.

111
00:06:47,455 --> 00:06:51,925
And with a combination of two, of those
two, those things, you're going to

112
00:06:51,925 --> 00:06:56,825
create a shared responsibility feeling
across the different teams, which at the

113
00:06:56,825 --> 00:06:58,675
end is going to be beneficial for you.

114
00:06:59,715 --> 00:07:00,345
Nevertheless.

115
00:07:00,565 --> 00:07:02,525
you do not want to reinvent the wheel.

116
00:07:02,555 --> 00:07:07,965
So that means you would like to have those
components that you built shared across

117
00:07:07,965 --> 00:07:13,865
the whole platform so that multiple teams
can benefit of those components as well.

118
00:07:15,105 --> 00:07:19,625
Second characteristics, from great
platform is that you would like that

119
00:07:19,635 --> 00:07:22,675
your platform is also extensible.

120
00:07:23,205 --> 00:07:24,865
So that means you do not have to force it.

121
00:07:24,920 --> 00:07:28,060
you should see which are the features
that every single team is going to need

122
00:07:28,160 --> 00:07:34,430
in the future, but at least stay flexible
in such a way that you can learn which

123
00:07:34,430 --> 00:07:39,390
one are the technologies that they
are using, learn about the new tools

124
00:07:39,430 --> 00:07:45,199
that every team might implement or use
from time to time, and also stay alert

125
00:07:45,200 --> 00:07:48,120
about different architectural patterns.

126
00:07:48,420 --> 00:07:51,740
There are trends in the industry
and in the market out there.

127
00:07:52,475 --> 00:07:57,965
So that means you do not want to,
force anyone to use a specific pattern,

128
00:07:58,245 --> 00:08:04,095
tool, technology, integration, but make
and, or build the platform in such a

129
00:08:04,095 --> 00:08:10,315
way that it's attractive for multiple
teams and all the teams actually to

130
00:08:10,315 --> 00:08:13,295
really make usage of your platform.

131
00:08:13,785 --> 00:08:15,084
When that happens.

132
00:08:15,465 --> 00:08:20,055
More and more teams are going
to, use or want to implement

133
00:08:20,195 --> 00:08:21,865
things on top of your platform.

134
00:08:22,255 --> 00:08:26,275
And therefore you would like to be
able to scale that platform as well.

135
00:08:26,875 --> 00:08:31,655
And that would be able just if you have
a high level of automation in place.

136
00:08:31,945 --> 00:08:36,670
So you can use infrastructure as
code, like for example, AWS, CDK.

137
00:08:36,670 --> 00:08:36,790
Thank you.

138
00:08:37,325 --> 00:08:43,495
to just make usage of the possibility
of having a great automation

139
00:08:43,545 --> 00:08:47,595
and keep the pace of new teams
onboarding in your platform.

140
00:08:49,110 --> 00:08:51,950
The third characteristic is
that you would like that your

141
00:08:51,960 --> 00:08:54,230
platform is also evolutionary.

142
00:08:54,330 --> 00:08:59,360
So that means you do not want to
have a platform that is static.

143
00:08:59,420 --> 00:09:03,970
You want something dynamic that keeps
the pace of technology out there.

144
00:09:05,780 --> 00:09:11,010
With the time, you would like that this
platform actually reduces the TCO, so

145
00:09:11,010 --> 00:09:17,735
the total cost of ownership, make it more
efficient, and more, performant as well.

146
00:09:17,735 --> 00:09:22,205
And with the time, it should be
easier and easier to use as well.

147
00:09:22,645 --> 00:09:25,525
How do we achieve this
evolutionary characteristic?

148
00:09:25,735 --> 00:09:28,265
By treating the platform as a product.

149
00:09:28,375 --> 00:09:32,645
So that means having a product mindset.

150
00:09:33,780 --> 00:09:37,320
Nevertheless, something that
experience taught me is that you

151
00:09:37,360 --> 00:09:39,730
can have the best intentions.

152
00:09:39,760 --> 00:09:45,450
You could have the best, specialist
knowledgeable in a specific topic.

153
00:09:45,610 --> 00:09:51,190
But if you do not have mechanisms in
place, there's no way that you can scale

154
00:09:51,250 --> 00:09:56,415
this across your organization and have
the impact that you would like to have.

155
00:09:56,575 --> 00:09:57,255
to have.

156
00:09:57,685 --> 00:10:02,945
Therefore, I brought you four different
characteristics of those mechanisms that

157
00:10:02,965 --> 00:10:09,965
I would invite you to think and consider
when building and designing your platform.

158
00:10:10,395 --> 00:10:14,355
Being the first one about abstractions,
so we want to build a platform

159
00:10:14,355 --> 00:10:15,490
in such a way that it abstracts.

160
00:10:15,700 --> 00:10:21,520
It has the complexity, but it has a
high level of transparency so that

161
00:10:21,550 --> 00:10:26,660
everyone is going to be able to know
how those components were built.

162
00:10:27,880 --> 00:10:31,960
You would like to have some same
defaults, so having the possibility

163
00:10:32,010 --> 00:10:34,960
to set some, values per default.

164
00:10:35,155 --> 00:10:38,065
That helps the teams
to reduce the mistakes.

165
00:10:38,075 --> 00:10:42,415
So reduce the errors, but at the
same time have a high level of

166
00:10:42,415 --> 00:10:47,925
flexibility because you will going
to, give them a set of configurations

167
00:10:48,115 --> 00:10:50,565
that are already properly set it up.

168
00:10:51,360 --> 00:10:54,190
The third abstraction is about automation.

169
00:10:54,210 --> 00:10:59,500
So you would like to keep the pace
of technology, but increase the

170
00:10:59,500 --> 00:11:02,500
speed of every development team.

171
00:11:03,210 --> 00:11:06,640
and at the same time, reduce
the friction of the processes.

172
00:11:06,740 --> 00:11:10,640
And last but not least, those platforms
should actually help you with automation.

173
00:11:10,790 --> 00:11:13,510
Some control security things related.

174
00:11:14,090 --> 00:11:19,700
So we want to help you to, to
enforce compliance measures and

175
00:11:19,720 --> 00:11:23,670
follow any regulation that you have
to take in consideration, related

176
00:11:23,670 --> 00:11:28,490
to the market and the industry that
you are part of while having this

177
00:11:28,710 --> 00:11:32,800
high level of share responsibility
across the whole different teams.

178
00:11:33,920 --> 00:11:39,050
And the question here would be, whom is
this platform actually going to enable?

179
00:11:40,620 --> 00:11:47,080
He said the platforms are very great way
for centralizing expertise, but he also

180
00:11:47,080 --> 00:11:49,160
said you cannot centralize innovation.

181
00:11:49,550 --> 00:11:51,440
You have to leave that to the teams.

182
00:11:51,940 --> 00:11:53,960
that are the closest to the customer.

183
00:11:54,600 --> 00:11:59,790
Because those teams, they obviously
have the best ideas and they will

184
00:11:59,830 --> 00:12:02,310
build innovation on top of a platform.

185
00:12:02,760 --> 00:12:06,200
Let's think about those teams
that are doing the innovation.

186
00:12:07,730 --> 00:12:10,200
How do those innovative
teams actually work?

187
00:12:10,970 --> 00:12:15,230
usually those teams are
small and self sufficient.

188
00:12:15,640 --> 00:12:19,250
So that means they can do most
or maybe all of their work

189
00:12:19,310 --> 00:12:22,870
independently from all the other
teams that are also doing innovation.

190
00:12:23,290 --> 00:12:27,750
And they can make most or all
of their decisions on their own.

191
00:12:29,750 --> 00:12:30,840
Let's think about this.

192
00:12:31,260 --> 00:12:36,590
Autonomies, teams on a
platform, how does that work?

193
00:12:37,180 --> 00:12:42,390
Here we need to talk about the
centralized versus decentralized approach.

194
00:12:43,305 --> 00:12:47,985
Let me start with the maybe more
traditional centralized approach.

195
00:12:50,255 --> 00:12:54,245
We have a platform and that
platform is designed and also

196
00:12:54,305 --> 00:12:55,815
operated by a platform team.

197
00:12:56,225 --> 00:12:59,015
and of course we learned platform
needs to be evolutionary.

198
00:12:59,175 --> 00:13:02,675
so we have to add new features
to our platform all the time.

199
00:13:02,995 --> 00:13:07,305
And in a perfect world, your
platform team would anticipate

200
00:13:07,795 --> 00:13:09,585
every single feature request.

201
00:13:09,955 --> 00:13:11,885
And they would implement all the features.

202
00:13:12,185 --> 00:13:14,745
before someone even
asks about the feature.

203
00:13:15,465 --> 00:13:17,005
But now let's look back to the reality.

204
00:13:17,205 --> 00:13:18,925
So in reality, it's different.

205
00:13:19,125 --> 00:13:22,545
In reality, app teams often request
a new feature, and they want this

206
00:13:22,545 --> 00:13:27,015
feature as soon as possible because
they need it for the innovation.

207
00:13:27,675 --> 00:13:30,735
And then your platform team needs
to understand this new feature.

208
00:13:31,155 --> 00:13:33,945
And then the platform team
needs to build the new feature.

209
00:13:34,795 --> 00:13:40,175
And all of this while operating a
central platform that is growing a lot.

210
00:13:40,545 --> 00:13:44,735
So You're basically moving the
cognitive load from the app

211
00:13:44,735 --> 00:13:47,445
team down to the platform team.

212
00:13:48,075 --> 00:13:51,445
And if you get more and more app
teams doing this, what will happen?

213
00:13:51,665 --> 00:13:55,805
You will overload the platform
team and your platform team

214
00:13:56,375 --> 00:13:57,655
will become your bottleneck.

215
00:13:58,255 --> 00:13:59,725
Because what are we doing here?

216
00:14:00,665 --> 00:14:03,785
We're not only centralizing expertise.

217
00:14:04,575 --> 00:14:07,775
We are also trying to centralize
the platform innovation.

218
00:14:08,670 --> 00:14:12,020
How does it work for a
decentralized platform approach?

219
00:14:12,860 --> 00:14:16,550
in that approach, the platform
team is designing blueprints

220
00:14:17,620 --> 00:14:18,950
as a platform component.

221
00:14:19,330 --> 00:14:23,220
And all the app teams, they can use
these blueprints and they can use

222
00:14:23,220 --> 00:14:25,520
them and create their own versions.

223
00:14:26,195 --> 00:14:26,685
of that.

224
00:14:26,965 --> 00:14:29,895
So we actually put a bit
more responsibility into

225
00:14:29,895 --> 00:14:31,645
the hands of the developers.

226
00:14:31,875 --> 00:14:36,275
So the developers, the app teams,
they own the entire lifecycle of the

227
00:14:36,275 --> 00:14:40,815
application, including all the platform
components that they're using as a base.

228
00:14:41,115 --> 00:14:45,145
And while you could think maybe they
have now the cognitive overload, but

229
00:14:45,145 --> 00:14:50,165
they don't get this cognitive overload
because the platform components, the

230
00:14:50,165 --> 00:14:53,105
blueprints, they are using abstractions.

231
00:14:53,685 --> 00:14:55,215
that are provided by the platform team.

232
00:14:55,395 --> 00:14:59,605
So they basically don't have to reinvent
everything and build it from scratch.

233
00:14:59,655 --> 00:15:02,175
They can build upon those abstractions.

234
00:15:02,595 --> 00:15:05,905
So they don't get this cognitive
overload to understand the full

235
00:15:05,945 --> 00:15:07,705
stack completely from the beginning.

236
00:15:08,045 --> 00:15:11,885
So app teams can operate their
own stack, but they still meet

237
00:15:11,895 --> 00:15:13,455
all the central requirements.

238
00:15:13,745 --> 00:15:17,625
And if required, they can evolve
the stack, maybe on their own or

239
00:15:17,625 --> 00:15:18,975
together with the platform team.

240
00:15:19,365 --> 00:15:20,625
So what are we doing here?

241
00:15:21,575 --> 00:15:25,365
We are centralizing the
expertise into those blueprints.

242
00:15:26,295 --> 00:15:30,575
But then we decentralize the
innovation to the app teams.

243
00:15:31,885 --> 00:15:32,955
Let's think that a bit through.

244
00:15:32,955 --> 00:15:34,415
How would that work in reality?

245
00:15:34,915 --> 00:15:40,125
if we have this shared responsibility
between app teams and platform teams.

246
00:15:41,345 --> 00:15:42,195
Who's doing what?

247
00:15:42,555 --> 00:15:45,485
Who is responsible for
what part of this deck?

248
00:15:46,545 --> 00:15:49,215
Here we need to talk about
ownership patterns and Marina

249
00:15:49,245 --> 00:15:50,405
will discuss a few of them.

250
00:15:52,960 --> 00:15:57,810
So there are different approaches and
I brought you three of the ownership

251
00:15:57,850 --> 00:16:02,720
patterns that I've seen the most
with our AWS customers in the way

252
00:16:02,720 --> 00:16:06,850
they have treated the productive
workloads in their AWS accounts.

253
00:16:07,450 --> 00:16:13,280
By being the first one, Treating the
whole AWS account itself as the platform.

254
00:16:13,890 --> 00:16:18,340
And the way you can imagine this is
like by having an AWS account vending

255
00:16:18,340 --> 00:16:22,500
machine that is going to be owned by
the platform engineering team, that

256
00:16:22,500 --> 00:16:24,800
it's going to provide AWS accounts.

257
00:16:25,115 --> 00:16:31,085
With already some, building blocks and
components defined and deployed in the

258
00:16:31,375 --> 00:16:36,455
AWS account to every single team out
there in your organization that needs

259
00:16:36,455 --> 00:16:40,730
an AWS account in order to run the
resources needed for your business.

260
00:16:41,120 --> 00:16:46,490
The different projects and use
cases, and those components might be

261
00:16:46,490 --> 00:16:51,130
related to networking, observability,
security, or anything out there that

262
00:16:51,150 --> 00:16:54,970
comes to your mind, where the platform
engineering team is going to, for

263
00:16:54,970 --> 00:16:58,525
the networking, for example, design
the whole network, like a network.

264
00:16:58,655 --> 00:17:03,015
how many VPCs is going to, that account
is going to have, how many subnets?

265
00:17:03,025 --> 00:17:07,675
What's, how does the routing table,
for example, look like, and so on.

266
00:17:08,325 --> 00:17:12,425
Related to observability, you might
have already some, I don't know, logs

267
00:17:12,425 --> 00:17:17,415
defines, metrics, some dashboard, all of
the, all of this may be in CloudWatch.

268
00:17:17,865 --> 00:17:22,705
And also specify and already
implement some security mechanisms

269
00:17:22,725 --> 00:17:23,745
in that account as well.

270
00:17:24,380 --> 00:17:28,810
How can this platform engineering
build such a vending machine through,

271
00:17:28,810 --> 00:17:35,710
for example, the usage of AWS,
organizations, AWS config, CloudWatch

272
00:17:35,710 --> 00:17:39,120
and IIM, for example, as well.

273
00:17:40,060 --> 00:17:45,440
The second ownership pattern is
related to managed clusters, where

274
00:17:45,450 --> 00:17:50,660
in the other approach, you had like a
higher level of flexibility, But lower

275
00:17:50,660 --> 00:17:55,160
level of abstraction that might not
really be needed by every single team.

276
00:17:55,320 --> 00:18:01,450
Like for example, a team that runs
some containers, would not really care

277
00:18:01,630 --> 00:18:07,700
about what's the VPC that it's already
there in place in the AWS account,

278
00:18:07,990 --> 00:18:10,750
but instead having a possibility.

279
00:18:10,950 --> 00:18:17,300
to just run their containers in a cluster
that it's already managed by another team.

280
00:18:17,830 --> 00:18:22,440
So that means they still would like
to have those standards components to

281
00:18:22,440 --> 00:18:27,700
networking and observability, but tailored
specifically for a managed cluster.

282
00:18:28,150 --> 00:18:32,485
So for example, They would like to have
some health checks, or maybe have the

283
00:18:32,495 --> 00:18:37,135
possibility to monitor how many containers
are running the, in the whole cluster

284
00:18:37,135 --> 00:18:42,325
itself, or maybe have some possibility
to, manage the users that are going to

285
00:18:42,325 --> 00:18:48,935
have access to the cluster and also some
input and output rules for the whole.

286
00:18:49,220 --> 00:18:51,610
container itself that it's running there.

287
00:18:52,150 --> 00:18:56,820
So this option is going to have
a lower level of flexibility, but

288
00:18:56,820 --> 00:18:58,840
a higher level of abstraction.

289
00:19:00,340 --> 00:19:06,340
And the third ownership pattern is related
to deployable application patterns.

290
00:19:06,970 --> 00:19:15,210
So this is like providing blueprints,
like providing some AWS CDK constructs.

291
00:19:15,700 --> 00:19:16,470
this might.

292
00:19:17,075 --> 00:19:22,215
for you not resonate as a platform and
rather like blueprints and guidelines

293
00:19:22,255 --> 00:19:28,265
on how to deploy things but this is yet
another ownership pattern for a platform

294
00:19:28,295 --> 00:19:34,045
itself and this is pretty much a modern
way also of treating it than I also

295
00:19:34,045 --> 00:19:39,875
seen A lot of times we're actually the
teams that might benefit the most of T

296
00:19:39,915 --> 00:19:44,455
of this are the high performing teams
are the ones that are already used to

297
00:19:44,455 --> 00:19:50,195
work with, for example, AWS accounts and
need some blueprints that helps them to

298
00:19:50,195 --> 00:19:56,575
deploy some applications faster with some
standards that are well defined there

299
00:19:56,575 --> 00:19:59,465
with some architectural patterns as well.

300
00:19:59,985 --> 00:20:04,295
That might help them to reduce
the development time and improve

301
00:20:04,325 --> 00:20:09,155
already, the, the possibility of
building something on top as well.

302
00:20:11,125 --> 00:20:14,905
Having now those three ownership
patterns in mind, I would like to

303
00:20:14,905 --> 00:20:19,945
hand over to Martin, who is going to
actually explain how by having the

304
00:20:19,985 --> 00:20:24,715
possibility and the freedom of different
patterns, you do not have to force.

305
00:20:24,860 --> 00:20:31,510
How can I use any team in order to
implement and make usage of this platform?

306
00:20:33,320 --> 00:20:37,070
you don't have to decide
exclusively what pattern to use.

307
00:20:37,950 --> 00:20:39,800
You get the freedom of choice.

308
00:20:40,850 --> 00:20:42,400
Let me show you how that could work.

309
00:20:42,500 --> 00:20:45,410
Let's imagine we have this
platform team and they're dealing

310
00:20:45,440 --> 00:20:47,170
with, let's say, four teams.

311
00:20:47,970 --> 00:20:49,630
These are decentralized dev teams.

312
00:20:50,765 --> 00:20:53,855
first of all of our teams get
those pre configured accounts

313
00:20:54,165 --> 00:20:55,715
from the account vending machine.

314
00:20:56,335 --> 00:20:59,525
And, team one is perfectly
fine with that account.

315
00:20:59,585 --> 00:21:02,755
So they get this pre configured
account as a base level platform,

316
00:21:02,785 --> 00:21:06,265
and they build everything else on
top of that, completely on their own.

317
00:21:06,995 --> 00:21:08,055
team two is different.

318
00:21:08,655 --> 00:21:10,375
They use those managed clusters.

319
00:21:10,445 --> 00:21:14,875
And on top of that, they also want to
have those deployable patterns, maybe

320
00:21:15,305 --> 00:21:17,305
in a cluster that could be a hand chart.

321
00:21:18,475 --> 00:21:23,645
team three, deploys the application
into a managed cluster, but they

322
00:21:23,645 --> 00:21:26,395
don't need all those patterns on top.

323
00:21:26,415 --> 00:21:28,885
They have their own way of doing things.

324
00:21:29,415 --> 00:21:31,565
And team four, let's say
they're the serverless game.

325
00:21:31,815 --> 00:21:36,275
So they use those templated patterns
for serverless applications in

326
00:21:36,275 --> 00:21:38,425
their pre configured account.

327
00:21:38,985 --> 00:21:41,705
now we have four different
ways of doing things.

328
00:21:43,835 --> 00:21:45,665
Let's reimagine the term platform.

329
00:21:46,535 --> 00:21:48,965
All of this is your platform.

330
00:21:49,375 --> 00:21:54,025
Some parts of your platform are more
central, like the account vending

331
00:21:54,335 --> 00:21:56,015
or maybe the managed cluster.

332
00:21:56,475 --> 00:22:00,475
And some parts are more decentralized,
like all those deployable

333
00:22:00,475 --> 00:22:02,485
application patterns and so on.

334
00:22:02,925 --> 00:22:06,655
And by giving all the teams the
freedom of choice, you don't have to

335
00:22:06,655 --> 00:22:09,525
force a team to follow one approach.

336
00:22:10,325 --> 00:22:13,185
That might work for you, but
that wouldn't work for me.

337
00:22:13,635 --> 00:22:14,135
for them.

338
00:22:14,745 --> 00:22:19,195
So the idea is to make a platform not
too restrictive, but make the platform

339
00:22:19,225 --> 00:22:21,675
open to innovation and to development.

340
00:22:21,975 --> 00:22:26,065
And I can recommend working towards
those decentralized teams with shared

341
00:22:26,065 --> 00:22:28,735
patterns and services as a platform.

342
00:22:29,255 --> 00:22:35,705
And you can see those blueprints that are
shared on your platform as a golden path.

343
00:22:36,635 --> 00:22:39,375
Maybe this concept of a golden
path is very well known.

344
00:22:39,735 --> 00:22:41,555
Maybe also the concept of a paved road.

345
00:22:41,715 --> 00:22:45,005
And let's see, those
blueprints as a golden path.

346
00:22:45,325 --> 00:22:46,325
On a paved road.

347
00:22:46,525 --> 00:22:48,965
While this is the golden path,
there's still a bit of room

348
00:22:49,275 --> 00:22:50,865
to do things differently.

349
00:22:51,185 --> 00:22:52,105
On a paved road.

350
00:22:52,255 --> 00:22:55,665
So that's your opinionated
and supported way.

351
00:22:56,295 --> 00:22:57,595
of using technology.

352
00:22:57,865 --> 00:23:01,725
this is the way to make it for the
teams as easy as possible to use

353
00:23:01,735 --> 00:23:03,895
technology and to use your platform.

354
00:23:04,855 --> 00:23:06,035
But we want to be flexible.

355
00:23:06,255 --> 00:23:10,505
if someone has an alternative idea,
let them go but left or right from

356
00:23:10,505 --> 00:23:14,735
that golden path on that still paved
road still, to a certain degree.

357
00:23:14,775 --> 00:23:17,865
there are still guardrails,
outside of that paved road.

358
00:23:18,265 --> 00:23:19,045
Maybe.

359
00:23:19,735 --> 00:23:25,105
this idea will open another road, maybe
a new shortcut, maybe, this improvement

360
00:23:25,115 --> 00:23:27,515
will even be your new golden path.

361
00:23:27,835 --> 00:23:34,025
So basically treat your platform as
a product, make it similar to your

362
00:23:34,025 --> 00:23:37,735
product development, have a product
mindset when building your platform.

363
00:23:38,735 --> 00:23:39,695
how can you do that?

364
00:23:40,575 --> 00:23:43,455
we can learn from the
development of open source.

365
00:23:44,070 --> 00:23:46,650
products because they
follow the same principles.

366
00:23:46,840 --> 00:23:51,090
So whenever you build something for
your platform, make it versioned.

367
00:23:51,410 --> 00:23:54,820
So a version piece of software that
can be evolved by the user community,

368
00:23:54,820 --> 00:24:00,070
maybe make the platform team as the
main contributor, but allow other

369
00:24:00,070 --> 00:24:03,730
ones to contribute and create their
own version, make it decentralized.

370
00:24:03,740 --> 00:24:08,510
So every component should have
an independent life cycle that

371
00:24:08,510 --> 00:24:11,130
makes the scaling much easier
because you have smaller pieces.

372
00:24:11,465 --> 00:24:16,305
And, it also reduced the blast radius and
dependencies and so on and make it usable.

373
00:24:16,435 --> 00:24:19,915
So if you have this product mindset
that we just discussed, you will

374
00:24:19,975 --> 00:24:24,325
create good accessibility like
good documentation, scaffolding, a

375
00:24:24,325 --> 00:24:27,135
CLI, a UI integration, and so on.

376
00:24:27,375 --> 00:24:28,805
And then make it customizable.

377
00:24:28,825 --> 00:24:30,475
So be open to changes.

378
00:24:30,875 --> 00:24:32,860
Allow someone to
parameterize your product.

379
00:24:33,630 --> 00:24:37,550
your platform components, allow to
choose escape hatches if possible.

380
00:24:37,730 --> 00:24:40,820
Let them fork it, let them
change it if they need.

381
00:24:41,430 --> 00:24:44,220
Don't build a black box,
make it transparent.

382
00:24:45,230 --> 00:24:46,320
Make it a white box.

383
00:24:46,360 --> 00:24:47,740
Don't hide the implementation.

384
00:24:48,175 --> 00:24:52,295
of your platform because people rely
on it and then make it self service.

385
00:24:52,745 --> 00:24:56,085
so everything should be fully
automated as much as possible.

386
00:24:56,395 --> 00:24:59,555
So everything can be requested
and deployed via APIs.

387
00:24:59,895 --> 00:25:04,325
So that is an evolutionary
platform guided by the principles

388
00:25:04,385 --> 00:25:06,665
of open source development.

389
00:25:07,045 --> 00:25:08,505
And one last thing to mention here.

390
00:25:09,650 --> 00:25:12,830
Always stay ahead with your platform.

391
00:25:13,070 --> 00:25:17,950
So we discussed this, a platform
will always build on a certain base,

392
00:25:18,340 --> 00:25:20,100
like the AWS cloud, for instance.

393
00:25:20,740 --> 00:25:23,690
And we also discussed that
your platform should evolve.

394
00:25:24,760 --> 00:25:28,760
But here's one thing to remember,
the base that you built your

395
00:25:28,760 --> 00:25:30,970
platform on does also evolve.

396
00:25:31,520 --> 00:25:35,090
So if you don't evolve your platform,
the things that you're building

397
00:25:35,090 --> 00:25:36,080
on evolve on top of that base.

398
00:25:36,710 --> 00:25:38,460
And you don't adapt it to the base.

399
00:25:39,255 --> 00:25:42,625
you will have a syncing
platform, a platform that

400
00:25:42,625 --> 00:25:44,205
has no true benefits anymore.

401
00:25:44,415 --> 00:25:47,695
Maybe the platform even makes
it more difficult to do things,

402
00:25:48,025 --> 00:25:49,525
compared to the native approach.

403
00:25:49,535 --> 00:25:53,225
So that will be a platform was a
burden and no one wants to use that.

404
00:25:54,005 --> 00:25:57,805
So if you always evolve your platform
and you always adapt it to the base.

405
00:25:58,795 --> 00:26:02,245
You will have something that we would
call a floating platform, a platform

406
00:26:02,245 --> 00:26:03,955
that is always ahead of the base.

407
00:26:04,355 --> 00:26:09,625
And that is a platform that offers true
benefits to all the users of the platform.

408
00:26:09,825 --> 00:26:12,535
So a platform that enables all your teams.

409
00:26:12,705 --> 00:26:17,045
So our recommendation is always
build floating platforms.

410
00:26:19,345 --> 00:26:20,295
What did we learn today?

411
00:26:20,535 --> 00:26:22,705
So standards are not limitations.

412
00:26:23,315 --> 00:26:25,905
Often I would say they
are the key to innovation.

413
00:26:26,215 --> 00:26:28,415
So don't build a platform
for the sake of it.

414
00:26:29,015 --> 00:26:33,395
of having a platform for the sake
of doing platform engineering.

415
00:26:33,665 --> 00:26:36,395
Build a platform that enables your teams.

416
00:26:36,695 --> 00:26:39,585
A platform that is
extensible and evolutionary.

417
00:26:40,075 --> 00:26:45,485
And always think about decentralization of
the platform with centralized blueprints.

418
00:26:45,895 --> 00:26:49,205
And if you do that, make
it as flexible as possible.

419
00:26:49,585 --> 00:26:52,175
Build a golden path, but be flexible.

420
00:26:52,495 --> 00:26:56,040
And always Stay ahead with your platform.

421
00:26:56,730 --> 00:26:58,850
Thanks a lot for listening
to our talk today.

422
00:26:59,090 --> 00:27:00,430
we really value your feedback.

423
00:27:00,730 --> 00:27:02,790
there are two links, how you can reach us.

424
00:27:03,090 --> 00:27:05,420
we're happy to discuss that
concept even further with you.

425
00:27:05,710 --> 00:27:08,540
And if you have some feedback for
us, if you liked what we told you

426
00:27:08,540 --> 00:27:10,560
today, there's a feedback link.

427
00:27:10,830 --> 00:27:12,180
We're happy to hear your feedback.

428
00:27:12,190 --> 00:27:14,500
It only takes 15 seconds
to fill out the survey.

429
00:27:14,850 --> 00:27:16,920
Thank you so much for joining us today.

