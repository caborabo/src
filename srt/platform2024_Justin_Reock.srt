1
00:00:14,190 --> 00:00:14,649
Hello, everyone.

2
00:00:14,650 --> 00:00:18,959
Welcome to Conf42 and this talk about
DevOps 12 factor and platform engineering.

3
00:00:18,959 --> 00:00:21,640
We're going to dig into
the history of DevOps.

4
00:00:21,650 --> 00:00:23,510
We're going to really look
at what I believe its true

5
00:00:23,510 --> 00:00:24,890
origins are and where they lie.

6
00:00:25,220 --> 00:00:28,440
and we are going to talk about
where this practice has evolved to.

7
00:00:28,849 --> 00:00:32,840
Today, this is probably the third
iteration of this talk that I've given.

8
00:00:32,840 --> 00:00:35,239
It used to be called DevOps,
12 factor and open source.

9
00:00:35,580 --> 00:00:38,789
And as the industry has
just adopted new patterns.

10
00:00:39,089 --> 00:00:41,839
around what's mainstream and what's
really helping developers with their

11
00:00:41,839 --> 00:00:43,360
flow and with their productivity.

12
00:00:43,980 --> 00:00:45,640
I've updated this talk, along with it.

13
00:00:45,650 --> 00:00:49,220
So this is where we are now in 2024, where
we're talking about platform engineering.

14
00:00:49,220 --> 00:00:52,209
We're building multi cloud developer
platforms where we create our

15
00:00:52,209 --> 00:00:53,609
code and we're deliver our code.

16
00:00:53,890 --> 00:00:57,239
And we've evolved this practice of
platform engineering, which is really

17
00:00:57,239 --> 00:01:00,724
the the work that it takes to put
together all the various tools and

18
00:01:00,724 --> 00:01:03,854
pieces of the platform, the different
permutations of platforms that we have,

19
00:01:04,224 --> 00:01:06,304
has now evolved into this practice.

20
00:01:06,304 --> 00:01:07,754
And so that's what we're going
to be talking about today.

21
00:01:08,104 --> 00:01:11,244
My name is Justin Riak and I've been
around for a little while at this point,

22
00:01:11,254 --> 00:01:15,204
having had several different roles,
but I really started focusing mostly on

23
00:01:15,204 --> 00:01:16,939
developer productivity over the last.

24
00:01:17,199 --> 00:01:21,329
Five years or so, there's a lot
that's happened in this space around

25
00:01:21,329 --> 00:01:25,029
developer experience and, seeking the
type of better productivity outcomes

26
00:01:25,029 --> 00:01:27,719
that can happen when we invest very
heavily in developer experience.

27
00:01:27,929 --> 00:01:30,379
And so if you've seen any of
my recent work, that's mostly

28
00:01:30,379 --> 00:01:31,609
what I've been focused on.

29
00:01:31,609 --> 00:01:34,869
Now I'm currently the head of dev rel
for Cortex, where we ship an internal

30
00:01:34,999 --> 00:01:38,919
developer portal, that type of pattern,
that internal developer portal pattern,

31
00:01:39,209 --> 00:01:41,429
I truly believe is the most important.

32
00:01:42,184 --> 00:01:47,144
Pattern right now, helping people
move from a orchestration stage of

33
00:01:47,144 --> 00:01:50,244
their platform to a choreography
stage of their platform.

34
00:01:50,244 --> 00:01:52,354
And always happy to talk more about that.

35
00:01:53,284 --> 00:01:55,834
So where did DevOps come from?

36
00:01:55,884 --> 00:01:56,984
Where did it begin?

37
00:01:57,374 --> 00:02:00,084
this is the commonly accepted place,
at least for the words, right?

38
00:02:00,114 --> 00:02:04,634
DevOps days, Belgium, Patrick
Dubois DevOps days, 2009, right?

39
00:02:04,634 --> 00:02:08,524
This is the first time that we've
heard this coin termed, but I think

40
00:02:08,544 --> 00:02:11,244
that DevOps started long before this.

41
00:02:11,929 --> 00:02:15,679
And I think it started with a mindset,
and I think it's this mindset, that it's

42
00:02:15,689 --> 00:02:17,789
no longer the big beating the small.

43
00:02:18,294 --> 00:02:22,854
But the fast beating the slow, okay, this
quote, you've probably seen it or some

44
00:02:22,854 --> 00:02:24,604
version of it associated with DevOps.

45
00:02:24,804 --> 00:02:27,914
This has become I think the rallying
cry for DevOps, but it really, this

46
00:02:27,914 --> 00:02:31,094
is talking about throughput and this
is talking about agility, right?

47
00:02:31,094 --> 00:02:34,494
This is talking about, it's
no longer the big, monolithic

48
00:02:34,494 --> 00:02:37,274
organizations that are gobbling
up all of the market share, right?

49
00:02:37,274 --> 00:02:41,114
The small, fast, disruptive startups are
the ones that kind of come out of nowhere.

50
00:02:41,170 --> 00:02:46,799
And this mindset started long
before that quote, right?

51
00:02:46,799 --> 00:02:49,699
When it's something that I like to
refer to as the ancient business wisdom

52
00:02:49,979 --> 00:02:54,799
of, in this case, the 1970s and 80s,
more specifically the work of Dr.

53
00:02:54,809 --> 00:02:57,799
Ellie Goldrott and the
theory of constraints.

54
00:02:57,989 --> 00:03:02,034
Now, I know that we can come back
even further and talk about The

55
00:03:02,034 --> 00:03:04,974
work that was being done with
statistical process control, W.

56
00:03:04,974 --> 00:03:09,344
Edwards Deming, if you've read Beyond
the Goal, was a huge influence to

57
00:03:09,344 --> 00:03:14,404
GoldRot's work, and you absolutely
will find Deming's work all over what

58
00:03:14,404 --> 00:03:17,724
we're doing right now with platform and
DevOps and even artificial intelligence.

59
00:03:18,004 --> 00:03:21,584
but this talk is going to focus mostly
on theory of constraints and why.

60
00:03:21,944 --> 00:03:24,554
It's important to DevOps and
how it's shaped a lot of the,

61
00:03:24,554 --> 00:03:25,794
the underlying themes of DevOps.

62
00:03:25,804 --> 00:03:27,584
So if you're not familiar with Dr.

63
00:03:27,624 --> 00:03:29,734
Goldrod or the book, the goal, Dr.

64
00:03:29,734 --> 00:03:33,204
Goldrod was a physicist turned,
business analyst, so to speak.

65
00:03:33,204 --> 00:03:37,784
and he realized his big intellectual leap
that was such a bit of genius was that

66
00:03:37,784 --> 00:03:42,124
you could apply the rules of physics,
as they work within complex machinery.

67
00:03:42,649 --> 00:03:43,679
to business, right?

68
00:03:43,679 --> 00:03:47,299
You could take the same terminology and
the same basics, physics, principles,

69
00:03:47,499 --> 00:03:50,229
and you could turn around and map
that to the way that an organization.

70
00:03:50,389 --> 00:03:52,759
And in this case, a
production and manufacturing

71
00:03:52,759 --> 00:03:55,079
organization can work and flow.

72
00:03:55,449 --> 00:03:58,869
Now this book, the goal is
not some business textbook.

73
00:03:58,899 --> 00:03:59,179
Okay.

74
00:03:59,179 --> 00:04:00,489
I think that's part of its appeal.

75
00:04:00,589 --> 00:04:01,849
It is a fictional account.

76
00:04:02,279 --> 00:04:05,519
of a VP manufacturing who's
struggling within their company

77
00:04:05,519 --> 00:04:07,089
to keep pace with competition.

78
00:04:07,369 --> 00:04:10,269
a change agent is introduced to
the business, somebody with a

79
00:04:10,269 --> 00:04:12,439
theory with an understanding of
the theory of constraints, and they

80
00:04:12,439 --> 00:04:14,099
use that to transform the business.

81
00:04:14,299 --> 00:04:17,139
now, if you're not familiar with
the goal, you're probably familiar

82
00:04:17,139 --> 00:04:20,189
with the Phoenix project at this
point, at least in these crowds.

83
00:04:20,889 --> 00:04:23,849
And you should know that Gene
Kim will be the first to tell you

84
00:04:23,889 --> 00:04:27,649
that the Phoenix project is just
a retelling of the goal, right?

85
00:04:27,679 --> 00:04:29,529
Except now through the eyes of DevOps.

86
00:04:29,549 --> 00:04:32,999
But it's talking about, it's teaching the
theory of constraints, the same theory of

87
00:04:32,999 --> 00:04:34,389
constraints that was taught in the goal.

88
00:04:34,889 --> 00:04:36,959
Format wise, it's also
very similar, right?

89
00:04:36,979 --> 00:04:39,899
This book, again, is
not a business textbook.

90
00:04:39,979 --> 00:04:44,359
It is a page turning business
fiction, not, fiction novel about,

91
00:04:44,359 --> 00:04:45,999
in this case, a VP of engineering.

92
00:04:46,379 --> 00:04:51,789
moving through a major migration,
and struggling, a change agent comes

93
00:04:51,789 --> 00:04:55,029
in and introduces DevOps principles
and saves the business, right?

94
00:04:55,029 --> 00:04:57,479
So another great way to learn
about the theory of constraints.

95
00:04:58,209 --> 00:05:02,729
Okay, what is the theory of constraints
and how does it relate to DevOps?

96
00:05:02,759 --> 00:05:06,329
How did it start helping us with
this, fast beating the slow?

97
00:05:06,799 --> 00:05:07,539
Mindset.

98
00:05:08,239 --> 00:05:10,079
there's a lot to the
theory of constraints.

99
00:05:10,349 --> 00:05:10,669
Okay.

100
00:05:10,669 --> 00:05:15,369
And essentially, it's a theory that
says that a system will never be able

101
00:05:15,369 --> 00:05:18,789
to perform better than its constraints.

102
00:05:18,939 --> 00:05:20,649
And sometimes we can
use those constraints.

103
00:05:20,659 --> 00:05:23,699
Sometimes we can put constraints
in a system to try to achieve

104
00:05:23,709 --> 00:05:25,609
better flow within that system.

105
00:05:25,999 --> 00:05:31,729
Where it relates, I think most
directly to DevOps is in, defining

106
00:05:31,779 --> 00:05:34,769
any complex machine, according
to three different basic.

107
00:05:35,114 --> 00:05:36,614
bits of its anatomy, right?

108
00:05:36,634 --> 00:05:38,034
The cost, right?

109
00:05:38,064 --> 00:05:42,954
The energy associated with making this
machine do what it's supposed to do.

110
00:05:43,364 --> 00:05:44,574
the throughput, right?

111
00:05:44,574 --> 00:05:47,954
that machine actually doing its job,
doing what the machine is supposed to do.

112
00:05:48,414 --> 00:05:49,374
And then the inventory, right?

113
00:05:49,374 --> 00:05:53,174
The raw materials, the pieces, the
individual parts that work together at a

114
00:05:53,174 --> 00:05:56,184
cost to create throughput for the machine.

115
00:05:56,304 --> 00:05:56,574
All right.

116
00:05:56,574 --> 00:05:59,684
So theory of constraints defines
machinery according to these

117
00:05:59,684 --> 00:06:01,134
three types of inventory.

118
00:06:01,439 --> 00:06:04,679
Cost, throughput, excuse me,
these types of anatomy, cost,

119
00:06:04,679 --> 00:06:06,209
throughput, and inventory.

120
00:06:07,319 --> 00:06:12,059
All right, now, if we take a
quick intellectual leap, what

121
00:06:12,069 --> 00:06:15,969
did these components map to
in a software organization?

122
00:06:16,639 --> 00:06:19,159
All right, in a software organization,
cost is still cost, right?

123
00:06:19,159 --> 00:06:21,669
This is FTE, the full
time engineering hours.

124
00:06:21,879 --> 00:06:24,199
This is hands on keyboard writing code.

125
00:06:24,469 --> 00:06:28,439
this is the cost, the personnel costs,
the tool cost of actually creating it.

126
00:06:29,019 --> 00:06:30,359
Inventory is the code itself.

127
00:06:31,574 --> 00:06:36,204
That's the raw materials that we're hoping
to manufacture into something that will

128
00:06:37,234 --> 00:06:39,254
hopefully be lucrative for our business.

129
00:06:40,174 --> 00:06:45,364
Now the throughput of any business, and
a software business certainly, is money.

130
00:06:46,194 --> 00:06:49,374
Because what is the job of
the machinery of a business?

131
00:06:50,244 --> 00:06:51,224
It's to make money.

132
00:06:52,634 --> 00:06:56,164
So when we are talking about these three
parts of the Theory of Constraints,

133
00:06:56,554 --> 00:06:59,854
In terms of a software engineering
business, cost is still cost.

134
00:07:00,354 --> 00:07:04,064
Inventory is code and throughput is money.

135
00:07:05,359 --> 00:07:05,889
Okay.

136
00:07:06,359 --> 00:07:10,409
Now, the big mind shift that happens
in the goal and then the theory of

137
00:07:10,409 --> 00:07:16,839
constraints is that Western businesses
tend to prioritize costs as the most

138
00:07:16,839 --> 00:07:19,379
important part of this machinery.

139
00:07:19,669 --> 00:07:23,479
And that's why you see short
term solutions like layoffs

140
00:07:23,479 --> 00:07:24,839
and things like that happening.

141
00:07:25,369 --> 00:07:30,079
But if you look at the long term
success of a lot of those, initiatives

142
00:07:30,079 --> 00:07:34,139
like layoffs, for instance, and other
types of cost cutting initiatives, They

143
00:07:34,139 --> 00:07:39,479
are almost universally unsuccessful
in the longterm, unless there's a

144
00:07:39,479 --> 00:07:46,179
complimentary plan to either maintain
or improve throughput in order.

145
00:07:46,189 --> 00:07:49,539
In other words, the business's ability to
keep creating its product and doing what

146
00:07:49,539 --> 00:07:51,679
it does and continuing to be lucrative.

147
00:07:52,709 --> 00:07:55,469
You have to prioritize that, right?

148
00:07:55,519 --> 00:07:57,679
a layoff is generally just a bandaid.

149
00:07:57,679 --> 00:07:59,639
And if we look beneath the
surface, it can actually be very

150
00:07:59,639 --> 00:08:00,969
detrimental to, to throughput.

151
00:08:01,444 --> 00:08:05,084
When we have things like brain drain
in the organization, we have to later

152
00:08:05,084 --> 00:08:07,894
hire new people when we realized we
laid off too many, has been happening

153
00:08:07,894 --> 00:08:12,024
over the last year or so in our
industry because of AI and over

154
00:08:12,024 --> 00:08:14,094
indexing on things like that, right?

155
00:08:14,134 --> 00:08:17,764
So we actually hurt our throughput with
some of these cost cutting initiatives.

156
00:08:18,234 --> 00:08:20,764
The important part of the theory
of constraints is that throughput

157
00:08:20,764 --> 00:08:22,184
is the most important part.

158
00:08:22,334 --> 00:08:25,534
The machine must keep doing
its job better and better.

159
00:08:26,234 --> 00:08:28,644
Now, how does that translate to
the way that we deliver software?

160
00:08:28,964 --> 00:08:30,364
All right, if the inventory's code.

161
00:08:31,119 --> 00:08:34,969
And the cost is that developer
engineer actually writing code,

162
00:08:34,999 --> 00:08:36,159
putting that code together.

163
00:08:36,889 --> 00:08:40,839
then the throughput is the distance
between the time that the developer

164
00:08:40,839 --> 00:08:44,999
is creating that code and the time
that code is no longer work in

165
00:08:44,999 --> 00:08:49,109
progress and is out in the market,
making money for that business.

166
00:08:49,539 --> 00:08:53,929
Anything in the middle, any time
that cost is still being expended to

167
00:08:53,929 --> 00:08:59,099
work on assembling inventory and that
inventory has not yet been released.

168
00:09:00,039 --> 00:09:00,939
That is all waste.

169
00:09:00,949 --> 00:09:01,849
That's all friction.

170
00:09:02,579 --> 00:09:05,809
And there's so many things that
can go wrong before we actually

171
00:09:05,809 --> 00:09:07,269
release that code to production.

172
00:09:07,269 --> 00:09:09,679
So are we starting to pick
up on something here, right?

173
00:09:09,719 --> 00:09:16,709
A huge part of DevOps has been reducing
the distance between hands on keyboard

174
00:09:16,729 --> 00:09:20,309
and creating the product and getting
that product actually out to market

175
00:09:20,309 --> 00:09:22,449
and making money for the business.

176
00:09:22,449 --> 00:09:24,489
I come from a time, a lot
of us come from a time.

177
00:09:24,994 --> 00:09:28,684
When you would write your code,
you create a jar file or whatever.

178
00:09:28,904 --> 00:09:31,144
You literally copy it onto a disc.

179
00:09:31,589 --> 00:09:34,439
You walk it to another
part of the organization.

180
00:09:34,449 --> 00:09:37,739
They pull that down to some testing
system and they pull it into some,

181
00:09:37,739 --> 00:09:40,819
which probably doesn't match the system
that you were developing in any way.

182
00:09:41,139 --> 00:09:44,159
and when they release that, there's really
not a guarantee that it's going to work

183
00:09:44,159 --> 00:09:46,949
the same way in production, because back
then the production systems didn't really,

184
00:09:47,339 --> 00:09:49,909
there's not a lot of guarantee that they
match the systems that we were testing,

185
00:09:49,909 --> 00:09:51,259
the conditions were the same, right?

186
00:09:51,309 --> 00:09:54,889
So we were talking weeks, between
being able to actually create

187
00:09:54,889 --> 00:09:57,839
this code and being able to
release that code out to market.

188
00:09:58,359 --> 00:09:58,559
Okay.

189
00:09:58,559 --> 00:10:03,059
So this right here, prioritization of
throughput and reducing the distance

190
00:10:03,079 --> 00:10:06,889
between the creation of code from
inventory and costs to actually creating

191
00:10:06,899 --> 00:10:08,259
throughput for the business and money.

192
00:10:08,559 --> 00:10:10,179
This is what we must prioritize.

193
00:10:10,219 --> 00:10:11,629
This is what we're trying to optimize.

194
00:10:12,579 --> 00:10:17,109
And that's very much what DevOps tells us
this, that the only initiatives that will

195
00:10:17,119 --> 00:10:21,309
positively impact long term performance
are the ones that will increase throughput

196
00:10:21,579 --> 00:10:27,099
while simultaneously decreasing cost,
everything else is not going to have

197
00:10:27,099 --> 00:10:28,549
the long term effect that you want.

198
00:10:29,164 --> 00:10:31,514
unless you think you can
break the laws of physics.

199
00:10:33,634 --> 00:10:36,634
This is also where continuous
improvement comes in.

200
00:10:37,174 --> 00:10:37,604
Okay.

201
00:10:37,954 --> 00:10:42,744
we're also dealing with this inventory
that's sitting there, in between the time

202
00:10:42,744 --> 00:10:45,624
that it's created and that it's released
out to production and making money for

203
00:10:45,624 --> 00:10:48,794
the business is susceptible to entropy.

204
00:10:49,194 --> 00:10:53,104
Second law of thermodynamics
and rot, right?

205
00:10:53,104 --> 00:10:55,474
We see this in different forms
with code, code rot, like we've

206
00:10:55,474 --> 00:10:57,644
heard that term before, but that
can mean different things, right?

207
00:10:57,644 --> 00:11:00,604
That can mean like a dependency,
going out of date or some

208
00:11:00,604 --> 00:11:02,334
vulnerability, being released.

209
00:11:02,334 --> 00:11:04,634
And now we have to stop what we
were doing, working on this one

210
00:11:04,634 --> 00:11:07,014
part of the code and make sure that
we remediate this vulnerability.

211
00:11:07,224 --> 00:11:10,054
And if any of this happens while
this code is work in progress

212
00:11:10,054 --> 00:11:13,094
and in flight, this can increase
greatly, increase the distance.

213
00:11:13,419 --> 00:11:16,149
Between the time that we are
actually releasing the time

214
00:11:16,149 --> 00:11:16,939
that we're writing code.

215
00:11:17,359 --> 00:11:20,269
so this is where this notion of
continuous improvement also comes in.

216
00:11:20,269 --> 00:11:22,229
it's battling entropy, right?

217
00:11:22,229 --> 00:11:26,309
Sort of battling this ever present
sort of force that adds all this

218
00:11:26,419 --> 00:11:30,379
variability to our work in progress
because nothing ever really sits still.

219
00:11:30,719 --> 00:11:32,499
So as long as we're continually improving.

220
00:11:33,074 --> 00:11:35,334
Something we're fine.

221
00:11:35,384 --> 00:11:36,914
we're effectively outrunning entropy.

222
00:11:36,914 --> 00:11:40,444
And that's where this, notion of
continuous improvement and moreover,

223
00:11:40,444 --> 00:11:43,384
that it doesn't really matter what
you're improving as long as you're

224
00:11:43,384 --> 00:11:46,954
improving something, because then
you're, you are using feedback to outrun.

225
00:11:48,074 --> 00:11:51,434
Now, this is where this came from
the DevOps conveyor belt, right?

226
00:11:51,444 --> 00:11:54,874
The, all this theory around, all
right, how do we shorten this distance

227
00:11:54,874 --> 00:11:57,424
between hands on keyboard to actually
creating money for the business?

228
00:11:57,474 --> 00:11:59,904
and how do we make sure that we're
prioritizing throughput, right?

229
00:11:59,954 --> 00:12:02,724
this looks very much like the DevOps
conveyor belt at this point, right?

230
00:12:02,724 --> 00:12:03,764
Always move forward.

231
00:12:03,774 --> 00:12:07,114
Even if we break something, just release
a fix right afterwards, make sure that

232
00:12:07,114 --> 00:12:09,124
our deployment frequency can be high.

233
00:12:10,024 --> 00:12:12,174
that's our deployment
frequency Dora metric, right?

234
00:12:12,224 --> 00:12:15,094
how often are we actually
able to get our code, out?

235
00:12:15,944 --> 00:12:18,234
And so we have this wonderful conveyor
belt with all these different, this is

236
00:12:18,234 --> 00:12:21,994
just one small, permutation and set of
technologies that might be representative

237
00:12:21,994 --> 00:12:23,814
of a typical DevOps pipeline.

238
00:12:24,394 --> 00:12:28,164
But this is where we, this
is why we got here, right?

239
00:12:28,164 --> 00:12:31,024
Was because of prioritization of
throughput, because we needed to

240
00:12:31,034 --> 00:12:34,184
build systems that could create
cultures of continuous improvement.

241
00:12:34,529 --> 00:12:37,969
And could create high velocity,
constantly releasing types of systems.

242
00:12:38,899 --> 00:12:39,409
Okay.

243
00:12:39,839 --> 00:12:46,379
So why did free software become so much of
what's underpinning these platforms today?

244
00:12:46,379 --> 00:12:50,869
Why is it, why is open source like
so essential, to being able to

245
00:12:50,869 --> 00:12:52,249
build these types of platforms?

246
00:12:52,769 --> 00:12:57,169
I really think about it in terms of the
friction created when we do something

247
00:12:57,489 --> 00:13:03,269
without transparency and without
ubiquitous accessibility to our work.

248
00:13:04,554 --> 00:13:07,974
And when we do something with that level
of transparency and when we make our work

249
00:13:07,974 --> 00:13:12,664
available to as many people as possible, I
love to use, the story of Pythagoras here

250
00:13:12,714 --> 00:13:14,494
to tell, I think, the cautionary tale.

251
00:13:14,504 --> 00:13:17,344
I think, most of us are familiar with
Pythagoras, or at least the Pythagorean

252
00:13:17,344 --> 00:13:20,724
theorem, a squared plus b squared
equals c squared, way to calculate

253
00:13:20,724 --> 00:13:22,574
the hypotenuse of a right triangle.

254
00:13:23,254 --> 00:13:28,265
But of course, Pythagoras, made, All,
so many, not all, but so many of the

255
00:13:28,265 --> 00:13:31,235
contributions to modern geometry.

256
00:13:31,495 --> 00:13:36,495
And more importantly, at the time when
he was teaching geometry and around 700

257
00:13:36,495 --> 00:13:40,825
BC in the city of Crotone, which is in
modern day, Southern, Southern Italy,

258
00:13:41,755 --> 00:13:46,985
Pythagoras ran a school of geometry and
there were two, a circles of the school.

259
00:13:46,985 --> 00:13:52,035
There was the inner circle called
the, Mathematiquae or the learners.

260
00:13:52,540 --> 00:13:54,050
And this was like the
inner circle of the school.

261
00:13:54,050 --> 00:13:56,050
And these were the only folks
that were really allowed to learn

262
00:13:56,360 --> 00:13:58,050
geometry and practice geometry.

263
00:13:58,370 --> 00:14:00,840
Then you had the outer circle of
the school called the acoustematics

264
00:14:00,840 --> 00:14:02,050
or the listeners, right?

265
00:14:02,050 --> 00:14:02,840
And they were not allowed.

266
00:14:02,890 --> 00:14:06,130
they were actually more sort of Aaron
running errands and stuff like that

267
00:14:06,130 --> 00:14:07,400
and chores and stuff for the school.

268
00:14:07,400 --> 00:14:08,800
They were really more like staff.

269
00:14:09,170 --> 00:14:11,110
And then you had everybody else
who was not even allowed into

270
00:14:11,110 --> 00:14:12,410
the school of geometry at all.

271
00:14:12,910 --> 00:14:17,290
Now, geometry at the time, 700 ish BC.

272
00:14:17,290 --> 00:14:17,310
Yeah.

273
00:14:17,570 --> 00:14:23,410
In Crotone, this was the force
that was responsible for civic

274
00:14:23,410 --> 00:14:29,030
infrastructure, running water, housing,
shelter, all the things that you

275
00:14:29,030 --> 00:14:32,450
needed to build a modern city, right?

276
00:14:32,480 --> 00:14:37,440
All that infrastructure, was, you
needed geometry to make this work.

277
00:14:37,720 --> 00:14:41,600
And this sort of esoteric math
and language was being taught by

278
00:14:41,630 --> 00:14:43,430
Pythagoras in this very secretive way.

279
00:14:44,885 --> 00:14:45,055
All right.

280
00:14:45,055 --> 00:14:47,745
And made a lot of people very unhappy,
which we'll get to in a moment.

281
00:14:48,405 --> 00:14:53,095
Meanwhile, you look at somebody like Sir
Isaac Newton, who took what he learned and

282
00:14:53,095 --> 00:15:00,195
published it, in what was possibly one of
the first engineering public domain works.

283
00:15:00,265 --> 00:15:02,985
I like to think of this as one of
the first examples of something that

284
00:15:02,985 --> 00:15:04,395
would be considered open source.

285
00:15:04,605 --> 00:15:08,095
This was the publication
of Principia Mathematica.

286
00:15:08,475 --> 00:15:13,355
This was Isaac Newton's, learnings and
math that he made available for to other

287
00:15:13,365 --> 00:15:17,845
practitioners, to other people who wanted
to be able to take these principles and

288
00:15:17,845 --> 00:15:20,445
apply them to their own work, right?

289
00:15:20,455 --> 00:15:23,955
this is a much better type of
spirit, but it's also a much more

290
00:15:23,955 --> 00:15:26,495
frictionless type of spirit, right?

291
00:15:26,695 --> 00:15:29,965
This allows much more
accessibility to the knowledge.

292
00:15:30,445 --> 00:15:34,255
And allows people to be more
free in the way that they create

293
00:15:34,255 --> 00:15:35,385
whatever it is that they're doing.

294
00:15:36,105 --> 00:15:39,745
Another great example of these open
societies, the Florentine Bodega,

295
00:15:40,045 --> 00:15:44,045
where sculptors and painters and
artists and craftspeople would all

296
00:15:44,225 --> 00:15:47,945
meet together to discuss what was
going on and to learn from one another.

297
00:15:48,385 --> 00:15:52,605
Leonardo da Vinci was discovered
in one of these bodegas.

298
00:15:53,205 --> 00:15:56,165
A more modern example
could be a Parisian salon.

299
00:15:56,460 --> 00:16:00,520
again, an open forum where, different
people from society could talk

300
00:16:00,530 --> 00:16:03,440
about the issues of the day in
an open and transparent manner.

301
00:16:04,460 --> 00:16:10,260
These types of gatherings, and this way
of doing things in a more transparent

302
00:16:10,320 --> 00:16:17,050
parent manner, this is why open source
makes so much more sense for building

303
00:16:17,060 --> 00:16:21,540
large, scaled, cloud platforms and
the things that we build with it now.

304
00:16:21,540 --> 00:16:25,330
Could you imagine, If something
like the TCP protocol, for

305
00:16:25,330 --> 00:16:28,760
instance, were closed, right?

306
00:16:28,770 --> 00:16:31,730
if what you had to run underneath
your cloud infrastructure and

307
00:16:31,730 --> 00:16:36,190
networking were a closed protocol
that you had to somehow light, I

308
00:16:36,270 --> 00:16:38,460
think nothing that we have would work.

309
00:16:39,620 --> 00:16:42,290
Look at the Linux operating
system, the proliferation of the

310
00:16:42,290 --> 00:16:43,765
Linux server operating system.

311
00:16:44,105 --> 00:16:48,305
How much further, it's been able to
bring, DevOps, how much we've been

312
00:16:48,305 --> 00:16:52,665
able to do, from an operating system
perspective, at every level of scale.

313
00:16:53,825 --> 00:16:57,355
certainly there are some closed and
proprietary licenses for Linux, but

314
00:16:57,355 --> 00:16:58,965
overall this is open source, right?

315
00:16:59,615 --> 00:17:02,355
things did not end well
for Pythagoras, right?

316
00:17:02,355 --> 00:17:02,545
Yeah.

317
00:17:02,545 --> 00:17:05,315
There was a nobleman at the
time who felt that he should be

318
00:17:05,615 --> 00:17:08,295
included in the Pythagorean school,
that he should learn geometry.

319
00:17:08,295 --> 00:17:09,565
His name was Cylon, actually.

320
00:17:09,855 --> 00:17:15,855
and Cylon would run Pythagoras out of
town, murder tons of his own students, and

321
00:17:15,855 --> 00:17:17,625
ultimately Pythagoras would die in exile.

322
00:17:18,215 --> 00:17:23,245
And we don't really have full
attribution for all of Pythagoras work.

323
00:17:23,555 --> 00:17:26,305
It's actually very hard for us
to know how much of this work was

324
00:17:26,305 --> 00:17:30,695
created by him, other mathematicians,
because, again, all of this was done

325
00:17:30,695 --> 00:17:32,605
without any type of transparency.

326
00:17:32,655 --> 00:17:37,955
Open source was essential to taking these
principles of frictionless development

327
00:17:37,965 --> 00:17:42,525
and deployment that would build what
we think of now as modern DevOps and

328
00:17:42,525 --> 00:17:47,875
platform engineering in removing access
to this, in, in, in removing, barriers

329
00:17:47,875 --> 00:17:49,575
to accessibility to the software.

330
00:17:49,875 --> 00:17:53,045
And making sure that we could build
these systems in a very frictionless.

331
00:17:54,505 --> 00:17:59,785
And so now we have this, terrifying,
post Cambrian explosion of all of these

332
00:17:59,815 --> 00:18:04,595
other types of solutions that come
together to build a modern cloud platform.

333
00:18:04,605 --> 00:18:07,695
We have all of these different
solutions for database and streaming

334
00:18:07,695 --> 00:18:11,245
and messaging and application definition
and API gateways and service proxies

335
00:18:11,245 --> 00:18:12,225
for all of these different pieces.

336
00:18:12,225 --> 00:18:15,995
And some permutation now of
these different pieces of many

337
00:18:15,995 --> 00:18:17,155
times open source software.

338
00:18:17,525 --> 00:18:20,175
is what we now refer to as our platform.

339
00:18:21,735 --> 00:18:26,425
Now, to take advantage of this, to
take advantage of this new way of

340
00:18:26,425 --> 00:18:30,845
deployment, this more ubiquitous and
portable means of deployment, we have

341
00:18:30,855 --> 00:18:33,775
to start thinking differently about
the way that we write our software.

342
00:18:34,635 --> 00:18:40,075
We actually have to code differently if we
want to take full advantage of this more

343
00:18:40,075 --> 00:18:41,865
portable means of deploying our software.

344
00:18:42,315 --> 00:18:45,485
The good news is there's a wonderful
framework that's already available

345
00:18:45,485 --> 00:18:46,965
for this called the 12 factors.

346
00:18:46,965 --> 00:18:51,105
It was put together by folks
from Haruku and other very well

347
00:18:51,105 --> 00:18:53,625
known people in the industry.

348
00:18:54,415 --> 00:19:00,585
And it's a very easy to understand
framework for reducing the amount of

349
00:19:00,585 --> 00:19:03,045
friction in your cloud deployments.

350
00:19:03,045 --> 00:19:03,105
Thanks.

351
00:19:03,470 --> 00:19:07,710
Now, I won't make the claim that like
every successful cloud deployment has

352
00:19:07,710 --> 00:19:12,600
to be fully 12 factor that is not true,
but there is an indirect relationship

353
00:19:13,040 --> 00:19:17,410
between the amount of friction that you
will experience in doing your deployment

354
00:19:17,460 --> 00:19:20,120
and in operating and maintaining
your code in these environments

355
00:19:20,660 --> 00:19:23,920
and how 12 factory your app is.

356
00:19:23,930 --> 00:19:28,360
In other words, the less 12 factor it
is, the more friction, the more tech

357
00:19:28,360 --> 00:19:30,540
debt, the more toil you should expect.

358
00:19:31,080 --> 00:19:32,940
When you're pushing this
app into production.

359
00:19:32,940 --> 00:19:36,360
So of course it does behoove you to
get as far as you can, with these.

360
00:19:37,130 --> 00:19:37,800
So what are they?

361
00:19:38,180 --> 00:19:44,430
we go across different, characteristics
of the code itself, but in every, in

362
00:19:44,430 --> 00:19:49,610
every factor, the important thing to
remember is really the goal of it, and

363
00:19:49,610 --> 00:19:55,450
that is to keep the code portable and
accessible and visible, no matter what

364
00:19:55,450 --> 00:19:59,110
type of platform it's running in and
no matter what cloud it's running on.

365
00:19:59,610 --> 00:20:01,860
All right, so these are things
like, for instance, tracking all

366
00:20:01,860 --> 00:20:06,090
of our code in one single revision
control, doing many deploys out of

367
00:20:06,090 --> 00:20:08,410
that one single code base, right?

368
00:20:08,440 --> 00:20:13,120
As opposed to, that way, that one
code base can very easily become a

369
00:20:13,120 --> 00:20:17,960
trigger to launch a CI job or a full
deployment pipeline if we need to.

370
00:20:18,990 --> 00:20:22,460
And any changes, can be triggered
off of that single code base as well.

371
00:20:22,700 --> 00:20:23,000
All right.

372
00:20:23,050 --> 00:20:26,340
dependencies explicitly declare
and isolate dependencies.

373
00:20:26,350 --> 00:20:30,560
This is where, the shift in not
including dependencies as part of

374
00:20:30,560 --> 00:20:33,440
our build has happened over the
last really couple of decades.

375
00:20:33,790 --> 00:20:38,510
this is where we've got better ways now,
things like package Jason, in NPM, for

376
00:20:38,510 --> 00:20:42,280
instance, that allow us to have these
really powerful and semantic versioning

377
00:20:42,280 --> 00:20:44,600
controlled ways of declaring dependencies.

378
00:20:44,905 --> 00:20:48,195
and that they're explicitly declared
and that they are isolated so

379
00:20:48,195 --> 00:20:50,985
that no matter what, that part
of the supply chain can always be

380
00:20:50,985 --> 00:20:52,825
rebuilt for the app in any cloud.

381
00:20:53,475 --> 00:20:55,875
We want to store config
in the environment, right?

382
00:20:55,875 --> 00:20:59,885
And more specifically, as we, as
you've seen, we've moved back to

383
00:20:59,885 --> 00:21:01,325
the old environment variables.

384
00:21:01,325 --> 00:21:05,525
And the reason for that is because
they're so Ubiquitous in every

385
00:21:05,525 --> 00:21:07,695
sort of POSIX, operating system.

386
00:21:07,695 --> 00:21:08,895
We have a concept of them.

387
00:21:08,895 --> 00:21:12,235
So again, multi cloud, multi
platform, multi operating system.

388
00:21:12,235 --> 00:21:15,375
We can use environment variables and
they're super easy to manipulate.

389
00:21:15,805 --> 00:21:17,845
from outside of the platform.

390
00:21:17,845 --> 00:21:23,085
So now that all of our code these
days is buried in, some cloud image

391
00:21:23,095 --> 00:21:27,785
with some Kubernetes node deployed
on it was some Kubernetes job running

392
00:21:27,785 --> 00:21:30,815
inside of it, like how many layers
of abstraction between us and the app

393
00:21:30,815 --> 00:21:35,355
now to make all of this multi cloud
stuff possible, it's easy to manipulate

394
00:21:35,435 --> 00:21:40,075
those environment variables from some
outsider at administrating system, right?

395
00:21:40,095 --> 00:21:41,435
Within the operating system.

396
00:21:41,685 --> 00:21:42,495
And it's ubiquitous.

397
00:21:43,190 --> 00:21:45,690
Treat backing services as
attached resources, right?

398
00:21:45,690 --> 00:21:50,260
Any type of database, media source,
anything like that should be

399
00:21:50,260 --> 00:21:51,650
considered an attached resource.

400
00:21:51,650 --> 00:21:53,430
And we, this is not a brand new pattern.

401
00:21:53,430 --> 00:21:56,770
Like this is more like enforcing
patterns, like for instance, J and D I.

402
00:21:57,030 --> 00:22:01,050
or other patterns that would create
abstraction between resources that

403
00:22:01,050 --> 00:22:02,540
are needed by the application.

404
00:22:02,790 --> 00:22:04,660
and, and the application itself, right?

405
00:22:04,660 --> 00:22:08,260
How can we, decouple those things,
but also make it very easy for the

406
00:22:08,270 --> 00:22:10,950
app to have access to those back
backing services when it needs to.

407
00:22:11,630 --> 00:22:13,240
Separating our build and run stages.

408
00:22:14,560 --> 00:22:17,140
Okay, CI versus CD, right?

409
00:22:17,340 --> 00:22:22,470
making sure that our build and all of our,
inner work, Is happening in one, process

410
00:22:22,830 --> 00:22:27,340
and then our stage to actually run the
code, which will be handled by automation

411
00:22:27,350 --> 00:22:32,830
ultimately, and some other operating
platform, is separate, execute our app is

412
00:22:32,830 --> 00:22:39,370
one or more stateless processes because
again, stateless processes are easy

413
00:22:39,370 --> 00:22:43,050
to view and they're easy to manipulate
from an operating system perspective

414
00:22:43,280 --> 00:22:46,390
from some outside administrating, agent.

415
00:22:46,770 --> 00:22:50,930
Whether that's Kubernetes or
whatever, export services via port

416
00:22:50,930 --> 00:22:52,920
binding, TCP, it's ubiquitous.

417
00:22:52,940 --> 00:22:53,620
We've all got it.

418
00:22:53,920 --> 00:22:59,230
So use port binding specifically as a
way to publish and export services so

419
00:22:59,230 --> 00:23:03,770
that we can all agree on that model and
it'll work in every cloud, whether we're

420
00:23:03,770 --> 00:23:07,780
talking about, security groups or we're
talking about ingress controlling, right?

421
00:23:07,780 --> 00:23:11,440
As long as everything's happening over
TCP ports and we're using port binding,

422
00:23:11,850 --> 00:23:13,440
then we're all speaking the same language.

423
00:23:14,195 --> 00:23:17,205
Scale out via the process
model with concurrency.

424
00:23:17,745 --> 00:23:21,475
Instead, by taking the processes that
are stateless processes, we are now

425
00:23:21,475 --> 00:23:26,895
able to do that, which is great because
now we can scale those processes across

426
00:23:26,895 --> 00:23:31,265
multiple containers, across multiple
clouds, and work out at any scale.

427
00:23:32,295 --> 00:23:35,055
Make sure that our services
are 100 percent disposable.

428
00:23:35,675 --> 00:23:40,915
Fast startup, graceful shutdown again,
so that we can pick the service up, run

429
00:23:40,915 --> 00:23:45,455
it in some cloud, destroy it when we
don't need it anymore and leave no trace.

430
00:23:46,045 --> 00:23:48,715
We, ultimate portability, dev prod parody.

431
00:23:48,935 --> 00:23:53,285
a lot of folks love to talk about Docker
being this thing that's really, Improved.

432
00:23:53,385 --> 00:23:56,825
I was sped up the way that, that we
can, get a quick operating system

433
00:23:56,825 --> 00:23:58,045
layer and do something with our app.

434
00:23:58,045 --> 00:23:59,035
And that's really important.

435
00:23:59,255 --> 00:24:03,385
But another textbook problem that
was solved by Docker was this parody

436
00:24:03,385 --> 00:24:06,365
between development and product
and production systems, right?

437
00:24:06,365 --> 00:24:07,425
Again, I mentioned that when I.

438
00:24:07,615 --> 00:24:09,445
was coming up as a developer,
like a lot of us were.

439
00:24:09,715 --> 00:24:11,175
This was never guaranteed.

440
00:24:11,175 --> 00:24:15,235
We were literally running physically
different services, servers, I should say.

441
00:24:15,445 --> 00:24:18,945
you had to make, someone had to make
sure that, that config was synced

442
00:24:18,965 --> 00:24:20,725
between those services and it never was.

443
00:24:20,985 --> 00:24:22,935
and as a result, you
didn't have this parity.

444
00:24:22,935 --> 00:24:26,225
And so the tests might pass in a QA
environment or staging environment,

445
00:24:26,435 --> 00:24:29,355
you move to production, some tiny
thing is different, and the whole

446
00:24:29,355 --> 00:24:32,295
thing crashes, and everybody's, in
a fire drill for the whole weekend.

447
00:24:32,295 --> 00:24:33,625
And that was just what it was.

448
00:24:33,930 --> 00:24:38,440
Docker helped us solve for this
big time by being able to provide

449
00:24:38,840 --> 00:24:42,070
ubiquitous operating system layers
that would be common no matter where

450
00:24:42,070 --> 00:24:45,560
we were deploying our app, logs,
treating our logs like event streams.

451
00:24:45,560 --> 00:24:48,020
I mentioned those abstraction
layers before, right?

452
00:24:48,070 --> 00:24:52,690
please don't make your admins log into
five different layers of abstraction

453
00:24:52,690 --> 00:24:55,910
just to get visibility on what's
happening with your app, right?

454
00:24:55,920 --> 00:24:59,050
Your app should be
Broadcasting its events.

455
00:24:59,070 --> 00:25:00,990
It shouldn't be writing
to some log file locally.

456
00:25:00,990 --> 00:25:04,740
It should be pushing those logs
out to some aggregator, Datadog,

457
00:25:04,740 --> 00:25:10,680
whatever it is, that makes it very
easy to get access to those metrics.

458
00:25:11,320 --> 00:25:14,360
And then finally, any admin or management
tasks that need to be run across the app,

459
00:25:14,360 --> 00:25:18,520
there should be a one off process again,
so that this admin process can be run.

460
00:25:18,770 --> 00:25:23,320
And even automated in the long
run by ubiquitous orchestration.

461
00:25:24,950 --> 00:25:25,210
All right.

462
00:25:25,280 --> 00:25:25,670
so great.

463
00:25:25,670 --> 00:25:26,840
We've done all this stuff, right?

464
00:25:26,840 --> 00:25:28,790
we have all this fantastic open source.

465
00:25:28,790 --> 00:25:32,800
That's given us this amazing ability
to decompose into microservices.

466
00:25:33,090 --> 00:25:35,840
And now we're, we were just
deploying the multi cloud and

467
00:25:35,840 --> 00:25:37,440
everything's so simple and great.

468
00:25:37,490 --> 00:25:38,510
No, not remotely.

469
00:25:38,720 --> 00:25:41,400
all of this freedom and portability.

470
00:25:42,610 --> 00:25:47,650
Has led in many cases to more
complexity and disorganization, right?

471
00:25:47,810 --> 00:25:52,730
we really over indexed on velocity,
and we didn't always take the right

472
00:25:52,730 --> 00:25:55,910
time to make sure that we were
doing things in an organized way.

473
00:25:56,310 --> 00:26:00,510
And this leads to unnecessary friction
and toil for developers, because

474
00:26:00,520 --> 00:26:05,300
this is the state of the art for
most companies right now, right?

475
00:26:05,320 --> 00:26:07,950
We have, if you look at the bottom
of this slide, all these different

476
00:26:07,950 --> 00:26:11,140
monoliths and many services
and microservices and things.

477
00:26:11,510 --> 00:26:13,820
that are owned by different
engineering managers that were

478
00:26:13,820 --> 00:26:15,410
worked on by different silos.

479
00:26:15,690 --> 00:26:20,010
And they're all getting managed
over like spreadsheets or confluence

480
00:26:20,060 --> 00:26:21,280
wikis or something like that, right?

481
00:26:21,280 --> 00:26:24,900
These lagging systems of record that
then somebody has to go back and update.

482
00:26:24,900 --> 00:26:26,650
And so of course they never get updated.

483
00:26:26,650 --> 00:26:27,880
And so they're always out of date.

484
00:26:28,100 --> 00:26:31,190
And so we don't know who owns what, we
don't know where our dependencies are.

485
00:26:31,350 --> 00:26:34,300
we ended up tracking with things
that look like this, we have

486
00:26:34,300 --> 00:26:37,440
our GitHub repos and our service
names and our Slack channels, but.

487
00:26:37,800 --> 00:26:43,850
When anything has to change in this
ever growing service catalog, it

488
00:26:43,850 --> 00:26:48,780
becomes so brittle and a system that,
that makes it very difficult for cross

489
00:26:48,780 --> 00:26:53,680
functionally teams to understand and get
any type of usefulness out of, right?

490
00:26:53,680 --> 00:26:54,430
So it's just bad.

491
00:26:55,110 --> 00:26:58,680
So we need to be
rethinking this now, right?

492
00:26:58,680 --> 00:27:02,550
we've now moved into a level
of platform engineering where

493
00:27:02,550 --> 00:27:05,270
we have to take that step from.

494
00:27:05,610 --> 00:27:10,140
orchestration and organization of our
services to true choreography, right?

495
00:27:10,170 --> 00:27:15,210
We need to be able to add our final
layer of abstraction, which I believe

496
00:27:15,480 --> 00:27:17,720
is the internal developer portal, right?

497
00:27:17,720 --> 00:27:22,500
So what we're doing at cortex,
what's been done at backstage, right?

498
00:27:22,760 --> 00:27:29,940
We need a single non lagging real time,
continuously monitoring system of record

499
00:27:30,190 --> 00:27:32,250
that's accessible by every engineer.

500
00:27:32,570 --> 00:27:36,590
And that can be used to align
standards and ownership and service

501
00:27:36,590 --> 00:27:38,290
quality across the organization.

502
00:27:38,290 --> 00:27:41,300
And if you'd like to learn more
about that pattern, in particular,

503
00:27:41,300 --> 00:27:44,880
we are having the world's first
ever, conference in person conference

504
00:27:44,880 --> 00:27:47,160
dedicated to internal developer portals.

505
00:27:47,160 --> 00:27:49,980
It's happening in New
York city on October 24th.

506
00:27:50,270 --> 00:27:53,190
and we would love to see you there
and talk more about this solution.

507
00:27:53,400 --> 00:27:54,340
Thanks so much for your time.

508
00:27:54,340 --> 00:27:56,290
I really appreciate it and enjoy
the rest of the conference.

