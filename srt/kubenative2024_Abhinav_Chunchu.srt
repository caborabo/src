1
00:00:14,140 --> 00:00:14,700
Hello, everyone.

2
00:00:14,960 --> 00:00:16,190
My name is Abhinav Chunchu.

3
00:00:16,850 --> 00:00:19,759
I've been working as a software
engineer from past 10 years.

4
00:00:20,500 --> 00:00:23,299
Currently, I'm working as a senior
software engineer in Lowe's.

5
00:00:24,059 --> 00:00:27,410
Today, I'm presenting on cloud
native and Golang's power in the

6
00:00:27,410 --> 00:00:30,089
Kubernetes orchestrated architecture.

7
00:00:30,970 --> 00:00:34,269
In this presentation, we'll be going
through the rise of cloud native

8
00:00:34,269 --> 00:00:40,325
development, why Kubernetes, the role of
Golang in Kubernetes, Go in containerized

9
00:00:40,765 --> 00:00:47,324
environments, data driven insights, Go in
Kubernetes development, Go's concurrency

10
00:00:47,324 --> 00:00:51,975
model for scalable systems, real world
applications of Go in Kubernetes,

11
00:00:52,085 --> 00:00:54,065
and the future of Go on Kubernetes.

12
00:00:54,065 --> 00:00:56,495
So the rise of cloud native development.

13
00:00:57,345 --> 00:01:01,465
cloud native development leverages,
cloud computing to allow applications

14
00:01:01,465 --> 00:01:04,715
to be developed, deployed,
and managed at a large scale.

15
00:01:04,715 --> 00:01:04,815
Thank you.

16
00:01:06,110 --> 00:01:09,900
Kubernetes plays a crucial role
in the stabilization, powering

17
00:01:09,900 --> 00:01:13,410
85 percent of containerized
production workloads globally.

18
00:01:14,130 --> 00:01:20,580
These features, like portability,
scalability, automation, make it backbone

19
00:01:20,800 --> 00:01:22,760
of the cloud native architectures.

20
00:01:24,210 --> 00:01:28,830
Golang has become a key language for cloud
native systems because of its, Efficiency

21
00:01:28,830 --> 00:01:36,010
in handling concurrency and low resource
usage crucial for the cloud environments.

22
00:01:37,550 --> 00:01:40,289
Why Kubernetes?

23
00:01:40,290 --> 00:01:44,390
Kubernetes is highly recommended
for its ability to automatically

24
00:01:44,400 --> 00:01:47,640
manage containerized applications.

25
00:01:48,100 --> 00:01:51,900
Features such as self healing,
auto scaling, rolling updates and

26
00:01:51,900 --> 00:01:55,990
rollback make it ideal for the
handling cloud native demands.

27
00:01:57,285 --> 00:02:02,245
Kubernetes is designed to manage billions
of requests per day, making it scalable

28
00:02:02,715 --> 00:02:05,215
and reliable for high demand applications.

29
00:02:07,225 --> 00:02:10,064
the role of Golang in Kubernetes.

30
00:02:10,445 --> 00:02:12,905
Kubernetes itself is built on Go.

31
00:02:13,865 --> 00:02:18,125
This emphasizes the Go's importance in
orchestration cloud native environments.

32
00:02:19,800 --> 00:02:24,690
Go's lightweight, compiled nature ensures
that applications built in Go are quick

33
00:02:24,690 --> 00:02:27,450
to deploy and have minimum startup time.

34
00:02:27,990 --> 00:02:30,980
These are essential for the
containerized microservices.

35
00:02:33,380 --> 00:02:38,600
its concurrency model like Goroutines,
make the Kubernetes to efficiently

36
00:02:38,600 --> 00:02:43,490
scale, manage thousands of microservices
with minimum resource consumption.

37
00:02:44,370 --> 00:02:50,380
The currently services like in Java
or Spring Boot or other, PySpark,

38
00:02:50,400 --> 00:02:53,820
other features from the other
frameworks are very heavy loaded

39
00:02:53,820 --> 00:02:58,630
and heavy duty, applications where
they have the more startup time and

40
00:02:58,639 --> 00:03:03,860
scaling those high microservices
is much harder compared to the Go.

41
00:03:04,860 --> 00:03:06,500
Go small binaries.

42
00:03:07,075 --> 00:03:11,484
and efficient resource management
make it ideal for the containerized

43
00:03:11,484 --> 00:03:15,304
environments where fast scaling
and minimal overhead are required.

44
00:03:16,594 --> 00:03:22,344
And Go excels in networking, file
input, output and memory intensive

45
00:03:22,425 --> 00:03:25,445
tasks with these environments
enhancing the performance.

46
00:03:26,945 --> 00:03:30,975
And Go's native concurrency enables
it to outperform many other languages

47
00:03:30,975 --> 00:03:35,085
in multi container setups where tasks
need to be executed in parallel.

48
00:03:36,085 --> 00:03:37,325
Data driven insights.

49
00:03:37,565 --> 00:03:40,685
Go in Kubernetes deployments.

50
00:03:41,725 --> 00:03:46,785
70 percent of Kubernetes controllers
and operators are built in Go, as shown

51
00:03:46,785 --> 00:03:49,524
by the CSN of Kubernetes Survey 2023.

52
00:03:50,645 --> 00:03:54,015
Companies using Go for
Kubernetes native tools report

53
00:03:54,025 --> 00:03:58,785
better operational efficiency,
automation and easier scalability.

54
00:04:00,420 --> 00:04:04,950
Organizations prefer Go for developing
a Kubernetes native tools because

55
00:04:04,950 --> 00:04:08,880
it reduces the development time
while ensuring high performance.

56
00:04:09,880 --> 00:04:12,680
Go's concurrency model
for the scalable systems.

57
00:04:14,470 --> 00:04:19,680
Go's lightweight Go routines, which
used around 2 KB of memory, enable

58
00:04:19,720 --> 00:04:21,980
highly scalable distributed systems.

59
00:04:23,500 --> 00:04:27,310
Channels in Go ensure safe
communication between Go routines.

60
00:04:28,315 --> 00:04:31,265
Avoiding the data races
distributed in Kubernetes setup.

61
00:04:31,885 --> 00:04:34,775
Allowing the system to handle
high concurrency without

62
00:04:34,805 --> 00:04:36,365
excessive resource usage.

63
00:04:37,365 --> 00:04:38,735
Data driven insights.

64
00:04:40,155 --> 00:04:41,475
Oh, we already went through this.

65
00:04:41,545 --> 00:04:41,895
Okay.

66
00:04:42,315 --> 00:04:45,905
Go's concurrency model for the, oh, sorry.

67
00:04:45,905 --> 00:04:50,234
Real world applications
of Go in Kubernetes.

68
00:04:52,045 --> 00:04:54,875
Case studies, the several case
studies highlights the Go's

69
00:04:54,885 --> 00:04:56,575
impact in real world scenarios.

70
00:04:57,275 --> 00:05:01,885
Google used Go based controllers, leading
to 30 percent improvement in scaling time.

71
00:05:02,675 --> 00:05:06,665
PayPal used Go based
operators to maintain 99.

72
00:05:06,665 --> 00:05:10,585
99 percent uptime, showcasing the
reliability and performance benefits.

73
00:05:11,585 --> 00:05:17,440
The future of Go and Kubernetes With
continuous improvements, Go is expected

74
00:05:17,440 --> 00:05:22,440
to enhance Kubernetes abilities, to
maintain, manage the increasing complex

75
00:05:22,440 --> 00:05:27,040
workloads, including the edge computing
and the multi cluster management.

76
00:05:27,940 --> 00:05:32,950
The simplicity, speed, and
concurrency model of Go are likely

77
00:05:32,950 --> 00:05:37,090
to play a major role in the next
phase of cloud native development.

78
00:05:38,065 --> 00:05:41,905
Ensuring Kubernetes remain at the
forefront of cloud architecture.

79
00:05:42,785 --> 00:05:46,635
Integration with the future Kubernetes
projects like kube edge, Kubernetes

80
00:05:46,635 --> 00:05:51,365
cluster API will expand the Kubernetes
functionality in edge computing

81
00:05:51,365 --> 00:05:52,875
and multi cluster management.

82
00:05:53,075 --> 00:05:57,205
Conclusion Finally, I would like
to conclude the combination of

83
00:05:57,205 --> 00:06:00,545
Go and Kubernetes is a key to
unlock a cloud native excellence.

84
00:06:01,455 --> 00:06:05,815
Go's performance, scalability,
lightweight nature make it ideal

85
00:06:05,875 --> 00:06:07,875
for the modern cloud native systems.

86
00:06:09,425 --> 00:06:13,685
Kubernetes in turn leverage the
Go strength to efficiently manage,

87
00:06:13,725 --> 00:06:17,965
containerize the applications,
ensuring the resilience and scalability

88
00:06:17,965 --> 00:06:19,965
in large scale cloud computers.

89
00:06:20,965 --> 00:06:21,395
Thank you.

