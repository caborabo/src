1
00:00:14,360 --> 00:00:15,110
Hi everyone.

2
00:00:15,170 --> 00:00:20,270
First of all, thank you all for joining
the conf42 Kube Native 2024 conference,

3
00:00:20,680 --> 00:00:25,810
and a big thanks to Mark Bakowski for
hosting this event and accepting my talk.

4
00:00:26,380 --> 00:00:27,850
My name is Alexander Tronick.

5
00:00:27,910 --> 00:00:32,369
I work as a customer solutions engineer
at Systdig, and in today's session,

6
00:00:32,640 --> 00:00:37,230
I'm going to show you how we can use
Open Source project file Sidekick to

7
00:00:37,230 --> 00:00:39,455
detect threats in Kubernetes workloads.

8
00:00:40,045 --> 00:00:43,765
I'll provide some initial context
using slides, after which we'll

9
00:00:43,765 --> 00:00:45,625
jump into the lab environment.

10
00:00:46,515 --> 00:00:47,694
A little bit about me.

11
00:00:47,894 --> 00:00:51,634
I have a technical background in
telecommunications, and I've been working

12
00:00:51,664 --> 00:00:53,854
for 10 years in various engineering roles.

13
00:00:54,444 --> 00:00:58,624
At the time when I completed my electrical
engineering master's degree, cloud

14
00:00:58,624 --> 00:01:02,725
computing and container technology
weren't covered by any of the programs,

15
00:01:03,025 --> 00:01:07,705
and I totally side quested into these
fields as a hobby by following along

16
00:01:07,785 --> 00:01:09,955
content creators such as NetworkChalk.

17
00:01:10,484 --> 00:01:14,195
and doing the training on platforms
such as RangeForce and TriHackMe.

18
00:01:14,875 --> 00:01:19,564
I'd say a major lesson here would
be to never stop learning, invest in

19
00:01:19,565 --> 00:01:25,345
yourself, and find an ethical hobby with
a great return on investment potential.

20
00:01:27,080 --> 00:01:31,530
From this slide, you can conclude
how I enjoy spending some of my time,

21
00:01:31,839 --> 00:01:33,410
and where you can find me online.

22
00:01:33,889 --> 00:01:38,829
From making YouTube walkthroughs, blog
writing, participating in AWS Community

23
00:01:38,829 --> 00:01:42,839
Builder and Cisco Insider Champion
Communities, and staying current

24
00:01:42,849 --> 00:01:44,739
with cloud and Kubernetes security.

25
00:01:45,475 --> 00:01:49,384
Right now, I'm going after
success coachings, customer

26
00:01:49,384 --> 00:01:53,185
success manager certification,
so it's never a dull moment.

27
00:01:54,095 --> 00:01:58,094
And if any of these I've mentioned
so far sparked your interest,

28
00:01:58,414 --> 00:02:01,764
connect with me on LinkedIn and
we can continue the conversation.

29
00:02:02,764 --> 00:02:08,044
Speaking on ROI, cloud and Kubernetes
are currently known as fields with great

30
00:02:08,054 --> 00:02:12,324
opportunities that connect you with
the most amazing people and pay well.

31
00:02:13,264 --> 00:02:17,814
Cloud and Kubernetes go great hand in
hand, from creating highly available

32
00:02:17,814 --> 00:02:22,074
and resilient services, working on
internal developer platforms, to

33
00:02:22,134 --> 00:02:24,454
innovating with large language models.

34
00:02:25,204 --> 00:02:30,284
You will frequently find that applications
served on public cloud are behind

35
00:02:30,294 --> 00:02:32,574
the scenes built using Kubernetes.

36
00:02:34,084 --> 00:02:39,214
So in this day, age, and economy, that's
something you can expect to see and hear.

37
00:02:39,604 --> 00:02:43,324
Cloud and Kubernetes skills wanted
across software and security

38
00:02:43,324 --> 00:02:46,374
engineering, sales, and customer success.

39
00:02:47,354 --> 00:02:51,164
Related to my badges from the
previous slide, here I highlighted

40
00:02:51,234 --> 00:02:55,714
open job roles from these vendors,
including my employer, Sysdig.

41
00:02:56,414 --> 00:03:01,134
So this is something for motivation to
start looking into Kubernetes and cloud.

42
00:03:01,814 --> 00:03:06,584
because the times are hybrid and
it's not very realistic to center

43
00:03:06,594 --> 00:03:10,994
your technical skill set solely
around services that work on premise.

44
00:03:11,994 --> 00:03:16,704
So let's say that any service that
has to be developed and offered to a

45
00:03:16,704 --> 00:03:19,114
wide audience should be secured too.

46
00:03:20,044 --> 00:03:24,904
In cloud security, there is this concept
of cloud native application protection

47
00:03:24,904 --> 00:03:31,154
platforms, CNAP solutions, capable of
securing infrastructure and applications,

48
00:03:31,594 --> 00:03:36,544
whether based on full blown virtual
machines or microservices, from the

49
00:03:36,544 --> 00:03:41,374
moment of their local development,
while still being available only in

50
00:03:41,374 --> 00:03:43,904
manifest files, to their runtime.

51
00:03:44,184 --> 00:03:47,144
where you can actually
access an application serving

52
00:03:47,534 --> 00:03:49,534
a certain web page live.

53
00:03:51,624 --> 00:03:56,474
Not all malicious actors will rely on
common vulnerabilities and exposures,

54
00:03:58,074 --> 00:04:03,684
CVs for short, to cause damage and gain
unauthorized access to our offering.

55
00:04:04,394 --> 00:04:09,114
Some might try to leverage identities
not being configured according

56
00:04:09,344 --> 00:04:11,044
to the least privileged practice.

57
00:04:11,514 --> 00:04:13,594
And, Compliance failures.

58
00:04:14,124 --> 00:04:19,484
When we rely on reports as snapshots
in time to prove our offering's

59
00:04:19,544 --> 00:04:23,864
adherence to industry's best
practices and relevant benchmarks.

60
00:04:25,314 --> 00:04:28,264
And then, there could
be insider threats too.

61
00:04:29,484 --> 00:04:34,429
Using a job relevant analogy, It's like
a candidate who looks good on paper,

62
00:04:34,549 --> 00:04:39,519
interviews well, and gets inside a
company, but has a malicious intent.

63
00:04:40,339 --> 00:04:44,059
So this is where threat detection
is of utmost importance.

64
00:04:45,029 --> 00:04:49,559
Speaking from my personal experience
working with Sysdig Secure CNAP, its

65
00:04:49,559 --> 00:04:53,919
threat detection engine is based on
an open source Falco project capable

66
00:04:53,969 --> 00:04:58,569
of detecting early indicators of an
attack in containerized environments,

67
00:04:58,979 --> 00:05:02,074
such as using reconnaissance
scripts or other open source tools.

68
00:05:02,244 --> 00:05:08,214
malicious actions across MITRE ATT&
CK framework as obfuscation, privilege

69
00:05:08,284 --> 00:05:14,024
escalation, log deletion, downloading
binaries to containers, exfiltration

70
00:05:14,024 --> 00:05:19,054
attempts, shell history deletion,
bulk renaming and recreating data.

71
00:05:19,184 --> 00:05:24,224
files extensions, and other actions
connected with ransomware campaigns.

72
00:05:25,224 --> 00:05:26,194
A bit on Falco.

73
00:05:26,454 --> 00:05:31,434
Falco is, as of this year, a CNCF
graduated project, meaning it's

74
00:05:31,434 --> 00:05:35,504
considered stable and it's used
successfully in production environments.

75
00:05:36,664 --> 00:05:41,034
Not going deep into architecture weeds
right now, for this session just know

76
00:05:41,034 --> 00:05:47,654
that Falco hooks into the Linux kernel
via a driver, either a kernel module or an

77
00:05:47,654 --> 00:05:50,824
eBPF probe, and can collect system calls.

78
00:05:51,394 --> 00:05:56,444
All these events are parsed from
kernel space to user space, where

79
00:05:56,444 --> 00:06:00,334
Falco rules, which are essentially
filters of your interest, are

80
00:06:00,334 --> 00:06:06,034
applied, and the final outputs can
be delivered to certain locations.

81
00:06:07,639 --> 00:06:12,929
Falco can associate each kernel event
with the exact container attribute, like

82
00:06:12,959 --> 00:06:18,959
container ID, name, image repository,
tags, as well as Kubernetes attributes,

83
00:06:19,399 --> 00:06:21,829
such as namespace or pod name.

84
00:06:22,709 --> 00:06:26,779
And on the right side, there is an
example of a microservice build.

85
00:06:26,779 --> 00:06:31,399
based architecture, leveraging
Falco to understand what is causing

86
00:06:31,459 --> 00:06:33,749
anomalies within a Kubernetes cluster.

87
00:06:34,949 --> 00:06:40,479
So when speaking innovation, container
runtime insights are important to consider

88
00:06:40,719 --> 00:06:46,059
because traditional security tooling
for event management wasn't built with

89
00:06:46,099 --> 00:06:51,719
potential malicious Kubernetes events
and short lived container logs in mind.

90
00:06:52,719 --> 00:06:57,299
Falco is usually associated with a command
line, but there is this public page,

91
00:06:57,349 --> 00:07:01,449
as seen on the left and middle part of
the slide, where you can conveniently

92
00:07:01,459 --> 00:07:06,479
browse through existing Falco rules in
detail, including rules description,

93
00:07:06,949 --> 00:07:11,859
condition when the rule will be
triggered, output content, and rule tags.

94
00:07:13,099 --> 00:07:18,299
On the right, SysTick's 2024 Cloud
Native Security and Usage Report

95
00:07:18,629 --> 00:07:20,939
lists top triggered detections.

96
00:07:21,439 --> 00:07:26,269
In any environment, Where containerized
workloads are being experimented with

97
00:07:26,649 --> 00:07:32,030
locally or served publicly, there
should be tooling in place to detect and

98
00:07:32,069 --> 00:07:34,780
potentially safeguard from such actions.

99
00:07:35,780 --> 00:07:39,719
Falco natively provides just a handful
of destination for its outputs.

100
00:07:40,220 --> 00:07:45,000
And this is where Falco Sidekick
open source project comes in handy.

101
00:07:45,310 --> 00:07:50,930
It can fan out Falco's output to over
60 destinations across web, Falco.

102
00:07:51,285 --> 00:07:56,225
chat ops, logging, streaming,
alerting, and observability platforms.

103
00:07:57,225 --> 00:08:04,205
As for the web output for Falco Sidekiq,
there is Falco Sidekiq UI, a user

104
00:08:04,205 --> 00:08:10,024
friendly way to track Falco events
across triggered rules, event severities,

105
00:08:10,535 --> 00:08:15,975
tags of interest, and comes with
Swagger documentation for API queries.

106
00:08:16,975 --> 00:08:20,555
So that would be the core of our Thread
Detection hands on lab for today.

107
00:08:21,040 --> 00:08:26,280
The link here and QR code will send
you to a Google Drive to download the

108
00:08:26,280 --> 00:08:30,290
virtual machine pre installed with
all the tools for today's session.

109
00:08:31,890 --> 00:08:36,680
Let's say the last few words on the
lab environment and then start the VM.

110
00:08:37,680 --> 00:08:40,380
VM's operating system is Kali Purple.

111
00:08:40,825 --> 00:08:45,915
A community project focused on defensive
tooling structured around the NIST

112
00:08:45,915 --> 00:08:52,135
cybersecurity framework to identify,
protect, detect, respond, and recover.

113
00:08:52,765 --> 00:08:56,435
The project aims to become the
most comprehensive security

114
00:08:56,435 --> 00:08:58,225
operations center in a box.

115
00:08:58,465 --> 00:08:59,445
kind of solution.

116
00:09:02,135 --> 00:09:07,595
On top of Kali Purple, first
installed are several tools to easily

117
00:09:07,595 --> 00:09:09,845
manage local Kubernetes cluster.

118
00:09:10,395 --> 00:09:16,685
And in the cluster, Kubernetes Goat as an
interactive learning platform with real

119
00:09:16,695 --> 00:09:22,565
world Kubernetes misconfigurations is
spun up and we will leverage one of its

120
00:09:22,565 --> 00:09:25,655
scenarios for falco sidekick detection.

121
00:09:26,655 --> 00:09:31,615
kube nomicon Was created to document
offensive and defensive Kubernetes

122
00:09:31,615 --> 00:09:37,405
techniques inspired by Microsoft's
Kubernetes threat matrix, which provides

123
00:09:37,405 --> 00:09:43,335
a framework for understanding Kubernetes
tactics in a MITRE ATT& CK style.

124
00:09:44,495 --> 00:09:51,325
While the Microsoft Threat Matrix focuses
on educating around Kubernetes tactics,

125
00:09:51,325 --> 00:09:57,215
techniques, and procedures through
definitions, KubeNomicon expands on it

126
00:09:57,575 --> 00:10:03,285
by aiming to offer practical commands
for both exploiting and defending against

127
00:10:03,325 --> 00:10:05,735
attacks in Kubernetes environments.

128
00:10:07,095 --> 00:10:11,475
For example, some of the tools that
can be used to enumerate a Kubernetes

129
00:10:11,515 --> 00:10:14,425
environment are nmap and metasploit.

130
00:10:16,665 --> 00:10:22,025
We will also use Atomic Red Team
containerized project to simulate real

131
00:10:22,025 --> 00:10:27,675
world attacks aligned with MITRE ADT and
CK framework in a Kubernetes environment.

132
00:10:28,455 --> 00:10:33,895
These Atomics tests are in general
immensely helpful to refine and enhance

133
00:10:33,945 --> 00:10:37,245
coverage by addressing any detection gaps.

134
00:10:38,485 --> 00:10:43,025
As we trigger Atomics test, we
will monitor Falco Sidekick UI

135
00:10:43,035 --> 00:10:44,955
for real time thread detection.

136
00:10:45,955 --> 00:10:47,795
Now, let's switch to the VM.

137
00:10:48,795 --> 00:10:53,760
As a next logical step moving forward
from today's session, I suggest

138
00:10:53,760 --> 00:10:57,950
looking into recently officially
published Falco Talon project, a

139
00:10:57,950 --> 00:11:02,590
response engine for Falco detected
threats in Kubernetes environments.

140
00:11:03,550 --> 00:11:08,800
Just to name a few actions that can be
automated using Falco Talon, invoking

141
00:11:08,850 --> 00:11:14,700
an AWS Lambda function on a triggered
Falco rule, then enforcing a Kubernetes

142
00:11:14,710 --> 00:11:19,780
network policy, and labeling a pod
as suspicious or terminating it.

143
00:11:20,330 --> 00:11:22,190
I hope you enjoyed today's session.

144
00:11:22,445 --> 00:11:26,045
And that Mark will accept my
future COM 42 applications.

145
00:11:26,885 --> 00:11:30,705
Linked on this slide, you can
find Falco training that should

146
00:11:30,705 --> 00:11:35,425
enable you to start contributing
to Falco and create your own rules.

147
00:11:36,085 --> 00:11:41,565
If you find today's topic interesting,
join the Falco Slack community and let's

148
00:11:41,565 --> 00:11:44,095
stay in touch until the next session.

149
00:11:45,495 --> 00:11:46,255
Bye for now.

