1
00:00:14,240 --> 00:00:15,080
Hello everybody.

2
00:00:15,080 --> 00:00:18,400
Welcome to Conf42, Kube Native 2024.

3
00:00:19,520 --> 00:00:20,330
Hello everyone.

4
00:00:20,480 --> 00:00:23,920
We are truly to be here to talk
about KubeVirt and how it brings

5
00:00:23,920 --> 00:00:25,390
virtualization into the KUBAN as world.

6
00:00:25,630 --> 00:00:29,799
This is our first talk at Conf42,
and we are very excited about that.

7
00:00:30,040 --> 00:00:31,540
Hope it won't be our last talk.

8
00:00:32,560 --> 00:00:37,490
Today we'll dive deep into the how you
can leverage keyword to run virtual

9
00:00:37,490 --> 00:00:38,810
machines alongside your containers.

10
00:00:39,715 --> 00:00:43,105
giving you a unified platform
for managing both of them.

11
00:00:43,465 --> 00:00:47,765
By the end of the session, you'll know how
to get started with KubeWord and integrate

12
00:00:47,765 --> 00:00:49,914
it into your Kubernetes environment.

13
00:00:50,265 --> 00:00:52,855
But first, let's introduce
ourselves, Batuhan.

14
00:00:53,355 --> 00:00:56,925
Hello again, my name is Batuhan,
and I am working as a platform

15
00:00:56,935 --> 00:00:58,254
engineer here at TrendVault.

16
00:00:58,625 --> 00:01:02,025
For those interested in software
supply chain security, you might know

17
00:01:02,055 --> 00:01:05,915
me as one of the early contributors
of SIGSTOR, for which I was selected

18
00:01:05,965 --> 00:01:08,305
as best SIGSTOR evangelist at 2022.

19
00:01:09,634 --> 00:01:12,315
I am proud to be very first
astronaut from Turkey.

20
00:01:12,365 --> 00:01:17,405
I am also CNCF ambassador and the captain
and one of the organizers of KCD Istanbul.

21
00:01:19,685 --> 00:01:20,545
And my name is Koray.

22
00:01:20,555 --> 00:01:24,695
I work as a cubanist consultant and
technical trainer for Cubomatic.

23
00:01:24,965 --> 00:01:28,655
I am also CNCF ambassador
and cube astronaut.

24
00:01:29,445 --> 00:01:33,065
I also contribute to the
cubanist project on CKC infra.

25
00:01:34,565 --> 00:01:40,245
To start with but on you're a platform
engineer and I know that you've worked

26
00:01:40,245 --> 00:01:45,635
on a few migration projects from
virtual machines towards containers.

27
00:01:45,885 --> 00:01:48,485
Let's start by looking at the
fundamental difference between

28
00:01:48,535 --> 00:01:49,694
containers and virtual machines.

29
00:01:50,945 --> 00:01:52,425
Yeah, sounds great, right?

30
00:01:52,795 --> 00:01:55,625
People might know that containers
are lightweight, right?

31
00:01:55,715 --> 00:01:59,564
Designed to run isolate applications
with minimal overhead by sharing

32
00:01:59,575 --> 00:02:01,775
the host's kernel and resources.

33
00:02:02,465 --> 00:02:05,174
This makes them incredibly
efficient for modern workloads.

34
00:02:05,545 --> 00:02:11,260
On the flip side, VMs virtualize entire
operating systems, including the kernel.

35
00:02:11,510 --> 00:02:14,249
So each VM running its own
operating system, right?

36
00:02:14,460 --> 00:02:17,929
They require a hypervisor adding
more overhead, but offering a

37
00:02:17,929 --> 00:02:21,599
full isolation, which is a good
thing for a security perspective.

38
00:02:21,980 --> 00:02:25,470
While containers are ideal for
microservices and stateless applications,

39
00:02:25,710 --> 00:02:30,460
many companies still rely on VMs,
especially for legacy systems that haven't

40
00:02:30,460 --> 00:02:32,700
transitioned to the container world.

41
00:02:33,050 --> 00:02:35,840
For those cases, VMs remain
to go to choice due to the

42
00:02:35,850 --> 00:02:39,590
need for full OS isolation and
compatibility with older workloads.

43
00:02:39,970 --> 00:02:42,910
The real challenge is that some
applications still require the

44
00:02:42,910 --> 00:02:46,870
VM model due to dependencies or
architecture, but also Want to take

45
00:02:46,900 --> 00:02:49,830
advantage of benefits of continuation.

46
00:02:49,880 --> 00:02:52,300
Koray, what do you think
happens in those scenarios?

47
00:02:52,800 --> 00:02:55,450
This is where the
KubeWord comes into play.

48
00:02:55,870 --> 00:02:56,800
So why KubeWord?

49
00:02:56,830 --> 00:02:59,649
Why do we need to bring
virtualization into Kubernetes?

50
00:03:00,980 --> 00:03:04,230
KubeWord allows you to manage
both containers and VMs within

51
00:03:04,230 --> 00:03:06,190
a single Kubernetes platform.

52
00:03:07,060 --> 00:03:10,300
So instead of managing a separate
infrastructure for VMs and

53
00:03:10,300 --> 00:03:14,290
containers keyword provides a
way to unify your workloads.

54
00:03:14,630 --> 00:03:17,920
This is especially helpful
for teams in transition.

55
00:03:18,420 --> 00:03:24,030
The ones that are moving from VMS
containers or for those who want to mix

56
00:03:24,070 --> 00:03:31,219
both type of work workflows for for the
flexibility you can run traditional VM

57
00:03:31,230 --> 00:03:35,459
based applications while modernizing
other pies of your parts of your stack

58
00:03:35,469 --> 00:03:40,909
with containers and they can run all
under the same orchestration layer.

59
00:03:41,409 --> 00:03:45,189
Batuhan, what do you think you
can actually do with kube word?

60
00:03:47,820 --> 00:03:49,219
Yeah, that's a good question.

61
00:03:49,239 --> 00:03:52,859
First, you can manage VMs just like
any other Kubernetes resource like

62
00:03:52,859 --> 00:03:56,290
deployment, port, services, etc.

63
00:03:56,510 --> 00:03:59,739
Meaning that you can scale,
restart, and manage VMs using

64
00:03:59,739 --> 00:04:01,479
familiar Kubernetes tools.

65
00:04:02,969 --> 00:04:06,589
So this allows you to run legacy
applications that aren't easily

66
00:04:06,589 --> 00:04:10,139
containerized, which is particularly
beneficial for organizations needing

67
00:04:10,160 --> 00:04:13,329
to support both modern and traditional
workloads on a single platform.

68
00:04:13,909 --> 00:04:18,269
Qubit also supports live migration,
which is quite helpful for enabling

69
00:04:18,300 --> 00:04:22,029
you to move running VMs between
nodes without any downtime.

70
00:04:22,390 --> 00:04:25,630
Crucial for maintaining
uptime during maintenance.

71
00:04:26,720 --> 00:04:31,240
Plus, you can manage the full life
cycle of VMs provisioning, starting,

72
00:04:31,289 --> 00:04:36,409
stopping, and deleting using the
standard kubernetes commands like

73
00:04:36,709 --> 00:04:40,099
kubectl create, kubectl scale, etc.

74
00:04:41,589 --> 00:04:45,149
So yeah, that's, this is lots
of virtualization, right?

75
00:04:46,549 --> 00:04:47,220
Exactly.

76
00:04:47,390 --> 00:04:50,169
Let's look at how keyword
works under the hood.

77
00:04:50,469 --> 00:04:54,359
So at its core keyword is real
top on communities, leveraging

78
00:04:54,419 --> 00:04:56,789
its native API for VM management.

79
00:04:57,129 --> 00:05:01,759
And that means, as you mentioned before,
scheduling, networking and storage.

80
00:05:01,960 --> 00:05:05,789
These are all responsibility
of responsibilities of the

81
00:05:05,949 --> 00:05:08,289
underlying Kubernetes cluster.

82
00:05:09,059 --> 00:05:10,169
So how it works.

83
00:05:10,169 --> 00:05:12,789
There are several key components here.

84
00:05:12,849 --> 00:05:16,739
We have the Kuber operator, which
installs and manages the life

85
00:05:16,739 --> 00:05:18,709
cycle of other Kubert components.

86
00:05:19,209 --> 00:05:24,669
There is weird controller which watches
for the VM resources and creates the

87
00:05:24,669 --> 00:05:26,629
necessary virtual machine instances.

88
00:05:26,949 --> 00:05:32,739
VMI's there we have with launcher
it's a per VM pod that launches

89
00:05:32,779 --> 00:05:34,359
and runs the VM workload.

90
00:05:34,599 --> 00:05:38,549
So each VM runs inside the
pod on a Kubernetes node.

91
00:05:39,049 --> 00:05:39,409
Yeah.

92
00:05:39,979 --> 00:05:45,739
Obviously kube word uses lib word to
handle VM interactions with the hypervisor

93
00:05:45,759 --> 00:05:48,389
like camo or any other hypervisor.

94
00:05:48,849 --> 00:05:53,889
And we have the weird handler that
component runs on each communities

95
00:05:53,989 --> 00:05:58,829
note and it's responsible for handling
VM related requests, such as the.

96
00:05:59,114 --> 00:06:01,224
life cycle operations and migrations.

97
00:06:01,634 --> 00:06:06,294
This architecture allows communities
to treat VMS as just another

98
00:06:06,344 --> 00:06:09,024
workload alongside the containers.

99
00:06:09,704 --> 00:06:12,234
Batuhan, if you can
simplify it a little bit.

100
00:06:13,874 --> 00:06:16,964
So yeah here is the simplified
version of the previous diagram

101
00:06:17,514 --> 00:06:19,044
by highlighting the key points.

102
00:06:19,414 --> 00:06:23,264
The main takeaway is that Kubernetes
integrates seamlessly with Kubernetes.

103
00:06:23,514 --> 00:06:27,544
In this setup, VMs are treated
as pods running on Kubernetes

104
00:06:27,544 --> 00:06:31,344
nodes, meaning that they follow
the same scheduling and resource

105
00:06:31,344 --> 00:06:32,924
management processes as containers.

106
00:06:33,364 --> 00:06:36,724
Kubernetes also leverages the
Kubernetes API alongside libvirt

107
00:06:36,844 --> 00:06:42,014
qemu, enabling seamless VM Lifecycle
management while taking an advantage

108
00:06:42,014 --> 00:06:45,504
of Kubernetes features like auto
scaling, networking, and storage.

109
00:06:45,854 --> 00:06:50,594
This integration simplifies the process of
deploying and managing both the apps and

110
00:06:50,714 --> 00:06:55,594
containers within the same environment by
eliminating the need for separate tools.

111
00:06:57,544 --> 00:06:57,784
Yeah.

112
00:06:57,784 --> 00:07:01,654
This brings us to running
also workloads on Kubernetes.

113
00:07:01,994 --> 00:07:04,774
It's quite easy as our
friend Mark says, right?

114
00:07:05,434 --> 00:07:06,664
So it's demo time.

115
00:07:06,704 --> 00:07:10,519
Before we start a special
thanks to metal stack cloud.

116
00:07:11,039 --> 00:07:18,399
They provided their bare metal
Kubernetes many service to us to use.

117
00:07:18,879 --> 00:07:25,999
So if you want to run cube word on public
cloud providers you have to enable nested

118
00:07:26,000 --> 00:07:30,269
virtualization because it's a another
virtualization layer on top of VMs.

119
00:07:30,539 --> 00:07:33,049
So in the case of, for example, AWS.

120
00:07:33,444 --> 00:07:36,814
You also have to use metal instance types.

121
00:07:37,204 --> 00:07:40,054
Then here we'll be using
another bare metal service.

122
00:07:40,604 --> 00:07:48,164
And for the demo, we have a a repo
where we include both Flux and Argo CD.

123
00:07:49,169 --> 00:07:51,419
installations or scenarios.

124
00:07:51,729 --> 00:07:58,339
If you prefer more UI based stuff
you can also try out Argo city, but

125
00:07:58,539 --> 00:08:04,059
today we'll be working with flux
and we'll be creating our VMs on

126
00:08:04,059 --> 00:08:07,809
keyword using in with GitOps approach.

127
00:08:08,359 --> 00:08:13,039
So I have already bootstrapped
the flux in the cluster.

128
00:08:13,119 --> 00:08:14,329
Let's check it out.

129
00:08:14,739 --> 00:08:22,829
And you will see that flux is already
deployed and now I would like to

130
00:08:22,929 --> 00:08:25,109
start deploying first with cube word.

131
00:08:25,179 --> 00:08:29,839
So I will be exporting
some environment variables.

132
00:08:29,889 --> 00:08:33,509
This could so this one needs
to be V version one to zero

133
00:08:33,509 --> 00:08:35,649
and create a director for it.

134
00:08:36,009 --> 00:08:39,919
And in that directory,
I'll be copying the.

135
00:08:41,709 --> 00:08:46,789
Q word operator and Q word
custom resources manifests.

136
00:08:47,289 --> 00:08:52,849
If now we take a look, as you see in
my getups configuration directory,

137
00:08:52,859 --> 00:08:57,339
the flux system is there, and there
is also another manifest for Q word.

138
00:08:57,779 --> 00:09:02,769
Eventually we'll be deploying RVMs using
some ham chart that I just created.

139
00:09:03,279 --> 00:09:09,399
Which will be handling some other stuff
include creating some SSH keys for the VM.

140
00:09:09,909 --> 00:09:14,449
So you can also do such stuff or
copy things from here as well.

141
00:09:14,699 --> 00:09:19,989
The VM provisioner is app that that
is used in the Argo CD scenario.

142
00:09:20,219 --> 00:09:21,639
You can also take a look at this one.

143
00:09:22,189 --> 00:09:29,959
So first I would like to push these
things and let Flux create the, or deploy

144
00:09:30,229 --> 00:09:33,669
kubert for us if I do start checking out.

145
00:09:34,039 --> 00:09:40,739
So here Flux first will deploy kubert
operator, and then it will be responsible

146
00:09:40,769 --> 00:09:43,339
for deploying the other components.

147
00:09:43,819 --> 00:09:46,739
Like a weird launcher and with handler.

148
00:09:47,429 --> 00:09:49,939
Let's wait flux to

149
00:09:50,939 --> 00:09:58,889
To do it or maybe we can just manually
trigger the reconciliation on flux side

150
00:10:01,589 --> 00:10:09,449
Let's try it flux reconcile source
kit flux system Now if we check the

151
00:10:09,449 --> 00:10:14,329
pods as you see the weird operator is
being deployed and then it will start

152
00:10:14,684 --> 00:10:19,284
deploying the other components to
the system when it's up upon running.

153
00:10:21,394 --> 00:10:27,519
And we can also check the here like this.

154
00:10:27,579 --> 00:10:33,069
So as you see the it's being
deployed now and we can also wait

155
00:10:33,069 --> 00:10:36,309
for cover to be to be deployed the.

156
00:10:37,514 --> 00:10:43,134
So right now the phase is is
deploying and then we'll wait until

157
00:10:43,134 --> 00:10:45,744
the kube word part is up and ready.

158
00:10:46,744 --> 00:10:48,894
I hope this will be fast.

159
00:10:49,894 --> 00:10:52,364
Meanwhile, we can also check again.

160
00:10:53,069 --> 00:10:54,399
What's happening with the pause.

161
00:10:54,399 --> 00:10:55,849
If there are any failures.

162
00:10:55,879 --> 00:10:57,189
No, there are no failures.

163
00:10:57,319 --> 00:11:01,299
So we're tender virtual operator
controller, a virtual API.

164
00:11:01,299 --> 00:11:04,469
They're all deployed and it's ready.

165
00:11:04,479 --> 00:11:07,899
If again, you check for the yeah.

166
00:11:08,059 --> 00:11:10,009
Now the condition is met.

167
00:11:10,569 --> 00:11:16,259
And if we check all the resources in
cube word namespace Yeah, we'll see

168
00:11:16,259 --> 00:11:21,579
that weird controller, weird handler,
weird API and operator are deployed.

169
00:11:21,809 --> 00:11:23,359
There are a few services.

170
00:11:23,709 --> 00:11:26,199
Yeah, also the weird
handler is a daemon set.

171
00:11:26,629 --> 00:11:28,019
So they're all running.

172
00:11:28,519 --> 00:11:28,539
Yeah.

173
00:11:29,394 --> 00:11:34,934
To be able to interact with with
kube word VMs you need to install

174
00:11:34,934 --> 00:11:41,254
virtctl or virtctl binary or kube
plugin virt to be able to do that.

175
00:11:41,254 --> 00:11:45,134
Yeah, I've already installed
them, so I will not try those, but

176
00:11:45,324 --> 00:11:48,374
Essentially, you will need them working.

177
00:11:49,044 --> 00:11:54,924
As I said, I've already created a
Helm chart and pushed it to some OCI

178
00:11:54,924 --> 00:11:57,999
repository on GitHub GitHub registry.

179
00:11:58,419 --> 00:12:02,089
So I'll be using that
One, two, create a VM.

180
00:12:02,629 --> 00:12:07,129
First again I create the VM there,
so I will create virtual machines

181
00:12:07,129 --> 00:12:11,719
directory and put all my virtual
machine related manifest there.

182
00:12:12,639 --> 00:12:16,819
And now I would like to create a source.

183
00:12:17,339 --> 00:12:23,859
Yeah, my, from my GitHub registry
and create a source here.

184
00:12:25,479 --> 00:12:29,749
And then yeah, you can check what is
created in the values YAML file, but

185
00:12:29,759 --> 00:12:35,469
simply I'll be providing a memory
for my VM, the host name of my VM and

186
00:12:35,479 --> 00:12:37,269
which container disc will be used.

187
00:12:37,279 --> 00:12:41,709
So I'll be using Fedora and I
can also provide some user data.

188
00:12:42,029 --> 00:12:45,799
like a change password,
like a password is federal.

189
00:12:46,119 --> 00:12:51,819
And you can also provide some more
information with SSH keys or other stuff.

190
00:12:52,979 --> 00:13:00,259
So I'll be creating this values file and
then I will be creating the helm release.

191
00:13:00,769 --> 00:13:02,799
I will use VM chart.

192
00:13:03,069 --> 00:13:05,159
The helm releases test VM one.

193
00:13:05,389 --> 00:13:09,209
I'll use this ham repository
that I just created.

194
00:13:09,259 --> 00:13:11,179
When I push the code, it will be created.

195
00:13:11,589 --> 00:13:16,059
I will create a virtual machines
namespace and then use the values

196
00:13:16,059 --> 00:13:18,579
file that I also created here.

197
00:13:19,289 --> 00:13:24,949
So if we check now or so on the
virtual machines, I have the kube

198
00:13:24,949 --> 00:13:32,539
virt vm ham, ham repo, and also
one VM YAML to create the VM.

199
00:13:33,309 --> 00:13:43,619
So let's again push those to Flux,
or for Flux to work, and then watch

200
00:13:43,619 --> 00:13:45,929
again the pods, what's happening now.

201
00:13:47,399 --> 00:13:52,909
So I'll, I'm expecting a new namespace
here called virtual machines which will

202
00:13:52,919 --> 00:13:59,399
have a pod for my test VM one hopefully
soon, or maybe I can reconcile it again.

203
00:13:59,549 --> 00:14:00,709
Manually yes.

204
00:14:00,719 --> 00:14:02,609
Flux reconcile.

205
00:14:03,639 --> 00:14:03,879
Yeah.

206
00:14:04,169 --> 00:14:07,479
So as you see, the virtual
machine is being started.

207
00:14:07,479 --> 00:14:08,759
So this is a Helm chart.

208
00:14:09,019 --> 00:14:13,089
It will first create some
SH keys for me and then.

209
00:14:13,994 --> 00:14:15,414
It will start the Virt Launcher.

210
00:14:15,414 --> 00:14:16,924
So Virt Launcher is working.

211
00:14:17,164 --> 00:14:20,534
So this is the pod that contains my VM.

212
00:14:22,394 --> 00:14:27,664
And It's being initialized.

213
00:14:27,904 --> 00:14:28,724
I think it's running.

214
00:14:29,034 --> 00:14:34,334
And if we check the virtual machines
so I have some, I have a virtual

215
00:14:34,344 --> 00:14:36,274
machine running on that node.

216
00:14:36,664 --> 00:14:40,934
It's in running phase, so it's I
think it's ready to be connected.

217
00:14:41,484 --> 00:14:46,924
As I said, I'll get secret
dash and mutual machines.

218
00:14:46,934 --> 00:14:51,174
So it created a private and
public key for me this ham chart.

219
00:14:51,174 --> 00:14:56,554
So I will need to
download those to connect.

220
00:14:57,184 --> 00:15:01,984
So I simply create these two files,
public, private key, and then the

221
00:15:02,854 --> 00:15:09,864
command to connect to the VM is kubectl
weird ssh I'm using your identifier.

222
00:15:09,874 --> 00:15:12,764
So this is the private key
that I just downloaded.

223
00:15:13,064 --> 00:15:14,964
I will use the local ssh

224
00:15:17,824 --> 00:15:24,634
Connection type to With federal
user to test vm1 and it's running

225
00:15:24,634 --> 00:15:26,464
on the virtual machines namespace.

226
00:15:26,464 --> 00:15:33,334
So if I do that yes, I accept the key
and then now I am on my fedora machine.

227
00:15:33,554 --> 00:15:41,754
So this is a a VM that runs all the stuff,
it has its own kernel and everything.

228
00:15:42,064 --> 00:15:48,134
You name dash a, you will see that it's
running my record kernel and everything.

229
00:15:48,204 --> 00:15:54,634
This is a vm and the good part is
that now from this VM, I am able

230
00:15:54,634 --> 00:15:58,674
to connect to the Kubernetes API.

231
00:15:58,884 --> 00:16:03,474
So if I try to connect to Kubernetes
default service or Kubernetes

232
00:16:03,474 --> 00:16:07,094
service on the default name
space, yeah, I wanna authorize.

233
00:16:07,094 --> 00:16:08,354
I know that, but.

234
00:16:08,644 --> 00:16:12,094
I was just able to interact
with the Kubernetes namespace.

235
00:16:12,104 --> 00:16:16,894
So the application you have running
here, whatever that is, it can

236
00:16:17,404 --> 00:16:22,484
connect to other services inside
your Kubernetes clusters so that your

237
00:16:22,524 --> 00:16:29,314
virtualized application can just connect
to your containerized applications.

238
00:16:29,314 --> 00:16:33,561
Simply that brings you that information.

239
00:16:34,091 --> 00:16:34,921
So some.

240
00:16:35,426 --> 00:16:39,966
Other companies, some companies like
Rattat or Qubermatic they provide

241
00:16:39,966 --> 00:16:44,146
some other approaches, approaches
to Qubeword for example, Qubermatic.

242
00:16:44,486 --> 00:16:48,426
Creates communities clusters
by using keyword VM.

243
00:16:48,436 --> 00:16:55,586
There are VMs on the keyword cluster and
using those VMs we create a communities

244
00:16:55,586 --> 00:17:01,166
cluster and you can check that sort
of information from the documentation

245
00:17:02,166 --> 00:17:05,226
to conclude to make it easier
to manage hybrid workloads.

246
00:17:05,901 --> 00:17:07,251
So you don't have too many.

247
00:17:07,331 --> 00:17:09,691
You don't have to choose
between VMs and containers.

248
00:17:09,901 --> 00:17:13,031
With its simplest integration into
Kubernetes, Kubernetes opens up new

249
00:17:13,091 --> 00:17:16,131
possibilities for legacy modernization
and workload consolidation.

250
00:17:16,571 --> 00:17:18,451
So thank you for joining our session.

251
00:17:18,621 --> 00:17:23,261
You can reach both of, if you have
any questions, we have both on

252
00:17:23,351 --> 00:17:26,461
LinkedIn and X and also GitHub.

253
00:17:27,911 --> 00:17:28,531
Thank you very much.

254
00:17:28,541 --> 00:17:29,611
Have a great conference.

