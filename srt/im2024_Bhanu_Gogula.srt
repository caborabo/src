1
00:00:00,389 --> 00:00:01,109
Hello, everyone.

2
00:00:01,110 --> 00:00:06,310
I am Bhanu Vanendra Babu Gogula, a full
stack web engineer, and thank you for

3
00:00:06,310 --> 00:00:12,515
joining my session on migrating articles
from Salesforce Before we proceed with the

4
00:00:12,515 --> 00:00:14,735
discussion, I have a disclaimer to share.

5
00:00:15,325 --> 00:00:20,915
The views and opinions shared in this
presentation are my own and do not

6
00:00:20,975 --> 00:00:24,905
represent the views or official position
of my current and previous employers.

7
00:00:25,564 --> 00:00:28,934
The content is based on
general industry knowledge and

8
00:00:28,935 --> 00:00:30,454
publicly available information.

9
00:00:30,944 --> 00:00:34,374
No sensitive or confidential information
will be shared in this video.

10
00:00:34,670 --> 00:00:39,750
During this talk today, we'll talk
about importance of AEM guides

11
00:00:40,030 --> 00:00:46,150
and how to migrate content from
crites efficiently while minimizing

12
00:00:46,160 --> 00:00:48,599
downtime and ensuring data integrity.

13
00:00:49,599 --> 00:00:51,170
A little bit background about me.

14
00:00:51,440 --> 00:00:55,469
I'm a technical professional with more
than 10 years of experience developing

15
00:00:55,469 --> 00:00:57,339
software for various industries.

16
00:00:58,129 --> 00:01:01,139
I hold a master's degree in
computer science from the

17
00:01:01,139 --> 00:01:02,740
University of Central Missouri, USA.

18
00:01:03,780 --> 00:01:08,590
As a full stack developer, I bring
expertise in both front end and back

19
00:01:08,590 --> 00:01:12,590
end development, adding value and
innovation to every project I worked on.

20
00:01:13,590 --> 00:01:17,929
In this talk, let's talk about
introduction to data and importance of

21
00:01:18,000 --> 00:01:24,160
AEM guides, extracting article information
from Salesforce, HTML page creation of

22
00:01:24,190 --> 00:01:32,795
each article, cleaning HTML and updating
paths, HTML to data conversion, uploading

23
00:01:32,795 --> 00:01:37,285
content into AEM guides, validation,
advantage of this migration approach.

24
00:01:38,285 --> 00:01:42,574
In today's world, organizations
deal with a lot of content, so they

25
00:01:42,575 --> 00:01:46,125
need a strong system to create,
manage, and share it easily.

26
00:01:46,765 --> 00:01:51,054
While Salesforce works well for
managing customer relationships, it

27
00:01:51,054 --> 00:01:54,675
does not have all the tools needed
for complex content management.

28
00:01:55,444 --> 00:01:58,955
AEM Guides is a better choice
because it offers powerful features

29
00:01:58,985 --> 00:02:00,465
like advanced data support.

30
00:02:01,040 --> 00:02:04,929
Tools for organized content creation
and smooth content delivery.

31
00:02:05,929 --> 00:02:10,350
Before we dive into migration
process, let's first discuss two

32
00:02:10,399 --> 00:02:14,989
approaches for content creation,
linear documentation and component

33
00:02:14,999 --> 00:02:17,610
based content management system, CCMS.

34
00:02:18,189 --> 00:02:21,990
In a linear documentation
approach, content is created in the

35
00:02:23,109 --> 00:02:25,060
straightforward, sequential manner.

36
00:02:25,640 --> 00:02:29,120
When the same content is needed in
the other document or sections, it

37
00:02:29,140 --> 00:02:31,190
has to be copied again and again.

38
00:02:31,820 --> 00:02:35,380
Instead of just linking to it,
this create a lot of duplicate

39
00:02:35,380 --> 00:02:37,260
content and unnecessary work.

40
00:02:37,730 --> 00:02:39,019
Let's look at an example.

41
00:02:39,130 --> 00:02:41,610
Imagine we have a
document A and document B.

42
00:02:43,320 --> 00:02:46,149
Both documents contains the
same information about this,

43
00:02:46,329 --> 00:02:47,729
specific product future.

44
00:02:49,439 --> 00:02:53,259
With linear documentation, we
should have to copy this content

45
00:02:53,349 --> 00:02:55,429
into both documents separately.

46
00:02:56,049 --> 00:03:00,094
If there are any updates to the
product future, You need to go

47
00:03:00,094 --> 00:03:04,274
to document A and document B
individually and make the changes.

48
00:03:04,984 --> 00:03:07,484
These duplications can
lead to several challenges.

49
00:03:08,064 --> 00:03:10,244
The main thing is reduced maintainability.

50
00:03:10,689 --> 00:03:15,250
Each time you make a change, you must
ensure that the update is made in

51
00:03:15,269 --> 00:03:17,459
every place where the content appears.

52
00:03:18,149 --> 00:03:21,719
And, it increases workload
like a manual updating multiple

53
00:03:21,730 --> 00:03:25,939
documents is time consuming and
increases the chance of errors.

54
00:03:26,569 --> 00:03:30,389
as you can see in this slide,
a small update in topic 2 now

55
00:03:30,409 --> 00:03:32,079
has to made in multiple places.

56
00:03:32,529 --> 00:03:36,009
As the number of document grows,
this become even more time

57
00:03:36,009 --> 00:03:37,709
consuming and difficult to manage.

58
00:03:38,709 --> 00:03:42,699
So now coming to, component based
documents with the CCMS, this is where

59
00:03:42,699 --> 00:03:45,089
actually, component, CCMS really helps.

60
00:03:45,529 --> 00:03:47,089
Unlike linear documentation.

61
00:03:47,614 --> 00:03:51,664
CCMS gives us a much easier way
to manage and reuse content.

62
00:03:52,234 --> 00:03:56,594
With CCMS, we can break content
into smaller reusable chunks

63
00:03:56,994 --> 00:03:59,324
that we can link wherever needed.

64
00:03:59,914 --> 00:04:04,784
This means we don't have to copy content
over and make updates much simpler.

65
00:04:05,464 --> 00:04:09,744
In this diagram, the content is broken
down into smaller pieces called topics.

66
00:04:11,359 --> 00:04:16,579
A map is used to organize and combine
the needed topics into a document.

67
00:04:17,279 --> 00:04:22,149
We use a built in data tool to generate
the map in the required format, which

68
00:04:22,149 --> 00:04:29,899
means by using the existing topic,
the map can be generated in PDF,

69
00:04:29,899 --> 00:04:31,749
eBooks, mobile, desktop, web format.

70
00:04:32,119 --> 00:04:33,809
We don't need to create separately.

71
00:04:34,389 --> 00:04:35,439
let's look at example.

72
00:04:35,449 --> 00:04:35,889
This one.

73
00:04:36,404 --> 00:04:40,784
let's say document a and document B
both have a section that describes

74
00:04:40,794 --> 00:04:45,124
the same product future instead of
copying that content into each document.

75
00:04:45,604 --> 00:04:48,884
CCMS allow us to create a
content pieces for the future.

76
00:04:49,474 --> 00:04:52,694
Then we can just link this piece
into a document A and document

77
00:04:52,704 --> 00:04:56,904
B and any other documents that
need product future information.

78
00:04:58,674 --> 00:05:02,674
Now, if you need to update the product
future description, we just update

79
00:05:02,694 --> 00:05:05,064
the content chunk in one place.

80
00:05:05,844 --> 00:05:09,384
Thanks to the linking future,
this change is instantly reflected

81
00:05:09,384 --> 00:05:11,694
in document A, document B.

82
00:05:11,709 --> 00:05:15,109
And everywhere else, this
content chunk is used.

83
00:05:15,799 --> 00:05:20,189
This has several advantages,
like no duplication, the content

84
00:05:20,209 --> 00:05:24,669
only exists once, so there is no
need to manage multiple copies.

85
00:05:25,149 --> 00:05:30,339
Easy updates, updating content
becomes much quicker, since you

86
00:05:30,339 --> 00:05:32,099
only need to make the change once.

87
00:05:32,569 --> 00:05:37,409
Better organization, CCMS keeps your
content organized by breaking into

88
00:05:37,409 --> 00:05:40,579
smaller parts that are easy to reuse.

89
00:05:41,999 --> 00:05:43,829
so with CCMS.

90
00:05:44,479 --> 00:05:48,769
Updating information across documents
is no longer a repetitive task.

91
00:05:49,079 --> 00:05:53,819
Instead, it is efficient and
scalable, allowing you to maintain

92
00:05:54,009 --> 00:05:55,959
accuracy along all your content.

93
00:05:56,959 --> 00:06:00,169
Now, coming to the actual migration
process, according to industry

94
00:06:00,179 --> 00:06:04,399
guidelines, the migration process
can be completed in six steps.

95
00:06:04,969 --> 00:06:07,849
The first step is extracting
article information.

96
00:06:08,264 --> 00:06:11,424
The first step is to pull the
content out of Salesforce.

97
00:06:11,914 --> 00:06:16,734
Imagine we have thousands of articles
stored in Salesforce, and we need to get

98
00:06:16,794 --> 00:06:22,024
each article's title, article content, and
any metadata related to that particular

99
00:06:22,094 --> 00:06:27,874
article, and we need to extract that into
the format that we can move over to AEM.

100
00:06:29,854 --> 00:06:33,004
To do this efficiently, we use
a tool called Selenium Wire.

101
00:06:33,504 --> 00:06:36,724
This tool helps us automate the
process, meaning we don't have to

102
00:06:36,734 --> 00:06:39,064
manually copy and paste every article.

103
00:06:39,704 --> 00:06:44,124
Selenium Wire goes to the Salesforce and
pulls out all the information we need.

104
00:06:44,469 --> 00:06:47,799
efficiently with the,
minimal risk of errors.

105
00:06:48,389 --> 00:06:54,079
In simple terms, Selenium wire act like
a robot collecting data for us so we can

106
00:06:54,109 --> 00:06:55,989
focus on other parts of the migration.

107
00:06:56,689 --> 00:06:59,729
Once this content is collected,
we are ready for the next step.

108
00:07:00,569 --> 00:07:04,189
And I had provided, some,
some codes, sample snippet

109
00:07:04,189 --> 00:07:05,249
for the better understanding.

110
00:07:05,709 --> 00:07:07,739
It will help you more clearly.

111
00:07:08,739 --> 00:07:12,229
Now, coming to the second
step, creating HTML pages.

112
00:07:12,399 --> 00:07:16,519
Once we extract data from the
Salesforce, the next step is to create

113
00:07:16,579 --> 00:07:18,929
individual HTML pages for each article.

114
00:07:19,689 --> 00:07:23,799
The HTML pages will act as a
temporary format before we convert

115
00:07:23,809 --> 00:07:27,209
the content into data, which AEM uses.

116
00:07:27,549 --> 00:07:32,449
In this step, we take the title,
content, and metadata from each article

117
00:07:32,449 --> 00:07:34,089
and put them into a HTML structure.

118
00:07:34,619 --> 00:07:37,479
This setup organizes everything
into neat mini webpages.

119
00:07:38,309 --> 00:07:40,689
Making it easy to work
in the following steps.

120
00:07:41,859 --> 00:07:46,619
Each article becomes its own HTML file,
complete with the title content and

121
00:07:46,619 --> 00:07:48,749
make the transition into AEM smoother.

122
00:07:51,669 --> 00:07:55,919
Now coming to step number three,
cleaning HTML and, updating relative

123
00:07:55,949 --> 00:08:01,019
paths, now that our content is in
HTML format, it's time to clean up

124
00:08:01,029 --> 00:08:05,809
the code and make sure everything
works properly when we move to AEM.

125
00:08:06,179 --> 00:08:08,119
This is where we make
sure the images links.

126
00:08:09,719 --> 00:08:11,709
And other resources are linked correctly.

127
00:08:12,669 --> 00:08:13,549
Updating path.

128
00:08:14,129 --> 00:08:17,459
First, we check all the path
in our HTML files are correct.

129
00:08:17,529 --> 00:08:21,179
For example, if an article has an
image, we want to make sure that

130
00:08:21,179 --> 00:08:23,559
image will show up correctly in AEM.

131
00:08:23,969 --> 00:08:28,489
We update these, path to that
they are ready to, AEM system.

132
00:08:28,499 --> 00:08:36,239
We'll make sure all these related paths
are updated according to the here we use

133
00:08:36,239 --> 00:08:39,219
a tool called GTD to clean up the HTML.

134
00:08:39,939 --> 00:08:44,839
This tool goes through the code and
fixes any errors, make sure that HTML

135
00:08:44,869 --> 00:08:46,639
files are neat and well formatted.

136
00:08:47,129 --> 00:08:52,789
This step helps avoid problems later on
when we convert HTML into data XML files.

137
00:08:53,589 --> 00:08:57,399
In simple words, this step like
doing a quick cleanup for our files

138
00:08:57,399 --> 00:09:00,619
to make sure everything looks and
works correctly in the new system.

139
00:09:02,209 --> 00:09:04,469
Now converting HTML to data.

140
00:09:05,009 --> 00:09:05,949
After cleaning.

141
00:09:08,839 --> 00:09:12,529
After cleaning the HTML, the
next step is to converting HTML

142
00:09:12,529 --> 00:09:18,389
into data XML files, here in the
XML usually as topics and maps.

143
00:09:18,839 --> 00:09:21,499
Data is a way of organizing
content by breaking into a

144
00:09:21,499 --> 00:09:23,229
smaller topic based pieces.

145
00:09:23,744 --> 00:09:27,494
Make it easier to manage, update,
and reuse in different documents.

146
00:09:28,784 --> 00:09:32,364
Let's talk about a few important
features of AEM Guides.

147
00:09:33,924 --> 00:09:38,394
In AEM Guides, we organize content
into specific types like a content,

148
00:09:38,494 --> 00:09:40,784
task, reference, topic, map.

149
00:09:41,294 --> 00:09:44,714
By structuring content into these
categories, we create a clear,

150
00:09:44,724 --> 00:09:50,064
organized way to present information
that makes it easy to locate and reuse.

151
00:09:50,724 --> 00:09:55,574
Another great advantage of data is that
it allows multiple delivery points.

152
00:09:55,934 --> 00:09:59,684
This means We can publish
the same content in different

153
00:09:59,684 --> 00:10:01,654
formats for various platforms.

154
00:10:01,704 --> 00:10:05,754
For example, with the data open
toolkit, we can take one set

155
00:10:05,754 --> 00:10:10,054
of content and easily turn into
different format, such as webpages,

156
00:10:10,234 --> 00:10:12,394
PDFs, or mobile friendly versions.

157
00:10:14,304 --> 00:10:17,594
The best part is that we don't
have to create the content each

158
00:10:17,594 --> 00:10:19,034
time for different formats.

159
00:10:19,674 --> 00:10:21,904
The data tool handles the transformation.

160
00:10:22,279 --> 00:10:26,029
So the same content can be
used across multiple platforms.

161
00:10:26,539 --> 00:10:32,999
This saves time, reduces effort, and
ensures that all versions stay consistent,

162
00:10:33,039 --> 00:10:34,889
no matter how people view the content.

163
00:10:36,419 --> 00:10:39,669
Another big advantage of data
is rebranding flexibility.

164
00:10:40,239 --> 00:10:44,809
Data make it easy to update
content, to match rebranding colors.

165
00:10:46,209 --> 00:10:50,229
Because the content is organized
and structured, pre user chunks,

166
00:10:50,369 --> 00:10:53,799
you can quickly make changes
that apply across the documents.

167
00:10:54,249 --> 00:10:58,509
For example, if a company logo
or design style changes, you

168
00:10:58,509 --> 00:11:00,249
only need to update in one place.

169
00:11:02,689 --> 00:11:06,094
Then data automatically
applies, applies that update.

170
00:11:06,394 --> 00:11:11,144
throughout every document where the
content is used, saving time and effort

171
00:11:11,214 --> 00:11:12,844
while keeping everything consistent.

172
00:11:13,454 --> 00:11:16,124
Another example is like, where
the product name changes.

173
00:11:16,274 --> 00:11:21,584
Let's say a product name is
rebranded and its name changes, but

174
00:11:21,704 --> 00:11:26,384
its product name is mentioned in
thousands of articles with the data.

175
00:11:26,424 --> 00:11:28,924
You don't have to update
every article separately.

176
00:11:28,964 --> 00:11:31,384
Instead, you can change the product name.

177
00:11:31,789 --> 00:11:36,009
In a central variable or a key map,
wherever the product name is used,

178
00:11:36,069 --> 00:11:40,059
it will update automatically in all
the documents, making rebranding

179
00:11:40,099 --> 00:11:42,049
quick, accurate, and efficient.

180
00:11:43,049 --> 00:11:46,409
So once, coming to the fifth
step, this is, where we are

181
00:11:46,479 --> 00:11:48,399
uploading content into AEM guides.

182
00:11:48,889 --> 00:11:53,699
Once our articles are in data format, they
are ready to be uploaded into AEM guides.

183
00:11:54,249 --> 00:11:58,539
This is a step where we transfer the
content from our local files to AEM.

184
00:11:58,894 --> 00:12:00,524
which is a web based system.

185
00:12:01,234 --> 00:12:05,834
To upload the content smoothly, we use
a tool called ACS Common Asset Importer.

186
00:12:06,224 --> 00:12:10,854
This tool ensures that every piece
of content, including titles,

187
00:12:10,924 --> 00:12:15,684
body, text, images, and metadata,
gets moved into AEM correctly.

188
00:12:16,154 --> 00:12:20,584
Imagine we are putting our organized
content into a digital bookshelf.

189
00:12:21,134 --> 00:12:25,034
AEM Guides becomes a system that
stores everything neatly, and let

190
00:12:25,034 --> 00:12:26,804
us manage it all in one place.

191
00:12:27,804 --> 00:12:31,854
Now, once everything is completed
here, the final step is a validation.

192
00:12:32,414 --> 00:12:36,684
in this step, we double check everything
we need to make sure that all the

193
00:12:36,694 --> 00:12:41,624
articles and images appear correctly in
AEM, make sure all the links works and

194
00:12:41,624 --> 00:12:46,754
metadata, whatever we extracted with
respect to article is in the proper place.

195
00:12:48,194 --> 00:12:52,864
In validation, we go through each article
in AEM to ensure that it looks the way it

196
00:12:52,864 --> 00:12:55,124
should and everything function properly.

197
00:12:55,474 --> 00:13:00,544
If any issues comes up, we can catch and
fix them before we finish the migration.

198
00:13:01,544 --> 00:13:06,234
Now coming to advantages of this migration
approach, automation and efficiency by

199
00:13:06,254 --> 00:13:11,774
automate automating the process from,
extraction to final validation, we

200
00:13:11,904 --> 00:13:17,594
reduce the need for manual in manual
effort and save significant time data

201
00:13:17,594 --> 00:13:22,474
integrity, each step of the migration
is structured to maintain the integrity

202
00:13:22,514 --> 00:13:23,974
and consistency of the content.

203
00:13:24,504 --> 00:13:30,434
Scalability, the, this utility is designed
to handle migration of various sizes

204
00:13:30,864 --> 00:13:36,014
from a few articles to thousands and,
multiple validation points ensures that

205
00:13:36,264 --> 00:13:40,874
errors and, detected early minimizing
the risk by automating the entire

206
00:13:40,874 --> 00:13:45,484
process, the, by automating the entire
migration process, the solution can

207
00:13:45,504 --> 00:13:50,884
potentially save substantial resources and
resulting in, Significant cost reduction.

208
00:13:51,884 --> 00:13:56,734
So migrating content from Salesforce
to AEM Guides offers a more powerful

209
00:13:56,764 --> 00:14:00,524
and efficient way to manage your
content by moving from linear

210
00:14:00,524 --> 00:14:03,004
documentation to component based system.

211
00:14:04,074 --> 00:14:08,534
So you improve the way the content
is created, maintained, and reused.

212
00:14:08,874 --> 00:14:12,829
This process not only save time
and money, but also positions your

213
00:14:12,829 --> 00:14:17,114
organization for long term success
in managing growing content needs.

214
00:14:18,034 --> 00:14:22,194
Thank you so much for your attention,
and I hope this gives you a clear

215
00:14:22,194 --> 00:14:26,634
understanding of why migrating
to AEM guides is beneficial

216
00:14:26,954 --> 00:14:28,244
for your content management.

217
00:14:28,674 --> 00:14:29,204
Thank you.

