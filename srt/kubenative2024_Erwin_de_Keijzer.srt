1
00:00:14,700 --> 00:00:15,490
Hello, everyone.

2
00:00:15,650 --> 00:00:18,020
Today I'll be talking about Perseus.

3
00:00:18,220 --> 00:00:18,930
Not just today.

4
00:00:18,939 --> 00:00:20,419
You can watch me whenever you want.

5
00:00:20,919 --> 00:00:23,330
The GitOps native dashboard
visualization tool.

6
00:00:23,919 --> 00:00:24,750
Now I think about it.

7
00:00:25,979 --> 00:00:28,049
When you're watching
it, it's always today.

8
00:00:28,600 --> 00:00:31,929
First of all, I want to say
congratulations to Perseus.

9
00:00:32,039 --> 00:00:33,809
They've been accepted into the CNCF.

10
00:00:34,739 --> 00:00:40,159
At the sandbox maturity level, which
basically means that it's not just a hobby

11
00:00:40,159 --> 00:00:42,039
project from some developers anymore.

12
00:00:42,289 --> 00:00:45,344
It's now officially a CNCF project.

13
00:00:46,614 --> 00:00:48,204
Then about me this is me.

14
00:00:48,205 --> 00:00:50,891
And there I'm Erwin de Keizer.

15
00:00:50,911 --> 00:00:55,731
I'm a CNCF landscaper, as I like to
call myself, or a developer engineer.

16
00:00:56,751 --> 00:01:01,121
And I'm with Fullstack, one of the
first KCSPs of the Netherlands.

17
00:01:01,241 --> 00:01:06,581
And a big thank you for them for
supporting me in my Strange, odd

18
00:01:06,611 --> 00:01:11,851
obsession with talking about cloud
native projects in a word purple onesie.

19
00:01:12,791 --> 00:01:16,521
Also, just to be clear, I
have no affiliation with the

20
00:01:16,521 --> 00:01:18,401
Perseus project whatsoever.

21
00:01:19,271 --> 00:01:23,626
I'm just someone that is enthusiastic
about it and likes about it.

22
00:01:23,856 --> 00:01:25,626
Likes to talk about these kinds of things.

23
00:01:28,336 --> 00:01:31,786
Also, sorry, this is the only time
I'll be using this template for the

24
00:01:31,786 --> 00:01:34,306
slides, because it takes forever.

25
00:01:35,156 --> 00:01:39,236
And, so these are Percy's goals.

26
00:01:39,786 --> 00:01:42,366
. Let's summarize them a bit clearer.

27
00:01:42,926 --> 00:01:47,156
Also from the get go, I
need to say these are goals.

28
00:01:47,716 --> 00:01:49,256
They are not achieved milestones.

29
00:01:49,336 --> 00:01:50,296
We'll get to that later.

30
00:01:50,736 --> 00:01:54,996
So they want to be the standard dashboard
visualization tool for Prometheus.

31
00:01:56,006 --> 00:02:00,416
They want to be GitOps compatible,
which is Perfect, because

32
00:02:00,446 --> 00:02:02,916
we all love GitOps, right?

33
00:02:04,276 --> 00:02:07,726
And they want to provide
different NPM packages, which

34
00:02:07,736 --> 00:02:09,166
on the surface sounds a bit odd.

35
00:02:09,636 --> 00:02:11,516
Is it a goal to provide NPM packages?

36
00:02:11,566 --> 00:02:17,386
Apparently it is, because they want
their advances in visualizations to

37
00:02:17,386 --> 00:02:20,126
also benefit the entire ecosystem.

38
00:02:20,226 --> 00:02:26,231
Even Prometheus, the Prometheus UI could
use their visualizations in the future.

39
00:02:28,071 --> 00:02:35,521
It's also aiming to be Kubernetes
native, which means that they adopt

40
00:02:35,521 --> 00:02:37,771
the same data model as Kubernetes.

41
00:02:38,831 --> 00:02:44,921
And it should provide native CRDs
for, to create visualizations.

42
00:02:45,851 --> 00:02:51,231
How awesome would it be if you just
deploy your service monitor together

43
00:02:51,291 --> 00:02:57,271
with your Percy's dashboard and it gets
automatically provisioned in Percy's.

44
00:02:57,841 --> 00:03:02,391
And they also want to support a
static validation of the dashboard

45
00:03:02,391 --> 00:03:07,731
format which is great especially if
you combine it with GitOps and CICD.

46
00:03:08,341 --> 00:03:12,091
So you know that when you're
provisioning your dashboards and you

47
00:03:12,091 --> 00:03:17,941
have a pipeline that the dashboard will
actually work or at least not break.

48
00:03:18,781 --> 00:03:22,671
And they also want to
support plugins, which, okay.

49
00:03:24,531 --> 00:03:27,761
And now I will show you a live demo.

50
00:03:29,001 --> 00:03:34,221
First of all, we have
a Docker compose file.

51
00:03:34,696 --> 00:03:36,056
that I would like to show you.

52
00:03:37,396 --> 00:03:40,916
So we do tfc.

53
00:03:41,496 --> 00:03:43,306
As you can see, we're just
starting at Prometheus.

54
00:03:44,826 --> 00:03:51,856
And at Perseus, we'll do the latest
without a version, because YOLO.

55
00:03:52,716 --> 00:03:54,546
We do docker compose up.

56
00:03:59,566 --> 00:04:00,036
And

57
00:04:00,536 --> 00:04:01,526
I'll open Perseus.

58
00:04:04,066 --> 00:04:06,006
As you can see, some data persisted.

59
00:04:09,221 --> 00:04:12,771
I'll throw it all away to show
you how everything is done.

60
00:04:14,051 --> 00:04:20,151
First of all, if we go into the
admin area, we have global variables.

61
00:04:20,751 --> 00:04:25,841
We have global data sources and global
secrets, which are basically these

62
00:04:25,841 --> 00:04:29,261
things that can be used by all projects.

63
00:04:29,811 --> 00:04:34,171
And when you add a project,
let's call it ClickOps.

64
00:04:34,301 --> 00:04:35,131
Good suggestion.

65
00:04:36,426 --> 00:04:39,156
You'll see that we also have
variables, data sources, and secrets.

66
00:04:39,176 --> 00:04:45,326
So everything can be defined on a
global level and on a project level.

67
00:04:45,826 --> 00:04:47,946
We can also see the config
that it was started with.

68
00:04:48,226 --> 00:04:50,746
And we have the devils button right here.

69
00:04:53,566 --> 00:04:55,741
We'll Just ignore that exists.

70
00:04:55,981 --> 00:05:00,831
So in the kit, in the ClickOps
project, we're going to add a Toyota

71
00:05:00,831 --> 00:05:04,081
source, because we started Prometheus.

72
00:05:04,141 --> 00:05:06,011
Let's call it Prometheus.

73
00:05:06,141 --> 00:05:14,871
Make the default, no proxy access,
because we can reach Prometheus on

74
00:05:14,871 --> 00:05:18,511
the Prometheus hostname from within
Perseus, but not from the browser.

75
00:05:20,341 --> 00:05:21,141
We'll save it.

76
00:05:22,521 --> 00:05:24,351
And we'll try to create a dashboard.

77
00:05:27,401 --> 00:05:31,251
I'll just quickly go through
things go back later.

78
00:05:32,491 --> 00:05:36,211
And here you can see which panel group.

79
00:05:36,801 --> 00:05:38,441
So you can have multiple panel groups.

80
00:05:38,581 --> 00:05:39,751
You add a name.

81
00:05:41,031 --> 00:05:47,231
We have a time series chart, which is
basically the default chart everyone uses.

82
00:05:48,441 --> 00:05:50,521
And check go routines.

83
00:05:51,021 --> 00:05:52,451
Instantly get a visualization.

84
00:05:53,001 --> 00:05:56,561
If you go into settings you can
see what you have to change.

85
00:05:56,811 --> 00:05:57,881
You can add the legends.

86
00:05:57,901 --> 00:05:59,231
It's only for meters in this case.

87
00:05:59,241 --> 00:06:00,801
There's multiple options here.

88
00:06:01,071 --> 00:06:02,561
Can bars line with.

89
00:06:03,801 --> 00:06:06,311
I think the defaults are quite decent.

90
00:06:07,491 --> 00:06:09,961
It actually looks good by default.

91
00:06:11,671 --> 00:06:17,021
So if we add this, we can also
make it bigger and then save it.

92
00:06:18,281 --> 00:06:24,091
And as you can see, it immediately
made the count of coroutines go up.

93
00:06:25,021 --> 00:06:30,351
And there's also this button that can
instantly make one panel full screen.

94
00:06:31,936 --> 00:06:36,986
And if you want, you can also see the
JSON that was created for this dashboard.

95
00:06:36,986 --> 00:06:42,926
And that's about it for the interface.

96
00:06:42,996 --> 00:06:44,836
We'll get back to it later.

97
00:06:45,386 --> 00:06:46,946
But there's also a sea light tool.

98
00:06:47,336 --> 00:06:52,376
It's like Cube, CTL,
cube Kettle Cube Control.

99
00:06:52,746 --> 00:06:53,166
I don't know.

100
00:06:53,856 --> 00:06:59,406
But then it's for Percys, personally,
I think it should have been called

101
00:06:59,406 --> 00:07:02,256
Per Kettle 'cause it just sounds fun.

102
00:07:02,506 --> 00:07:06,811
But they went with per CLI,
I'm not sure if it's per CLI or

103
00:07:06,811 --> 00:07:09,271
Berkeley for the sake of this.

104
00:07:09,916 --> 00:07:13,106
Presentation, I will call it
Berkeley because that's just

105
00:07:13,146 --> 00:07:14,706
a lot funnier to pronounce.

106
00:07:16,016 --> 00:07:19,786
And here we'll go through these files.

107
00:07:20,456 --> 00:07:23,356
So we have some files here.

108
00:07:23,386 --> 00:07:26,786
We have a data source.

109
00:07:27,826 --> 00:07:28,666
We have a project.

110
00:07:30,036 --> 00:07:32,166
First of all, we should
create the project.

111
00:07:32,666 --> 00:07:35,476
Because everything else
depends on the project.

112
00:07:36,816 --> 00:07:42,166
And that's why, this one is a bit
more clear, it's numbered like this,

113
00:07:42,826 --> 00:07:46,096
which makes sure that everything
gets applied in the correct order.

114
00:07:47,336 --> 00:07:48,036
So when we now do

115
00:07:50,126 --> 00:07:56,116
Berkeley apply MD, you see that project,
data source dashboard have been created.

116
00:07:58,271 --> 00:08:04,361
And if you go back to the homepage, we
now also have a Persis 2024 project.

117
00:08:05,801 --> 00:08:08,261
And then we can go into
the black box monitor.

118
00:08:08,341 --> 00:08:14,371
And here we see some extra things that
are possible with for the dashboards.

119
00:08:14,731 --> 00:08:21,281
So these variables, they are created by
reading labels from Prometheus itself.

120
00:08:21,281 --> 00:08:29,091
And so we have the gauge charge, we have
a single stat which nicely translates

121
00:08:29,471 --> 00:08:33,721
seconds into a human readable format.

122
00:08:34,601 --> 00:08:37,521
Because if you take a
look at this raw data,

123
00:08:40,201 --> 00:08:45,991
if I make this a decimal,
you would see that it's fine.

124
00:08:46,231 --> 00:08:47,071
5.

125
00:08:47,281 --> 00:08:49,831
96 million seconds,

126
00:08:50,421 --> 00:08:54,091
which is not something that I
can instantly translate in my

127
00:08:54,091 --> 00:08:56,291
mind into a normal duration.

128
00:08:56,301 --> 00:08:59,011
But if you make it seconds,
it makes a lot more sense.

129
00:08:59,511 --> 00:09:03,001
I'll also, I show you the variable.

130
00:09:03,611 --> 00:09:10,481
So we created a variable ourselves,
which is a list it's created

131
00:09:10,501 --> 00:09:12,271
from Prometheus label values.

132
00:09:12,801 --> 00:09:13,761
So it uses the default Prometheus.

133
00:09:15,601 --> 00:09:18,741
The label name is instance.

134
00:09:19,041 --> 00:09:24,061
And we select the series by using
the job black box, because I have a

135
00:09:24,061 --> 00:09:26,421
black box monitor attached somewhere.

136
00:09:27,091 --> 00:09:32,681
You can also allow multiple values and all
options, but for now we didn't do that.

137
00:09:34,081 --> 00:09:35,731
And then you can see that.

138
00:09:37,026 --> 00:09:41,776
The toggle works and automatically
gets updated with new values as well.

139
00:09:42,296 --> 00:09:48,996
Here you also have the things that you
normally see when you use Grafana as well.

140
00:09:50,456 --> 00:09:53,196
So you can have the date interval.

141
00:09:53,376 --> 00:09:57,916
If you're interested in another
interval, you can also select that.

142
00:09:59,696 --> 00:10:01,406
You can set that auto refresh.

143
00:10:02,001 --> 00:10:04,441
And again, you can see
the dashboard itself.

144
00:10:05,001 --> 00:10:10,541
We also have other dashboards, which
basically amount to the same thing.

145
00:10:10,551 --> 00:10:12,291
So are not that interesting.

146
00:10:13,441 --> 00:10:17,681
Something I could show
you is if I edit this

147
00:10:20,761 --> 00:10:23,051
panel group, it's not very descriptive.

148
00:10:25,171 --> 00:10:33,921
I call this usage charts and This
one can be a bit more like this.

149
00:10:36,201 --> 00:10:39,361
And we'll make this a bit bigger.

150
00:10:39,891 --> 00:10:41,231
This is where the magic happens.

151
00:10:42,721 --> 00:10:44,311
And then we save the chart.

152
00:10:45,001 --> 00:10:53,251
And if we now go back to the command
line, we can directly get dash.

153
00:10:55,226 --> 00:10:58,421
I think we call it per 2024.

154
00:10:58,781 --> 00:11:06,851
We see these dashboards that are available
and if we do Berkeley, describe dashboard.

155
00:11:07,421 --> 00:11:10,736
We updated Wirecard per,

156
00:11:13,391 --> 00:11:21,131
sorry, 2024 and we do it
in the Wirecard dashboard.

157
00:11:21,631 --> 00:11:24,801
We can also see that a div was created.

158
00:11:26,301 --> 00:11:29,951
If we check out the div you'll see that
the white space has changed quite a lot.

159
00:11:30,501 --> 00:11:32,211
We'll just save this one.

160
00:11:37,481 --> 00:11:41,791
And for the sake of the
demo, we'll do it again.

161
00:11:42,786 --> 00:11:47,176
because it's a lot easier to
see the changes that were made.

162
00:11:48,596 --> 00:11:52,586
If the whitespace doesn't
change, we'll save it again.

163
00:11:53,566 --> 00:11:57,376
We'll do the same this
and then we do a kitch.

164
00:11:58,666 --> 00:12:03,386
And now you see that the div is quite
small because we actually only changed

165
00:12:04,306 --> 00:12:09,116
the width and the alignment and you
also correctly see the revisions.

166
00:12:10,456 --> 00:12:12,496
So if we commit this,

167
00:12:13,046 --> 00:12:16,646
we now have these changes in code.

168
00:12:17,146 --> 00:12:21,356
Big question, of course, is how
does it stack up against Grafana?

169
00:12:21,856 --> 00:12:29,816
I think this is a question of personal
preference because customization

170
00:12:29,826 --> 00:12:32,436
wise, it's a lot more limited.

171
00:12:34,021 --> 00:12:35,071
Grafana right now.

172
00:12:35,571 --> 00:12:37,531
It's, there are just many features.

173
00:12:37,881 --> 00:12:40,911
I think the most essential
features are there.

174
00:12:41,641 --> 00:12:46,291
But the thing I really like
about Grafana is the explore tab.

175
00:12:47,181 --> 00:12:49,161
There's nothing like that right now.

176
00:12:50,251 --> 00:12:50,961
Style.

177
00:12:51,556 --> 00:12:55,544
I think the default dashboards
of Precise look better than the

178
00:12:55,544 --> 00:12:57,496
default dashboards of Grafana.

179
00:12:58,366 --> 00:13:00,416
That's a matter of personal
preference, of course.

180
00:13:01,296 --> 00:13:05,166
The ease of use I think
it's about the same.

181
00:13:05,786 --> 00:13:07,206
I've used Grafana a lot.

182
00:13:07,676 --> 00:13:13,286
I think for the past 10 years, that's
been the go to dashboarding tool for me.

183
00:13:13,286 --> 00:13:13,396
Thank you.

184
00:13:13,896 --> 00:13:17,906
So I know my way around it, but
I've only recently started using

185
00:13:18,526 --> 00:13:23,426
Percy's and it's actually quite
easy to learn and understand.

186
00:13:25,136 --> 00:13:32,926
The GitObsability is very nice, as you
just saw with the Berkeley CLI tool.

187
00:13:33,916 --> 00:13:35,776
And the future I don't know.

188
00:13:37,136 --> 00:13:38,486
It's bright, I think.

189
00:13:38,896 --> 00:13:40,696
It's been accepted into the CNCF.

190
00:13:42,206 --> 00:13:45,646
There's a lot going on with the project.

191
00:13:46,766 --> 00:13:52,296
There's a lot of potential, but it's
also still a bit murky, if you ask me.

192
00:13:52,676 --> 00:13:56,866
I don't know what level it
will reach in the coming time.

193
00:13:59,641 --> 00:14:06,111
I think we also need to talk
about dashboards as code.

194
00:14:07,191 --> 00:14:14,541
The Percy's project itself really pushes
the dashboards as code concept or DAC.

195
00:14:16,031 --> 00:14:18,171
And right now they have
two solutions for it.

196
00:14:18,691 --> 00:14:19,331
Excuse me.

197
00:14:20,961 --> 00:14:23,971
You can use Q or the Go SDK.

198
00:14:25,126 --> 00:14:27,746
And what is Q anyway?

199
00:14:29,816 --> 00:14:33,776
The, it stands for
configure, unify, execute.

200
00:14:34,306 --> 00:14:38,836
So it allows you to validate, define
and use dynamic and text based data.

201
00:14:38,836 --> 00:14:46,336
So it's basically a better toml.

202
00:14:47,006 --> 00:14:47,456
I don't know.

203
00:14:48,026 --> 00:14:54,856
It's like YAML and toml and Python and
Go had a four way and this is the very

204
00:14:54,856 --> 00:15:03,066
odd baby it is possible to generate
Q templates or schemas from Go types.

205
00:15:03,066 --> 00:15:05,196
It's what the Percy's project does.

206
00:15:06,116 --> 00:15:13,116
So there the Q definitions are
always aligned with the actual code.

207
00:15:15,481 --> 00:15:20,311
And Q also allows you to have
if statements, for loops.

208
00:15:20,731 --> 00:15:28,166
So it makes it easier to use some kind of
programming language which is Maybe you

209
00:15:28,166 --> 00:15:33,506
shouldn't call Q a programming language,
but it does have a lot of similarities,

210
00:15:33,546 --> 00:15:38,586
more than TML or YAML, and allows you
to generate dashboards from there.

211
00:15:39,066 --> 00:15:44,566
So if you want a uniform style across
all your dashboards, it's quite easy to

212
00:15:44,566 --> 00:15:52,466
achieve, especially if you have multiple
environments that you're monitoring, like

213
00:15:53,456 --> 00:15:55,896
development, acceptance, and production.

214
00:15:56,396 --> 00:16:02,386
If the only change is the data
source, then you can just use the same

215
00:16:02,396 --> 00:16:04,486
dashboards across all those environments.

216
00:16:04,586 --> 00:16:08,916
If there's some naming conventions
or labels that are different across.

217
00:16:10,131 --> 00:16:15,641
environments, you can use Q with a
for loop and some kind of if statement

218
00:16:15,781 --> 00:16:19,191
to make sure that the same dashboard
gets deployed to all environments

219
00:16:19,261 --> 00:16:20,521
with the changes that are needed.

220
00:16:22,101 --> 00:16:27,581
I also have an example of
what the Q format looks like.

221
00:16:27,601 --> 00:16:29,371
So we go to Q.

222
00:16:31,881 --> 00:16:33,241
We have a dashboard.

223
00:16:35,201 --> 00:16:35,461
Oh,

224
00:16:36,021 --> 00:16:36,291
yep.

225
00:16:36,791 --> 00:16:41,361
For people that are familiar with
Go, this looks very familiar at

226
00:16:41,361 --> 00:16:42,861
least the package and the imports.

227
00:16:43,331 --> 00:16:49,551
So it uses imports from GitHub as
well, the queue schemas to know the

228
00:16:50,591 --> 00:16:52,541
schemas of the things we're using.

229
00:16:52,571 --> 00:16:53,221
And.

230
00:16:55,251 --> 00:16:58,421
This is what a dashboard will look like.

231
00:16:59,391 --> 00:17:06,501
It looks very similar to the YAML,
but then with more pound signs.

232
00:17:07,991 --> 00:17:14,271
And if we do Q export out YAML,
we actually get the same YAML out

233
00:17:15,481 --> 00:17:19,611
that was generated by the Q file
that can be understood by Perseus.

234
00:17:19,626 --> 00:17:25,346
And of course, this was the queue.

235
00:17:25,386 --> 00:17:27,096
There's also the Go SDK.

236
00:17:27,276 --> 00:17:28,806
I also have a demo for that.

237
00:17:29,206 --> 00:17:36,686
If you go to Go in this project then
we have a Go file, which looks very

238
00:17:36,686 --> 00:17:38,496
similar as that what we just saw.

239
00:17:40,006 --> 00:17:44,856
So this is the Go to
create a new dashboard.

240
00:17:46,176 --> 00:17:50,286
And if we do Berkeley Duck

241
00:17:51,836 --> 00:17:52,346
Build

242
00:17:52,896 --> 00:17:54,656
Oh, sorry, Berkeley Duck

243
00:17:55,206 --> 00:18:02,996
You will see it will output it here
And if we do bot build main output We

244
00:18:02,996 --> 00:18:08,351
again get a YAML  you can also just
run the project The main go file.

245
00:18:09,401 --> 00:18:11,231
It will also give you a

246
00:18:14,101 --> 00:18:18,481
YAML output that you can
use with the Percy's CLI.

247
00:18:21,201 --> 00:18:23,371
Okay, now for the gotchas.

248
00:18:25,781 --> 00:18:28,891
Dashboards and panels don't
save unless you click save.

249
00:18:30,311 --> 00:18:37,061
This is something that will annoy
you especially because it's not

250
00:18:37,061 --> 00:18:38,706
that clear that you're in edit mode.

251
00:18:39,056 --> 00:18:40,086
Now you're in edit mode.

252
00:18:41,736 --> 00:18:43,916
You can easily think, okay, let's go here.

253
00:18:45,306 --> 00:18:48,816
But if we go back to the wire
guard, that this chart that

254
00:18:48,926 --> 00:18:50,586
we just deleted is back again.

255
00:18:52,276 --> 00:18:55,606
If you refresh, it's instantly back.

256
00:18:55,746 --> 00:18:59,596
This can be very annoying, especially
if you were busy adding a lot of

257
00:18:59,596 --> 00:19:04,556
panels and then just decide to
refresh, you will lose work that way.

258
00:19:07,006 --> 00:19:09,486
The names don't match
the names in the CLI.

259
00:19:09,896 --> 00:19:13,376
If you create something
in the user interface with

260
00:19:13,806 --> 00:19:15,256
spaces or special characters.

261
00:19:15,316 --> 00:19:19,816
They get replaced with underscores
in a way that could surprise you.

262
00:19:21,586 --> 00:19:23,966
A lot of units are missing
and not customizable.

263
00:19:23,966 --> 00:19:25,096
I think this is the biggest one.

264
00:19:25,666 --> 00:19:26,996
It's very cloud native.

265
00:19:27,451 --> 00:19:28,081
oriented.

266
00:19:28,361 --> 00:19:31,111
So you can have bytes, you can
have time, you can have rates,

267
00:19:32,521 --> 00:19:36,921
but stuff that's missing is like
currencies or even SI units.

268
00:19:37,001 --> 00:19:40,591
So I also have a dashboard
that monitors my power usage.

269
00:19:41,561 --> 00:19:45,231
There's no option to use the kilowatt
or kilowatt hours as your unit.

270
00:19:45,731 --> 00:19:49,021
The entire Kubernetes
integration is still missing.

271
00:19:49,866 --> 00:19:56,226
There is a Kubernetes operator GitHub
repository, which does have some

272
00:19:56,226 --> 00:20:00,836
activity, but there's the Kubernetes
integration doesn't exist yet.

273
00:20:01,386 --> 00:20:07,956
They also have a concept that's called
ephemeral dashboard, which is basically

274
00:20:07,956 --> 00:20:14,461
a dashboard that has a TTL, which sounds
like a great idea for CICD workflows.

275
00:20:15,081 --> 00:20:19,351
But if you try to use it it
doesn't work with Berkeley yet.

276
00:20:20,491 --> 00:20:23,811
The documentation still is limited.

277
00:20:25,401 --> 00:20:31,811
And by default, the Berkeley doc setup
to set up dashboards as code fails on

278
00:20:31,811 --> 00:20:34,081
macOS because of some permission issues.

279
00:20:36,231 --> 00:20:37,491
They are fixable.

280
00:20:37,931 --> 00:20:42,891
It's not the end of the world,
but there's still some way to go.

281
00:20:43,851 --> 00:20:50,961
Also, because we're all SREs, and
DevOps engineers, and software

282
00:20:51,031 --> 00:20:57,851
engineers, this is also an invitation
for all of you to get involved.

283
00:20:58,361 --> 00:21:00,321
I think this project has a lot of future.

284
00:21:01,611 --> 00:21:08,531
And if you want to improve this project
and want to use it, please contribute.

285
00:21:09,081 --> 00:21:11,541
I will thank you a lot personally.

286
00:21:11,711 --> 00:21:15,431
Send me an email if you've
contributed and I will send you a

287
00:21:15,461 --> 00:21:17,351
personal thank you note as well.

288
00:21:19,166 --> 00:21:21,136
For the rest, this is it.

289
00:21:22,016 --> 00:21:27,186
Thank you very much for taking
the time to watch all this and

290
00:21:27,326 --> 00:21:29,206
hopefully see you next time.

