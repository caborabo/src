1
00:00:14,080 --> 00:00:15,040
Thanks for joining me.

2
00:00:15,080 --> 00:00:18,759
My name is Samuel Barufi and I'm
a Principal Solutions Architect

3
00:00:19,059 --> 00:00:20,839
with Amazon Web Services.

4
00:00:21,359 --> 00:00:25,760
Today I'll be presenting about how
you can craft a secure and scalable

5
00:00:25,760 --> 00:00:30,279
generative AI solution using AWS services.

6
00:00:30,834 --> 00:00:36,295
My goal is to show some open source code
and open source solution that allows

7
00:00:36,305 --> 00:00:41,114
you and your platform engineering teams
to potentially have your own private

8
00:00:41,114 --> 00:00:43,804
solution to expedite with Gen AI.

9
00:00:44,785 --> 00:00:45,644
So let's get started.

10
00:00:46,644 --> 00:00:52,484
So this is a very common
scenario across any road that.

11
00:00:53,015 --> 00:00:54,535
It's pretty much uses technology.

12
00:00:54,785 --> 00:00:58,695
You're probably spending hours and
hours writing repetitive tasks, writing,

13
00:00:58,815 --> 00:01:04,295
repetitive code snippets, emails to your
manager, maybe reports to your leadership,

14
00:01:04,295 --> 00:01:08,355
creating different proposals if you're
working on consultancy, and it's a lot

15
00:01:08,355 --> 00:01:10,335
of tedious and it's overwhelming, right?

16
00:01:10,855 --> 00:01:17,685
The image just illustrate how potentially
all of us feel on a normal day, as we a

17
00:01:17,735 --> 00:01:20,894
believer and progress on our job duties.

18
00:01:21,375 --> 00:01:27,265
but what if we could find solutions
that are private, secure, and available

19
00:01:27,265 --> 00:01:34,024
for us and our teams to really
alleviate the border, the boredom of

20
00:01:34,064 --> 00:01:36,094
those repetitive solutions, right?

21
00:01:36,404 --> 00:01:41,294
We're all familiar with tools like
such, HDBT, Cloud, and perplexity

22
00:01:41,504 --> 00:01:44,974
and many other ones that have become
very popular in the last two years.

23
00:01:45,334 --> 00:01:48,234
so my goal is not to show you
a replacement of those tools,

24
00:01:48,494 --> 00:01:49,479
but potentially you will find.

25
00:01:49,729 --> 00:01:53,859
show you an architecture and a
solution that is open source that you

26
00:01:53,859 --> 00:01:58,009
can build on top of that and really
have full control of your data and

27
00:01:58,009 --> 00:02:00,019
security and deploy that on AWS.

28
00:02:01,759 --> 00:02:05,699
So because this is platform engineering
conference, it's important to set the

29
00:02:05,699 --> 00:02:10,629
context a little bit on how potentially
a solution like the one I'm about to

30
00:02:10,629 --> 00:02:14,799
present could help platform engineer
or platform engineering teams.

31
00:02:15,149 --> 00:02:18,839
so it's very important that
platform engineers focus on.

32
00:02:19,239 --> 00:02:22,449
As a catalyst for developer
productivity, right?

33
00:02:22,449 --> 00:02:24,679
So you want to enable a
lot of self servicing.

34
00:02:25,034 --> 00:02:27,954
solutions and really reduce
operational bottlenecks.

35
00:02:27,964 --> 00:02:31,694
generative AI really allows you
to become a much more productive

36
00:02:31,694 --> 00:02:34,034
developer and platform engineer.

37
00:02:34,384 --> 00:02:38,084
You also want to navigate the
complex, of modern tech stack.

38
00:02:38,214 --> 00:02:41,214
AWS is an example that we have over 200.

39
00:02:42,239 --> 00:02:46,599
services and getting in depth and
getting to know really then, it takes

40
00:02:46,599 --> 00:02:50,749
a lot of effort and Gen AI can help
us expedite that learning curve.

41
00:02:51,159 --> 00:02:52,839
you also want to balance

42
00:02:54,939 --> 00:02:56,519
innovation with stability.

43
00:02:56,519 --> 00:03:00,549
We don't just want to move as fast
as possible with no stability because

44
00:03:00,559 --> 00:03:02,829
they'll probably give us some downturn.

45
00:03:02,849 --> 00:03:06,479
that is another goal that you should
have, and he wants to, he wanna ensure

46
00:03:06,479 --> 00:03:09,809
consistent security and compliance,
and that is potentially one of the

47
00:03:09,819 --> 00:03:13,909
main points or why potentially you
should consider, building a solution

48
00:03:13,909 --> 00:03:18,259
for your team that have full control
rather than buying something outside.

49
00:03:18,419 --> 00:03:20,819
or if you're not comfortable,
it's completely up to your

50
00:03:20,874 --> 00:03:25,259
choice and you wanna enhance your
customers, which are developers.

51
00:03:25,469 --> 00:03:27,899
You wanna enhance their
experience by using your platform.

52
00:03:29,139 --> 00:03:33,299
So with that said, at a very high
level, what I'm going to show to you

53
00:03:33,299 --> 00:03:39,179
today, both from a solution architecture
pattern and a UI is you're going to

54
00:03:39,189 --> 00:03:45,539
have a, a place, a UI, or you can input
text and images, that, that solution

55
00:03:45,549 --> 00:03:50,429
is hosted within your own AWS account
with your own security controls.

56
00:03:50,469 --> 00:03:55,359
And you have full control about the data
and, the authorization, who authenticated

57
00:03:55,469 --> 00:03:57,549
it, who has permissions of the solution.

58
00:03:58,059 --> 00:04:03,289
Once the, that data is processed, you're
going to send to some AWS services

59
00:04:03,329 --> 00:04:07,529
that we're going to talk today, like
Bedrock, where it allows you to.

60
00:04:08,149 --> 00:04:12,919
Call large language models or
multimodality models, on a pay as you

61
00:04:12,919 --> 00:04:15,329
go per token input and output token.

62
00:04:15,339 --> 00:04:19,509
So you're going to have that processing
and generation for you, and then you are

63
00:04:19,509 --> 00:04:21,479
going to have the polished content, right?

64
00:04:22,079 --> 00:04:27,359
So what I'm going to do next, I will show
you some capabilities of the solution

65
00:04:27,469 --> 00:04:32,869
that is that I have open source as part
of the AWS samples GitHub repository.

66
00:04:33,239 --> 00:04:37,979
And, just keep in mind, this is not
a, recommendation for you to just

67
00:04:37,979 --> 00:04:42,739
use the solution that is available on
GitHub as it is, but also for you to

68
00:04:42,739 --> 00:04:44,769
look at it and build on top of that.

69
00:04:44,859 --> 00:04:48,789
Also look at the solution as an
architecture pattern for potentially

70
00:04:48,789 --> 00:04:52,279
building applications for your teams,
for your platform engineer teams

71
00:04:52,479 --> 00:04:55,879
with a similar capability, because
it does solve a lot of the problems

72
00:04:56,109 --> 00:05:00,279
that generative AI have posed to
us in the last couple of years.

73
00:05:00,849 --> 00:05:03,864
So let's just look what this
solution could look like.

74
00:05:04,724 --> 00:05:07,914
So the idea of this solution
is you're going to have a UI.

75
00:05:08,264 --> 00:05:10,434
the UI is going to be authenticated.

76
00:05:10,434 --> 00:05:15,144
So you're going to be able to create
users and each users is going to have

77
00:05:15,144 --> 00:05:17,914
its own secure sandbox environment.

78
00:05:18,134 --> 00:05:22,304
In this case, what on the demo here,
you have a playground platform,

79
00:05:22,524 --> 00:05:26,274
which is a very simple place
where you can input some text.

80
00:05:26,514 --> 00:05:27,984
You can select models.

81
00:05:28,044 --> 00:05:31,504
Right now, the solution supports
cloud models for Entropic.

82
00:05:31,849 --> 00:05:33,589
through AWS Bedrock.

83
00:05:33,819 --> 00:05:37,419
So in this demo, you can see
that it has a couple of things

84
00:05:37,419 --> 00:05:38,249
that are really important.

85
00:05:38,369 --> 00:05:42,639
First of them, first of them is, you
are authenticated into the solution.

86
00:05:42,999 --> 00:05:46,619
Second is it supports the
streaming of your response, right?

87
00:05:46,619 --> 00:05:51,519
So you're going to send a prompt
like right upon about New York, that

88
00:05:51,599 --> 00:05:56,269
response is going to be streaming
from, AWS account into the UI here,

89
00:05:56,509 --> 00:05:59,999
and then you are able to manipulate,
copy and do whatever you want, right?

90
00:06:00,239 --> 00:06:01,359
That is really important.

91
00:06:01,589 --> 00:06:04,529
So that is just one of the
capabilities is Playground, but

92
00:06:04,529 --> 00:06:06,019
Playground, there is nothing new.

93
00:06:06,209 --> 00:06:09,819
It's just a way for you to maybe
do some testing and play around.

94
00:06:10,629 --> 00:06:16,109
The really, important benefit of this UI,
if you think about it, or this solution

95
00:06:16,109 --> 00:06:18,429
is the capability of create templates.

96
00:06:19,014 --> 00:06:23,654
Templates are nothing more than
a way for you to create prompts.

97
00:06:24,444 --> 00:06:28,574
So if you're familiar with generative
AI, it's really important that

98
00:06:28,654 --> 00:06:32,694
you do a lot of prompt engineering
for whatever you're trying to do.

99
00:06:33,004 --> 00:06:37,684
So in the example on the screen, let's say
you want to create a prompt that is really

100
00:06:37,684 --> 00:06:41,739
good at Creating product names, right?

101
00:06:42,069 --> 00:06:47,019
I know it's a simplistic example, but
you can think about anything here, right?

102
00:06:47,389 --> 00:06:51,179
So what the tool allows you to do
is to create templates that can

103
00:06:51,189 --> 00:06:53,549
be reused after the fact by you.

104
00:06:53,769 --> 00:06:58,179
Or if you decide by other people, you
can see that the templates allows you to

105
00:06:58,189 --> 00:07:00,799
have a visibility of public and private.

106
00:07:01,029 --> 00:07:04,789
What the public and private means
is public means only people.

107
00:07:05,694 --> 00:07:12,054
They are authenticated to your deployed
solution who have access, but every user

108
00:07:12,054 --> 00:07:16,854
within that deployment will have access
to it, the user needs to be authenticated.

109
00:07:17,444 --> 00:07:22,324
A private visibility means only you as
the creator will be able to consume that.

110
00:07:22,494 --> 00:07:24,324
and you can create prompts.

111
00:07:24,434 --> 00:07:28,594
You are going to allow you to
input, a model selection that you

112
00:07:28,604 --> 00:07:30,804
have, curated that prompt for.

113
00:07:31,324 --> 00:07:35,494
A system prompt giving a specific
instruction and finally the user data.

114
00:07:35,494 --> 00:07:37,174
If you see here on the
user data and putting.

115
00:07:37,474 --> 00:07:42,584
the input data between, curly brackets and
the dollar sign, that is just an automatic

116
00:07:42,604 --> 00:07:46,204
variable that when you're going to be
able to consume the template, I'm going

117
00:07:46,204 --> 00:07:49,534
to show in a moment, when you consume the
template, whatever data you're going to

118
00:07:49,544 --> 00:07:53,304
be providing is going to automatically
replace that variable for you.

119
00:07:53,664 --> 00:07:54,674
And you have easy searchability.

120
00:07:56,609 --> 00:08:01,329
as a user now, you can either
consume already curated or created

121
00:08:01,369 --> 00:08:04,949
templates from your team, or you
can create your own templates or

122
00:08:04,949 --> 00:08:08,469
make those templates available for
your team by setting as public here.

123
00:08:08,749 --> 00:08:12,699
But it's important to highlight public
just doesn't mean that anyone outside

124
00:08:12,699 --> 00:08:13,839
the internet will be able to access.

125
00:08:14,299 --> 00:08:19,169
It's just within your deployed solution
here, users who have authenticated

126
00:08:19,179 --> 00:08:24,099
will be able to consume that
within this box of authentication.

127
00:08:25,474 --> 00:08:30,004
Once you have created the templates,
you can go into the activity tab and you

128
00:08:30,004 --> 00:08:32,404
are able to select specific, prompts.

129
00:08:32,454 --> 00:08:35,984
In this case, I will show you
an example that I want to use

130
00:08:36,304 --> 00:08:38,754
the product naming pro template.

131
00:08:38,754 --> 00:08:40,854
So I want to create names for my product.

132
00:08:41,444 --> 00:08:46,364
I select the product template, and
then they give a description, right?

133
00:08:46,374 --> 00:08:49,234
Descriptions like, Hey, I want
you to create a noise canceller,

134
00:08:49,574 --> 00:08:51,594
headphone, headless headphone.

135
00:08:52,079 --> 00:08:53,689
how do I actually create that?

136
00:08:53,779 --> 00:09:01,089
So you'll be able to see that what
happens here, he actually sends to AWS

137
00:09:01,089 --> 00:09:06,879
and Bedrock, the whole prompt curated with
your data, and he provides you with the

138
00:09:06,889 --> 00:09:09,529
proper output, and then you can inspect.

139
00:09:09,959 --> 00:09:13,589
What is those, what that template,
if you're an advanced user can

140
00:09:13,619 --> 00:09:17,129
inspect what that template is adding,
like the system prompt and what

141
00:09:17,129 --> 00:09:20,879
is getting replaced the input data
with whatever information, right?

142
00:09:21,249 --> 00:09:25,109
and you were able to change those
advanced settings of every time

143
00:09:25,109 --> 00:09:26,459
you do the inference, right?

144
00:09:26,769 --> 00:09:31,614
So now from your teams, these become
very interesting because It allows

145
00:09:31,614 --> 00:09:37,024
you to have multiple templates that
a user can be an export, but it can

146
00:09:37,024 --> 00:09:41,254
share the template and that prompt with
other people for easy of consumption.

147
00:09:43,154 --> 00:09:46,334
Another very important feature
of the solution is the capability

148
00:09:46,334 --> 00:09:48,944
of providing images as an input.

149
00:09:49,314 --> 00:09:54,544
All those core three models that the
solution is currently using from Entropiq.

150
00:09:54,839 --> 00:09:58,069
support what is called the multi
modality, meaning it supports

151
00:09:58,199 --> 00:10:01,669
text and also image as inputs.

152
00:10:01,899 --> 00:10:05,599
So in this case, I have uploaded
a headphone picture and I've said,

153
00:10:05,899 --> 00:10:09,619
could you please describe the
image uploaded in details to me?

154
00:10:09,789 --> 00:10:11,799
And you can see it describes in detail.

155
00:10:12,269 --> 00:10:16,489
Now I'm using the playground here,
but this vision capability can

156
00:10:16,529 --> 00:10:18,599
also be added into the template.

157
00:10:19,014 --> 00:10:25,234
I can have a template that has
curated prompt and once I consume

158
00:10:25,234 --> 00:10:31,194
the template on the activity, I can
input images that enhance my data,

159
00:10:31,434 --> 00:10:34,114
input, to the system itself, right?

160
00:10:34,614 --> 00:10:38,204
so far you were able to see how you
can easily check the playground,

161
00:10:38,204 --> 00:10:41,134
how you can create templates,
which are curated prompts, how

162
00:10:41,144 --> 00:10:42,654
you can consume those templates.

163
00:10:42,984 --> 00:10:48,054
a common thing that these generative
AI solutions provide is the capability

164
00:10:48,304 --> 00:10:50,934
of using a chat conversation, right?

165
00:10:51,264 --> 00:10:55,024
So the tool also provides you
with the ability to use chat.

166
00:10:55,814 --> 00:11:00,604
And as you might expect, the chat
allows you to also select templates.

167
00:11:01,094 --> 00:11:06,674
So you can keep a history, you can keep
the context of your conversation of the

168
00:11:06,674 --> 00:11:11,494
first prompt in this example, here in
using again, the product naming template.

169
00:11:11,524 --> 00:11:15,884
And I've asked with a specific
description and it was sent to the model.

170
00:11:15,924 --> 00:11:19,524
And I received some, answers back and
I can say, the names are good, but

171
00:11:19,524 --> 00:11:20,884
could you please come up with five?

172
00:11:21,154 --> 00:11:24,874
more different names that are a bit more
catchy and are great for marketing, right?

173
00:11:25,184 --> 00:11:26,844
And you can see that I will send it again.

174
00:11:26,884 --> 00:11:31,624
the context and all of that is being baked
already from the back in the backend that

175
00:11:31,624 --> 00:11:33,124
we're going to demonstrate in a moment.

176
00:11:33,474 --> 00:11:37,724
And if you are an advanced user and you
want to choose different temperature or

177
00:11:37,764 --> 00:11:40,834
top K or top P, you have that capability.

178
00:11:41,764 --> 00:11:46,014
We haven't talked about another capability
of this tool, which is the history.

179
00:11:46,024 --> 00:11:47,924
Every time you use the playground.

180
00:11:48,419 --> 00:11:52,339
the activity, and the activity
or templates, that data will be

181
00:11:52,349 --> 00:11:56,539
stored on a database that you have
control within your AWS account and

182
00:11:56,539 --> 00:11:58,019
you can check the history, right?

183
00:11:58,019 --> 00:11:59,129
So you have the capability.

184
00:11:59,180 --> 00:12:05,350
so far we, I've shown you the capabilities
and the end product, but okay, you've

185
00:12:05,350 --> 00:12:09,640
seen the capabilities, you've seen, the
potential, the benefits of this tool.

186
00:12:10,120 --> 00:12:11,980
But you might be asking me right now.

187
00:12:12,355 --> 00:12:14,435
how does this work under the hood?

188
00:12:14,455 --> 00:12:18,405
What is the architecture that you've put
in place in order to make this happen with

189
00:12:18,405 --> 00:12:23,584
the streaming, with the authentication and
all that, how much does the cost, right?

190
00:12:23,824 --> 00:12:26,634
How can you be so sure that
it's cost efficient, right?

191
00:12:26,864 --> 00:12:28,714
So those are all very good, great.

192
00:12:28,894 --> 00:12:30,644
Those are very great questions.

193
00:12:30,644 --> 00:12:35,704
And my intent for the next, maybe
15 minutes is to really answer

194
00:12:35,704 --> 00:12:37,194
some of those questions to you.

195
00:12:37,654 --> 00:12:39,784
So the solution here.

196
00:12:42,564 --> 00:12:45,384
So the name of the solution that we
have open source, and I'm going to

197
00:12:45,384 --> 00:12:48,344
share you with some of the links and
some of the calls that you can see

198
00:12:48,704 --> 00:12:53,664
the solution aims to, the name of the
solution is employee productivity,

199
00:12:53,874 --> 00:12:57,674
improve employee productivity with
generative AI assistant example.

200
00:12:57,694 --> 00:12:58,624
That is the name of the solution.

201
00:12:59,399 --> 00:13:04,799
What it aims to do is to automate a
lot of the repetitive tasks with AI.

202
00:13:05,039 --> 00:13:07,919
And it's all built on
AWS serverless services.

203
00:13:07,919 --> 00:13:09,459
We're going to talk
about that in a moment.

204
00:13:09,699 --> 00:13:10,509
And Bedrock.

205
00:13:10,589 --> 00:13:13,479
We're also going to talk about Bedrock
in a moment if you're not familiar.

206
00:13:13,819 --> 00:13:16,279
The benefits is it
boosts your productivity.

207
00:13:16,469 --> 00:13:20,409
It really streamlines workflows
with the reusability of templates.

208
00:13:20,839 --> 00:13:26,989
It is scalable because you're going to
be able to have one user or 5, 000 users.

209
00:13:27,039 --> 00:13:28,459
And the application should scale.

210
00:13:28,864 --> 00:13:34,734
With those, growth of users because
the serverless capability and it's open

211
00:13:34,734 --> 00:13:39,164
source with a very simple deployment
that I'm gonna show on the demo, the

212
00:13:39,164 --> 00:13:41,294
instructions and on GitHub for you.

213
00:13:41,884 --> 00:13:43,944
but remember, this is
an architecture partner.

214
00:13:43,964 --> 00:13:45,794
It's not a full fledged solution.

215
00:13:46,094 --> 00:13:51,114
I'm not here selling the solution as for
you to go and deploy in production and

216
00:13:51,124 --> 00:13:53,114
say okay, Sam has told me to do this.

217
00:13:53,154 --> 00:13:56,794
It's already, this is an architecture
pattern that you can look at example,

218
00:13:56,984 --> 00:14:00,654
build more features, build new
capabilities, change specific settings

219
00:14:01,174 --> 00:14:06,494
to meet your customer, your own company
demands or requirements and so forth.

220
00:14:07,174 --> 00:14:12,574
Let's talk about some of the services
that we've used into the solution

221
00:14:12,584 --> 00:14:14,234
before I share an architecture diagram.

222
00:14:15,314 --> 00:14:20,414
So here are a list of all the services
that are going to be used if you deploy

223
00:14:20,414 --> 00:14:22,434
the solution on your AWS account.

224
00:14:23,114 --> 00:14:25,014
So you can see a list of nine services.

225
00:14:25,389 --> 00:14:28,799
so let's just start with a very,
I'm not going to, I'm not going to

226
00:14:28,809 --> 00:14:30,859
go and explain depth of services.

227
00:14:30,859 --> 00:14:35,799
My goal here is just to show at a high
level why we are using all these services.

228
00:14:35,809 --> 00:14:40,039
So all these services have in
mind the idea to be pay as you go.

229
00:14:40,269 --> 00:14:43,079
So we are not going to
provision any services.

230
00:14:43,079 --> 00:14:47,969
You're not going to have any commitments
for, months or years of consumption.

231
00:14:48,179 --> 00:14:49,759
It's literally pay as you go.

232
00:14:49,799 --> 00:14:51,399
So as your growth.

233
00:14:51,984 --> 00:14:55,984
If, your usage grow, your cost
is going to grow with that

234
00:14:56,034 --> 00:14:57,374
and also decrease with that.

235
00:14:57,984 --> 00:15:02,974
So because this solution is a fully
API driven architecture, we are using

236
00:15:03,014 --> 00:15:05,964
Amazon API gateway for all the REST API.

237
00:15:06,074 --> 00:15:09,844
So every time you are saving a new
template, every time you're trying to

238
00:15:09,844 --> 00:15:15,264
retrieve your history, every time you are,
sending a new data to the model itself,

239
00:15:15,274 --> 00:15:17,284
it's saving that data using REST API.

240
00:15:17,285 --> 00:15:17,619
Thanks.

241
00:15:18,489 --> 00:15:24,099
But then the second flavor of API gateway,
which is a service on AWS is WebSocket.

242
00:15:24,149 --> 00:15:28,139
And this is a very important service
because on the solution, that the

243
00:15:28,149 --> 00:15:33,619
data, every time you send some,
requests to the solution, the data is

244
00:15:33,619 --> 00:15:35,789
getting streamed back into your UI.

245
00:15:36,199 --> 00:15:38,869
And the way this is done
is by creating a WebSocket.

246
00:15:38,889 --> 00:15:43,789
So each user and each web page that he
used, It's gonna create a web socket

247
00:15:43,789 --> 00:15:49,439
connection to, API gateway, and then API
Gateway Web Socket will actually use a

248
00:15:49,439 --> 00:15:54,209
Lambda to call whatever services in this
case bedrock in order to retrieve the

249
00:15:54,209 --> 00:15:58,919
response that is generated by the larger
language models and send back to your, ey.

250
00:15:59,659 --> 00:16:00,829
We have S3 here.

251
00:16:00,829 --> 00:16:02,779
S3 is used in a couple places.

252
00:16:02,899 --> 00:16:04,489
So first it hosts the ui.

253
00:16:05,359 --> 00:16:07,159
The UI is built on React.

254
00:16:07,469 --> 00:16:09,539
so the UI, it's stored there.

255
00:16:09,854 --> 00:16:14,044
And then it's also used every
time you upload new images for

256
00:16:14,044 --> 00:16:15,764
the multimodality capability.

257
00:16:15,914 --> 00:16:19,544
It's using S3 to store those
objects, those files for you.

258
00:16:20,804 --> 00:16:23,424
Cognito is our IDP service.

259
00:16:23,644 --> 00:16:27,934
So Cognito is where you have
the capability of signing into

260
00:16:27,934 --> 00:16:31,454
the system, having a password
authentication and authorization.

261
00:16:31,714 --> 00:16:35,964
And Cognito integrates really heavily
with the REST API and WebSocket API.

262
00:16:36,144 --> 00:16:39,054
So every time you're trying to
call those APIs, you need to be

263
00:16:39,054 --> 00:16:41,274
authenticated and provide a token to it.

264
00:16:41,614 --> 00:16:45,014
And all the code that I'm going to
share with you that is available

265
00:16:45,014 --> 00:16:49,844
open source on the AWS Samples GitHub
have that description and capability.

266
00:16:50,139 --> 00:16:54,189
Sean ddb here is the database of choice.

267
00:16:54,189 --> 00:16:57,369
Is a NoSQL database
available for Pay As You Go?

268
00:16:57,419 --> 00:17:01,859
super scalable solution on AWS
DB here is storing everything.

269
00:17:01,859 --> 00:17:03,239
Is it storing your chats?

270
00:17:03,239 --> 00:17:06,609
Is storing your, templates,
is storing your history.

271
00:17:06,799 --> 00:17:09,139
everything that there is,
data that is being stored.

272
00:17:09,199 --> 00:17:11,429
MDB is that, that, that database.

273
00:17:11,429 --> 00:17:13,409
And because this mdb.

274
00:17:13,819 --> 00:17:17,889
by default is encrypted and it's going
to be deployed on your own account.

275
00:17:17,899 --> 00:17:21,849
You have full control of the data
premises, and how you decide to

276
00:17:21,849 --> 00:17:26,469
encrypt, or, your, maybe you just want
to keep X amount of, you just want

277
00:17:26,469 --> 00:17:28,619
to keep data for X amount of days.

278
00:17:28,619 --> 00:17:29,879
You have that capability as well.

279
00:17:30,874 --> 00:17:32,594
Two, three more services here.

280
00:17:32,874 --> 00:17:34,174
we have CloudFront.

281
00:17:34,175 --> 00:17:37,154
I'm just going to jump on CloudFront,
which is the content delivered

282
00:17:37,164 --> 00:17:40,044
network capability to host our UI.

283
00:17:40,044 --> 00:17:44,264
So the UI is going to be hosted
on S3 and CloudFront to make that

284
00:17:44,264 --> 00:17:48,434
available across multiple servers
around the world that AWS has access.

285
00:17:48,674 --> 00:17:52,534
So when your users access those,
it makes it very easy to consume.

286
00:17:52,694 --> 00:17:55,684
It also does the HTTPS
encryption on your front end.

287
00:17:56,369 --> 00:18:01,439
WAF then is integrated with CloudFront and
you see an architecture diagram to then,

288
00:18:01,579 --> 00:18:07,649
create, security rules for avoiding, DDoS
attacks, SQL injection attacks, cross

289
00:18:07,649 --> 00:18:12,799
site scripts attacking, maybe you want
to limit, the access into your system for

290
00:18:12,799 --> 00:18:16,779
specific countries or maybe block some
countries, WAF gives you the capability.

291
00:18:17,904 --> 00:18:19,404
And then finally, it's Bedrock.

292
00:18:19,604 --> 00:18:22,584
And I have a couple of slides for
Bedrock because really this is the

293
00:18:22,584 --> 00:18:28,004
generative AI solution that allows,
this whole architecture to be put

294
00:18:28,004 --> 00:18:30,394
in place and be super, useful.

295
00:18:31,274 --> 00:18:37,604
So Bedrock is the easiest way to build
and scale generative AI applications

296
00:18:37,634 --> 00:18:39,694
with foundational models on AWS.

297
00:18:41,279 --> 00:18:46,029
Bedrock is a very feature rich
solution for this specific use case.

298
00:18:46,029 --> 00:18:51,209
And this architecture that I'm showing
to you is we are using Bedrock to

299
00:18:51,339 --> 00:18:56,089
inference large language models,
foundational models through a single API.

300
00:18:56,159 --> 00:19:01,859
So the solutions by now only supports
entropic cloud and cloud models.

301
00:19:02,149 --> 00:19:06,049
Bedrock has support for, dozens
of different large language

302
00:19:06,069 --> 00:19:07,739
models from different providers.

303
00:19:07,969 --> 00:19:13,579
And you can use a single API that you
literally can test the prompt and the data

304
00:19:13,879 --> 00:19:17,589
for whatever model that is available in
Bedrock and receive the response, right?

305
00:19:18,269 --> 00:19:21,499
So that's what we're using, the
capabilities and the benefits of using

306
00:19:21,509 --> 00:19:26,459
Bedrock is if you're familiar, the
amount of computational that takes

307
00:19:26,459 --> 00:19:31,659
for, For any person to host a large
language model, it's quite significant.

308
00:19:31,949 --> 00:19:38,389
So what we are doing here is we are
letting AWS manage all that compute

309
00:19:38,449 --> 00:19:43,389
and you have a pay as you go approach,
meaning you're every time you send

310
00:19:43,389 --> 00:19:47,389
an inference to Bedrock, you're going
to be paying on different models.

311
00:19:47,389 --> 00:19:52,389
We have different costs and that can be
checked into the AWS, pricing page for

312
00:19:52,399 --> 00:19:56,669
Bedrock, and you're going to be paying for
the input tokens and the output tokens.

313
00:19:57,274 --> 00:19:58,374
What are the benefits?

314
00:19:58,524 --> 00:20:02,194
First, you don't need to pay for
all the computational, GPUs to be

315
00:20:02,224 --> 00:20:06,684
up and running 24 7, but also it
allows you to have a pay as you go.

316
00:20:06,724 --> 00:20:10,134
So if today you have a lot of users
consuming this platform, you're going

317
00:20:10,134 --> 00:20:11,464
to pay for whatever they consume.

318
00:20:11,724 --> 00:20:14,124
if in the next month you don't
have anything, you're not going

319
00:20:14,124 --> 00:20:15,394
to pay anything for bedrock.

320
00:20:16,894 --> 00:20:19,044
No data is stored.

321
00:20:19,054 --> 00:20:24,414
No data is used for training any models
on bedrock that is documented and

322
00:20:24,414 --> 00:20:29,614
is, is a guarantee that AWS makes all
the data that you sent are your data.

323
00:20:29,844 --> 00:20:33,884
We don't, AWS doesn't store
and AWS doesn't use for

324
00:20:33,884 --> 00:20:35,364
training any future models.

325
00:20:35,374 --> 00:20:40,124
So it's full control, private
privacy by default, and it doesn't

326
00:20:40,124 --> 00:20:41,514
use any of the data moving forward.

327
00:20:43,369 --> 00:20:50,329
the solution itself uses a combination of
different models from Bedrock, but mostly

328
00:20:50,329 --> 00:20:52,739
focusing on models that are from Entropic.

329
00:20:52,829 --> 00:20:57,159
Entropic is one of the leading
research labs that AWS and Amazon

330
00:20:57,169 --> 00:21:00,819
have invested and partnered very
heavily, and it's available on portal.

331
00:21:01,079 --> 00:21:03,459
On Bedrock, they have this quadtree.

332
00:21:03,874 --> 00:21:06,464
model family in this case currently.

333
00:21:06,464 --> 00:21:10,064
And by the way, depending when you're
watching this presentation, it might have

334
00:21:10,074 --> 00:21:15,104
changed because new models are coming
up very often, but as we speak on, and

335
00:21:15,104 --> 00:21:21,104
recording on August 22nd, four models of
the COD3 family are available on Bedrock,

336
00:21:21,514 --> 00:21:23,634
which the most powerful one is COD3.

337
00:21:23,634 --> 00:21:27,614
5 Sonnet, which is one of the
best models in the industry.

338
00:21:27,614 --> 00:21:29,904
Not just the best model for Entropic.

339
00:21:30,399 --> 00:21:32,269
all of them have vision capability.

340
00:21:32,599 --> 00:21:35,129
Each of these models are going
to have different pricing.

341
00:21:35,139 --> 00:21:38,189
Opus being the most expensive
one, the biggest one, but it's

342
00:21:38,519 --> 00:21:39,749
still on the CoD 3 family.

343
00:21:39,889 --> 00:21:41,229
And of course CoD 3.

344
00:21:41,229 --> 00:21:44,279
5 is the most intelligent
because it's on the 3.

345
00:21:44,279 --> 00:21:44,844
5.

346
00:21:44,844 --> 00:21:48,454
Entropic has already announced that
they're going to be coming up with 3.

347
00:21:48,454 --> 00:21:49,859
5 Haiku, which is the
smallest model and 3.

348
00:21:49,859 --> 00:21:52,664
5 Opus, which is still going
to be the largest model.

349
00:21:53,419 --> 00:21:57,669
Which you probably expect to be one
of the most intelligent models, but

350
00:21:57,669 --> 00:22:01,759
that is not available there The tool
allows you to pick those models, right?

351
00:22:01,759 --> 00:22:05,689
and if you remember from my demo, you
can just look back, you can just pick

352
00:22:05,689 --> 00:22:12,204
whatever model you want from Cloud
and you know depending on The prompt

353
00:22:12,204 --> 00:22:14,914
and the capabilities you require,
you might choose to go with 3.

354
00:22:14,914 --> 00:22:19,814
5 sonnet or cloud free hyco, because
that is what actually going to, provides

355
00:22:19,814 --> 00:22:24,014
you with the biggest, intelligence,
that pricing needs to be kept in mind.

356
00:22:24,014 --> 00:22:29,904
So this is the full
architecture of the solution.

357
00:22:29,914 --> 00:22:33,664
Finally, what you can see
here is you have on the top.

358
00:22:34,399 --> 00:22:36,719
Hopefully you can see
here, let me just move.

359
00:22:36,779 --> 00:22:37,399
Oh, let's sorry.

360
00:22:37,409 --> 00:22:38,769
Let's move my mouse.

361
00:22:39,379 --> 00:22:41,069
I don't know if you see my mouse.

362
00:22:41,069 --> 00:22:43,279
I don't think you can see
my mouse and I apologize.

363
00:22:43,279 --> 00:22:45,259
but what I meant to, oh,
you can see my mouse here.

364
00:22:45,279 --> 00:22:49,809
if you see here on the top, the web
application flower, the cloud front and

365
00:22:49,809 --> 00:22:53,129
S3, by the way, I'm looking on the side
because that's where I have my monitor.

366
00:22:53,459 --> 00:22:55,379
that's where the UI is hosted, right?

367
00:22:55,379 --> 00:22:57,709
So the UI is a React application.

368
00:22:58,084 --> 00:23:01,304
that is just using MD
framework and components.

369
00:23:01,614 --> 00:23:03,764
and you can look at the code,
you can change the code,

370
00:23:03,764 --> 00:23:04,444
you can create your own UI.

371
00:23:05,004 --> 00:23:09,144
But this architecture is using React,
we are just creating the static files,

372
00:23:09,314 --> 00:23:13,594
starting the static files, HTML, CSS,
and JavaScript on S3, and then having

373
00:23:13,614 --> 00:23:18,414
CloudFront creating an endpoint for us
that is distributed across the AWS Edge

374
00:23:18,414 --> 00:23:23,384
locations for CloudFront, and putting
in WAF to make that application secure.

375
00:23:24,194 --> 00:23:28,004
Then everything else here where
you see the REST API calls.

376
00:23:28,004 --> 00:23:30,744
So every time, for example, you
need to create a template or you

377
00:23:30,744 --> 00:23:33,874
need to save a history or you need
to retrieve the history, the way

378
00:23:33,874 --> 00:23:35,974
it works, you have API Gateway.

379
00:23:36,614 --> 00:23:40,444
And by the way, I didn't talk about
Lambda, I just realized, but API Gateway

380
00:23:40,444 --> 00:23:41,944
integrates very easily with Lambda.

381
00:23:41,944 --> 00:23:48,404
Lambda is the serverless compute
function as a service solution on AWS.

382
00:23:49,004 --> 00:23:51,664
It allows you to write a small code.

383
00:23:52,269 --> 00:23:53,349
for whatever language.

384
00:23:53,359 --> 00:23:57,449
In this case, there are, in this
architecture, there are lambda functions

385
00:23:57,469 --> 00:24:00,639
being written in Python, lambda
functions being written in JavaScript.

386
00:24:00,899 --> 00:24:02,329
You can choose for other languages.

387
00:24:02,609 --> 00:24:07,899
So every time you invoke an API behind
the scenes API gate, we invoke the lambda

388
00:24:07,899 --> 00:24:12,329
might be running for like maybe four,
400 milliseconds, 700 milliseconds.

389
00:24:12,559 --> 00:24:15,019
You're only going to pay for whatever
milliseconds that is running.

390
00:24:15,439 --> 00:24:17,009
let's say you are creating a new template.

391
00:24:17,009 --> 00:24:17,659
The way it works is.

392
00:24:18,299 --> 00:24:21,159
You call the REST API, you
need to be authenticated.

393
00:24:21,159 --> 00:24:24,549
So you can see Cognito here is
doing an authentication for you.

394
00:24:24,549 --> 00:24:28,089
If you're not authenticated,
you cannot, call, that API.

395
00:24:28,109 --> 00:24:31,719
You might be, you, if you try to
call the API, you're going to get a.

396
00:24:32,099 --> 00:24:36,399
deny requests, because that is by
default being done by API gateway

397
00:24:36,609 --> 00:24:40,499
and API gateway has integration
with Cognito by default, right?

398
00:24:40,499 --> 00:24:45,379
So all that layer of authentication
is being done on the Cognito and

399
00:24:45,379 --> 00:24:48,219
API gateway, which is something
that AWS provides to you.

400
00:24:49,619 --> 00:24:52,179
but the other capability, which
is really important one is on the

401
00:24:52,179 --> 00:24:55,289
bottom here, and you can see where
you have API gateway app socket.

402
00:24:55,634 --> 00:25:00,254
So when you log in into the UI and
you send any type of request into

403
00:25:00,264 --> 00:25:03,704
the solution itself, the way it
works, the user is going to create

404
00:25:04,094 --> 00:25:07,014
a WebSocket into the API gateway.

405
00:25:07,444 --> 00:25:10,204
Then the user is going to
start using that connection of

406
00:25:10,214 --> 00:25:12,294
WebSocket to send the request.

407
00:25:12,554 --> 00:25:14,574
That request will go to a Lambda.

408
00:25:14,854 --> 00:25:20,184
The Lambda will therefore call Bedrock
with whatever model you define on the UI.

409
00:25:20,374 --> 00:25:25,294
Bedrock will process and do the inference
and charge you by input and output tokens.

410
00:25:25,829 --> 00:25:29,279
That is going to be sent back,
to the API Gateway WebSocket.

411
00:25:29,349 --> 00:25:32,909
And then API Gateway WebSocket
will know which socket connection

412
00:25:33,149 --> 00:25:34,679
that user requested the data.

413
00:25:34,709 --> 00:25:37,279
You put that back in and send to the UI.

414
00:25:37,339 --> 00:25:41,149
All of that is encrypted end to
end on the WebSocket connection.

415
00:25:41,539 --> 00:25:45,659
And if you have any images from the
multimodality capability, you're

416
00:25:45,659 --> 00:25:47,619
going to upload them into S3.

417
00:25:47,679 --> 00:25:51,699
At the end of the time of inference,
this Lambda Python streaming is going

418
00:25:51,699 --> 00:25:54,044
to download from S3 and send to Bedrock.

419
00:25:54,924 --> 00:25:59,464
So that is the capabilities and how
you configure, this application.

420
00:25:59,514 --> 00:26:02,714
And I'm going to show you in a
moment that this is all done with

421
00:26:02,714 --> 00:26:06,424
this, a few commands should easily
deploy this end to end solution.

422
00:26:06,424 --> 00:26:11,184
So let me talk about costs, right?

423
00:26:11,234 --> 00:26:16,574
And so it's important to highlight
that this cost is public available,

424
00:26:16,624 --> 00:26:20,764
on the back on the AWS pricing
page, but it might change, right?

425
00:26:21,014 --> 00:26:22,904
This cost is also based on the U.

426
00:26:22,904 --> 00:26:23,124
S.

427
00:26:23,174 --> 00:26:24,214
East 1 region.

428
00:26:24,434 --> 00:26:26,964
Different regions might have
different prices for services.

429
00:26:27,004 --> 00:26:29,304
So you might need to take in
consideration if you plan to

430
00:26:29,304 --> 00:26:30,824
deploy this in another region.

431
00:26:31,334 --> 00:26:36,594
But, how I decided to provide you
with a, highlight of how much this

432
00:26:36,854 --> 00:26:40,019
solution would estimate and by
the way, it's just an estimate.

433
00:26:40,019 --> 00:26:43,589
There is some variables that is very
hard to estimate is, let's think

434
00:26:43,589 --> 00:26:49,679
that your deployment to have 50 users
and each of those 50 users, we use

435
00:26:49,679 --> 00:26:51,639
this tool around five times a day.

436
00:26:51,929 --> 00:26:56,029
And every time they use the tool,
they're going to input around 500 input

437
00:26:56,039 --> 00:26:58,649
tokens and 200 output tokens, right?

438
00:26:59,069 --> 00:27:01,659
This is just an, a scenario
I'm trying to put together.

439
00:27:01,659 --> 00:27:04,589
So you understand what
you can see here is.

440
00:27:05,604 --> 00:27:09,464
The other AWS services cost is
always going to remain the same.

441
00:27:09,474 --> 00:27:13,434
This is the WAF, this is the
Dynadb, this is API gateway.

442
00:27:13,734 --> 00:27:17,334
This is always going to remain the same
for this estimate, but the more users

443
00:27:17,334 --> 00:27:20,954
and the more consumption you have, this
might increase a little bit more, right?

444
00:27:21,294 --> 00:27:25,184
so just keep that in mind because,
but it's not going to be exponentially

445
00:27:25,204 --> 00:27:27,034
more, it depends on how you're doing.

446
00:27:27,409 --> 00:27:30,869
If you go to the GitHub page and I'm going
to share, you can look at the pricing

447
00:27:30,869 --> 00:27:35,989
calculator that I've shared, and then you
can just add your, specific inputs or even

448
00:27:35,989 --> 00:27:40,259
email me if you have any questions and
I'm happy to help you do the calculation.

449
00:27:40,919 --> 00:27:44,259
But what you can see here that
depending on the model you use, and

450
00:27:44,259 --> 00:27:47,419
by the way, you can use a combination
of models, but I'm just putting in

451
00:27:47,419 --> 00:27:49,549
these specific, the specific slide.

452
00:27:49,809 --> 00:27:53,749
Let's say if you only use core 3
haiku for all those three, you 50

453
00:27:53,819 --> 00:27:57,989
users and five times a day, the
whole, the total cost of application.

454
00:27:58,249 --> 00:28:00,739
It's literally only 19.

455
00:28:00,779 --> 00:28:07,219
32, which is much more cost efficient
than, for example, a subscription

456
00:28:07,219 --> 00:28:11,019
for one of these GNI chat solutions,
that are out there, which normally

457
00:28:11,019 --> 00:28:12,849
would cost 20 plus dollars, right?

458
00:28:12,959 --> 00:28:17,809
Plus you have full access, full control
of your data on your own AWS account.

459
00:28:18,299 --> 00:28:19,789
You can choose different models.

460
00:28:19,789 --> 00:28:21,749
So for example, I would
highly recommend using quad 3.

461
00:28:21,749 --> 00:28:24,829
5 sonnet, which is the
most intelligent model.

462
00:28:24,969 --> 00:28:29,649
And you can see that it equates to 50
and 20 cents, 26 cents a month, right?

463
00:28:29,929 --> 00:28:32,609
Country Opus, of course, going
to be the most expensive because

464
00:28:32,979 --> 00:28:36,259
It's, it's the largest model that
Entropic has made available, but

465
00:28:36,259 --> 00:28:39,779
it's one of the most impressive
as one, especially when Cloud 3.

466
00:28:39,780 --> 00:28:42,059
5 Opus is going to be made available.

467
00:28:42,929 --> 00:28:45,739
So that is what I wanted
to show to you about cost.

468
00:28:46,889 --> 00:28:48,869
but in terms of.

469
00:28:50,349 --> 00:28:52,189
In terms of what can you do now?

470
00:28:52,199 --> 00:28:56,759
So here you can just click on that
button off the open source repository.

471
00:28:56,789 --> 00:28:59,939
You are able to just click
on that button, navigate.

472
00:29:00,339 --> 00:29:02,189
I'm going to show in a
moment, I have a demo.

473
00:29:02,209 --> 00:29:03,069
It's not going to be a demo.

474
00:29:03,069 --> 00:29:03,879
It's just going to be show.

475
00:29:04,049 --> 00:29:07,749
it's going to be a demo of the tool
and show you the GitHub page, but by

476
00:29:07,749 --> 00:29:11,309
clicking the GitHub page or scanning the
secure code, you're going to see all the

477
00:29:11,309 --> 00:29:13,279
details that I've shown to you today.

478
00:29:13,289 --> 00:29:15,079
Even the GIFs that are here for the.

479
00:29:15,559 --> 00:29:19,419
The tool itself, how do you deploy, how
do you make changes, the architecture

480
00:29:19,419 --> 00:29:20,959
diagram, it's all made available.

481
00:29:21,179 --> 00:29:24,509
So it's a very simple and easy
to deploy on your AWS account.

482
00:29:25,049 --> 00:29:27,279
It's going to have the
benefits of pay as you go.

483
00:29:27,479 --> 00:29:30,679
It's going to be secure and
deployed on your own AWS account.

484
00:29:30,959 --> 00:29:34,529
So let's jump into a demo now and
then we'll finalize the presentation.

485
00:29:34,939 --> 00:29:35,369
Awesome.

486
00:29:35,429 --> 00:29:38,359
just very quickly, I just
want to show you the GitHub.

487
00:29:38,359 --> 00:29:42,559
So if you go to the GitHub page, feel free
to start the GitHub, project if you like.

488
00:29:43,034 --> 00:29:46,174
but if you scroll down, you're
going to see a lot of, information.

489
00:29:46,184 --> 00:29:49,934
So you can see, for example, the
summary, we talked about the benefits

490
00:29:49,954 --> 00:29:53,994
that I've presented to you today talks
about, why we've created the solution,

491
00:29:54,004 --> 00:29:58,214
why it's using, why it's useful as an
architecture pattern, but potentially

492
00:29:58,214 --> 00:30:01,734
as a starting place, for you and
your internal teams, and they scroll

493
00:30:01,734 --> 00:30:04,554
down, you can see the architecture
diagram that are presented to you.

494
00:30:04,924 --> 00:30:08,474
so you can look at these, please feel free
to ask questions, reach out if you want.

495
00:30:08,804 --> 00:30:11,804
and then it talks about the
code itself, the structure of

496
00:30:11,844 --> 00:30:13,844
the GitHub repository, right?

497
00:30:13,844 --> 00:30:16,454
So we have a folder for the
backend where all the information

498
00:30:16,454 --> 00:30:18,144
for the backend is stored.

499
00:30:18,354 --> 00:30:22,744
we are using SAM, serverless
application model, framework to

500
00:30:22,754 --> 00:30:24,584
actually deploy this whole solution.

501
00:30:24,594 --> 00:30:27,604
Behind the scenes, it's just
file formation, It just deploys

502
00:30:27,604 --> 00:30:30,334
a CloudFormation for you and
it created all those resources.

503
00:30:30,704 --> 00:30:32,504
and then you have the front end folder.

504
00:30:32,694 --> 00:30:36,614
The front end folder is just, literally
the React application that gets deployed.

505
00:30:36,924 --> 00:30:40,604
but because we wanted to make it easier
for people to deploy, we have created

506
00:30:40,604 --> 00:30:42,164
this shell script called deploy.

507
00:30:42,374 --> 00:30:42,934
sh.

508
00:30:42,954 --> 00:30:46,594
And I'll show you instructions how you
can easily deploy this into your account.

509
00:30:46,864 --> 00:30:47,284
The deploy.

510
00:30:47,324 --> 00:30:50,744
sh not only deploys the back end,
but also deploys the front end.

511
00:30:50,914 --> 00:30:55,019
And that also So if you want, it
deploys the default templates,

512
00:30:55,289 --> 00:30:58,459
and the default prompt templates
that comes with the solution.

513
00:30:58,459 --> 00:31:01,849
So if I look at the templates that are
available on the default templates,

514
00:31:01,849 --> 00:31:05,469
adjacent, if you're not interested in
that, or if you want to add, you can just

515
00:31:05,469 --> 00:31:10,729
change and modify the specific format of
this Jason and rerun the deployment and

516
00:31:10,729 --> 00:31:12,829
you create the templates that are there.

517
00:31:13,304 --> 00:31:18,344
you can see some of the requisites
that it requires for you to deploy this

518
00:31:18,354 --> 00:31:19,924
solution if you're running locally.

519
00:31:20,134 --> 00:31:24,084
So you need like Python, you need AWS
SAN, you need a Linux environment.

520
00:31:24,264 --> 00:31:27,234
Or if you're on Windows, you should
have Windows sub Linux system.

521
00:31:27,235 --> 00:31:29,614
You need PyJS and you need JQ.

522
00:31:29,774 --> 00:31:33,514
And of course you need to enable the
Bedrock models on your AWS account.

523
00:31:33,994 --> 00:31:36,634
Here it goes into instructions
on how to deploy locally.

524
00:31:36,654 --> 00:31:40,194
You can see that we have the deploy
a sage script that you can set

525
00:31:40,194 --> 00:31:42,535
the regions, you can deploy this,
whatever region you wanna make.

526
00:31:42,785 --> 00:31:47,654
If you want to be sure that you
have a good solution, we want to

527
00:31:47,654 --> 00:31:50,433
make sure the best solution is.

528
00:31:50,433 --> 00:31:55,065
This is the solution that
I used for my everything.

529
00:31:55,065 --> 00:31:57,164
You can go to Xcode.

530
00:31:57,214 --> 00:32:01,964
command with just the region And email,
by the way, this email is required because

531
00:32:02,004 --> 00:32:06,604
this is going to be the admin user that
is going to be used for your application.

532
00:32:06,994 --> 00:32:10,464
you use just the single command and
the simple command you run and pretty

533
00:32:10,464 --> 00:32:14,614
much deploy everything front end,
back end, log, create a user for

534
00:32:14,614 --> 00:32:18,704
you, create a temporary password,
and upload the templates as well.

535
00:32:19,084 --> 00:32:22,324
But if you just want to deploy the backend
or you just want to deploy the front

536
00:32:22,324 --> 00:32:26,674
end, you can use these commands, but you
can also use these commands to delete.

537
00:32:26,724 --> 00:32:29,864
If you want to delete everything,
you just run the deploy dash delete,

538
00:32:29,894 --> 00:32:31,294
and you'll delete all that for you.

539
00:32:32,604 --> 00:32:34,064
So it goes into details here.

540
00:32:34,284 --> 00:32:36,584
You can also use cloud
shell to deploy this.

541
00:32:36,654 --> 00:32:40,124
So if you don't want to deploy
locally, you can just run cloud shell.

542
00:32:40,124 --> 00:32:43,004
And if you're not familiar, what
cloud shell is literally just go

543
00:32:43,004 --> 00:32:44,564
here and you click on this button.

544
00:32:44,954 --> 00:32:45,884
this is culture.

545
00:32:45,934 --> 00:32:47,084
So this is called shell.

546
00:32:47,434 --> 00:32:51,584
It's just a Linux environment that
you have access for free on AWS and

547
00:32:51,584 --> 00:32:55,574
you can use this Linux environment
following these specific instructions.

548
00:32:55,614 --> 00:32:59,354
Please do follow these specific
instructions to use as the deployment.

549
00:32:59,444 --> 00:33:01,784
So you can use cloud shell and so forth.

550
00:33:01,794 --> 00:33:05,624
So if we scroll down, you can also use
cloud nine if you want, which is just

551
00:33:05,624 --> 00:33:08,334
an idea available in AWS to deploy.

552
00:33:08,334 --> 00:33:09,504
So you have instruction for that.

553
00:33:09,644 --> 00:33:12,424
Once he finalizes, you should
see a screenshot similar to this.

554
00:33:13,234 --> 00:33:14,794
That has been deployed successfully.

555
00:33:15,014 --> 00:33:18,404
Once it has been deployed successfully,
you're going to give the URL from

556
00:33:18,404 --> 00:33:22,274
the cloud front and then your user
and then your password, right?

557
00:33:22,324 --> 00:33:25,524
And then once you log in for the first
time, you ask you to change that.

558
00:33:26,144 --> 00:33:28,434
The other thing that it
shows you is the gifts.

559
00:33:28,554 --> 00:33:30,474
So you can see all the
gifts that I've presented.

560
00:33:30,514 --> 00:33:34,444
If you want to showcase your team members
or tests, you can see all the gifts that

561
00:33:34,445 --> 00:33:36,654
I presented to you are available here.

562
00:33:37,729 --> 00:33:40,079
And then you have an
estimate monthly cost.

563
00:33:40,289 --> 00:33:44,389
And remember when I talk about the pricing
for bedrock, you can click here and you

564
00:33:44,389 --> 00:33:46,439
can look at the different model providers.

565
00:33:46,439 --> 00:33:51,019
For example, if you go to entropic models,
you can see each price for a thousand

566
00:33:51,019 --> 00:33:53,499
input tokens and a thousand output tokens.

567
00:33:53,539 --> 00:33:54,329
It's available there.

568
00:33:55,269 --> 00:33:57,529
And then finally, the last thing
I want to show you on cost.

569
00:33:57,529 --> 00:33:58,599
So let me scroll down.

570
00:33:59,129 --> 00:34:01,279
We have this pricing page here.

571
00:34:01,279 --> 00:34:04,544
So if you click on this calculator,
You'll be able to see this calculator,

572
00:34:04,544 --> 00:34:08,864
which gives you the idea, and you
can see this for US, it's one region.

573
00:34:08,864 --> 00:34:12,714
But if you want to change for the
remaining services, not Bedrock, because

574
00:34:12,714 --> 00:34:15,534
currently Bedrock is not supported on
the pricing calculator or database.

575
00:34:16,164 --> 00:34:18,994
For anything else, you can
change the variables and you can

576
00:34:18,994 --> 00:34:21,664
get, receive your own estimate.

577
00:34:22,564 --> 00:34:25,444
and of course, here are some
more recommendations, like if you

578
00:34:25,444 --> 00:34:28,484
want to contribute or like key
considerations in terms of security,

579
00:34:28,494 --> 00:34:30,214
it's all described here in depth.

580
00:34:30,320 --> 00:34:31,150
but here's the tool.

581
00:34:31,150 --> 00:34:33,840
So like the way it works, the tool,
I'll show you just do a quick demo.

582
00:34:34,050 --> 00:34:35,380
You need to log in here, right?

583
00:34:35,380 --> 00:34:37,480
So you just put your email here.

584
00:34:37,650 --> 00:34:41,960
I already have a user, so I'm just
going to log in behind the scenes is

585
00:34:42,100 --> 00:34:43,940
authenticating with Cognito, right?

586
00:34:44,200 --> 00:34:46,380
And on the playground, I
can just ask a question.

587
00:34:46,400 --> 00:34:48,400
Another thing, another feature
that I haven't mentioned that I

588
00:34:48,440 --> 00:34:52,780
think is important to highlight, it
has support for full code syntax.

589
00:34:52,910 --> 00:34:54,729
So let's say I want to write a code.

590
00:34:54,980 --> 00:35:05,350
create a CloudFormation template, where
I have a EC2 name test and a new VPC.

591
00:35:05,400 --> 00:35:11,250
You can define the CIDR
rank for the VPC, right?

592
00:35:11,370 --> 00:35:12,490
I can send these.

593
00:35:12,560 --> 00:35:14,610
Here I can choose the model, right?

594
00:35:14,650 --> 00:35:15,610
I'm just going to use Cloud 3.

595
00:35:15,610 --> 00:35:18,340
5 SONET because it's the best model.

596
00:35:18,610 --> 00:35:21,170
And here, when I click submit
behind the scenes, remember

597
00:35:21,180 --> 00:35:22,700
it's calling my web socket.

598
00:35:23,280 --> 00:35:26,460
And then it's changed, it's calling
the WebSocket, the Lambda, and you

599
00:35:26,460 --> 00:35:30,280
can see it actually, proper formats,
the CloudFormation template, my

600
00:35:30,280 --> 00:35:33,060
CloudFormation template is YAML, so
you can see here if I scroll down,

601
00:35:33,400 --> 00:35:35,400
it has created, the template for me.

602
00:35:35,750 --> 00:35:37,720
This is you creating the
templates, creating the EC2

603
00:35:37,980 --> 00:35:39,530
instances, creating the outputs.

604
00:35:39,880 --> 00:35:42,310
The cool thing here, and even
gives you the explanation.

605
00:35:42,540 --> 00:35:44,820
The good thing here is you
have these buttons here.

606
00:35:44,980 --> 00:35:50,290
So any cleaning click cop all, it was
going to cop all the output for you.

607
00:35:50,490 --> 00:35:53,430
But if you have code, you can
just click on the copy here and

608
00:35:53,430 --> 00:35:55,300
it just called the copy for you.

609
00:35:55,410 --> 00:35:58,360
So it's easier if you're not put
on an ID or something like that.

610
00:35:59,160 --> 00:36:00,630
but the chat is pretty cool, right?

611
00:36:00,630 --> 00:36:02,630
So let's say I have
this chat and let's say.

612
00:36:03,005 --> 00:36:04,815
I have this, let's actually do this.

613
00:36:04,835 --> 00:36:09,835
Let's talk to chat and let's say,
create some Python code that has some.

614
00:36:10,880 --> 00:36:17,530
Very bad bugs because I want
to see if I can fix, right?

615
00:36:17,970 --> 00:36:24,060
So let's just ask my chat to
create that Python code, right?

616
00:36:24,360 --> 00:36:26,750
The first time I send the
message might take a while.

617
00:36:26,810 --> 00:36:29,400
The reason it takes a while is
because it needs to create some of

618
00:36:29,400 --> 00:36:33,640
the database entries, but every future
interaction is a little bit faster.

619
00:36:33,640 --> 00:36:35,070
So it has created the code.

620
00:36:35,930 --> 00:36:38,030
So what I want to do, I'm
going to copy this code.

621
00:36:39,060 --> 00:36:42,730
And I create a new chat and I have
this template, which calls Python

622
00:36:42,730 --> 00:36:47,210
bug fix, and I'm going to paste
the code here and let's see if my

623
00:36:47,210 --> 00:36:49,320
template, which, it comes by default.

624
00:36:49,320 --> 00:36:51,820
And this tool helps me
fix Python bug codes.

625
00:36:52,190 --> 00:36:54,910
I can just, and this is just an
example that potentially has.

626
00:36:55,445 --> 00:36:58,805
as a platform engineer, you'll
be dealing quite a lot, right?

627
00:36:59,075 --> 00:37:01,165
So you can see that he
provided the code snip.

628
00:37:01,205 --> 00:37:03,975
It has a few issues and issues, but
that's, here's the correct version.

629
00:37:04,155 --> 00:37:04,565
I don't know.

630
00:37:04,565 --> 00:37:06,965
I haven't gone through this
just hypothetical example.

631
00:37:07,235 --> 00:37:09,575
You can see this specific fix here.

632
00:37:09,745 --> 00:37:12,495
It talks about the problems in
the original code and so forth.

633
00:37:12,555 --> 00:37:14,905
You can say, okay, this is great.

634
00:37:15,195 --> 00:37:17,484
Could you rewrite this in Node.

635
00:37:17,485 --> 00:37:21,575
js, JavaScript for me, right?

636
00:37:21,575 --> 00:37:22,015
So the same code.

637
00:37:22,645 --> 00:37:27,055
So the chat will keep the conversational
context so he knows I've talked about

638
00:37:27,055 --> 00:37:31,885
it, and I can finalize, say, summarize
our conversation so far, please.

639
00:37:32,635 --> 00:37:34,515
And you can see it's
streaming very quickly.

640
00:37:34,585 --> 00:37:37,885
I've, if you look here, the model
I'm choosing is quad three haiku,

641
00:37:38,115 --> 00:37:39,485
and that is the model I'm using.

642
00:37:39,485 --> 00:37:41,785
So it talks about the
conversation, what I've taught.

643
00:37:41,785 --> 00:37:44,245
So we talk, the conversation
summarizes that I provide a

644
00:37:44,245 --> 00:37:45,785
Python code in my analysis.

645
00:37:47,100 --> 00:37:49,630
issues, then I provided the correct code.

646
00:37:49,630 --> 00:37:53,220
Then you asked me to rewrite
from Python to JavaScript and

647
00:37:53,220 --> 00:37:56,300
finally provide the JavaScript
code with the proper information.

648
00:37:56,900 --> 00:37:59,420
so I could use just a template.

649
00:37:59,480 --> 00:38:02,090
You can see the template
is here just as its own.

650
00:38:02,160 --> 00:38:05,570
And if you look at the template, if
you go here and look at the template,

651
00:38:05,940 --> 00:38:08,550
you can click at this option to clone.

652
00:38:08,780 --> 00:38:11,080
I don't want to clone, but if
you want to add it, you can see

653
00:38:11,080 --> 00:38:12,390
that the template it just sets.

654
00:38:12,755 --> 00:38:16,185
a system prompt saying your text to
analyze provided by the encoded snippet

655
00:38:16,365 --> 00:38:18,605
and identify any bugs and so forth, right?

656
00:38:18,785 --> 00:38:22,275
And it's using the cloud three model,
and so forth is just, here is just

657
00:38:22,275 --> 00:38:24,365
the input data to provide, right?

658
00:38:24,775 --> 00:38:25,925
I can clone.

659
00:38:26,035 --> 00:38:28,705
So you can see, okay, it's a
copy and I can save a new one.

660
00:38:29,005 --> 00:38:31,475
And it forces me to save
as private because there is

661
00:38:31,475 --> 00:38:32,775
already one that is public.

662
00:38:33,875 --> 00:38:36,505
So this is the capability I want to show.

663
00:38:36,805 --> 00:38:38,265
Hopefully this makes sense.

664
00:38:38,265 --> 00:38:42,455
Please reach out on LinkedIn if you have
any questions, shoot me an email and happy

665
00:38:42,455 --> 00:38:46,115
to provide you some guidance on how to
deploy these and build on top of that.

666
00:38:46,385 --> 00:38:51,545
generative AI provides a lot of limitless
capabilities for us builders and platform

667
00:38:51,545 --> 00:38:53,275
engineers to build on top of that.

668
00:38:53,645 --> 00:38:56,385
So thank you so much for taking
the time and watching my session.

669
00:38:56,615 --> 00:38:59,595
have a great rest of your
day and hope to see you soon.

670
00:38:59,735 --> 00:39:00,045
Bye bye.

