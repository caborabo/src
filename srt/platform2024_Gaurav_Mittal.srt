1
00:00:14,130 --> 00:00:14,850
Hello, everyone.

2
00:00:15,120 --> 00:00:16,079
I am Gaurav Mittal.

3
00:00:16,560 --> 00:00:21,179
I am currently working with Thermo Fisher
Scientific as a data science manager.

4
00:00:21,749 --> 00:00:26,139
Today, I'm going to present a
talk on email attachment security.

5
00:00:26,149 --> 00:00:26,224
I'll see you next time.

6
00:00:27,305 --> 00:00:28,645
Thank you for joining my call.

7
00:00:29,405 --> 00:00:31,995
I would like to highlight
a business scenario today.

8
00:00:32,045 --> 00:00:36,034
like most of the organizations,
they are tend to send emails to

9
00:00:36,035 --> 00:00:38,684
their customers, having attachments.

10
00:00:39,094 --> 00:00:43,094
Now consider a scenario like where,
it's an insurance organization.

11
00:00:43,104 --> 00:00:45,844
They are sending you a
renter insurance document.

12
00:00:46,224 --> 00:00:49,244
Or when it comes to medical,
industry, they are sending you

13
00:00:49,274 --> 00:00:54,054
medical receipts or some, some of
your PII data as an attachment.

14
00:00:54,714 --> 00:00:58,674
Even today's world, some countries,
they are sending e visa in your

15
00:00:58,804 --> 00:01:02,534
email as an attachment, which
contains your passport information.

16
00:01:02,844 --> 00:01:04,698
All this information,
they are very sensitive.

17
00:01:04,698 --> 00:01:09,994
It's your PII data, which, is prone
to, phishing email fraud attack.

18
00:01:10,939 --> 00:01:13,799
And, how, what kind of risk,
we have so few of the risk,

19
00:01:13,959 --> 00:01:14,949
as I have highlighted here.

20
00:01:15,574 --> 00:01:18,844
Like the most common, risk is
like man in the middle attacks.

21
00:01:18,874 --> 00:01:21,884
What happens, the email server,
what is sending the email,

22
00:01:21,934 --> 00:01:23,194
that is not very secure.

23
00:01:23,524 --> 00:01:26,264
And, in between there
can be, it can be hacked.

24
00:01:26,474 --> 00:01:30,324
And your information, which
is very sensitive, it can

25
00:01:30,324 --> 00:01:32,214
be, hacked by the hackers.

26
00:01:33,034 --> 00:01:36,445
Or, maybe there is not inadequate,
there is not, encryption.

27
00:01:36,505 --> 00:01:38,705
proper encryption being utilized.

28
00:01:38,775 --> 00:01:40,955
there are no antivirus
softwares installed.

29
00:01:41,255 --> 00:01:45,665
the emails when they are in transaction,
it may be possible the authors,

30
00:01:45,665 --> 00:01:47,585
they can get unauthorized access.

31
00:01:48,250 --> 00:01:53,720
To the transmission they can go through
The attachments and your information is

32
00:01:53,740 --> 00:02:01,990
prompt fraud now What is the solution
for it how we can achieve it so we can

33
00:02:02,900 --> 00:02:07,940
overcome the frauds by implementing data
security in data security world There

34
00:02:07,940 --> 00:02:11,840
are a few common terms like authorization
Authentication is like, like only

35
00:02:11,840 --> 00:02:16,000
the users which is having appropriate
access You They can log in and they can

36
00:02:16,000 --> 00:02:17,880
view, those, particular information.

37
00:02:18,420 --> 00:02:21,160
Authorization is like you
are curbing the role access.

38
00:02:21,430 --> 00:02:25,060
So like only if you have some
specific role, you can, avail

39
00:02:25,090 --> 00:02:26,560
this much of information.

40
00:02:26,920 --> 00:02:31,320
It depends on your role, like you
can view the information content and

41
00:02:31,370 --> 00:02:33,550
the most commonly used is encryption.

42
00:02:33,770 --> 00:02:38,310
So in encryption, we, what we do,
either we use the data masking or we,

43
00:02:38,390 --> 00:02:43,545
like encrypt the data using, key in
AWS, there's a service like AWS KMS.

44
00:02:44,815 --> 00:02:50,035
So what happens like the plaintext it
is being encrypted using a key and the

45
00:02:50,115 --> 00:02:56,955
customer at the receiving side is being
provided a decrypt key to so that only

46
00:02:56,955 --> 00:03:02,155
the like reliable customer whom we want
to send the information is having the

47
00:03:02,155 --> 00:03:04,045
key to decrypt and view the contents.

48
00:03:04,355 --> 00:03:06,215
So that's how we can secure it.

49
00:03:08,340 --> 00:03:11,480
Now the question is, okay, we
have learned about the frauds.

50
00:03:11,480 --> 00:03:15,340
We have learned about data security, but
how we can secure the email attachments.

51
00:03:15,760 --> 00:03:20,440
So in the email attachments, like the most
common way is okay, you educate the users,

52
00:03:20,720 --> 00:03:24,760
you show the awareness, the organizations,
they are installing antivirus softwares.

53
00:03:26,275 --> 00:03:30,925
But from our end, like when we are sending
the emails to our customers, what we can

54
00:03:30,925 --> 00:03:35,335
do, we can use, the encryption at our
end, which the most common technology is

55
00:03:35,355 --> 00:03:37,595
like data masking or password protection.

56
00:03:37,985 --> 00:03:41,225
In that case, like when the users,
they are receiving the emails,

57
00:03:41,545 --> 00:03:45,225
they have to, type a password, then
only they can view the content.

58
00:03:45,755 --> 00:03:48,745
Otherwise, even if the emails they
are being forwarded to a wrong

59
00:03:48,895 --> 00:03:53,705
email, wrong person, he like that
fraud guy cannot open the email.

60
00:03:53,725 --> 00:03:56,825
So your sensitive
information is still secure.

61
00:03:57,475 --> 00:03:59,695
The other way what we
can do is access control.

62
00:04:00,335 --> 00:04:04,515
So in the access control, we can
actually control the time period

63
00:04:04,645 --> 00:04:08,845
for which this information, the
attachment, what we are sending is

64
00:04:08,855 --> 00:04:11,215
accessible beyond that time period.

65
00:04:11,245 --> 00:04:15,155
Actually, this attachment just
shows, okay, link is, does not exist.

66
00:04:15,185 --> 00:04:20,075
The validity is over coming
to the implementation side.

67
00:04:20,105 --> 00:04:20,455
Okay.

68
00:04:20,455 --> 00:04:22,045
How we can actually implement it.

69
00:04:22,475 --> 00:04:27,245
The very simple solution, what I want to
depict today is using PyMiniGip library.

70
00:04:27,495 --> 00:04:30,825
It's an open source library
provided by, Python and the

71
00:04:30,825 --> 00:04:32,815
installation is also quite simple.

72
00:04:33,305 --> 00:04:36,835
Now, what happens PyMiniGip library,
what it does, you have a file.

73
00:04:37,900 --> 00:04:42,830
When you use PyMiniGip library,
it actually creates a folder which

74
00:04:42,830 --> 00:04:47,350
is a zipped folder and that zipped
folder is when you try to unzip

75
00:04:47,350 --> 00:04:48,730
it, it will ask you a password.

76
00:04:49,200 --> 00:04:52,480
Now only the reliable person who
is having the password can open it.

77
00:04:52,880 --> 00:04:57,940
So we are going to implement first layer
of security using PyMiniGip library.

78
00:04:58,310 --> 00:05:02,820
So there is a method like compress, there
are three arguments as I have shown below.

79
00:05:03,280 --> 00:05:06,460
Like you need to provide your source
file destination then what is the

80
00:05:06,460 --> 00:05:08,135
destination file where you want to?

81
00:05:08,815 --> 00:05:10,375
Keep this zip file folder.

82
00:05:10,795 --> 00:05:13,295
What is the password you want to provide?

83
00:05:13,755 --> 00:05:18,935
So Password is something like you can
keep Information which only dead person

84
00:05:18,935 --> 00:05:23,365
know like his date of birth or like
last four digits of his cell number or

85
00:05:23,365 --> 00:05:28,815
something like that if you are going to
apply this then this information only

86
00:05:28,815 --> 00:05:34,185
the person know and they can They can
easily open the file Secondly, they are

87
00:05:34,185 --> 00:05:37,395
not going to reach back to you again
and again asking, Hey, can you reset

88
00:05:37,415 --> 00:05:38,685
my password or something like that?

89
00:05:38,925 --> 00:05:40,875
It's an easy way to implement it.

90
00:05:41,415 --> 00:05:44,825
And the last argument is a level to what
level you want to compress the file.

91
00:05:45,265 --> 00:05:47,915
So there is a zero to
10, 10 being the highest.

92
00:05:50,165 --> 00:05:50,545
Okay.

93
00:05:50,545 --> 00:05:52,895
we have learned about PyMiniJib library.

94
00:05:52,925 --> 00:05:53,245
Okay.

95
00:05:53,245 --> 00:05:57,175
This library can help in jibbing the,
like in, creating a password for it.

96
00:05:57,415 --> 00:06:02,055
But if we are talking about AWS
infrastructure, how we can do it.

97
00:06:02,395 --> 00:06:06,545
So in AWS Lambda, where you
generally write the code, there

98
00:06:06,545 --> 00:06:10,595
is a way you can create a layer
for this particular library.

99
00:06:11,015 --> 00:06:12,575
The installation is quite simple.

100
00:06:12,835 --> 00:06:17,025
this library you can install using pip
command, it's a single line command.

101
00:06:17,335 --> 00:06:22,790
And when you install it in your local, You
can attach it as a layer as I have shown

102
00:06:22,790 --> 00:06:24,580
in on the right hand side bottom part.

103
00:06:24,830 --> 00:06:30,170
So once you, in your Lambda, if you have
to click on, like uploading a layer, which

104
00:06:30,170 --> 00:06:32,495
is, which will be a zip file archive.

105
00:06:32,845 --> 00:06:36,535
And when you upload it, you will
be able to use the Pyminijip

106
00:06:36,565 --> 00:06:38,215
library in your source code.

107
00:06:40,575 --> 00:06:46,245
So we have talked about encryption, which
is through Pyminijip library and in AWS

108
00:06:46,635 --> 00:06:48,345
Lambda function, we will create a layer.

109
00:06:48,625 --> 00:06:51,035
But how to make sure about access control.

110
00:06:51,470 --> 00:06:54,350
in S3 we have a concept S3 PD signed, URL.

111
00:06:54,710 --> 00:06:59,450
This pre-signed URL is basically,
like if there are S3 objects, we

112
00:06:59,450 --> 00:07:03,910
want to provide access to some third
person without changing the IM policy

113
00:07:03,910 --> 00:07:05,830
or providing any AWS credentials.

114
00:07:06,280 --> 00:07:07,600
There is a bypass route.

115
00:07:07,630 --> 00:07:11,980
You just provide that person a
temporary access by generating

116
00:07:11,980 --> 00:07:14,840
a pre signed URL and you.

117
00:07:14,840 --> 00:07:17,720
And on this URL you can actually control.

118
00:07:18,250 --> 00:07:23,470
The validity for how long you are that
person can access this particular object.

119
00:07:23,920 --> 00:07:26,590
to control the access, there
are actually, three ways.

120
00:07:26,880 --> 00:07:29,890
like for example, if you are
generating the signed URL through

121
00:07:29,930 --> 00:07:34,410
IAM instance profile, the URL
will be valid for only six hours.

122
00:07:34,890 --> 00:07:38,540
If you are using AWS SDA service,
which is security token service.

123
00:07:39,365 --> 00:07:44,155
The URL can be valid till 36 hours
and the last the longest is like

124
00:07:44,155 --> 00:07:48,025
through IAM user The URL will
be valid for seven working days.

125
00:07:48,655 --> 00:07:52,215
Like we can achieve several
benefits out of it as I mentioned

126
00:07:52,215 --> 00:07:54,505
here Like it's completely secure.

127
00:07:54,555 --> 00:07:57,281
We are not sharing any AWS credentials.

128
00:07:57,281 --> 00:08:02,020
It's just a single URL And you decide
whom you want to grant the access.

129
00:08:02,070 --> 00:08:04,330
Okay, you are sending it in your email.

130
00:08:04,330 --> 00:08:10,070
And the third user, they can, through
this URL, you are granting the access.

131
00:08:10,070 --> 00:08:12,830
Okay, you can upload or
you can download the file.

132
00:08:14,460 --> 00:08:17,090
This is how, pre signed
URL email looks like.

133
00:08:17,430 --> 00:08:20,590
If you look this particular email,
there is actually no attachment.

134
00:08:21,010 --> 00:08:21,490
Okay.

135
00:08:21,730 --> 00:08:25,290
And secondly, when, when you
click on this particular, email

136
00:08:25,290 --> 00:08:27,150
link, it'll ask you a password.

137
00:08:27,510 --> 00:08:30,840
So that password only the person
whom you, we are sending the

138
00:08:30,840 --> 00:08:32,760
email, only that person knows.

139
00:08:33,290 --> 00:08:37,160
And the last part is we are also
actually controlling the access till

140
00:08:37,160 --> 00:08:42,370
how long this URL should be valid based
on the way you are creating it, it can,

141
00:08:42,370 --> 00:08:45,110
it, the URL ranges from six hours to.

142
00:08:45,555 --> 00:08:46,725
Like seven working days

143
00:08:49,375 --> 00:08:49,755
though.

144
00:08:50,375 --> 00:08:55,235
So we have, protected the file using
PI mini JIP, and we have, performed

145
00:08:55,255 --> 00:08:59,505
access control also to send the
service to send the, like a file

146
00:08:59,765 --> 00:09:04,845
now this password protected file,
we can use AWS SCS service, which is

147
00:09:04,855 --> 00:09:09,015
send email service and, send email
service, it has some, like features.

148
00:09:09,690 --> 00:09:14,160
So you need to create a verified
identity whom you are going to send

149
00:09:14,170 --> 00:09:17,480
email and to whom you want to send.

150
00:09:17,810 --> 00:09:21,310
Actually, those can be verified
on unverified identities.

151
00:09:21,610 --> 00:09:26,860
So all the email addresses, then they
need not to be verified, but there is

152
00:09:27,080 --> 00:09:32,090
one constraint in SES service, which
is like only 40 emails per second.

153
00:09:32,100 --> 00:09:32,930
They can be sent.

154
00:09:33,420 --> 00:09:36,770
I would like to show you the
final code in the final code.

155
00:09:36,770 --> 00:09:41,090
If you look, the first line I am using
the PyMiniGip library, which is just going

156
00:09:41,090 --> 00:09:46,430
to compress a CSV file and I am providing
password, compressed level, everything.

157
00:09:46,820 --> 00:09:52,530
Once this file is being compressed
using PyMiniGip, I am going to

158
00:09:52,530 --> 00:09:54,910
generate a signed URL for it.

159
00:09:55,555 --> 00:09:57,665
And I am, using it through Im users.

160
00:09:57,665 --> 00:10:01,085
So I was having the option to
put it for seven working days,

161
00:10:01,145 --> 00:10:02,915
which is what I've used here.

162
00:10:03,455 --> 00:10:08,235
And SES service, as I mentioned, it
has a limit of 40, emails per second.

163
00:10:08,585 --> 00:10:12,865
So I, I thought okay, why not
to, put one, second delay, in

164
00:10:12,865 --> 00:10:14,275
between each and every email.

165
00:10:14,740 --> 00:10:17,850
But it purely depends on your
implementation, how you want to do it.

166
00:10:18,340 --> 00:10:18,780
But time.

167
00:10:19,060 --> 00:10:23,750
sleep we can use, in between sending the
emails to make sure we are not, leaching

168
00:10:23,760 --> 00:10:26,210
the throttling limit of, SCS service.

169
00:10:27,300 --> 00:10:30,060
The final architecture
will look like this here.

170
00:10:30,140 --> 00:10:31,300
it's completely built in AWS.

171
00:10:32,550 --> 00:10:33,920
There is a CSV file.

172
00:10:34,270 --> 00:10:34,640
Okay.

173
00:10:34,640 --> 00:10:38,650
Using PyMiniJib library, you
have, encrypted it, a password.

174
00:10:38,650 --> 00:10:38,670
Okay.

175
00:10:39,060 --> 00:10:42,450
like a zip folder is there when you
click on it, it will ask you a password.

176
00:10:43,050 --> 00:10:44,600
there is a pre signed URL.

177
00:10:44,790 --> 00:10:48,220
This pre signed URL is valid
for a certain time limit.

178
00:10:48,670 --> 00:10:52,450
And through SCS service, I am
going to send it to verified

179
00:10:52,450 --> 00:10:53,760
or unverified accounts.

180
00:10:54,350 --> 00:10:58,660
Now, the whole advantage of it is
even, even today, if this, emails.

181
00:10:59,225 --> 00:11:00,895
They are being sent to wrong person.

182
00:11:01,145 --> 00:11:03,385
They won't be knowing like,
what is the password for it?

183
00:11:03,655 --> 00:11:05,445
Only the reliable person, they know it.

184
00:11:05,835 --> 00:11:08,935
And secondly, we are also
putting a time limit.

185
00:11:09,065 --> 00:11:09,455
Okay.

186
00:11:09,455 --> 00:11:12,345
That for this particular time,
only this emails, they are valid.

187
00:11:12,785 --> 00:11:17,845
And the third, the most, important feature
here is if I go back, see, if you look

188
00:11:18,005 --> 00:11:20,365
in the emails, there is no attachment.

189
00:11:20,485 --> 00:11:20,905
Okay.

190
00:11:20,915 --> 00:11:25,960
So from the Lambda function,
when we have to send emails, The

191
00:11:25,960 --> 00:11:29,830
attachments, they take some time to
attach, but here you are just, it's

192
00:11:29,860 --> 00:11:31,460
just a URL, what we are sending.

193
00:11:31,840 --> 00:11:36,320
So that transfer time has,
significantly reduced and

194
00:11:36,320 --> 00:11:38,020
Lambda is pay as you go service.

195
00:11:38,050 --> 00:11:41,980
So we are actually saving some amount
through our implementation also.

196
00:11:42,400 --> 00:11:43,640
So no attachments are there.

197
00:11:44,910 --> 00:11:48,100
this is all about me and,
like I have written an article

198
00:11:48,100 --> 00:11:49,880
also on this particular topic.

199
00:11:49,900 --> 00:11:51,370
feel free to go through it.

200
00:11:51,960 --> 00:11:56,530
And, this is my Twitter, gautamM85
in case of any questions, anything,

201
00:11:56,890 --> 00:11:58,720
please feel free to reach out to me.

202
00:11:59,260 --> 00:11:59,660
Thank you.

