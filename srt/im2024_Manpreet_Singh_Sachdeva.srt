1
00:00:00,010 --> 00:00:01,080
Hello, folks.

2
00:00:01,850 --> 00:00:08,310
A very warm welcome from my side
to CON42 Incident Management 2024.

3
00:00:09,210 --> 00:00:15,129
I am Manpreet Singh Sachdeva and I work
for Walmart Global Tech in United States.

4
00:00:15,820 --> 00:00:22,900
Today, I will be talking about Kubernetes
cluster security and will explain

5
00:00:23,110 --> 00:00:27,744
how Kubernetes has become really
important In managing the containerized

6
00:00:27,744 --> 00:00:34,205
applications and it's why it is so
important for us to secure our Kubernetes

7
00:00:34,214 --> 00:00:40,374
workloads, the applications and to
protect us against the cyber attacks.

8
00:00:41,784 --> 00:00:44,345
So first, let me introduce myself.

9
00:00:44,505 --> 00:00:48,205
I'm Manpreet Singh Sachdeva
and I carry a very diverse

10
00:00:48,265 --> 00:00:51,644
experience in DevSecOps, MLOps.

11
00:00:52,980 --> 00:00:56,370
Incident management as well as
automated automation testing.

12
00:00:57,210 --> 00:01:04,410
So I myself certified, as a Kubernetes
administrator, application developer

13
00:01:04,830 --> 00:01:06,770
and security specialist as well.

14
00:01:07,260 --> 00:01:10,550
So I'm certified in, AWS as well.

15
00:01:11,100 --> 00:01:16,110
I possess both solution architect as well
as DevOps, professional certification.

16
00:01:17,060 --> 00:01:20,430
I'm very passionate about,
security, cyber security.

17
00:01:20,430 --> 00:01:26,780
I consider myself as a cyber warrior
fighting against the cyber criminals

18
00:01:27,660 --> 00:01:32,950
and, protecting all the applications
throughout the internet world.

19
00:01:33,680 --> 00:01:39,710
So we wonder, cyber security is one of
the most, like the hottest topic nowadays.

20
00:01:40,365 --> 00:01:45,425
Because, we saw an example a couple
of years back about Log four j

21
00:01:45,515 --> 00:01:51,425
vulnerability and the damage it
caused throughout the industry, are

22
00:01:51,425 --> 00:01:53,735
all our customers were at stake.

23
00:01:54,185 --> 00:01:59,860
We had a big reputational damage
to so many companies as well as

24
00:02:00,425 --> 00:02:06,085
financial damage and, cybersecurity
has many ways of attacking us.

25
00:02:06,355 --> 00:02:12,545
the most popular way, is like the phishing
and, optimizing, the cyber, optimizing

26
00:02:12,635 --> 00:02:19,535
the cloud, resources to attack the
cloud infrastructure, and way to manage

27
00:02:19,535 --> 00:02:26,825
out, things where our worker nodes,
our applications are thereby impacted.

28
00:02:27,135 --> 00:02:28,905
we'll talk about everything today.

29
00:02:30,025 --> 00:02:34,285
And, we'll first, we'll talk about
how we can secure our infrastructure,

30
00:02:34,295 --> 00:02:39,575
how we can secure our workloads,
how we can secure our cloud as well.

31
00:02:40,165 --> 00:02:46,645
So I'm really excited to share my talk
and I, just hope we all of us learn

32
00:02:46,725 --> 00:02:49,275
together and get something out of it.

33
00:02:50,155 --> 00:02:51,815
So guys, let's get started.

34
00:02:52,635 --> 00:02:55,755
So Kubernetes cluster security.

35
00:02:56,085 --> 00:03:02,065
what is it and how Kubernetes
became important and, what are the

36
00:03:02,065 --> 00:03:03,995
advantages Kubernetes offers us?

37
00:03:04,535 --> 00:03:10,215
So few years back, all of us were hosted
on virtual machines, bare metal servers.

38
00:03:10,814 --> 00:03:14,955
And then we had a revolution
where everything starting

39
00:03:15,195 --> 00:03:16,185
started getting containerized.

40
00:03:17,615 --> 00:03:20,324
So we had the docker containers and.

41
00:03:20,740 --> 00:03:25,750
We started using the applications,
making them, platform agnostic.

42
00:03:26,060 --> 00:03:28,230
Like we can use Java, we can use Node.

43
00:03:28,240 --> 00:03:31,590
js, we can use Python
and just containerize our

44
00:03:31,590 --> 00:03:33,650
application and run anywhere.

45
00:03:34,410 --> 00:03:35,520
Anywhere in the system.

46
00:03:36,119 --> 00:03:42,060
And, then docker had its own way of
orchestration using docker swarm, but

47
00:03:42,060 --> 00:03:47,340
it had limitations where we couldn't,
operate on scale and, there were, there

48
00:03:47,350 --> 00:03:49,790
was limitations in the resources as well.

49
00:03:50,509 --> 00:03:56,280
And then came Kubernetes and offered
us, out of the world orchestration

50
00:03:57,995 --> 00:03:59,515
We started operating at scale.

51
00:03:59,755 --> 00:04:05,465
All the applications started adopting
the kubernetes way of, functioning.

52
00:04:05,984 --> 00:04:13,534
So kubernetes, was made for the
applications to work on scale and the,

53
00:04:13,544 --> 00:04:19,965
all the, different applications team, they
started containerizing their workloads.

54
00:04:20,585 --> 00:04:25,830
And today we learned that how can we
leverage the real world best practices To

55
00:04:25,830 --> 00:04:28,270
safeguard our cloud native applications

56
00:04:30,550 --> 00:04:34,920
So i'm just presenting in front of you
the table of contents for what we will

57
00:04:34,920 --> 00:04:40,960
go through today So we will talk about
Kubernetes security in general and our

58
00:04:41,000 --> 00:04:46,815
multi layered approach for the kubernetes
security How we can secure the control

59
00:04:46,815 --> 00:04:53,625
plane, secure the nodes we work on, secure
our applications and how can we secure,

60
00:04:53,755 --> 00:04:56,414
the network part of, the Kubernetes.

61
00:04:57,084 --> 00:05:01,205
And then we will touch base on some of
the real world threats and incidents

62
00:05:01,235 --> 00:05:06,625
which happened in the past and how
can we, leverage some best practices

63
00:05:06,925 --> 00:05:08,645
for our workloads going forward.

64
00:05:08,955 --> 00:05:10,725
I'll also share some resources.

65
00:05:11,410 --> 00:05:15,650
At the end of this session
and I think, I'm just excited.

66
00:05:15,660 --> 00:05:16,880
So let's get started

67
00:05:17,880 --> 00:05:21,830
So yeah intro introducing you to
kubernetes security So as I told

68
00:05:21,830 --> 00:05:26,690
you know kubernetes revolutionized
the way organizations deploy manage

69
00:05:26,710 --> 00:05:31,430
and scale applications So the best
example of kubernetes is like you

70
00:05:31,430 --> 00:05:37,085
can scale in and scale out Based on
the auto scaling, we can configure

71
00:05:37,175 --> 00:05:38,935
with the help of the cloud services.

72
00:05:39,225 --> 00:05:43,845
So Kubernetes itself has its auto
scaling called horizontal pod auto

73
00:05:43,985 --> 00:05:48,754
scaling where you can scale in and scale
out And you can operate the way you

74
00:05:48,805 --> 00:05:55,545
get the customer traffic so That's you
know We are given such a great power

75
00:05:55,665 --> 00:06:00,425
to operate on scale But with great
power, there is a great responsibility

76
00:06:00,425 --> 00:06:05,760
You of securing our clusters, which
is really essential, as it becomes a

77
00:06:05,780 --> 00:06:08,540
prime target for the cyber attacks.

78
00:06:10,210 --> 00:06:15,910
a single security flaw, can lead to major
data breaches, service outages, and as

79
00:06:15,910 --> 00:06:18,640
I told you, so much reputational damage.

80
00:06:18,970 --> 00:06:24,580
In the past, we have seen big
outages just based on, the security

81
00:06:24,580 --> 00:06:26,770
vulnerabilities in our infrastructure.

82
00:06:27,410 --> 00:06:33,740
And that was all like maybe due to
the negligence or unawareness of the

83
00:06:33,740 --> 00:06:36,480
teams who actually operate on scale.

84
00:06:37,120 --> 00:06:43,010
So here we will talk about how we
can secure not only our workload

85
00:06:43,010 --> 00:06:47,970
applications, but also the control
plane, the network policies.

86
00:06:48,580 --> 00:06:52,560
How can we make sure that we have
certain network policies that don't

87
00:06:52,560 --> 00:06:56,530
even allow, the, access to our
cluster through some IP addresses.

88
00:06:57,000 --> 00:07:00,880
And we'll also talk about how to
manage our secrets in such a way

89
00:07:00,920 --> 00:07:04,070
that we don't expose our secrets.

90
00:07:04,450 --> 00:07:06,830
and we never keep them in the plain text.

91
00:07:06,830 --> 00:07:12,900
We always encode them and, use, our
secrets management systems like Vault,

92
00:07:13,330 --> 00:07:16,450
AWS Secrets Manager, and Azure Secrets.

93
00:07:16,500 --> 00:07:19,799
The way we can, work in conjunction
with the cloud providers

94
00:07:20,280 --> 00:07:21,600
and secure infrastructure.

95
00:07:22,049 --> 00:07:24,870
So for modern cloud
infrastructure, security we know

96
00:07:24,870 --> 00:07:27,829
is totally not non negotiable.

97
00:07:28,669 --> 00:07:33,709
Robust defenses at all layers ensure, that
applications remain safe from intrusions.

98
00:07:35,415 --> 00:07:38,885
And, when we talk about
security, we talk about four C's.

99
00:07:39,185 --> 00:07:42,825
So one is the cluster level
security that we will secure

100
00:07:42,855 --> 00:07:44,624
the platform cluster itself.

101
00:07:45,475 --> 00:07:48,774
the infrastructure, I, when I talk
about cluster, the infrastructure.

102
00:07:49,375 --> 00:07:52,415
Then the container, the
workload which are running.

103
00:07:52,880 --> 00:07:55,590
In containers all we
know, it's containerized.

104
00:07:55,900 --> 00:08:01,040
So securing our container How anyone
cannot execute inside a container?

105
00:08:01,040 --> 00:08:07,260
How cannot somebody just come and use the
IP address and Do anything on a container?

106
00:08:07,260 --> 00:08:11,970
So we have to secure our containers
We also have to secure the cloud like,

107
00:08:12,180 --> 00:08:18,480
whatever cloud provider we use like
gcp Azure or aws all have really good

108
00:08:18,480 --> 00:08:23,710
functionalities which we can leverage
To secure our cloud and, I will give

109
00:08:23,710 --> 00:08:29,020
some examples, at the end, like how can
we also leverage the cloud, how can we

110
00:08:29,330 --> 00:08:31,059
secure our cloud infrastructure as well?

111
00:08:31,109 --> 00:08:33,360
And then we come at last to the code.

112
00:08:33,879 --> 00:08:37,989
even the code has some vulnerabilities
in case like we don't follow

113
00:08:38,539 --> 00:08:40,769
the standard coding directions.

114
00:08:41,169 --> 00:08:46,160
Which we should be following and we
don't have the, right kind of levers and

115
00:08:46,160 --> 00:08:50,700
right you know, the coding, directions
we have been, we must be using, when

116
00:08:50,700 --> 00:08:52,210
we are working in an agile environment.

117
00:08:52,420 --> 00:08:53,730
So we'll talk about that as well.

118
00:08:55,220 --> 00:08:58,250
here we have a multi layered
approach to security.

119
00:08:58,390 --> 00:09:02,750
by securing each layer, we ensure that
there is a comprehensive protection,

120
00:09:03,550 --> 00:09:05,690
across the entire Kubernetes environment.

121
00:09:06,260 --> 00:09:09,400
When we say comprehensive,
we mean end to end protection

122
00:09:09,400 --> 00:09:10,650
for a Kubernetes environment.

123
00:09:11,990 --> 00:09:16,630
the Kubernetes cluster security involves
addressing risk at multiple layers.

124
00:09:17,320 --> 00:09:20,995
The four key layers are Basically
include the control plane.

125
00:09:21,295 --> 00:09:23,465
It's nothing but the brain of the cluster.

126
00:09:23,755 --> 00:09:27,775
All of the, the master nodes are
in the control plane and we have

127
00:09:27,775 --> 00:09:32,285
to make sure that the way we manage
our cluster, has to be secure.

128
00:09:32,775 --> 00:09:37,735
And we have to apply all our security
policies at the control plane, making

129
00:09:37,735 --> 00:09:42,905
sure, we give, because all, always the
admin has the control plane access and

130
00:09:42,905 --> 00:09:47,785
we have to make sure that, we follow
the security guidelines and, adhere

131
00:09:47,785 --> 00:09:51,805
to whatever the security policies
are being given by our company.

132
00:09:51,865 --> 00:09:55,695
like we all have our company policies,
so we have to, adhere with that.

133
00:09:56,095 --> 00:09:59,765
And then we, talk about the nodes, like
when, then we have the worker nodes,

134
00:10:00,315 --> 00:10:02,255
in case, for the virtual machines.

135
00:10:03,960 --> 00:10:08,220
Like we have the running workloads or we
also may have a physical virtual machine.

136
00:10:09,055 --> 00:10:13,725
Then we talk about the actual
workloads, the containerized apps

137
00:10:13,735 --> 00:10:15,695
which are deployed in the cluster.

138
00:10:15,965 --> 00:10:18,735
We'll talk about how we
can secure our workloads.

139
00:10:19,035 --> 00:10:23,435
And then we talk about the network part,
which is the communication pathways that

140
00:10:23,815 --> 00:10:28,015
connect the services, the applications
and the infrastructure together.

141
00:10:28,385 --> 00:10:30,335
So we'll talk about the
network security as well.

142
00:10:31,645 --> 00:10:35,185
So let's first talk about
the control plane security.

143
00:10:35,420 --> 00:10:40,200
So in control pane, we have the API
server authentication and authorization.

144
00:10:40,490 --> 00:10:44,280
So it's really important to secure,
this API server authentication.

145
00:10:44,290 --> 00:10:48,690
For that, we can implement
OAuth or OpenID Connect.

146
00:10:49,180 --> 00:10:54,280
So that is a very strong way of
authenticating and we can also use the

147
00:10:54,300 --> 00:10:57,300
role based access control policies.

148
00:10:57,400 --> 00:11:01,880
Role based access control policies are
very popular in the Kubernetes world.

149
00:11:02,150 --> 00:11:08,700
suppose I'm part of one user, I'm part
of one group and the group has an owner.

150
00:11:09,040 --> 00:11:13,290
So as a group owner, or as a part
of the group, as a group member,

151
00:11:13,350 --> 00:11:15,025
I will only have one access.

152
00:11:15,305 --> 00:11:19,625
The access to some of the functions
on Kubernetes, suppose I can, if

153
00:11:19,625 --> 00:11:24,160
I'm part of a, Developer community
and I'm using a staging environment.

154
00:11:24,170 --> 00:11:28,820
So I may be able to list, create,
delete, or, do anything on a

155
00:11:28,820 --> 00:11:32,490
lower environment, but suppose
there is a production environment.

156
00:11:32,720 --> 00:11:35,800
So on that, my role based
access as a developer.

157
00:11:36,055 --> 00:11:38,915
should not be able to delete
any resource or should not

158
00:11:38,925 --> 00:11:40,065
be able to edit any resource.

159
00:11:40,375 --> 00:11:45,605
So role based kind of access will
enable a certain kind of, ownership

160
00:11:45,605 --> 00:11:49,355
or certain kind of rules, to a
kind of, the group we belong to.

161
00:11:49,355 --> 00:11:53,145
Suppose there is a developer group,
there is a DevOps group, and then

162
00:11:53,165 --> 00:11:57,355
there is an SRE group, and then
there are like the incident managers.

163
00:11:57,375 --> 00:12:00,955
So all will have a different
kind of role based access.

164
00:12:01,580 --> 00:12:05,930
And the role-based access will
define the kind of operations they

165
00:12:05,930 --> 00:12:10,610
can do on a particular workload or
on a particular control plane mode.

166
00:12:11,800 --> 00:12:16,060
So this was what we talked, spoke
about the role-based access.

167
00:12:16,090 --> 00:12:19,390
Then we come to the HCD encryption.

168
00:12:19,660 --> 00:12:20,905
So what is HCD?

169
00:12:20,910 --> 00:12:24,400
So like we have heard this name
a lot in Kubernetes, so it's

170
00:12:24,400 --> 00:12:26,020
nothing but a key value database.

171
00:12:27,530 --> 00:12:29,730
It works like the way, the Redis works.

172
00:12:30,090 --> 00:12:35,460
So it is always encrypted at rest
to prevent unauthorized access

173
00:12:35,460 --> 00:12:37,070
to our critical information.

174
00:12:37,370 --> 00:12:42,440
So it's very important to have encryption
on etcd because if we don't have

175
00:12:42,590 --> 00:12:48,630
encryption, we all have, we will have
all our, basically cube system resources.

176
00:12:50,270 --> 00:12:52,920
Vulnerable because they will
all be exposed if we don't have

177
00:12:52,970 --> 00:12:55,070
encryption on the etcd level.

178
00:12:55,340 --> 00:13:00,750
So most of the companies they follow
etcd encryption, but like even if we do

179
00:13:00,750 --> 00:13:06,290
a demo project if we do a a Just want to
do a a poc still it is very important to

180
00:13:06,300 --> 00:13:12,995
encrypt your etcd because a small gap in
not, managing etcd properly, there will

181
00:13:13,015 --> 00:13:16,305
be a risk to, expose your resources.

182
00:13:16,325 --> 00:13:17,305
that is very risky.

183
00:13:17,575 --> 00:13:20,735
it's always recommended do
a etcd encryption at risk.

184
00:13:21,425 --> 00:13:23,655
Then we talk about the network policies.

185
00:13:23,925 --> 00:13:27,045
network policies are applied
on the Kubernetes services.

186
00:13:27,275 --> 00:13:31,255
Kubernetes services is the way the pods
or the other resources communicate with

187
00:13:31,255 --> 00:13:34,355
each other based on the port we expose.

188
00:13:34,625 --> 00:13:37,415
network policies control the
traffic between the pods.

189
00:13:38,415 --> 00:13:43,071
Suppose I am in a different namespace and,
another app is in a different namespace.

190
00:13:43,111 --> 00:13:44,011
We have two apps.

191
00:13:44,251 --> 00:13:45,931
We don't want them to communicate.

192
00:13:46,251 --> 00:13:50,921
So we will ensure that we will, make
such network policies that we will

193
00:13:50,941 --> 00:13:52,851
restrict traffic between the apps.

194
00:13:53,141 --> 00:13:57,041
And there is, suppose there is a
database app which uses a logging app.

195
00:13:57,381 --> 00:14:00,881
But for them we will always want
them to, have a communication.

196
00:14:01,251 --> 00:14:05,131
So for them we will have a network
policy which will allow, Access to

197
00:14:05,131 --> 00:14:09,931
and from the both the apps using
the ports on the service objects.

198
00:14:10,361 --> 00:14:13,421
So network policies always control
the traffic between the ports.

199
00:14:13,821 --> 00:14:16,811
They minimize the risk of lateral
movement within the cluster.

200
00:14:18,121 --> 00:14:22,861
So there's a specific tools which
help us leverage the network policies.

201
00:14:23,291 --> 00:14:27,381
like we have Calico or psyllium,
they can actually define and

202
00:14:27,381 --> 00:14:29,051
enforce these kinds of policies.

203
00:14:31,501 --> 00:14:33,881
So we spoke about the
control plane security.

204
00:14:34,176 --> 00:14:37,406
Now we will talk about how we
can actually secure our node.

205
00:14:38,066 --> 00:14:42,316
So node level access if somebody has
a worker node level kind of an access

206
00:14:42,836 --> 00:14:47,956
they can do anything they can even
remove our Workloads, they can even

207
00:14:47,966 --> 00:14:53,286
expose the secrets if the attackers
have the access to the node It really

208
00:14:53,286 --> 00:14:59,611
becomes difficult For us to control
what they can do So on the node We know

209
00:14:59,611 --> 00:15:03,441
there is an operating system, so we
have to harden the operating system.

210
00:15:03,671 --> 00:15:04,681
So how can we do that?

211
00:15:04,901 --> 00:15:10,751
Just start by minimizing the attack
surface at the OS level, use lightweight

212
00:15:10,751 --> 00:15:15,661
hardened distributions like, where we
are, which are very less, vulnerable.

213
00:15:15,881 --> 00:15:18,151
So use those kinds of
hardened distributions.

214
00:15:18,441 --> 00:15:21,131
For example, there is a Ubuntu minimal.

215
00:15:21,781 --> 00:15:25,821
And then, follow all the CIS
benchmarks for the system hardening.

216
00:15:26,221 --> 00:15:30,891
So CIS benchmarks are nothing but security
standards, which we have to follow.

217
00:15:31,286 --> 00:15:35,816
To make sure that we are just following
the guidelines set by the CIS benchmarks.

218
00:15:36,526 --> 00:15:39,536
Then we talk about the
container runtime security.

219
00:15:39,996 --> 00:15:44,946
So on a node we have the container, so
it's always better that we limit the

220
00:15:45,406 --> 00:15:51,211
container's access to the host system
by enabling app armor or the SE Linux,

221
00:15:52,001 --> 00:15:56,911
so I will talk about the AppArmor, I'll
share some resources, how we can, secure

222
00:15:56,921 --> 00:15:58,821
our runtime security through AppArmor.

223
00:15:59,271 --> 00:16:03,791
by which, we are able to make sure
that, if a user is not, comes in

224
00:16:03,811 --> 00:16:09,031
or if a profile is not, listed in
AppArmor, if it is blacklisted, it

225
00:16:09,031 --> 00:16:11,031
cannot access the container at runtime.

226
00:16:11,771 --> 00:16:16,051
so that's a really important feature
where you can restrict certain

227
00:16:16,071 --> 00:16:19,891
profiles through blacklisting and
you can allow certain profiles

228
00:16:20,281 --> 00:16:21,652
with AppArmor through whitelisting.

229
00:16:21,652 --> 00:16:23,831
So both of the things can be done.

230
00:16:24,261 --> 00:16:28,521
So in this, you can only
restrict the container runtime.

231
00:16:28,981 --> 00:16:32,741
To a specific profile by profile, you
mean that, there may be a user or a

232
00:16:32,941 --> 00:16:37,801
group of users or a particular profile,
which we have created on the node, which

233
00:16:37,801 --> 00:16:39,901
has access to some of the containers.

234
00:16:40,271 --> 00:16:42,051
So that can be achieved through app armor.

235
00:16:43,501 --> 00:16:46,491
Then we talk about the
security on the kubelet level.

236
00:16:46,851 --> 00:16:48,681
So how can we secure our kubelet?

237
00:16:48,721 --> 00:16:50,401
The agent running on each node.

238
00:16:50,491 --> 00:16:53,751
So it runs as a, like a
daemon set on, on each node.

239
00:16:54,081 --> 00:16:58,331
So we can secure the kubelet by
enforcing, the TLS for communication.

240
00:16:58,551 --> 00:16:59,861
Like we can use, certificates.

241
00:17:00,701 --> 00:17:03,871
And, we have the certificates
bind, bounded with the keys.

242
00:17:04,161 --> 00:17:08,722
So always use the TLS certificates,
on the kubelet and restrict

243
00:17:08,732 --> 00:17:10,682
the kubelet API access.

244
00:17:10,932 --> 00:17:16,662
So by which, if only a client has
the certificate key, those clients

245
00:17:16,662 --> 00:17:20,972
can only, use, or do operations on
the kubelet, on the kubelet level.

246
00:17:21,002 --> 00:17:24,952
So it is always very good
practice to use TLS certificates.

247
00:17:24,952 --> 00:17:25,096
Thanks.

248
00:17:25,497 --> 00:17:28,687
We can always enforce
TLS for communication and

249
00:17:28,687 --> 00:17:29,997
restrict the kubelet API.

250
00:17:30,387 --> 00:17:34,367
So by this we will have no unauthorized
kind of access on the node level.

251
00:17:34,817 --> 00:17:39,647
So only the admins which, who have
the, the keys for those certificates

252
00:17:39,707 --> 00:17:44,037
can, run commands on the kubelet
or all of the authorized users.

253
00:17:45,087 --> 00:17:47,267
So this was all about the node security.

254
00:17:47,777 --> 00:17:53,207
Now let's talk about the application
security, the workload security, or how to

255
00:17:53,207 --> 00:17:58,177
actually come inside a container and have
policies which can secure the container.

256
00:17:59,077 --> 00:18:05,557
So the most important thing, is to
not give a container an elevated

257
00:18:05,557 --> 00:18:09,857
level of access that the user should
not have a root kind of access.

258
00:18:10,562 --> 00:18:14,282
Or we should not expose such
kind of access where we can

259
00:18:14,282 --> 00:18:16,532
run, all admin kind of commands.

260
00:18:17,052 --> 00:18:21,212
So that is really important, when
we give, the pod, when we talk

261
00:18:21,212 --> 00:18:22,822
about the pod security standards.

262
00:18:23,102 --> 00:18:27,992
So initially, there was a term
called pod security policies, which

263
00:18:27,992 --> 00:18:31,332
is now deprecated and has been
replaced by pod security admission.

264
00:18:31,682 --> 00:18:36,642
So what it does is enforces the security
policies, enforcing the baseline.

265
00:18:37,097 --> 00:18:42,227
And, also restricted or a privileged
kind of access is also restricted.

266
00:18:44,297 --> 00:18:46,217
then we talk about the runtime security.

267
00:18:46,217 --> 00:18:50,377
continuously monitor the containerized
workloads for malicious activities.

268
00:18:50,377 --> 00:18:54,817
for this, for runtime security, we
have tools called Falco, which will

269
00:18:54,817 --> 00:18:59,107
determine or detect any kind of
anomalies based on the rules and the

270
00:18:59,117 --> 00:19:01,227
behavior patterns, which we have set.

271
00:19:01,457 --> 00:19:04,747
I would also share the
resources for Falco tool.

272
00:19:05,077 --> 00:19:09,297
At the end of the session, so it's
a really cool tool where we can,

273
00:19:09,397 --> 00:19:14,357
apply runtime securities for the
workloads and then, a very important

274
00:19:14,367 --> 00:19:15,637
thing is secrets management.

275
00:19:15,647 --> 00:19:17,097
How we manage our secrets.

276
00:19:17,527 --> 00:19:21,197
As I told you, some people
will just expose their secrets

277
00:19:21,197 --> 00:19:23,247
in config maps in plain text.

278
00:19:23,657 --> 00:19:29,427
that is not a good practice and, these
kind of config maps are available for any

279
00:19:29,427 --> 00:19:31,987
user to list and, even copy our secrets.

280
00:19:32,317 --> 00:19:37,067
all the sensitive information like
the API keys or passwords, first

281
00:19:37,067 --> 00:19:38,587
of all, should never be hardcoded.

282
00:19:39,027 --> 00:19:44,027
Hardcoding a password or an API
key in itself, is it's, damaging

283
00:19:44,037 --> 00:19:46,277
and can, cause a really big issue.

284
00:19:46,947 --> 00:19:51,807
So instead we should use secrets
management solutions like the AWS secrets

285
00:19:51,807 --> 00:19:57,497
manager where we can store the secrets,
and we can rotate them after maybe 30

286
00:19:57,547 --> 00:20:00,547
days or 90 days as per our secrets policy.

287
00:20:00,897 --> 00:20:04,767
We can also use like most of the
companies, they use HashiCorp Vault

288
00:20:05,157 --> 00:20:07,767
to manage it, manage the sensitive.

289
00:20:07,877 --> 00:20:09,007
secrets information.

290
00:20:09,247 --> 00:20:13,707
So with, by using HashiCorp vault
or even as your secrets, we never

291
00:20:13,707 --> 00:20:17,987
expose our secrets and they're
always encoded in a base 64 format.

292
00:20:18,527 --> 00:20:24,177
So these are all the best practices
which we can use to secure our workload.

293
00:20:24,567 --> 00:20:28,237
And the secrets management is
definitely, a very secure way of,

294
00:20:28,287 --> 00:20:32,467
managing your secrets or any kind
of passphrases we use in our code.

295
00:20:34,187 --> 00:20:35,247
So moving forward.

296
00:20:36,817 --> 00:20:38,887
We talk about the network security.

297
00:20:39,327 --> 00:20:43,057
So how can we strengthen
our cluster security?

298
00:20:43,057 --> 00:20:46,137
Because one is our, we were
able to secure the cluster.

299
00:20:46,707 --> 00:20:48,517
You're able to secure our workload.

300
00:20:48,877 --> 00:20:53,707
Now we have to make sure the way the, our
workload and our, all of the application

301
00:20:53,707 --> 00:20:57,947
which is hosted on Kubernetes, how it
interacts with the network and how we can

302
00:20:57,947 --> 00:21:02,337
make sure that there are no attacks on
the network side and we can prevent them.

303
00:21:02,597 --> 00:21:04,920
So we will talk about the service meshes.

304
00:21:04,920 --> 00:21:07,637
So the implementing a service mesh.

305
00:21:08,177 --> 00:21:13,067
In a large scale applica application is
almost a mush because then we will have

306
00:21:13,097 --> 00:21:18,167
a Istio based service mesh, which is in
itself very secure because it uses the

307
00:21:18,167 --> 00:21:24,647
mutual TLS, it uses the, mutualist TLS
encryption, between all the microservices

308
00:21:24,647 --> 00:21:27,177
which interact, with that service mesh.

309
00:21:27,577 --> 00:21:29,077
using T service mesh.

310
00:21:29,422 --> 00:21:33,902
Or Linkerd kind of a service mesh will
ensure that you are secure on the network

311
00:21:33,902 --> 00:21:38,632
level, like if the traffic is coming, it
will first come to the service mesh and

312
00:21:38,632 --> 00:21:40,852
then it will get routed to the workload.

313
00:21:41,082 --> 00:21:44,772
So it's always a very good
practice to have a service

314
00:21:44,802 --> 00:21:46,562
mesh, before your application.

315
00:21:47,582 --> 00:21:51,982
And then we can do a kind of,
security, implement security

316
00:21:51,982 --> 00:21:53,642
through ingress and egress control.

317
00:21:54,062 --> 00:21:59,132
Some of the some of you folks might be
aware of nginx ingress controller So

318
00:21:59,492 --> 00:22:03,572
how we can do is that we can secure the
external facing services Whatever are

319
00:22:03,582 --> 00:22:08,592
ingress, the domain names which we use,
suppose we use a domain name called abc.

320
00:22:08,592 --> 00:22:11,142
com or something called, xyz.

321
00:22:11,842 --> 00:22:12,102
com.

322
00:22:12,352 --> 00:22:14,302
So these are nothing
but ingress hostnames.

323
00:22:14,642 --> 00:22:19,382
So the way to secure them is
with the help of, a server client

324
00:22:19,412 --> 00:22:21,282
encryption using certificates.

325
00:22:21,522 --> 00:22:26,082
We can always use TLS certificates and
we can always use ingress controllers.

326
00:22:26,262 --> 00:22:29,252
So ingress controllers
themselves have encryption.

327
00:22:29,272 --> 00:22:34,232
implemented on their, like the network
node, so we can define clear rules

328
00:22:34,232 --> 00:22:38,002
for both ingress and egress traffic
with Kubernetes network policies.

329
00:22:38,012 --> 00:22:42,572
So how we can leverage is that we can
use our Kubernetes network policies,

330
00:22:42,632 --> 00:22:46,862
which, we discussed are, always applied
on the service, Kubernetes service,

331
00:22:47,362 --> 00:22:52,502
with these network policies, we can
use the ingress, objects and, which

332
00:22:52,502 --> 00:22:54,342
are defined in our Kubernetes cluster.

333
00:22:54,962 --> 00:22:56,582
With the help of ingress controller.

334
00:22:56,582 --> 00:23:00,392
So all the ingress will be defined
on the ingress controller and all the

335
00:23:00,392 --> 00:23:05,702
ingress can be, basically protected
with the help of, TLS certificate

336
00:23:06,062 --> 00:23:10,622
and that network policies can, we can
leverage with the ingress host names.

337
00:23:10,652 --> 00:23:11,552
So that is the way we.

338
00:23:12,277 --> 00:23:16,497
Secure our incoming traffic and even
the outgoing traffic through Ingress

339
00:23:16,527 --> 00:23:17,967
and through Ingress controllers.

340
00:23:18,557 --> 00:23:23,667
Then, we might, have heard the term about,
distributed denial of service attacks.

341
00:23:23,707 --> 00:23:28,297
the DDoS attacks, the DDoS protection,
is also, done by Kubernetes.

342
00:23:28,297 --> 00:23:31,627
So Kubernetes clusters exposed
to the public internet are always

343
00:23:31,627 --> 00:23:32,917
at the risk of DDoS attacks.

344
00:23:33,632 --> 00:23:39,102
So we have like cloud services which,
can prevent these DDoS attacks.

345
00:23:39,332 --> 00:23:44,482
We have like in all the cloud
providers such as AWS, Azure and GCP.

346
00:23:44,822 --> 00:23:49,282
So they all, offer us a very
scalable solution where we can get,

347
00:23:49,452 --> 00:23:54,142
protected by using their services
all from all these kind of attacks.

348
00:23:56,227 --> 00:24:01,527
Now, we'll talk about a real world
threat and incidents, as we are all

349
00:24:01,767 --> 00:24:03,907
managing or part of major incidents.

350
00:24:04,347 --> 00:24:10,317
We, in the past couple of years, we have
seen a major incidents in organizations

351
00:24:10,887 --> 00:24:13,277
coming through, security vulnerabilities.

352
00:24:13,517 --> 00:24:16,527
And especially there was an
example where the Kubernetes

353
00:24:16,567 --> 00:24:18,217
infrastructure was compromised.

354
00:24:18,917 --> 00:24:23,827
And, there was a lot of big reputational
damage as well as a financial damage.

355
00:24:24,137 --> 00:24:25,987
So we'll just take that example here.

356
00:24:26,447 --> 00:24:30,037
So in 2021, Kubernetes
security incident happened.

357
00:24:30,427 --> 00:24:35,847
An attacker actually gained unauthorized
access to the cluster level API server

358
00:24:36,187 --> 00:24:37,537
due to weak authentication configurations.

359
00:24:38,597 --> 00:24:44,467
So as we just were discussing that if
we leave these Cluster API is exposed

360
00:24:44,517 --> 00:24:46,367
because of the weak authentication.

361
00:24:46,897 --> 00:24:48,517
It can be very damaging.

362
00:24:48,897 --> 00:24:54,427
So there was an incident which happened
in 2021, where an attacker, was able to

363
00:24:54,527 --> 00:24:59,557
gain the access and basically destroy
some of the running deployments.

364
00:25:00,177 --> 00:25:04,767
The compromised API allowed the attacker
to basically extract the sensitive data.

365
00:25:05,037 --> 00:25:07,747
the secrets as well as the passphrases.

366
00:25:08,067 --> 00:25:12,747
And was able to tamper with the running
workloads causing, service outage,

367
00:25:12,747 --> 00:25:15,837
service disruption at that moment of time.

368
00:25:16,167 --> 00:25:20,027
So this is just an example,
just one example, but there were

369
00:25:20,027 --> 00:25:24,286
several, incidents which happened
due to same kind of, problems.

370
00:25:24,777 --> 00:25:28,777
unauthorized access to the
Kubernetes cluster API server.

371
00:25:28,837 --> 00:25:31,137
how can we actually
prevent it from happening?

372
00:25:31,597 --> 00:25:37,477
if we have a strong API authentication and
a role based access control enforcement,

373
00:25:37,927 --> 00:25:40,027
that is a very good way of, preventing it.

374
00:25:40,457 --> 00:25:45,527
And as we already spoke about the
HCD data encryption, it's very

375
00:25:45,527 --> 00:25:50,937
important to encrypt our, data in
HCD, at rest, at, during all the time.

376
00:25:51,447 --> 00:25:54,987
And, another thing which we can
do is do a monthly security audit.

377
00:25:56,527 --> 00:25:59,607
Or, there is maybe, do an
automation of the security audits.

378
00:25:59,967 --> 00:26:03,927
To catch all kind of misconfigurations
or if somebody has taken out any

379
00:26:03,987 --> 00:26:08,657
rule or if there are no role based
access being present on a cluster.

380
00:26:08,977 --> 00:26:14,847
So those all can be red flags and, any,
all the companies have the InfoSec team.

381
00:26:15,297 --> 00:26:19,587
So they should be regularly doing the
security audits to, help us preventing,

382
00:26:19,997 --> 00:26:21,477
from these kind of incidents to happen.

383
00:26:23,947 --> 00:26:27,587
as we spoke a lot about, all
of these, level of securities

384
00:26:27,597 --> 00:26:29,677
on all the Kubernetes layers.

385
00:26:30,147 --> 00:26:34,567
So let's also discuss about some
of the best practices, which we

386
00:26:34,567 --> 00:26:38,447
can take away from this session
and follow in our daily lives.

387
00:26:38,777 --> 00:26:40,717
to secure our kubernetes, clusters.

388
00:26:41,287 --> 00:26:45,577
So i've just listed some of the industry
best practices for securing the kubernetes

389
00:26:46,187 --> 00:26:50,647
So first is the regular security audits
as we also discussed in the previous

390
00:26:50,657 --> 00:26:55,776
slide, you know Continuously auditing
the security kubernetes security of the

391
00:26:55,777 --> 00:27:01,147
kubernetes clusters using the guidelines
provided to us by the cis They have set

392
00:27:01,147 --> 00:27:07,222
up a set of benchmarks It always help us
to identify, any kind of misconfigurations

393
00:27:07,262 --> 00:27:10,432
or any, gaps in, our infrastructure.

394
00:27:10,752 --> 00:27:14,862
So doing a regular security
audit is a must, for the

395
00:27:14,862 --> 00:27:16,602
applications to operate on scale.

396
00:27:17,172 --> 00:27:23,442
Then, another way we can, help our SRE
teams and even the DevOps team is to.

397
00:27:23,937 --> 00:27:25,447
Set up continuous monitoring.

398
00:27:25,777 --> 00:27:28,997
So with the help of like real
time monitoring, we discussed

399
00:27:28,997 --> 00:27:30,267
about tool called Falco.

400
00:27:30,557 --> 00:27:34,307
There's another tool, an open
source tool called SysTick, where

401
00:27:34,307 --> 00:27:39,717
we can always watch for a suspicious
behavior across the cluster.

402
00:27:39,997 --> 00:27:41,307
So Falco has rules.

403
00:27:41,902 --> 00:27:46,602
So if a rule for a particular workload
is triggered, we will get alarms, we

404
00:27:46,602 --> 00:27:51,122
will get notified on our emails, on
our all kind of, notification channels

405
00:27:51,132 --> 00:27:56,462
such as, PagedUtxMatters, where we
get notified when there is a breach,

406
00:27:56,572 --> 00:28:01,122
in some, security or if there is a
rule which should not have been there

407
00:28:01,482 --> 00:28:05,682
or some workload have been triggered
something, which, you know, having

408
00:28:05,962 --> 00:28:07,902
some users having unauthorized access.

409
00:28:08,202 --> 00:28:12,322
So if we have a continuous monitoring
in a DevOps culture and an agile

410
00:28:12,322 --> 00:28:17,132
environment that can definitely help
all the, the ecosystem to, catch the

411
00:28:17,132 --> 00:28:21,772
incidents, catch the issues in early
stages and, take necessary actions.

412
00:28:22,522 --> 00:28:30,192
Another best practice for Kubernetes is,
is a golden rule of thumb that always

413
00:28:30,232 --> 00:28:33,312
give least privilege to, all the things.

414
00:28:33,372 --> 00:28:37,512
This least privilege principle is that
implement role based access control.

415
00:28:38,007 --> 00:28:42,947
And always follow the reach privilege
principle, like any developer or any,

416
00:28:42,997 --> 00:28:47,937
user who doesn't need access or admin
kind of an access should not have,

417
00:28:48,407 --> 00:28:52,257
basically an access where they can go
inside the container, run commands or

418
00:28:52,387 --> 00:28:57,167
do any kind of, create directories or do
any kind of, Stuff which is not required.

419
00:28:57,507 --> 00:29:03,857
So always, as a rule of thumb, give least,
privilege to a user who is not required

420
00:29:03,857 --> 00:29:06,837
to do anything important on the cluster.

421
00:29:07,557 --> 00:29:10,187
And then, with the automation,
like we can have automated

422
00:29:10,207 --> 00:29:14,257
patching that regularly update and
patch the Kubernetes components.

423
00:29:14,747 --> 00:29:19,747
because kubernetes also launches, the,
patching, regular patching, if we follow

424
00:29:19,747 --> 00:29:24,267
the kubernetes, documentation, they will
be releasing the security patch, I think

425
00:29:24,277 --> 00:29:27,977
once in a month, and it's very important
to keep up with the security levels.

426
00:29:28,237 --> 00:29:32,527
So there should be regular patching with
the help of, CICD tools like Jenkins,

427
00:29:32,577 --> 00:29:35,057
which can run an automation pipelines.

428
00:29:35,572 --> 00:29:39,562
And, close all the known vulnerabilities
in the previous, releases and make

429
00:29:39,562 --> 00:29:44,382
sure that we are always up to date as
per the, kubernetes, documentation.

430
00:29:44,802 --> 00:29:49,152
So that's really important to, help,
taking out the old vulnerabilities

431
00:29:49,152 --> 00:29:50,532
in the code or in the cluster.

432
00:29:52,812 --> 00:29:56,712
So these are the resources which I
am like, sharing with, my viewers.

433
00:29:57,302 --> 00:30:01,192
this is like how we can, encrypt
the data on a, on a cluster.

434
00:30:01,662 --> 00:30:04,342
How we can use the,
another tool called Trevi.

435
00:30:04,692 --> 00:30:08,082
it's a very handy tool where
we can secure our workloads.

436
00:30:08,212 --> 00:30:09,942
I was talking about Sysdig.

437
00:30:10,227 --> 00:30:12,267
So this is the documentation of Cystic.

438
00:30:12,297 --> 00:30:17,287
I was talking about App Armor, that how
can we create a profile, create some rules

439
00:30:17,287 --> 00:30:23,307
on App Armor and only a, some specific
part of, the users which are part or

440
00:30:23,307 --> 00:30:28,272
are, or associated with that profile can
only access some of the workloads and

441
00:30:28,272 --> 00:30:29,677
other users will not be able to access.

442
00:30:30,302 --> 00:30:34,612
If we define the profiles in the
App Armor, then, on also sharing

443
00:30:34,612 --> 00:30:36,322
about something called Sec Comm.

444
00:30:36,682 --> 00:30:40,342
So by this you can, secure
your network policies, or the

445
00:30:40,342 --> 00:30:41,752
network part of Kubernetes.

446
00:30:42,192 --> 00:30:46,842
then, talking about more about App
Armor, there are some tutorials

447
00:30:47,352 --> 00:30:48,912
specifically for the security.

448
00:30:49,452 --> 00:30:51,282
Then we talk about the ALCO rules.

449
00:30:51,342 --> 00:30:53,522
And these are the dogs, the Alco rules.

450
00:30:53,552 --> 00:30:53,972
you can.

451
00:30:54,492 --> 00:30:59,582
Go through there's a cheat sheet for
kubernetes security very handy for

452
00:30:59,602 --> 00:31:04,972
someone who implements Security in day
to day life on the clusters and then

453
00:31:04,972 --> 00:31:10,122
there is a security checklist, which
is also very handy for someone to host

454
00:31:10,122 --> 00:31:14,812
an application or Also, even when you
want your application to communicate

455
00:31:14,812 --> 00:31:19,822
with the other applications or the
outside, Vendors it is very important

456
00:31:19,832 --> 00:31:22,142
to check the security checklist.

457
00:31:22,382 --> 00:31:25,872
So by that you will know, what
are all the parameters, which make

458
00:31:25,872 --> 00:31:30,072
sure that your, the workload and as
well as your node is always secure.

459
00:31:30,402 --> 00:31:34,742
So these are really good handy resources
and all of them are open source.

460
00:31:35,102 --> 00:31:38,102
So you don't need to buy a, get a license.

461
00:31:38,152 --> 00:31:40,022
You it's everything is available.

462
00:31:40,022 --> 00:31:40,672
Open source.

463
00:31:41,182 --> 00:31:44,702
The beauty of Kubernetes is most
of the stuff is cloud native.

464
00:31:46,037 --> 00:31:50,537
And it is open source and, it's very
easy to implement and, most of the

465
00:31:50,547 --> 00:31:55,347
stuff you'll find on GitHub that people
have written security policies, which

466
00:31:55,377 --> 00:31:57,997
the whole of the world can leverage.

467
00:31:58,477 --> 00:32:02,587
at the end, I would say, security
comes more of as a responsibility.

468
00:32:03,032 --> 00:32:09,222
we all should step up and, be very,
open minded and, take a responsibility

469
00:32:09,222 --> 00:32:11,892
in fighting as a cyber warrior by why?

470
00:32:11,892 --> 00:32:16,412
Because if we consider ourselves
as a cyber warrior, we will find

471
00:32:16,412 --> 00:32:20,292
that ownership in ourselves to
protect all our applications.

472
00:32:20,717 --> 00:32:22,707
using these, security best practices.

473
00:32:23,707 --> 00:32:28,107
So concluding, this talk, I would
say, as Kubernetes continues to

474
00:32:28,107 --> 00:32:32,827
drive cloud native innovation,
security cannot be an afterthought.

475
00:32:33,117 --> 00:32:35,657
This should be no
compromise on the security.

476
00:32:35,937 --> 00:32:41,007
Every layer of Kubernetes ecosystem
must be fortified to protect against

477
00:32:41,027 --> 00:32:43,067
increasingly sophisticated cyber threats.

478
00:32:43,857 --> 00:32:47,567
So by adopting the best practices
such as the network policies,

479
00:32:48,147 --> 00:32:52,867
runtime security, runtime monitoring,
Kubernetes, secrets management

480
00:32:52,887 --> 00:32:57,497
organizations can ensure their clusters
are actually secure and resilient.

481
00:32:58,227 --> 00:33:03,817
Kubernetes offers us a very like
a, niche specialist certification.

482
00:33:04,427 --> 00:33:08,507
So for this, you have to be the,
Kubernetes security specialist

483
00:33:08,507 --> 00:33:13,357
certification really offer the deep
understanding of the security measures and

484
00:33:13,357 --> 00:33:18,337
empowering all the professionals to take
the charge of the cloud native security.

485
00:33:18,507 --> 00:33:22,067
But for this, you have to
be, like CKA certified first.

486
00:33:22,717 --> 00:33:27,777
and then you can, sit for an exam for
CKS, but if you want to like, grow in

487
00:33:27,777 --> 00:33:34,527
this field and, understand the in depth
working of, the security protocols, on

488
00:33:34,527 --> 00:33:38,897
the Kubernetes layer, I think this is
a must for somebody who is, motivated

489
00:33:38,907 --> 00:33:42,737
by, the security, cyber security
and wants to work in this field.

490
00:33:42,767 --> 00:33:43,237
So that's.

491
00:33:43,827 --> 00:33:46,447
recommendation I can give,
this certification will really

492
00:33:46,447 --> 00:33:50,887
help you understand the in and
out of the, cluster security.

493
00:33:52,127 --> 00:33:53,737
So that is it from my end.

494
00:33:53,827 --> 00:33:58,127
a massive thank you for the Con 42
incident management team who gave me

495
00:33:58,127 --> 00:33:59,877
this opportunity to present my thoughts.

496
00:34:00,367 --> 00:34:04,607
And a massive thank you to all my
viewers who were with me, listening

497
00:34:04,607 --> 00:34:10,197
and, I hope you all gain something
and, you all take away really good,

498
00:34:10,487 --> 00:34:15,117
security measures, to secure your,
infrastructure to secure your cluster.

499
00:34:15,567 --> 00:34:19,517
And, by this, I would say, if you have
any questions, you can reach me out.

500
00:34:20,642 --> 00:34:24,182
on the screen and I'm, really
again, thankful for giving me this

501
00:34:24,272 --> 00:34:25,732
opportunity to share my thoughts.

502
00:34:26,202 --> 00:34:27,312
hope you liked it.

503
00:34:27,592 --> 00:34:29,432
And if you have any
comments, please do share.

504
00:34:29,512 --> 00:34:29,942
Thank you.

