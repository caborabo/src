1
00:00:14,030 --> 00:00:14,770
Hello, everyone.

2
00:00:14,870 --> 00:00:17,550
Welcome to my talk on simplifying
multi cloud observability.

3
00:00:18,180 --> 00:00:23,019
In this presentation, we'll talk about
multi cloud observability and why

4
00:00:23,059 --> 00:00:26,709
observability needs a different type
of approach in the multi cloud world.

5
00:00:26,710 --> 00:00:31,150
My name is Sriverma Vegiraju,
currently working as a

6
00:00:31,150 --> 00:00:32,779
software engineer at Microsoft.

7
00:00:33,279 --> 00:00:36,214
I'm a freelance contributor
and a book reviewer as well.

8
00:00:36,825 --> 00:00:38,165
This is my LinkedIn and email.

9
00:00:38,655 --> 00:00:42,975
Please feel free to reach out to me if
you have any suggestions or any questions

10
00:00:42,985 --> 00:00:47,294
regarding the talk or if you want to talk
about software engineering in general.

11
00:00:49,835 --> 00:00:51,175
Let's get started with the agenda.

12
00:00:51,404 --> 00:00:56,404
First, we'll talk about what is multicloud
and why is it gaining a lot of traction.

13
00:00:56,904 --> 00:00:59,435
Second, we'll look into
what is observability.

14
00:01:00,195 --> 00:01:01,675
Third, we'll look at observability.

15
00:01:02,070 --> 00:01:05,900
Why is observability complex in
the multi cloud architecture?

16
00:01:06,530 --> 00:01:11,709
Then we will look at how to simplify
it and then we will conclude the talk.

17
00:01:13,830 --> 00:01:16,560
So what is multi cloud and why
is it gaining a lot of traction?

18
00:01:16,910 --> 00:01:20,219
Initially, when cloud was just
getting started, organization

19
00:01:20,229 --> 00:01:21,779
hosted their services on prem.

20
00:01:22,559 --> 00:01:29,710
Once cloud became mainstream, organization
switched to using both On prem and cloud.

21
00:01:30,039 --> 00:01:36,179
This is what we call as hybrid cloud
then companies Only started using

22
00:01:36,179 --> 00:01:42,369
cloud and if I as an organization
use more than one Cloud provider to

23
00:01:42,369 --> 00:01:48,619
offer my services that is when i'm on
a multi cloud strategy As part of a

24
00:01:48,619 --> 00:01:56,054
recent survey 98 percent of enterprise
customers are either switching to or

25
00:01:56,244 --> 00:01:58,304
are already on a multi cloud strategy.

26
00:01:59,804 --> 00:02:03,504
And the main motivations,
first, data sovereignty.

27
00:02:04,804 --> 00:02:10,174
If I have customers worldwide serving in
different regions and different countries,

28
00:02:10,974 --> 00:02:14,654
I have to abide by the country's data
privacy and data protection laws.

29
00:02:15,274 --> 00:02:17,565
For example, London has its own GDPR.

30
00:02:17,615 --> 00:02:19,555
European Union has its own GDPR.

31
00:02:20,115 --> 00:02:24,814
Similarly, United States, India,
China, Japan, all of them have their

32
00:02:24,814 --> 00:02:27,415
own data privacy and protection laws.

33
00:02:28,535 --> 00:02:31,284
It's my responsibility
to abide by these laws.

34
00:02:31,474 --> 00:02:36,355
And if I find that my cloud provider
does not suit my needs, I might

35
00:02:36,355 --> 00:02:38,385
choose an additional cloud provider.

36
00:02:39,665 --> 00:02:42,825
This is one reason why I would
switch to a take out strategy.

37
00:02:43,585 --> 00:02:46,395
Second, cloud vendor login concerns.

38
00:02:48,025 --> 00:02:51,805
Imagine I am using a particular
service from a cloud provider, and

39
00:02:51,805 --> 00:02:57,134
somehow the provider decides to either
increase the cost of the service, or

40
00:02:59,384 --> 00:03:02,625
change the service drastically,
or deprecate the service.

41
00:03:02,955 --> 00:03:07,455
I want my business to be
resilient to all these factors.

42
00:03:07,855 --> 00:03:10,835
This is the second reason why I
would choose a multi cloud strategy.

43
00:03:12,085 --> 00:03:13,745
Third, cost optimizations.

44
00:03:14,235 --> 00:03:18,175
Every organization or every provider
has their own strong offerings.

45
00:03:18,435 --> 00:03:20,345
Some offer free egress and ingress.

46
00:03:20,784 --> 00:03:24,415
Some offer cheap compute
network or storage.

47
00:03:24,735 --> 00:03:32,555
If I am in a position to utilize all
these strategies, I can reduce the cost

48
00:03:32,705 --> 00:03:34,445
of running my service on the cloud.

49
00:03:35,005 --> 00:03:40,590
So to summarize, data sovereignty, Cloud
vendor lock ins and cost optimizations

50
00:03:40,590 --> 00:03:44,140
are the main reasons companies are
switching towards multi cloud strategy

51
00:03:46,910 --> 00:03:52,690
So what is observability Put it simply
it is the ability to measure the current

52
00:03:52,690 --> 00:03:55,870
state of my system Is my duration high?

53
00:03:56,200 --> 00:03:57,920
Is my availability low?

54
00:03:58,200 --> 00:04:00,610
Am I matching or am I?

55
00:04:01,080 --> 00:04:07,025
Reaching my SLAs, SLOs, SLIs Observability
helps me answer all these questions.

56
00:04:07,365 --> 00:04:10,265
And the three main concepts
in observability are

57
00:04:10,495 --> 00:04:12,595
metrics, logs, and traces.

58
00:04:13,945 --> 00:04:18,275
With metrics, it is a numerical measure
of the current state of your system.

59
00:04:18,815 --> 00:04:23,855
For example, is my availability two
nines, three nines, or four nines?

60
00:04:24,365 --> 00:04:29,865
What is the millisecond latency
at which I'm serving my request?

61
00:04:30,920 --> 00:04:32,390
And what is the error rate?

62
00:04:32,510 --> 00:04:34,200
What is my CPU utilization?

63
00:04:34,230 --> 00:04:36,320
All these answers I
can get from my tricks.

64
00:04:37,100 --> 00:04:40,150
Logs are nothing but your
diagnostic information.

65
00:04:40,220 --> 00:04:44,970
For example, a request failed Then
I have to look at the stack trace

66
00:04:44,970 --> 00:04:48,760
and additional metadata to debug the
request This is what logs will give me.

67
00:04:49,470 --> 00:04:54,180
Traces on the other hand are becoming
popular in the microservices world

68
00:04:54,600 --> 00:04:57,950
Let's say I have this request that
has to pass through 10 different

69
00:04:57,950 --> 00:05:04,545
microservices And it fails in one of
or one of the service You Traces will

70
00:05:04,575 --> 00:05:07,325
help me debug these kind of requests.

71
00:05:09,495 --> 00:05:15,935
Now, let's look at why observability
needs a different approach in the multi

72
00:05:15,935 --> 00:05:21,435
cloud world and what are the changes
that are mandating this mandating this.

73
00:05:22,435 --> 00:05:27,625
What you see here is a code snippet
where I'm just using one cloud provider.

74
00:05:28,325 --> 00:05:33,775
What I have is a monitoring SDK that I'm
using to emit metrics to a dashboard.

75
00:05:34,415 --> 00:05:37,735
Everything is simple because I'm
just in a single cloud world.

76
00:05:38,275 --> 00:05:40,255
There is nothing complex here, right?

77
00:05:42,395 --> 00:05:48,367
Now, in, in this case here, I am using
two or three different cloud providers.

78
00:05:48,367 --> 00:05:52,277
So I have three different SDKs and
on the right I have two or three

79
00:05:52,277 --> 00:05:56,817
different kinds of dashboards Just
looking at this we can understand the

80
00:05:56,847 --> 00:05:58,517
complexity that we are getting into.

81
00:05:58,997 --> 00:06:02,607
So let's look at that Because
i'm using multiple clouds.

82
00:06:02,657 --> 00:06:07,197
I have multiple SDKs And because
I have multiple SDKs I end

83
00:06:07,197 --> 00:06:08,337
up maintaining all of them.

84
00:06:08,487 --> 00:06:15,112
It is either versioning or deprecation
or schematics I'll have to Keep tabs

85
00:06:15,112 --> 00:06:17,632
of all this information for the SDKs.

86
00:06:18,072 --> 00:06:22,542
Second, each cloud provider dashboard
is different and the way they do

87
00:06:22,542 --> 00:06:24,242
aggregations is also different.

88
00:06:24,572 --> 00:06:27,652
Some sample at five minutes,
some sample at one minute.

89
00:06:28,932 --> 00:06:35,662
Now, I have to document all this
information so that my on calls understand

90
00:06:35,662 --> 00:06:38,802
how to debug a particular dashboard.

91
00:06:39,472 --> 00:06:41,902
Now, there's an interesting nuance there.

92
00:06:42,872 --> 00:06:47,922
The on calls In addition to be
debugging the service outages are

93
00:06:47,932 --> 00:06:51,602
also debugging the dashboards now.

94
00:06:51,602 --> 00:06:56,992
By just hearing that we know
things will get easily out of

95
00:06:56,992 --> 00:06:59,172
hand once there's a big fire.

96
00:07:01,002 --> 00:07:03,352
Last but not the least, the cost.

97
00:07:03,902 --> 00:07:07,932
Now we have to hire more experienced
developers who don't come cheap

98
00:07:08,242 --> 00:07:12,382
and also train them, which is also
not, which is also very expensive.

99
00:07:13,387 --> 00:07:15,557
So how do we get out of this problem?

100
00:07:15,557 --> 00:07:20,677
How do we make things complex
for our developers is what

101
00:07:20,677 --> 00:07:21,677
we'll take a look at now.

102
00:07:24,597 --> 00:07:29,627
If I summarize the problem here,
what I want to offer is one single

103
00:07:29,627 --> 00:07:32,375
pane of glass experience for my
customers, for my developers.

104
00:07:32,375 --> 00:07:36,997
And if I have to offer one single
pane of glass experience, I should

105
00:07:36,997 --> 00:07:40,317
also be cloud or provider agnostic.

106
00:07:41,117 --> 00:07:43,097
And this is where a lot of open source.

107
00:07:43,637 --> 00:07:47,817
Tooling has been helping us,
and it is also helping us now.

108
00:07:49,497 --> 00:07:52,607
What we are going to take a
look at is OpenTelemetry, which

109
00:07:52,607 --> 00:07:54,277
is one such open source tool.

110
00:07:54,607 --> 00:07:58,697
It is under the Cloud Native
Computing Foundation umbrella.

111
00:07:58,997 --> 00:08:04,837
And what it simply states is, it
is a single open source standard

112
00:08:04,937 --> 00:08:08,357
to emit your observability data,
your metrics, logs, and traces.

113
00:08:08,827 --> 00:08:14,757
Second, it is already supported by
major cloud providers like AWS, GCP

114
00:08:14,817 --> 00:08:16,737
and Oracle already support this.

115
00:08:17,467 --> 00:08:20,637
And the more, and the best
part, it is vendor agnostic.

116
00:08:22,747 --> 00:08:27,057
So let's look at how what are
the critical components in this

117
00:08:27,057 --> 00:08:29,862
cloud native in OpenTelemetry.

118
00:08:32,232 --> 00:08:34,082
First, we have the specification.

119
00:08:34,592 --> 00:08:37,912
The specification comes into
picture when you're implementing

120
00:08:38,072 --> 00:08:39,862
OpenTelemetry for a specific language.

121
00:08:40,242 --> 00:08:43,772
Because we don't do this daily,
we will not get into details here.

122
00:08:44,762 --> 00:08:46,542
Next, we have semantics.

123
00:08:46,952 --> 00:08:50,052
Remember we discussed about one
single pane of glass experience?

124
00:08:50,582 --> 00:08:54,762
For that, one important thing
you need is a unified schema.

125
00:08:54,912 --> 00:08:56,422
With semantics, you can get that.

126
00:08:57,612 --> 00:09:02,782
Open telemetry SDK is what we will use
to emit the metrics, logs, and traces.

127
00:09:03,182 --> 00:09:09,202
Before we were using a provider specific
SDK, now we will use open telemetry SDK.

128
00:09:09,202 --> 00:09:13,262
By the way, it is available
in many different languages, C

129
00:09:13,262 --> 00:09:16,212
sharp, Java, Go, Ruby, and so on.

130
00:09:17,712 --> 00:09:19,682
Fourth, what we have is the exporter.

131
00:09:20,002 --> 00:09:24,942
Exporter is responsible for
translating the metrics that we

132
00:09:25,927 --> 00:09:30,407
Translating the observability data
from OpenTelemetry SDK into a language

133
00:09:30,407 --> 00:09:32,017
that the provider understands.

134
00:09:32,567 --> 00:09:34,417
AWS has their own exporter.

135
00:09:34,987 --> 00:09:37,787
GCP, Microsoft, all of them
have their own exporters.

136
00:09:38,457 --> 00:09:43,387
And what these exporters do is
query SDK to get the observability

137
00:09:43,537 --> 00:09:47,377
data and emit to the backend, which
is our last piece in the puzzle.

138
00:09:48,137 --> 00:09:50,977
The backend is nothing but
the cloud provider themselves.

139
00:09:51,047 --> 00:09:57,427
AWS, Azure, GCP, or they can
be Prometheus, Jaeger, also.

140
00:09:58,757 --> 00:10:03,547
To summarize, specification required
mostly when you are implementing

141
00:10:03,547 --> 00:10:05,447
OpenTelemetry in a specific language.

142
00:10:06,117 --> 00:10:12,027
Semantics are the way you achieve
one single schema, one single schema.

143
00:10:12,417 --> 00:10:16,007
OpenTelemetry SDK is what you use
to emit the observability data.

144
00:10:16,517 --> 00:10:22,017
Exporter is what you use to
used to translate the the

145
00:10:22,087 --> 00:10:26,437
OpenTelemetry observability
data into vendor specific data.

146
00:10:27,437 --> 00:10:28,857
And then you have the packets.

147
00:10:30,737 --> 00:10:32,217
Let's look at architecture.

148
00:10:33,377 --> 00:10:38,727
So what on the left is on,
what on the left here is before

149
00:10:39,447 --> 00:10:43,827
OpenTelemetry, we have our VM, our
service, and the Azure Monitor SDK.

150
00:10:44,167 --> 00:10:45,507
Because we are tied to Azure.

151
00:10:46,487 --> 00:10:50,327
Azure backend, we are using their
SDK to EMIT metrics, which we

152
00:10:50,327 --> 00:10:53,447
know is a problem on the right.

153
00:10:53,447 --> 00:10:55,877
What is the Open Telemetry one here.

154
00:10:55,937 --> 00:11:00,167
What ends up happening is instead
of the Azure Monitor, SDK, use the

155
00:11:00,167 --> 00:11:05,927
open telemetry SDK to emit your
observability data, and then you use

156
00:11:05,927 --> 00:11:10,517
the Azure telemetry exporter, which is
readily available for us to consume.

157
00:11:11,627 --> 00:11:12,347
Just to clarify.

158
00:11:13,302 --> 00:11:15,052
The exporter is not a sidecar.

159
00:11:15,162 --> 00:11:19,062
It is just another package in C
sharp or a dependency in Maven

160
00:11:20,812 --> 00:11:22,372
that you import into your service.

161
00:11:22,722 --> 00:11:28,492
And then the exporter does all the
heavy lifting of translating the metrics

162
00:11:29,002 --> 00:11:33,772
or observability data into a way that
the Azure backend can understand.

163
00:11:34,122 --> 00:11:35,512
And then send it to Azure.

164
00:11:37,852 --> 00:11:40,422
Now, what we have done is consolidated

165
00:11:42,422 --> 00:11:46,402
Now, what we have done is
consolidated our code from

166
00:11:46,412 --> 00:11:51,702
multiple, using multiple different
SDKs to one SDK to send the data.

167
00:11:52,702 --> 00:11:58,952
What you see here is a code snippet of
how, when we are using the OTEL SDK.

168
00:11:58,952 --> 00:12:05,172
What we have here on the top is
the namespace and then what, and

169
00:12:05,172 --> 00:12:09,342
then here we have the exporters
and then on the last year.

170
00:12:10,017 --> 00:12:13,437
Is where we are sending,
emitting the metrics.

171
00:12:14,487 --> 00:12:19,587
Now, if I want to add one more exporter
I just add it to the set of extensions

172
00:12:19,587 --> 00:12:24,747
here and I don't change any of the
names space the way I emit metrics.

173
00:12:24,897 --> 00:12:28,247
So the whole process
has become simplified.

174
00:12:29,247 --> 00:12:35,147
This is an example of how we could, how
how using open telemetry would look when

175
00:12:35,177 --> 00:12:37,547
in, when using multiple cloud providers.

176
00:12:38,437 --> 00:12:44,317
So here, none of the VM service or the
SDK changes, they all remain the same.

177
00:12:44,327 --> 00:12:46,477
The only thing that
changes is the exporter.

178
00:12:47,857 --> 00:12:52,357
Remember we also discussed single pane
of class experience to see the dashboard.

179
00:12:52,897 --> 00:12:58,837
This is where we can use Grafana to
export all the metrics data from different

180
00:12:58,837 --> 00:13:06,367
providers to the to Grafana so that
we can offer developers once we can

181
00:13:06,367 --> 00:13:12,457
offer developers unified experience by
while debugging through the dashboards.

182
00:13:13,357 --> 00:13:13,837
So

183
00:13:16,247 --> 00:13:16,937
this is how.

184
00:13:17,472 --> 00:13:23,522
We can simplify the whole observability
stack for our service and make experience

185
00:13:24,112 --> 00:13:30,752
seamless for our developers As multi
cloud architecture keeps growing it is

186
00:13:30,752 --> 00:13:36,492
very important that organizations make
vendor agnostic strategy part of their

187
00:13:36,502 --> 00:13:39,072
architecture and part of their culture.

188
00:13:39,662 --> 00:13:44,422
This is how organizations can keep
scaling without any bottlenecks

189
00:13:45,292 --> 00:13:50,402
and offer seamless experience to
both developers and their clients.

190
00:13:51,072 --> 00:13:55,972
Apart from this, there are a ton of other
open source tooling also available that

191
00:13:56,052 --> 00:14:01,602
have their own exporters and can help
Query open telemetry sdk, for example

192
00:14:01,732 --> 00:14:08,147
with prometheus you are able to export
Metrics to your own bucket With Loki,

193
00:14:08,427 --> 00:14:12,607
it is a log search experience that
Grafana offers in addition to Metrix.

194
00:14:13,457 --> 00:14:18,877
Previously, they only had the Metrix,
the dashboards only used to show Metrix,

195
00:14:18,917 --> 00:14:21,457
but now with Loki, you can also see logs.

196
00:14:22,127 --> 00:14:27,737
With Zepkin and Jaeger, you can export
traces out of traces from the SDK

197
00:14:27,997 --> 00:14:32,337
to the Jaeger or Zepkin backends.

198
00:14:32,337 --> 00:14:35,592
With this, I conclude my talk.

199
00:14:35,872 --> 00:14:40,422
Thank you for taking the time to
listen to the, to listen to this

200
00:14:40,422 --> 00:14:44,362
talk on simplifying multicloud
observability and hope you enjoyed it.

