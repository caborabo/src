1
00:00:14,490 --> 00:00:15,560
Hello, everyone.

2
00:00:16,650 --> 00:00:19,290
We all know that developers
hate bugs, right?

3
00:00:19,500 --> 00:00:22,880
But there is something developers
hate more than bugs, and that is slow

4
00:00:22,880 --> 00:00:26,929
development cycles that kind of make
it difficult to quickly test out new

5
00:00:26,939 --> 00:00:32,870
features whenever I want to implement
them, or to also, Debug these issues

6
00:00:32,879 --> 00:00:38,129
whenever they arise, and that can
become a huge headache for a lot of

7
00:00:38,129 --> 00:00:43,170
developers, which is why today we're
going to discuss how we can all say

8
00:00:43,170 --> 00:00:47,360
goodbye to this slow feedback loop and
improve the overall developer experience.

9
00:00:47,610 --> 00:00:52,820
My name is Anita Ihuman, and I am a
developer advocate at MetalBear, where

10
00:00:52,820 --> 00:00:57,150
we're working on an awesome open source
project called MirrorD that aims to

11
00:00:57,150 --> 00:01:00,610
improve the entire developers experience.

12
00:01:01,929 --> 00:01:05,539
I like to call myself an open source
fangirl and that is because most of

13
00:01:05,560 --> 00:01:10,220
my career started off with open source
projects and in open source communities.

14
00:01:10,739 --> 00:01:16,839
I love advocating for inclusivity
within tech communities and thanks

15
00:01:16,850 --> 00:01:20,000
to open source communities like NUM.

16
00:01:20,215 --> 00:01:24,915
Focus this and sustain this
sustain OSSDI working group.

17
00:01:24,935 --> 00:01:26,635
I get to do some of this work.

18
00:01:26,985 --> 00:01:31,675
I am also the board of directors for
CAILS where we actually develop open

19
00:01:31,675 --> 00:01:34,405
source community health and analytics.

20
00:01:35,720 --> 00:01:38,910
When I'm not doing all of these,
I am probably organizing local

21
00:01:38,920 --> 00:01:45,250
community meetups with KCD
Nigeria and also CNCF Abuja.

22
00:01:45,260 --> 00:01:48,270
So now that we have that out
of the way, let us dig in.

23
00:01:49,490 --> 00:01:54,520
During this section, we're going to look
at how we're going to first of all look

24
00:01:54,520 --> 00:02:00,410
at how a development workflow looks like
in conventional development environments.

25
00:02:01,015 --> 00:02:05,815
Then we're going to look at the challenges
with some of these approaches, and we're

26
00:02:05,815 --> 00:02:11,575
going to look at how we can actually
rethink these approaches by moving on

27
00:02:11,585 --> 00:02:14,585
to remote to local development approach.

28
00:02:14,845 --> 00:02:18,455
And we're going to look at
how MIRIDI saves the day.

29
00:02:18,505 --> 00:02:22,850
And then finally, we'll look at Quick
demo of how MariaD works in real time.

30
00:02:22,850 --> 00:02:26,700
So let's dive in to begin with I
would to discuss something that we're

31
00:02:26,730 --> 00:02:30,690
all too familiar with, and that is
the development workflow, right?

32
00:02:30,930 --> 00:02:35,791
Ideally as developers, we actually
want a smooth Swift process where we

33
00:02:35,791 --> 00:02:37,771
just have to write a code, test it out.

34
00:02:37,781 --> 00:02:38,481
It works fine.

35
00:02:38,521 --> 00:02:41,321
And then get pushed to get up
and move on with our lives.

36
00:02:41,371 --> 00:02:45,801
But that is not always the case
because in situations where we're

37
00:02:45,801 --> 00:02:48,761
dealing with like cloud based
applications, you have to like.

38
00:02:49,126 --> 00:02:53,586
Taking two considerations after writing
your code base, you have to make

39
00:02:53,586 --> 00:02:55,366
sure that you build the application.

40
00:02:55,566 --> 00:02:56,776
It works perfectly.

41
00:02:56,816 --> 00:03:01,186
And then you move on to containerize
it after that, you go on to run it in a

42
00:03:01,186 --> 00:03:03,016
cluster, it works fine in the cluster.

43
00:03:03,046 --> 00:03:06,996
And then you now go on to, make sure
that it plays well with every other

44
00:03:07,126 --> 00:03:10,946
components that is involved in the
application and then finally deployment.

45
00:03:11,016 --> 00:03:16,506
And even at that point, also make sure
that whatever changes are implemented does

46
00:03:16,506 --> 00:03:18,046
not break the application in production.

47
00:03:18,771 --> 00:03:24,241
So this entire process can take up a
huge amount of time, especially since

48
00:03:24,271 --> 00:03:28,571
you don't have to like spend a whole
lot of time on the inner development

49
00:03:28,581 --> 00:03:33,411
loop which has become longer than
developers actually wanted it to be.

50
00:03:33,681 --> 00:03:36,831
And after that is done, you also
have to wait to make sure that

51
00:03:36,871 --> 00:03:41,001
even if it is even as it is in the
outer development loop, the process

52
00:03:41,091 --> 00:03:42,911
is like closely aligned with the.

53
00:03:43,661 --> 00:03:47,861
production environments and nothing goes
wrong at that particular point in time.

54
00:03:48,221 --> 00:03:51,331
And I know so many persons might
be saying, it's not all that bad.

55
00:03:51,331 --> 00:03:55,331
If you minutes of waiting for
that push weight circle, I can use

56
00:03:55,331 --> 00:03:56,371
it to scroll through tick tock.

57
00:03:56,371 --> 00:03:59,181
I can use it to pass time
and then come back to it.

58
00:03:59,181 --> 00:04:02,191
It doesn't necessarily affect
productivity or delivery, right?

59
00:04:02,571 --> 00:04:06,881
But when we're actually dealing with
like microservice applications that

60
00:04:06,921 --> 00:04:13,291
now require like tens to hundreds of
services, In this case, it gets trickier

61
00:04:13,501 --> 00:04:18,081
as now, because you have to think about
the more development loops that are

62
00:04:18,111 --> 00:04:22,741
involved, the more interactive services
that are involved, the dependencies

63
00:04:22,751 --> 00:04:24,981
that go on between these services.

64
00:04:25,141 --> 00:04:27,581
You also have to think about
the resources and then the

65
00:04:27,611 --> 00:04:29,376
complexities of these resources.

66
00:04:29,456 --> 00:04:34,676
Resources and so on and so forth
coupled with like multiple developers

67
00:04:34,706 --> 00:04:36,966
individually working on like the services.

68
00:04:37,256 --> 00:04:40,696
And so there's so much at play
within like the microservice.

69
00:04:41,416 --> 00:04:46,236
Environment that things get out
of control and suddenly you're not

70
00:04:46,236 --> 00:04:47,966
just writing your code anymore.

71
00:04:47,966 --> 00:04:49,576
You're not just writing
your code anymore, right?

72
00:04:49,576 --> 00:04:54,316
You actually have to repeat this
process over and over again across

73
00:04:54,316 --> 00:04:59,276
these services until we see that
there's actually no more errors.

74
00:05:00,056 --> 00:05:03,626
So imagine how much time gets
involved at the end of the day.

75
00:05:03,636 --> 00:05:07,386
Imagine how much waste time actually
gets involved at the end of the day.

76
00:05:07,566 --> 00:05:12,326
It can't it turns this entire process is
supposed to be like short and swift to a

77
00:05:12,356 --> 00:05:18,326
more complex maze that developers now have
to do with introducing challenges like.

78
00:05:18,876 --> 00:05:23,716
Lengthy rebuilds and deployment processes
where developers have to deal with

79
00:05:23,796 --> 00:05:28,106
long feedback loops, which eventually
results in decreased productivity.

80
00:05:28,376 --> 00:05:31,366
You also have to handle like the
suboptimal testing conditions.

81
00:05:31,376 --> 00:05:34,786
So I know so many persons are already
saying, I can actually use mugs.

82
00:05:34,786 --> 00:05:36,536
It's not that much of a problem.

83
00:05:36,806 --> 00:05:39,746
But the thing with this
mugs is it gives you.

84
00:05:40,616 --> 00:05:44,736
Like an implicit assumption of what
the application would look like in a

85
00:05:44,736 --> 00:05:48,586
production state, which means it's not
giving you exactly what the application

86
00:05:48,596 --> 00:05:50,236
would look like in production states.

87
00:05:50,296 --> 00:05:54,966
And at this particular point, yeah,
likely going to be issues that are coming

88
00:05:54,996 --> 00:05:58,936
up in terms of compatibility, in terms
of performance, in terms of security,

89
00:05:58,936 --> 00:06:03,976
vulnerability, and so many other issues
that could come out that will affect the

90
00:06:03,976 --> 00:06:06,326
application when it is put to production.

91
00:06:07,016 --> 00:06:12,626
Developers now have to like increasingly
become dependent on DevOps teams as well,

92
00:06:12,626 --> 00:06:17,476
because in a typical traditional dev
circle, you'll see that there is like

93
00:06:17,476 --> 00:06:22,476
a centralized staging environment where
every, person can deploys every untested

94
00:06:22,526 --> 00:06:24,216
code to that particular environment.

95
00:06:24,456 --> 00:06:29,376
And because it is a centralized space,
whenever an issue arises in that

96
00:06:29,396 --> 00:06:33,196
particular space, the DevOps teams
have to take charge and figure out

97
00:06:33,206 --> 00:06:37,626
how to fix the issues at that point,
which also takes up additional time.

98
00:06:38,716 --> 00:06:40,506
And that is a whole lot.

99
00:06:40,851 --> 00:06:43,671
And a whole new ballgame on its own.

100
00:06:44,011 --> 00:06:47,731
And so many persons are already saying
there are like local developments

101
00:06:47,871 --> 00:06:50,781
environments that can be used
to solve some of these problems.

102
00:06:50,991 --> 00:06:51,721
Yes, there are.

103
00:06:51,721 --> 00:06:54,401
There are like several solutions
that organizations are actually

104
00:06:54,441 --> 00:06:57,011
opting for today that address these.

105
00:06:57,041 --> 00:06:59,581
And the good thing with these
local development environments

106
00:06:59,741 --> 00:07:03,461
is when you're using your local
development environment, you enjoy

107
00:07:03,461 --> 00:07:05,511
like the fast and the speed of it.

108
00:07:05,511 --> 00:07:05,521
Yeah.

109
00:07:06,031 --> 00:07:07,661
We like the iteration process.

110
00:07:07,661 --> 00:07:10,551
You don't have to wait several because
immediately you're making your changes.

111
00:07:10,761 --> 00:07:14,391
You can actually see what it looks
like locally, and you can address

112
00:07:14,401 --> 00:07:17,961
any challenges that come up from that
point in time, you get access to all

113
00:07:18,021 --> 00:07:21,921
of the local debugging tools that
your developers are familiar with.

114
00:07:22,181 --> 00:07:25,211
So there's no much struggle with
onboarding into new tools and

115
00:07:25,241 --> 00:07:27,631
all of that smooth and fine.

116
00:07:28,331 --> 00:07:32,921
However every other Process or every
other tool that comes up, there

117
00:07:32,921 --> 00:07:35,411
are some added challenges to it.

118
00:07:35,501 --> 00:07:40,511
Obviously, there's a clause and some of
these challenges that developers have to

119
00:07:40,521 --> 00:07:46,931
now deal with this local development tools
or development environments is that you

120
00:07:46,931 --> 00:07:50,631
have to handle like the limited resources
compared to the cloud environment.

121
00:07:51,001 --> 00:07:56,341
While it is very easy to get started
with and is very local, it doesn't

122
00:07:56,371 --> 00:08:00,801
actually give you like entirety of
what the application would look like

123
00:08:01,101 --> 00:08:04,751
in production, the resources that the
application would need in production.

124
00:08:05,021 --> 00:08:08,956
And so there are also chances that
you might not get exactly what's the

125
00:08:08,956 --> 00:08:13,406
production states of the application
would look like, then you also have to

126
00:08:13,416 --> 00:08:18,856
deal with like high maintainers where
your developers have to like constantly

127
00:08:18,906 --> 00:08:24,206
manage and update API scripts, mock
data to ensure that everyone is on the

128
00:08:24,216 --> 00:08:28,116
page in the same page whenever they're
working on a particular service in

129
00:08:28,116 --> 00:08:30,176
that particular, in the application.

130
00:08:30,456 --> 00:08:33,216
And then they also have to deal
with the system compatibility.

131
00:08:34,551 --> 00:08:38,951
Now the thing with this local
development environment is it always

132
00:08:38,981 --> 00:08:43,181
introduces the problem of it works on
my system, but it doesn't work on Mr.

133
00:08:43,211 --> 00:08:44,181
A's system or Mr.

134
00:08:44,331 --> 00:08:44,981
B's system.

135
00:08:45,221 --> 00:08:49,301
And that is because some of the
libraries and dependencies that I

136
00:08:49,301 --> 00:08:55,041
use often compatibility compatible
with specific processor architecture.

137
00:08:55,981 --> 00:08:57,991
And not compatible with others.

138
00:08:58,261 --> 00:09:04,091
And so this often leads to like runtime
errors or slow down in application

139
00:09:04,131 --> 00:09:08,031
performance and so many other
issues that come up along the way.

140
00:09:08,671 --> 00:09:12,841
And yes, I know so many other
persons are probably saying

141
00:09:13,041 --> 00:09:14,991
that's not also a big deal.

142
00:09:15,001 --> 00:09:18,711
We have our remote development
environment, right?

143
00:09:19,941 --> 00:09:20,601
Yes, we do.

144
00:09:20,601 --> 00:09:24,471
We have the remote development
tools that are doing an awesome job.

145
00:09:24,471 --> 00:09:29,431
So many organizations have also
opt for this dev environment as

146
00:09:29,471 --> 00:09:33,461
we're speaking, and it also comes
to so many advantages, right?

147
00:09:34,281 --> 00:09:39,221
Because yes, while you're doing this,
your team is going to enjoy less

148
00:09:39,221 --> 00:09:44,861
workload on their systems because every
single thing in this particular remote

149
00:09:44,861 --> 00:09:47,081
development environment is done remotely.

150
00:09:47,491 --> 00:09:51,671
And so you, you don't have to deal with
the services or the database or the

151
00:09:51,671 --> 00:09:54,611
clusters because it's all leaves remotely.

152
00:09:54,941 --> 00:09:58,686
And that makes for your
system a lot easier.

153
00:09:59,556 --> 00:10:05,496
Developers can easily handle any
maintainers issues by moving the

154
00:10:05,526 --> 00:10:09,406
core of the workflow logic into
a continuous integration and

155
00:10:09,406 --> 00:10:11,296
continuous delivery pipelines.

156
00:10:11,546 --> 00:10:16,026
And so everyone can just make a
push to the code and then a set of

157
00:10:16,026 --> 00:10:17,636
procedures just completes the rest.

158
00:10:17,636 --> 00:10:21,176
So you don't have to deal with The
differences in environments and all

159
00:10:21,176 --> 00:10:26,756
of that great and works perfectly, but
like the local development environment,

160
00:10:26,826 --> 00:10:31,706
it also has its close and some of
these include like the long feedback

161
00:10:31,706 --> 00:10:35,136
loop because you actually have to
like when you're done with this, you

162
00:10:35,136 --> 00:10:39,366
have to, when you're working with
the remote development environment.

163
00:10:40,111 --> 00:10:43,551
You have to, whenever you make a change,
you have to containerize the application,

164
00:10:43,791 --> 00:10:47,811
push to registry, deploy to the cluster
before seeing the effects of the changes.

165
00:10:48,011 --> 00:10:53,161
It's introduced like an additional
time to like the development time, like

166
00:10:53,161 --> 00:10:55,051
the development process as a whole.

167
00:10:55,191 --> 00:10:58,461
So you now have like long feedback
loops which eventually affects

168
00:10:58,521 --> 00:10:59,811
the engineering team's efforts.

169
00:11:00,721 --> 00:11:04,201
You also have to deal with frustrating
debugging experience, because imagine

170
00:11:04,201 --> 00:11:06,891
you're debugging an application and
you actually have to go through all

171
00:11:06,911 --> 00:11:10,741
of these processes before you see the
outcome of whatever changes you want

172
00:11:10,741 --> 00:11:16,551
to make, that is like an additional
time spent within the application that

173
00:11:16,551 --> 00:11:21,841
was not actually calculated or planned
for making it a lot more stressful.

174
00:11:21,841 --> 00:11:25,491
And then you also have to deal
with the high cloud costs.

175
00:11:25,816 --> 00:11:29,696
Is setting up these environments
cause you have to set up development

176
00:11:29,716 --> 00:11:33,736
environment or like cloud environments
for each developers, depending on

177
00:11:33,736 --> 00:11:37,826
how many developers exist within an
organization, you have to, you actually

178
00:11:37,836 --> 00:11:39,536
have to put into consideration.

179
00:11:39,831 --> 00:11:43,701
The dev, the environments for
each developer involved and

180
00:11:43,711 --> 00:11:46,621
cata for all of that, which
increases like the cloud costs.

181
00:11:46,881 --> 00:11:51,561
And at the end of the day, you're
paying so much and then you're spending

182
00:11:51,561 --> 00:11:56,011
so much time, which is like a lot of
issues that we're trying to avoid.

183
00:11:56,511 --> 00:11:58,381
When adopting this in the first place.

184
00:11:59,381 --> 00:12:04,221
So at the end of the day, your developers
actually need an environment that does

185
00:12:04,221 --> 00:12:09,851
not require so much from them and then
take up a huge chunk of their time.

186
00:12:10,191 --> 00:12:15,541
And at the end of the day, closely or can
closely mirror the production environment

187
00:12:15,551 --> 00:12:18,941
so that you're spending less time,
you're saving more money, and then you're

188
00:12:18,951 --> 00:12:23,241
getting the best from your developers and
they're also giving you the best because.

189
00:12:23,606 --> 00:12:27,286
They're not stressed with whatever
dev environment you choose, right?

190
00:12:27,376 --> 00:12:30,426
That is where the remote
to local development in

191
00:12:30,426 --> 00:12:32,426
comes as like a golden path.

192
00:12:32,786 --> 00:12:36,426
I often call this remote call
because it's kind of image of

193
00:12:36,446 --> 00:12:38,116
remotes and then the local.

194
00:12:38,391 --> 00:12:39,081
Development.

195
00:12:39,091 --> 00:12:40,161
So like remote call.

196
00:12:40,661 --> 00:12:45,711
What or the magic that actually happens
in remote call development environment

197
00:12:45,761 --> 00:12:49,051
is like it is a hybrid strategy, right?

198
00:12:49,081 --> 00:12:53,331
Where you take the best part of the
local and magic with the best part of

199
00:12:53,331 --> 00:12:54,991
the remote development environment.

200
00:12:56,051 --> 00:12:58,941
The magic that happens is you
get the benefit of running your

201
00:12:58,961 --> 00:13:02,281
microservice running the particular
microservices that you actually

202
00:13:02,291 --> 00:13:06,911
want to work on locally, while every
other thing gets to run remotely.

203
00:13:07,191 --> 00:13:13,121
You don't have to set up everything
locally, but you also get but you are also

204
00:13:13,161 --> 00:13:17,741
not limited, you don't have to like work
on everything locally, but you're not also

205
00:13:17,761 --> 00:13:20,561
limited to the, your computer resources.

206
00:13:20,821 --> 00:13:21,831
Because at the end of the day.

207
00:13:22,136 --> 00:13:24,516
So basically, every other thing
that your application needs or

208
00:13:24,516 --> 00:13:28,536
your app every other thing about
application is accessible remotely,

209
00:13:28,596 --> 00:13:32,756
like your services, your database
all of the dependencies, literally

210
00:13:32,756 --> 00:13:35,686
everything is available remotely.

211
00:13:35,726 --> 00:13:39,226
It's just that specific microservice
you're working on that you get

212
00:13:39,406 --> 00:13:41,336
access to on your local computer.

213
00:13:41,526 --> 00:13:44,526
You also don't get to deal
with the downsides of an

214
00:13:44,566 --> 00:13:46,266
all remote or an all local.

215
00:13:46,821 --> 00:13:49,251
Workflow, like we looked at earlier.

216
00:13:49,621 --> 00:13:54,331
Other benefits that your developers
get to actually enjoy in a remote

217
00:13:54,631 --> 00:13:56,671
environment is a consistency.

218
00:13:56,851 --> 00:14:00,571
You can actually code you can
actually code or test or debug

219
00:14:00,601 --> 00:14:04,801
in an environment that is closely
aligned with the production state.

220
00:14:04,801 --> 00:14:08,731
So you don't have to deal with, oh,
it's, it looks good here, but like

221
00:14:08,731 --> 00:14:12,001
when you push through the production,
it actually breaks something or it

222
00:14:12,001 --> 00:14:13,441
doesn't work like it's supposed to.

223
00:14:14,581 --> 00:14:20,131
Your developers have to have the benefit
of enjoying the ease to use because they

224
00:14:20,131 --> 00:14:25,041
have access to like their favorite ideas
for tasks like debugging authoring of code

225
00:14:25,061 --> 00:14:29,911
or running any unit tests which makes it a
lot more approachable for your developers.

226
00:14:30,566 --> 00:14:32,746
And easy for them to
actually get started with.

227
00:14:33,116 --> 00:14:37,016
They also have to, they have access
to like the fast feedback loop.

228
00:14:37,016 --> 00:14:41,016
Because unlike the remotes or the
local where you actually have to

229
00:14:41,016 --> 00:14:44,866
wait for the CICD, unlike the remotes
where you actually have to wait for

230
00:14:44,866 --> 00:14:48,606
the CICD pipeline to be completed,
you have to do the containerization.

231
00:14:48,616 --> 00:14:51,246
You have to also check in the
cluster and so many others.

232
00:14:52,051 --> 00:14:55,531
You don't get to do that here because
you're getting like the states of the

233
00:14:55,581 --> 00:14:59,791
the application in the cloud while you're
actually running everything locally.

234
00:15:00,581 --> 00:15:03,371
And so that actually makes the
whole process a lot easier.

235
00:15:03,751 --> 00:15:07,681
You'll end up saving a lot of money
because your developers can actually

236
00:15:07,681 --> 00:15:12,631
use a shared environment instead
of like individual environments.

237
00:15:13,456 --> 00:15:15,456
For each developers.

238
00:15:15,656 --> 00:15:18,926
So you pay less for like your cloud
providers at the end of the day.

239
00:15:18,926 --> 00:15:24,606
And spending a whole lot of money on
cloud dev environments, and you also

240
00:15:24,606 --> 00:15:29,056
like getting the best of both worlds
which is like an added perks, which

241
00:15:29,126 --> 00:15:35,926
is why a tool like mirror D is, or
should be your go to and saves the day.

242
00:15:38,791 --> 00:15:43,981
So if you're wondering how exactly, or
what exactly Miradee is, don't worry.

243
00:15:44,031 --> 00:15:45,541
I'm going to answer all of that.

244
00:15:45,771 --> 00:15:51,261
Miradee is simply an open source project
that makes it possible for and very easy

245
00:15:51,291 --> 00:15:57,641
actually for developers to debug and also
like test applications on Kubernetes.

246
00:15:57,971 --> 00:16:03,341
It comes as like a CLI tool
and also an IDE plugin, right?

247
00:16:03,656 --> 00:16:08,536
And so when using Miradea, developers
can actually run local processes in

248
00:16:08,536 --> 00:16:11,106
the context of their cloud environment.

249
00:16:12,066 --> 00:16:16,506
And with Mirror D your developers
get access to the cluster services

250
00:16:16,546 --> 00:16:19,846
as if they are running locally and
then reroute the traffic to like the

251
00:16:20,056 --> 00:16:22,466
local, to like your local process.

252
00:16:23,236 --> 00:16:27,606
At the end of the day, it becomes
very easy for you to test your

253
00:16:27,656 --> 00:16:31,336
code on a cloud environment
without actually going through.

254
00:16:31,866 --> 00:16:35,326
The drama of the carization
or CI CDO deployment.

255
00:16:35,596 --> 00:16:40,226
And you also don't have to like worry
about disrupting the environment by

256
00:16:40,226 --> 00:16:44,006
deploying untested code at any point in.

257
00:16:44,856 --> 00:16:49,306
In time and how MirroD
works is like very simple.

258
00:16:49,896 --> 00:16:51,656
It comes with two main components.

259
00:16:51,666 --> 00:16:56,416
That's the MirroD layer, which exists
in the memory of a local process, right?

260
00:16:56,726 --> 00:17:00,616
And then the MirroD agent,
which actually exists as a

261
00:17:00,626 --> 00:17:02,706
port in your cloud environment.

262
00:17:02,936 --> 00:17:08,906
So when you initiate MirroD, the it
starts the MirroD agents, which operates

263
00:17:08,906 --> 00:17:12,646
within the same network namespace as the
particular port that you're targeting

264
00:17:12,656 --> 00:17:17,486
in the remote environment, this agent
has access to like literally everything

265
00:17:17,656 --> 00:17:21,236
your application will need in a cloud
environment, like network, and then the

266
00:17:21,236 --> 00:17:23,716
file system or database and all of that.

267
00:17:24,066 --> 00:17:27,736
So you can using your local machine, you
don't have to like deal with the heavy

268
00:17:27,906 --> 00:17:30,326
lifting of handling all of this because.

269
00:17:30,551 --> 00:17:33,171
The Miradee agent gets
you access to all of that.

270
00:17:33,641 --> 00:17:38,081
And then the Miradee agent on
the the Miradee layer now, on the

271
00:17:38,081 --> 00:17:41,981
other hand, integrates into your
local development environment.

272
00:17:42,371 --> 00:17:49,601
Intercept as well as redirects all low
level functions to the Merode agent.

273
00:17:50,291 --> 00:17:55,021
So this allows it to interact with
all of the resources just like your

274
00:17:55,051 --> 00:17:57,611
application is running in a live course.

275
00:17:57,621 --> 00:18:01,911
So at the end of the day, you're wondering
whether you're in the cloud or you're

276
00:18:01,911 --> 00:18:04,391
still testing your applications locally.

277
00:18:04,391 --> 00:18:04,761
Don't worry.

278
00:18:04,761 --> 00:18:05,271
We'll see it.

279
00:18:05,371 --> 00:18:06,501
Once I get started.

280
00:18:06,501 --> 00:18:08,431
But just know that at the end of the day.

281
00:18:08,486 --> 00:18:14,136
You actually get to check out your
code with real data and it's like

282
00:18:14,156 --> 00:18:17,766
working against real an actual
production like environment.

283
00:18:18,771 --> 00:18:23,751
And some other benefits that you get with
MirrorD is, it's not just about the name.

284
00:18:23,771 --> 00:18:27,601
It's actually gives you like a mirrored
state of like your cloud environment.

285
00:18:27,891 --> 00:18:31,741
And so when you're using MirrorD,
it's like a bridge between your local

286
00:18:31,741 --> 00:18:33,381
and your cloud environments, right?

287
00:18:33,611 --> 00:18:38,621
So you can configure configure
exactly what exact, what functionality

288
00:18:38,821 --> 00:18:41,051
that you want to happen remotely.

289
00:18:41,121 --> 00:18:42,761
And what you also want to happen remotely.

290
00:18:44,186 --> 00:18:48,806
The sweet thing about using MiroD is
that it doesn't you don't need the

291
00:18:48,816 --> 00:18:52,226
root access to actually use MiroD.

292
00:18:52,236 --> 00:18:56,876
It is very easy to get
started at the CLI or the IDE.

293
00:18:57,171 --> 00:19:02,701
You don't actually need root access to
your local computer to get that started.

294
00:19:03,011 --> 00:19:05,661
Mirror D is not invasive
as a remote cluster.

295
00:19:05,841 --> 00:19:11,181
It just attaches the Mirror D agent exists
while that whole process is going on.

296
00:19:11,211 --> 00:19:15,561
And once it is once you're done with
the whole debug process and then you end

297
00:19:15,571 --> 00:19:18,121
that, Mirror D agent also ends itself.

298
00:19:18,121 --> 00:19:19,291
You're going to see it as well.

299
00:19:20,006 --> 00:19:25,326
And so it takes a couple of seconds
actually to get started up with Miradee.

300
00:19:25,336 --> 00:19:29,436
It doesn't waste a lot of time
and you can run multiple processes

301
00:19:29,546 --> 00:19:33,396
all at once and each connected
to like different remote ports.

302
00:19:33,406 --> 00:19:36,646
So you're not even limited
to just one task at a time.

303
00:19:36,676 --> 00:19:39,306
You can do a multiple all at once.

304
00:19:40,156 --> 00:19:42,836
And MIRDI is also like very versatile.

305
00:19:42,836 --> 00:19:47,816
So it actually doesn't care which
setup that your cluster has.

306
00:19:48,126 --> 00:19:52,976
If you're using a Savage Mesh or
using a VPN, whatever setup it is that

307
00:19:52,976 --> 00:19:56,996
you're using, MIRDI doesn't actually
take all of that into consideration.

308
00:19:57,046 --> 00:19:58,166
It just works.

309
00:19:59,206 --> 00:20:02,296
And so at the end of the
day, Let's get started.

310
00:20:04,706 --> 00:20:04,986
All right.

311
00:20:04,986 --> 00:20:09,966
For this quick demo, I'm going
to be using a very simple Python

312
00:20:10,006 --> 00:20:12,506
application to show you how it works.

313
00:20:12,516 --> 00:20:13,516
So let's get into it.

314
00:20:13,756 --> 00:20:15,916
This is what my Python app looks like.

315
00:20:15,946 --> 00:20:20,286
The basically what it does is it
gives you like the weather updates in

316
00:20:20,306 --> 00:20:22,216
like different cities that you enter.

317
00:20:22,816 --> 00:20:27,506
So whatever city you actually put in is
going to give you all of the prompts.

318
00:20:28,076 --> 00:20:30,966
By calling an API that
actually tells all of this.

319
00:20:31,816 --> 00:20:34,526
So I don't want it to
answer this header anymore.

320
00:20:34,626 --> 00:20:37,026
I want to probably change the
button and I want to change this.

321
00:20:37,266 --> 00:20:40,046
So let's go into the
actual code base for this.

322
00:20:40,436 --> 00:20:44,496
I want this to answer instead of today's
weather app, I want it to answer.

323
00:20:44,996 --> 00:20:51,626
Anita's weather application,
and I wanted to say,

324
00:20:52,146 --> 00:20:56,576
tell me something, what is the weather?

325
00:20:56,666 --> 00:20:58,046
Let it just tell me something, right?

326
00:20:58,426 --> 00:21:01,966
And so that is in place.

327
00:21:02,821 --> 00:21:04,601
And if you notice, I have like my MirrorD.

328
00:21:04,601 --> 00:21:09,751
json file here, and what this
file does is it actually has the

329
00:21:09,751 --> 00:21:14,491
configuration configurations that I
need to tell MirrorD what I want it

330
00:21:14,491 --> 00:21:16,311
to do and how I want it to do it.

331
00:21:16,641 --> 00:21:20,521
So I've already set like the targets,
which the targets that I wanted to use,

332
00:21:20,521 --> 00:21:21,971
which is like the weather and the period.

333
00:21:22,101 --> 00:21:23,411
Weather app deployment.

334
00:21:23,551 --> 00:21:26,931
And imagine you're working
on like a microservice where

335
00:21:26,931 --> 00:21:29,081
there are multiple pods.

336
00:21:29,091 --> 00:21:34,671
You can actually specify a different
targets depending on what you're using.

337
00:21:34,671 --> 00:21:38,451
But I'm going to be specifying
the weather app deployment.

338
00:21:38,701 --> 00:21:41,781
And I wanted to also steal the traffic.

339
00:21:42,281 --> 00:21:46,771
From this particular, from the
actual remote cluster for me.

340
00:21:46,771 --> 00:21:51,241
So I want it to still in
the traffic and my mirrored.

341
00:21:51,241 --> 00:21:52,941
json file looks good.

342
00:21:53,296 --> 00:21:55,666
And my app py file looks good.

343
00:21:55,716 --> 00:22:00,756
I'm going to go on and first of all,
initiate mirror D at the bottom here

344
00:22:01,126 --> 00:22:03,116
and make sure that looks okay as well.

345
00:22:03,346 --> 00:22:04,776
And then hits the bug.

346
00:22:05,726 --> 00:22:10,591
This is going to take a few seconds, but
you're going to see it's running shortly.

347
00:22:11,931 --> 00:22:16,381
And what you're going to see at
the end is Miradee starts to go

348
00:22:16,411 --> 00:22:18,321
through the whole process, right?

349
00:22:19,261 --> 00:22:23,041
It's going to create the Miradee agent.

350
00:22:23,191 --> 00:22:26,141
Which is going to attach itself
to like my remotes cluster.

351
00:22:26,431 --> 00:22:30,111
And then the MIRDI layer, which
is available here, will redirects

352
00:22:30,351 --> 00:22:31,961
and also reroutes the traffic.

353
00:22:32,181 --> 00:22:35,311
So let us see what that looks like.

354
00:22:35,761 --> 00:22:37,911
This has started this is working fine.

355
00:22:37,921 --> 00:22:40,251
So let's see if anything changed.

356
00:22:40,571 --> 00:22:41,831
I'm not going to use.

357
00:22:42,211 --> 00:22:44,391
I'm not going to reload the actual page.

358
00:22:44,391 --> 00:22:51,041
I'll just open a new web browser
and try to run this in, and so

359
00:22:51,041 --> 00:22:54,921
we can see that Anita's weather
application now exists here.

360
00:22:55,131 --> 00:22:59,771
If you try to type in, tell me
something, it gives you like the

361
00:22:59,771 --> 00:23:04,711
whether updates in Texas, if you try
to try inside like a city in Nigeria,

362
00:23:04,781 --> 00:23:07,701
just, you also gets the updates there.

363
00:23:07,721 --> 00:23:12,601
So like we are getting the
feedback of what the application

364
00:23:12,611 --> 00:23:13,731
would have actually performed.

365
00:23:13,741 --> 00:23:16,601
If it wasn't if it was actually
in production right now.

366
00:23:17,731 --> 00:23:22,471
So if you also try this particular
if you try this URL now.

367
00:23:23,581 --> 00:23:28,001
This domain name now on your end, you
also notice that these changes that

368
00:23:28,001 --> 00:23:32,081
I have made, even though I have not
pushed it you can actually see what the

369
00:23:32,081 --> 00:23:34,881
changes look like on your end as well.

370
00:23:35,841 --> 00:23:39,181
And how do I know that
MiroD is actually working?

371
00:23:39,181 --> 00:23:43,031
I told you earlier that MiroD
kind of injects Itself into

372
00:23:43,031 --> 00:23:44,711
like your remote cluster.

373
00:23:44,741 --> 00:23:46,391
That's the MiroD agent, right?

374
00:23:46,391 --> 00:23:50,841
So let's see if the MiroD agents
actually existed by doing kube

375
00:23:51,371 --> 00:23:54,711
get pods and let's see.

376
00:23:56,051 --> 00:24:00,911
Now we see that there is actually a
MiroD agents that is running same same

377
00:24:00,951 --> 00:24:03,431
as like the weather app deployment.

378
00:24:03,441 --> 00:24:05,701
So like they're both running
at the same time, right?

379
00:24:06,936 --> 00:24:12,246
And now that actually tells you that
this is actually how MIRDI would work.

380
00:24:12,276 --> 00:24:16,046
Even if you're running like a very
large microservice application, you can

381
00:24:16,076 --> 00:24:18,546
indicate the particular microservice.

382
00:24:19,721 --> 00:24:23,231
You want to work on the the target,
the particular code that you want to

383
00:24:23,231 --> 00:24:27,521
specify, and then Miradee will still do
the same process that it's doing here.

384
00:24:28,001 --> 00:24:30,291
And at the end of the day, I am done.

385
00:24:30,301 --> 00:24:34,311
Let's say I'm actually done
with this whole process and I'm

386
00:24:34,321 --> 00:24:35,781
done debugging my application.

387
00:24:35,781 --> 00:24:36,861
Now I want to stop this.

388
00:24:37,261 --> 00:24:44,226
If I stop this debugging process,
you also see that the Mirrodi agent

389
00:24:44,276 --> 00:24:45,796
automatically terminates itself

390
00:24:46,366 --> 00:24:47,406
completed.

391
00:24:48,446 --> 00:24:50,106
And then, yep.

392
00:24:50,146 --> 00:24:54,646
So now we're back to like just the
deployments that exist here running.

393
00:24:54,686 --> 00:24:58,136
And so basically that
is how Mirrodi works.

394
00:24:58,376 --> 00:25:01,516
You don't have to deal
with all of the drama.

395
00:25:01,636 --> 00:25:05,256
And once you're done with the changes,
you can actually push to Push your

396
00:25:05,256 --> 00:25:08,496
application and then you're moving
forward from that point in time.

397
00:25:08,746 --> 00:25:12,966
Meredith takes like your feedback loop
from what it used to be, or what we

398
00:25:12,966 --> 00:25:15,616
actually looked at earlier to this.

399
00:25:15,926 --> 00:25:19,556
And once you code, you can
actually test in your application

400
00:25:19,576 --> 00:25:21,976
in on staging using Miradee.

401
00:25:21,986 --> 00:25:23,586
So you're like seeing what's your.

402
00:25:23,876 --> 00:25:26,616
Application will look like and you're
making your changes once you're

403
00:25:26,636 --> 00:25:28,146
sure that everything looks good.

404
00:25:28,366 --> 00:25:33,866
You'll put your pull request and
then your CI CD processes and tests

405
00:25:33,906 --> 00:25:35,676
all go on from that point in time.

406
00:25:35,716 --> 00:25:39,926
And you also don't have to like
panic at any point of The application

407
00:25:39,936 --> 00:25:44,966
breaking because already you're sure
that you got like a very good state

408
00:25:44,976 --> 00:25:49,096
of like it's very closely aligned
production states of the application

409
00:25:49,406 --> 00:25:50,666
while doing that with Meredith.

410
00:25:51,816 --> 00:25:54,476
That's basically what I've
been trying to explain since.

411
00:25:54,486 --> 00:25:59,026
So you spend less time
with mocks and simulations.

412
00:25:59,246 --> 00:26:03,916
You get like immediate response of the
cloud conditions of your applications and

413
00:26:03,916 --> 00:26:08,556
using ready, you also get to there are
low chances of your application failing.

414
00:26:08,606 --> 00:26:10,836
I like the later stages once
you're done with all of this.

415
00:26:10,846 --> 00:26:16,857
That is all that we've been trying
to say about mirror D now we're done.

416
00:26:18,036 --> 00:26:20,986
If you have any questions at this
point in time, I'll be more than

417
00:26:20,986 --> 00:26:24,676
happy to walk you through or go
through these questions with you.

418
00:26:25,266 --> 00:26:28,686
And if you also want to find out
more about MirrorD or contribute

419
00:26:28,686 --> 00:26:33,216
to it or use MirrorD, you can
actually check out mirrord.

420
00:26:33,216 --> 00:26:33,746
dev.

421
00:26:33,766 --> 00:26:36,946
We have an excellent documentation
that makes it easy for you to jump

422
00:26:37,196 --> 00:26:39,636
jump on and get started with MirrorD.

423
00:26:40,006 --> 00:26:44,496
If you have any additional questions, we
have an amazing discord community with

424
00:26:44,686 --> 00:26:50,426
great contributors and also developers
that are on standby 247 to actually assist

425
00:26:50,426 --> 00:26:55,116
you with any challenge at all you have
using MirrorD and you can also create

426
00:26:55,136 --> 00:26:58,606
any issues that you also come across
using MirrorD at the end of the day.

427
00:26:59,741 --> 00:27:01,461
That is all for my presentation.

428
00:27:01,471 --> 00:27:05,931
If you want to reach out to me, you
can access me at Anita Ihuman on

429
00:27:05,971 --> 00:27:09,931
all of my social media platforms,
or you can also reach out to me

430
00:27:09,951 --> 00:27:12,911
via my email listed out here.

431
00:27:13,431 --> 00:27:15,301
So thank you so much and
I hope you enjoy this.

