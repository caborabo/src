1
00:00:14,040 --> 00:00:14,740
Welcome, everyone.

2
00:00:14,950 --> 00:00:19,610
And thanks for joining us today at
Conf42's kube native 2024 conference.

3
00:00:20,400 --> 00:00:24,259
Today, we'll dive into how CircleCI's
field engineering team uses Kubernetes

4
00:00:24,299 --> 00:00:29,419
and Terraform modules to revolutionize
the way that we present enterprise demos.

5
00:00:29,830 --> 00:00:32,799
We're going to explore some of the
challenges we face, the solutions we built

6
00:00:32,799 --> 00:00:36,980
out, and the impact it's had both on our
team and our customer interactions since.

7
00:00:37,510 --> 00:00:39,460
Firstly, let's introduce ourselves.

8
00:00:39,830 --> 00:00:41,170
My name is Eddie Webinaro.

9
00:00:41,270 --> 00:00:44,320
I am the Senior Director of Field
Engineering here at CircleCI.

10
00:00:44,350 --> 00:00:48,770
We are a global team supporting North
America, EMEA, and the Japan ANZ region.

11
00:00:49,189 --> 00:00:52,280
I'm joined today by Mualanian,
who is a Senior Enterprise

12
00:00:52,290 --> 00:00:53,590
Field Engineer with the team.

13
00:00:53,790 --> 00:00:56,610
He's got a really interesting
background, embedded firmware devices,

14
00:00:56,710 --> 00:00:58,300
deploying software into submarines.

15
00:00:58,510 --> 00:01:01,390
Myself, I spent a career in
software development as well,

16
00:01:01,590 --> 00:01:04,660
but lamer tamer traditional
cloud infrastructure type stuff.

17
00:01:05,100 --> 00:01:08,620
But we're both really excited to be here
today and present this conversation.

18
00:01:09,070 --> 00:01:10,180
What is that conversation?

19
00:01:10,730 --> 00:01:14,250
We're going to do a a brief overview of
what we're talking about today, and I want

20
00:01:14,250 --> 00:01:16,180
to give you a quick demo of the product.

21
00:01:16,810 --> 00:01:19,930
Then we're going to dive deep into,
and take a step back, and really

22
00:01:19,930 --> 00:01:23,370
talk about what the problem was, what
the challenges were we were seeing,

23
00:01:23,790 --> 00:01:25,420
how we came up with the solution.

24
00:01:25,815 --> 00:01:29,135
And really how we built it out
to make it to easy as deploy as

25
00:01:29,175 --> 00:01:33,645
possible, whether locally in our own
environments or actually for demos

26
00:01:33,665 --> 00:01:36,605
out in a customer's environment and
giving them the chance to get hands on.

27
00:01:37,105 --> 00:01:40,575
We'll then wrap up what Sarah
looks like today, how it changed

28
00:01:40,575 --> 00:01:43,665
the way our field engineering team
interacts with potential customers.

29
00:01:43,905 --> 00:01:45,604
So that all sounds good.

30
00:01:45,664 --> 00:01:46,134
Stick around.

31
00:01:46,134 --> 00:01:46,885
Let's get started.

32
00:01:49,410 --> 00:01:52,530
Now, I got to give a little
credit here to one of my former

33
00:01:52,540 --> 00:01:54,430
solutions engineers, Aaron G.

34
00:01:54,760 --> 00:01:57,380
He once told me you always
got to start the conversation

35
00:01:57,380 --> 00:01:58,950
with a finished cake, right?

36
00:01:59,210 --> 00:02:02,590
If you think about those traditional
cooking shows, here's the beautiful dinner

37
00:02:02,590 --> 00:02:03,790
that we're going to make tonight, right?

38
00:02:03,790 --> 00:02:05,929
And they put it away and then
they jump into the conversation.

39
00:02:06,310 --> 00:02:08,470
And so that's what I wanted
to do with y'all today, right?

40
00:02:08,790 --> 00:02:12,955
And so in our case, The finished
cake is doing a demo with a globally

41
00:02:12,955 --> 00:02:14,405
distributed customer, right?

42
00:02:14,685 --> 00:02:15,605
And it just works.

43
00:02:15,625 --> 00:02:16,905
All the magic's there.

44
00:02:16,915 --> 00:02:18,064
It happens right out of the box.

45
00:02:18,075 --> 00:02:21,404
We're talking sleek, ready
to wow enterprise clients

46
00:02:21,405 --> 00:02:22,414
without skipping a beat.

47
00:02:23,035 --> 00:02:27,655
Our solution mirrors those enterprise
environments of customers, enterprise

48
00:02:27,695 --> 00:02:32,145
type infrastructure controls and concerns
and set up with just a few clicks.

49
00:02:32,615 --> 00:02:35,775
And so by the end of the presentation
today, you'll understand how we built this

50
00:02:35,775 --> 00:02:39,585
powerful system and how it impacts the way
that we deliver demos here at CircleCI.

51
00:02:40,585 --> 00:02:43,794
So before we hop into the demo,
I want to take a look at what it

52
00:02:43,795 --> 00:02:44,934
is we're going to show you here.

53
00:02:45,765 --> 00:02:49,770
I'm going to show you triggering a
deployment Through CircleCI pipeline

54
00:02:49,770 --> 00:02:53,600
to roll out new releases to an EKS
environment across multiple regions.

55
00:02:53,980 --> 00:02:57,799
So we've actually got clusters deployed
across North America, EMEA, and Japan.

56
00:02:58,430 --> 00:03:01,379
We're going to show you how the
CircleCI releases dashboard.

57
00:03:01,440 --> 00:03:03,219
We'll go through a series of steps.

58
00:03:03,630 --> 00:03:07,310
to incrementally roll out these
new features as they're released

59
00:03:07,510 --> 00:03:10,670
or automatically roll back when an
error is encountered when possible.

60
00:03:11,210 --> 00:03:14,340
This is just a quick demo to show
you what the application developer

61
00:03:14,340 --> 00:03:17,440
experience is like, how they
would interact with CircleCI in

62
00:03:17,440 --> 00:03:18,890
a typical enterprise environment.

63
00:03:19,689 --> 00:03:23,960
The key here is that we're deploying
an app automagically without ever

64
00:03:23,960 --> 00:03:27,340
needing credentials that a developer
might see, leak, or be exposed

65
00:03:27,350 --> 00:03:29,900
to, and without the need to have
manual intervention if something

66
00:03:29,900 --> 00:03:31,540
goes wrong during the deployment.

67
00:03:33,755 --> 00:03:35,245
So it's demo time.

68
00:03:35,755 --> 00:03:37,165
And so this is the finished product.

69
00:03:37,605 --> 00:03:39,995
This is our Sarah and
enterprise environment.

70
00:03:40,625 --> 00:03:43,064
And what's going on here is a
deployment demo that just showcases

71
00:03:43,064 --> 00:03:44,454
a few of those capabilities.

72
00:03:45,245 --> 00:03:48,175
So as you can see, we have
three windows upon the screen.

73
00:03:48,284 --> 00:03:50,835
On the left hand side is a
circle CIS pipeline page.

74
00:03:51,055 --> 00:03:53,865
I'm actually going to trigger
a deployment to run a build and

75
00:03:53,865 --> 00:03:57,525
deployment pipeline to run against these
environments in North America and a Mia.

76
00:03:57,880 --> 00:03:59,510
which are the two windows
on the right hand side.

77
00:04:00,070 --> 00:04:03,010
The app we're using is a
colloquial named Doctor Demo.

78
00:04:03,340 --> 00:04:05,970
It's a deploy and release
demo, hence the Doctor DR.

79
00:04:06,399 --> 00:04:08,640
And it's actually going to show
you how we can incrementally and

80
00:04:08,640 --> 00:04:10,280
progressively roll out these features.

81
00:04:10,960 --> 00:04:13,130
So the left window you'll
see now has updated.

82
00:04:13,130 --> 00:04:16,060
We're actively building these
applications across two different

83
00:04:16,070 --> 00:04:19,260
jobs, one for the North American
region and one for the MIA region.

84
00:04:20,440 --> 00:04:23,530
As these jobs Progress and
actually start to introduce this

85
00:04:23,540 --> 00:04:24,930
environment into those versions.

86
00:04:25,400 --> 00:04:28,320
You'll actually see the colors
on the right hand side change.

87
00:04:28,320 --> 00:04:30,340
So the colors represent
the current app version.

88
00:04:30,720 --> 00:04:33,319
And you'll see us introduce a new
color to each one of these screens.

89
00:04:33,319 --> 00:04:35,719
And you can see that on the top we're
already introduced a yellow version.

90
00:04:36,060 --> 00:04:37,980
And on the bottom we're going
to introduce a green version.

91
00:04:37,980 --> 00:04:38,709
And there it goes.

92
00:04:39,609 --> 00:04:42,530
We can jump over to CircleCI's
release dashboard that I mentioned.

93
00:04:42,935 --> 00:04:46,035
On the left screen here and
actually see those releases as well.

94
00:04:46,035 --> 00:04:48,985
So now this is being monitored from
the Kubernetes cluster and sending

95
00:04:48,995 --> 00:04:52,495
information back to CircleCI about
how those rollouts are progressing,

96
00:04:52,714 --> 00:04:55,645
whether they're succeeding or
failing or needed to be rolled back.

97
00:04:56,145 --> 00:04:58,235
I'm actually going to intentionally,
you can see on the right hand side, I've

98
00:04:58,235 --> 00:05:00,124
dragged the error rate up to this 200%.

99
00:05:00,154 --> 00:05:05,025
So I'm intentionally causing this EMEA
instance to send bad bad results back to

100
00:05:05,025 --> 00:05:07,555
the server, basically invoking failures.

101
00:05:07,925 --> 00:05:11,225
This should be enough to trigger
Our analytics to say, wait a minute,

102
00:05:11,255 --> 00:05:12,835
something is wrong with this release.

103
00:05:13,255 --> 00:05:16,175
I'm going to leave the North American
release up top healthy, so that

104
00:05:16,175 --> 00:05:17,315
one should continue on normally.

105
00:05:18,115 --> 00:05:21,594
And the window here we're looking at
is that yellow release, it's coming

106
00:05:21,594 --> 00:05:25,724
online, we're about halfway through,
and it's basically increasing the

107
00:05:25,724 --> 00:05:28,705
amount of traffic that is going
to each one of these applications.

108
00:05:29,635 --> 00:05:31,425
Now I'm clicking into that failed release.

109
00:05:31,515 --> 00:05:34,165
It was a failed release because I
intentionally set the error rate high.

110
00:05:34,755 --> 00:05:37,595
CircleCI's release agent detected
that in the rollout and said,

111
00:05:37,595 --> 00:05:41,075
Wait a minute, we've exceeded our
error limit for this application.

112
00:05:41,475 --> 00:05:44,204
And so now on the bottom you can
see the traffic was incrementally

113
00:05:44,235 --> 00:05:46,595
increasing the amount we were
sending to this new version.

114
00:05:46,845 --> 00:05:50,165
It actually completely stopped that
and rolled back to the prior version.

115
00:05:51,060 --> 00:05:53,890
Meanwhile, in North America, though,
we didn't encounter those same errors.

116
00:05:53,910 --> 00:05:55,540
Whatever was different
in the environment, i.

117
00:05:55,540 --> 00:05:55,560
e.

118
00:05:55,600 --> 00:05:57,810
Eddie mucking around
with it it's succeeding.

119
00:05:57,950 --> 00:05:59,890
And so we're going to let
that rollout continue.

120
00:06:00,280 --> 00:06:03,209
And you can see that both in the
CircleCI releases dashboard, as

121
00:06:03,209 --> 00:06:04,080
well as the environment there.

122
00:06:04,270 --> 00:06:06,939
So this is just one of those apps
that we can use with customers to

123
00:06:06,949 --> 00:06:08,980
drive that kind of demo conversation.

124
00:06:09,980 --> 00:06:12,980
Now, to elaborate a little bit more
on what we saw and go deeper into what

125
00:06:12,980 --> 00:06:15,720
our solution actually looks like, this
is a point I'm going to go ahead and

126
00:06:15,720 --> 00:06:19,030
hand it off to Mu to walk through how
we went through this process as a team.

127
00:06:20,030 --> 00:06:20,460
Thanks, Eddie.

128
00:06:20,799 --> 00:06:24,159
To elaborate a little bit on what Eddie
showed us there, this environment is

129
00:06:24,169 --> 00:06:26,269
fully built on infrastructure as code.

130
00:06:26,719 --> 00:06:29,399
Everything is automated and
repeatable, except for the initial

131
00:06:29,419 --> 00:06:33,809
domain purchase and IAM role setup,
which are one time manual steps.

132
00:06:33,809 --> 00:06:33,989
Thanks, Eddie.

133
00:06:34,689 --> 00:06:38,109
It runs on Kubernetes,
specifically on EKS, giving us

134
00:06:38,109 --> 00:06:41,479
the flexibility and scalability
needed for enterprise level demos.

135
00:06:42,249 --> 00:06:46,389
We've implemented Istio as our service
mesh and Ingress controller, with tools

136
00:06:46,389 --> 00:06:50,329
like Kiali, Grafana, and Prometheus
to manage, monitor, and visualize

137
00:06:50,359 --> 00:06:51,739
what's happening in the environment.

138
00:06:52,289 --> 00:06:54,869
Now we've showed you the solution,
but we didn't start there.

139
00:06:55,469 --> 00:06:57,209
Let's go back to the
problem we wanted to solve.

140
00:06:59,609 --> 00:07:00,779
Now, the problem was clear.

141
00:07:01,539 --> 00:07:05,479
Each demo needed to be unique, which meant
we were constantly reinventing the wheel.

142
00:07:05,479 --> 00:07:08,779
music ends We lack standardization,
and that caused friction

143
00:07:08,869 --> 00:07:10,509
amongst customer trials.

144
00:07:10,729 --> 00:07:11,369
And guess what?

145
00:07:11,569 --> 00:07:12,119
It was a mess.

146
00:07:13,199 --> 00:07:16,359
Repeated work with too much manual
effort led to demos that were missing the

147
00:07:16,359 --> 00:07:18,369
mark with enterprise clients, big time.

148
00:07:19,039 --> 00:07:22,409
Without infrastructure as code,
security was a concern, and the

149
00:07:22,409 --> 00:07:23,549
manual steps slowed us down.

150
00:07:24,199 --> 00:07:26,969
Enterprise teams expected better,
and we knew we had to step it up.

151
00:07:27,499 --> 00:07:29,549
We have two main goals when
building this demo environment.

152
00:07:30,089 --> 00:07:33,039
First, we wanted to reduce the
amount of effort that it took to

153
00:07:33,039 --> 00:07:34,929
deliver clean, consistent demos.

154
00:07:35,459 --> 00:07:38,769
This meant creating a highly available
demo environment that could be spun

155
00:07:38,769 --> 00:07:42,199
up quickly, without needing manual
intervention or endless preparation.

156
00:07:43,259 --> 00:07:46,369
The more reusable we could make the
environment, the less time we would spend

157
00:07:46,389 --> 00:07:47,799
reinventing the wheel for each demo.

158
00:07:48,749 --> 00:07:51,609
Second, we wanted to elevate
the conversation we were having

159
00:07:51,609 --> 00:07:54,569
with customers instead of just
showing them a static demo.

160
00:07:55,319 --> 00:08:00,009
We needed a dynamic, scalable
platform that mirrors the kind of

161
00:08:00,009 --> 00:08:01,139
infrastructure that they're running.

162
00:08:01,839 --> 00:08:05,009
By doing this, we're able to
provide a more consistent experience

163
00:08:05,009 --> 00:08:08,049
across different enterprise
roles, whether it's the dev team,

164
00:08:08,169 --> 00:08:10,239
security team, or operation teams.

165
00:08:10,639 --> 00:08:13,829
Everyone can see how our platform
fits their specific needs.

166
00:08:15,379 --> 00:08:16,869
How did we get all of this started?

167
00:08:17,849 --> 00:08:19,769
Let me tell you, it wasn't
an overnight process.

168
00:08:20,189 --> 00:08:23,499
It took a lot of collaboration and
late night discussions across teams.

169
00:08:24,479 --> 00:08:28,439
We started with technology chats, where
our team, spread across North America,

170
00:08:28,509 --> 00:08:33,179
Europe, Middle East, and Asia, and
Japan Asia Pacific worked together to

171
00:08:33,179 --> 00:08:35,769
select the right tools and technologies.

172
00:08:36,789 --> 00:08:40,459
We had to ensure everything aligned
with customer needs while fitting

173
00:08:40,459 --> 00:08:42,439
seamlessly into our own ecosystem.

174
00:08:43,389 --> 00:08:45,209
Next, we had vision shots.

175
00:08:45,529 --> 00:08:48,739
These were more strategic, where
management and field engineers focused

176
00:08:48,769 --> 00:08:51,789
on defining the impact that we wanted
to achieve with this environment.

177
00:08:52,419 --> 00:08:56,399
It was about telling the right story, one
that demonstrated real value to customers.

178
00:08:57,749 --> 00:09:01,699
Initially, our goal was to create a
reference architecture that customers

179
00:09:01,729 --> 00:09:04,729
could trust as a close reflection
of their own infrastructure.

180
00:09:05,739 --> 00:09:08,229
Now, while we worked on this,
the team continued their regular

181
00:09:08,229 --> 00:09:11,339
duties, generating leads and closing
deals using our existing methods.

182
00:09:11,609 --> 00:09:15,309
But as the architecture took shape, it
became clear that this new environment

183
00:09:15,309 --> 00:09:18,999
would become central to how we run
demos going forward here at CircleCI.

184
00:09:19,679 --> 00:09:22,729
And personally, in my own deals, it
has really changed the way that I

185
00:09:22,759 --> 00:09:24,509
interact and engage with prospects.

186
00:09:25,059 --> 00:09:26,329
Having this consistent.

187
00:09:26,704 --> 00:09:31,024
And scalable environment to demo in real
time has removed a lot of the friction

188
00:09:31,064 --> 00:09:35,624
and made my conversations more impactful
and relevant to potential customers.

189
00:09:37,704 --> 00:09:39,664
So what did we come up with?

190
00:09:42,124 --> 00:09:45,734
After laying out the solution, one of
the key discussions we had was whether

191
00:09:45,734 --> 00:09:49,494
to create a multi tenant environment
or to provide each field engineer

192
00:09:49,534 --> 00:09:50,964
with their own demo environment.

193
00:09:51,874 --> 00:09:55,614
On one hand, a multi tenant environment
would be more cost effective and aligned

194
00:09:55,644 --> 00:09:58,704
with how shared environments are used
in the real world enterprise settings.

195
00:09:59,364 --> 00:10:04,099
However We also considered giving
each field engineer their own

196
00:10:04,129 --> 00:10:07,929
isolated environment to eliminate any
potential conflicts between demos.

197
00:10:08,729 --> 00:10:12,429
Ultimately, we decided that while
individual environments were attractive,

198
00:10:12,469 --> 00:10:16,049
the cost didn't justify the need,
especially since enterprise teams

199
00:10:16,119 --> 00:10:18,089
typically worked in shared spaces already.

200
00:10:18,959 --> 00:10:22,099
This decision helped us to
maintain consistency while keeping

201
00:10:22,109 --> 00:10:23,319
the infrastructure efficient.

202
00:10:24,539 --> 00:10:27,309
We also explored the possibility
of building versus buying a

203
00:10:27,309 --> 00:10:28,919
dedicated demo automation tool.

204
00:10:29,609 --> 00:10:33,139
While we found some tools that partially
covered our needs, they didn't really

205
00:10:33,149 --> 00:10:36,999
offer the flexibility and control we
needed to mirror customer environments.

206
00:10:37,239 --> 00:10:39,640
We stuck with our modular
infrastructure as code approach,

207
00:10:39,910 --> 00:10:43,669
which allowed us to customize on a
per region, per demo basis without

208
00:10:43,670 --> 00:10:45,510
deviating from the core architecture.

209
00:10:46,039 --> 00:10:48,940
Now, building on that decision to
go with a multi tenant environment,

210
00:10:49,050 --> 00:10:52,270
we designed the architecture to be
modular and layered to handle the

211
00:10:52,270 --> 00:10:55,550
complexity of demo environments
without creating unnecessary overhead.

212
00:10:56,380 --> 00:10:58,000
At the top, we have the global layer.

213
00:10:58,450 --> 00:11:02,910
This covers the foundational elements
like DNS and IAM policies, which

214
00:11:02,920 --> 00:11:04,510
are shared across all regions.

215
00:11:05,180 --> 00:11:09,279
It is a single source of truth for global
resources that every region can rely on.

216
00:11:10,139 --> 00:11:11,619
Next, we have the region core.

217
00:11:12,300 --> 00:11:16,420
This layer handles region specific
infrastructure, like the EKS clusters,

218
00:11:16,450 --> 00:11:18,250
networking, routing, and certificates.

219
00:11:18,730 --> 00:11:22,140
It's designed to be consistent across
regions, so no matter where a demo

220
00:11:22,140 --> 00:11:23,599
runs, the core setup is the same.

221
00:11:24,930 --> 00:11:27,500
And finally, we built out
the region platform layer.

222
00:11:28,190 --> 00:11:30,050
This is where the customization happens.

223
00:11:30,430 --> 00:11:34,250
It includes components like Vault for
secrets management, Nexus for artifact

224
00:11:34,250 --> 00:11:37,950
storage, and the app namespaces where
teams can deploy their demo apps.

225
00:11:38,705 --> 00:11:41,725
Each demo is isolated, but still
follows the same core structure,

226
00:11:41,935 --> 00:11:44,715
which means we can easily replicate
it for different regions or use

227
00:11:44,715 --> 00:11:46,355
cases without starting from scratch.

228
00:11:47,205 --> 00:11:50,375
Now, by using this layered approach,
we ensure that the infrastructure

229
00:11:50,375 --> 00:11:54,185
remains consistent across regions,
while still allowing flexibility

230
00:11:54,205 --> 00:11:56,004
for specific customer needs.

231
00:11:57,004 --> 00:12:00,929
You have you may have noticed,
The load vault credential

232
00:12:00,929 --> 00:12:02,259
step in our earlier preview.

233
00:12:02,559 --> 00:12:04,709
Let's talk about how we tackle
secrets management because

234
00:12:04,719 --> 00:12:06,179
that's also super important.

235
00:12:07,249 --> 00:12:10,219
One of the biggest challenges in
any demo or production environment

236
00:12:10,229 --> 00:12:11,759
is managing secrets securely.

237
00:12:12,379 --> 00:12:14,999
We wanted to ensure that our
infrastructure not only mirrored

238
00:12:15,009 --> 00:12:19,209
enterprise setups, but also adhere to the
best practices for secrets management.

239
00:12:20,239 --> 00:12:25,539
Our approach begins with single sign on
or SSO for initial AWS operator access.

240
00:12:26,409 --> 00:12:31,409
Once that's in place, we use OpenID
Connect or OIDC assumptions, which

241
00:12:31,409 --> 00:12:36,209
means our pipelines run securely with
web identity to provision the entire

242
00:12:36,209 --> 00:12:38,839
stack without exposing credentials.

243
00:12:39,999 --> 00:12:42,509
For added security, the root
key for Vault, which is the

244
00:12:42,519 --> 00:12:47,809
backbone of web is stored in AWS
Key Management Services, or KMS.

245
00:12:48,229 --> 00:12:52,209
This allows Vault to auto unseal, adding
another layer of security during setup.

246
00:12:53,619 --> 00:12:56,889
Now, the operating operators
themselves are given limited,

247
00:12:56,909 --> 00:13:00,359
unique roles that restrict their
access outside of the pipeline.

248
00:13:00,899 --> 00:13:03,649
This ensures that no one has
unnecessary access to the

249
00:13:03,659 --> 00:13:04,919
sensitive parts of the system.

250
00:13:05,734 --> 00:13:09,874
Meanwhile, our development pipelines
rely on predefined policies within

251
00:13:09,874 --> 00:13:13,584
Vault to load any additional
credentials or tokens so that the

252
00:13:13,584 --> 00:13:15,394
secrets are only retrieved as needed.

253
00:13:16,234 --> 00:13:20,434
In short, our setup ensures that
sensitive information is protected

254
00:13:20,454 --> 00:13:24,284
at every layer, from initial
provisioning to ongoing operations.

255
00:13:25,054 --> 00:13:28,974
By keeping the secrets out of developers
hands and automating access through

256
00:13:28,974 --> 00:13:32,884
Vault, we're able to secure the
environment without slowing things down.

257
00:13:33,434 --> 00:13:37,184
Now that we've figured out all the details
and ironed out all the kinks, let's talk a

258
00:13:37,184 --> 00:13:38,714
little bit about how things are going now.

259
00:13:40,684 --> 00:13:42,975
When we first rolled this
out, adoption was a bit slow.

260
00:13:43,684 --> 00:13:46,024
While the environment was
powerful, it lacked the polish

261
00:13:46,024 --> 00:13:47,184
to really grab attention.

262
00:13:47,684 --> 00:13:51,034
It was functional, but it didn't
have that wow factor, just yet.

263
00:13:51,904 --> 00:13:55,044
Now, as we improved the demo apps
and incorporated more eye catching

264
00:13:55,044 --> 00:13:58,544
features like modular microservices,
firmware testing, mobile releases,

265
00:13:58,784 --> 00:13:59,794
things started to change.

266
00:14:00,544 --> 00:14:04,044
The addition of visual deploy tracking,
which is what we demoed earlier,

267
00:14:04,424 --> 00:14:06,014
also added some much needed flair.

268
00:14:06,254 --> 00:14:07,424
Customers really like that.

269
00:14:08,114 --> 00:14:10,874
Teams could now see the
deployments in real time, which

270
00:14:10,874 --> 00:14:12,324
was also a huge selling point.

271
00:14:13,574 --> 00:14:17,034
Now, initially, contributions to
the environment were slow, and

272
00:14:17,034 --> 00:14:20,204
we realized the architecture was
a bit too complex and entangled.

273
00:14:20,754 --> 00:14:23,964
Each new field engineer who used
it, though, slowly cleaned up the

274
00:14:23,964 --> 00:14:27,564
process, little by little, making it
more user friendly and accessible.

275
00:14:28,599 --> 00:14:31,569
Over time, the environment became
widely adopted, not just by

276
00:14:31,569 --> 00:14:34,129
our team, but by teams outside
of field engineering as well.

277
00:14:34,814 --> 00:14:37,764
We even have some customers that
have deployed it locally for their

278
00:14:37,764 --> 00:14:39,364
own testing and trial purposes.

279
00:14:39,744 --> 00:14:42,864
It's now the go to demo platform,
and its use has become consistent

280
00:14:42,894 --> 00:14:43,974
across the organization.

281
00:14:46,294 --> 00:14:50,744
Now, speaking of customers that are
using Environment, we had a real

282
00:14:50,754 --> 00:14:54,694
light bulb a ha moment when one of our
customers came to us and asked, Hey!

283
00:14:54,964 --> 00:14:57,934
How do we get our own access
to your sandbox environment?

284
00:14:58,854 --> 00:15:02,184
That was a real game changer because
up until that point we were focused

285
00:15:02,184 --> 00:15:06,284
on using the environment for internal
demos or internal demos to customers.

286
00:15:06,284 --> 00:15:09,974
But this request really opened
up a whole new perspective and it

287
00:15:09,974 --> 00:15:13,214
showed us that customers aren't
just interested in seeing the demo.

288
00:15:13,514 --> 00:15:16,724
They wanted to get hands-on with the
same infrastructure that we were using.

289
00:15:17,344 --> 00:15:19,504
And on top of that's a really
powerful selling point to be

290
00:15:19,504 --> 00:15:20,644
able to tell your customer, Hey.

291
00:15:21,369 --> 00:15:24,869
You can go ahead and use, our tool
within your infrastructure, right?

292
00:15:25,259 --> 00:15:28,819
So this was a pivotal moment because
one, it validated all the work that

293
00:15:28,819 --> 00:15:32,229
we had put into making the environment
scalable, modular, and secure.

294
00:15:32,969 --> 00:15:35,999
And two, now we're not just
showing off the platform.

295
00:15:36,459 --> 00:15:40,149
We're actually getting to offer customers
the chance to test drive it themselves

296
00:15:40,199 --> 00:15:43,919
in real time, which is super powerful,
especially in the sales process.

297
00:15:46,599 --> 00:15:49,679
But naturally, this also meant
we had to make some changes.

298
00:15:49,829 --> 00:15:50,699
Quite a few, actually.

299
00:15:51,409 --> 00:15:55,519
First off, we had to remove any hard
coded IDs or paths from the environment to

300
00:15:55,519 --> 00:15:57,349
make it flexible enough for external use.

301
00:15:58,109 --> 00:16:01,369
This wasn't just about running demos
anymore, it was about giving customers

302
00:16:01,459 --> 00:16:04,659
the ability to use the environment
themselves, which meant it needed to

303
00:16:04,659 --> 00:16:06,419
be adaptable for their unique needs.

304
00:16:07,584 --> 00:16:10,274
We also needed to fully document
the provisioning process.

305
00:16:10,814 --> 00:16:13,854
We knew if customers were going to
dive into the environment, everything

306
00:16:13,864 --> 00:16:15,074
had to be clear and straightforward.

307
00:16:15,644 --> 00:16:19,694
Thankfully, we already had a solid
document in place, which was about

308
00:16:19,694 --> 00:16:20,854
80 percent of what we needed.

309
00:16:20,954 --> 00:16:23,774
So going through and patching
that up before we gave it to the

310
00:16:23,774 --> 00:16:25,604
customer wasn't too difficult a task.

311
00:16:26,339 --> 00:16:30,219
From there, it was all about refining
the architecture, making it truly

312
00:16:30,219 --> 00:16:33,449
implementable for external use,
while still maintaining the security,

313
00:16:33,609 --> 00:16:36,699
scalability, and modularity that
made it so powerful to begin with.

314
00:16:37,209 --> 00:16:40,439
Now, adapting the environment for
customer access wasn't just about

315
00:16:40,439 --> 00:16:43,809
making it usable for them, it also
opened up new opportunities to

316
00:16:43,809 --> 00:16:45,329
make our deployment more portable.

317
00:16:45,824 --> 00:16:49,464
Like I said before, we shifted from hard
coded elements to a mostly parametrized

318
00:16:49,474 --> 00:16:52,884
setup, which allowed us to deploy
the same architecture across multiple

319
00:16:52,884 --> 00:16:56,634
environments, regions, and customer
specific configurations with ease.

320
00:16:57,474 --> 00:17:00,634
This meant that we can now spin up
environments not only for our internal

321
00:17:00,634 --> 00:17:06,204
demos, but also for customer POCs, sandbox
environments, and even full scale trials.

322
00:17:06,949 --> 00:17:12,599
By modularizing the core components,
we made it easy to tweak or scale

323
00:17:12,599 --> 00:17:15,199
the deployment based on what
the customer actually needs.

324
00:17:16,029 --> 00:17:19,309
And the benefit is the architecture
now adapts without requiring a

325
00:17:19,309 --> 00:17:20,609
total rebuild, which is awesome.

326
00:17:21,309 --> 00:17:25,289
And this portability has given us and
our customers the flexibility to deploy

327
00:17:25,299 --> 00:17:29,109
the same powerful infrastructure in a
variety of contexts, saving time and

328
00:17:29,109 --> 00:17:31,289
ensuring consistency across environments.

329
00:17:32,489 --> 00:17:35,049
Now that you've seen it all, let's
recap everything we've covered

330
00:17:35,109 --> 00:17:36,219
and the impact that it's had.

331
00:17:37,149 --> 00:17:39,709
First and foremost, the
consistent demo experience.

332
00:17:40,319 --> 00:17:44,299
By using a modular and layered
infrastructure built on Terraform and

333
00:17:44,299 --> 00:17:46,889
Kubernetes, we've removed a lot of
the friction that came with setting

334
00:17:46,889 --> 00:17:48,589
up one off environments for each demo.

335
00:17:49,319 --> 00:17:52,129
Now, no matter which region or
customer we're dealing with, we

336
00:17:52,129 --> 00:17:55,109
can spin up the same reliable
environment with minimal effort.

337
00:17:56,159 --> 00:18:00,269
Next, the platform is reflective of
our customers own infrastructure.

338
00:18:00,894 --> 00:18:04,434
From multi region deployments to the
integration of tools like Vault for Secret

339
00:18:04,434 --> 00:18:08,754
Managements and Istio for Service Mesh,
the environment mirrors what enterprise

340
00:18:08,754 --> 00:18:14,154
customers are using and what they're
using right now, which allows them

341
00:18:14,154 --> 00:18:15,544
to really see themselves in the demo.

342
00:18:16,159 --> 00:18:19,419
Which adds a lot of value and helps
them better understand how our

343
00:18:19,419 --> 00:18:21,439
solution fits into their own ecosystem.

344
00:18:22,579 --> 00:18:25,839
We've also implemented better
controls, particularly around security.

345
00:18:26,569 --> 00:18:31,129
Password list deployments, IAM
policies, and secret management with

346
00:18:31,199 --> 00:18:34,939
Vault mean that sensitive information
is handled automatically, securely,

347
00:18:34,949 --> 00:18:36,809
and with minimal human interaction.

348
00:18:37,524 --> 00:18:40,154
This setup aligns perfectly
with what customers expect in an

349
00:18:40,164 --> 00:18:43,724
enterprise setting, helping build
trust during the demo process.

350
00:18:44,944 --> 00:18:47,844
Beyond that, the adaptability and
portability of this environment

351
00:18:48,054 --> 00:18:49,544
have been real game changers.

352
00:18:49,884 --> 00:18:52,844
We can customize the deployment
for different customer use cases,

353
00:18:53,364 --> 00:18:56,014
or even hand it over to them
for sandbox or trial purposes.

354
00:18:56,284 --> 00:18:58,784
Something that would have been
impossible with our previous setup.

355
00:18:59,934 --> 00:19:03,954
This flexibility has opened up new doors
for how we engage with customers and

356
00:19:04,084 --> 00:19:05,724
accelerate their path to production.

357
00:19:06,914 --> 00:19:11,144
Finally, this process has allowed us
to streamline internal operations.

358
00:19:11,614 --> 00:19:14,834
The environment is not only more
efficient for demos, but has

359
00:19:14,834 --> 00:19:18,634
been widely adopted across teams,
reducing the need for manual setup.

360
00:19:19,179 --> 00:19:23,019
Improving speed and ensuring that
everyone has the access to the

361
00:19:23,029 --> 00:19:24,639
same high quality environment.

362
00:19:25,379 --> 00:19:29,559
In short, this architecture has
transformed how we deliver demos, making

363
00:19:29,559 --> 00:19:34,069
them more consistent, secure, and tailored
to the enterprise needs of our customers.

364
00:19:36,859 --> 00:19:37,779
And with that, we end.

365
00:19:38,574 --> 00:19:39,784
Thank you for joining us today.

366
00:19:39,854 --> 00:19:43,424
We hope this walkthrough gave you a clear
understanding of how our demo environment

367
00:19:43,424 --> 00:19:47,794
has evolved and the impact it's having
on how we deliver value to our customers.

368
00:19:48,514 --> 00:19:51,504
We're excited about what's ahead and
looking forward to seeing how this

369
00:19:51,504 --> 00:19:54,794
continues to improve our ability
to meet customer needs with greater

370
00:19:54,794 --> 00:19:57,694
consistency, security, and flexibility.

371
00:19:58,464 --> 00:20:01,084
Thanks again for your time, and we
hope you enjoyed the presentation.

