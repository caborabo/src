1
00:00:14,329 --> 00:00:15,660
Welcome to the conference.

2
00:00:16,110 --> 00:00:18,570
Welcome to building
developer driven platforms.

3
00:00:19,799 --> 00:00:24,300
I'm going to share some experiences,
some things that I've learned along

4
00:00:24,430 --> 00:00:26,170
the way and really excited about it.

5
00:00:26,480 --> 00:00:29,959
And I'm hoping that those things
that I've learned can help shape

6
00:00:29,970 --> 00:00:32,000
automation and UI for your platform.

7
00:00:33,660 --> 00:00:36,550
But before I convince you of all
of the things that I've learned,

8
00:00:36,550 --> 00:00:39,280
let me tell you about myself and
how I've learned these things.

9
00:00:39,940 --> 00:00:40,630
Elliot Clark.

10
00:00:40,700 --> 00:00:46,049
I'm the founder and CEO of Batteries
Included, an engineer at heart who's

11
00:00:46,049 --> 00:00:50,770
building on top of Kubernetes, a
source available product that we'll

12
00:00:50,790 --> 00:00:52,800
be releasing out of Stealth soon.

13
00:00:53,250 --> 00:00:55,840
I hope to have more to
tell you about that soon.

14
00:00:57,070 --> 00:01:00,710
But before founding Batteries Included,
I've done a lot of things and helped a

15
00:01:00,710 --> 00:01:05,470
lot of engineers build a lot of systems
that have given me a lot of, good lessons.

16
00:01:06,675 --> 00:01:10,464
I worked at Facebook where I
worked in ads, dev efficiency,

17
00:01:10,464 --> 00:01:12,535
and distributed, data stores.

18
00:01:13,885 --> 00:01:17,285
Before that I worked at Cloudera
where I was an open source

19
00:01:17,315 --> 00:01:19,524
committer to Apache HBase.

20
00:01:19,525 --> 00:01:24,415
I got to see open source be adopted by
enterprise and got to help them pull

21
00:01:24,695 --> 00:01:26,775
open source and really understand it.

22
00:01:26,915 --> 00:01:31,795
I've done a few startups before and
before those startups, I got to help

23
00:01:31,925 --> 00:01:37,465
other developers when I was at, Microsoft
building, C sharp tools and WPF.

24
00:01:38,045 --> 00:01:43,155
So I've really had a career of
helping engineers build systems,

25
00:01:43,425 --> 00:01:47,345
mostly distributed systems, but
lots of lots of good experiences

26
00:01:47,375 --> 00:01:51,365
of what can build the best, most
productive systems in the world.

27
00:01:51,990 --> 00:01:54,680
While we're thinking about a
developer driven platform and

28
00:01:54,680 --> 00:01:58,700
what a good one looks like, it's
helpful to have some goals, right?

29
00:01:58,700 --> 00:02:02,220
Some things to strive for,
things that we want to do better.

30
00:02:02,900 --> 00:02:06,640
Your goals and the things that
you want from your technology

31
00:02:06,640 --> 00:02:09,350
will obviously be very personal.

32
00:02:09,480 --> 00:02:13,450
It'll be something that your
company, your team, your project,

33
00:02:13,870 --> 00:02:15,600
feel, feels individually.

34
00:02:16,165 --> 00:02:21,245
But almost every platform at some
time will have these as goals or

35
00:02:21,245 --> 00:02:25,625
these will be part of their goals
or everyone will agree that a

36
00:02:25,625 --> 00:02:27,835
platform should include these, right?

37
00:02:27,835 --> 00:02:32,165
So we'll include these just as our generic
goals and you'll see how they mostly align

38
00:02:32,165 --> 00:02:34,655
with that, with your experiences, I hope.

39
00:02:35,915 --> 00:02:37,399
So for this platform, what's the goal?

40
00:02:37,700 --> 00:02:40,450
Let's try and strive for greatness, right?

41
00:02:41,100 --> 00:02:46,060
Let's try and help our users,
our developers build sustainable

42
00:02:46,060 --> 00:02:47,190
and maintainable software.

43
00:02:47,190 --> 00:02:47,650
That's good.

44
00:02:47,650 --> 00:02:52,520
Not just now, but is good for
the business in the future.

45
00:02:55,270 --> 00:03:00,740
And let's help them speed up so that
the time it takes from them having.

46
00:03:01,235 --> 00:03:07,235
Some thought, something they crazy idea
that they think might work to it, actually

47
00:03:07,245 --> 00:03:12,795
being out there in the world, how let's
make that faster, but let's also do that

48
00:03:12,815 --> 00:03:14,855
in a way that doesn't break things, right?

49
00:03:14,885 --> 00:03:19,835
Let's do that in a way that
keeps everything reliable.

50
00:03:19,865 --> 00:03:22,965
And anytime things are broken,
let's help them fix that.

51
00:03:23,315 --> 00:03:27,975
Fast so that we maintain that
reliability and that uptime, right?

52
00:03:27,975 --> 00:03:32,775
If we do that as a platform,
I think we've done well.

53
00:03:32,835 --> 00:03:34,095
we've sped everyone up.

54
00:03:34,095 --> 00:03:34,925
We've helped them.

55
00:03:34,925 --> 00:03:36,215
We've done good things.

56
00:03:38,505 --> 00:03:43,085
These goals though are often
seen as in conflict, right?

57
00:03:43,095 --> 00:03:46,275
The, how do I speed up developers?

58
00:03:48,775 --> 00:03:54,295
Is oftentimes in direct conflict with how
do I make sustainable software, right?

59
00:03:54,335 --> 00:03:55,705
I don't want to add metrics.

60
00:03:55,705 --> 00:03:56,755
I want to go faster.

61
00:03:56,755 --> 00:04:02,195
keeping things from breaking also
often means that you need to do extra

62
00:04:02,195 --> 00:04:06,315
work, which can be seen as slowing
down the time from idea to production.

63
00:04:08,085 --> 00:04:12,135
I think it's helpful to, to look
at times when things go wrong as

64
00:04:12,135 --> 00:04:17,095
a way for us to learn in where we
can make better platforms, right?

65
00:04:17,095 --> 00:04:20,015
Where we can make platforms
that really lead the way.

66
00:04:22,485 --> 00:04:25,555
So if we think about it, what's the
number one cause of incidents, right?

67
00:04:25,605 --> 00:04:27,455
what do platforms let through?

68
00:04:27,515 --> 00:04:29,295
what causes downtime?

69
00:04:29,355 --> 00:04:30,765
Overwhelmingly, there's

70
00:04:33,245 --> 00:04:39,495
one source, one big, giant
source, that's the root cause of

71
00:04:39,515 --> 00:04:44,315
most downtimes, of most, errors.

72
00:04:44,315 --> 00:04:52,015
There, there's one thing that kind of
changes and causes most of the incidents.

73
00:04:54,160 --> 00:04:55,020
It's developers.

74
00:04:55,020 --> 00:04:56,800
Developers are the root cause.

75
00:04:56,830 --> 00:05:00,240
We're the things that change the software.

76
00:05:00,670 --> 00:05:07,180
The, The hardware will add
one plus one almost forever.

77
00:05:08,820 --> 00:05:14,000
The software is where humans get involved
and it's where things often go wrong.

78
00:05:15,710 --> 00:05:19,830
So if we want to understand
and build a good platform, we

79
00:05:19,830 --> 00:05:20,990
have to dive deeper into it.

80
00:05:21,825 --> 00:05:26,775
into developers and how does
that risk come with them and

81
00:05:26,785 --> 00:05:27,745
how do we make it better?

82
00:05:28,355 --> 00:05:33,945
I think of the things that slip through
the cracks, the issues that come from

83
00:05:33,945 --> 00:05:40,185
developers as being in two buckets,
not understanding or not testing.

84
00:05:41,425 --> 00:05:43,925
let me explain what I
mean by both of those.

85
00:05:45,585 --> 00:05:50,995
For me, understanding is the grokking,
is the deep conceptual knowledge.

86
00:05:51,385 --> 00:05:59,015
The, you can explain every principle
of something to the scientific

87
00:05:59,015 --> 00:06:00,455
level where you can prove it.

88
00:06:02,175 --> 00:06:07,875
We don't often get to understand the
business problem, the distributed system,

89
00:06:07,885 --> 00:06:12,605
the edge cases in that kind of depth.

90
00:06:13,685 --> 00:06:18,265
So oftentimes instead of fully
understanding and enumerating

91
00:06:18,265 --> 00:06:25,025
every possible outcome and input,
we write tests that say, that

92
00:06:25,025 --> 00:06:29,375
test is green, so I am pretty sure
that everything is going to work.

93
00:06:30,365 --> 00:06:30,395
Right?

94
00:06:31,845 --> 00:06:36,615
. So there, there are two sides, two ways
to make it where you're sure that you've

95
00:06:36,615 --> 00:06:38,775
written something that is good software.

96
00:06:39,435 --> 00:06:40,755
and there's some give and take, right?

97
00:06:40,755 --> 00:06:45,045
You can't write a test without some
understanding, and in writing a test,

98
00:06:45,045 --> 00:06:47,955
you often gain more understanding.

99
00:06:47,955 --> 00:06:50,805
So there, there's a back and
forth of the two of them.

100
00:06:51,195 --> 00:06:55,585
So it's often really interesting
to bucket what went wrong

101
00:06:56,065 --> 00:06:57,595
into one of these two causes.

102
00:06:57,595 --> 00:06:59,395
So you can go back and
say, what should we do?

103
00:07:00,080 --> 00:07:04,850
Testing is a lot more than just,
you didn't write a unit test, right?

104
00:07:04,930 --> 00:07:09,550
Testing is, you didn't have an
integration test that tested those

105
00:07:09,560 --> 00:07:12,930
systems together and showed what
happens when things go wrong.

106
00:07:14,220 --> 00:07:19,890
It's, Not checking that you can
actually restore your backups.

107
00:07:19,990 --> 00:07:24,010
How recently have you made sure
that you're able to fail over to

108
00:07:24,010 --> 00:07:26,540
your redundant systems, right?

109
00:07:26,540 --> 00:07:30,370
There's a lot of testing to make sure
that things that you're never going

110
00:07:30,370 --> 00:07:35,760
to fully understand are still working
and still operating as you expect,

111
00:07:36,320 --> 00:07:38,340
but testing falls through the cracks.

112
00:07:38,905 --> 00:07:42,075
But oftentimes as developers
we're too eager to say, I can just

113
00:07:42,075 --> 00:07:46,155
write one more test when really
it's, we didn't understand, right?

114
00:07:46,515 --> 00:07:53,345
If you're holding the tool upside down,
unit tests after the fact won't help you.

115
00:07:53,475 --> 00:07:59,395
If you didn't know what winning and
losing looks like, it's really hard

116
00:07:59,415 --> 00:08:03,555
to write a unit test that says you
got a good result or a bad result.

117
00:08:04,425 --> 00:08:07,255
oftentimes, It's much
more than that, right?

118
00:08:07,455 --> 00:08:14,665
Knowing that we didn't have to
even try this very hard solution.

119
00:08:14,665 --> 00:08:19,905
We could have tried the much easier
thing over there is much more

120
00:08:19,905 --> 00:08:22,185
impactful and is much better, right?

121
00:08:22,185 --> 00:08:28,375
We didn't understand that this path
wasn't the one to take 10 choices ago.

122
00:08:28,955 --> 00:08:33,355
Or we didn't understand where this
path was going to lead us when we

123
00:08:33,355 --> 00:08:36,815
changed size or scale up or down.

124
00:08:37,565 --> 00:08:41,805
So with those kind of two buckets,
let's go through an exercise where

125
00:08:41,805 --> 00:08:43,975
we talk about one specific example.

126
00:08:44,885 --> 00:08:48,265
And in the example, we'll try and
just walk through what happens.

127
00:08:48,265 --> 00:08:48,675
And.

128
00:08:49,335 --> 00:08:49,905
And.

129
00:08:51,240 --> 00:08:55,070
figure out where the causes and the
things that we can do better are.

130
00:08:55,410 --> 00:08:58,890
And then we'll take that to use it
to learn to make a better platform.

131
00:09:01,860 --> 00:09:07,110
So for this example, we'll
choose just about any enterprise,

132
00:09:07,470 --> 00:09:11,680
setting where there's a new
product team coming on, right?

133
00:09:11,680 --> 00:09:15,480
The new product team is going to write
some new data to a database that's

134
00:09:15,480 --> 00:09:18,750
already existing and they need some help.

135
00:09:20,115 --> 00:09:31,315
So a junior or mid level DevOps engineer
joins the effort and writes a set of code.

136
00:09:32,165 --> 00:09:38,375
In that code, they add a user to
the database permissions list.

137
00:09:39,525 --> 00:09:43,655
And they say, Oh, I'm gonna, I know you
were going to be writing some more data.

138
00:09:43,985 --> 00:09:48,445
So let's make sure that we also
increase the size of production storage.

139
00:09:49,095 --> 00:09:50,095
thinking ahead.

140
00:09:50,945 --> 00:09:51,665
I like it.

141
00:09:52,175 --> 00:09:53,345
They're doing great things.

142
00:09:53,355 --> 00:09:56,745
They're making sure production is
going to be stable in the future.

143
00:09:59,555 --> 00:10:05,645
But in doing that, they make a mistake in
the production environment and they change

144
00:10:05,645 --> 00:10:08,065
the size to also include the wrong units.

145
00:10:08,075 --> 00:10:14,115
So rather than asking for a few
million bytes, they're asking for

146
00:10:14,115 --> 00:10:19,445
a few trillion gigabytes, right?

147
00:10:20,180 --> 00:10:22,730
But you say, don't worry,
we have a CI pipeline.

148
00:10:24,170 --> 00:10:26,660
So they test their change locally.

149
00:10:28,530 --> 00:10:30,280
They push the pull request out.

150
00:10:32,840 --> 00:10:36,700
All of the test environments
will pass because all of the test

151
00:10:36,700 --> 00:10:38,740
environments use a different size.

152
00:10:40,330 --> 00:10:43,570
Production is the only one
that has all of the data.

153
00:10:45,530 --> 00:10:46,530
Everything's green.

154
00:10:47,330 --> 00:10:52,410
So an engineer on the project
approves the pull request.

155
00:10:52,810 --> 00:10:54,340
They don't fully look at the code.

156
00:10:54,350 --> 00:10:56,690
They look at the green check marks.

157
00:10:59,250 --> 00:10:59,890
Off you go.

158
00:11:00,520 --> 00:11:03,300
Through the pipeline it goes,
it gets deployed to production.

159
00:11:05,250 --> 00:11:12,390
In the best case, this fails our
production pipeline and everything stops.

160
00:11:12,760 --> 00:11:16,860
No more developer changes can
make its way through our pipeline.

161
00:11:17,290 --> 00:11:19,660
Someone has to go debug the issue.

162
00:11:19,660 --> 00:11:20,175
Oh, shit.

163
00:11:20,555 --> 00:11:26,395
revert the change, start
other changes flowing forward.

164
00:11:26,625 --> 00:11:32,375
In the worst case, pods actually
go down and capacity issues happen.

165
00:11:33,075 --> 00:11:34,275
But we tested everything.

166
00:11:34,285 --> 00:11:36,015
We used automated CI.

167
00:11:37,435 --> 00:11:38,175
what's the cause?

168
00:11:38,195 --> 00:11:39,165
what went wrong?

169
00:11:40,115 --> 00:11:41,725
I think that's a really
interesting thought.

170
00:11:42,295 --> 00:11:43,835
Lots of things went wrong, right?

171
00:11:45,855 --> 00:11:48,985
I think one of the most
fundamental was that we had

172
00:11:49,995 --> 00:11:51,695
Two different changes together.

173
00:11:52,745 --> 00:11:55,205
Why did we have two
different changes together?

174
00:11:56,005 --> 00:12:00,985
Because it's much easier for developers
to put two different changes together

175
00:12:01,375 --> 00:12:07,215
so that the friction of testing and
deploy tools is only paid for once.

176
00:12:07,865 --> 00:12:10,475
they didn't fully understand the schema.

177
00:12:10,495 --> 00:12:13,405
When does it need, A
unit, when does it not?

178
00:12:13,465 --> 00:12:15,645
How many does the unit say?

179
00:12:15,645 --> 00:12:16,935
When is it applied?

180
00:12:17,535 --> 00:12:18,295
Those things.

181
00:12:21,085 --> 00:12:23,155
Our system didn't test for environments.

182
00:12:23,205 --> 00:12:24,315
It tested for

183
00:12:26,425 --> 00:12:30,275
production like environments,
but not exactly production.

184
00:12:32,515 --> 00:12:38,055
Other signals that didn't have anything
to do with the changing size or production

185
00:12:38,105 --> 00:12:43,815
were trusted much more than going and
looking at the code, because the green

186
00:12:43,815 --> 00:12:45,705
check marks said everything was good.

187
00:12:48,355 --> 00:12:52,655
The people who did the code review did
their best, but they're not experts in

188
00:12:52,665 --> 00:13:00,425
YAML or platforms or what will happen
if this is wrong, nor should they be.

189
00:13:01,055 --> 00:13:05,115
And then after everything went wrong,
we didn't have an understanding

190
00:13:05,125 --> 00:13:07,525
of What changed to roll back?

191
00:13:07,575 --> 00:13:10,295
What change caused problems?

192
00:13:11,275 --> 00:13:14,995
What problems were part of this
change and what change was good

193
00:13:15,015 --> 00:13:17,855
for other parts of the code?

194
00:13:18,905 --> 00:13:21,215
Our system didn't understand.

195
00:13:21,885 --> 00:13:27,075
With all of this going wrong, it feels
really easy to go write a bunch of

196
00:13:27,075 --> 00:13:29,385
tests that say this won't happen again.

197
00:13:29,985 --> 00:13:31,785
But I would say there's
something better we can do.

198
00:13:33,195 --> 00:13:39,235
There were two changes that they wanted
to make that were hard and scary.

199
00:13:39,905 --> 00:13:40,855
Can we make that better?

200
00:13:41,895 --> 00:13:46,285
Can we make that something
that's not hard and scary?

201
00:13:47,205 --> 00:13:48,125
yes, we can.

202
00:13:49,235 --> 00:13:50,365
We can make a tool for that.

203
00:13:52,345 --> 00:13:58,245
Can we make a tool to
add users to databases?

204
00:13:59,215 --> 00:13:59,655
Sure.

205
00:14:00,545 --> 00:14:03,465
I can make a UI that loads the YAML.

206
00:14:04,810 --> 00:14:11,270
knows the schema, will validate the
input, will ensure that we test the

207
00:14:11,270 --> 00:14:13,630
size changes in the correct environment.

208
00:14:16,000 --> 00:14:20,830
This will never happen again for
a size change or for a adding a

209
00:14:20,830 --> 00:14:24,880
user change because we've written
a tool that's automated that

210
00:14:24,880 --> 00:14:26,480
will never let this happen again.

211
00:14:28,710 --> 00:14:35,190
We can repeat that over and over again
to build ourselves a set of tools.

212
00:14:36,670 --> 00:14:38,760
Because we know the
inputs that are required.

213
00:14:38,760 --> 00:14:43,370
We know the changes that are scary
and we've constrained them in ways

214
00:14:43,380 --> 00:14:45,540
that they're not nearly as scary.

215
00:14:48,470 --> 00:14:51,710
I think this is a really
powerful way of taking

216
00:14:53,780 --> 00:14:58,760
the incidents that we find
and building new guardrails.

217
00:14:59,440 --> 00:15:00,370
you can't go crazy with it.

218
00:15:01,885 --> 00:15:07,145
You can't build guardrails and never
let any developer make some change.

219
00:15:09,525 --> 00:15:11,405
So we have to have some mental model.

220
00:15:11,415 --> 00:15:16,945
How do we think about when
we need a tool that will add

221
00:15:16,965 --> 00:15:19,365
automation and add some structure?

222
00:15:20,335 --> 00:15:26,155
And when do we let there be free flow
of developers moving things around?

223
00:15:26,815 --> 00:15:30,525
For me, I have a mental
model of rock climbers.

224
00:15:31,190 --> 00:15:35,480
you're a rock climber and you
want to go test yourself, test

225
00:15:35,480 --> 00:15:37,480
your grip strength, can I do this?

226
00:15:38,930 --> 00:15:39,770
You go bouldering.

227
00:15:41,340 --> 00:15:43,410
You go to your local bouldering gym

228
00:15:45,820 --> 00:15:50,860
and you climb one, two,
three meters into the air.

229
00:15:51,490 --> 00:15:54,300
If you fall, there's nothing to catch you.

230
00:15:54,880 --> 00:15:59,360
But you're following a small
distance on the padded floor.

231
00:16:01,620 --> 00:16:05,710
You have a small chance
of any, anything bad.

232
00:16:07,700 --> 00:16:08,330
That works great.

233
00:16:08,340 --> 00:16:12,440
No, no need for safety nets,
nothing to slow you down.

234
00:16:12,450 --> 00:16:16,350
No harnesses to keep you from
moving the way you want to.

235
00:16:16,990 --> 00:16:20,380
you start climbing the mountain,
you start going into production.

236
00:16:20,780 --> 00:16:22,900
You don't want to make
those changes as freely.

237
00:16:22,900 --> 00:16:24,230
You don't want to jump around.

238
00:16:24,260 --> 00:16:27,670
Do you want to have some safety
harnesses that it means everything's

239
00:16:27,670 --> 00:16:28,790
a little more controlled.

240
00:16:30,870 --> 00:16:33,500
The thing that's scary is when
you do that in production.

241
00:16:34,340 --> 00:16:35,530
Don't do that in production.

242
00:16:36,210 --> 00:16:40,130
if we take all of these things that
have gone wrong, these ways that we

243
00:16:40,130 --> 00:16:45,010
can see developers either needing help,
needing places where they can go faster,

244
00:16:46,420 --> 00:16:52,070
places where we can make a tool to
make things better or easier for them,

245
00:16:54,365 --> 00:16:55,885
We can all learn together, right?

246
00:16:55,885 --> 00:16:58,005
We can take the patterns that show up.

247
00:16:58,015 --> 00:17:02,215
We can take the things that are common
and say, Hey, those are industry

248
00:17:02,215 --> 00:17:04,235
wide, those are humanity wide.

249
00:17:04,255 --> 00:17:06,025
How can we learn from those?

250
00:17:06,025 --> 00:17:09,525
and for me, those are the
really interesting part.

251
00:17:09,625 --> 00:17:12,035
and so I just have kind
of four, four quick ones,

252
00:17:12,095 --> 00:17:14,815
They don't work for everybody, but
hopefully they'll work for you.

253
00:17:14,875 --> 00:17:18,255
the first is don't use modals
where you care about accuracy.

254
00:17:19,545 --> 00:17:21,715
Don't use pop ups where
you care about accuracy.

255
00:17:21,715 --> 00:17:26,735
Don't use them where you want
the user to think in depth.

256
00:17:28,065 --> 00:17:32,635
When you see a pop up, your initial
reaction is to try and make it go away.

257
00:17:33,105 --> 00:17:34,145
I want it to be done.

258
00:17:36,185 --> 00:17:41,325
So if we're designing platforms and we
say, here's a pop up that says, are you

259
00:17:41,325 --> 00:17:43,515
sure you want to delete this database?

260
00:17:44,125 --> 00:17:47,475
We're trying to make sure
that this is a safe thing.

261
00:17:48,135 --> 00:17:52,495
a user's reaction is going to be,
please make this pop up go away.

262
00:17:55,055 --> 00:18:00,350
So instead, if you want to encourage
safe UI, Don't use a modal for that.

263
00:18:00,380 --> 00:18:01,470
Use a full page.

264
00:18:01,510 --> 00:18:03,500
Ask them to read something.

265
00:18:03,510 --> 00:18:04,740
Ask them to scroll.

266
00:18:05,570 --> 00:18:06,310
Works very well.

267
00:18:09,270 --> 00:18:12,840
One of the other big things
is moving validation early

268
00:18:12,840 --> 00:18:14,590
and earlier into the cycle.

269
00:18:15,070 --> 00:18:19,190
Makes it so that validation
is skipped less often.

270
00:18:20,460 --> 00:18:28,220
Skipping or ignoring errors is one of the
biggest causes of issues of tech debt.

271
00:18:28,900 --> 00:18:38,210
And so if you want people to react and
react well to feedback, putting that

272
00:18:38,210 --> 00:18:42,790
feedback earlier and earlier into the
development cycle works really well.

273
00:18:42,970 --> 00:18:47,150
So rather than after commit hook,
tell them that field was wrong.

274
00:18:48,860 --> 00:18:52,900
added in a linter that's
running at code change time.

275
00:18:53,630 --> 00:18:57,770
The earlier you can get it into the
validation, the more you can put it into

276
00:18:57,770 --> 00:19:00,390
a UI that shows them that, the better.

277
00:19:01,090 --> 00:19:05,710
While you're building platforms or
while you're operating platforms,

278
00:19:06,700 --> 00:19:07,800
things are going to change.

279
00:19:07,800 --> 00:19:12,680
Things are going to, react to
new inputs, to new changes.

280
00:19:14,555 --> 00:19:22,045
Being able to go back and say who
changed what, when, is super critical.

281
00:19:23,535 --> 00:19:24,815
Showing people

282
00:19:27,085 --> 00:19:31,485
that users X, Y, and Z
changed these three things,

283
00:19:33,905 --> 00:19:43,885
just combined together makes it for an
amazing experience debugging, but also

284
00:19:43,885 --> 00:19:50,620
helps new developers while they're using
your platform, see what's happened before.

285
00:19:51,200 --> 00:19:58,430
Showing kind of the inner workings
of a platform helps so that the

286
00:19:58,430 --> 00:20:04,450
users never have to break into that
layer of abstraction because they

287
00:20:04,480 --> 00:20:09,420
understand just enough to know that
the abstraction is working well.

288
00:20:09,995 --> 00:20:14,665
So those are some of the patterns that
I've seen that I really think work well.

289
00:20:14,975 --> 00:20:19,185
I'd love to hear what UI patterns
you've seen, what you've seen that

290
00:20:19,195 --> 00:20:23,565
makes production better, what you've
seen that makes, development faster.

291
00:20:23,565 --> 00:20:29,220
and if any of these kind of solutions or
patterns sound good to you, We're building

292
00:20:29,230 --> 00:20:33,560
Batteries Included, a fair source, all
inclusive infrastructure platform, that,

293
00:20:33,650 --> 00:20:35,590
like I said, hopefully is releasing soon.

294
00:20:35,860 --> 00:20:42,630
you can sign up to get early access right
now on the website, or you can email me to

295
00:20:42,630 --> 00:20:45,430
get a personal demo and get early access.

296
00:20:45,720 --> 00:20:49,340
thank you very much for coming to the
talk and for coming for the conference.

297
00:20:49,340 --> 00:20:50,320
I hope you've had a good day.

298
00:20:50,890 --> 00:20:51,240
Bye bye.

