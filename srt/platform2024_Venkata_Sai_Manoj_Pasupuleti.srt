1
00:00:14,090 --> 00:00:16,619
Uh, my name is Pasupuleti.

2
00:00:17,340 --> 00:00:19,999
And today I'm going to talk about
harnessing micro fringes for building

3
00:00:20,000 --> 00:00:24,200
scalable, reliable and secure application.

4
00:00:25,190 --> 00:00:29,289
In today's fast paced digital
environment building scalable,

5
00:00:29,470 --> 00:00:34,220
reliable, and secure platforms for
complex work applications is crucial.

6
00:00:35,120 --> 00:00:40,659
And as these applications continue to
grow in complexity, traditional monolithic

7
00:00:40,659 --> 00:00:44,510
architectures often struggle to keep up,
leading to slower development cycles.

8
00:00:45,315 --> 00:00:49,145
scalability challenges, and a
higher risk of system wide failures.

9
00:00:50,635 --> 00:00:55,394
Microfrontends, to this topic, offers a
solution to this problem by breaking down

10
00:00:55,404 --> 00:01:01,074
these monolithic applications into spawner
self contained units, with each unit

11
00:01:01,375 --> 00:01:03,455
having its own independent life cycle.

12
00:01:03,455 --> 00:01:09,294
This modular approach not only simplifies
the development and maintenance, but also

13
00:01:09,294 --> 00:01:11,854
enhances the scalability of the system.

14
00:01:12,325 --> 00:01:16,425
Enabling teams to work on more
autonomously and efficiently.

15
00:01:16,914 --> 00:01:20,755
Today we'll deep dive into these micro
frontends, where we'll understand

16
00:01:20,764 --> 00:01:26,905
this core principles, exploring their
advantages, and discovering how they will

17
00:01:26,995 --> 00:01:33,535
empower us to build a scalable, reliable,
and maintainable web applications.

18
00:01:34,870 --> 00:01:35,300
Next slide.

19
00:01:36,300 --> 00:01:41,550
Firstly, let's start about start with
what are the challenges of the existing

20
00:01:42,359 --> 00:01:45,919
web applications with monolithic
architecture that are out there.

21
00:01:46,960 --> 00:01:50,289
If you see on this slide, on the right
hand side, you'll see a monolithic

22
00:01:51,009 --> 00:01:55,322
architecture based application
where you have the frontend layer,

23
00:01:55,322 --> 00:01:57,970
the web application layer, and
the integration layer, which is

24
00:01:58,000 --> 00:02:03,108
typically your GraphQL layer, and the
service layer, typically your Node.

25
00:02:03,108 --> 00:02:03,714
js.

26
00:02:04,725 --> 00:02:08,435
Java, Springboard application
or any Python or Rust based

27
00:02:08,435 --> 00:02:09,545
application that's out there.

28
00:02:10,034 --> 00:02:15,154
In a monolithic application, what
happens is all these three layers

29
00:02:15,224 --> 00:02:20,654
are combined into one particular
application and are distributed

30
00:02:20,695 --> 00:02:22,384
and scaled and deployed across.

31
00:02:23,084 --> 00:02:26,564
at this picture, let's try to
understand the limitations of this

32
00:02:26,574 --> 00:02:28,254
traditional monolithic architecture.

33
00:02:29,004 --> 00:02:32,744
Particularly, as these kind of
applications continue to grow in

34
00:02:32,744 --> 00:02:38,489
complexity, And the challenges that
we highlight below will show why we

35
00:02:38,489 --> 00:02:41,309
need to move towards Microfrontends.

36
00:02:41,769 --> 00:02:42,639
Why is it necessary?

37
00:02:43,899 --> 00:02:48,854
So the first one is tightly coupled code
bases and scaling issues In monolithic

38
00:02:48,854 --> 00:02:52,584
architecture, the front end, back end,
and the integration layers are often

39
00:02:52,584 --> 00:02:55,684
interwoven into one single codebase.

40
00:02:56,364 --> 00:03:01,104
This tight coupling makes it difficult
to scale the individual components.

41
00:03:01,844 --> 00:03:04,934
For example, if the back end API
layer, for example, here, the Node.

42
00:03:04,944 --> 00:03:10,424
js or the Spring Boot application,
if you start to see more application

43
00:03:10,434 --> 00:03:13,424
load towards the back end, because
there are more number of requests, or

44
00:03:13,654 --> 00:03:18,359
there is more complex logic that the
server needs to do, you We'll have to,

45
00:03:18,379 --> 00:03:21,589
what you typically do is you deploy
more instances of this application.

46
00:03:22,249 --> 00:03:26,239
But in this case, you can't deploy just
the backend API layer independently.

47
00:03:26,319 --> 00:03:30,669
You will have to deploy the entire
application because there's no other ways.

48
00:03:30,989 --> 00:03:37,789
This approach is inefficient, not just
inefficient, but it also is risky as

49
00:03:37,789 --> 00:03:41,619
it introduces unnecessary complexity
and the potential points of failure.

50
00:03:42,089 --> 00:03:43,039
During deployment.

51
00:03:44,499 --> 00:03:48,229
The second issue with this monolithic
architecture is the slow development

52
00:03:48,229 --> 00:03:49,299
and the deployment cycles.

53
00:03:50,719 --> 00:03:55,509
For example, imagine this case that you're
onboarding a new team member for him

54
00:03:55,639 --> 00:04:00,049
or her, the understanding of monolithic
system can be daunting because they need

55
00:04:00,059 --> 00:04:05,039
to get a complete grasp of the entire
application before they start contributing

56
00:04:05,119 --> 00:04:10,844
effectively with slow Here, productivity
also breaks down the team's velocity.

57
00:04:12,074 --> 00:04:16,034
Additionally, the complex nature
of the codebase means that changes

58
00:04:16,034 --> 00:04:21,854
in one area, for example, in the UI
layer, often requires comprehensive

59
00:04:21,924 --> 00:04:23,345
testing across the entire application.

60
00:04:23,345 --> 00:04:26,829
For instance, let's say you want
to deploy a small UI update.

61
00:04:27,279 --> 00:04:28,489
You can't do it in isolation.

62
00:04:28,489 --> 00:04:31,927
You'll have to test the entire
application from print and grab the

63
00:04:31,927 --> 00:04:35,839
integration layer in the backend
layer before you go ahead and deploy.

64
00:04:35,959 --> 00:04:40,109
So this delays the time
to market for any feature.

65
00:04:41,689 --> 00:04:45,479
The third main issue with monolithic
architecture is the cascading failures.

66
00:04:45,629 --> 00:04:49,719
For example, in a monolithic
architecture, a small change or a small

67
00:04:49,729 --> 00:04:54,829
bug in one part of the application
can cause unexpected issues elsewhere.

68
00:04:54,969 --> 00:05:02,024
For example, if you If there is a minor
bug in the authentication module, there

69
00:05:02,024 --> 00:05:05,494
is a very good chance it could affect
the user dashboard somewhere else.

70
00:05:06,014 --> 00:05:11,484
So this leads to cascading often gets
very difficult to find out where exactly

71
00:05:11,484 --> 00:05:12,764
is the root cause for this problem.

72
00:05:13,634 --> 00:05:18,924
And the lack of modularity increases
this wide risk of system outages and

73
00:05:19,334 --> 00:05:21,139
makes troubleshooting often difficult.

74
00:05:21,140 --> 00:05:28,949
The next main issue with monolithic
architecture is the lack of

75
00:05:28,959 --> 00:05:30,319
flexibility of technology.

76
00:05:30,499 --> 00:05:33,759
So what happens with monolithic
architecture is you often lock yourself

77
00:05:33,999 --> 00:05:37,909
into this specified technologies or
framework across the application.

78
00:05:38,739 --> 00:05:42,289
And this can be limiting because, for
example, let's say for part of your

79
00:05:42,299 --> 00:05:46,299
application, you want to use a different
technology or a different version of a

80
00:05:46,299 --> 00:05:48,009
given library, that gets very difficult.

81
00:05:49,324 --> 00:05:53,094
Because you are like tied up
to given technology framework

82
00:05:53,094 --> 00:05:54,454
and version across the app.

83
00:05:55,204 --> 00:05:56,474
in this architecture.

84
00:05:57,674 --> 00:06:00,584
The next one more issue that you
tend to see in this architecture

85
00:06:00,584 --> 00:06:03,444
is team coordination challenges.

86
00:06:03,474 --> 00:06:08,364
So as team continues to grow, coordinating
development between different teams,

87
00:06:08,474 --> 00:06:12,754
like within the team, this monolithic
architecture becomes very difficult.

88
00:06:13,544 --> 00:06:17,234
Teams working on different features
usually often step on Each of the

89
00:06:17,294 --> 00:06:20,994
stores leading to much complex
bottlenecks and CICD pipelines,

90
00:06:21,554 --> 00:06:23,254
and then overall a slow progress.

91
00:06:24,574 --> 00:06:29,934
This lack of ownership and modularity
can hinder a team's autonomy and

92
00:06:29,934 --> 00:06:31,454
reduce the developer velocity.

93
00:06:32,624 --> 00:06:36,694
So based on these challenges, it's
clear that we need a more modular

94
00:06:36,744 --> 00:06:40,294
and flexible and scalable approach
to build modern web applications.

95
00:06:40,754 --> 00:06:43,274
Like a for instance, comes to the rescue.

96
00:06:43,484 --> 00:06:47,894
Microfinance address these issues
by enabling teams to develop, test

97
00:06:47,924 --> 00:06:52,324
and deploy independent front end
modules, leading to faster delivery,

98
00:06:52,464 --> 00:06:55,114
reduced risk and enhanced scalability.

99
00:06:56,114 --> 00:06:58,604
On to the next slide, the
power of microfinance.

100
00:07:00,024 --> 00:07:01,924
So microfinance are a game changer.

101
00:07:02,399 --> 00:07:05,929
When it comes to building scalable,
reliable, and maintainable web

102
00:07:05,929 --> 00:07:11,049
applications, their effectiveness lies
in a core set of principles that define

103
00:07:11,079 --> 00:07:12,779
how we approach the modern development.

104
00:07:14,719 --> 00:07:19,019
If you see, for example, in the picture
over there at the right, the same

105
00:07:19,019 --> 00:07:23,969
monolithic application that you have
seen in the previous slide can be broken

106
00:07:23,979 --> 00:07:25,699
down into three different applications.

107
00:07:26,679 --> 00:07:27,579
For example, let's see.

108
00:07:27,619 --> 00:07:31,659
Let's take the example of, say,
Amazon, which is again Amazon.

109
00:07:31,954 --> 00:07:36,444
Uses micro front ends in its
application, so there could be an

110
00:07:36,444 --> 00:07:40,464
independent instead of the entire
Amazon application being built as

111
00:07:40,484 --> 00:07:42,524
one big application and deploying it.

112
00:07:43,714 --> 00:07:47,274
They do is like just the cart experience
that you see is a separate team.

113
00:07:48,744 --> 00:07:52,544
They might use react on the front end
and they might use Java at the back.

114
00:07:53,054 --> 00:07:54,594
Similarly, the main page, the amazon.

115
00:07:54,804 --> 00:07:56,094
com web page that you see.

116
00:07:56,834 --> 00:07:59,314
There could be a different team
that could be working on it.

117
00:07:59,654 --> 00:08:01,214
And similarly, the payment team.

118
00:08:01,714 --> 00:08:05,824
Similarly, search is being, like, that's
another thing that's working out of there.

119
00:08:06,454 --> 00:08:12,574
micro frontends, what happens is this
gives teams to work on different parts

120
00:08:12,574 --> 00:08:16,219
of the application independently and
deploy and make changes over there.

121
00:08:16,829 --> 00:08:18,349
micro frontends, what you get?

122
00:08:18,419 --> 00:08:21,269
You get independent
scalability and deployability.

123
00:08:21,489 --> 00:08:25,349
One of the greatest strengths of micro
frontends is their, like I was saying,

124
00:08:25,519 --> 00:08:28,119
the ability to operate independently.

125
00:08:28,769 --> 00:08:31,879
Wherein, each micro frontend
can be developed, tested,

126
00:08:32,029 --> 00:08:32,949
and deployed separately.

127
00:08:32,989 --> 00:08:37,379
Allow teams to, release new features
without impacting others applications.

128
00:08:38,234 --> 00:08:42,504
It seems how it feels, it seems like
a very well choreographed dance where

129
00:08:42,614 --> 00:08:47,185
each team moves in sync with other
without stepping on each other's toes,

130
00:08:47,224 --> 00:08:51,685
resulting in a faster, smoother, and
more frequent deployments across.

131
00:08:53,749 --> 00:08:55,989
Secondly, one more thing in
microfrontends are smaller

132
00:08:56,709 --> 00:08:58,339
codebases for faster development.

133
00:08:58,899 --> 00:09:03,699
So, to be breaking down of this huge
monolithic application into smaller

134
00:09:03,759 --> 00:09:07,949
manageable pieces, microfrontends reduce
the complexity of the overall codebase.

135
00:09:08,869 --> 00:09:13,589
This approach enables us for faster
development, as teams can focus

136
00:09:13,599 --> 00:09:18,129
only on their specific microfrontend
without team needing to understand

137
00:09:18,129 --> 00:09:19,749
or test the overall system.

138
00:09:20,009 --> 00:09:21,180
for making a deployment.

139
00:09:21,739 --> 00:09:26,489
This means that you can ship newer
features very fast and improve

140
00:09:26,509 --> 00:09:29,599
the significant time to market,
time to sync, eventually improve.

141
00:09:31,719 --> 00:09:34,729
The next thing is the, the
advantage for micro front end is

142
00:09:34,730 --> 00:09:37,108
the resilience and fault tolerance.

143
00:09:37,108 --> 00:09:43,249
One of the core features that micro
front end offers is complete decoupling.

144
00:09:43,849 --> 00:09:46,579
So basically, by decoupling
different parts of the application,

145
00:09:46,579 --> 00:09:49,816
Microfront can inherently build
this resilience and fault tolerance.

146
00:09:49,816 --> 00:09:54,063
If one component fails, let's say your
cart fails or your search fails, it

147
00:09:54,063 --> 00:09:55,883
doesn't bring down the entire Amazon.

148
00:09:55,883 --> 00:09:56,489
com website.

149
00:09:56,489 --> 00:10:00,859
Let's say your payment is having some
issue, you can still browse for the

150
00:10:00,859 --> 00:10:03,550
product, you can still add products
to the cart, whereas you might not

151
00:10:03,769 --> 00:10:06,930
be able to check out, but all the
other functionalities will go through.

152
00:10:07,874 --> 00:10:13,384
And, uh, this reducing the system risk
of the overall total system downtime

153
00:10:13,384 --> 00:10:19,794
and enhances the overall system
robustness technology agnosticism.

154
00:10:20,004 --> 00:10:24,514
Like I'm saying previously, with
Microshinton, the individual teams can

155
00:10:24,514 --> 00:10:26,244
choose the best tool for their job.

156
00:10:26,355 --> 00:10:30,745
like Amazon homepage might think,
oh, there's just too many re renders

157
00:10:30,745 --> 00:10:33,815
and everything that's happening
on my web page, let me use React.

158
00:10:33,815 --> 00:10:34,815
Whereas probably.

159
00:10:35,540 --> 00:10:38,680
The payment team might think, hey, okay,
for my application, what I'm trying

160
00:10:38,710 --> 00:10:40,550
to do, I can, I would rather use Vue.

161
00:10:40,550 --> 00:10:41,070
js.

162
00:10:41,580 --> 00:10:45,290
So this technology agnostic
approach allows teams to leverage

163
00:10:45,350 --> 00:10:48,420
their expertise or even it also
depends on the team composition.

164
00:10:48,490 --> 00:10:55,140
Let's say, most of the team members on the
particular project or the team knows Vue.

165
00:10:55,140 --> 00:10:55,900
js more than React.

166
00:10:55,900 --> 00:10:56,900
js or even Angular.

167
00:10:56,900 --> 00:11:00,230
js and they could go ahead and
build that particular application

168
00:11:00,230 --> 00:11:02,780
in the technology by choice or
they're most comfortable with.

169
00:11:03,200 --> 00:11:06,540
There's no Tying up of like you have
to use only this particular technology,

170
00:11:06,540 --> 00:11:07,820
this particular version, etcetera.

171
00:11:10,130 --> 00:11:13,840
Next thing is finally gives
you scalability at every level.

172
00:11:13,960 --> 00:11:15,330
It's not just at the application.

173
00:11:15,340 --> 00:11:17,380
It gives scalability
across the entire process.

174
00:11:18,040 --> 00:11:21,480
So microfinance does not offer
scalability, not in terms of technology,

175
00:11:21,480 --> 00:11:23,270
but also in terms of team structure.

176
00:11:23,330 --> 00:11:25,700
For example, as your
application team grows.

177
00:11:26,215 --> 00:11:29,765
You can scale your teams, each focusing
on different micro front ends without

178
00:11:29,865 --> 00:11:31,605
risking of creating this monolithic.

179
00:11:32,105 --> 00:11:32,805
What will add?

180
00:11:33,375 --> 00:11:37,755
This distributed approach of development
allows your organization to grow more

181
00:11:37,805 --> 00:11:43,645
organically, accommodating larger teams
and building more complex applications

182
00:11:43,955 --> 00:11:48,535
without sacrificing the performance or
the agility that you get in smaller teams.

183
00:11:50,540 --> 00:11:50,970
Next slide.

184
00:11:53,940 --> 00:11:57,240
So what do we need to keep in mind
when developing this microfrontend?

185
00:11:57,470 --> 00:11:58,400
What are the best practices?

186
00:11:58,650 --> 00:11:59,850
What are the architecture patterns?

187
00:12:00,500 --> 00:12:05,100
And what are the challenges that you
usually see or have to keep in mind when

188
00:12:05,170 --> 00:12:07,650
building such microfrontend applications?

189
00:12:07,660 --> 00:12:12,330
So the first choice you tend to
make is do you want to split your

190
00:12:12,330 --> 00:12:17,570
monolithic application either
vertically or horizontally?

191
00:12:18,050 --> 00:12:24,205
So what I mean by vertically is, for
example, Let's say in the example of,

192
00:12:24,535 --> 00:12:32,075
Amazon itself, let's say breaking it now,
like for example, let's say any e-commerce

193
00:12:32,075 --> 00:12:35,855
website, so for example, maybe it shows
you a list of products that they have.

194
00:12:35,885 --> 00:12:36,485
One page.

195
00:12:36,785 --> 00:12:39,755
One page like allows you to check
out which contains the card, and

196
00:12:39,755 --> 00:12:41,405
the third thing manages the payment.

197
00:12:42,045 --> 00:12:42,525
One way.

198
00:12:42,795 --> 00:12:47,575
Splitting it vertically would mean
that you would, the entire homepage

199
00:12:47,575 --> 00:12:49,905
will be owned by one team the entire.

200
00:12:50,640 --> 00:12:53,970
Card page will be owned by one team,
the entire payment team will open.

201
00:12:53,980 --> 00:12:58,060
So they'll own both their front
end and their back end services.

202
00:12:58,270 --> 00:13:01,120
Horizontal splitting would be,
for example, would be like, a

203
00:13:01,120 --> 00:13:04,370
team will own the entire UI, a
team will own the entire API.

204
00:13:04,890 --> 00:13:08,580
But typically, the vertical
splitting is more common.

205
00:13:08,715 --> 00:13:13,235
you see more often across the industry,
let's say, at IKEA or Spotify, where

206
00:13:13,795 --> 00:13:18,305
individual teams will maintain both their
front end UI layer and the back end layer

207
00:13:18,585 --> 00:13:20,465
for part, part of the functionality.

208
00:13:21,115 --> 00:13:21,665
Amazon.

209
00:13:21,705 --> 00:13:25,124
com, the home page will be on
both the UI and API workability.

210
00:13:25,445 --> 00:13:29,505
The carting UI and API will be
owned by one team and the payment UI

211
00:13:29,525 --> 00:13:30,965
and API will be owned by one team.

212
00:13:31,015 --> 00:13:32,375
So that's like vertical splitting.

213
00:13:32,935 --> 00:13:36,975
That's more, that's an architecture
pattern or how they've chosen it.

214
00:13:38,475 --> 00:13:42,815
Similarly, you also have to like, keep
in mind that you need to establish clear

215
00:13:42,865 --> 00:13:44,625
communication and contract boundaries.

216
00:13:45,455 --> 00:13:47,105
Ensure well defined APIs.

217
00:13:47,430 --> 00:13:50,340
for communication between micro
friend trends and this avoid

218
00:13:50,340 --> 00:13:51,570
state coupling between them.

219
00:13:51,810 --> 00:13:56,040
This also allows to iterate
independently as long as they

220
00:13:56,850 --> 00:13:58,910
adhere to this con contracts.

221
00:14:00,440 --> 00:14:03,560
So one, the challenge that is
there in Micro friend is caused

222
00:14:03,560 --> 00:14:06,110
microfinance communication and status.

223
00:14:06,700 --> 00:14:10,090
So previous need thought, the entire
application is one application.

224
00:14:10,730 --> 00:14:13,280
In monolithic application,
the entire application is one.

225
00:14:13,290 --> 00:14:16,470
So it's easier for components, one
component to talk to each other,

226
00:14:16,510 --> 00:14:18,100
the others, the other and all that.

227
00:14:18,120 --> 00:14:22,430
Now, since with micro frontends,
all of them are separate, are

228
00:14:22,850 --> 00:14:24,850
separated, are different applications.

229
00:14:24,890 --> 00:14:29,440
You need to be careful or be
cognizant of the fact that it's

230
00:14:29,440 --> 00:14:32,319
not pretty straightforward how the
components can talk to each other.

231
00:14:32,670 --> 00:14:36,420
So that's why we need to use well
defined API and use event driven

232
00:14:36,440 --> 00:14:40,670
architectures to manage the interaction
between these microfrontends.

233
00:14:41,410 --> 00:14:45,210
I would say probably look up tools
like, let's say, Event Puzzles,

234
00:14:45,240 --> 00:14:49,140
Global State Managers, or even like
top tier microspack and microservice

235
00:14:49,580 --> 00:14:52,660
to help this communication between
these two, these microfrontends.

236
00:14:53,950 --> 00:14:57,460
Another challenge or thing
to keep in mind is maintain

237
00:14:57,460 --> 00:14:59,180
consistency of user experience.

238
00:14:59,270 --> 00:15:03,120
so because there are different teams
working on different parts of the UI,

239
00:15:03,340 --> 00:15:08,830
you also need to make sure you also want
to make sure that all these experiences

240
00:15:08,850 --> 00:15:13,010
that we are building are cohesive and
they all feel like they belong to the

241
00:15:13,400 --> 00:15:15,090
same web application, the same page.

242
00:15:15,750 --> 00:15:21,195
So an idea how we could solve this
problem is You need to establish a

243
00:15:21,195 --> 00:15:26,595
comprehensive design system and enforce UI
UX guidelines across all the micro front

244
00:15:26,595 --> 00:15:30,995
end applications that you're building,
or even shared library user conference

245
00:15:30,995 --> 00:15:32,905
can also help maintain this consistency.

246
00:15:32,915 --> 00:15:37,385
So it feels to the user that, okay,
although this given web page, like amazon.

247
00:15:37,435 --> 00:15:41,065
com is being powered by, let's say,
10 different micro front ends, but it

248
00:15:41,285 --> 00:15:42,605
feels like one website to the user.

249
00:15:42,605 --> 00:15:43,595
It doesn't feel like, okay.

250
00:15:44,185 --> 00:15:46,345
The search doesn't look different.

251
00:15:46,385 --> 00:15:47,995
The homepage doesn't look different.

252
00:15:48,005 --> 00:15:50,375
The cart based doesn't
look different at all.

253
00:15:51,175 --> 00:15:53,405
Everything together looks like amazon.

254
00:15:53,635 --> 00:15:54,045
com.

255
00:15:54,115 --> 00:15:55,835
It does not feel like each of these pages.

256
00:15:56,755 --> 00:15:59,295
Each page is different or being
built by different, teams.

257
00:16:01,475 --> 00:16:03,355
The last one is security consoles.

258
00:16:04,875 --> 00:16:10,245
So because now all these applications
are being built by different teams

259
00:16:10,265 --> 00:16:15,260
and different developers, Ensuring
consistent security practices across

260
00:16:15,260 --> 00:16:17,960
the entire application is important.

261
00:16:18,500 --> 00:16:22,630
So we need to develop a unified
strategy that includes secure

262
00:16:22,640 --> 00:16:26,500
communication, consistent authentication,
and authorization practices.

263
00:16:26,880 --> 00:16:32,030
And each of these micro frontends should
adhere to the same security standards to

264
00:16:32,030 --> 00:16:34,846
avoid any vulnerability across the slides.

265
00:16:34,846 --> 00:16:37,594
Finally, in summary, what
are these micro frontends?

266
00:16:38,104 --> 00:16:42,474
micro frontends help down, break down
large monolithic web applications into

267
00:16:42,554 --> 00:16:47,574
smaller independent users, allowing
for modularity and scalability.

268
00:16:48,154 --> 00:16:49,284
what are its key benefits?

269
00:16:50,034 --> 00:16:52,804
Main benefits are independent scalability.

270
00:16:53,074 --> 00:16:57,104
Teams can develop, test and deploy
these micro frontends independently,

271
00:16:57,914 --> 00:16:59,734
leading to faster release
cycles and better scalability.

272
00:17:02,019 --> 00:17:05,959
Faster deployment cycles, because now
that you have smaller code base, results

273
00:17:05,959 --> 00:17:11,559
in quicker development and deployment
cycles, enabling rapid future updates.

274
00:17:12,709 --> 00:17:13,459
Reliability.

275
00:17:13,979 --> 00:17:17,959
in one micro frontend, like I was
saying, will not affect the entire

276
00:17:17,959 --> 00:17:21,369
application, enhancing the overall
system reliability and security.

277
00:17:22,359 --> 00:17:24,149
Technology agnosticism.

278
00:17:24,649 --> 00:17:27,629
teams can use different technologies
for different micro frontends,

279
00:17:28,439 --> 00:17:30,859
promoting flexibility and innovation.

280
00:17:31,454 --> 00:17:34,514
Teams can work in technologies
that they're most comfortable

281
00:17:34,514 --> 00:17:35,514
in and they're stronger.

282
00:17:37,324 --> 00:17:39,834
So what are the best practices
and challenges that you need to

283
00:17:39,834 --> 00:17:43,354
keep in mind while designing this
application are, you need to choose

284
00:17:43,354 --> 00:17:44,604
the right architecture pattern.

285
00:17:44,804 --> 00:17:49,284
Like I was saying, you either choose
the vertical splits or the horizontal,

286
00:17:49,574 --> 00:17:51,084
how you, or the horizontal splits.

287
00:17:51,344 --> 00:17:55,654
So how you want to break down your
overall monolithic application into parts.

288
00:17:55,694 --> 00:18:00,034
So you also need to establish this
clear communication, where to define

289
00:18:00,034 --> 00:18:01,984
the CPI contracts and maintain it.

290
00:18:02,309 --> 00:18:06,259
The shared libraries for all the
applications to use ensure consistency.

291
00:18:06,259 --> 00:18:10,559
That's a huge thing because For the
customer or the user, whoever is

292
00:18:10,569 --> 00:18:14,419
coming to our web page, we need to make
sure that they don't get a feed that

293
00:18:14,429 --> 00:18:16,979
they call for the kind of given page.

294
00:18:17,549 --> 00:18:20,199
It looks like four different
web applications are stitched

295
00:18:20,199 --> 00:18:23,689
together on one page and they
feel or look or work differently.

296
00:18:23,719 --> 00:18:24,869
So that should not happen.

297
00:18:26,569 --> 00:18:30,709
Few real world examples of like really
huge companies that have embraced this

298
00:18:30,709 --> 00:18:35,529
methodology and are using as of today, for
example, a few of them could be Spotify,

299
00:18:35,579 --> 00:18:40,005
Amazon, I key, tens of a few examples that
are out there that have been using and

300
00:18:40,005 --> 00:18:42,035
I've been spearheading, this technology.

301
00:18:43,075 --> 00:18:44,295
So what are my final thoughts?

302
00:18:44,725 --> 00:18:48,675
So micro front ends offer a powerful
approach to building scalable.

303
00:18:48,940 --> 00:18:53,940
maintainable web applications, but
require careful planning and execution.

304
00:18:54,850 --> 00:18:58,409
Embrace the modularity, leverage
the best practices, and address the

305
00:18:58,409 --> 00:19:03,110
challenges proactively to maximize
the benefits of microfrontends.

306
00:19:04,120 --> 00:19:04,630
Thank you all.

307
00:19:04,660 --> 00:19:08,320
Thank you so much for taking
the time to join me today to go

308
00:19:08,320 --> 00:19:12,250
over this microfrontend based
architecture based presentation.

309
00:19:12,590 --> 00:19:13,050
Thank you all.

