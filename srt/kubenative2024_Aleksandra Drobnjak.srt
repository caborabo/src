1
00:00:14,520 --> 00:00:15,240
Hi, everyone.

2
00:00:15,350 --> 00:00:20,530
First of all, thank you all for joining
the CONF42 Kube Native 2024 conference,

3
00:00:20,870 --> 00:00:25,880
and a big thanks to Mark Pawlikowski for
hosting this event and accepting my talk.

4
00:00:26,540 --> 00:00:28,020
My name is Aleksandra Drobnyak.

5
00:00:28,070 --> 00:00:32,870
I work as a customer solutions engineer
at Sysdig, and in today's around 30 minute

6
00:00:32,870 --> 00:00:38,270
session, I'm going to show you how you can
use open source Project Falco Sidekick to

7
00:00:38,270 --> 00:00:40,700
detect threats in Kubernetes workloads.

8
00:00:41,080 --> 00:00:44,810
I'll provide some initial context
using slides, after which we'll

9
00:00:44,810 --> 00:00:46,660
jump into the lab environment.

10
00:00:49,350 --> 00:00:50,530
A little bit about me.

11
00:00:50,730 --> 00:00:54,479
I have a technical background in
telecommunications and I've been working

12
00:00:54,489 --> 00:00:56,690
for 10 years in various engineering roles.

13
00:00:57,280 --> 00:01:01,460
At the time when I completed my electrical
engineering master's degree, cloud

14
00:01:01,460 --> 00:01:06,110
computing and container technology weren't
covered by any of the programs, and I

15
00:01:06,160 --> 00:01:08,429
totally side quested into these fields.

16
00:01:08,525 --> 00:01:13,535
as a hobby by following along content
creators such as Network Chuck and

17
00:01:13,535 --> 00:01:17,045
doing the training on platforms
such as RangeForce and TryHackMe.

18
00:01:17,724 --> 00:01:22,404
I'd say a major lesson here would
be to never stop learning, invest in

19
00:01:22,404 --> 00:01:28,204
yourself, and find an ethical hobby with
a great return on investment potential.

20
00:01:29,924 --> 00:01:34,374
From this slide, you can conclude
how I enjoy spending some of my time

21
00:01:34,684 --> 00:01:36,224
and where you can find me online.

22
00:01:36,729 --> 00:01:41,679
From making YouTube walkthroughs, blog
writing, participating in AWS Community

23
00:01:41,679 --> 00:01:45,679
Builder and Cisco Insider Champion
Communities, and staying current

24
00:01:45,699 --> 00:01:47,589
with cloud and Kubernetes security.

25
00:01:48,319 --> 00:01:52,229
Right now, I'm going after
Success Coachings, Customer

26
00:01:52,229 --> 00:01:56,034
Success Manager certification,
So it's never a dull moment.

27
00:01:56,944 --> 00:02:00,944
And if any of these I've mentioned
so far sparked your interest,

28
00:02:01,244 --> 00:02:04,644
connect with me on LinkedIn and
we can continue the conversation.

29
00:02:05,644 --> 00:02:10,024
Speaking on ROI, cloud and
Kubernetes are currently known as

30
00:02:10,024 --> 00:02:11,794
fields with great opportunities.

31
00:02:12,005 --> 00:02:15,204
that connect you with the most
amazing people and pay well.

32
00:02:16,135 --> 00:02:20,694
Cloud and Kubernetes go great hand in
hand, from creating highly available

33
00:02:20,694 --> 00:02:24,944
and resilient services, working on
internal developer platforms, to

34
00:02:25,004 --> 00:02:27,314
innovating with large language models.

35
00:02:28,064 --> 00:02:33,134
You will frequently find that applications
served on public cloud are behind

36
00:02:33,134 --> 00:02:35,434
the scenes, built using Kubernetes.

37
00:02:36,934 --> 00:02:41,995
So in this day and age and economy, that's
something you can expect to see and hear.

38
00:02:42,415 --> 00:02:46,095
Cloud and Kubernetes skills wanted
across software and security

39
00:02:46,105 --> 00:02:49,155
engineering, sales and customer success.

40
00:02:50,145 --> 00:02:53,945
Related to my badges from the
previous slide, here I highlighted

41
00:02:54,015 --> 00:02:57,985
open job roles from these vendors,
including my employer Sysdig.

42
00:02:59,205 --> 00:03:03,925
So this is something for motivation to
start looking into Kubernetes and cloud.

43
00:03:04,600 --> 00:03:09,370
because the times are hybrid and
it's not very realistic to center

44
00:03:09,380 --> 00:03:13,790
your technical skill set solely
around services that work on premise.

45
00:03:14,790 --> 00:03:19,500
So let's say that any service that
has to be developed and offered to a

46
00:03:19,500 --> 00:03:22,060
wide audience should be secured too.

47
00:03:22,840 --> 00:03:27,710
In cloud security, there is this concept
of cloud native application protection

48
00:03:27,710 --> 00:03:33,760
platforms, CNAP solutions capable of
securing infrastructure and applications.

49
00:03:34,400 --> 00:03:39,340
Whether based on full blown virtual
machines or microservices, from the

50
00:03:39,340 --> 00:03:44,170
moment of their local development,
while still being available only in

51
00:03:44,170 --> 00:03:49,290
manifest files, to their runtime, where
you can actually access an application

52
00:03:49,320 --> 00:03:52,340
serving a certain web page live.

53
00:03:54,420 --> 00:03:59,280
Not all malicious actors will rely on
common vulnerabilities and exposures,

54
00:04:00,870 --> 00:04:06,480
CVs for short, to cause damage and gain
unauthorized access to our offering.

55
00:04:07,120 --> 00:04:11,500
Some might try to leverage
identities not being configured

56
00:04:11,560 --> 00:04:16,405
according to the least privileged
practice and Compliance failures.

57
00:04:16,925 --> 00:04:22,285
When we rely on reports as snapshots
in time to prove our offering's

58
00:04:22,335 --> 00:04:26,685
adherence to industry's best
practices and relevant benchmarks.

59
00:04:28,115 --> 00:04:31,065
And then, there could
be insider threats too.

60
00:04:32,285 --> 00:04:36,295
Using a job relevant analogy,
it's like a candidate who looks

61
00:04:36,325 --> 00:04:40,045
good on paper, interviews well,
and gets inside the company.

62
00:04:40,380 --> 00:04:42,320
But has a malicious intent.

63
00:04:43,140 --> 00:04:46,860
So this is where threat detection
is of utmost importance.

64
00:04:47,820 --> 00:04:52,350
Speaking from my personal experience
working with Sysdig Secure CNAP, its

65
00:04:52,350 --> 00:04:56,710
threat detection engine is based on
an open source Falco project capable

66
00:04:56,770 --> 00:05:01,370
of detecting early indicators of an
attack in containerized environments,

67
00:05:01,780 --> 00:05:06,410
such as using reconnaissance scripts,
or other malicious actions across

68
00:05:06,410 --> 00:05:12,870
MITRE ATT& CK framework as obfuscation,
privilege escalation, log deletion,

69
00:05:13,250 --> 00:05:18,480
downloading binaries to containers,
exfiltration attempts, shell history

70
00:05:18,480 --> 00:05:24,620
deletion, bulk renaming and recreating
files extensions, and other actions

71
00:05:24,690 --> 00:05:26,830
connected with ransomware campaigns.

72
00:05:27,830 --> 00:05:28,820
A bit on Falco.

73
00:05:29,210 --> 00:05:34,030
Falco is, as of this year, a CNCF
graduated project, meaning it's

74
00:05:34,030 --> 00:05:38,310
considered stable and it's used
successfully in production environments.

75
00:05:39,260 --> 00:05:42,220
Not going deep into
architecture weeds right now.

76
00:05:42,260 --> 00:05:46,440
For this session, just know that Falco
hooks into the Linux kernel via a

77
00:05:46,450 --> 00:05:53,400
driver, either a kernel module or an
eBPF probe, and can collect system calls.

78
00:05:53,995 --> 00:05:59,045
All these events are parsed from
kernel space to user space where

79
00:05:59,045 --> 00:06:03,525
Falco rules, which are essentially
filters of your interest, are applied.

80
00:06:04,625 --> 00:06:08,845
And the final outputs can be
delivered to certain locations.

81
00:06:10,235 --> 00:06:15,515
Falco can associate each kernel event
with the exact container attribute, like

82
00:06:15,575 --> 00:06:21,375
container ID, name, image repository,
tags, as well as Kubernetes attributes.

83
00:06:22,005 --> 00:06:24,095
Such as namespace or a pod name.

84
00:06:25,315 --> 00:06:29,695
And on the right side, there is
an example of a microservice based

85
00:06:29,725 --> 00:06:33,995
architecture leveraging Falco to
understand what is causing anomalies

86
00:06:34,725 --> 00:06:36,355
within a Kubernetes cluster.

87
00:06:37,545 --> 00:06:43,075
So when speaking innovation, container
runtime insights are important to consider

88
00:06:43,075 --> 00:06:48,405
Because traditional security tooling
for event management wasn't built with

89
00:06:48,445 --> 00:06:54,065
potential malicious Kubernetes events
and short lived container logs in mind.

90
00:06:55,065 --> 00:06:58,775
Falco is usually associated with
a command line, but there is this

91
00:06:58,775 --> 00:07:02,635
public page as seen on the left
and middle part of the slide, where

92
00:07:02,635 --> 00:07:08,775
you can conveniently Falco rules in
detail, including rules description.

93
00:07:09,290 --> 00:07:14,200
Condition when the role will be
triggered, output content, and rule tags.

94
00:07:15,440 --> 00:07:20,640
On the right, SysTex 2024 Cloud
Native Security and Usage Report

95
00:07:20,970 --> 00:07:23,270
lists top triggered detections.

96
00:07:23,770 --> 00:07:28,600
In any environment where containerized
workloads are being experimented with.

97
00:07:29,020 --> 00:07:34,370
locally or served publicly, there
should be tooling in place to detect and

98
00:07:34,400 --> 00:07:37,110
potentially safeguard from such actions.

99
00:07:37,110 --> 00:07:37,510
Falco

100
00:07:40,290 --> 00:07:44,230
natively provides just a handful
of destinations for its outputs,

101
00:07:44,720 --> 00:07:49,510
and this is where Falco Sidekick
open source project comes in handy.

102
00:07:49,830 --> 00:07:54,050
It can fan out Falco's output
to over 60 destinations.

103
00:07:54,315 --> 00:08:00,755
across web, chat ops, logging, streaming,
alerting, and observability platforms.

104
00:08:01,755 --> 00:08:08,735
As for the web output for Falco Sidekiq,
there is Falco Sidekiq UI, a user

105
00:08:08,735 --> 00:08:14,555
friendly way to track Falco events
across triggered rules, event severities,

106
00:08:15,055 --> 00:08:20,485
tags of interest, and comes with
Swagger documentation for API queries.

107
00:08:21,485 --> 00:08:25,155
So that would be the core of our thread
detection hands on lab for today.

108
00:08:25,555 --> 00:08:30,795
The link here and QR code we will send
you to a Google Drive to download the

109
00:08:30,795 --> 00:08:34,805
virtual machine pre installed with
all the tools for today's session.

110
00:08:36,405 --> 00:08:41,095
Let's say the last few words on the
lab environment and then start the VM.

111
00:08:42,095 --> 00:08:47,895
VM's operating system is Kali Purple, a
community project focused on defensive

112
00:08:47,895 --> 00:08:53,285
tooling structured around the NIST
cybersecurity framework to identify,

113
00:08:53,345 --> 00:08:56,545
protect, detect, respond, and recover.

114
00:08:57,175 --> 00:09:00,855
The project aims to become the
most comprehensive security

115
00:09:00,855 --> 00:09:02,645
operations center in a box.

116
00:09:02,870 --> 00:09:03,870
kind of solution.

117
00:09:06,550 --> 00:09:12,010
On top of Kali Purple, first
installed are several tools to easily

118
00:09:12,010 --> 00:09:14,260
manage local Kubernetes cluster.

119
00:09:14,820 --> 00:09:21,100
And in the cluster, Kubernetes Goat as an
interactive learning platform with real

120
00:09:21,110 --> 00:09:26,980
world Kubernetes misconfigurations is
spun up and we will leverage one of its

121
00:09:26,980 --> 00:09:30,080
scenarios for Falco sidekick detection.

122
00:09:31,080 --> 00:09:35,700
Was created to document offensive
and defensive Kubernetes techniques

123
00:09:36,110 --> 00:09:40,960
inspired by Microsoft's Kubernetes
threat matrix, which provides a

124
00:09:40,970 --> 00:09:46,760
framework for understanding Kubernetes
tactics in a MITRE ATT& CK style.

125
00:09:47,940 --> 00:09:54,780
While the Microsoft Threat Matrix focuses
on educating around Kubernetes tactics,

126
00:09:54,780 --> 00:10:00,660
techniques, and procedures through
definitions, KubeNomicon expands on it

127
00:10:01,010 --> 00:10:06,730
by aiming to offer practical commands
for both exploiting and defending against

128
00:10:06,780 --> 00:10:09,190
attacks in Kubernetes environments.

129
00:10:10,480 --> 00:10:14,920
For example, some of the tools that
can be used to enumerate a Kubernetes

130
00:10:14,960 --> 00:10:17,870
environment are Nmap and Metasploit.

131
00:10:20,110 --> 00:10:25,480
We will also use Atomic Red Team
containerized project to simulate real

132
00:10:25,480 --> 00:10:31,150
world attacks aligned with MITRE ADT and
CK framework in a Kubernetes environment.

133
00:10:31,900 --> 00:10:37,340
These Atomics tests are in general
immensely helpful to refine and enhance

134
00:10:37,390 --> 00:10:40,660
coverage by addressing any detection gaps.

135
00:10:41,935 --> 00:10:46,465
As we trigger Atomics test, we
will monitor Falco Sidekick UI

136
00:10:46,475 --> 00:10:48,405
for real time thread detection.

137
00:10:49,405 --> 00:10:51,245
Now, let's switch to the VM.

138
00:10:53,335 --> 00:10:55,895
Okay, now this is the login
screen you expect to see when

139
00:10:55,895 --> 00:10:57,275
you boot up the virtual machine.

140
00:10:57,445 --> 00:11:02,639
If it doesn't work from the first
time, shut it down and boot it

141
00:11:02,639 --> 00:11:04,975
up again until you get to this.

142
00:11:05,685 --> 00:11:08,255
Login panel and enter credential sidekick,

143
00:11:11,095 --> 00:11:11,975
same password.

144
00:11:14,415 --> 00:11:17,855
So now for the sake of time, I
already went through a couple

145
00:11:17,855 --> 00:11:19,685
of system setting up commands.

146
00:11:19,685 --> 00:11:21,035
I'll walk you quickly through.

147
00:11:22,125 --> 00:11:26,935
So when you first boot up the system,
you will run command groupctl get pods.

148
00:11:27,515 --> 00:11:28,895
through all namespaces.

149
00:11:29,315 --> 00:11:33,495
And you'll see this kind of output,
unable to connect to the server.

150
00:11:33,505 --> 00:11:36,105
That means that you
have to start Minikube.

151
00:11:36,435 --> 00:11:39,645
So I'm running this virtual
machine with over 20 GB of RAM.

152
00:11:41,165 --> 00:11:46,305
Add at maximum 2 GB less
than the virtual machine has.

153
00:11:47,095 --> 00:11:49,194
So in my case that's 16 GB.

154
00:11:49,195 --> 00:11:53,235
Try not to go less than 8 GB.

155
00:11:53,875 --> 00:11:57,465
And at least to vcpu for
the whole virtual machine.

156
00:11:58,415 --> 00:12:03,165
Then after that, you'll check again,
kubectl get pods, and wait a bit

157
00:12:03,225 --> 00:12:09,325
to see okay, now we get a different
output, and we can notice majority of

158
00:12:09,375 --> 00:12:11,235
pods we expect to see in the running.

159
00:12:11,735 --> 00:12:15,655
Something to notice is that a couple
of pods in the default namespace

160
00:12:15,695 --> 00:12:19,965
that are coming through Kubernetes
Goat project are in error state.

161
00:12:20,315 --> 00:12:25,035
So from previous experience what
resolves this issue is to tear down

162
00:12:25,035 --> 00:12:27,595
the project and set it up again.

163
00:12:28,095 --> 00:12:30,735
Commands to do that are
into documents directory.

164
00:12:33,570 --> 00:12:36,730
In the documents directory,
you will notice a directory

165
00:12:36,730 --> 00:12:39,030
kubernetes goat over there.

166
00:12:39,330 --> 00:12:40,930
There are a couple of commands.

167
00:12:41,120 --> 00:12:42,530
First, you'll run the teardown.

168
00:12:43,380 --> 00:12:46,710
Then when that finalizes,
you'll run the setup one.

169
00:12:47,300 --> 00:12:49,990
And when that finalizes,
you'll check the pod status.

170
00:12:50,020 --> 00:12:51,340
All should be in running state.

171
00:12:51,370 --> 00:12:53,740
And then you'll run the access command.

172
00:12:54,100 --> 00:12:54,980
So teardown,

173
00:12:55,980 --> 00:12:56,970
then setup,

174
00:12:57,970 --> 00:12:59,230
check the pod status.

175
00:13:01,760 --> 00:13:02,299
All are running.

176
00:13:02,520 --> 00:13:06,320
In running state, then access
and you'll be provided with

177
00:13:06,320 --> 00:13:09,890
the local URL to access it.

178
00:13:12,800 --> 00:13:15,610
Okay, it works locally, that's great.

179
00:13:16,060 --> 00:13:18,330
We'll later use one scenario from here.

180
00:13:19,350 --> 00:13:23,010
And for the Falco Sidekick
UI, you'll run this command

181
00:13:25,180 --> 00:13:29,110
to be able to access the web UI locally.

182
00:13:30,365 --> 00:13:34,925
So do we have, yeah here I
bookmarked relevant projects.

183
00:13:35,405 --> 00:13:35,795
You.

184
00:13:37,035 --> 00:13:43,045
can dig deeper into after
this fast paced session.

185
00:13:45,195 --> 00:13:47,925
So for the Falco sidekick
UI, we'll use this URL.

186
00:13:49,435 --> 00:13:50,105
Okay, great.

187
00:13:50,145 --> 00:13:51,125
Now it works.

188
00:13:51,745 --> 00:13:56,114
Default credentials are admin, admin.

189
00:13:58,095 --> 00:14:05,575
Okay, now we see some rules
triggering from my previous work.

190
00:14:07,250 --> 00:14:11,240
But this is something to
expect to see in the UI.

191
00:14:11,250 --> 00:14:17,700
So Falco Sidekick UI is just one
of the 60 plus possible output

192
00:14:17,700 --> 00:14:20,290
destinations for Falco Sidekick.

193
00:14:20,690 --> 00:14:24,890
So any output from Falco Sidekick
you can forward to, for example,

194
00:14:24,890 --> 00:14:26,580
another SIEM tool, let's say.

195
00:14:26,970 --> 00:14:29,504
But for this session, we'll move on.

196
00:14:29,615 --> 00:14:36,505
Keep our focus on Falco Sidekick UI
and we'll monitor reported events here.

197
00:14:37,505 --> 00:14:39,125
Okay, let's now try

198
00:14:40,125 --> 00:14:43,505
from KubeNomicon one simple
scenario to see if Falco

199
00:14:44,825 --> 00:14:47,915
Sidekick UI reports on the event.

200
00:14:48,850 --> 00:14:51,960
From, let's say, execution
section, exec inside container.

201
00:14:52,970 --> 00:14:55,530
And here we are provided
with a practical command.

202
00:14:55,540 --> 00:15:02,170
We don't expect to see in Microsoft,
as we said, Kubernetes threat metrics.

203
00:15:03,170 --> 00:15:08,380
So let's say we'll exec into one
of the available pods over here.

204
00:15:08,775 --> 00:15:14,574
Let's pick one from the, let's say,
secure middleware namespace, this pod.

205
00:15:15,574 --> 00:15:16,804
Let's adjust command a bit.

206
00:15:16,874 --> 00:15:19,414
We have to add a specific namespace

207
00:15:20,414 --> 00:15:21,984
and the pod name is this one.

208
00:15:22,984 --> 00:15:25,724
And let's monitor Falco sidekick UI

209
00:15:28,534 --> 00:15:30,584
for when we exec into the pod.

210
00:15:31,584 --> 00:15:32,944
Okay, it's now reported.

211
00:15:33,014 --> 00:15:35,074
Terminal shell we see in container.

212
00:15:35,404 --> 00:15:40,914
So with the default rules, Falco
rules installed this command is

213
00:15:41,174 --> 00:15:46,764
recognized and you can see here
bookmarked additional Falco training.

214
00:15:46,764 --> 00:15:47,274
Thank you.

215
00:15:50,219 --> 00:15:50,869
This is a link.

216
00:15:50,869 --> 00:15:51,279
Okay.

217
00:15:51,319 --> 00:15:55,439
Here you can find courtesy of Sysdig
free Falco training that should

218
00:15:55,439 --> 00:15:58,019
enable you to create your own rules.

219
00:15:59,019 --> 00:16:02,159
Next, for the sake of time, let's
switch quickly to Kubernetes

220
00:16:02,159 --> 00:16:05,709
code and let's try one scenario.

221
00:16:05,789 --> 00:16:08,029
RBAC least privileges misconfiguration.

222
00:16:08,539 --> 00:16:12,439
So let's access the scenario locally.

223
00:16:13,439 --> 00:16:13,729
Okay.

224
00:16:13,789 --> 00:16:16,599
And let's follow along
the provided instruction.

225
00:16:17,499 --> 00:16:17,919
On public website.

226
00:16:18,919 --> 00:16:19,959
Scenarios.

227
00:16:22,149 --> 00:16:24,029
RBAC list privileges misconfiguration.

228
00:16:25,029 --> 00:16:27,749
And the story is that we can only see
in the real world where developers

229
00:16:27,749 --> 00:16:31,049
and DevOps teams tend to provide
extra privileges than required.

230
00:16:31,489 --> 00:16:34,559
So let's see what we
can dig out from here.

231
00:16:37,129 --> 00:16:41,299
Let's leverage a couple of commands from
this page, but, for example, this command

232
00:16:41,309 --> 00:16:46,939
you'll recognize also in the provided
official Kubernetes documentation, for

233
00:16:46,939 --> 00:16:50,889
example, to access the service account.

234
00:16:51,889 --> 00:16:52,809
This is what's bookmarked.

235
00:16:55,199 --> 00:16:59,349
So please go through these commands
at your own pace after the session.

236
00:17:02,259 --> 00:17:03,809
But let's see how this works.

237
00:17:06,719 --> 00:17:12,209
And let's monitor OK Falco if
it will recognize anything.

238
00:17:12,879 --> 00:17:15,279
So this scenario, let's
copy paste the commands.

239
00:17:16,279 --> 00:17:17,969
This is being read from

240
00:17:20,379 --> 00:17:23,809
environment variables, so let's prove it.

241
00:17:23,890 --> 00:17:27,129
Okay,

242
00:17:28,129 --> 00:17:32,049
and let's see if we will get the
server address as seen on the

243
00:17:32,049 --> 00:17:34,599
screenshot by using this command.

244
00:17:35,599 --> 00:17:36,239
Okay, great.

245
00:17:36,259 --> 00:17:38,379
Now we are, we got the server address.

246
00:17:39,199 --> 00:17:42,339
So for example let's copy paste
it directly into our browser to

247
00:17:42,339 --> 00:17:43,699
see what we'll get with that.

248
00:17:44,699 --> 00:17:47,249
Okay, let's accept potential risks.

249
00:17:49,584 --> 00:17:53,064
Okay, and we see now
some output over here.

250
00:17:53,084 --> 00:17:59,624
For example, if we got an assignment
to scan locally a certain CIDR range

251
00:18:01,014 --> 00:18:06,874
with Nmap and recognize this port open
with this kind of output available,

252
00:18:06,884 --> 00:18:09,534
we could easily kind of Google it.

253
00:18:10,304 --> 00:18:12,444
And that would point us to Kubernetes.

254
00:18:13,144 --> 00:18:16,254
For example, let's see if what's
happening in the Falco site QI.

255
00:18:16,254 --> 00:18:16,324
Bye.

256
00:18:16,324 --> 00:18:16,394
Bye.

257
00:18:16,514 --> 00:18:21,934
Yeah, it recognized that Kubernetes API
server was contacted from container.

258
00:18:24,084 --> 00:18:31,174
Okay, let's proceed with SPLT,
let's say, because SPL has a

259
00:18:31,174 --> 00:18:35,574
Kubernetes focused module to see
what we can discover with that.

260
00:18:36,214 --> 00:18:43,214
So to use meta split module, you will
need, server address, port, and token.

261
00:18:43,284 --> 00:18:47,434
And we already found, already

262
00:18:48,434 --> 00:18:49,214
found the token.

263
00:18:50,194 --> 00:18:51,244
Let's cut it out.

264
00:18:52,244 --> 00:18:53,684
Okay, we now have the token.

265
00:18:53,794 --> 00:18:59,014
And let's see what we can get
with Metasploit using this token.

266
00:19:00,554 --> 00:19:01,564
Let's exit from here.

267
00:19:02,564 --> 00:19:04,294
Let's search for Kubernetes.

268
00:19:05,294 --> 00:19:08,614
Okay, let's start from this zero.

269
00:19:08,834 --> 00:19:10,029
And then we'll try Metasploit.

270
00:19:11,029 --> 00:19:12,709
Let's see what our options are.

271
00:19:14,879 --> 00:19:20,139
Okay, let's add a host,
address, port, and token.

272
00:19:22,049 --> 00:19:23,569
So we see here address.

273
00:19:24,059 --> 00:19:24,459
Let's set.

274
00:19:25,459 --> 00:19:28,919
Okay, and it's recognized
that we can add a token.

275
00:19:31,869 --> 00:19:39,179
For example, get list watch resources
in this big monolith namespace.

276
00:19:39,679 --> 00:19:45,109
For example, we cannot create resources
with this specific token we found here.

277
00:19:45,449 --> 00:19:49,004
But let's say We found another token.

278
00:19:49,534 --> 00:19:51,024
Let's say we found this one.

279
00:19:52,024 --> 00:19:52,524
Great.

280
00:19:52,544 --> 00:19:58,164
Now Metasploit reports that we
have, we can do all actions across

281
00:19:58,734 --> 00:20:01,294
all namespaces, all resources.

282
00:20:02,094 --> 00:20:05,374
So let's try the other
available Metasploit module.

283
00:20:06,104 --> 00:20:08,004
So we use the enumeration.

284
00:20:08,004 --> 00:20:10,584
Now let's use the exploit exec.

285
00:20:11,584 --> 00:20:12,344
Was it 10?

286
00:20:12,434 --> 00:20:13,434
Yeah, it was 10.

287
00:20:14,434 --> 00:20:16,184
And let's see options.

288
00:20:19,004 --> 00:20:23,484
We have to set up again, a
host and port token also,

289
00:20:24,484 --> 00:20:25,224
and token.

290
00:20:26,224 --> 00:20:28,994
And one more thing, let's monitor pods.

291
00:20:29,004 --> 00:20:30,404
We have available.

292
00:20:32,294 --> 00:20:34,174
Kubectl get pods.

293
00:20:35,174 --> 00:20:38,454
So these are the pods we
currently have on the host.

294
00:20:39,454 --> 00:20:41,464
And when we run exploit in this case,

295
00:20:42,464 --> 00:20:45,744
we see another pod is created.

296
00:20:46,744 --> 00:20:47,464
And we got a show.

297
00:20:48,974 --> 00:20:53,114
We created a pod on the host and
now we are inside that pod, right?

298
00:20:53,134 --> 00:20:53,834
Let's check.

299
00:20:56,594 --> 00:20:57,394
We are root.

300
00:20:58,394 --> 00:20:59,484
That's that pod name.

301
00:20:59,484 --> 00:21:01,284
Let's see if it's reported over here.

302
00:21:01,284 --> 00:21:05,184
Yeah, it's seen as
created and running state

303
00:21:06,184 --> 00:21:08,284
and we can proceed from here.

304
00:21:08,394 --> 00:21:11,434
And quickly let's go
through one atomic scenario.

305
00:21:12,434 --> 00:21:13,994
We see it here in the running state.

306
00:21:13,994 --> 00:21:15,264
Let's exec into it

307
00:21:16,264 --> 00:21:17,434
and let's invoke the module

308
00:21:18,434 --> 00:21:20,714
so we can browse through.

309
00:21:21,264 --> 00:21:23,534
Available atomics tests.

310
00:21:24,374 --> 00:21:25,554
See what we have available.

311
00:21:26,554 --> 00:21:31,184
And let's see here, for example,
let's pick the rootkit one

312
00:21:32,184 --> 00:21:33,954
and let's monitor valko sidekick UI.

313
00:21:34,954 --> 00:21:35,174
Great.

314
00:21:35,194 --> 00:21:38,674
We see now that one of the
default rules was triggered

315
00:21:39,674 --> 00:21:41,694
and we can see here details.

316
00:21:42,694 --> 00:21:43,614
That's all for the demo.

317
00:21:43,654 --> 00:21:44,624
I hope you enjoy it.

318
00:21:45,624 --> 00:21:50,594
As a next logical step, moving forward
from today's session, I suggest

319
00:21:50,594 --> 00:21:54,784
looking into recently officially
published Falco Talon project, a

320
00:21:54,784 --> 00:21:59,424
response engine for Falco detected
threats in Kubernetes environments.

321
00:22:00,384 --> 00:22:04,344
Just to name a few actions that
can be automated using Falco Talon.

322
00:22:04,954 --> 00:22:09,384
Invoking an AWS Lambda function
on a triggered Falco rule.

323
00:22:09,949 --> 00:22:14,599
then enforcing a Kubernetes network
policy, and labeling a pod as

324
00:22:14,599 --> 00:22:16,599
suspicious or terminating it.

325
00:22:17,149 --> 00:22:20,769
I hope you enjoyed today's
session, and that Mark will accept

326
00:22:20,769 --> 00:22:22,879
my future Conf42 applications.

327
00:22:23,699 --> 00:22:27,519
Linked on this slide, you can
find Falco training that should

328
00:22:27,519 --> 00:22:32,169
enable you to start contributing
to Falco and create your own rules.

329
00:22:32,889 --> 00:22:38,379
If you find today's topic interesting,
join the Falco Slack community and let's

330
00:22:38,379 --> 00:22:40,929
stay in touch until the next session.

331
00:22:42,309 --> 00:22:43,089
Bye for now.

