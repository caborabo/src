1
00:00:14,980 --> 00:00:17,530
Just off the subway, up to work.

2
00:00:17,560 --> 00:00:21,020
I'm checking in like CNN
on the schedule first.

3
00:00:21,740 --> 00:00:25,110
Roll call, we all
sitting down at stand up.

4
00:00:25,510 --> 00:00:28,250
Head into our desks and I grab a banana.

5
00:00:28,790 --> 00:00:31,460
Do a git pull, NPM build.

6
00:00:31,874 --> 00:00:36,535
Two terminals, the question
is, will the loader control us?

7
00:00:36,815 --> 00:00:42,855
Reaching out, branching a tree as it
graphs through the sea of packages.

8
00:00:43,325 --> 00:00:48,804
It's crawling and searching, logs rolling
out, now it's stalling and lurching.

9
00:00:50,965 --> 00:00:55,105
It's pretty clear this is
severe and it is plain to see.

10
00:00:56,185 --> 00:00:59,465
I can't work, can't
pull a main dependency.

11
00:01:00,465 --> 00:01:03,104
Real talk, how many times has it been?

12
00:01:03,115 --> 00:01:03,175
Thank you.

13
00:01:03,360 --> 00:01:08,160
That you roll up on Tuesday and maybe
even just came back after lunch and

14
00:01:08,160 --> 00:01:13,670
like some open source dependency rolled
out and maybe you're trying to clone a

15
00:01:13,670 --> 00:01:15,770
repo that somebody built like last week.

16
00:01:17,050 --> 00:01:18,360
And like suddenly it's not building.

17
00:01:19,460 --> 00:01:20,770
It's like something has flipped up.

18
00:01:20,770 --> 00:01:24,460
Something has changed on you or you're
getting an error that somebody else

19
00:01:24,460 --> 00:01:27,910
isn't getting on their machine because
your operating system is different or

20
00:01:28,180 --> 00:01:31,960
it's conflicting with some C library
that you built to fix some other

21
00:01:31,960 --> 00:01:33,939
similar problem, like six months ago.

22
00:01:33,939 --> 00:01:36,059
And this is just a massive headache.

23
00:01:36,655 --> 00:01:40,045
I want to talk a little bit about
packaging today with the goal

24
00:01:40,605 --> 00:01:48,295
being that we contextualize Nix
for the cloud native practitioner.

25
00:01:48,325 --> 00:01:51,845
Just pull up a little bit
of my slides over here.

26
00:01:51,904 --> 00:01:55,414
We'll just pop over to different layout.

27
00:01:58,055 --> 00:02:00,485
So I'm here chilling in Colorado.

28
00:02:00,485 --> 00:02:01,705
My name is Lee Kapili.

29
00:02:02,230 --> 00:02:07,960
And I'm a long time cloud native type
person contributed a good number to

30
00:02:08,080 --> 00:02:14,840
Kubernetes and to projects like Flux,
like the continuous delivery project Flux.

31
00:02:15,059 --> 00:02:17,850
I'm not talking about Flux today.

32
00:02:17,900 --> 00:02:19,799
I'm talking about Phlox.

33
00:02:19,799 --> 00:02:21,040
I still don't know how I'm
going to deal with this.

34
00:02:21,300 --> 00:02:24,420
But Phlox is the startup
that I'm working with.

35
00:02:24,570 --> 00:02:28,560
And because I joined the Phlox
team, I have a bunch of teammates

36
00:02:28,560 --> 00:02:29,780
who know a lot about Nyx.

37
00:02:30,140 --> 00:02:32,990
So I'm learning Nyx getting
a lot more context in it,

38
00:02:33,040 --> 00:02:34,929
trying to become not ignorant.

39
00:02:36,099 --> 00:02:43,929
And I want to Use my context in the cloud
native world to maybe try and share a

40
00:02:43,929 --> 00:02:46,919
little bit of what I'm learning about
next and some of the revelations that I'm

41
00:02:46,919 --> 00:02:51,939
having because I think that there's a lot
of opportunity for cloud native people

42
00:02:51,939 --> 00:02:56,379
to employ next in their infrastructure,
in their systems, we're going to talk

43
00:02:56,389 --> 00:02:59,609
about going from workflow to artifact.

44
00:02:59,809 --> 00:03:02,549
To run time today, we're gonna
spend a lot of time on workflow

45
00:03:02,559 --> 00:03:04,949
because I think there's just a lot
of cool things that we're building

46
00:03:04,949 --> 00:03:06,109
that are very concrete here.

47
00:03:06,669 --> 00:03:08,149
But cloud native next, let's get into it.

48
00:03:08,990 --> 00:03:09,810
Got to click this.

49
00:03:09,880 --> 00:03:10,370
Here we go.

50
00:03:11,840 --> 00:03:12,759
Software is complicated.

51
00:03:12,760 --> 00:03:16,360
But what we're really trying to do at
the end of the day is take assemblies

52
00:03:16,379 --> 00:03:21,879
of things and then build some really
cool tools, some cool systems, you

53
00:03:22,100 --> 00:03:23,730
Some access to information, right?

54
00:03:23,730 --> 00:03:27,260
We're like trying to change the shape
of the world and we get together with

55
00:03:27,260 --> 00:03:31,230
people a lot of the time and are like,
Hey, let's collaborate on some software

56
00:03:31,230 --> 00:03:35,110
so we can do something valuable that
prints money for shareholders or

57
00:03:35,450 --> 00:03:40,850
makes the next like ride sharing app,
but for dogs or something like that.

58
00:03:40,850 --> 00:03:41,830
And each.

59
00:03:42,455 --> 00:03:46,725
Kind of software project has its own
annoying collection of stuff that stuff

60
00:03:46,725 --> 00:03:52,035
comes in a couple of different shapes
It comes in tools It comes in libraries

61
00:03:52,125 --> 00:03:55,945
right like things that other open source
developers Builds because they have a

62
00:03:55,945 --> 00:04:00,195
lot more domain knowledge on something
like how to calculate elliptic curves

63
00:04:00,195 --> 00:04:06,555
or you know do some other cryptography
stuff or like I don't know, munch big

64
00:04:06,555 --> 00:04:09,565
integers or even just the standard
libraries from all of your programming

65
00:04:09,565 --> 00:04:13,285
languages that are, really good at
recursive sense or walking file paths

66
00:04:13,285 --> 00:04:15,395
and, sanitizing inputs and stuff, right?

67
00:04:15,395 --> 00:04:16,505
Just things that you don't
want to mess with it.

68
00:04:16,505 --> 00:04:17,524
You need libraries for that.

69
00:04:17,595 --> 00:04:19,875
You could put enough libraries
together into an opinionated

70
00:04:19,875 --> 00:04:21,185
workflow and you call it a framework.

71
00:04:21,965 --> 00:04:23,515
And then we have to figure all this stuff.

72
00:04:23,725 --> 00:04:25,495
And so there's a little
bit of a software project.

73
00:04:25,495 --> 00:04:28,825
We've got to combine a bunch of things
together, but each project has its own

74
00:04:28,825 --> 00:04:30,745
annoying collection of stuff, right?

75
00:04:30,745 --> 00:04:31,119
Okay.

76
00:04:31,350 --> 00:04:36,520
And when you have annoying collections
of things it becomes even increasingly

77
00:04:36,520 --> 00:04:38,290
annoying to share them with other people.

78
00:04:38,480 --> 00:04:42,629
But remember, a lot of software is
collaborative, so this is just like

79
00:04:42,629 --> 00:04:44,849
a constant pesterence in our life.

80
00:04:45,430 --> 00:04:49,720
And then you get into the thing with
what if I want to work on a thing

81
00:04:49,720 --> 00:04:50,990
that I was working eight months ago?

82
00:04:51,490 --> 00:04:56,160
And reproducing that annoying collection
of stuff on a brand new machine or even

83
00:04:56,160 --> 00:05:00,430
just like reinvigorating on machine
because you're like you deleted it or

84
00:05:00,430 --> 00:05:02,140
like trying to run CI for something.

85
00:05:02,140 --> 00:05:04,580
It's just like these things drift and
they break because they're pulling

86
00:05:04,580 --> 00:05:09,050
from public sources and the builds
themselves are not structured in a way

87
00:05:09,050 --> 00:05:11,850
that is going to last the test of time.

88
00:05:12,350 --> 00:05:13,780
So planning for the future is tough.

89
00:05:14,160 --> 00:05:16,270
So this is some of the.

90
00:05:16,675 --> 00:05:20,005
Problem space that we're trying
to think about with flocks, right?

91
00:05:20,005 --> 00:05:23,485
And so flux is a company, but it's also
the name of an open source project, right?

92
00:05:23,485 --> 00:05:24,665
You can just go to github.

93
00:05:24,665 --> 00:05:25,705
com slash flocks.

94
00:05:26,005 --> 00:05:29,925
That's a GPL V2 licensed open
source project written in

95
00:05:29,925 --> 00:05:32,475
rust and You just clone it.

96
00:05:32,475 --> 00:05:36,375
And if you install flux as well,
you can start up the dev shell

97
00:05:36,405 --> 00:05:40,515
really easily and just contribute
on a real cool breast project.

98
00:05:40,885 --> 00:05:44,805
And we're trying to make it so
that your dev environments are

99
00:05:44,814 --> 00:05:47,955
reproducible and not just across time.

100
00:05:48,425 --> 00:05:52,815
But that for each of your projects,
like they stay relatively contained

101
00:05:53,385 --> 00:05:57,525
and that you can work on all
your projects, regardless of what

102
00:05:57,575 --> 00:05:59,805
platform is in your hand, right?

103
00:05:59,905 --> 00:06:04,255
If you're on Apple, Silicon Mac that
you would have success reproducing

104
00:06:04,255 --> 00:06:07,730
the software environment necessary to
collaborate on something as somebody who's

105
00:06:07,730 --> 00:06:09,815
on that weird arch Linux framework 13.

106
00:06:10,315 --> 00:06:13,795
And that once you get that working,
it'll still work three years from

107
00:06:13,795 --> 00:06:16,085
now or five or even 10 years.

108
00:06:16,095 --> 00:06:16,115
Yeah.

109
00:06:16,365 --> 00:06:18,395
Which that seems a little
bold, that's the idea.

110
00:06:18,875 --> 00:06:25,905
So in order to do this, we have built
the open source tool, which is a package

111
00:06:25,905 --> 00:06:30,455
manager on top of this other sort of
package manager technology called Nix.

112
00:06:31,150 --> 00:06:34,000
Nix is really a functional programming
language that you can write these

113
00:06:34,000 --> 00:06:35,350
input output expressions in.

114
00:06:35,920 --> 00:06:39,370
And those expressions then end up
becoming declarations of packages

115
00:06:39,370 --> 00:06:40,830
or descriptions of packages.

116
00:06:41,380 --> 00:06:43,710
But Nix doesn't work like
most package managers.

117
00:06:43,770 --> 00:06:47,970
See, most package managers, they're
taking these amalgamations of things, and

118
00:06:47,970 --> 00:06:50,620
then they're distributing the different
kinds of things that you find in a

119
00:06:50,620 --> 00:06:53,010
package across this standard hierarchy.

120
00:06:53,180 --> 00:06:55,920
Folders that you find in
the Unix ecosystem, right?

121
00:06:55,920 --> 00:07:00,230
So on a Mac and on the Linux machine
very Unix y you'll notice that I'm just

122
00:07:00,230 --> 00:07:04,370
ignoring Windows because Nix doesn't work
on Windows, even though Windows is also

123
00:07:04,750 --> 00:07:06,770
a Unix y heritage, and then it got weird.

124
00:07:07,320 --> 00:07:10,430
But package managers, in
order to be able to manage.

125
00:07:10,630 --> 00:07:10,860
this.

126
00:07:10,860 --> 00:07:12,270
They have to do a lot of bookkeeping.

127
00:07:12,760 --> 00:07:16,400
And then the shortcoming that you run
into here is actually not so much in

128
00:07:16,400 --> 00:07:20,380
how we distribute stuff across folders,
but how we assemble environments.

129
00:07:20,440 --> 00:07:25,150
Since our environments, like where
we look for all of our C libraries or

130
00:07:25,350 --> 00:07:28,590
where we look for all of our secure
binaries or where we look for all of our

131
00:07:28,590 --> 00:07:34,650
regular binaries, since they all come
from roughly the same folders, then our

132
00:07:34,650 --> 00:07:36,330
environments, they get a little bit.

133
00:07:37,015 --> 00:07:41,435
Hard to namespace that means that you
can't install two different versions of

134
00:07:41,435 --> 00:07:46,195
my sequel because now you're going to have
two different binaries, that have the same

135
00:07:46,195 --> 00:07:48,495
name and they both can't go into user bin.

136
00:07:49,125 --> 00:07:52,175
So next fixes that by hashing.

137
00:07:52,680 --> 00:07:57,100
Every package either the inputs or
the or the actual content itself.

138
00:07:57,410 --> 00:07:59,680
And it's a lot like a
container layer, right?

139
00:07:59,790 --> 00:08:02,380
Once we hash the package, we can
store all of the things related

140
00:08:02,380 --> 00:08:03,950
to that package in one folder.

141
00:08:04,300 --> 00:08:06,130
And we'll put it into this
thing called the Nix store.

142
00:08:06,369 --> 00:08:09,079
The packages are cleanly
factored away from each other.

143
00:08:09,929 --> 00:08:14,529
And then the real trick comes into how
to cleverly assemble these different

144
00:08:14,529 --> 00:08:20,679
folders into environments that work on a
computer so that it feels like your normal

145
00:08:20,679 --> 00:08:24,249
style of development where you can, run
a program and link into five different

146
00:08:24,249 --> 00:08:29,529
C libraries or something like that have
some stuff on your path and so dynamically

147
00:08:29,539 --> 00:08:32,249
managing the things that let it.

148
00:08:32,450 --> 00:08:36,579
Programs find each other in a Unix
y way and let libraries link up

149
00:08:36,579 --> 00:08:39,559
into things and let dynamically
loaded things load into things.

150
00:08:39,960 --> 00:08:45,829
Managing the loader path is
part of what Nix is really

151
00:08:45,830 --> 00:08:47,160
concerned with being clever about.

152
00:08:47,880 --> 00:08:52,180
And it gives you a lot of tools to
be smart about that by having this

153
00:08:52,180 --> 00:08:57,950
functional programming language, which
is notoriously hard to use, right?

154
00:08:58,029 --> 00:09:01,890
And so Nix does more than just like manage
packages, it gives you like this whole

155
00:09:01,910 --> 00:09:06,169
build system and you can like configure
your operating system with it if you

156
00:09:06,169 --> 00:09:07,959
use this distribution called NixOS.

157
00:09:08,434 --> 00:09:11,524
And you can manage your home directory if
you use a community project, and you can

158
00:09:11,534 --> 00:09:16,054
manage your Mac if you use a different
community project, and so it's really

159
00:09:16,054 --> 00:09:18,834
grown beyond just I need to hash libc.

160
00:09:19,354 --> 00:09:23,765
Now it's this fully declarative system
for building reproducible distributed

161
00:09:23,795 --> 00:09:27,975
computing things, but it's hard to get
into and honestly, pretty academic.

162
00:09:27,975 --> 00:09:30,245
And I will say the stack
traces are super gnarly.

163
00:09:30,695 --> 00:09:37,315
That's why we are building flocks clocks
is aiming to make it easy for you to

164
00:09:37,325 --> 00:09:39,325
build these virtual environments that are.

165
00:09:41,420 --> 00:09:46,620
And it uses Nix under the hood, but
with an interface that isn't really

166
00:09:46,620 --> 00:09:50,199
scary for people who are just like
getting out of code school, or who are

167
00:09:50,200 --> 00:09:54,139
a little bit more junior, or even all
of you incredibly senior folks out there

168
00:09:54,140 --> 00:09:58,635
who just want to Don't have any more
time to learn one more thing, right?

169
00:09:58,685 --> 00:10:02,725
We want to be able to promise that when
you install Phlox on your system, which,

170
00:10:02,725 --> 00:10:06,195
there's a macOS installer, you can get it
from Brew as well, you just go to Phlox

171
00:10:06,195 --> 00:10:08,485
dev website, then to our install docs.

172
00:10:09,085 --> 00:10:15,125
Yeah, apt, we have an RPM for it on YUM
systems, and you can do a generic Nix

173
00:10:15,125 --> 00:10:16,725
install if you're already a Nix user.

174
00:10:17,455 --> 00:10:19,855
But we add some verbs, right?

175
00:10:19,895 --> 00:10:23,465
So we want to change the shape of
the package manager a little bit.

176
00:10:23,505 --> 00:10:27,075
If you really think about it, computers
they used to be more for one thing,

177
00:10:27,085 --> 00:10:28,565
and they had a long life cycle.

178
00:10:28,925 --> 00:10:31,745
Now our computers are
meant for many things.

179
00:10:31,955 --> 00:10:35,435
Sometimes, a server is hosting
10 different projects with some

180
00:10:35,805 --> 00:10:40,095
virtual hosting in front of it, or
it's a node in a Kubernetes cluster

181
00:10:40,095 --> 00:10:41,505
that's running 40 containers.

182
00:10:41,865 --> 00:10:47,265
And that server Has many jobs that need to
be split up into different environments.

183
00:10:47,765 --> 00:10:50,065
But then it doesn't
live very long as well.

184
00:10:51,095 --> 00:10:55,255
And on the other hand, like your laptop,
you might have it for 3 to 5 years and you

185
00:10:55,255 --> 00:10:57,345
might work on 10 to 15 projects a year.

186
00:10:57,795 --> 00:11:02,195
And the package manager being built
for one system and mutating your system

187
00:11:02,195 --> 00:11:06,335
globally it, it doesn't really fit
really well anymore with the things

188
00:11:06,335 --> 00:11:07,865
that we carry around in our backpacks.

189
00:11:08,365 --> 00:11:09,685
And it doesn't really work for servers.

190
00:11:10,230 --> 00:11:14,000
Very well either, because now
you can't install two different

191
00:11:14,000 --> 00:11:15,490
versions of a database or something.

192
00:11:16,440 --> 00:11:21,130
And so that's why we've containers have
been the saving grace, for everything.

193
00:11:21,570 --> 00:11:24,640
But containers are primarily
a virtualization technology.

194
00:11:24,950 --> 00:11:27,870
It's not a distribution technology,
and it certainly isn't a cross

195
00:11:27,900 --> 00:11:29,220
platform technology, right?

196
00:11:29,270 --> 00:11:34,070
A Linux container is going to force
you to use Linux as an abstraction

197
00:11:34,120 --> 00:11:35,690
anytime you want to use it anywhere.

198
00:11:36,315 --> 00:11:41,054
That becomes a little bit unfortunate
when you have a very fancy, 3, 500

199
00:11:41,214 --> 00:11:46,054
Apple Silicon MacBook because that
chip is really nice and has like

200
00:11:46,054 --> 00:11:49,134
a unified memory architecture that
allows you to run programs on the

201
00:11:49,134 --> 00:11:50,984
GPU and do all kinds of fun stuff.

202
00:11:51,014 --> 00:11:56,004
And it's got like really fast
access to memory and to the flash.

203
00:11:56,374 --> 00:11:59,504
Where running a database on that
thing actually makes a lot of sense.

204
00:11:59,904 --> 00:12:01,654
So why pretend like it's a Linux computer?

205
00:12:02,054 --> 00:12:04,304
Unfortunately, it's because
it's the best option right now.

206
00:12:04,854 --> 00:12:06,194
How can we get beyond that?

207
00:12:06,464 --> 00:12:10,974
Let's let's just get into
demos, I'll pop over here.

208
00:12:11,849 --> 00:12:14,579
Maybe do one more layout change,

209
00:12:15,579 --> 00:12:17,029
and let's go here.

210
00:12:18,269 --> 00:12:21,129
Alright, we are at the happy place here.

211
00:12:21,129 --> 00:12:23,779
You can see that I've tried another
take of this recording before,

212
00:12:23,779 --> 00:12:26,159
and I wasn't really that happy
with it, so I'm doing this again.

213
00:12:26,749 --> 00:12:26,969
Okay.

214
00:12:27,469 --> 00:12:31,899
Here, if flocks is a package
manager, we must be able to do

215
00:12:31,939 --> 00:12:33,149
package management things, right?

216
00:12:33,199 --> 00:12:34,429
So let's flocks list.

217
00:12:34,919 --> 00:12:39,939
This is all of the packages that I have
installed in my default environment.

218
00:12:40,269 --> 00:12:43,159
My default environment happens
to live in my home directory.

219
00:12:43,239 --> 00:12:47,109
You can see here, Michelle, I have a
little integration that's just showing

220
00:12:47,109 --> 00:12:48,779
me where I am in my environments.

221
00:12:49,219 --> 00:12:52,309
So this is active, which means
that I should be able to run it.

222
00:12:52,549 --> 00:12:57,039
H top, and I should be able
to like blocks, remove, go,

223
00:12:57,979 --> 00:12:59,909
and then that should be fast.

224
00:12:59,909 --> 00:13:02,399
And now I, don't have go from flocks.

225
00:13:02,399 --> 00:13:04,979
I actually do have go
from a version manager.

226
00:13:05,449 --> 00:13:10,299
So this is coming from a gimme
apparently it's go one 21.

227
00:13:10,419 --> 00:13:10,889
5.

228
00:13:11,859 --> 00:13:14,639
Except I don't know why this
is, but for, Oh yeah, it is.

229
00:13:14,679 --> 00:13:15,049
Okay.

230
00:13:15,139 --> 00:13:15,379
Yeah.

231
00:13:15,929 --> 00:13:22,939
But if I Flux install go,
get that back and now I have

232
00:13:23,429 --> 00:13:26,719
a newer version of go maybe.

233
00:13:27,219 --> 00:13:30,989
Oh, this is actually unexpected.

234
00:13:30,989 --> 00:13:32,059
What did I do?

235
00:13:32,519 --> 00:13:32,879
Okay.

236
00:13:32,919 --> 00:13:36,249
So here you guys get to see
a little bit of debugging.

237
00:13:36,249 --> 00:13:37,719
I'm not sure why.

238
00:13:38,419 --> 00:13:42,569
Go is not coming from the right place
because Flux should be higher in the path.

239
00:13:42,609 --> 00:13:45,339
You can also see brew is linked
in something weird into my path.

240
00:13:47,829 --> 00:13:52,899
You can see here my Flux environment has
a dot run, dot Flux slash run directory

241
00:13:52,899 --> 00:13:56,089
with my operating system and architecture.

242
00:13:56,099 --> 00:13:57,999
So this is arch64 Darwin.

243
00:13:58,489 --> 00:14:00,099
And then there's a bin directory.

244
00:14:00,489 --> 00:14:07,709
And presumably in here
there should be a go binary.

245
00:14:07,779 --> 00:14:08,359
Yes.

246
00:14:09,059 --> 00:14:12,739
And that is the version of Go that I want.

247
00:14:14,059 --> 00:14:19,229
And presumably, it should be the
version that's getting executed too.

248
00:14:19,609 --> 00:14:24,709
But for whatever reason, the path search
is not behaving the way I would expect.

249
00:14:26,819 --> 00:14:27,709
Okay, I don't know.

250
00:14:28,209 --> 00:14:29,619
Maybe it's something weird with zshell.

251
00:14:31,179 --> 00:14:32,369
Anyway there you go.

252
00:14:32,439 --> 00:14:34,659
Go is installed and I have it.

253
00:14:35,354 --> 00:14:36,144
new version of it.

254
00:14:36,574 --> 00:14:38,244
I also have age top, right?

255
00:14:38,354 --> 00:14:44,364
And that is also coming from
flux as is, bat and I think

256
00:14:44,364 --> 00:14:46,844
even my version of curl, yep.

257
00:14:46,934 --> 00:14:51,704
Might be coming directly from
flux as maybe I don't have

258
00:14:51,704 --> 00:14:52,714
bash or anything in here.

259
00:14:52,744 --> 00:14:53,014
Do I?

260
00:14:54,014 --> 00:14:57,404
Yeah, no, it's just mostly command
line tools and then core utils.

261
00:14:58,024 --> 00:15:03,399
So maybe even No, not said rock.

262
00:15:03,759 --> 00:15:06,029
These are still the Mac versions.

263
00:15:08,669 --> 00:15:08,969
Cool.

264
00:15:09,019 --> 00:15:10,659
Anyway, that's the default environment.

265
00:15:10,869 --> 00:15:14,609
This is all actually coming
from a manifest, right?

266
00:15:14,609 --> 00:15:22,764
So I feel like I'm actually removing
these packages imperatively, but it's

267
00:15:22,764 --> 00:15:25,574
actually being done declaratively.

268
00:15:25,574 --> 00:15:27,164
And this is a really big idea here.

269
00:15:27,844 --> 00:15:32,314
We pretty much stole this directly
from language package managers.

270
00:15:32,864 --> 00:15:34,274
which totally have this figured out.

271
00:15:34,604 --> 00:15:39,334
You can imagine that if there is a
manifest that lists packages and other

272
00:15:39,344 --> 00:15:43,154
attributes about the environment,
like I get to define environment

273
00:15:43,154 --> 00:15:47,774
variables here and activation hook
which runs as a script in my shell

274
00:15:47,774 --> 00:15:50,504
of choice, profile hooks as well.

275
00:15:50,914 --> 00:15:55,844
I can also restrict my environment to
particular systems and architectures.

276
00:15:55,934 --> 00:15:59,794
Like if I only want to run on Linux
then I could remove the Darwin.

277
00:16:00,194 --> 00:16:04,904
Systems from there but that gets
into a very important point when I

278
00:16:04,944 --> 00:16:14,204
imperatively say Flux and Stalco, this
is declaratively editing my manifest and

279
00:16:14,384 --> 00:16:22,424
that manifest actually also immediately
produces A flux in the manifest lock.

280
00:16:24,214 --> 00:16:29,194
And in here it is that manifest file,
but then all of the information that

281
00:16:29,194 --> 00:16:35,584
you need to get the exact bit for bit
reproducible version of that package.

282
00:16:35,594 --> 00:16:38,564
And when I say that this package
is reproducible, I don't just mean

283
00:16:38,574 --> 00:16:41,634
that it was built and that it's
saved in a binary cache somewhere.

284
00:16:42,014 --> 00:16:46,729
I mean that somebody Really smart
wrote a Nix expression to make sure

285
00:16:46,729 --> 00:16:51,519
that this package every time it's
built is bit for bit the same exact

286
00:16:51,519 --> 00:16:53,529
thing every time you build it.

287
00:16:54,009 --> 00:17:00,079
And that means that like the time by
which the package like was built doesn't

288
00:17:00,129 --> 00:17:02,899
affect like the bits and the hash of it.

289
00:17:03,559 --> 00:17:07,989
And that is a pretty profound
concept that lets us do some funky.

290
00:17:09,389 --> 00:17:12,289
Caching of builds later on in this story.

291
00:17:12,829 --> 00:17:14,859
Now this is pretty boring, right?

292
00:17:14,859 --> 00:17:16,849
We were locking some packages.

293
00:17:16,859 --> 00:17:17,479
So this is good.

294
00:17:17,719 --> 00:17:19,429
Now we have a manifest and a lock file.

295
00:17:19,679 --> 00:17:21,889
So you can imagine we could
check this into a repo.

296
00:17:22,459 --> 00:17:23,849
Let's go ahead and look at one.

297
00:17:24,399 --> 00:17:29,729
If I go into this Terraform repo I have
a log, and you can see I have a commit

298
00:17:29,729 --> 00:17:31,549
here that says add OpenTofu with locks.

299
00:17:31,549 --> 00:17:33,499
Okay, let's go ahead and show that commit.

300
00:17:33,969 --> 00:17:38,149
And there's a lockfile update, and
then if I scroll all the way down,

301
00:17:38,149 --> 00:17:39,859
you can see the manifest update here.

302
00:17:40,279 --> 00:17:42,249
There is an install.

303
00:17:42,629 --> 00:17:43,729
It adds OpenTofu.

304
00:17:44,249 --> 00:17:47,150
The reason that there's a left hand
and a right hand side of this is I

305
00:17:47,150 --> 00:17:50,150
could rename this and have multiple
versions of the same package.

306
00:17:50,450 --> 00:17:52,220
You can also add version
numbers right here.

307
00:17:52,270 --> 00:17:54,950
It's just like at and
then the version number.

308
00:17:55,390 --> 00:17:58,990
And then here in the hook section,
oh, anytime this environment is

309
00:17:59,000 --> 00:18:02,340
activated then we'll run tofu init.

310
00:18:02,870 --> 00:18:04,760
So what does it mean to
actually activate something?

311
00:18:04,760 --> 00:18:05,934
Let's try.

312
00:18:05,934 --> 00:18:07,108
Box activate.

313
00:18:07,108 --> 00:18:12,032
So I'm in this folder, and then
you'll see now it's actually

314
00:18:12,042 --> 00:18:14,042
run that tofu init for me.

315
00:18:14,622 --> 00:18:19,562
And then I'm inside of this environment
as well as my default environment, right?

316
00:18:19,622 --> 00:18:26,232
So which H top is, Oh my
gosh, what is happening?

317
00:18:27,232 --> 00:18:28,162
What on earth

318
00:18:30,782 --> 00:18:31,972
is happening?

319
00:18:32,972 --> 00:18:34,182
I uninstalled

320
00:18:36,862 --> 00:18:37,412
that earlier.

321
00:18:38,852 --> 00:18:39,772
Yeah, that's why

322
00:18:40,052 --> 00:18:41,822
I'm just going to flux install H top.

323
00:18:41,842 --> 00:18:45,082
And then I'm going to do that
to a particular directory here.

324
00:18:45,212 --> 00:18:48,602
And that'll immediately fix
what I was not expecting there.

325
00:18:48,612 --> 00:18:51,812
Thanks for for suffering through
that moment of confusion.

326
00:18:51,952 --> 00:18:52,282
Cool.

327
00:18:52,332 --> 00:18:55,832
So I still have my default
environment, right?

328
00:18:55,842 --> 00:18:56,842
It still works.

329
00:18:57,022 --> 00:19:02,472
And still, and then I also have
the tofu command line tool.

330
00:19:03,457 --> 00:19:09,097
Alright, so here we can see that
I'm OpenTofu182 on DarwinARM64

331
00:19:09,407 --> 00:19:13,747
and I have a provider that has
been downloaded for me as a result

332
00:19:13,747 --> 00:19:15,147
of activating this environment.

333
00:19:15,397 --> 00:19:16,257
I can exit.

334
00:19:16,612 --> 00:19:19,662
And then I can try to do the same exact
thing, and it's not going to work.

335
00:19:20,242 --> 00:19:22,932
But notice I'm just in subshells,
I haven't been starting

336
00:19:22,932 --> 00:19:24,302
containers or anything like that.

337
00:19:24,322 --> 00:19:28,762
And all of these binaries are natively
compiled for my architecture to fully

338
00:19:28,772 --> 00:19:34,272
utilize the entire address space
of all of the flash memory and or I

339
00:19:34,272 --> 00:19:37,782
should say all of the memory on the
chip, as well as all of the flash

340
00:19:37,782 --> 00:19:40,122
storage available and all of the CPUs.

341
00:19:40,582 --> 00:19:43,182
without relying on any
sort of virtualization.

342
00:19:43,642 --> 00:19:44,772
It's just binaries.

343
00:19:44,852 --> 00:19:50,682
There's just some environment variables
and some clever mounting of read

344
00:19:50,682 --> 00:19:52,282
only folders and stuff like that.

345
00:19:52,832 --> 00:19:55,542
So there's good isolation happening here.

346
00:19:55,832 --> 00:20:00,992
But this story is boring without also
then going over to a Windows box.

347
00:20:01,002 --> 00:20:02,322
So let's go ahead.

348
00:20:02,992 --> 00:20:05,437
And go to my rog ally.

349
00:20:05,437 --> 00:20:09,652
I'm going to ssh in there
and start a WSL environment.

350
00:20:10,152 --> 00:20:13,622
Let's go ahead and pop into
a Phlox activated zsh here.

351
00:20:13,642 --> 00:20:16,082
Go into our home directory.

352
00:20:16,502 --> 00:20:18,262
Try not to mistype too many things.

353
00:20:18,432 --> 00:20:21,616
You can see over here I've got a little
bit of a different list of things.

354
00:20:21,616 --> 00:20:28,074
drenv, git gnupg, pin entry,
for committing with, some

355
00:20:28,094 --> 00:20:30,084
signatures stuff like that.

356
00:20:30,244 --> 00:20:31,054
Let's go.

357
00:20:31,134 --> 00:20:34,424
I cloned this repo earlier over
here and just tested that it worked.

358
00:20:34,744 --> 00:20:40,754
So I'm get show same flux
environment and I just flux activate.

359
00:20:42,784 --> 00:20:45,024
And again, we are

360
00:20:47,104 --> 00:20:52,654
on the same open tofu version, but this
time compiled natively for Linux AMD 64.

361
00:20:52,654 --> 00:20:56,474
So different operating system, different
architecture, and still getting that.

362
00:20:56,474 --> 00:20:56,529
Yeah.

363
00:20:57,019 --> 00:21:00,489
Provider pulled down for me by Terraform's
own built in package management.

364
00:21:00,779 --> 00:21:02,929
Like this is starting to
build a really cool story.

365
00:21:02,939 --> 00:21:08,489
Now I have a simple way for me and my
teammates to get to the same dependencies.

366
00:21:08,919 --> 00:21:11,189
And I can stack them on
top of each other, right?

367
00:21:11,189 --> 00:21:13,449
If I hop back out to the Mac.

368
00:21:14,789 --> 00:21:16,639
Let's get out of all these shells.

369
00:21:17,249 --> 00:21:20,459
And let's go over to, an example

370
00:21:21,459 --> 00:21:22,339
environment.

371
00:21:22,529 --> 00:21:24,199
I have a Go application here.

372
00:21:24,709 --> 00:21:28,009
There's a little bit of source
code here for a small HTTP server.

373
00:21:28,239 --> 00:21:29,799
What kinds of things
would I need for this?

374
00:21:29,829 --> 00:21:33,969
Maybe I would want to build a
Go application and then push it

375
00:21:33,969 --> 00:21:36,679
to Kubernetes, and generate a
deployment manifest for it, and

376
00:21:36,679 --> 00:21:39,839
then syntax highlight some of the
things that come back from kubectl.

377
00:21:40,144 --> 00:21:42,034
Naturally you're going to end up
with a longer dependency to the

378
00:21:42,074 --> 00:21:44,834
list than this, but it's like a
nice, simple example environment.

379
00:21:45,304 --> 00:21:47,804
And this would work perfectly on my Mac.

380
00:21:47,904 --> 00:21:53,694
It works great, you can just activate
it and I can put this just get commit

381
00:21:54,184 --> 00:21:59,004
the flocks folder and push it and
somebody can pull it and activate

382
00:21:59,044 --> 00:22:03,554
and it'll work on their machine or
on a CI server, or even in a system

383
00:22:03,554 --> 00:22:05,044
D unit on a production web server.

384
00:22:05,379 --> 00:22:09,239
Totally would work just fine the last
environment that's just worth demoing

385
00:22:09,759 --> 00:22:16,359
here before I get to talking about
moving forward beyond the workflow is

386
00:22:16,399 --> 00:22:18,949
here's another kind of infrastructure y.

387
00:22:21,079 --> 00:22:23,149
You'll notice here that since
I have so many environments

388
00:22:23,399 --> 00:22:27,509
activated, Phlox is really double
checking that I know where I am.

389
00:22:28,259 --> 00:22:34,709
And here I've got Google Cloud SDK,
Bitwarden CLI, and the Oracle Cloud CLI.

390
00:22:35,069 --> 00:22:38,049
Now, I can't tell you about the number
of times that I've been frustrated

391
00:22:38,049 --> 00:22:42,769
with the Python that's been built into
the brew distributed Google Cloud SDK.

392
00:22:43,364 --> 00:22:46,814
It's just because it's on the global
path and like you have to modify

393
00:22:46,814 --> 00:22:48,394
your shell RC to do things with it.

394
00:22:48,734 --> 00:22:53,554
I've even had a lot of instances
where like Google Cloud SDK itself

395
00:22:53,674 --> 00:22:57,694
breaks by having some strange Python
issues that I don't understand.

396
00:22:57,704 --> 00:23:00,934
And then I just have to go and look
it up and find somebody's comment on

397
00:23:00,934 --> 00:23:04,594
a GitHub issue to mutate the files
on my file system to make it work.

398
00:23:04,994 --> 00:23:09,264
so that I can log into a virtual
machine or talk to a Kubernetes cluster.

399
00:23:09,804 --> 00:23:18,264
And so having this be just pulled from a
binary cache and built by the community

400
00:23:18,274 --> 00:23:22,694
and validated in a reproducible,
bit for bit reproducible way.

401
00:23:22,694 --> 00:23:26,854
I've uninstalled gcloud.

402
00:23:26,884 --> 00:23:29,324
I don't have it on my system anymore.

403
00:23:30,374 --> 00:23:34,414
From brew and all of my problems are
gone now because I can just activate

404
00:23:34,704 --> 00:23:38,944
in this environment and the analogy in
my head of what this feels like for me

405
00:23:39,354 --> 00:23:44,144
is it feels like this whole time I'm
usually just trying to crochet like I'm

406
00:23:44,144 --> 00:23:48,954
usually just doing a little bit of fine
electrical soldering and then like right

407
00:23:48,954 --> 00:23:53,664
next to be in my garage on my workbench
there is a table saw and it just plugged

408
00:23:53,664 --> 00:24:01,009
in and I am one moment away from or one
collaborator away from having an accident

409
00:24:01,219 --> 00:24:04,929
and or just it's just in my way, it's
just a mess and I'm tripping over the

410
00:24:04,929 --> 00:24:10,339
cord and just put the table saw away,
so like right now I'm actually, you can

411
00:24:10,339 --> 00:24:15,399
see that when I type a G cloud, power
level 10 K is noticing that it should

412
00:24:15,399 --> 00:24:17,099
probably tell me what environment I'm in.

413
00:24:17,119 --> 00:24:20,039
So I'm over here just
in my main account and.

414
00:24:21,719 --> 00:24:26,269
I can just talk to the cloud and I can
spend money now and now I just type

415
00:24:26,289 --> 00:24:30,289
exit and I can no longer spend money,
or at least I can no longer change the

416
00:24:30,289 --> 00:24:34,419
amount of money that I'm spending, it's
just a beautiful thing to be organized

417
00:24:34,719 --> 00:24:36,759
and to be able to put stuff away.

418
00:24:37,139 --> 00:24:41,889
Back to our, let's just go to

419
00:24:44,139 --> 00:24:44,769
the

420
00:24:45,769 --> 00:24:47,949
go environment, right?

421
00:24:47,949 --> 00:24:48,039
Okay.

422
00:24:48,619 --> 00:24:52,209
We have this a couple of commands
that are a bit under construction.

423
00:24:52,779 --> 00:24:58,229
Right now there is flocks build
and we have a little message,

424
00:24:58,429 --> 00:24:59,809
a little playful message here.

425
00:24:59,909 --> 00:25:03,389
But this is actually functional
it's got a help message and you can

426
00:25:03,449 --> 00:25:07,079
pop some build commands into your
manifest and you can start wrapping

427
00:25:07,079 --> 00:25:10,449
your build in a way where the outputs
will be shoved into a Nix store.

428
00:25:10,939 --> 00:25:14,239
The thing that we are working on
here is to also give you a ladder.

429
00:25:14,659 --> 00:25:19,079
So that you can't just you can take your
impure software that relies on public

430
00:25:19,079 --> 00:25:22,699
sources and the Internet and, reaching out
to all of the resources of your system,

431
00:25:23,049 --> 00:25:25,879
and then you can start to constrain it
a little bit, maybe turn the Internet

432
00:25:25,879 --> 00:25:30,539
off and then also not be able to access
every single file path on the system.

433
00:25:30,539 --> 00:25:34,939
That would be good because then
you can start to reel in the clock

434
00:25:34,939 --> 00:25:38,834
and Turn on all the build flags to
make your build fully reproducible.

435
00:25:38,874 --> 00:25:43,224
How do we make that easy for you so that
you can get the full power of Knicks and

436
00:25:43,224 --> 00:25:48,064
then start having an incredible cash hit
ratio inside of your inside of your build

437
00:25:48,064 --> 00:25:51,734
systems to where like maybe your builds
are two seconds that would be awesome.

438
00:25:52,264 --> 00:25:56,114
And the other thing that
we have going here is.

439
00:25:56,419 --> 00:26:00,849
If you actually, this is a
public repo Fluxenvs Verba.

440
00:26:01,329 --> 00:26:04,519
This is also available on FluxHub,
which is a service we provide.

441
00:26:04,789 --> 00:26:10,479
You can just like, Fluxactivate
rflux verba to get to this.

442
00:26:11,159 --> 00:26:13,089
But I'm just gonna activate here.

443
00:26:14,499 --> 00:26:16,429
And actually.

444
00:26:16,924 --> 00:26:19,074
I'm going to add the start services flag.

445
00:26:20,644 --> 00:26:20,934
Cool.

446
00:26:20,964 --> 00:26:30,364
I have a service running, and I'm just
going to prepare going to local host 8000.

447
00:26:32,474 --> 00:26:35,264
So you can see that I've got
this this retrieval augmented

448
00:26:35,534 --> 00:26:37,204
generation application.

449
00:26:37,224 --> 00:26:40,489
We have a stack of a couple
of services running here.

450
00:26:41,009 --> 00:26:45,439
If you look at Phlox Edit Python
3 Weaviate Vector Database Olama,

451
00:26:45,929 --> 00:26:50,359
which is in charge of pulling
generative AI models for us locally.

452
00:26:50,789 --> 00:26:54,639
A couple of pre printing things make
sure Bash and Curl are just pinned.

453
00:26:55,159 --> 00:27:00,279
This, I love this because like this, you
can actually write a bash script that will

454
00:27:00,279 --> 00:27:02,689
behave expectedly on somebody's machine.

455
00:27:03,079 --> 00:27:04,189
And you don't have to worry.

456
00:27:05,289 --> 00:27:08,289
And then same thing like the version
of curl on somebody's machine, like

457
00:27:08,299 --> 00:27:11,329
you can make sure that it has the
HTTP 2 protocol in it or something.

458
00:27:11,849 --> 00:27:16,139
You can pin like sed and awk and not
use the BSD version of tar ever again.

459
00:27:16,229 --> 00:27:18,119
And it would, it just
makes your life better.

460
00:27:18,469 --> 00:27:18,859
But yeah.

461
00:27:18,859 --> 00:27:19,919
So some variables.

462
00:27:20,419 --> 00:27:23,919
Hop into hooks over here, so you can
see that we're starting to feel a little

463
00:27:23,919 --> 00:27:27,399
bit like Docker Compose, but just in
a TOML format and with no containers.

464
00:27:27,409 --> 00:27:29,299
It's just going to run
processes on your machine.

465
00:27:29,799 --> 00:27:33,489
In the services section here start
a vector database, start a llama

466
00:27:33,929 --> 00:27:37,704
conditionally wait if a certain
environment variable is set.

467
00:27:37,854 --> 00:27:42,574
If not, just immediately start the
Verba UI service for talking to

468
00:27:42,574 --> 00:27:46,364
the RAG application and then also
waiting for Elamit to be ready and

469
00:27:46,364 --> 00:27:47,684
then pulling some models into it.

470
00:27:47,734 --> 00:27:49,744
There's a couple of long
running services here and then

471
00:27:49,744 --> 00:27:51,774
one kind of one shot service.

472
00:27:51,974 --> 00:27:54,574
And you can see that we're
intending to run this on ARM

473
00:27:54,574 --> 00:27:56,554
Macs and any Linux machine.

474
00:27:58,179 --> 00:28:00,939
It's also a Python virtual
environment being activated there.

475
00:28:01,579 --> 00:28:09,729
If I do box services status you can
see our models have completed and

476
00:28:09,759 --> 00:28:14,919
we are running the VectorDB Olama
for our model execution and then our

477
00:28:14,929 --> 00:28:17,199
frontend and you can get the logs.

478
00:28:18,199 --> 00:28:22,009
So it feels a lot like Docker
Compose, but with no containers.

479
00:28:22,099 --> 00:28:23,829
Here's what doesn't feel
like Docker Compose.

480
00:28:24,319 --> 00:28:26,809
Let's open some

481
00:28:29,259 --> 00:28:31,049
other shells here.

482
00:28:31,439 --> 00:28:34,209
Let's make sure to just activate those.

483
00:28:36,449 --> 00:28:39,519
We don't have to start services
again, because Phlox already knows

484
00:28:39,799 --> 00:28:41,099
that this environment is active.

485
00:28:41,689 --> 00:28:45,839
What Phlox also knows is that if I
close the first one and then I close the

486
00:28:45,839 --> 00:28:49,419
second one, the third one, or whatever,
like I'm still working on things.

487
00:28:49,419 --> 00:28:49,489
Thanks.

488
00:28:50,504 --> 00:28:53,784
But that I just make a, just
so I don't lose my window here.

489
00:28:54,074 --> 00:28:59,214
If I close the last active environment
the services will immediately go offline.

490
00:28:59,244 --> 00:29:01,934
So that's a really sweet feature
because now you don't have

491
00:29:01,934 --> 00:29:03,434
databases eating up your battery.

492
00:29:03,974 --> 00:29:10,234
It's just the benefit of working
on a computer and actually using

493
00:29:10,234 --> 00:29:12,554
it instead of pretending that
it's a Linux virtual machine.

494
00:29:14,174 --> 00:29:14,754
All right.

495
00:29:15,754 --> 00:29:17,994
Last here's the first bit
that doesn't work on a Mac.

496
00:29:20,424 --> 00:29:22,104
Let's go to

497
00:29:24,334 --> 00:29:28,014
the box end for Go.

498
00:29:30,174 --> 00:29:31,794
And let's try to containerize it.

499
00:29:32,294 --> 00:29:33,474
We're done with our workflow.

500
00:29:33,504 --> 00:29:34,884
We want to get to the artifact part.

501
00:29:35,394 --> 00:29:36,094
It says error.

502
00:29:36,124 --> 00:29:37,874
Containerized is only supported on Linux.

503
00:29:37,884 --> 00:29:39,104
So we're trying to fix this.

504
00:29:39,304 --> 00:29:41,604
It's probably going to require
some sort of kemu thing.

505
00:29:42,234 --> 00:29:50,879
But at some point maybe when It's possible
to execute Nix with Wasm or something.

506
00:29:50,879 --> 00:29:54,879
Maybe that could be interesting, but for
now we'll probably need a Linux virtual

507
00:29:54,879 --> 00:29:56,569
machine or like some sort of path.

508
00:29:56,619 --> 00:30:02,249
You can always start your own VM, but I'm
just going to ssh over back to my Windows

509
00:30:02,289 --> 00:30:07,709
machine and let's pop back into Zshell.

510
00:30:08,769 --> 00:30:09,969
Let's find,

511
00:30:12,729 --> 00:30:15,929
so I built this like little
Phlox environment, just,

512
00:30:16,259 --> 00:30:18,139
initialize to get repo in here.

513
00:30:18,929 --> 00:30:23,389
And I have a couple of dependencies
and I can containerize this.

514
00:30:24,389 --> 00:30:29,779
What this is doing is it's taking the
environment that has been built with

515
00:30:29,779 --> 00:30:36,009
Nix which you, let's see, I guess I
can show that in a few seconds, but

516
00:30:36,269 --> 00:30:38,349
we inflate this all the way through.

517
00:30:38,779 --> 00:30:42,069
And that environment has a bunch
of other dependencies in it.

518
00:30:42,769 --> 00:30:47,429
And it is putting each of those granular
dependencies into a container layer.

519
00:30:48,194 --> 00:30:51,904
This is really awesome because container
layers are already content addressed.

520
00:30:52,624 --> 00:30:56,894
And all Nix store paths are also content
addressable inside of a binary cache.

521
00:30:57,784 --> 00:31:02,524
So you could get to a world where
every single Nix package is stored

522
00:31:02,524 --> 00:31:04,544
inside of an OCI repository.

523
00:31:04,544 --> 00:31:07,404
And you could even have a pull through
cache that's like right next to your

524
00:31:07,404 --> 00:31:12,554
cluster that only pulls layers that
are each individual packages, right?

525
00:31:13,124 --> 00:31:17,634
And we are trying to construct
a perfectly efficient container.

526
00:31:17,999 --> 00:31:22,789
Container image here that can be fully de
duplicated in storage and then have the

527
00:31:22,789 --> 00:31:25,609
highest cache hit ratio possible, right?

528
00:31:25,629 --> 00:31:28,839
You're no longer having like
multiple versions of bash stored

529
00:31:28,839 --> 00:31:30,449
across 30 different images.

530
00:31:30,819 --> 00:31:35,339
There's just The versions of bash
in your registry and your images

531
00:31:35,469 --> 00:31:36,729
linked to the one that they want.

532
00:31:37,279 --> 00:31:39,829
And if you get container D to
unpack these layers, just like

533
00:31:39,829 --> 00:31:43,309
any other container image, then it
ends up in an overlay file system.

534
00:31:44,149 --> 00:31:47,039
And what's going on with this?

535
00:31:47,394 --> 00:31:48,854
So this is a little bit sad.

536
00:31:49,354 --> 00:31:51,354
Unfortunately, there is a layer limit.

537
00:31:51,834 --> 00:31:54,754
In, with normal Docker containers.

538
00:31:54,784 --> 00:31:59,664
And it comes from the Linux kernel's
inability to construct an Overlay2 file

539
00:31:59,664 --> 00:32:03,214
system with more than like 127 mount arcs.

540
00:32:03,714 --> 00:32:07,564
And so here we're capping at 99
just so that there's more, another

541
00:32:07,564 --> 00:32:11,464
20 or 25 layers of space, for you
to stack on top of it before you're

542
00:32:11,474 --> 00:32:12,854
getting close to that layer limit.

543
00:32:13,454 --> 00:32:17,554
But in once we get to the end, we
have to heuristically pick a list

544
00:32:17,554 --> 00:32:19,804
of packages to combine into layers.

545
00:32:19,844 --> 00:32:25,144
And this completely messes up with,
the cash hit for all of these things

546
00:32:25,234 --> 00:32:27,674
because it will probably be a different
list for different containers.

547
00:32:28,464 --> 00:32:30,044
So this is unfortunate.

548
00:32:30,414 --> 00:32:31,764
How do we fix this?

549
00:32:32,264 --> 00:32:37,884
The folks at PDT Partners have built
a Containerd snapshot or plugin

550
00:32:38,444 --> 00:32:40,994
that integrates directly with Nix.

551
00:32:41,304 --> 00:32:45,484
And I have a pretty bare bones
NixOS configuration here, but if

552
00:32:45,484 --> 00:32:47,934
I go to Etsy NixOS Configuration.

553
00:32:47,934 --> 00:32:54,544
nix, you can see that I have added
a a Nix snapshot or import here.

554
00:32:54,544 --> 00:32:57,284
So this is Nix expressions
in the Nix language.

555
00:32:57,904 --> 00:33:02,684
It looks sort of JSON y, but then
it's, the stack traces are terrible.

556
00:33:03,134 --> 00:33:03,864
That's the difference

557
00:33:05,904 --> 00:33:12,044
and yeah, we've so we define an import
for the Nix snapshot or project from PDT

558
00:33:12,044 --> 00:33:13,754
partners that's just on their GitHub.

559
00:33:14,254 --> 00:33:16,824
They have a great readme, I pretty
much just copied and pasted this

560
00:33:16,824 --> 00:33:22,054
right in from it into my NixOS
config to just customize it.

561
00:33:22,954 --> 00:33:30,004
And you can enable the systemd unit
from the NixOS package and module

562
00:33:30,014 --> 00:33:36,184
for container D and then use their
module to patch next snapshot or on

563
00:33:36,184 --> 00:33:38,464
top of it and then enable it, right?

564
00:33:38,464 --> 00:33:39,644
So that's what's happening here.

565
00:33:40,844 --> 00:33:45,894
And the end result is that
if I pseudo nerd CTL info.

566
00:33:46,239 --> 00:33:50,639
Then you'll see that in
storage, Containerd now supports

567
00:33:50,849 --> 00:33:52,799
native overlayfs and Nix.

568
00:33:53,359 --> 00:33:57,429
And what this means is that we've, if
we build a special OCI manifest that

569
00:33:57,429 --> 00:34:04,129
points to Nix store paths, that instead
of Containerd pulling layers from an

570
00:34:04,139 --> 00:34:09,119
OCI repository, it will talk to the Nix
daemon, and the Nix daemon will pull

571
00:34:09,929 --> 00:34:17,319
just derivations, like directly from
whatever Nix store and whatever binary

572
00:34:17,349 --> 00:34:21,289
caches it can get to and then it will
fulfill like sort of its promise to

573
00:34:21,289 --> 00:34:25,549
container D and container D will take
that Nix store path and it will bind

574
00:34:25,569 --> 00:34:28,249
mount it into our container for us.

575
00:34:28,539 --> 00:34:32,579
And because bind mounts are
a lot cheaper than overlays.

576
00:34:33,049 --> 00:34:36,971
The Linux kernel is happy to do
lots and lots and lots of them.

577
00:34:37,371 --> 00:34:42,451
The, I think that in the rough research
that I did recent Linux kernels have a

578
00:34:42,461 --> 00:34:47,951
limit of a hundred thousand bind amounts
which seems like it would be enough

579
00:34:47,951 --> 00:34:51,851
to maybe run a thousand containers or
something with a hundred bind amounts of

580
00:34:51,881 --> 00:34:55,551
different packages, Or maybe a hundred
containers with a thousand bind amounts.

581
00:34:56,101 --> 00:34:59,191
Yeah, the math seems to check out
there and that it might scalably

582
00:34:59,191 --> 00:35:00,931
be something interesting to do.

583
00:35:01,331 --> 00:35:04,241
Another idea that I had here is
that maybe it might be possible

584
00:35:04,241 --> 00:35:09,451
to tombstone the next door somehow
with an overlay in a creative way.

585
00:35:09,851 --> 00:35:12,371
I'm not sure fully if that would
work yet because you would have

586
00:35:12,371 --> 00:35:17,021
to update the tombstones while the
next door was being updated and that

587
00:35:17,021 --> 00:35:18,356
could maybe get race conditioning.

588
00:35:19,321 --> 00:35:22,811
You wouldn't want store paths
showing up in containers that

589
00:35:22,811 --> 00:35:23,911
were not supposed to be there.

590
00:35:24,781 --> 00:35:26,561
But there's a lot of opportunity here.

591
00:35:26,621 --> 00:35:30,091
Because you could potentially
like, I don't know, de

592
00:35:30,091 --> 00:35:31,641
duplicate all of Docker Hub.

593
00:35:32,041 --> 00:35:36,021
If we could just get the ecosystem
to move towards a little bit

594
00:35:36,021 --> 00:35:37,471
more organized packaging.

595
00:35:37,861 --> 00:35:41,371
And you certainly could just like
very much de duplicate your own

596
00:35:41,431 --> 00:35:43,141
Elastic Container Registry account.

597
00:35:43,241 --> 00:35:43,421
Huh.

598
00:35:43,796 --> 00:35:45,756
Or reduce the number of hard
drives that you have for your

599
00:35:45,756 --> 00:35:47,346
local harbor installation.

600
00:35:47,826 --> 00:35:50,576
There's a lot of opportunity
here as cloud native.

601
00:35:51,136 --> 00:35:57,731
As far as building these images goes,
you actually need to Read the README

602
00:35:57,741 --> 00:36:00,041
and then learn how to do Nix right now.

603
00:36:00,341 --> 00:36:03,971
And so there's opportunity for us
as the Phlox project to make it

604
00:36:04,371 --> 00:36:10,601
simpler for you to basically call
this helper function that's included

605
00:36:10,601 --> 00:36:12,371
in the NixSnapper Shotter project.

606
00:36:13,561 --> 00:36:17,301
The schema is fairly simple
and then you can see here that

607
00:36:17,301 --> 00:36:19,161
the entry point is being set.

608
00:36:19,551 --> 00:36:22,011
To a package that's coming
from Nix expressions.

609
00:36:22,021 --> 00:36:26,451
That's how this Docker image is
ultimately being constructed as a tarball

610
00:36:27,021 --> 00:36:29,221
and then exported from this flake.

611
00:36:29,571 --> 00:36:34,411
But in this example, and maybe there
are some simpler interfaces that

612
00:36:34,411 --> 00:36:35,681
we can build to that in the future.

613
00:36:35,961 --> 00:36:39,311
The last thing that I would like to
highlight here that really contextualizes,

614
00:36:39,371 --> 00:36:47,291
like going from artifact to run time out
of the changed habits of workflow by using

615
00:36:47,461 --> 00:36:52,561
Nixie tools to get cleaner dependencies
that are factored for your system is

616
00:36:52,611 --> 00:36:59,421
that we could make Nix stores potentially
fairly native to OCI repositories.

617
00:37:00,201 --> 00:37:05,511
And this is really attractive because
if what is going into the container

618
00:37:05,511 --> 00:37:10,321
image are runtime dependencies that
are actually factored as Nix packages.

619
00:37:10,671 --> 00:37:14,901
And those are the things that Containerd
is actually reaching out for and

620
00:37:14,901 --> 00:37:20,811
then we could potentially even teach
Containerd to support non conflicting

621
00:37:21,551 --> 00:37:24,181
layers because you don't need overlays.

622
00:37:24,976 --> 00:37:28,086
And maybe it wouldn't be fully
dependent on Nix anymore, so there

623
00:37:28,086 --> 00:37:31,476
would be like a non conflicting layer
snapshotter or something like that.

624
00:37:31,976 --> 00:37:33,976
That way you wouldn't have to
have a Nix daemon everywhere.

625
00:37:34,586 --> 00:37:38,166
Then, we could just throw Nix
packages in an OCI registry.

626
00:37:38,306 --> 00:37:39,316
All of them, even.

627
00:37:39,596 --> 00:37:47,496
And, when you work on Nix stuff, Nix would
know how to pull from the OCI registry.

628
00:37:48,036 --> 00:37:53,101
And, when you Are then building, you
don't have to push anything back because

629
00:37:53,101 --> 00:37:55,651
it's already there in the OCI repo.

630
00:37:55,651 --> 00:38:00,471
So you just push a tagged manifest that
references the things that you need.

631
00:38:00,811 --> 00:38:02,991
It's like maybe a couple of kilobytes.

632
00:38:03,461 --> 00:38:06,521
And then now you're done.

633
00:38:06,776 --> 00:38:11,946
Kubernetes cluster, all 100 nodes
or whatever have immediate cache

634
00:38:11,956 --> 00:38:16,346
deduplicated access to those things, and
you can start your containers instantly

635
00:38:16,406 --> 00:38:18,356
with no pull difference or anything.

636
00:38:18,746 --> 00:38:22,986
And then when you need to update a
package, you change something in a

637
00:38:22,986 --> 00:38:26,976
flux manifest, and it updates on all
of your developer workstations and

638
00:38:26,976 --> 00:38:30,646
CI automatically builds it, and then
it just gets pushed out and there are

639
00:38:30,646 --> 00:38:32,306
these very small layer differences.

640
00:38:32,736 --> 00:38:34,356
And you can see a world where.

641
00:38:34,831 --> 00:38:38,001
The software supply chain is so much
more maintainable, that could be a

642
00:38:38,001 --> 00:38:41,811
really cool place to get to, and maybe
that would free us up for the cyclist to

643
00:38:41,811 --> 00:38:46,331
actually pay all of the maintainers to
keep the supply chain secure, and then

644
00:38:46,331 --> 00:38:50,381
we can trust the updates because we can
install the proper social machinery,

645
00:38:50,481 --> 00:38:55,241
to build a cleaner ecosystem instead
of This sort of workaround that we've

646
00:38:55,241 --> 00:38:59,861
gotten to with docker containers, where
a virtualization technology has become

647
00:38:59,891 --> 00:39:04,171
a distribution and packaging format
but without the packaging discipline.

648
00:39:04,771 --> 00:39:07,841
I think that there's so much excite.

649
00:39:08,231 --> 00:39:10,161
It's exciting opportunity here.

650
00:39:10,191 --> 00:39:12,951
Consider this a preview of some of
the things that we are building and

651
00:39:12,951 --> 00:39:18,391
looking to talk about at KubeCon and
at Regex and coming into the later part

652
00:39:18,391 --> 00:39:20,101
of this year and into early next year.

653
00:39:20,301 --> 00:39:22,361
So we're building a private catalogs.

654
00:39:22,361 --> 00:39:27,831
We're finishing up the pure builds
portion of the Flux build experience

655
00:39:28,151 --> 00:39:31,471
looking at export operations for
containers and that kind of thing

656
00:39:32,001 --> 00:39:33,551
and getting into the runtime.

657
00:39:35,001 --> 00:39:40,411
I'm trying to do my best to bring
my Kubernetes context to all of

658
00:39:40,461 --> 00:39:46,061
my teammates who know so much
about Nix, and I'm learning a lot.

659
00:39:46,061 --> 00:39:46,861
It's very humbling.

660
00:39:47,361 --> 00:39:51,081
But if you heard me said if you
heard me say anything spicy anything

661
00:39:51,081 --> 00:39:53,841
that resonated with you, let's start
a little bit of public discourse.

662
00:39:53,851 --> 00:39:55,321
I can't wait to field your questions.

663
00:39:55,771 --> 00:39:59,171
And there's so much to be
excited about in this space.

664
00:39:59,521 --> 00:40:02,491
Thanks for coming in and hearing
about Phlox a little bit.

665
00:40:02,541 --> 00:40:03,371
You can go to phlox.

666
00:40:03,381 --> 00:40:07,001
dev and install and change your workflow.

667
00:40:07,451 --> 00:40:11,451
And hopefully those workflow changes
will produce a little bit of ergonomic

668
00:40:11,461 --> 00:40:16,781
efficiency for your team and can produce
habits that produce more cleanly factored

669
00:40:16,791 --> 00:40:21,561
dependencies for your artifacts and
that eventually paint a long term story

670
00:40:21,581 --> 00:40:25,001
for changing the runtime and maybe even
reinventing the container image format a

671
00:40:25,001 --> 00:40:27,011
little bit, getting past the layer limit.

672
00:40:28,411 --> 00:40:29,161
Thank you friends.

673
00:40:29,461 --> 00:40:33,321
And I will see you on the
internets and at the conferences.

