1
00:00:00,190 --> 00:00:00,850
Hello, everyone.

2
00:00:00,880 --> 00:00:01,420
Good day.

3
00:00:02,070 --> 00:00:03,299
This is Pavan Vovveti.

4
00:00:04,130 --> 00:00:07,609
Welcome to Conf42
Incident Management 2024.

5
00:00:08,210 --> 00:00:10,940
Today, I'm going to talk about
the role of API security in

6
00:00:10,950 --> 00:00:12,540
modern enterprise platforms.

7
00:00:13,410 --> 00:00:18,090
Let us explore the challenges, the
security challenges, best practices,

8
00:00:18,169 --> 00:00:20,229
and future trends in securing APIs.

9
00:00:21,189 --> 00:00:27,490
Before I even go there, I have a
disclaimer to say the views and opinions

10
00:00:27,490 --> 00:00:29,860
expressed in this presentation are my own.

11
00:00:30,230 --> 00:00:33,830
and do not represent the views
or official position of my

12
00:00:33,950 --> 00:00:35,690
current and previous employers.

13
00:00:36,310 --> 00:00:40,030
The content is based on
general industry knowledge and

14
00:00:40,060 --> 00:00:41,680
publicly available information.

15
00:00:42,130 --> 00:00:46,329
No proprietary or confidential information
will be shared during this talk.

16
00:00:47,650 --> 00:00:47,969
Thank you.

17
00:00:47,970 --> 00:00:51,199
A little bit background about me.

18
00:00:51,750 --> 00:00:55,030
I'm a seasoned technology
professional with over 15 years

19
00:00:55,070 --> 00:00:58,590
experience in application development
across diverse industries.

20
00:00:59,135 --> 00:01:02,365
Academically, I hold a master's
degree in computer science from

21
00:01:02,365 --> 00:01:05,075
Staffordshire University, England, UK.

22
00:01:05,935 --> 00:01:10,405
My expertise lies in blending robust
security measures with cutting edge

23
00:01:10,435 --> 00:01:14,544
development practices, ensuring the
seamless integration of security

24
00:01:14,544 --> 00:01:15,914
into the development life cycle.

25
00:01:16,404 --> 00:01:21,005
With over 10 years of focused
experience in security, particularly

26
00:01:21,595 --> 00:01:25,645
in application security, platform
architecture, and API security.

27
00:01:28,104 --> 00:01:33,185
What I'm going to talk about today
Introduction to API security challenges,

28
00:01:33,655 --> 00:01:39,685
what are the best practices, industry
guidelines for API security, implementing

29
00:01:39,685 --> 00:01:44,794
security across the API lifecycle, what
are the various tools and technologies

30
00:01:44,835 --> 00:01:50,675
available in the industry to enhance the
security posture within the organization.

31
00:01:50,755 --> 00:01:53,965
I have two case studies to talk about.

32
00:01:54,164 --> 00:01:54,794
One is the.

33
00:01:55,315 --> 00:02:01,175
a large financial organization, how
they implemented successfully the

34
00:02:01,185 --> 00:02:06,495
security, by following the security
guidelines, the lessons learned from

35
00:02:06,555 --> 00:02:11,615
a security breach, the future trends
in API security, and then conclusion.

36
00:02:12,344 --> 00:02:15,295
Let's deep dive into the
introduction to API security.

37
00:02:15,905 --> 00:02:19,875
APIs have become the backbone of
modern enterprise platforms, playing

38
00:02:19,875 --> 00:02:22,255
a pivotal role in enabling seamless.

39
00:02:22,540 --> 00:02:25,420
integration and communication
between the component to

40
00:02:25,420 --> 00:02:27,120
component or system to system.

41
00:02:27,630 --> 00:02:32,000
They allow business to connect
applications, services, platform

42
00:02:32,000 --> 00:02:35,619
efficiently, supporting a range
of operations from cloud computing

43
00:02:35,620 --> 00:02:37,220
to mobile app integrations.

44
00:02:38,149 --> 00:02:42,470
However, this is very interconnectedness,
exposing the organizations to

45
00:02:42,470 --> 00:02:44,270
a significant security risk.

46
00:02:46,375 --> 00:02:50,235
Often handling sensitive data
like personal user information

47
00:02:50,235 --> 00:02:54,165
or business intelligence can
become prime targets for any cyber

48
00:02:54,175 --> 00:02:56,815
attacks if not adequately secured.

49
00:02:58,915 --> 00:03:04,425
Saying that, as APIs become more integral
to business processes, ensuring their

50
00:03:04,444 --> 00:03:09,074
security is not just a technical concern
but a critical business priority.

51
00:03:09,074 --> 00:03:17,134
The APIs can be severe, ranging from
data breaches and huge financial losses.

52
00:03:17,965 --> 00:03:22,805
Sometimes it even damages the reputation
of the company or organization

53
00:03:23,265 --> 00:03:25,475
and even regulatory penalties.

54
00:03:27,184 --> 00:03:29,815
What are the challenges
we have in the industry?

55
00:03:30,024 --> 00:03:36,084
So these are the main challenges
I put just to discuss here,

56
00:03:36,424 --> 00:03:37,995
within the timeframe available.

57
00:03:38,284 --> 00:03:42,155
The authentication and authorization,
ensuring only authorized

58
00:03:42,195 --> 00:03:43,935
users can access resources.

59
00:03:45,875 --> 00:03:46,715
What does it mean?

60
00:03:46,755 --> 00:03:56,325
So any user interacting with any of our
system to have the data, the user is, have

61
00:03:56,325 --> 00:04:01,275
access to the data, which we are going
to provide from the company APIs or any

62
00:04:01,275 --> 00:04:05,755
service we provide to retrieve the data
from our data servers or data storage.

63
00:04:06,465 --> 00:04:10,885
So user allowed is, does he
have, does that person has.

64
00:04:11,610 --> 00:04:18,290
Permissions are related to the groups,
belong to the groups or policies.

65
00:04:18,630 --> 00:04:25,290
So how do we make sure this user is the
right user to have the, to have these

66
00:04:25,310 --> 00:04:27,419
data which we are providing to the user?

67
00:04:27,970 --> 00:04:31,240
And also, of course, the
authentication methods can expose

68
00:04:31,240 --> 00:04:32,850
APS to unauthorized access.

69
00:04:33,560 --> 00:04:37,420
Before even we authorize the user,
we need to authenticate the user.

70
00:04:38,820 --> 00:04:43,580
is that person is the same person
which we have registered or which

71
00:04:43,760 --> 00:04:47,680
registered with us and the second
one is the data encryption.

72
00:04:48,030 --> 00:04:51,559
Data in transit must be encrypted
to prevent interception.

73
00:04:52,280 --> 00:04:56,649
Weak encryption protocols can leave data
vulnerable to man in the middle attacks.

74
00:04:56,650 --> 00:05:03,900
Any API to API communication at a
data encryption at rest will prevent

75
00:05:03,900 --> 00:05:05,100
the man in the middle attack.

76
00:05:05,160 --> 00:05:05,650
Any.

77
00:05:05,975 --> 00:05:14,215
Say example, API 1 is calling API 2, a
bad actor in the middle, intercept the,

78
00:05:14,365 --> 00:05:19,195
intercept over the network, the HTTP
request or response to have the data.

79
00:05:19,205 --> 00:05:24,944
So if we encrypt the data, that will
be more difficult for a bad actor to,

80
00:05:25,154 --> 00:05:28,084
to have the data, to process the data.

81
00:05:28,644 --> 00:05:31,924
And there is one more rate
limiting preventing abuse.

82
00:05:32,689 --> 00:05:36,629
a denial of service attacks by
controlling the number of API

83
00:05:36,629 --> 00:05:38,139
requests made within a time frame.

84
00:05:38,839 --> 00:05:42,919
Misconfigured rate limits can
either throttle legitimate traffic

85
00:05:42,919 --> 00:05:44,539
or expose APIs to overload.

86
00:05:45,609 --> 00:05:46,449
what is the rate limit?

87
00:05:46,459 --> 00:05:52,894
So any API I have, I can configure
how many requests per second or per

88
00:05:52,894 --> 00:05:58,759
minute I can have it as per my business
requirements or business, needs.

89
00:05:59,064 --> 00:06:05,724
to have the, to have the interaction
with my, the lowest possible, data

90
00:06:05,734 --> 00:06:10,784
storage or, any other system to
retrieve the data I can configure,

91
00:06:10,844 --> 00:06:12,724
I can configure the rate limit.

92
00:06:13,114 --> 00:06:19,204
My API is going to have only 50
requests per second or a hundred

93
00:06:19,204 --> 00:06:20,304
seconds, a hundred requests.

94
00:06:21,544 --> 00:06:25,614
So that I know when any number
increased all of a sudden,

95
00:06:25,624 --> 00:06:27,144
that means that's an abuse.

96
00:06:27,594 --> 00:06:32,114
That's maybe a distributed denial
of service attack so that I can

97
00:06:32,124 --> 00:06:37,144
shut off my API and prevent the
security loss and the API versioning.

98
00:06:37,414 --> 00:06:40,794
Managing multiple API versions
securely, especially when

99
00:06:40,804 --> 00:06:42,389
older versions are deprecated.

100
00:06:42,949 --> 00:06:47,829
Ensures the outdated versions don't
become security vulnerabilities.

101
00:06:47,919 --> 00:06:48,729
What does it mean?

102
00:06:49,099 --> 00:06:51,019
The API is over the period.

103
00:06:51,089 --> 00:06:52,579
My business might be growing.

104
00:06:53,029 --> 00:06:55,549
My customer's base is increasing.

105
00:06:55,849 --> 00:06:58,829
So I may need to provide
the more features.

106
00:06:59,079 --> 00:07:02,859
I may need to provide the more
functionality to the user to

107
00:07:02,859 --> 00:07:05,109
have the best user experience.

108
00:07:05,299 --> 00:07:09,179
So in that journey, I
might create more APIs.

109
00:07:10,509 --> 00:07:14,739
When I create more APIs, my, my
surface attacks will be more,

110
00:07:14,740 --> 00:07:16,449
my risk is going to increase.

111
00:07:16,779 --> 00:07:22,469
So how do I make sure my APIs are
not vulnerable by having so many APIs

112
00:07:22,499 --> 00:07:24,859
implementation in, in, in that journey?

113
00:07:25,449 --> 00:07:30,059
So the API versioning is
crucial in that manner.

114
00:07:30,379 --> 00:07:34,819
Say I have a feature one implemented
in V1 version of API one.

115
00:07:35,429 --> 00:07:40,409
And I have feature two and feature three
implemented with the API version two.

116
00:07:40,999 --> 00:07:46,429
So instead of having V1 and V2, and there
is a need of V3 again in the future.

117
00:07:46,799 --> 00:07:52,539
So I deprecate my V1, I clubbed all my
feature, feature one, feature two, feature

118
00:07:52,579 --> 00:07:58,679
three, and feature four in API version
three, and I have N minus one for support

119
00:07:58,709 --> 00:08:04,359
to the customers and basically giving
them, giving our clients, consumers.

120
00:08:04,824 --> 00:08:12,054
Some time frame to migrate to the V2
to V3 so that I always have n and n 1

121
00:08:13,594 --> 00:08:19,484
in the, in basically a live API calls
provides, from, for the consumers.

122
00:08:19,624 --> 00:08:24,104
So let's talk about the best
practices for API security.

123
00:08:24,624 --> 00:08:31,114
So implementing OAuth2, TLS and
encryption, API gateway, regular audits.

124
00:08:31,384 --> 00:08:32,174
So what does it mean?

125
00:08:32,204 --> 00:08:37,344
OAuth2 is a token based authentication
protocol, enables secure access

126
00:08:37,344 --> 00:08:41,714
by allowing users to authenticate
without exposing passwords.

127
00:08:42,184 --> 00:08:42,974
So what does it mean?

128
00:08:43,154 --> 00:08:49,749
So before I even hit any API, I hit
a token server, the token server,

129
00:08:49,789 --> 00:08:55,849
the token management system gives a
token with a minimum, minimum expiry

130
00:08:55,849 --> 00:08:58,749
time, say one minute or 30 seconds.

131
00:08:58,779 --> 00:09:02,179
We can configure that according
to the organizational policy

132
00:09:02,459 --> 00:09:04,539
or organizational, situations.

133
00:09:04,899 --> 00:09:10,079
Then we can basically the token
management system provides two things.

134
00:09:10,099 --> 00:09:10,299
One is.

135
00:09:11,824 --> 00:09:15,204
generation of the tokens and
destroy the tokens once the

136
00:09:15,204 --> 00:09:16,954
operation is completed by the user.

137
00:09:17,594 --> 00:09:22,394
And the TLS encryption, the transport
layer security should be enforced for all

138
00:09:22,394 --> 00:09:26,494
API traffic to protect data in transit
from interception or manipulation.

139
00:09:26,904 --> 00:09:31,564
The TLS communication, a component
to component or system to system.

140
00:09:31,904 --> 00:09:35,634
If there is no API or even API
involved, we can have the mutual TLS.

141
00:09:36,709 --> 00:09:41,279
The one dot one dot three is the
latest but most of widely used

142
00:09:42,219 --> 00:09:47,099
Dls encryption version is a one
dot two is most secure nowadays

143
00:09:47,739 --> 00:09:50,099
Everyone is moving to one dot three.

144
00:09:50,199 --> 00:09:57,879
It is more Enhanced version of security
and then api gateway the api gateway

145
00:09:57,879 --> 00:10:03,519
provides A centralized way to provide
the policies or to enforce the policies

146
00:10:03,539 --> 00:10:08,949
in between Whatever the apis or sys
services available under the api gateway.

147
00:10:09,239 --> 00:10:10,269
So what does it do?

148
00:10:10,869 --> 00:10:17,549
Basically, I have my api deployed in
any platform I don't need to expose the

149
00:10:17,549 --> 00:10:22,349
endpoint url with where by looking at
the api endpoint url Backend service

150
00:10:22,559 --> 00:10:25,809
url I can say is this deployed in aws?

151
00:10:25,809 --> 00:10:27,369
Is this deployed in azure?

152
00:10:27,370 --> 00:10:31,579
You is deployed in any other,
platform, or any cloud platform

153
00:10:31,589 --> 00:10:33,819
or any, Pivotal cloud, platform.

154
00:10:34,189 --> 00:10:40,799
without exposing the API endpoint
details, I can mask that endpoint

155
00:10:40,800 --> 00:10:45,529
URL with the API gateway URL so
that it will be generic for them.

156
00:10:45,559 --> 00:10:47,909
Internally, I configure
my backend service.

157
00:10:48,674 --> 00:10:54,714
into the API gateway URL so that any
public user or any internet exposed

158
00:10:54,744 --> 00:10:59,574
to service may not have where did
I deploy my service in the backend.

159
00:11:00,524 --> 00:11:05,864
And then logging, rate limit, logging,
what data, what kind of data I'm

160
00:11:05,894 --> 00:11:08,534
logging into the, any logging servers.

161
00:11:09,144 --> 00:11:09,954
enterprise way.

162
00:11:10,324 --> 00:11:12,394
So am I logging any sensitive data?

163
00:11:12,484 --> 00:11:16,994
am I masking the data or how are we
maintaining the logging, the levels,

164
00:11:17,494 --> 00:11:20,404
the info, warn, debug, errors?

165
00:11:20,574 --> 00:11:24,884
how am I logging my data based on my
environments, based on my log levels?

166
00:11:25,889 --> 00:11:29,479
The regular audits are nothing but
continuous monitoring and regular

167
00:11:29,499 --> 00:11:33,579
security audits help identify and
resolve the vulnerabilities before

168
00:11:33,579 --> 00:11:35,399
even they exploited by attackers.

169
00:11:35,949 --> 00:11:41,289
Regular audits helps us to
even go further in the design.

170
00:11:41,299 --> 00:11:47,049
Sometimes in the audits, we can even
think of the redesigning of any system

171
00:11:47,049 --> 00:11:49,969
or within the ecosystem, any component.

172
00:11:50,979 --> 00:11:53,169
Let's talk about the implementing.

173
00:11:53,519 --> 00:11:58,299
security across API lifecycle,
the security by design.

174
00:11:58,369 --> 00:12:05,239
So security by design means in
previous days, 10 years ago or five

175
00:12:05,239 --> 00:12:10,399
years ago, the security is a part of
NFR, the non functional requirement.

176
00:12:11,289 --> 00:12:17,909
But nowadays, shifting left to even
further at the design level, we think

177
00:12:17,909 --> 00:12:23,109
of the security posture and we integrate
the security from the earliest stages of

178
00:12:23,109 --> 00:12:29,594
development So that it ensures we build
any API which is secure and stable and,

179
00:12:29,694 --> 00:12:35,114
basically we do not want to have that
afterthought after the development, we go

180
00:12:35,114 --> 00:12:43,074
and see review or proactively we wanted
to move that shift left to the design

181
00:12:43,074 --> 00:12:49,554
level so that we do not miss or we do
not expose our APIs after the development

182
00:12:50,184 --> 00:12:52,414
code reviews and penetration testing.

183
00:12:52,924 --> 00:12:58,844
Regular code reviews helps us to identify
the vulnerabilities even before by, by

184
00:12:58,874 --> 00:13:04,464
having the penetration testing or scanning
like static scans or dynamic scans, or

185
00:13:04,574 --> 00:13:11,564
even any manual audits or manual scans
by a security experts before even if we

186
00:13:11,594 --> 00:13:16,744
deploy or even we basically move to the
higher environments within the ecosystem.

187
00:13:17,919 --> 00:13:21,409
Any static code analysis on dynamic
testing in development and pre

188
00:13:21,409 --> 00:13:26,049
production environments helps us
to reduce the security, to reduce

189
00:13:26,069 --> 00:13:27,819
the security vulnerabilities.

190
00:13:28,239 --> 00:13:30,109
DevSecOps collaboration.

191
00:13:30,569 --> 00:13:35,379
Adopting a DevSecOps approach
integrates security into the

192
00:13:35,379 --> 00:13:37,149
entire API development lifecycle.

193
00:13:37,589 --> 00:13:41,189
By fostering collaboration between
development, security, operations

194
00:13:41,189 --> 00:13:45,179
team, organizations can ensure the
continuous security improvements

195
00:13:45,179 --> 00:13:45,999
throughout the lifecycle.

196
00:13:46,069 --> 00:13:46,129
Thank you.

197
00:13:46,474 --> 00:13:51,244
So how do we achieve the, how do we
achieve that through the CICD pipelines

198
00:13:51,984 --> 00:13:56,804
in the CICD pipelines while building
the source code itself, I can integrate

199
00:13:56,804 --> 00:13:58,564
so many things in the pipeline.

200
00:13:58,564 --> 00:14:04,104
Say example, do I have any codes or
static codes or secrets or passwords

201
00:14:04,774 --> 00:14:11,004
in, in the source code, in my code,
I can even have that through many

202
00:14:11,004 --> 00:14:12,754
tools are available in the market.

203
00:14:13,194 --> 00:14:19,599
I can even say, Is my dot class or
Java class or whatever the technology

204
00:14:19,599 --> 00:14:25,269
you're using any of these classes
have the constants or secrets or

205
00:14:25,339 --> 00:14:27,929
passwords exposing in the source code.

206
00:14:28,249 --> 00:14:32,659
So that is one level we can even stop the
deployment to the development environment

207
00:14:32,769 --> 00:14:35,939
or QA environment, even before we make it.

208
00:14:36,789 --> 00:14:41,379
We build and jar it, make a jar
to available as a, as an API or

209
00:14:41,399 --> 00:14:45,559
further products or third party
vendors or third party products.

210
00:14:45,859 --> 00:14:50,209
So we can integrate the automation
test suits or security automation

211
00:14:50,219 --> 00:14:55,569
test suits to see the API endpoints,
the implementation of the tokens.

212
00:14:56,189 --> 00:15:00,509
How are the tokens, configurations
happened at the API properties level.

213
00:15:00,600 --> 00:15:06,489
The configuration reading and the
integration testing or any testing

214
00:15:06,489 --> 00:15:10,869
suits, we can run it and then move
to the further, higher environment.

215
00:15:11,239 --> 00:15:16,599
Then finally, into production deployment
so that we can reduce the any vulnerable

216
00:15:16,629 --> 00:15:23,479
or any threats happening at the core
level by CACD automation integration

217
00:15:23,759 --> 00:15:25,849
or scans, we can avoid those.

218
00:15:26,489 --> 00:15:30,509
The post deployment monitoring is
very important even after deployment.

219
00:15:30,834 --> 00:15:34,844
API security requires constant
vigilance, like putting alerts

220
00:15:34,874 --> 00:15:36,534
or notifications or warnings.

221
00:15:36,794 --> 00:15:42,314
what is the threshold or what is the
throughput we have at the API level?

222
00:15:42,664 --> 00:15:46,674
Implement real time monitoring
tools to detect suspicious activity.

223
00:15:47,004 --> 00:15:52,144
Anomaly detection, we can have this so
many, we have so many tools available

224
00:15:52,164 --> 00:15:54,924
to see the anomaly or bot detections.

225
00:15:55,024 --> 00:15:58,184
like any potential threats before
they cause significant damage.

226
00:16:00,079 --> 00:16:06,719
Let's talk about the tools and
technologies api security testing tools so

227
00:16:07,279 --> 00:16:11,539
The wasp job can identify vulnerabilities
while fuzzers test the robots robustness

228
00:16:11,540 --> 00:16:17,409
of api endpoints how are we going to
test I can even integrate any of the

229
00:16:17,529 --> 00:16:23,819
test scanners Like like gitlab provides
a gitlab duo or we can actually put into

230
00:16:23,819 --> 00:16:29,034
our source code itself You We have the
security management report, security

231
00:16:29,034 --> 00:16:33,464
tools, or how are we maintaining the,
dependency managements, what are the

232
00:16:33,464 --> 00:16:37,334
versions we are, what are the, patches,
available, or versions available.

233
00:16:37,654 --> 00:16:41,804
So we can have those by integrating
these security testing tools so

234
00:16:41,804 --> 00:16:43,494
that we will not be vulnerable.

235
00:16:43,694 --> 00:16:46,454
Our code is not vulnerable
to the bad actors.

236
00:16:47,034 --> 00:16:51,584
Web application firewalls tools
like AWS or Azure also provides.

237
00:16:51,929 --> 00:16:58,629
The WAF protect APIs from SQL injections
cross site scripting on and many other

238
00:16:58,629 --> 00:17:04,609
attacks the API management platforms
solutions like API gateway products like

239
00:17:04,789 --> 00:17:12,499
Google has many API gateway or AWS Have
or new soft or congo So these kind of

240
00:17:12,559 --> 00:17:16,149
API management platforms provide the
centralized security controls and we

241
00:17:16,149 --> 00:17:20,304
can even enforce the So we can enforce
the common policies in consistent manner

242
00:17:20,334 --> 00:17:22,694
within the ecosystem in the organization.

243
00:17:23,074 --> 00:17:27,334
We can enforce these policies
like rate limit or streaming.

244
00:17:27,604 --> 00:17:33,894
How are we streaming any of the
bigger data like in any, any order

245
00:17:33,894 --> 00:17:38,704
management where I have 20 MB more
than 20 MB through the API gateway.

246
00:17:38,704 --> 00:17:43,224
I can stream that by having a
few security policies enforced.

247
00:17:44,504 --> 00:17:47,654
Threat intelligence platforms,
the real time threat intelligence

248
00:17:47,654 --> 00:17:52,914
platforms help detect and block threats
specific to API vulnerabilities.

249
00:17:59,084 --> 00:18:03,254
Let us touch upon the case study one,
the successful implementation, how

250
00:18:03,324 --> 00:18:09,004
a large financial services company
implemented by using the OAuth2, the

251
00:18:09,004 --> 00:18:15,174
authentication API gateway by, by doing
these security controls, having the

252
00:18:15,174 --> 00:18:19,844
TLS and also continuous monitoring,
whatever we discussed earlier.

253
00:18:20,254 --> 00:18:24,314
They resulted over two years,
the measures resulted 70 percent

254
00:18:24,344 --> 00:18:28,734
reduction in API related security
incidents, significantly improving the

255
00:18:28,734 --> 00:18:30,534
company's overall security posture.

256
00:18:31,654 --> 00:18:36,224
The case study two does what are the
lessons we learned from a breach?

257
00:18:37,154 --> 00:18:40,644
There is a API breach in
social media platform recently

258
00:18:40,884 --> 00:18:42,924
on unsecured API endpoint.

259
00:18:43,374 --> 00:18:50,149
So this is where it is very important
to have the API Security from

260
00:18:50,150 --> 00:18:56,999
defining the API endpoint, where am I
configured in API gateway, how my API

261
00:18:57,299 --> 00:19:03,549
is retrieving the data from the data
store and to whom I'm giving, are they

262
00:19:03,549 --> 00:19:08,059
authorized, are they authenticated
before we give the data, is this data

263
00:19:08,089 --> 00:19:13,339
belong to the same user requested,
we need to verify that before we even

264
00:19:13,339 --> 00:19:15,449
pass, we even share over the network.

265
00:19:16,294 --> 00:19:19,394
Lessons learned, the breach
highlighted several key issues, the

266
00:19:19,394 --> 00:19:23,554
importance of strong authentication
and authorization mechanisms, such as

267
00:19:23,604 --> 00:19:26,524
OAuth2 and prevent unauthorized access.

268
00:19:26,974 --> 00:19:31,134
The need for regular security
audits and API endpoint reviews to

269
00:19:31,134 --> 00:19:33,534
identify exposed or weakened points.

270
00:19:33,854 --> 00:19:37,774
Implementing rate limiting and IP
filtering could have reduced the

271
00:19:37,774 --> 00:19:41,964
scale of breach by limiting the number
of requests from ambitious actors.

272
00:19:42,944 --> 00:19:45,854
The future trends in API security.

273
00:19:46,904 --> 00:19:49,034
We can make use of the AI and ML.

274
00:19:49,214 --> 00:19:52,064
The artificial intelligence and
machine learning can be used to

275
00:19:52,064 --> 00:19:56,214
detect anomalies in real time and
predict potential vulnerabilities.

276
00:19:57,064 --> 00:20:02,534
And even further, there are so many
elements available in the market.

277
00:20:03,224 --> 00:20:06,584
Any cloud platform exposes an AI.

278
00:20:06,904 --> 00:20:10,884
we can basically send our
source code in a string format.

279
00:20:11,234 --> 00:20:15,464
Hey, give me the we can prompt the
llms Give me the security analysis

280
00:20:15,464 --> 00:20:22,434
of this api As is this api Has
any potential vulnerabilities?

281
00:20:22,624 --> 00:20:27,324
give us this give us the risk analysis
of authentication and authorization is my

282
00:20:27,324 --> 00:20:30,169
tokens properly implemented in this class.

283
00:20:30,429 --> 00:20:35,399
So I can even get the report, a
security analysis report by prompting

284
00:20:35,399 --> 00:20:42,239
the LLMs having, is there any code
is vulnerable for the bad actors?

285
00:20:42,799 --> 00:20:43,779
I can even say that.

286
00:20:43,879 --> 00:20:49,079
So zero trust architecture, the quantum
computing, zero trust architecture.

287
00:20:49,339 --> 00:20:51,209
what is zero trust architecture?

288
00:20:51,359 --> 00:20:55,289
So if I have a three tier
architecture in my company.

289
00:20:55,784 --> 00:21:00,614
I have a front line, I have a API
gateway, I have a backend service, and

290
00:21:00,614 --> 00:21:03,324
then data store or any data centers.

291
00:21:03,824 --> 00:21:08,804
So any requests come from the front
lines, any user logged into any website

292
00:21:08,814 --> 00:21:14,574
or company's website, authenticating,
authorizing through the API gateway and

293
00:21:14,594 --> 00:21:19,584
hitting the API, APIs behind backend
services like API 1 is calling API

294
00:21:19,624 --> 00:21:25,894
2 and API 3, and maybe my API 3 is
calling multiple third party services.

295
00:21:26,289 --> 00:21:31,019
Get the data, pull the data or
manipulated, massage the data to give

296
00:21:31,019 --> 00:21:35,419
the response back to the API one,
which serves the frontline web page.

297
00:21:35,814 --> 00:21:40,504
So in this case, layer to layer
security is very important.

298
00:21:40,814 --> 00:21:46,534
How am I protecting each layer
by implementing the tokens or by

299
00:21:46,544 --> 00:21:49,314
having any public private key pair?

300
00:21:49,834 --> 00:21:55,234
How am I doing the token, am I doing
the tokens with my signature with the

301
00:21:55,234 --> 00:21:59,994
private key so that the other system
can validate my tokens or, can see

302
00:21:59,994 --> 00:22:02,194
my signature with the public key?

303
00:22:03,074 --> 00:22:07,184
And then allow the request to
serve me or to serve my API request

304
00:22:07,444 --> 00:22:10,799
or so API 1 to API 2 to API 3.

305
00:22:11,139 --> 00:22:15,929
If I protect that I'm narrowing down
my risk by implementing the zero trust

306
00:22:15,929 --> 00:22:18,039
architecture within this ecosystem.

307
00:22:18,509 --> 00:22:19,649
So how do I do that?

308
00:22:19,889 --> 00:22:21,939
Any bad actor comes into the network.

309
00:22:22,379 --> 00:22:27,669
even if the bad actor comes to the
network, we are minimizing the risk by

310
00:22:27,689 --> 00:22:34,419
having layer to layer security, layer
to layer implementation of the tokens.

311
00:22:35,169 --> 00:22:36,989
The API composition security.

312
00:22:37,109 --> 00:22:40,969
As APIs are chained together in
complex systems, securing these

313
00:22:40,999 --> 00:22:43,699
composite APIs will be crucial.

314
00:22:47,839 --> 00:22:48,719
The conclusion.

315
00:22:49,359 --> 00:22:53,429
In conclusion, API security is more
than just a technical requirement.

316
00:22:53,844 --> 00:22:57,734
It is a critical business imperative
that ensures the integrity,

317
00:22:57,804 --> 00:23:02,534
confidentiality, and availability of
data systems powering modern enterprises.

318
00:23:03,164 --> 00:23:07,554
So these case studies, whatever we
discussed so far must prioritize

319
00:23:07,594 --> 00:23:10,864
within the organization to achieve
the highest level of security

320
00:23:10,924 --> 00:23:13,074
at every stage of API lifecycle.

321
00:23:13,524 --> 00:23:17,104
Look at to the future, staying ahead
of emerging threats like quantum

322
00:23:17,104 --> 00:23:22,114
computing, using the AI technologies
or several API security testing tools.

323
00:23:22,564 --> 00:23:26,974
And AI into security strategies will
be essential for maintaining secure

324
00:23:26,974 --> 00:23:28,814
and scalable API infrastructures.

325
00:23:29,374 --> 00:23:32,874
The balance between innovation
and security is key to driving

326
00:23:32,884 --> 00:23:34,304
long term business growth.

327
00:23:35,104 --> 00:23:38,954
With this, I hope you enjoyed my talk.

328
00:23:39,404 --> 00:23:44,824
you listened to some of my guidelines,
make use of it in your organization.

329
00:23:45,324 --> 00:23:47,314
Thank you so much for joining me.

330
00:23:48,034 --> 00:23:53,024
And enjoy the rest of the
talks in CONF42 in this season.

331
00:23:53,524 --> 00:23:54,454
Thank you so much.

