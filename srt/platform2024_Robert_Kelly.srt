1
00:00:14,220 --> 00:00:17,790
Hello, I'm Robert Kelly, VP of
technology enablement at Liatrio.

2
00:00:18,289 --> 00:00:22,410
Liatrio is an enterprise technology
modernization consultancy.

3
00:00:22,410 --> 00:00:27,330
A lot of what we do, or what our team
gets to do is, what we traditionally

4
00:00:27,330 --> 00:00:29,650
call DevOps app modernization, but.

5
00:00:30,125 --> 00:00:34,115
I really like, to think, it's how we
describe platform engineering today.

6
00:00:34,145 --> 00:00:37,084
I'm really excited to be
here with comp 42 today.

7
00:00:37,315 --> 00:00:40,534
this is the first time I've given
this talk, so I'm absolutely

8
00:00:40,535 --> 00:00:43,295
going to be looking for feedback
from you and, from others.

9
00:00:43,314 --> 00:00:45,774
I'm looking forward to starting
the conversation today about

10
00:00:46,044 --> 00:00:48,894
all things platform, platform
engineering and the challenges we're

11
00:00:48,894 --> 00:00:49,809
seeing within large, companies.

12
00:00:50,129 --> 00:00:51,939
Enterprise technology organizations.

13
00:00:51,959 --> 00:00:55,559
like I said, I'll be starting the
discussion here, about why platforms need

14
00:00:55,569 --> 00:01:00,689
to be small, no matter how large they are,
try to keep it a little bit light hearted.

15
00:01:00,689 --> 00:01:02,839
And, I think, going for
around 15 minutes here.

16
00:01:02,839 --> 00:01:04,229
So let's get going.

17
00:01:04,709 --> 00:01:05,079
so

18
00:01:07,459 --> 00:01:08,519
what is a platform?

19
00:01:08,789 --> 00:01:12,109
I wanted to give my perspective
here, maybe set the stage, make sure

20
00:01:12,109 --> 00:01:15,239
we're on the same page here, but
the platform definition, I'm not

21
00:01:15,239 --> 00:01:16,749
trying to redefine anything here.

22
00:01:17,049 --> 00:01:19,989
I'll use some of the definitions
that are out in the wild today.

23
00:01:20,379 --> 00:01:22,359
platform has become overloaded.

24
00:01:22,449 --> 00:01:25,749
If we say platform, it may mean one
thing to you, may mean something

25
00:01:25,749 --> 00:01:27,349
to me, something to someone else.

26
00:01:27,769 --> 00:01:31,919
But, we've been building platforms
for years, and really lately, over

27
00:01:31,919 --> 00:01:35,889
the past few years, we've been trying
to give it a lot more, deliberate

28
00:01:35,889 --> 00:01:37,789
attention, especially at the enterprise.

29
00:01:38,179 --> 00:01:40,489
CNCF platform, white paper says.

30
00:01:41,119 --> 00:01:45,699
A platform for cloud native computing is
an integrated collection of capabilities

31
00:01:45,699 --> 00:01:48,889
defined and presented according to
the needs of the platform users.

32
00:01:48,899 --> 00:01:51,199
that CNCF platform white
paper, check it out.

33
00:01:51,199 --> 00:01:51,699
It's awesome.

34
00:01:51,709 --> 00:01:54,559
A lot of great folks put a
lot of awesome time into that.

35
00:01:54,819 --> 00:01:55,439
so check it out.

36
00:01:55,629 --> 00:02:00,999
That, paper also says that, it quotes
the Martin Fowler's definition of

37
00:02:00,999 --> 00:02:02,469
a platform, which I really like.

38
00:02:02,914 --> 00:02:08,004
A digital platform is a foundation of
self service APIs, tools, services,

39
00:02:08,034 --> 00:02:13,394
knowledge, and support, which are
arranged as a compelling internal product.

40
00:02:13,454 --> 00:02:15,564
I think we're looking at
those as the foundational

41
00:02:17,164 --> 00:02:18,764
platform definitions for today.

42
00:02:19,184 --> 00:02:22,754
And we're going to use that
as the, a starting point.

43
00:02:23,534 --> 00:02:25,484
I want to take a little
bit of a deeper dive there.

44
00:02:25,864 --> 00:02:26,544
I want to say.

45
00:02:26,889 --> 00:02:29,479
Really, platforms provide abstractions.

46
00:02:30,379 --> 00:02:34,849
They are providing, abstractions in a way
that they're abstracting away complexity

47
00:02:35,329 --> 00:02:40,049
of the underlying systems, processes,
allowing its users to interact with a

48
00:02:40,069 --> 00:02:41,719
simplified, more accessible interface.

49
00:02:41,779 --> 00:02:47,359
really, platforms are giving us, should
be, giving us an easier way to do things.

50
00:02:47,929 --> 00:02:50,189
the platform is an easy button, right?

51
00:02:50,559 --> 00:02:51,339
maybe not.

52
00:02:52,019 --> 00:02:52,659
Is it really?

53
00:02:52,659 --> 00:02:55,709
So are platforms always
a simpler solution?

54
00:02:55,709 --> 00:02:58,139
Do they always give us
something easier to work with?

55
00:02:58,589 --> 00:03:02,499
If I called, the customers of your
platform and asked, is platform easy?

56
00:03:02,859 --> 00:03:03,709
What would they say?

57
00:03:03,739 --> 00:03:08,399
So the point here is if a platform is
making something more difficult, then

58
00:03:08,399 --> 00:03:12,679
it would be otherwise if the platform
or the team who built the platform were

59
00:03:12,849 --> 00:03:15,159
not in the way, then we're not helping.

60
00:03:15,169 --> 00:03:15,939
Okay, Why is this?

61
00:03:15,959 --> 00:03:16,609
Why is this?

62
00:03:17,759 --> 00:03:22,089
platforms are disruptive technologies,
and this is where I want to spend a

63
00:03:22,089 --> 00:03:25,269
little bit of time digging in a little
bit, understanding why platforms

64
00:03:25,269 --> 00:03:29,229
are disruptive, why I think the
disruptive anyway, and what that means.

65
00:03:29,239 --> 00:03:34,449
So because platforms are providing
automation, golden paths, templates,

66
00:03:34,649 --> 00:03:38,529
and other capabilities, the intent
is to offer the organization a

67
00:03:38,529 --> 00:03:41,869
better way of building and shipping
software and digital services.

68
00:03:42,304 --> 00:03:43,344
Then if they didn't exist.

69
00:03:43,554 --> 00:03:48,794
So the idea here is get the platform
out there and provide more value.

70
00:03:49,564 --> 00:03:53,584
Okay, but why, why is disruptive
technology so important?

71
00:03:53,594 --> 00:03:54,674
Why is the idea here?

72
00:03:54,714 --> 00:03:55,894
something I want to look at.

73
00:03:55,904 --> 00:03:59,644
here's a quote for, from Clayton
Christensen's book, the innovators

74
00:03:59,644 --> 00:04:03,904
dilemma, products based on
disruptive technologies are typically

75
00:04:03,914 --> 00:04:08,074
cheaper, simpler, smaller, and
frequently more convenient to use.

76
00:04:08,074 --> 00:04:08,164
Okay.

77
00:04:08,444 --> 00:04:11,444
that might not be the way you
describe your platform today, but

78
00:04:11,474 --> 00:04:12,784
let's dig in here a little bit.

79
00:04:12,874 --> 00:04:17,544
So what I think is important is that
we've been building these platforms

80
00:04:17,544 --> 00:04:21,954
for years, but maybe we haven't
realized that we're innovating or

81
00:04:22,694 --> 00:04:24,234
building disruptive technologies.

82
00:04:24,244 --> 00:04:28,284
So the challenge is much of the platform
technology that's being augmented

83
00:04:28,294 --> 00:04:33,944
or abstracted is actually toil,
or difficult enterprise processes.

84
00:04:34,744 --> 00:04:36,464
The disruptive tech isn't.

85
00:04:36,529 --> 00:04:43,399
It's replacing AWS specifically, but it
is disrupting the enterprise processes

86
00:04:43,409 --> 00:04:49,099
that would otherwise be much more painful
for the team's building technology.

87
00:04:49,129 --> 00:04:50,639
So that's where most of the value is.

88
00:04:51,139 --> 00:04:54,219
Most of the value of the platform
is abstracting away those painful

89
00:04:54,219 --> 00:04:57,799
enterprise toil or other processes
that are just really making it

90
00:04:57,799 --> 00:04:59,729
more difficult to deliver software.

91
00:05:02,039 --> 00:05:04,709
So platforms have become disruptive.

92
00:05:05,359 --> 00:05:08,289
But I think they've become
disruptive in the wrong way.

93
00:05:08,419 --> 00:05:10,069
Let's talk about that for a moment.

94
00:05:11,319 --> 00:05:14,069
So why isn't the platform easy?

95
00:05:14,349 --> 00:05:18,059
Why isn't the disruptive technology
providing a compelling product

96
00:05:18,069 --> 00:05:21,859
for its customers or the platform
engineers building the platform?

97
00:05:22,479 --> 00:05:27,009
So today, most enterprise platforms
have evolved over time to fit

98
00:05:27,009 --> 00:05:29,089
the current operating structure
of a larger organization.

99
00:05:29,089 --> 00:05:30,739
So this is Conway's Law.

100
00:05:31,289 --> 00:05:34,989
If you're not familiar with Conway's
Law suggests that the way a company

101
00:05:34,989 --> 00:05:39,319
or team is structured will heavily
influence the architecture or the

102
00:05:39,319 --> 00:05:40,969
products or systems it creates.

103
00:05:41,079 --> 00:05:45,799
for instance, if an org is divided
into three teams that each handle a

104
00:05:45,799 --> 00:05:50,509
different part of the project, that
final product is likely going to consist

105
00:05:50,509 --> 00:05:54,009
of three different modules that reflect
the boundaries between those teams.

106
00:05:54,344 --> 00:05:59,174
So let's say over time, DevOps team
has grown, or maybe it hasn't grown

107
00:05:59,224 --> 00:06:03,624
to support the enterprise and the
platform has likely grown as well,

108
00:06:03,734 --> 00:06:08,164
trying to keep up, the DevOps team
might potentially, or maybe even the

109
00:06:08,164 --> 00:06:13,494
DevOps org likely owns the tooling and
processes to build and deploy enterprise

110
00:06:13,594 --> 00:06:14,864
applications and infrastructure.

111
00:06:14,914 --> 00:06:19,184
There are potentially hundreds of tools
spread out across dozens of automation

112
00:06:19,184 --> 00:06:21,064
paths here to build out this platform.

113
00:06:21,584 --> 00:06:25,474
And when you hear about cognitive
load, platforms have become

114
00:06:25,544 --> 00:06:28,044
synonymous with the term tool sprawl.

115
00:06:28,084 --> 00:06:32,614
And we're really asking platform
teams to become experts in integrating

116
00:06:33,024 --> 00:06:38,854
all of the latest tools rather than
collaboratively solving business problems.

117
00:06:38,854 --> 00:06:39,934
And that's really the goal.

118
00:06:40,004 --> 00:06:42,344
And so this path today isn't sustainable.

119
00:06:43,014 --> 00:06:44,404
So to summarize this a bit.

120
00:06:44,814 --> 00:06:49,244
The platform has had a snowball effect
and in many cases become a monolith,

121
00:06:49,274 --> 00:06:51,244
just like other enterprise applications.

122
00:06:51,244 --> 00:06:52,284
let's take a look at this.

123
00:06:54,434 --> 00:06:55,144
let's break it down.

124
00:06:55,144 --> 00:06:55,474
Really.

125
00:06:55,514 --> 00:06:58,224
if we're looking at the platform
as a monolith, it really

126
00:06:58,224 --> 00:06:59,684
doesn't have to be a monolith.

127
00:06:59,794 --> 00:07:02,709
And this is a bit of an
opinionated view that I have here.

128
00:07:02,709 --> 00:07:04,469
and I'd like to discuss it further.

129
00:07:04,529 --> 00:07:05,409
feel free to reach out.

130
00:07:05,409 --> 00:07:06,739
We can talk anytime.

131
00:07:07,279 --> 00:07:09,639
When we look at a platform
here at a higher level.

132
00:07:09,999 --> 00:07:14,049
Where you understand that really it's
a sum of several platform capabilities.

133
00:07:14,539 --> 00:07:19,079
We've got internal developer
portals, CI CD pipelines, security

134
00:07:19,079 --> 00:07:23,609
tools, observability, cloud
infrastructure, FinOps governance.

135
00:07:23,659 --> 00:07:26,149
Now AI ML is growing like crazy.

136
00:07:26,649 --> 00:07:30,529
These capabilities vary in complexity
in their own areas, really.

137
00:07:31,059 --> 00:07:35,509
Today, some, are tools that are purchased,
some are built and supported internally.

138
00:07:35,869 --> 00:07:37,579
we're just dealing with a lot here, right?

139
00:07:37,599 --> 00:07:41,029
So the focus of the platform
is really expanding to provide

140
00:07:41,309 --> 00:07:44,069
delivery teams what they need to
get their products to production.

141
00:07:44,199 --> 00:07:47,029
But looking at it as one
platform is really where we

142
00:07:47,029 --> 00:07:48,259
find some of the challenges now.

143
00:07:48,259 --> 00:07:52,179
So looking at it, one platform,
here as is really just a lot.

144
00:07:52,699 --> 00:07:55,289
So it's really just too much.

145
00:07:55,774 --> 00:07:58,884
And it's too much for one,
certainly for one team to manage.

146
00:07:58,884 --> 00:08:02,904
And if we've got a DevOps team
that's grown over time and, and

147
00:08:03,524 --> 00:08:06,554
really to support hundreds of
tools, it's just unsustainable.

148
00:08:07,034 --> 00:08:10,564
So rather than looking at the
platform as one big thing for one

149
00:08:10,584 --> 00:08:15,074
team or, really even for, Two teams,
we should make a conscious decision

150
00:08:15,074 --> 00:08:19,414
to break it up and provide a better
experience to our enterprise customers.

151
00:08:22,074 --> 00:08:25,094
So this is where I say
platforms must be small.

152
00:08:25,104 --> 00:08:27,004
And let me take a deeper dive here.

153
00:08:27,434 --> 00:08:31,494
we can't look at all of the capabilities
in this platform as again, a single

154
00:08:31,494 --> 00:08:33,964
platform, it's a platform of platforms.

155
00:08:34,334 --> 00:08:36,274
And this is where I said,
platform is overloaded.

156
00:08:36,274 --> 00:08:37,944
How many times have I said platform?

157
00:08:38,849 --> 00:08:40,109
It's too many, right?

158
00:08:40,179 --> 00:08:45,089
but again, this platform of platform could
be supported by several platform teams.

159
00:08:45,839 --> 00:08:50,559
Each of those platforms provide important
capabilities to its customers, and even

160
00:08:50,559 --> 00:08:55,539
though they may need to be on their
own product roadmap, how we ask our

161
00:08:55,539 --> 00:08:59,219
teams or customers to interact with
them shouldn't be distinctly different.

162
00:08:59,679 --> 00:09:02,689
And the platform just
shouldn't feel large.

163
00:09:02,719 --> 00:09:03,064
So for listening.

164
00:09:04,544 --> 00:09:06,584
It's all about accessibility
when it comes to it.

165
00:09:06,584 --> 00:09:08,624
So let's look at that a little bit here.

166
00:09:09,474 --> 00:09:14,514
this could be us starting small and
we may need to start really small,

167
00:09:14,824 --> 00:09:17,944
just like any monolithic, application
we might want to break down.

168
00:09:18,394 --> 00:09:20,294
We need to treat the
platform the same way.

169
00:09:20,464 --> 00:09:23,444
A good starting point here is
the thinnest viable platform.

170
00:09:23,784 --> 00:09:27,254
And this is defined here in the
book, Team Topology's awesome book.

171
00:09:27,694 --> 00:09:32,414
And, Team Topology states, a TVP is
a careful balance between keeping a

172
00:09:32,414 --> 00:09:36,854
platform small and ensuring that the
platform is helping to accelerate

173
00:09:36,854 --> 00:09:39,804
and simplify software delivery
for teams building the platform.

174
00:09:40,364 --> 00:09:45,874
and to summarize that, we can explain
the platform or TVP as the smallest

175
00:09:45,874 --> 00:09:50,834
set of APIs, documentation, or tools
needed to accelerate teams delivery.

176
00:09:51,244 --> 00:09:53,624
And in some cases, version 1.

177
00:09:53,624 --> 00:09:55,604
0 of a platform is just a wiki page.

178
00:09:55,994 --> 00:09:59,294
So keeping things very
small is super important.

179
00:09:59,754 --> 00:10:03,354
this image on the left is not a
picture of a platform, but it's a

180
00:10:03,394 --> 00:10:05,074
picture of a team interaction model.

181
00:10:05,094 --> 00:10:09,114
So this highlights how a platform team
is providing a capability of their

182
00:10:09,114 --> 00:10:10,974
product as a service for other teams.

183
00:10:11,544 --> 00:10:16,024
As the platform might grow, and more
features are added, that doesn't mean

184
00:10:16,024 --> 00:10:20,414
that the team using the platform need
to change the way that they're working

185
00:10:20,514 --> 00:10:21,844
to adopt these new capabilities.

186
00:10:21,864 --> 00:10:26,724
So self service tools like internal
developer platforms and APIs give

187
00:10:26,724 --> 00:10:28,694
us a more common platform interface.

188
00:10:29,134 --> 00:10:30,274
Things feel the same.

189
00:10:30,394 --> 00:10:32,234
It's a standard way to adopt new features.

190
00:10:32,514 --> 00:10:35,694
So we get back to having that
easy button for customers.

191
00:10:35,744 --> 00:10:39,754
and at that point, there is minimal
lift to adopt those new capabilities.

192
00:10:40,244 --> 00:10:44,764
So the platform feels small, regardless
of how much work goes into the platform

193
00:10:44,764 --> 00:10:47,224
tooling or automation behind the scenes.

194
00:10:48,984 --> 00:10:52,614
To boil it down here, this means
breaking up the monolithic platform.

195
00:10:52,614 --> 00:10:57,024
It comes down to, we need a
strategy and a plan to break it up.

196
00:10:57,504 --> 00:11:00,604
there's going to be some work done
in value stream mapping, domain

197
00:11:00,604 --> 00:11:04,234
driven design, to understand what
the platform's boundaries are and

198
00:11:04,234 --> 00:11:06,034
how many platforms do we really have.

199
00:11:06,634 --> 00:11:10,684
And even though we haven't treated
the platform as a product before, we

200
00:11:10,684 --> 00:11:14,624
need to make the effort and investment
to supply, to support it properly.

201
00:11:15,284 --> 00:11:16,704
As platform teams.

202
00:11:17,079 --> 00:11:19,859
If we're working with the
platform, we need to redefine

203
00:11:19,859 --> 00:11:21,599
what it means to own the platform.

204
00:11:22,049 --> 00:11:27,029
Probably means raising the bar on platform
standards, treating everything as code,

205
00:11:27,259 --> 00:11:32,089
really leaning in on APIs and self
service, and maybe relearning how we're

206
00:11:32,089 --> 00:11:35,229
building applications in our platforms.

207
00:11:35,709 --> 00:11:39,189
This means getting real user feedback,
understanding who our customers are,

208
00:11:39,569 --> 00:11:44,009
and really measuring the use of the
platform to find out what metrics are

209
00:11:44,009 --> 00:11:47,809
really important there, And things like
opening up, inner sourcing and pull

210
00:11:47,809 --> 00:11:51,779
requests so that the internal community
can, support the app applications and

211
00:11:51,779 --> 00:11:55,329
platforms along with the teams, and the
platform teams that are traditionally

212
00:11:55,329 --> 00:11:59,449
building them and really just finding
a more modern working model that,

213
00:11:59,459 --> 00:12:00,869
that just works for the organization.

214
00:12:01,199 --> 00:12:05,549
So that's a big change, a lot of lift,
and a lot to look at once, right?

215
00:12:06,139 --> 00:12:06,699
that's it.

216
00:12:06,709 --> 00:12:06,769
Thank you.

217
00:12:07,529 --> 00:12:08,699
Again, easy, right?

218
00:12:08,719 --> 00:12:12,239
No, that it's all I've got today,
but I really just wanted to start a

219
00:12:12,239 --> 00:12:17,009
conversation and start small and get the
discussion started, get some feedback.

220
00:12:17,229 --> 00:12:20,329
hope you got a lot from
this today and, hope we can,

221
00:12:20,349 --> 00:12:21,769
connect, and have a discussion.

222
00:12:21,769 --> 00:12:27,599
So again, connect with me, Robert Kelly,
DFW on LinkedIn or email robertatleatriot.

223
00:12:27,609 --> 00:12:28,029
com.

224
00:12:28,169 --> 00:12:29,309
And thanks again.

