1
00:00:15,950 --> 00:00:20,179
Hello, everyone, and welcome to my session
about platform engineering untold truths.

2
00:00:20,695 --> 00:00:24,935
For sure, many of you are already
familiar with the classic narrative behind

3
00:00:24,945 --> 00:00:28,605
the concept of platform engineering,
where infrastructure orchestration

4
00:00:28,615 --> 00:00:30,534
is at the core of every platform.

5
00:00:30,875 --> 00:00:34,595
In this talk, I want to present
a new way of looking at platform.

6
00:00:34,915 --> 00:00:39,525
It's not that the current view is
wrong, but rather we'll try to extend

7
00:00:39,714 --> 00:00:44,054
what we commonly refer to as platforms
today to include other important

8
00:00:44,054 --> 00:00:46,005
assets for today's digital company.

9
00:00:47,735 --> 00:00:49,185
Let me introduce myself briefly.

10
00:00:49,455 --> 00:00:51,494
My name is Graziano from Italy.

11
00:00:51,644 --> 00:00:55,435
I'm a Developer Relations Engineer
at MIA Platform, and I focus on

12
00:00:55,435 --> 00:00:59,004
sharing the wonderful things the
cloud native world has to offer.

13
00:00:59,535 --> 00:01:04,205
At MIA Platform, we offer a digital
platform builder to the market, which is

14
00:01:04,214 --> 00:01:08,245
one of the tools available for building
what we will be discussing today.

15
00:01:08,805 --> 00:01:12,145
If you'd like to stay in touch with
me, you can find me on LinkedIn or

16
00:01:12,175 --> 00:01:16,405
GitHub, and if you are interested to,
In this and other cloud native topics,

17
00:01:16,405 --> 00:01:22,065
I invite you to visit the NeoPlatform
blog or my website at GrazianoCast.

18
00:01:22,125 --> 00:01:22,345
com.

19
00:01:22,735 --> 00:01:26,875
Don't worry, I'll provide links to all
my contacts in the final feedback form.

20
00:01:28,705 --> 00:01:31,925
Let's start with a somewhat
provocative statement.

21
00:01:32,105 --> 00:01:35,495
Platform engineering is the
natural evolution of DevOps.

22
00:01:36,580 --> 00:01:40,803
Don't get me wrong, I'm not saying that
to DevOps long life platform engineering.

23
00:01:40,803 --> 00:01:44,980
In fact, DevOps practices
are more alive than ever.

24
00:01:45,480 --> 00:01:48,970
And it's thanks to this vitality
that platform engineering

25
00:01:49,080 --> 00:01:50,710
is gaining momentum today.

26
00:01:51,020 --> 00:01:55,270
What I mean by this statement is
that platform engineering emerges

27
00:01:55,270 --> 00:02:01,090
as a methodology to industrialize
the practices, making them

28
00:02:01,110 --> 00:02:03,110
more accessible and practical.

29
00:02:04,400 --> 00:02:04,980
But why?

30
00:02:05,500 --> 00:02:08,290
Why do we need to make it more accessible?

31
00:02:08,515 --> 00:02:12,335
What's the point of making
something accessible that

32
00:02:12,355 --> 00:02:14,365
worked well until recently?

33
00:02:15,105 --> 00:02:19,495
After all, platform engineering has only
been discussed for a couple of years,

34
00:02:19,625 --> 00:02:21,555
while DevOps has been around since 2007.

35
00:02:24,555 --> 00:02:30,600
The typical phrase you hear when talking
about DevOps is You build it, you run it.

36
00:02:30,650 --> 00:02:35,770
Coined by Werner Vogels,
CTO of Amazon, in 2006.

37
00:02:36,250 --> 00:02:41,170
He explained how putting developers
in front of operational challenges

38
00:02:41,220 --> 00:02:44,430
brought numerous benefits to
Amazon's production chain.

39
00:02:45,410 --> 00:02:51,535
However, a lot of A lot has changed
since 2006, including technology, but

40
00:02:51,545 --> 00:02:57,925
then we dealt with virtual machine and
were far from tools like Kubernetes and

41
00:02:57,965 --> 00:03:02,815
other subsequent wave of cloud native
technologies to give you an idea today.

42
00:03:04,340 --> 00:03:11,300
The CNCF landscape includes 119
projects and more than 1, 800 code

43
00:03:11,300 --> 00:03:15,860
repositories, ranging from libraries
and frameworks to utilities and more.

44
00:03:16,290 --> 00:03:19,930
The increasing technological
capabilities at our disposal makes

45
00:03:19,930 --> 00:03:21,480
it seem like a huge advantage.

46
00:03:22,235 --> 00:03:30,405
At first glance, however, being surrounded
by a multitude of tools that often do

47
00:03:30,405 --> 00:03:35,435
similar or completely different things get
actually become an obstacle to innovation.

48
00:03:35,845 --> 00:03:39,815
Imagine you are on a hike following
a straight path for hours.

49
00:03:40,375 --> 00:03:43,435
Perhaps interrupted by
a few folks in the road.

50
00:03:43,935 --> 00:03:49,235
Suddenly you find yourself facing
hundreds of different paths all at once.

51
00:03:49,635 --> 00:03:54,905
You might think what an adventure, but
you'd probably also admit that getting

52
00:03:54,905 --> 00:03:57,505
lost in such a scenario is a real risk.

53
00:03:58,055 --> 00:04:02,394
This abundance of options
can hinder innovation.

54
00:04:03,935 --> 00:04:09,085
To illustrate this concept, I used
a simple example, but there are

55
00:04:09,315 --> 00:04:13,185
psychological theories on cognitive
load that highlight these aspects.

56
00:04:13,785 --> 00:04:19,475
Cognitive load is not something to
underestimate, especially for so called

57
00:04:19,765 --> 00:04:25,105
knowledge workers, which includes
developers and anyone with a job title

58
00:04:25,105 --> 00:04:26,735
related to the technological field.

59
00:04:28,330 --> 00:04:33,360
This explains why platform engineering
emerged and why the adoption of

60
00:04:33,360 --> 00:04:38,229
platform of cloud native technologies
and the box practices, of course,

61
00:04:38,230 --> 00:04:41,110
needs to be industrialized in this.

62
00:04:41,170 --> 00:04:44,800
In this slide, you can see
a quote from Gartner paper

63
00:04:44,820 --> 00:04:46,210
that summarizes this concept.

64
00:04:46,330 --> 00:04:50,820
the platform engineering to shift the
burden from the platform users, of course,

65
00:04:51,155 --> 00:04:56,715
Who are the developers by uploading it
onto a tool that is the platform itself.

66
00:04:58,475 --> 00:05:03,275
The EDP or internal developer
platform is the tangible result

67
00:05:03,275 --> 00:05:05,195
of applying platform engineering.

68
00:05:05,805 --> 00:05:12,315
To understand what IDP is and what benefit
it brings, let first explore what a

69
00:05:12,315 --> 00:05:14,865
platform is in its most general sense.

70
00:05:16,775 --> 00:05:19,945
Think of an organization whose
business is to create software.

71
00:05:21,255 --> 00:05:25,995
Typically, these organizations are
structured into development teams

72
00:05:26,025 --> 00:05:30,915
that vary in size and, are often
cross functional to some extent.

73
00:05:32,135 --> 00:05:35,405
Typically, the organization
grows, or it dies.

74
00:05:35,695 --> 00:05:40,125
If it's business includes
involves multiple teams, each

75
00:05:40,165 --> 00:05:45,465
team will have its own ownership
off their respective product.

76
00:05:46,195 --> 00:05:51,605
Now, it's easy to imagine that in such
a company, even though different teams

77
00:05:51,605 --> 00:05:57,590
to work on different products, they
still share a series of For example,

78
00:05:57,600 --> 00:06:02,190
all teams will have boundaries set by
the higher ranks of the organization.

79
00:06:02,880 --> 00:06:07,940
Therefore, it's likely that all
applications will use the same type

80
00:06:07,940 --> 00:06:12,740
of database, be built with a pool of
two or three programming languages or

81
00:06:12,750 --> 00:06:17,160
frameworks, and use common monitoring
tools and libraries, for example.

82
00:06:18,830 --> 00:06:22,680
All these common aspects within
an organization, when taken.

83
00:06:23,100 --> 00:06:28,820
Rationalized and combined using an
as a service approach in a common and

84
00:06:28,860 --> 00:06:33,090
accessible place for everyone within the
organization constitute the platform.

85
00:06:34,870 --> 00:06:39,390
The goal of applying these methodologies
to provide the developers with

86
00:06:39,600 --> 00:06:44,980
everything they need to do their jobs
in a self service manner without having

87
00:06:45,040 --> 00:06:49,180
to deal with the countless service
requests or inventing the wheel.

88
00:06:49,950 --> 00:06:51,780
This image illustrates the concept.

89
00:06:51,780 --> 00:06:57,520
translate, what we have discussed to the
experiences of going the grocery shopping.

90
00:06:58,320 --> 00:07:02,840
In this example, we are using platform
engineering when, we know what we

91
00:07:02,840 --> 00:07:08,630
need and we can take it from the
shelves, go to the self checkout,

92
00:07:08,690 --> 00:07:11,060
pay and live completely on your own.

93
00:07:12,820 --> 00:07:18,650
We are not using it if, When we get to
the checkout, despite knowing what we

94
00:07:18,650 --> 00:07:25,240
need, we have to wait in line and rely
on someone else to enable us to pay.

95
00:07:26,940 --> 00:07:32,270
Now, everything we have talked about
doesn't grow on trees and certainly isn't

96
00:07:32,350 --> 00:07:34,240
something that can be done in a day.

97
00:07:35,120 --> 00:07:38,960
We can also rationalize the role
involved within the platform and

98
00:07:38,960 --> 00:07:41,135
divide them into Three main groups.

99
00:07:42,325 --> 00:07:47,895
The first groups are the creators,
and these are those who initially

100
00:07:47,895 --> 00:07:51,615
adopt a technology or build
something that will be later made

101
00:07:51,615 --> 00:07:53,325
available for everyone to reuse.

102
00:07:53,845 --> 00:08:00,565
They create building blocks that are then
used to construct more complex products.

103
00:08:00,955 --> 00:08:03,175
They can also be
considered and re adopted.

104
00:08:03,650 --> 00:08:06,910
There's especially if
building these blocks involves

105
00:08:07,350 --> 00:08:11,257
experimenting with new tools and
technologies for the organization.

106
00:08:11,257 --> 00:08:18,320
The second groups are the composer,
which are those who benefits from

107
00:08:18,320 --> 00:08:22,620
the building blocks provided within
the platform to create digital

108
00:08:22,770 --> 00:08:25,380
products or even more complex systems.

109
00:08:26,240 --> 00:08:30,020
They, there isn't a strict separation
between the creators and composer.

110
00:08:31,335 --> 00:08:36,115
The work of a composer today can become
the building block of for someone else

111
00:08:36,145 --> 00:08:38,445
tomorrow, making them a creator as well.

112
00:08:40,005 --> 00:08:43,455
Finally, there are the curators
of platform engineering.

113
00:08:43,775 --> 00:08:49,635
They simply, sorry, they simplify
the cooperation between creators and

114
00:08:49,635 --> 00:08:55,065
composer by providing tools, making
the work of creator accessible,

115
00:08:55,645 --> 00:08:57,555
sharing best practices and more.

116
00:08:59,180 --> 00:09:06,160
The cooperation between these three roles
ensure that the platform is a place where

117
00:09:06,190 --> 00:09:09,080
the values is created to understand this.

118
00:09:09,080 --> 00:09:13,180
Let's take the example
of a furniture making.

119
00:09:13,180 --> 00:09:13,570
Okay.

120
00:09:14,360 --> 00:09:21,020
The platform is our woodworking shop and
the curator or platform engineers are the

121
00:09:21,020 --> 00:09:26,280
ones who ensure that all the tools in the
shop are properly Perfectly functioning

122
00:09:26,310 --> 00:09:28,420
for what the user will need to do.

123
00:09:29,280 --> 00:09:33,350
they bring in new tools and
create best practices for the use.

124
00:09:33,350 --> 00:09:40,360
For example, there are, then there
are the carpenters who use these

125
00:09:40,390 --> 00:09:42,450
tools to create pieces of four meters.

126
00:09:42,470 --> 00:09:44,500
For example, here you can see a drawer.

127
00:09:46,420 --> 00:09:48,260
They are the creators.

128
00:09:48,310 --> 00:09:50,850
our platform stands to this example.

129
00:09:52,470 --> 00:09:56,460
These drawers is then taken by
other carpenters who in this case

130
00:09:56,500 --> 00:10:00,800
act as composer and they create
a chest of drawers, for example.

131
00:10:02,450 --> 00:10:07,850
And at this point, the work of this
last group of carpenters can become a

132
00:10:07,960 --> 00:10:13,050
Building block itself, since the newly
assembled chest of drawers can be used

133
00:10:13,060 --> 00:10:18,470
to build something more complex, like a
kitchen, just create a vicious cycle of

134
00:10:18,480 --> 00:10:20,990
value and sharing within the platform.

135
00:10:22,740 --> 00:10:25,960
Translating this example in the world
of software development, the individual

136
00:10:25,980 --> 00:10:30,370
building block provided by platform
engineering could be, for example,

137
00:10:30,995 --> 00:10:34,345
I don't know, a Kubernetes cluster
with all necessary configuration,

138
00:10:34,485 --> 00:10:39,425
a cross plane CRD, a Kafka topic,
an API to perform payments, or

139
00:10:39,435 --> 00:10:44,265
even a completely new application
accessible to users, for example.

140
00:10:44,715 --> 00:10:50,765
That woodworking shop is our
EDP, and the facilities it offers

141
00:10:51,015 --> 00:10:54,700
could be a catalog where all
composable resources are available.

142
00:10:55,430 --> 00:10:59,940
A monitoring system to track all the
activities of all the microservices

143
00:11:00,000 --> 00:11:03,650
are CLI to view log introduction,
for example, and many others.

144
00:11:04,220 --> 00:11:09,710
This cycle can be seen as a circular
economy in software development, where

145
00:11:09,760 --> 00:11:16,890
resources are continuously reused and
repurposed, leading to a more efficient

146
00:11:16,930 --> 00:11:18,800
and sustainable development process.

147
00:11:20,860 --> 00:11:26,150
We know what a platform is, why we need
it and how to use it to create value.

148
00:11:26,470 --> 00:11:30,810
But in the end, what does
this platform look like?

149
00:11:30,930 --> 00:11:36,360
First, let me say that, it is, Much
more complex than what I'm about to

150
00:11:36,360 --> 00:11:41,990
present, because each adoption of this
methodology is tailored to the adoption

151
00:11:42,130 --> 00:11:48,460
to the adopters need, making each journey
unique with specific characteristics

152
00:11:48,490 --> 00:11:50,940
that vary from use case to use case.

153
00:11:51,120 --> 00:11:55,940
However, let's try to provide
a good abstraction of what.

154
00:11:56,450 --> 00:11:57,870
can be considered a platform.

155
00:11:59,630 --> 00:12:05,210
First of all, we have our software
delivery pipeline divided into

156
00:12:05,240 --> 00:12:08,930
product teams that build a
digital product on one side.

157
00:12:11,060 --> 00:12:16,620
On the other hand, there are various
dependencies that these product teams

158
00:12:16,630 --> 00:12:21,020
need to manage, including, for example,
infrastructure, cloud providers,

159
00:12:21,270 --> 00:12:24,070
and other such systems, and so on.

160
00:12:25,410 --> 00:12:31,940
Our platform sits between the delivery
teams and their dependencies, and

161
00:12:32,020 --> 00:12:34,330
is made up of various components.

162
00:12:34,620 --> 00:12:39,890
First of all, there are several
interfaces that allow us to interact

163
00:12:39,920 --> 00:12:41,720
with the platform on multiple levels.

164
00:12:42,220 --> 00:12:48,120
Imagine, for example, a Web UI,
a set of APIs, a CLI, and so on.

165
00:12:49,610 --> 00:12:54,020
Then there is the heart of the
platform, the control plane, which

166
00:12:54,020 --> 00:12:58,270
is responsible for orchestrating all
the processes within the platform.

167
00:12:59,780 --> 00:13:05,050
And finally, we have the components that
interact with the infrastructure provider.

168
00:13:05,355 --> 00:13:10,915
Allowing developers to have runtime
environments on demand, for example, by

169
00:13:10,915 --> 00:13:16,965
clicking by simply clicking on a button
on a web UI without having to open service

170
00:13:16,975 --> 00:13:19,875
request and wait for someone to intervene.

171
00:13:22,065 --> 00:13:23,765
Or there is the part.

172
00:13:24,100 --> 00:13:28,610
of the platform that handles orchestration
and simplified adoption of DevOps

173
00:13:28,630 --> 00:13:30,680
tools, such as, for example, pipeline.

174
00:13:30,910 --> 00:13:35,040
This includes providing pre built
pipeline to integrate into your

175
00:13:35,040 --> 00:13:39,380
system, tracing and monitoring systems,
secret management, and testing.

176
00:13:39,930 --> 00:13:44,450
For example, it could provide
access to direct time with Intel.

177
00:13:44,750 --> 00:13:45,570
telepresence, for example.

178
00:13:47,040 --> 00:13:52,660
And so in this context, we will have,
cloud engineers who will create automation

179
00:13:52,670 --> 00:13:54,480
for the infrastructure providers.

180
00:13:55,160 --> 00:13:58,760
This ensure that, this services
can be used in a self service

181
00:13:58,770 --> 00:14:02,560
manner with as little friction
as possible for the developers.

182
00:14:04,780 --> 00:14:08,770
Developers use the platform
and the capability it provides

183
00:14:08,770 --> 00:14:10,250
to build digital products.

184
00:14:11,190 --> 00:14:15,130
And finally, we are, and finally
there are the platform engineers

185
00:14:15,630 --> 00:14:20,170
who orchestrate the work of the
previous two roles and ensure that

186
00:14:20,210 --> 00:14:22,300
everything run as smoothly as possible.

187
00:14:23,485 --> 00:14:29,505
For example, they define best practices,
golden path, documentation of advocates

188
00:14:29,515 --> 00:14:35,075
for the platform and handle all
aspects that fall under the umbrella

189
00:14:35,075 --> 00:14:38,315
of platform as a product methodology.

190
00:14:39,905 --> 00:14:44,495
And this is the most common
representation of what a platform is.

191
00:14:44,495 --> 00:14:50,105
For example, I recommend looking at
the platform web paper by CNCF, which

192
00:14:50,105 --> 00:14:52,485
presents platform in a very similar way.

193
00:14:53,805 --> 00:14:58,575
Platform engineering is often only
associated with infrastructure and

194
00:14:58,725 --> 00:15:03,555
DevOps simplification, with the
primary goal of providing developers

195
00:15:03,665 --> 00:15:05,085
with a self service platform.

196
00:15:05,455 --> 00:15:10,815
But is that enough to cover the
entire value chain to efficiently

197
00:15:10,835 --> 00:15:12,795
deliver a product and application?

198
00:15:13,965 --> 00:15:20,970
The point is that by focusing too
much on applications, And the tools

199
00:15:21,040 --> 00:15:27,390
around them, we overlook the fact
that today's software is built on much

200
00:15:27,400 --> 00:15:31,290
more than just run time it's run on.

201
00:15:32,190 --> 00:15:35,430
While the current platform
engineering practices efficaciously

202
00:15:36,440 --> 00:15:41,770
address many aspects of simplifying
people's lives, there are other

203
00:15:42,050 --> 00:15:43,980
areas that require attention.

204
00:15:44,150 --> 00:15:46,935
Data, ML, API.

205
00:15:47,815 --> 00:15:53,495
Security, privacy and others are
crucial for better software product

206
00:15:53,495 --> 00:15:59,075
lifecycle by relying platform engineering
only to the infrastructure aspects.

207
00:15:59,405 --> 00:16:03,735
We run the risk of creating the
new barriers between platform

208
00:16:03,735 --> 00:16:07,835
engineers and developers similar to
the barriers that exist in the past

209
00:16:07,835 --> 00:16:10,190
between operations and developers.

210
00:16:11,340 --> 00:16:17,940
Digital products as they are crafted
today are based on data, business logic,

211
00:16:17,990 --> 00:16:23,949
and the know how and experience gained by
the organization, both from technological

212
00:16:23,949 --> 00:16:25,958
and business domain perspective.

213
00:16:25,958 --> 00:16:31,985
These are important assets that must
be included and valued within the

214
00:16:31,985 --> 00:16:36,520
platform as composable resources that
can be leveraged to generate value.

215
00:16:36,585 --> 00:16:44,225
With the representation of platform,
we had focused on the automation

216
00:16:44,235 --> 00:16:47,965
aspect of the infrastructure,
which was central to the sheen.

217
00:16:48,885 --> 00:16:52,695
What we aim to do with this
different vision of platform is

218
00:16:52,725 --> 00:16:57,435
to give space to and value these
assets that was mentioned before.

219
00:16:59,615 --> 00:17:01,535
The first added benefit is composability.

220
00:17:02,515 --> 00:17:06,815
Both in terms of application accessibility
and application composability.

221
00:17:07,105 --> 00:17:12,355
By accessibility, we can range
from an API gateway to access the

222
00:17:12,355 --> 00:17:16,835
application endpoint, to portals that
expose documentation and describe

223
00:17:16,835 --> 00:17:21,715
capabilities, making our software
usable from the outside, for example.

224
00:17:22,685 --> 00:17:27,185
This also includes composable logic
for solving a business problem,

225
00:17:27,475 --> 00:17:31,495
which can involve using, for example,
orchestrators as building blocks to

226
00:17:31,495 --> 00:17:36,075
manage sagas in a standardized way,
creating and managing the microphone

227
00:17:36,095 --> 00:17:41,385
tents or providing a marketplace within
the platform for elements that can be

228
00:17:41,785 --> 00:17:44,255
used to build a more complex solution.

229
00:17:45,660 --> 00:17:48,380
Last but not least are the data.

230
00:17:48,660 --> 00:17:52,360
A digital product is unlikely to
succeed without a data platform.

231
00:17:53,210 --> 00:17:57,520
Therefore, the platform should
include tools like, data catalog

232
00:17:57,640 --> 00:18:03,260
to improve data discoverability,
a control plane to monitor data

233
00:18:03,260 --> 00:18:08,690
flows in real time from source to
destination, allowing for stopping,

234
00:18:08,690 --> 00:18:10,530
resuming and analyzing these flows.

235
00:18:11,065 --> 00:18:14,775
And providing an approach for
building data fabric within the

236
00:18:14,775 --> 00:18:18,695
platform by adding these two elements.

237
00:18:18,945 --> 00:18:24,295
We achieve a more modern vision of a
platform that includes all the resources

238
00:18:24,325 --> 00:18:27,175
related to creating digital products.

239
00:18:29,025 --> 00:18:32,245
Now, the million dollar question.

240
00:18:32,705 --> 00:18:35,335
We are in the boom of
artificial intelligence.

241
00:18:35,395 --> 00:18:37,945
Could I avoid bringing up AI?

242
00:18:38,205 --> 00:18:38,985
Of course not.

243
00:18:39,285 --> 00:18:44,865
I'll just spend a few words to
introduce what AI is today and what its

244
00:18:44,875 --> 00:18:47,915
future prospects are in this context.

245
00:18:49,685 --> 00:18:54,625
The vision I want to present, I want to
present is not much about how platforms

246
00:18:54,715 --> 00:19:00,325
are useful Or will be for building
AI powered application, but rather

247
00:19:00,405 --> 00:19:06,625
a perspective where AI is one of the
interfaces that platform provides us

248
00:19:07,455 --> 00:19:13,205
with an intelligent yet simple interface
that allow us to use natural language,

249
00:19:13,415 --> 00:19:17,875
we can elevate the platform user
experience and consequently the developer

250
00:19:17,905 --> 00:19:24,665
experience to a whole new level from
simple device to conversational device.

251
00:19:25,725 --> 00:19:31,985
Imagine having a virtual assistant that
speaks like you and respond as you would

252
00:19:32,605 --> 00:19:36,815
with the added benefit of perfectly
understanding the context of your

253
00:19:36,835 --> 00:19:39,435
platform because it is your platform.

254
00:19:39,715 --> 00:19:45,855
Now, imagine what you could do with such
an assistant that know your data models.

255
00:19:46,465 --> 00:19:52,785
They are lineage and the pipeline that
managed that, it knows the tools you can

256
00:19:52,795 --> 00:19:58,235
use the best practices for using them
and they call them path designed to help

257
00:19:58,395 --> 00:20:01,565
you assume designed to help you use.

258
00:20:02,470 --> 00:20:05,360
them optimally within
the platform context.

259
00:20:05,640 --> 00:20:10,960
It also know every item in the marketplace
of building blocks you can use and

260
00:20:10,980 --> 00:20:16,560
can provide advice on how to integrate
them, including how others have done so.

261
00:20:17,985 --> 00:20:22,425
You can see that, I don't know,
troubleshooting production issues or

262
00:20:22,455 --> 00:20:28,465
conducting a POC in such a context is
on a whole different level than now.

263
00:20:29,695 --> 00:20:33,495
We have reached the end of the
presentation and I'd like to

264
00:20:33,505 --> 00:20:34,805
recap what we have talked about.

265
00:20:35,055 --> 00:20:39,455
Covered and what I hope you have taken
away from this session first, the software

266
00:20:39,615 --> 00:20:44,665
industry and the digital product creation
sector are undergoing a transformation.

267
00:20:45,185 --> 00:20:49,275
We have moved from project with
outcomes that could be afford to be

268
00:20:49,305 --> 00:20:54,405
isolated to the necessity of having
everything be integrable and integrated

269
00:20:54,415 --> 00:20:56,215
within a clear and defined context.

270
00:20:57,075 --> 00:20:59,195
This is where the need of platform arises.

271
00:21:00,465 --> 00:21:06,895
Second, and this is the core of this talk,
platform engineering encompasses more

272
00:21:06,895 --> 00:21:11,275
aspects of digital application creation,
not just infrastructure and DevOps.

273
00:21:13,085 --> 00:21:17,680
Finally, I don't know if artificial
intelligence, we take our jobs,

274
00:21:17,800 --> 00:21:23,100
but, I, but I think that if
integrated into our platform, it can

275
00:21:23,140 --> 00:21:24,890
elevate the developer experience.

276
00:21:24,900 --> 00:21:28,110
So we provide to our decks
to an entirely new level.

277
00:21:29,850 --> 00:21:32,490
So let's give credit where credit is due.

278
00:21:32,560 --> 00:21:37,400
First of all, I want to mention my CTO,
Giulio Ruggiero, who was the first to

279
00:21:37,400 --> 00:21:42,260
formulate these concepts and present them
during the keynote at Platformosphere,

280
00:21:42,590 --> 00:21:46,740
the Italian conference dedicated to
end development of digital platforms.

281
00:21:47,320 --> 00:21:53,240
Then, this concept were also brought to
the platform working group of the CNCF

282
00:21:53,350 --> 00:21:59,890
and just, Some weeks ago, an article was
published and that delves deeper into

283
00:21:59,890 --> 00:22:05,190
the topics we have discussed today, and
so I highly recommend you to read it.

284
00:22:06,310 --> 00:22:09,650
Thank you for being here with
me to discuss these topics.

285
00:22:09,960 --> 00:22:13,110
Here you will also find my
contact information if you

286
00:22:13,110 --> 00:22:14,390
want to stay in touch with me.

287
00:22:14,740 --> 00:22:18,053
And there is a dedicated space for
questions on the topic, which I'll try to

288
00:22:18,053 --> 00:22:21,190
answer on LinkedIn or via email privately.

289
00:22:22,245 --> 00:22:28,505
Additionally, you can find my website
and the platform blog where there

290
00:22:28,505 --> 00:22:32,795
are articles and other talks on this
and other more or less technical

291
00:22:32,845 --> 00:22:34,355
topics in the cloud native world.

292
00:22:35,075 --> 00:22:39,515
Last but not least, in the feedback form,
you can find direct link to all resources

293
00:22:39,545 --> 00:22:41,285
mentioned during this presentation.

294
00:22:42,875 --> 00:22:47,035
Thank you all for listening to
me and a special thanks to Conf42

295
00:22:47,035 --> 00:22:48,845
organizer for having me today.

296
00:22:48,925 --> 00:22:49,315
Bye.

