1
00:00:14,200 --> 00:00:16,650
Hi, and welcome to my talk today.

2
00:00:17,040 --> 00:00:21,560
It is unleashing the potential of cloud
native open source vector databases.

3
00:00:22,170 --> 00:00:24,280
It would have been longer,
but I really can't fit that.

4
00:00:24,849 --> 00:00:25,939
I'm Tim Spann.

5
00:00:26,110 --> 00:00:31,159
I'm the developer advocate here at
Zillow's along with my partner in Berlin

6
00:00:31,519 --> 00:00:37,230
and other people coming all over the
world, I cover Milvus, the open source

7
00:00:37,260 --> 00:00:39,440
vector database, which is pretty awesome.

8
00:00:39,930 --> 00:00:42,750
We're going to show you a bunch
of slides as we tend to do.

9
00:00:43,220 --> 00:00:45,190
Kube native is complex.

10
00:00:45,580 --> 00:00:49,200
You're trying to get everything running
natively in the cloud in Kubernetes.

11
00:00:49,200 --> 00:00:54,820
But we'll show you the easy way
to run an advanced open source

12
00:00:54,860 --> 00:00:56,640
distributed vector database.

13
00:00:56,890 --> 00:00:59,590
But we'll show you some cool
demos first, really easy.

14
00:00:59,940 --> 00:01:01,640
Is there anything special going on?

15
00:01:02,030 --> 00:01:07,410
We're including a chatbot we created
to use Milvas and let you chat with

16
00:01:07,410 --> 00:01:09,000
a lot of different documentation.

17
00:01:09,500 --> 00:01:10,720
Why is that a thing?

18
00:01:11,220 --> 00:01:13,080
There's a lot of unstructured data.

19
00:01:13,840 --> 00:01:15,390
And let's show you some of it now.

20
00:01:15,700 --> 00:01:20,540
It could be something like, I
want to do something with Kafka.

21
00:01:21,040 --> 00:01:23,120
A popular streaming system.

22
00:01:23,610 --> 00:01:27,960
If you're down in Austin with we've got
some of my colleagues down there and

23
00:01:27,960 --> 00:01:32,660
some of my friends from StreamNative and
from a bunch of other cool companies.

24
00:01:33,210 --> 00:01:37,420
If you're in Austin, I definitely say
check out Current, pretty cool event.

25
00:01:37,780 --> 00:01:41,860
And here's a really easy way
you can learn how to use it.

26
00:01:42,410 --> 00:01:46,070
Very easy project all running on
Milvus and we give you the source code.

27
00:01:46,520 --> 00:01:49,770
Now, if you want to do something
like a search, you could do that.

28
00:01:50,370 --> 00:01:52,509
What is Milvus?

29
00:01:52,990 --> 00:01:56,500
If you didn't know, it's also
a bird, but we're talking about

30
00:01:56,500 --> 00:02:00,110
the database, high performance
vector database and other demos.

31
00:02:00,110 --> 00:02:02,190
You could see these are all public URLs.

32
00:02:02,210 --> 00:02:04,170
You don't need any special
thing to get there.

33
00:02:04,550 --> 00:02:08,660
You can also do something like
get a cat, but you should have

34
00:02:08,660 --> 00:02:10,420
one and search by the cat.

35
00:02:10,985 --> 00:02:12,385
Oh, those are pretty cool cats.

36
00:02:12,755 --> 00:02:13,535
You get the idea.

37
00:02:13,585 --> 00:02:19,445
Also, we could do a little
smarter cat and ask a question.

38
00:02:20,015 --> 00:02:23,065
Show me ceiling cats.

39
00:02:23,885 --> 00:02:25,325
Let's see, that one
might be a little hard.

40
00:02:25,555 --> 00:02:27,955
But we've got text and we've got an image.

41
00:02:28,545 --> 00:02:30,355
Oh, actually, they're doing pretty good.

42
00:02:30,785 --> 00:02:34,195
Now, the one thing we could do
is use a re ranking algorithm

43
00:02:34,755 --> 00:02:36,305
to adjust them algorithm.

44
00:02:36,945 --> 00:02:38,815
based on percentages.

45
00:02:38,815 --> 00:02:39,845
It's pretty cool.

46
00:02:39,965 --> 00:02:43,665
One is doing a search by the
vectors for my cat picture and one

47
00:02:43,665 --> 00:02:45,405
is doing the vectors of my text.

48
00:02:45,865 --> 00:02:49,585
It'll re rank them here and
that is the best one because

49
00:02:49,585 --> 00:02:51,035
you can see it's a ceiling cat.

50
00:02:51,335 --> 00:02:52,215
So that's pretty awesome.

51
00:02:52,215 --> 00:02:56,945
We've got a tutorial you could follow,
do your own just to give you an idea.

52
00:02:57,255 --> 00:02:58,965
Let's get back to the
slides for a little bit.

53
00:02:58,965 --> 00:03:01,805
Then we'll go to my custom
demo and source code.

54
00:03:03,240 --> 00:03:07,430
But, any of this data that's not
typical, maybe it changes, maybe it's

55
00:03:07,430 --> 00:03:10,550
variable, maybe it's things like images.

56
00:03:10,600 --> 00:03:12,210
They change a lot.

57
00:03:12,210 --> 00:03:14,720
One pixel changes, it's
a different encoding.

58
00:03:14,750 --> 00:03:15,710
Videos.

59
00:03:16,235 --> 00:03:17,925
Text molecules.

60
00:03:17,985 --> 00:03:23,545
There's a lot of it just getting more and
more, and most of it's never analyzed.

61
00:03:23,545 --> 00:03:24,445
You don't query it.

62
00:03:24,485 --> 00:03:25,995
You don't use it to find things.

63
00:03:26,305 --> 00:03:28,774
Now you can, which is pretty awesome.

64
00:03:28,905 --> 00:03:31,265
This state is growing
will continue to grow.

65
00:03:31,295 --> 00:03:35,334
But what's nice is thanks to the power
of these new deep learning models for

66
00:03:35,335 --> 00:03:40,495
the last couple of years, we could take
this unstructured data applied deep

67
00:03:40,495 --> 00:03:43,129
learning models, map it to vectors.

68
00:03:44,620 --> 00:03:46,870
Thank you, neural networks,
and then make it available in

69
00:03:46,870 --> 00:03:48,700
a vector database like Milvus.

70
00:03:49,110 --> 00:03:53,249
Or if you want it fully
Kubernetes, fully managed for

71
00:03:53,250 --> 00:03:54,840
you, Azilis Cloud does all that.

72
00:03:54,860 --> 00:03:58,260
You don't have to worry about
setting up your own Helm

73
00:03:58,260 --> 00:03:59,810
charts and doing all that work.

74
00:04:00,619 --> 00:04:02,270
But what is a vector database?

75
00:04:03,299 --> 00:04:09,260
It's built so you can store, index, and
query all these vector embeddings of

76
00:04:09,350 --> 00:04:12,040
whatever these unstructured data is.

77
00:04:13,080 --> 00:04:18,900
But it adds things on top of what you
might get from other ways to do this.

78
00:04:19,220 --> 00:04:20,580
So you get filtering.

79
00:04:21,130 --> 00:04:23,150
You get a hybrid search like you saw.

80
00:04:23,909 --> 00:04:25,649
Dense vector, some text.

81
00:04:26,020 --> 00:04:26,760
It's durable.

82
00:04:27,010 --> 00:04:28,099
It's going to be saved.

83
00:04:28,109 --> 00:04:29,810
It's going to make sure
you don't lose data.

84
00:04:30,080 --> 00:04:31,420
Things can be replicated.

85
00:04:31,640 --> 00:04:33,469
Highly available in a cluster.

86
00:04:34,019 --> 00:04:36,699
Things that make sense
for native Kubernetes.

87
00:04:37,089 --> 00:04:39,479
Sharding, aggregations.

88
00:04:39,969 --> 00:04:41,179
Things will be backed up.

89
00:04:41,209 --> 00:04:42,519
You could do full crud.

90
00:04:42,649 --> 00:04:45,829
You can create, you can
update, delete things.

91
00:04:46,399 --> 00:04:50,109
Indexing, re indexing, multiple
people using the same app.

92
00:04:51,304 --> 00:04:53,724
These are cloud things we all know about.

93
00:04:54,024 --> 00:04:57,684
Vector search libraries, you can
do vector searches very quickly

94
00:04:58,014 --> 00:04:59,964
with a lot of options there.

95
00:05:00,604 --> 00:05:06,924
And there's a lot beneath the covers to
support things like GPUs and custom chips.

96
00:05:07,154 --> 00:05:09,634
And to be able to scale
out to billions of them.

97
00:05:09,834 --> 00:05:11,864
Be able to insert and delete fast.

98
00:05:11,944 --> 00:05:14,654
Be able to handle a lot of
people querying at once.

99
00:05:15,054 --> 00:05:17,804
And regardless of what
that unstructured data is.

100
00:05:18,224 --> 00:05:23,524
We mentioned the fun ones, images and
video and your emails and all kinds of

101
00:05:23,544 --> 00:05:25,844
PDFs and random documents and audio.

102
00:05:26,234 --> 00:05:29,504
But it could be logs, can be any data.

103
00:05:29,544 --> 00:05:32,054
Maybe it's data that doesn't
doesn't always look the same.

104
00:05:32,054 --> 00:05:32,764
Maybe it changes.

105
00:05:32,784 --> 00:05:33,924
Maybe it's semi structured.

106
00:05:34,464 --> 00:05:36,644
Maybe it's structured, but
maybe there's an image with it.

107
00:05:37,174 --> 00:05:40,664
There's a lot of different data that
works well on a vector database.

108
00:05:41,459 --> 00:05:45,879
A lot of reasons why you may need
to use this data as part of a RAG

109
00:05:45,879 --> 00:05:48,119
approach against a large language model.

110
00:05:48,459 --> 00:05:50,539
So having a vector database makes sense.

111
00:05:50,549 --> 00:05:55,359
Again, take the data, make it a
vector embedding, get it in the vector

112
00:05:55,369 --> 00:05:58,649
database so it's available and safe.

113
00:05:59,649 --> 00:06:04,039
Perform an approximate nearest
neighbor similarity search, get your

114
00:06:04,039 --> 00:06:08,079
results, and then people can query
it and do what they need with it.

115
00:06:08,664 --> 00:06:13,694
Very often, like we said to use in
various applications, especially in AI.

116
00:06:14,474 --> 00:06:17,654
Now, could you get by with something else?

117
00:06:17,994 --> 00:06:21,034
There are some really good libraries
out there, and we know this because

118
00:06:21,084 --> 00:06:23,434
we use them underneath the covers.

119
00:06:23,864 --> 00:06:25,204
The ones from Facebook.

120
00:06:25,754 --> 00:06:27,685
The the Small Worlds one.

121
00:06:27,995 --> 00:06:31,975
But these are really designed for
Writing your own little apps, testing

122
00:06:31,985 --> 00:06:35,855
things out, learning, working with
a couple hundred thousand vectors.

123
00:06:36,355 --> 00:06:39,484
A lot of functionality
there, but it's a library.

124
00:06:40,034 --> 00:06:44,205
You could take some, existing
database that does something else,

125
00:06:44,715 --> 00:06:47,555
add one of those libraries, and
that kind of does a little bit.

126
00:06:48,270 --> 00:06:50,350
Does it scale out as big as you need?

127
00:06:50,420 --> 00:06:50,890
No.

128
00:06:51,540 --> 00:06:54,640
Does it support the full
life cycle of a vector?

129
00:06:54,910 --> 00:06:56,400
Do you get real time search?

130
00:06:57,060 --> 00:07:02,199
Top K results, range searches, hybrid
searches, multi modal, multi vector.

131
00:07:02,489 --> 00:07:06,089
We could have 10 vectors in a
single row in our collection.

132
00:07:06,739 --> 00:07:11,940
Fully distributed, fully compute and
storage separated, so you could easily

133
00:07:11,940 --> 00:07:16,049
do Kubernetes, that's what Milvus does.

134
00:07:16,719 --> 00:07:20,020
Now, Milvus has been
around for a while here.

135
00:07:20,390 --> 00:07:24,019
It is part of the Linux
Foundation AI and Data.

136
00:07:24,740 --> 00:07:26,409
It is Apache licensed.

137
00:07:26,470 --> 00:07:29,870
A lot, almost 30, 000 stars.

138
00:07:29,880 --> 00:07:31,370
A lot of people using this.

139
00:07:31,810 --> 00:07:33,440
Download numbers go up all the time.

140
00:07:33,440 --> 00:07:36,270
You could start off with just
a pip install in a Jupyter

141
00:07:36,270 --> 00:07:37,750
notebook and be ready to go.

142
00:07:38,450 --> 00:07:39,670
Code is very reusable.

143
00:07:39,820 --> 00:07:42,640
Write it against something
that just runs on your laptop.

144
00:07:42,910 --> 00:07:46,110
Then run out to the biggest
Kubernetes cluster ever.

145
00:07:46,950 --> 00:07:50,500
And it integrates with all the things
that you're used to using already, whether

146
00:07:50,500 --> 00:07:55,710
it's OpenAI, LangChain, Llama, Index,
whatever it is, all the features you

147
00:07:55,710 --> 00:07:57,949
expect from the modern vector database.

148
00:07:58,415 --> 00:08:02,425
Dense and sparse encodings,
filtering, re ranking, as new

149
00:08:02,455 --> 00:08:04,695
things come out, it is added there.

150
00:08:05,035 --> 00:08:06,904
Very scalable, very elastic.

151
00:08:06,974 --> 00:08:11,265
Again, using the power of Kubernetes
to shrink down when you need to.

152
00:08:11,594 --> 00:08:15,574
Also, you can prototype in Docker,
run with Milvus Lite in your

153
00:08:15,575 --> 00:08:19,785
notebook, and while not incurring
that cost until you're ready.

154
00:08:19,995 --> 00:08:21,175
Which is nice.

155
00:08:21,285 --> 00:08:24,705
Support for all the hardware acceleration
that's available in all the different

156
00:08:24,705 --> 00:08:29,314
clouds, different ways to search,
different ways to tune the consistency.

157
00:08:29,675 --> 00:08:33,104
So depending on what your needs
are, you have a lot of options.

158
00:08:33,375 --> 00:08:37,225
If you need to improve
performance regardless of

159
00:08:37,275 --> 00:08:38,914
anything else, you could do that.

160
00:08:39,135 --> 00:08:45,085
Support for all the big indexes, things
like sparse indexes, Disk space indexes,

161
00:08:45,335 --> 00:08:47,555
GPU indexes, especially with NVIDIA.

162
00:08:47,555 --> 00:08:49,795
They're doing some great stuff with Cagra.

163
00:08:50,235 --> 00:08:54,455
The hierarchical, navigable
small worlds one, which is very

164
00:08:54,464 --> 00:08:55,974
fast, does a lot of things.

165
00:08:56,474 --> 00:09:00,774
Different types of searches and
ability to group them and filter them.

166
00:09:00,834 --> 00:09:04,954
Really important to optimize, speed
things up, and get just what you need.

167
00:09:05,254 --> 00:09:07,534
Again, multi people using everything.

168
00:09:08,014 --> 00:09:09,424
All the hardware you need.

169
00:09:10,149 --> 00:09:11,869
Very straightforward there.

170
00:09:12,989 --> 00:09:16,599
And there is someone out there with
almost a hundred billion vectors.

171
00:09:16,899 --> 00:09:17,779
And it can be done.

172
00:09:17,839 --> 00:09:18,849
Ten billion vectors.

173
00:09:19,369 --> 00:09:26,149
with a 1500 dimension vector in there that
exists in a single instance on the cloud.

174
00:09:27,229 --> 00:09:31,139
Again, decoupling compute and storage
as we expect in everything here.

175
00:09:31,549 --> 00:09:34,559
And it is done because we
need to scale everything.

176
00:09:34,999 --> 00:09:37,039
A proxy to access thing.

177
00:09:37,479 --> 00:09:42,589
Be able to log all the coordination
of what's going on with all the

178
00:09:43,609 --> 00:09:47,029
elements in your cluster, whether
it's data querying or indexing.

179
00:09:47,919 --> 00:09:51,439
All those workers making sure
you get your All your queries

180
00:09:51,439 --> 00:09:52,829
done no matter how many you need.

181
00:09:52,849 --> 00:09:54,729
Scale up more if those slow down.

182
00:09:55,209 --> 00:09:56,939
Index as data is coming in.

183
00:09:57,289 --> 00:09:59,689
Make sure it's indexed and ready to go.

184
00:10:00,319 --> 00:10:03,759
Make sure your data is
processed and then stored.

185
00:10:04,279 --> 00:10:06,569
And permanently stored without being lost.

186
00:10:06,974 --> 00:10:11,754
We store this in native storage,
whether it's S3 or what have you.

187
00:10:12,774 --> 00:10:17,884
Support for all the major
vector index types out there.

188
00:10:18,714 --> 00:10:21,444
Approximate nearest
neighbor search type stuff.

189
00:10:21,954 --> 00:10:26,334
Everyone's used HNSW, it
is very good, graph based.

190
00:10:26,804 --> 00:10:31,434
The Kaggler one by NVIDIA is a
GPU version, which is incredibly

191
00:10:31,434 --> 00:10:33,724
fast, which is important.

192
00:10:34,074 --> 00:10:38,634
If you want things super accurate,
might not work on a super

193
00:10:38,634 --> 00:10:39,974
large one, you could do flat.

194
00:10:40,284 --> 00:10:42,154
There is a GPU version of that.

195
00:10:42,734 --> 00:10:49,054
The quantization based IVF flat is a
nice balance, a little faster there.

196
00:10:49,384 --> 00:10:55,394
Accuracy is not as high as the pure
flat SQ8 quantization reduces your disk

197
00:10:55,394 --> 00:11:01,164
load for PQ, again, another one of the
quantized base indexes, you want a high

198
00:11:01,164 --> 00:11:07,699
query speed, and you're willing to take
a little bit of accuracy off, again, You

199
00:11:07,699 --> 00:11:12,769
get those options, what you want to do
again, being able to do by disk is nice.

200
00:11:12,769 --> 00:11:14,709
So you don't have to put
a lot of stuff in RAM.

201
00:11:15,529 --> 00:11:19,839
Traditionally, things have to go in
RAM to be able to get to a high level.

202
00:11:20,639 --> 00:11:25,659
As you can see, this will look pretty
familiar to people who run Kubernetes.

203
00:11:27,849 --> 00:11:30,039
Having the separation
of different services.

204
00:11:30,284 --> 00:11:35,464
And stores like we mentioned
workers so we can scale out as large

205
00:11:35,464 --> 00:11:37,824
as we need or shrink back down.

206
00:11:39,014 --> 00:11:44,174
We have messaging in the middle,
your choice of Kafka or Pulsar, and

207
00:11:44,174 --> 00:11:45,944
both of those are very powerful.

208
00:11:46,334 --> 00:11:49,804
This again makes sure you don't lose
data, makes things are distributed,

209
00:11:50,284 --> 00:11:54,304
makes sure things aren't stuck
waiting for something, which is great.

210
00:11:54,564 --> 00:11:59,624
And again, getting those workloads
distributed and out to however many

211
00:11:59,624 --> 00:12:04,944
people need them, keeping separate
indexing, querying, and data processing

212
00:12:04,944 --> 00:12:07,964
and storage, so things can scale out.

213
00:12:07,964 --> 00:12:12,044
We have etcd in there great
for coordination and metadata.

214
00:12:12,614 --> 00:12:13,974
You really need that.

215
00:12:14,474 --> 00:12:18,679
And again, etcd is really good
in our environments there.

216
00:12:18,679 --> 00:12:23,379
So we use that again, a
different way to look at it.

217
00:12:23,569 --> 00:12:27,649
Obviously, we're running on Kubernetes
here on top of different servers,

218
00:12:27,649 --> 00:12:32,539
but we could take advantage of
different processors and different

219
00:12:33,199 --> 00:12:37,229
systems, depending on where you're
running and showing you a little more

220
00:12:37,319 --> 00:12:38,829
of how they connect to each other.

221
00:12:39,329 --> 00:12:43,749
Again, keeping things separated so we
could scale them out pretty easily.

222
00:12:44,299 --> 00:12:45,649
Remember I said the install?

223
00:12:45,709 --> 00:12:47,349
That is the full install.

224
00:12:47,879 --> 00:12:51,399
And that will give you the libraries
to talk to Docker or the cloud or

225
00:12:51,399 --> 00:12:53,739
your, wherever your cluster is running.

226
00:12:54,189 --> 00:12:57,409
And also give you the ability
to run on your small device.

227
00:12:57,549 --> 00:12:58,719
Just in a notebook.

228
00:12:59,169 --> 00:13:01,239
Don't need anything more advanced.

229
00:13:01,519 --> 00:13:03,669
Under the covers it does all the magic.

230
00:13:04,649 --> 00:13:11,569
Like I said, magic is taking unstructured
data and turning it into something that

231
00:13:11,599 --> 00:13:17,919
AI can understand and find quickly is what
these various embeddings are used for.

232
00:13:18,899 --> 00:13:22,889
Retrieval Augmented Generation, RAG,
you're going to hear that term a lot.

233
00:13:22,899 --> 00:13:26,109
A ton of people are doing
this because it's helpful.

234
00:13:26,519 --> 00:13:27,639
It saves you money.

235
00:13:27,859 --> 00:13:29,419
It makes your results more accurate.

236
00:13:29,619 --> 00:13:31,759
Gives you back more relevant results.

237
00:13:31,929 --> 00:13:34,459
Reduces significantly hallucination.

238
00:13:34,689 --> 00:13:39,865
And you can provide, Something
specific to a domain, like I gave

239
00:13:39,865 --> 00:13:47,714
it air quality data, gave it just
articles about Milvus, so we get better

240
00:13:47,714 --> 00:13:49,634
results if someone asks a question.

241
00:13:50,989 --> 00:13:57,379
I send that to the vector similarity
search first, search my collections to

242
00:13:57,379 --> 00:14:02,549
get domain specific data, things that
maybe are private to me or that I know

243
00:14:02,859 --> 00:14:08,569
you're going to need for that question,
use that to Give you the better answers

244
00:14:08,579 --> 00:14:10,619
from all the major models out there.

245
00:14:10,869 --> 00:14:16,099
Whether you're hosted on Allama, or
OpenAI, or Hugging Face, or Google,

246
00:14:16,099 --> 00:14:22,509
or Microsoft, or Cohere, or Mistral,
or all those great options out there.

247
00:14:23,239 --> 00:14:25,559
Get your answers back to your actions.

248
00:14:25,769 --> 00:14:27,039
Pretty straightforward.

249
00:14:27,529 --> 00:14:31,639
And again, what's nice is,
you can keep your data secure.

250
00:14:32,309 --> 00:14:33,649
No one has to see it.

251
00:14:34,394 --> 00:14:37,684
And you can even run your own
local models, so you don't have

252
00:14:37,684 --> 00:14:41,024
to worry that the model will be
retrained on your specific stuff.

253
00:14:41,714 --> 00:14:44,554
Data sovereignty is a cool
word, meaning I own it.

254
00:14:44,654 --> 00:14:49,704
I'm not having my data leak out
somewhere, if it is my secret sauce there.

255
00:14:50,934 --> 00:14:52,214
And you got options.

256
00:14:52,579 --> 00:14:57,189
Now, if you are a Kubernetes expert,
which I'm imagining we have some

257
00:14:57,199 --> 00:15:00,559
people on the conference that
are, you could set up everything.

258
00:15:00,639 --> 00:15:04,349
Everything's open source, including
things to make it even better.

259
00:15:04,619 --> 00:15:07,999
I'll show you AddTo is a nice
GUI for managing it, so you

260
00:15:07,999 --> 00:15:09,839
don't need to pay for anything.

261
00:15:10,479 --> 00:15:15,079
Nowhere is a vector search engine
embedded into Novus to use all those

262
00:15:15,099 --> 00:15:19,699
popular libraries, make it so it
can be expanded out to support more.

263
00:15:20,074 --> 00:15:25,244
I made things run fast, again distributed,
and again another open source project.

264
00:15:25,584 --> 00:15:32,514
When you saw that OSS chat, we found out
that calling models like OpenAI is pricey.

265
00:15:32,574 --> 00:15:33,774
GPT is not cheap.

266
00:15:34,044 --> 00:15:39,334
So we came up with a good way to cache
your queries and give you optimal results.

267
00:15:39,344 --> 00:15:42,354
Save money with a very
simple open source tool.

268
00:15:42,804 --> 00:15:46,824
If you want to know how fast things
are, we publish a benchmarking

269
00:15:46,864 --> 00:15:47,764
tool in the open source.

270
00:15:47,764 --> 00:15:53,044
You could do it if you just
want to create collections and

271
00:15:53,044 --> 00:15:54,964
let someone else do the work.

272
00:15:55,134 --> 00:15:56,284
Not a bad idea.

273
00:15:56,584 --> 00:15:58,274
Have things a hundred percent secure.

274
00:15:58,275 --> 00:15:59,954
Have Zillow's cloud do it.

275
00:16:00,464 --> 00:16:02,729
They'll put it where you need to put it.

276
00:16:02,939 --> 00:16:03,709
To store it.

277
00:16:03,999 --> 00:16:07,079
Or if you already have things built
out, you can run on top of that.

278
00:16:08,099 --> 00:16:10,489
All the embedding models
we mentioned before.

279
00:16:10,989 --> 00:16:12,359
All the resources.

280
00:16:13,199 --> 00:16:14,929
I'm going to go into demo next.

281
00:16:15,109 --> 00:16:16,749
I want to get the slides out of the way.

282
00:16:17,049 --> 00:16:18,929
If you're watching this later.

283
00:16:19,954 --> 00:16:22,924
Fast forward until the demos if you want.

284
00:16:23,224 --> 00:16:24,754
This is important information.

285
00:16:25,184 --> 00:16:29,144
Give us a star to make sure we're on the
right track for the open source project.

286
00:16:29,704 --> 00:16:32,264
A lot of other databases
are not open source.

287
00:16:32,344 --> 00:16:36,424
Also, if you got problems, Discord
is where we usually hang out.

288
00:16:36,464 --> 00:16:37,874
We've got engineers in there.

289
00:16:38,294 --> 00:16:39,284
I'm in there.

290
00:16:39,844 --> 00:16:42,104
Our friends all over
the world are in there.

291
00:16:42,324 --> 00:16:44,814
other community members, power users.

292
00:16:45,084 --> 00:16:48,584
We also have a really good AI
chat bot that has been trained

293
00:16:48,584 --> 00:16:52,964
on our stuff, trained on these
problems, is exceptionally good.

294
00:16:53,304 --> 00:16:56,414
So definitely check us out
on Discord if you're having

295
00:16:56,414 --> 00:16:59,054
problems, if you're in New York.

296
00:16:59,314 --> 00:17:02,194
or near New York or Princeton or Philly.

297
00:17:03,164 --> 00:17:04,104
I run a meetup.

298
00:17:04,164 --> 00:17:07,404
Now I do record this, sometimes stream it.

299
00:17:07,414 --> 00:17:12,314
We try to stream it on zoom or YouTube
depends on network traffic and, the

300
00:17:12,314 --> 00:17:14,004
whatever's going on at the time.

301
00:17:14,004 --> 00:17:18,764
Sometimes it's easier than others, but I'm
running one in a couple of days, usually

302
00:17:18,764 --> 00:17:21,094
once a month definitely check it out.

303
00:17:21,094 --> 00:17:25,954
We also have ones in California
and in Berlin and in Asia.

304
00:17:25,954 --> 00:17:27,084
So check those out.

305
00:17:28,534 --> 00:17:33,064
If you want to learn more about
Genitive AI, we keep a really good

306
00:17:33,064 --> 00:17:38,764
selection of knowledge articles with
notebooks and how to get started

307
00:17:38,804 --> 00:17:40,744
regardless of where you want to run it.

308
00:17:41,244 --> 00:17:43,264
We are friends with everybody.

309
00:17:43,264 --> 00:17:46,164
So like I mentioned before,
all those different names,

310
00:17:46,564 --> 00:17:48,184
we've got examples with them.

311
00:17:48,434 --> 00:17:52,184
I like to do a Llama so I can
run it on the laptop for free.

312
00:17:52,424 --> 00:17:53,684
Don't have to pay anyone.

313
00:17:54,394 --> 00:17:56,764
I've got a ton of articles
on how to do this.

314
00:17:58,074 --> 00:18:03,594
I've got an interesting one on using
street cameras data in New York.

315
00:18:04,074 --> 00:18:05,024
That is not AI.

316
00:18:05,024 --> 00:18:05,284
That's mine.

317
00:18:07,144 --> 00:18:12,264
And I got some other one on showing
you that we don't just store vectors.

318
00:18:12,824 --> 00:18:17,064
We have a ton of support for different
numbers and other fields because

319
00:18:17,064 --> 00:18:23,069
you'll see Vector is important, but
unstructured data is often next to

320
00:18:23,369 --> 00:18:25,269
structured or semi structured data.

321
00:18:25,329 --> 00:18:28,259
You want to put a whole
chunk of JSON in there.

322
00:18:28,489 --> 00:18:31,189
Maybe you've got a couple of
metadata fields really important.

323
00:18:31,189 --> 00:18:34,339
If I have an image, I might want
to link to the original source.

324
00:18:34,809 --> 00:18:37,159
Some metadata about the size.

325
00:18:37,499 --> 00:18:38,669
Maybe a description.

326
00:18:38,819 --> 00:18:40,579
Things we don't need, but nice to have.

327
00:18:40,939 --> 00:18:43,489
The more data you have, The better.

328
00:18:43,529 --> 00:18:46,819
If you have data about
an image, why not use it?

329
00:18:47,139 --> 00:18:49,799
Pre compute things, make
things faster, easier.

330
00:18:50,619 --> 00:18:54,389
Again, if you want to see the new Milvus
Lite, and how you can use that in a

331
00:18:54,389 --> 00:18:56,249
notebook, we've got an article there.

332
00:18:57,659 --> 00:19:00,829
And, I'm doing some cool
stuff with Milvus at the Edge.

333
00:19:01,399 --> 00:19:04,709
Whether it's a client or
running Milvus Lite there.

334
00:19:05,079 --> 00:19:06,629
Or even the Docker version.

335
00:19:07,189 --> 00:19:08,019
We could do that.

336
00:19:08,029 --> 00:19:11,649
In this one I'm doing some stuff
with some AI kits, and it's fun.

337
00:19:11,869 --> 00:19:13,479
You could check that article out.

338
00:19:14,009 --> 00:19:15,859
I put out a weekly newsletter.

339
00:19:16,169 --> 00:19:17,469
Covers everything.

340
00:19:17,649 --> 00:19:19,639
All the fun stuff in open source.

341
00:19:19,999 --> 00:19:23,429
Plus some streaming stuff and some other
stuff I've worked with in the past.

342
00:19:23,919 --> 00:19:26,799
If you want to reach out,
this is where we are.

343
00:19:27,394 --> 00:19:31,644
You can always find me on LinkedIn
more than I would like, but I'm there.

344
00:19:31,754 --> 00:19:32,904
Same with Twitter.

345
00:19:33,564 --> 00:19:34,954
Let's get into some demos.

346
00:19:34,974 --> 00:19:37,924
Hopefully everything in
the world didn't time out.

347
00:19:38,314 --> 00:19:39,964
We showed you these demos.

348
00:19:40,214 --> 00:19:42,494
As you can see, you can go right to them.

349
00:19:42,984 --> 00:19:46,564
Let's see if all our
other stuff timed out.

350
00:19:47,214 --> 00:19:48,484
I hope it did not.

351
00:19:49,104 --> 00:19:55,784
Okay, so I have a cluster here
hosted on Zillow's for free.

352
00:19:55,894 --> 00:19:58,034
I'm using the free plan for myself here.

353
00:19:58,504 --> 00:20:00,424
And I have a couple of collections.

354
00:20:00,644 --> 00:20:01,974
It's pretty easy to get to.

355
00:20:01,974 --> 00:20:06,841
You can also use add to, remember
that one, regardless of which version.

356
00:20:06,841 --> 00:20:09,784
So if I want to connect to
Docker one, I can do that.

357
00:20:10,134 --> 00:20:13,394
If I want to connect to
Zillow's cloud, I can do that.

358
00:20:13,774 --> 00:20:15,624
And this shows me all the fields I have.

359
00:20:15,854 --> 00:20:19,965
You can see here, I've got one
vector field with the with the flat,

360
00:20:20,625 --> 00:20:24,225
but I also have a bunch of fields
here, and these are important ones.

361
00:20:24,225 --> 00:20:28,195
I've got a text field in here, so
I can chunk a big piece of text

362
00:20:28,195 --> 00:20:32,625
in there, so I can directly get
that, and I can do vector searches.

363
00:20:32,625 --> 00:20:36,145
If you don't know what to search
on, this will let you figure that

364
00:20:36,145 --> 00:20:40,685
out, or you could just browse the
data, which is pretty helpful.

365
00:20:40,950 --> 00:20:45,760
What's nice with this tool is I can
pick how consistent I want the data.

366
00:20:45,790 --> 00:20:50,580
Right now I don't have anything inserting,
so that's fine, but if I wanted to

367
00:20:50,620 --> 00:20:57,230
query on stuff as it's coming in, I
could just weaken my consistency there.

368
00:20:57,290 --> 00:21:00,200
Again, don't have to think
about that if you don't care.

369
00:21:00,510 --> 00:21:04,240
Like for this one, let
me find ones where the.

370
00:21:04,740 --> 00:21:10,720
Doc source is, you can see here, we
can look inside Jason is me about that.

371
00:21:13,530 --> 00:21:14,220
Can I do that?

372
00:21:14,480 --> 00:21:15,060
Yes, I can.

373
00:21:15,510 --> 00:21:15,780
Okay.

374
00:21:15,780 --> 00:21:18,350
I still got a couple of results here.

375
00:21:18,880 --> 00:21:20,260
You can add another condition.

376
00:21:20,830 --> 00:21:27,060
What if I want the primary
category to be vector database.

377
00:21:30,160 --> 00:21:32,220
And now we've limited that further.

378
00:21:32,720 --> 00:21:36,390
Which is nice, and you can copy
all these things, pretty easy.

379
00:21:36,980 --> 00:21:38,940
You can also add data here if you want.

380
00:21:39,180 --> 00:21:43,255
If the data is partitioned, As you can
see here, this one is, it tells you

381
00:21:43,255 --> 00:21:45,025
how many entries in each partition.

382
00:21:45,335 --> 00:21:47,015
This is for performance.

383
00:21:47,365 --> 00:21:52,595
This one is partitioning based on a
key, and that key is that category,

384
00:21:52,605 --> 00:21:54,085
so there's a bunch of different ones.

385
00:21:54,745 --> 00:21:58,635
Now we can do a vector search
based on a specific thing.

386
00:21:58,955 --> 00:22:02,205
As you saw with those examples,
you upload an image, and that'll

387
00:22:02,205 --> 00:22:06,105
be your vector to get turned into
The appropriate size number and we

388
00:22:06,105 --> 00:22:07,695
can limit however you want here.

389
00:22:07,925 --> 00:22:10,725
What's nice with this one is
this will give you the code.

390
00:22:11,185 --> 00:22:15,955
So if you want to use an app to run
this, you can just grab that code.

391
00:22:16,235 --> 00:22:19,605
You can also export the data
as a comma separated value.

392
00:22:20,155 --> 00:22:21,005
Pretty easy.

393
00:22:21,265 --> 00:22:24,075
Just to give you an idea how
you can browse your data.

394
00:22:24,995 --> 00:22:27,555
Let's go to our other thing here.

395
00:22:28,180 --> 00:22:30,321
Hopefully I didn't make this too big here.

396
00:22:30,321 --> 00:22:31,179
Let's get out of here.

397
00:22:31,180 --> 00:22:31,540
Okay.

398
00:22:31,850 --> 00:22:35,580
So you could see, I could search it a
couple of different ways, import data.

399
00:22:36,030 --> 00:22:38,100
This one's nice is with
the Zillow's cloud.

400
00:22:38,150 --> 00:22:39,730
There's a REST endpoint.

401
00:22:40,040 --> 00:22:43,630
So you could try things out looking
at a query, see what you'd get

402
00:22:43,640 --> 00:22:46,180
back, however you want to do that.

403
00:22:46,500 --> 00:22:48,140
You could also browse the data.

404
00:22:48,420 --> 00:22:51,570
This is cool as you find data
you want and use that to search.

405
00:22:52,080 --> 00:22:56,480
And when I do this search, you could
see back what's got the number one rank?

406
00:22:56,980 --> 00:22:57,660
This one.

407
00:22:57,860 --> 00:22:59,860
Because it's an exact match.

408
00:22:59,910 --> 00:23:01,070
Because that's the one I searched on.

409
00:23:02,050 --> 00:23:02,910
That sort of thing.

410
00:23:03,230 --> 00:23:08,130
Now we have a bunch of different notebooks
here that do a lot of different things.

411
00:23:08,900 --> 00:23:12,280
Again, like I said, they're documented
to make it straight forward.

412
00:23:12,640 --> 00:23:14,410
Show you what libraries you need.

413
00:23:14,830 --> 00:23:17,330
Here, the stuff for Milvus.

414
00:23:17,780 --> 00:23:20,500
Here, I'm saying where
I'm getting my data from.

415
00:23:20,930 --> 00:23:23,050
Connect to my Melvis.

416
00:23:23,370 --> 00:23:27,500
If you're connecting to Zillow's cloud,
we have a token based system to log in.

417
00:23:27,870 --> 00:23:29,560
So I've got that in my environment.

418
00:23:29,820 --> 00:23:31,750
Check to see if I need my collection.

419
00:23:32,010 --> 00:23:33,370
This is how we add fields.

420
00:23:33,370 --> 00:23:34,750
You could add a ton of them.

421
00:23:35,170 --> 00:23:40,100
I add some indexes, create my
index, see what the partitions are.

422
00:23:40,990 --> 00:23:43,200
I've got a thing to take out my HTML.

423
00:23:43,200 --> 00:23:46,790
I'm looking at changing that
for a model that's coming next.

424
00:23:46,990 --> 00:23:49,540
Then I go through here
and I iterate through.

425
00:23:49,910 --> 00:23:55,950
The top feeds from Medium, which is RSS,
parse that out, get the fields I want.

426
00:23:56,540 --> 00:23:59,110
This is all it takes
to insert into Milvus.

427
00:23:59,560 --> 00:24:04,990
Again, you'll notice here, using
the model function to vectorize.

428
00:24:05,420 --> 00:24:07,890
That was listed up here.

429
00:24:08,510 --> 00:24:10,560
And that is a very simple one.

430
00:24:10,985 --> 00:24:14,815
That's using this smaller
model and my CPU, running on a

431
00:24:14,815 --> 00:24:18,995
laptop, and using Hugging Face
Sentence Transformers to do that.

432
00:24:19,645 --> 00:24:22,275
Ton of different models, doesn't
look any different to you.

433
00:24:22,605 --> 00:24:27,465
And then you could check the
results, run a query, run a search

434
00:24:27,485 --> 00:24:29,585
here, very straight forward.

435
00:24:29,815 --> 00:24:33,235
You can also do things
like a RAG, very simple.

436
00:24:33,565 --> 00:24:35,365
Again, for this one, LangChain.

437
00:24:36,160 --> 00:24:40,440
Connect to make sure I use the right
things in LangChain, connect to Milvus,

438
00:24:40,910 --> 00:24:45,990
there's my embedding, there's some text,
primary key, make sure we connect, and

439
00:24:46,030 --> 00:24:50,420
then we just go through a loop and then
we can ask questions, if you look here,

440
00:24:50,610 --> 00:24:55,660
when I get the result, I send those
to a Slack channel, you can see here,

441
00:24:55,800 --> 00:25:01,790
question, answer, you can see here, Pretty
straightforward to do that and not hard.

442
00:25:02,230 --> 00:25:06,110
We will give you all the source
code if you go to my GitHub.

443
00:25:06,490 --> 00:25:09,840
You'll see I have a lot of examples.

444
00:25:10,140 --> 00:25:14,930
Lots of cool stuff whether you're
interested in partitioning data, air

445
00:25:14,930 --> 00:25:20,660
quality, street cameras, I got a knowledge
base, parsing news, doing multimodal.

446
00:25:20,935 --> 00:25:26,395
Doing stuff on a Raspberry Pi, looking
at Olympics data, running on a Jetson,

447
00:25:27,055 --> 00:25:31,605
doing travel advisories, running on
some other devices, looking at, oh, I

448
00:25:31,605 --> 00:25:33,365
forgot about the vehicle collisions.

449
00:25:33,365 --> 00:25:35,325
That one's interesting stuff in New York.

450
00:25:35,665 --> 00:25:38,670
If you saw what you like,
definitely reach out.

451
00:25:38,670 --> 00:25:42,084
We are always trying to help people
get started, whether it's at the

452
00:25:42,084 --> 00:25:45,389
meetup, a webinar, or in person.

453
00:25:45,829 --> 00:25:47,299
Definitely check it out.

454
00:25:48,009 --> 00:25:51,029
Thanks for coming to my talk here.

455
00:25:51,779 --> 00:25:54,049
See if I could search,
show you the medium here.

456
00:25:54,229 --> 00:25:55,679
Got a ton of articles.

457
00:25:56,389 --> 00:25:57,329
Check them out.

458
00:25:57,809 --> 00:26:02,279
If you want a deeper dive into
the Kubernetes internals, we've

459
00:26:02,279 --> 00:26:04,049
got some materials on that.

460
00:26:04,409 --> 00:26:06,279
If you really want to
see it, but they work.

461
00:26:06,509 --> 00:26:08,109
All the Helm charts are available.

462
00:26:08,109 --> 00:26:09,649
Everything you need to get running.

463
00:26:10,329 --> 00:26:11,949
And it's pretty straightforward.

464
00:26:12,089 --> 00:26:12,979
So thanks a lot.

