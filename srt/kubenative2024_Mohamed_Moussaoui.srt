1
00:00:14,140 --> 00:00:15,020
Welcome, everyone.

2
00:00:15,180 --> 00:00:16,509
I'm Mohamed Moussaoui.

3
00:00:16,550 --> 00:00:21,200
And today we are diving into
NATS, the cloud native challenger

4
00:00:21,200 --> 00:00:22,509
to Kafka's messaging throne.

5
00:00:23,640 --> 00:00:28,240
Get ready to explore how NATS is shaking
up the world of distributed messaging.

6
00:00:28,829 --> 00:00:34,569
And to kick things off, let's dive into
a real world scenario that illustrates

7
00:00:34,649 --> 00:00:38,840
why efficient messaging systems are
crucial in more in modern applications.

8
00:00:38,840 --> 00:00:44,050
So imagine a smart city where various
systems communicate seamlessly.

9
00:00:45,180 --> 00:00:48,929
We have a weather station that
reports high temperatures, triggering

10
00:00:48,929 --> 00:00:52,570
notifications to citizens, and
meanwhile smart thermostats

11
00:00:52,700 --> 00:00:54,960
adjust to manage power loads.

12
00:00:56,390 --> 00:01:00,519
This interconnected scenario is made
possible by efficient messaging systems.

13
00:01:01,175 --> 00:01:05,504
So in today's world, several messaging
systems are widely used to enable such

14
00:01:05,515 --> 00:01:08,015
complex and real time environments.

15
00:01:08,545 --> 00:01:12,905
But before talking about that, let's
quickly define what is a messaging system.

16
00:01:13,634 --> 00:01:17,015
So a messaging system is the
backbone of distributed applications,

17
00:01:17,414 --> 00:01:21,645
enabling different Parts off a
system to communicate efficiently.

18
00:01:22,604 --> 00:01:28,335
It's what allows our smart city example
to function smoothly in the real world.

19
00:01:28,345 --> 00:01:31,675
For example, we have Apache Kafka
that is widely used and it's

20
00:01:31,715 --> 00:01:35,815
popular for its high throughout
distributed event streaming platform.

21
00:01:36,375 --> 00:01:41,175
We have also rapid MQ that is known
for its reliability and support

22
00:01:41,195 --> 00:01:42,635
for multiple messaging protocols.

23
00:01:43,940 --> 00:01:45,909
And it's widely used for IoT systems.

24
00:01:46,759 --> 00:01:50,580
We have also Apache Pulsar that
is another contender offering

25
00:01:50,589 --> 00:01:53,049
multi tenancy and geo replication.

26
00:01:53,869 --> 00:01:58,649
These systems have been the backbone
of many base of many applications,

27
00:01:59,019 --> 00:02:02,919
powering everything from financial
transactions to social media feeds.

28
00:02:03,360 --> 00:02:07,490
For example, Apache Kafka is developed
by LinkedIn for its its feeds.

29
00:02:09,100 --> 00:02:13,780
So these systems have proven their
worth in handling large volumes of data.

30
00:02:15,385 --> 00:02:18,815
And enabling real time communication
between different parts of a system.

31
00:02:19,885 --> 00:02:25,385
However, as we move further into the cloud
native era, new challenges are emerging.

32
00:02:25,835 --> 00:02:28,215
And this is where NAT comes into play.

33
00:02:28,735 --> 00:02:32,654
Current streaming technologies face
several significant challenges.

34
00:02:33,234 --> 00:02:36,545
First of all, we have the
infrastructure complexity that

35
00:02:36,545 --> 00:02:38,345
can quickly become overwhelming.

36
00:02:38,855 --> 00:02:44,545
Especially as systems scale, our
setting up and maintaining streaming

37
00:02:44,545 --> 00:02:48,854
technologies requires a deep
understanding of these systems and

38
00:02:49,024 --> 00:02:51,315
significant or personal effort.

39
00:02:52,164 --> 00:02:55,804
Scalability also is another
constant challenge as the volume

40
00:02:55,804 --> 00:02:57,844
of data and requests grows.

41
00:02:58,004 --> 00:03:03,450
Handling extreme scale requires
Resource optimizations can lead to

42
00:03:03,450 --> 00:03:08,470
substantial resource consumption,
and maintaining data consistency

43
00:03:08,500 --> 00:03:13,299
and reliability across distributed
systems also presents complications.

44
00:03:13,890 --> 00:03:17,939
Ensuring message delivery in distributed
environments can be difficult,

45
00:03:18,329 --> 00:03:23,340
particularly in scenarios involving
network failures or node outages.

46
00:03:24,510 --> 00:03:26,910
These are the core issues
in the messaging systems.

47
00:03:28,194 --> 00:03:32,754
And here enter NAT, the messaging system
designed to tackle these issues head on.

48
00:03:33,254 --> 00:03:38,394
NAT is a simple, secure, and high
performance open source messaging system.

49
00:03:38,844 --> 00:03:42,604
It's designed for cloud native
applications, designed for IoT messaging,

50
00:03:42,744 --> 00:03:44,734
and microservice architectures.

51
00:03:45,044 --> 00:03:49,594
And also it's designed to go to the
edge, from the cloud to the edge.

52
00:03:51,284 --> 00:03:54,144
And NAT stands out with
its ease of deployment.

53
00:03:54,374 --> 00:03:59,074
Built in security features and ability to
handle millions of messages per second.

54
00:03:59,564 --> 00:04:02,064
It's built to tackle the
challenges we just discussed.

55
00:04:02,874 --> 00:04:05,174
NAT sounds promising, doesn't it?

56
00:04:05,864 --> 00:04:10,224
But you might be wondering, what
specific features does it offer to

57
00:04:10,224 --> 00:04:12,354
address the problems we've discussed?

58
00:04:12,754 --> 00:04:15,854
So let's dive deeper
into NAT's capabilities.

59
00:04:17,434 --> 00:04:20,384
NAT's architecture is divided
into two main components.

60
00:04:20,604 --> 00:04:23,154
We have NAT Core and NAT Jetstream.

61
00:04:23,634 --> 00:04:27,084
The foundation of every
functionality in NAT is published.

62
00:04:27,439 --> 00:04:32,169
Publish subscribe model, and it's
often referred to as pops up.

63
00:04:32,869 --> 00:04:33,949
So let's start with the.

64
00:04:36,340 --> 00:04:40,909
At its heart, as I said, we have
the PubSub model, where publishers

65
00:04:41,020 --> 00:04:45,129
send messages to specific subjects
and subscribers receive messages

66
00:04:45,140 --> 00:04:47,199
from one or more subjects.

67
00:04:47,759 --> 00:04:51,339
These subjects are organized
hierarchically like a tree

68
00:04:51,339 --> 00:04:53,259
structure, as we see here.

69
00:04:54,409 --> 00:04:59,129
The hierarchy is built using dots,
and while publishers can only send

70
00:04:59,199 --> 00:05:01,419
a message to one specific subject.

71
00:05:02,585 --> 00:05:04,365
Subscribers have more flexibility.

72
00:05:04,915 --> 00:05:10,954
They can subscribe to one or multiple
subjects using wildcards or will cards

73
00:05:12,114 --> 00:05:17,725
We have two types of full cards the
first one the asterisk which matches

74
00:05:17,725 --> 00:05:22,854
one token in the Hierarchy and the
second one is the greater than symbol

75
00:05:22,905 --> 00:05:24,915
which can match one or more tokens

76
00:05:26,975 --> 00:05:33,450
so about Building upon the Pub Sub
foundation, NAT also supports a

77
00:05:33,450 --> 00:05:40,429
request reply model, REC REP, enabling
more complex communication patterns.

78
00:05:40,900 --> 00:05:47,380
And for load balancing, NAT implements
built in queue groups, efficiently

79
00:05:47,420 --> 00:05:49,609
distributing messages among subscribers.

80
00:05:49,659 --> 00:05:52,110
And we'll see that in the demo.

81
00:05:53,210 --> 00:05:58,610
This feature is crucial for our
horizontal scaling of microservices.

82
00:05:59,705 --> 00:06:05,205
And additionally, NAT's clustering
provides high availability, utilizing a

83
00:06:05,225 --> 00:06:10,034
gossip protocol for server discovery and
a raft based system for leader election.

84
00:06:10,585 --> 00:06:13,469
Now when we enable this
stream, that is just a test.

85
00:06:15,199 --> 00:06:20,849
So easy to enable just streamer in that we
unlock a whole new realm of possibilities.

86
00:06:20,919 --> 00:06:25,289
We have just stream that provides a
built in processes engine, allowing

87
00:06:25,299 --> 00:06:27,259
messages to be stored and replayed later.

88
00:06:27,659 --> 00:06:33,569
And this capability enables fault tolerant
and high availability configurations.

89
00:06:34,249 --> 00:06:39,099
Also with just streams streaming
functionality, we gain fine green control

90
00:06:39,099 --> 00:06:41,359
or control over messages handling.

91
00:06:42,049 --> 00:06:42,739
We can configure.

92
00:06:43,614 --> 00:06:48,494
replay policies, for example, specifying
that a consumer should receive stored

93
00:06:48,494 --> 00:06:54,044
messages at their original publication
rate rather than as fast as possible.

94
00:06:54,564 --> 00:06:59,714
We can also set retention policies
based on time, message count, or size.

95
00:07:01,014 --> 00:07:05,634
And further, furthermore, this stream
can be configured as a shared queue,

96
00:07:06,184 --> 00:07:11,394
shared work queue, facilitating desk
Task distribution among multiple workers.

97
00:07:12,314 --> 00:07:16,794
Also, the stream offers a key
value store built on top of the

98
00:07:16,794 --> 00:07:21,694
streams, which can effectively
replace Redis in many scenarios.

99
00:07:22,644 --> 00:07:27,064
This key fetch value store allows us
to perform operations like storing,

100
00:07:28,624 --> 00:07:33,164
storing and retrieving key value
pairs, setting expiration times

101
00:07:33,174 --> 00:07:38,334
for data and even executing atomic
operations such as Compile and swap.

102
00:07:38,924 --> 00:07:42,914
Its flexibility makes it either
for configuration management,

103
00:07:42,954 --> 00:07:47,154
distributing, distributed
locking, or as simple as a cache.

104
00:07:47,704 --> 00:07:52,784
Another powerful feature in
the object store is the object

105
00:07:52,784 --> 00:07:54,244
store in the ingest stream.

106
00:07:54,864 --> 00:07:59,204
This is particularly useful for
handling larger data sets of

107
00:07:59,214 --> 00:08:00,984
files within your NAT system.

108
00:08:01,744 --> 00:08:06,004
You can store and retrieve large
objects, manage their metadata,

109
00:08:06,044 --> 00:08:07,264
and implement versioning.

110
00:08:08,074 --> 00:08:12,199
And it's especially valuable in
scenarios requiring large data sets.

111
00:08:12,689 --> 00:08:17,649
file distribution across your system
or when maintaining a history of

112
00:08:17,689 --> 00:08:23,109
object changes in is necessary
and Last thing is security.

113
00:08:23,399 --> 00:08:26,249
So security is the priority in NATS.

114
00:08:26,869 --> 00:08:31,599
We have features including TLS
for encryption We have in key for

115
00:08:31,669 --> 00:08:38,379
authentication and GWT for authorizations
So now support multi tenancy through

116
00:08:38,399 --> 00:08:43,229
separate accounts, each with its own
subject space and security policies.

117
00:08:43,629 --> 00:08:48,309
To address scalability and deployment
flexibility, Gstream is multi

118
00:08:48,309 --> 00:08:52,679
tenant, horizontally scalable and
supports various deployment models.

119
00:08:53,229 --> 00:08:58,109
A particularly interesting aspect also of
Jetstream is its decoupled flow control.

120
00:08:58,759 --> 00:09:03,059
This means producers and consumers
can operate independently.

121
00:09:03,589 --> 00:09:08,819
If you have a slow consumer, it doesn't
impact your producers or other consumers.

122
00:09:09,149 --> 00:09:10,219
This feature is available.

123
00:09:10,369 --> 00:09:14,189
Invaluable for building resilient
systems, allowing scenarios where a

124
00:09:14,189 --> 00:09:20,359
consumer can catch up on historical
data before transition that transition

125
00:09:20,359 --> 00:09:24,349
into real time processing all without
affecting the rest of the system.

126
00:09:25,439 --> 00:09:29,919
So in conclusion the combination
of NETSCORE and GESTURING creates a

127
00:09:29,919 --> 00:09:35,289
powerful and flexible system for building
distributed applications, whether you are

128
00:09:35,329 --> 00:09:40,229
implementing a simple messaging, A complex
data streaming or need persistent storage.

129
00:09:40,469 --> 00:09:45,129
NATs provide a comparative solution
to meet diverse architectural needs.

130
00:09:45,629 --> 00:09:47,469
Let's pass to the demo.

131
00:09:47,969 --> 00:09:49,429
Install NATs, it's very easy.

132
00:09:49,610 --> 00:09:50,730
You can go to the NATs.

133
00:09:50,950 --> 00:09:55,350
io website and install it with
directly with the Exe, or you can

134
00:09:55,350 --> 00:10:00,270
also install it with Choco, Or any
package manager in your system.

135
00:10:00,720 --> 00:10:02,290
For me, I already have NATS.

136
00:10:02,640 --> 00:10:07,500
I will show you how to start the
server using the NATS CLI command.

137
00:10:08,819 --> 00:10:09,600
It's very easy.

138
00:10:09,649 --> 00:10:11,679
We have the server built in the NATS CLI.

139
00:10:12,100 --> 00:10:16,749
You can easily say, NATS server run.

140
00:10:17,229 --> 00:10:18,000
And it will start.

141
00:10:19,920 --> 00:10:21,300
A local development net server.

142
00:10:22,300 --> 00:10:27,390
We can also specify that we want
to activate the stream by passing

143
00:10:27,390 --> 00:10:35,430
the re stream flag, or we can
configure our server using confi.

144
00:10:39,930 --> 00:10:40,560
Um,

145
00:10:41,060 --> 00:10:45,440
In the file, we can activate the
G stream, we can add accounts, we

146
00:10:45,440 --> 00:10:48,830
can activate web socket to connect
our web apps directly to that.

147
00:10:48,920 --> 00:10:54,190
We can activate the the endpoint
of the web socket and we can, as I

148
00:10:54,190 --> 00:10:58,960
said, we can act like configure the
clustering the separate cluster.

149
00:10:58,960 --> 00:11:00,044
We can activate the account.

150
00:11:00,969 --> 00:11:06,239
But let's keep it simple, and we
just start NAT without gesturing.

151
00:11:07,879 --> 00:11:12,859
Today I will show you just the pub,
sub, and the request reply models.

152
00:11:13,159 --> 00:11:16,009
But you can check the website for
the connotation and for seeing

153
00:11:16,019 --> 00:11:17,419
what we can do with gesturing.

154
00:11:17,919 --> 00:11:21,889
Let's say we, we stay on the
on the smart city example.

155
00:11:22,109 --> 00:11:28,404
And we have, uh, for example, our our
with the application that is connecting

156
00:11:28,434 --> 00:11:31,274
to subscribing to temperature,

157
00:11:34,714 --> 00:11:41,274
temperature, um, of a city
and for a zone, for example.

158
00:11:41,824 --> 00:11:45,924
We have now a subscriber waiting
for messages in the subject

159
00:11:45,924 --> 00:11:47,384
temperature Casablanca zone one.

160
00:11:48,124 --> 00:11:50,534
And we can easily send a message using.

161
00:11:50,944 --> 00:11:51,694
Not spub.

162
00:11:53,014 --> 00:11:53,364
Gotcha.

163
00:11:54,564 --> 00:11:54,854
Got it.

164
00:11:55,334 --> 00:11:55,514
Okay.

165
00:11:55,644 --> 00:11:58,424
Zone one, and we can specify the message.

166
00:11:58,664 --> 00:12:02,204
We can send any type of
message, we can send GOB on.

167
00:12:02,204 --> 00:12:08,204
We can just send portal or
just a simple string 26.

168
00:12:08,614 --> 00:12:12,934
And here the sorry, the wrong
the message is received and we

169
00:12:13,194 --> 00:12:16,389
specify in which subject receive
the message and also the text.

170
00:12:18,394 --> 00:12:24,154
Also what we can do, we can say, for
example, we have another application

171
00:12:24,154 --> 00:12:29,124
that is, for example, the thermostat
is waiting for temperature.

172
00:12:29,124 --> 00:12:31,984
In all these zones of Caza Blanc.

173
00:12:32,854 --> 00:12:37,509
We can specify the world cut
assess, and it'll connect to

174
00:12:37,569 --> 00:12:40,179
every zone of the the city.

175
00:12:40,599 --> 00:12:43,989
So if we send the same
message, it'll be received.

176
00:12:45,749 --> 00:12:52,569
By these two subscribers, but imagine
we are sending a message to zone two,

177
00:12:52,619 --> 00:12:59,029
for example, it will be received Only
by the second, Subscriber because it's

178
00:12:59,349 --> 00:13:05,284
saying that I want all the Temperatures
of the city Kazanbakh and also we can,

179
00:13:05,814 --> 00:13:12,894
for example we can we can subscribe
to all the stages and all the zones.

180
00:13:13,164 --> 00:13:21,544
For example, we say temperature and
we pass the greater than symbol.

181
00:13:21,879 --> 00:13:26,509
And so now it's subscribing to
all the cities and all the zones.

182
00:13:26,569 --> 00:13:33,859
For example, if I send the same
to a bat, for example, it will

183
00:13:34,139 --> 00:13:37,759
send it will be received by this
subscriber, not by this one.

184
00:13:38,089 --> 00:13:44,349
And if we send the same thing to Casa
Blanca, as we test, we tested Casa

185
00:13:47,234 --> 00:13:50,334
It will be received by the two
because this one is waiting for

186
00:13:50,414 --> 00:13:54,664
all the tokens that comes after
the first token temperature.

187
00:13:55,214 --> 00:14:01,604
Let's say we have multiple servers that
are on multiple nodes that are waiting

188
00:14:01,624 --> 00:14:07,964
for the data from the from the um, the
data of the temperature of all the cities.

189
00:14:08,304 --> 00:14:12,494
And we want to say we want
to load balance the messages.

190
00:14:12,734 --> 00:14:13,864
For example, we have

191
00:14:16,044 --> 00:14:21,154
a subscriber that's Is waiting for all the
temperatures on all the cities, and we can

192
00:14:21,154 --> 00:14:23,785
say, for example it's part of the queue

193
00:14:23,834 --> 00:14:24,614
thermostat, for example.

194
00:14:25,174 --> 00:14:28,024
And we have another node
waiting for the same thing,

195
00:14:28,524 --> 00:14:29,524
in the same queue,

196
00:14:38,144 --> 00:14:39,294
and a third one.

197
00:14:48,494 --> 00:14:50,694
And let's say we are sending

198
00:14:50,744 --> 00:14:54,134
And let's say we are sending
a message every every second.

199
00:14:54,704 --> 00:14:59,364
In the Casablanca and you have the count

200
00:15:02,984 --> 00:15:03,604
and

201
00:15:04,134 --> 00:15:09,164
so we are sending a message every
one second to the, this this

202
00:15:09,164 --> 00:15:11,374
subject with the same message.

203
00:15:11,924 --> 00:15:16,115
And as we see here, the The message,
the messages are evenly received

204
00:15:16,145 --> 00:15:18,685
by the three the three subscribers.

205
00:15:19,235 --> 00:15:22,865
And imagine we have the
third one that is down,

206
00:15:25,395 --> 00:15:31,185
and we have the two that are staying
up, and they will receive, of

207
00:15:31,185 --> 00:15:32,995
course, the rest of the messages.

208
00:15:35,825 --> 00:15:41,375
The last thing that I want to show
you is the request reply model.

209
00:15:43,275 --> 00:15:46,795
For example Let's say that we
have a server that is waiting

210
00:15:46,795 --> 00:15:50,035
for requests on the on the

211
00:15:52,705 --> 00:15:53,115
reply.

212
00:15:53,705 --> 00:16:02,485
It's replying on the subject, slogans,
Palestine, and is always responding

213
00:16:02,485 --> 00:16:06,065
with from the river to the sea.

214
00:16:08,405 --> 00:16:14,135
And we have another server that is
waiting or asking for this message.

215
00:16:14,135 --> 00:16:14,334
Thank you very much.

216
00:16:14,985 --> 00:16:23,815
So we can send request, slogans,
Palestine, and we can say, free Palestine.

217
00:16:24,355 --> 00:16:27,195
We will receive the the
message from the replier.

218
00:16:27,555 --> 00:16:31,995
And as I said, everything is
built on top of the pub sub model.

219
00:16:32,315 --> 00:16:36,485
So if we say, let's listen to every.

220
00:16:37,670 --> 00:16:41,550
Every subject, a sub to every subject.

221
00:16:43,610 --> 00:16:49,810
And if we send a request here, the
same request, we will see that the

222
00:16:50,050 --> 00:16:56,580
request, even if it's a request, it's
in the same time pub we are publishing.

223
00:16:57,035 --> 00:17:02,145
To to subject, and we receive
the response in the inbox.

224
00:17:02,405 --> 00:17:08,055
This one is, inbox is the inbox of this
requestor, and it have all, it have the

225
00:17:08,055 --> 00:17:10,965
same, it's the same ID of the inbox.

226
00:17:11,465 --> 00:17:12,655
So that's it for today.

227
00:17:12,755 --> 00:17:17,875
You can check the website of nas io
to have more more examples of the of

228
00:17:17,880 --> 00:17:20,510
the net score and the net nas ing.

