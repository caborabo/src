1
00:00:14,169 --> 00:00:14,879
Hi, everyone.

2
00:00:15,190 --> 00:00:16,289
I'm very glad to be here.

3
00:00:16,289 --> 00:00:18,689
I'm Amir, the CEO and
co founder at Sensor.

4
00:00:18,740 --> 00:00:22,500
Sensor is an AIOps company,
bridging together advanced,

5
00:00:23,030 --> 00:00:25,560
observability elements using, EVTF.

6
00:00:25,925 --> 00:00:30,845
And machine learning stacks, which uses
data in order to look for deficiencies

7
00:00:30,845 --> 00:00:35,855
and service degradation, which we
came to speak about here today is

8
00:00:35,925 --> 00:00:39,885
essentially a very interesting concept
of bridging the gap, both technically,

9
00:00:39,885 --> 00:00:44,785
but also from an operational point of
view and how to utilize the advances.

10
00:00:45,370 --> 00:00:49,100
In the forms of, the use of
an internal, developer portal.

11
00:00:49,510 --> 00:00:53,630
and it's how essentially use, the
real time topology or the dynamics

12
00:00:53,640 --> 00:00:57,430
of the environment as a connected
issue between the platform engineering

13
00:00:57,470 --> 00:00:59,429
part and the DevOps and SREs.

14
00:01:01,780 --> 00:01:06,900
So going through the journey that we will
cover today, we will speak about an IDP in

15
00:01:06,900 --> 00:01:08,970
general and what's missing from the IDP.

16
00:01:10,040 --> 00:01:14,700
We'll verify that it's not the first
use case that suffered from the exact

17
00:01:14,700 --> 00:01:19,620
same phenomenas and what we can learn
from cybersecurity in that aspect.

18
00:01:20,820 --> 00:01:24,770
We'll go in deep dive at how real time
topology could be used as a shared

19
00:01:24,780 --> 00:01:28,730
language of how to bridge between
the IDP operation on what I want

20
00:01:28,730 --> 00:01:29,300
to do, what is the configuration.

21
00:01:30,595 --> 00:01:36,155
or the configuring state of the services
or system, and how to correlate and

22
00:01:36,405 --> 00:01:39,535
bridge that with the runtime topology.

23
00:01:39,820 --> 00:01:42,460
and that is an important part
of, essentially connecting

24
00:01:42,970 --> 00:01:44,100
between these two worlds.

25
00:01:44,650 --> 00:01:48,810
we'll speak about what you can do
with a closed loop, mechanism, what's

26
00:01:48,810 --> 00:01:52,710
happened if you force feed data from
the observability mechanism, the

27
00:01:52,710 --> 00:01:54,680
real time topology back into the IDP.

28
00:01:55,180 --> 00:01:59,910
And we'll, cover or we'll finish this,
session with a little bit of pointers

29
00:01:59,920 --> 00:02:03,730
about how to get started, which are, the
most important parts to pay attention to.

30
00:02:04,385 --> 00:02:06,855
So I hope you'll, I
hope you'll enjoy it on.

31
00:02:06,855 --> 00:02:13,015
Let's start, IDPs or internal developer
portals, as being your businesses are

32
00:02:13,025 --> 00:02:16,315
very incredible tools for bridging
between the development parts in

33
00:02:16,315 --> 00:02:20,905
the DevOps part, essentially, the
ability for an organization to create.

34
00:02:21,390 --> 00:02:27,030
Both the schema, but also the rules of
what is going to be running to production,

35
00:02:27,030 --> 00:02:30,570
what type of artifacts needed to be
collected about them, configured about

36
00:02:30,570 --> 00:02:35,520
them and expose that, expose that to
the developers as means to save time.

37
00:02:35,960 --> 00:02:38,200
for our platform engineering
teams and DevOps team.

38
00:02:38,760 --> 00:02:43,210
but pay attention that they're very
focused about what I'm trying to do,

39
00:02:43,250 --> 00:02:48,210
what I'm trying to achieve, what is the
configuration state that I want to be

40
00:02:48,240 --> 00:02:49,840
applied in the production environment.

41
00:02:50,200 --> 00:02:51,930
And with that, we will see elements.

42
00:02:52,060 --> 00:02:55,350
In this case, we're looking at, we're
looking at the Kubernetes environment

43
00:02:55,350 --> 00:02:59,070
or Kubernetes topology, in which we
have the physical resources like the

44
00:02:59,070 --> 00:03:03,425
nodes, And we have the logical resources
like the Kubernetes clusters, the

45
00:03:03,425 --> 00:03:05,804
namespaces, the workloads, and the pods.

46
00:03:05,805 --> 00:03:09,075
And we can see the schema element on
top of them, the elements which we're

47
00:03:09,075 --> 00:03:15,165
trying to bring into configuration by
the IDP and all the way to the developer.

48
00:03:17,695 --> 00:03:18,325
On their own.

49
00:03:19,985 --> 00:03:24,215
One half of the equation, because
they're sometimes missing or

50
00:03:24,215 --> 00:03:25,925
lacking in some critical context.

51
00:03:26,405 --> 00:03:30,295
And that context, comes or stems
from the difference between what's

52
00:03:30,295 --> 00:03:34,345
happening on design time to what will
happen on the runtime environment.

53
00:03:34,735 --> 00:03:36,775
Resources will behave differently.

54
00:03:37,165 --> 00:03:41,135
If not, if we're looking at the pods
environment or workload environment,

55
00:03:41,425 --> 00:03:44,455
of course, what I'm trying to do
from configuration part, things like

56
00:03:44,515 --> 00:03:47,075
allocates or request and limit their.

57
00:03:47,355 --> 00:03:51,015
Elements or artifacts, which I'm
configuring, but the behavior in the

58
00:03:51,015 --> 00:03:52,365
runtime is going to be different.

59
00:03:52,495 --> 00:03:55,125
It'll be different because the
node has different resources to

60
00:03:55,135 --> 00:03:56,805
give, and so on and so forth.

61
00:03:57,335 --> 00:04:00,655
The interaction between the
different elements are also

62
00:04:00,655 --> 00:04:02,085
sometimes hard to, encompass.

63
00:04:02,655 --> 00:04:06,075
If you're looking at things like
ATIs, which are crucial, for the

64
00:04:06,075 --> 00:04:09,365
interaction between the element,
there are parts which are much harder

65
00:04:09,365 --> 00:04:11,845
to model, in a static environment.

66
00:04:12,540 --> 00:04:15,710
Towards what they're really doing
in production and how they're

67
00:04:16,000 --> 00:04:17,840
manifesting themselves in production.

68
00:04:18,390 --> 00:04:20,760
Another good example would
be the use of third parties.

69
00:04:21,080 --> 00:04:25,540
Sometimes it's very hard to
conceptualize even the schema layer.

70
00:04:25,820 --> 00:04:29,380
I'm using a certain third party service,
which is an important part of the

71
00:04:29,380 --> 00:04:30,840
service that I'm trying to deploy.

72
00:04:31,540 --> 00:04:34,480
How am I learning about that exposure?

73
00:04:34,530 --> 00:04:37,090
I'm learning about that
dependencies, which are, of

74
00:04:37,090 --> 00:04:38,590
course, very important in the.

75
00:04:39,100 --> 00:04:42,660
Complete life cycle or software
life cycle, deployment life cycle

76
00:04:42,660 --> 00:04:44,260
that we're trying to achieve.

77
00:04:44,770 --> 00:04:46,749
And of course, runtime configuration.

78
00:04:46,750 --> 00:04:50,930
What eventually happened, what was
allocated, what was configured on the

79
00:04:50,930 --> 00:04:55,290
different physical and logical layers
and misconfigs, of course, that some

80
00:04:55,290 --> 00:04:56,890
of them can happen only at runtime.

81
00:04:57,710 --> 00:05:04,420
For example, someone going through not
the IDP or doing a configuration directly.

82
00:05:04,850 --> 00:05:08,570
On the cloud environment could lead
to a lot of interesting things, with

83
00:05:08,570 --> 00:05:12,360
regard to what the IDP is seeing
versus what is the real situation.

84
00:05:14,000 --> 00:05:16,390
the important part or
the important aspect to.

85
00:05:16,950 --> 00:05:20,350
Understand here is that we're
not the only domain which facing

86
00:05:20,370 --> 00:05:21,640
this exact same challenge.

87
00:05:22,040 --> 00:05:24,850
A very good analogy could be
the world of cyber security.

88
00:05:25,340 --> 00:05:28,900
And more precisely for taking the,
taking the platform engineering

89
00:05:28,900 --> 00:05:33,250
in SRE, as a comparison, the world
between the application security,

90
00:05:33,250 --> 00:05:35,400
the AppSecOps and the DevSecOps.

91
00:05:35,930 --> 00:05:39,290
The one which are responsible for
what I'm doing from application

92
00:05:39,290 --> 00:05:42,910
security and production to the one
who actually serve and maintain

93
00:05:42,910 --> 00:05:44,230
it on the runtime environment.

94
00:05:44,730 --> 00:05:48,350
and we could see that throughout
the short history, but meaningful

95
00:05:48,350 --> 00:05:53,560
history of cybersecurity, that gap or
bridging that gap between the static

96
00:05:53,560 --> 00:05:58,610
analysis and the runtime to create
an environment which is tailored

97
00:05:58,640 --> 00:06:03,160
toward the shift left movement was an
important part of making that a reality.

98
00:06:03,740 --> 00:06:07,430
Moving between the static catalog in
which the artifact would be things like

99
00:06:07,460 --> 00:06:12,249
vulnerabilities and, OS, components,
the authentication and encryption,

100
00:06:12,250 --> 00:06:16,760
keys, configuration, different
framework, the secret, an analogy

101
00:06:16,760 --> 00:06:20,100
to an IDP, they will be part of the
schema, which I'm trying to config.

102
00:06:20,655 --> 00:06:24,175
But the runtime environment yields
a lot of important dynamics in

103
00:06:24,175 --> 00:06:25,985
order to tie the knot between them.

104
00:06:26,785 --> 00:06:29,085
elements which I'm trying to
do in production would be,

105
00:06:29,425 --> 00:06:30,695
is something really deployed?

106
00:06:30,745 --> 00:06:31,715
Where it is deployed?

107
00:06:32,055 --> 00:06:36,015
It is internet exposed in
terms of the surface of attack.

108
00:06:36,355 --> 00:06:40,565
Is it behind some sort of a firewall
or, or, or filtering mechanism?

109
00:06:41,235 --> 00:06:42,805
Are there runtime mix configuration?

110
00:06:42,805 --> 00:06:46,385
Are there, do they have
any relevancy to something?

111
00:06:46,715 --> 00:06:51,515
which is on the static catalog part,
that bridging, was very important in

112
00:06:51,515 --> 00:06:55,265
order to one, get an accurate view
of what is an actual attack surface,

113
00:06:55,705 --> 00:06:59,955
focusing or prioritizing the real risk,
not just vulnerabilities, which of

114
00:06:59,955 --> 00:07:03,855
course would collapse the entire team
because we'll just try to fix everything.

115
00:07:04,105 --> 00:07:07,985
but that formal formalization of what
is important, what is the priority?

116
00:07:08,175 --> 00:07:12,115
it's, it's crucial for these teams to,
predicting the function, efficiently.

117
00:07:12,905 --> 00:07:17,355
and of course, the embedding of
policies and guardrail earlier on the

118
00:07:17,355 --> 00:07:21,435
SDLC, making sure that the things and
the elements which I'm putting in the

119
00:07:21,905 --> 00:07:25,605
Configuration time, which I'm putting
in an earlier stages of, the software

120
00:07:25,605 --> 00:07:29,315
development, the software deployment,
pipeline are going to really appear

121
00:07:29,315 --> 00:07:33,115
in the runtime environment, which is a
very strong analogy to what's actually

122
00:07:33,165 --> 00:07:36,175
happening on, on an IDP, on an IDP world.

123
00:07:37,285 --> 00:07:40,899
So for platform engineering,
these are some contexts.

124
00:07:41,200 --> 00:07:46,830
comes from essentially having a very
nice grasp or a very deep view about

125
00:07:46,840 --> 00:07:48,710
the real time topology of the services.

126
00:07:49,040 --> 00:07:51,850
What is actually going on in production.

127
00:07:52,600 --> 00:07:58,740
The benefits of using or being able
to feed force this type of element

128
00:07:58,750 --> 00:08:00,760
back into the IDP are numerous.

129
00:08:00,760 --> 00:08:02,500
I will just mention a few.

130
00:08:02,980 --> 00:08:06,050
The ability to get full
and closed loop visibility.

131
00:08:06,130 --> 00:08:07,220
What I try to do.

132
00:08:07,595 --> 00:08:11,665
What I meant for things, to be
looking like, and what actually

133
00:08:11,665 --> 00:08:14,875
came about in reality, having
more efficient troubleshooting.

134
00:08:15,135 --> 00:08:19,205
Of course, there is a lot of
vague line between where, one's

135
00:08:19,245 --> 00:08:22,255
responsibility like a platform
engineer is going to land and when.

136
00:08:22,980 --> 00:08:25,340
Another responsibility like
the SRE is going to start.

137
00:08:25,630 --> 00:08:27,870
There's a lot of, there's a
lot of back and forth between

138
00:08:27,870 --> 00:08:31,950
them and going way back to the
developers which are fed by the IDP.

139
00:08:32,410 --> 00:08:35,310
Therefore, this type of
information is super crucial.

140
00:08:35,770 --> 00:08:39,900
and eventually less IDP maintenance
required from various reasons.

141
00:08:40,010 --> 00:08:45,660
One, being able to Actually be actuary on
the status of the production environment

142
00:08:45,950 --> 00:08:51,110
being left cold or think about things
which are runtime related and not

143
00:08:51,150 --> 00:08:53,880
IDP related and so on and so forth.

144
00:08:56,250 --> 00:08:59,170
white heart that we understand
it's not a trivial move.

145
00:08:59,180 --> 00:09:01,170
We understand that people
would have done it.

146
00:09:01,440 --> 00:09:04,870
There are some sort of runtime
integration towards the IDP, like getting

147
00:09:04,870 --> 00:09:06,490
observability streams from your APM.

148
00:09:07,235 --> 00:09:09,995
We're infrastructure monitoring
tools, but it's still hard.

149
00:09:09,995 --> 00:09:13,245
It's hard because the runtime
dynamics are much more complex

150
00:09:13,285 --> 00:09:14,565
than the static dynamics.

151
00:09:14,565 --> 00:09:16,055
The static dynamics could be.

152
00:09:16,815 --> 00:09:21,545
Somewhat, somewhat compared
to a configuration file or a

153
00:09:21,545 --> 00:09:24,685
configuration tree, something
that I could traverse easily.

154
00:09:24,985 --> 00:09:27,325
That's not the nature of
the runtime environment.

155
00:09:27,605 --> 00:09:32,335
The runtime environment is a live,
moving, changing graph, which has a lot

156
00:09:32,335 --> 00:09:36,855
of inputs coming from things that happen
on the infrastructure layer, things

157
00:09:36,865 --> 00:09:38,515
that happen on the application layer.

158
00:09:38,910 --> 00:09:42,600
And just changes coming from the
software deployment pipeline.

159
00:09:42,880 --> 00:09:46,220
All of these together make these
dynamics very, active, very,

160
00:09:46,620 --> 00:09:48,410
very, very time, sensitive.

161
00:09:48,750 --> 00:09:52,220
so this type of, this type of bridging
becomes, harder to get than you

162
00:09:52,220 --> 00:09:53,860
might think about, at the beginning.

163
00:09:56,650 --> 00:10:01,360
So topology enriches the IDP with
runtime concept on multiple layers.

164
00:10:01,370 --> 00:10:06,140
So we're speaking here not only about
how a production environment is looking,

165
00:10:06,140 --> 00:10:09,740
but also with the context of the running
environment, with the context of the

166
00:10:09,770 --> 00:10:11,530
running application, infrastructure.

167
00:10:12,140 --> 00:10:16,860
The network layer and the APIs will
give a little bit of examples when

168
00:10:16,860 --> 00:10:22,260
we're going through the following
slide, what you can see here coming

169
00:10:22,260 --> 00:10:24,270
from our system that could be achieved.

170
00:10:24,270 --> 00:10:29,350
I would assume by our system as well is
1st of all, the ability to automatically

171
00:10:29,350 --> 00:10:33,040
get the important information coming
from the observability layers, which

172
00:10:33,060 --> 00:10:38,150
parts were deployed, what type of
APIs are now being run, and that as

173
00:10:38,260 --> 00:10:42,450
a beginning, Gives a very nice glance
to what was deployed in production

174
00:10:43,450 --> 00:10:44,260
moving forward.

175
00:10:44,650 --> 00:10:49,690
Now, if we look at the IDP hierarchy
of the IDP schema, we'll most likely be

176
00:10:49,690 --> 00:10:51,790
faced with looking at specific services.

177
00:10:52,290 --> 00:10:56,470
so the deployments, run, status, the
runtime configuration, which will, appear

178
00:10:56,470 --> 00:11:00,460
as runtime label, so on and so forth, and
the performance of strategic services.

179
00:11:03,065 --> 00:11:06,915
If we look again here, and if we look
at one of the services, now within

180
00:11:06,925 --> 00:11:11,855
that context, we can see things like
the health behavior, the important,

181
00:11:11,945 --> 00:11:16,515
the important metrics, which are
crucial to understand the health and

182
00:11:16,515 --> 00:11:20,395
performance of that specific service,
the ability to track the deployment,

183
00:11:20,435 --> 00:11:24,765
what's meant to be happening, and how it
behaves in runtime, and of course, the

184
00:11:24,765 --> 00:11:29,835
events, things which are accompanying
or are the operational status of the

185
00:11:29,845 --> 00:11:31,525
service in the production environment.

186
00:11:32,525 --> 00:11:36,385
Moving forward with, the left element
or trying to combine what we spoke

187
00:11:36,385 --> 00:11:41,885
about earlier, to the left level, this
would be, the third party resources,

188
00:11:41,905 --> 00:11:46,705
the internal resources with regards to
their actual properties, things like

189
00:11:46,755 --> 00:11:51,495
availability, latency, And the status of
the third party resources could be public

190
00:11:51,495 --> 00:11:54,115
APIs, payment gateways, for example.

191
00:11:54,625 --> 00:11:58,085
If we look here again, and now we're
looking at the real time Kubernetes

192
00:11:58,145 --> 00:12:02,515
topology, here are the third parties
being used, things like the databases

193
00:12:02,535 --> 00:12:05,215
or queues, runtime caches and APIs.

194
00:12:07,145 --> 00:12:12,565
And also, if we'll open the, if
we'll open the internal deployment,

195
00:12:12,755 --> 00:12:14,565
now we can see the runtime dynamic.

196
00:12:14,755 --> 00:12:17,685
Each and everything here is accompanied
by a lot of different layers.

197
00:12:17,980 --> 00:12:20,850
but the importance is you
can really see the flow.

198
00:12:21,240 --> 00:12:25,630
You can really see how it's all tied
in, tied into the bigger picture.

199
00:12:26,010 --> 00:12:31,490
And all this information is essentially
very complementary, and very important,

200
00:12:31,610 --> 00:12:36,270
very important when, being given with,
being given with the IDP data or the

201
00:12:36,270 --> 00:12:38,080
what we're trying to achieve data.

202
00:12:40,020 --> 00:12:43,860
Okay, so let's, let's try to
recap and, understand at the high

203
00:12:43,860 --> 00:12:45,110
level the real time topology.

204
00:12:45,545 --> 00:12:49,845
It allows us to enrich the service
catalog with what we put in

205
00:12:49,845 --> 00:12:51,475
our schema, what we try to do.

206
00:12:51,930 --> 00:12:55,810
And what was actually happening or
represented in the runtime environment

207
00:12:56,150 --> 00:12:57,510
with all the different contexts.

208
00:12:57,560 --> 00:12:59,780
This would be the
configuration of dependencies.

209
00:13:00,240 --> 00:13:03,280
and that's a very important goal
that we're trying to achieve.

210
00:13:03,990 --> 00:13:05,580
It also provides a common language.

211
00:13:05,920 --> 00:13:09,369
The IDP tries to encompass the
platform engineering way of thinking

212
00:13:09,370 --> 00:13:13,495
about What is the right abstraction
level of the production environment?

213
00:13:13,945 --> 00:13:19,055
That's something which is clearly need to
be explained and used by the developers.

214
00:13:19,254 --> 00:13:23,865
But on the other hand, this will
implicate the runtime environment.

215
00:13:24,135 --> 00:13:26,915
So the common language here
cannot go on a single way.

216
00:13:27,124 --> 00:13:32,335
It's not only IDP up toward developers,
but it also, if you will, looking at the

217
00:13:32,365 --> 00:13:34,515
IDP down toward the runtime environment.

218
00:13:34,765 --> 00:13:37,835
And with that, the production environment
Personnel which is responsible for

219
00:13:37,835 --> 00:13:39,885
maintaining that runtime environment.

220
00:13:40,085 --> 00:13:42,915
SREs and DevOps would be a good example.

221
00:13:43,645 --> 00:13:45,225
You have to close that loop.

222
00:13:45,745 --> 00:13:52,355
And if not, then an IDP as a function
would be always a center of attention

223
00:13:52,885 --> 00:13:57,554
because you need to comply with both these
layers in order for it to work in reality.

224
00:13:58,455 --> 00:14:02,205
It also furnishes very crucial
context for decision making.

225
00:14:02,865 --> 00:14:06,294
If I'm looking at something at the
IDP that would be exposed to my

226
00:14:06,294 --> 00:14:10,344
developers, that's not the only
knowledge in the world which is crucial

227
00:14:10,374 --> 00:14:14,885
in decision making throughout the
software development lifecycle and the

228
00:14:14,885 --> 00:14:17,065
operational or maintenance lifecycle.

229
00:14:17,385 --> 00:14:20,355
There needs to be more data
there exposed to the developers

230
00:14:20,405 --> 00:14:22,265
and exposed to decision makers.

231
00:14:22,725 --> 00:14:27,290
So throughout things like issues,
procuring or maintenance or

232
00:14:27,350 --> 00:14:29,020
analyzing what should be done.

233
00:14:29,420 --> 00:14:32,240
the entirety of the needed
information would be there, for

234
00:14:32,240 --> 00:14:35,889
right decision making and to have
a clear view of what's going on.

235
00:14:38,020 --> 00:14:41,060
So let's look at three
real world use cases.

236
00:14:43,059 --> 00:14:44,940
anticipating a reliability impact.

237
00:14:45,260 --> 00:14:50,560
one of the holy grails or trying to, or
the most wanted things to achieve is to

238
00:14:50,560 --> 00:14:53,040
understand when I'm going to do something.

239
00:14:53,365 --> 00:14:56,935
What is going to be the eventual
implication and how can I close that

240
00:14:56,935 --> 00:15:01,715
loop as fast as we can in order to
verify that it's working indeed.

241
00:15:02,295 --> 00:15:07,454
And what we anticipated is the performance
hit or is an implication on the runtime

242
00:15:07,454 --> 00:15:10,925
environment could be realized very early.

243
00:15:11,724 --> 00:15:13,545
of course, with that topology can enrich.

244
00:15:13,935 --> 00:15:14,835
The tribal knowledge.

245
00:15:15,125 --> 00:15:16,755
That's what people are thinking.

246
00:15:16,775 --> 00:15:19,185
That's what people are
knowing from past experience.

247
00:15:19,615 --> 00:15:22,295
what they already encountered
with past incidents.

248
00:15:22,825 --> 00:15:28,135
but that with the topology becomes not
a tribal knowledge, but the actual set

249
00:15:28,135 --> 00:15:30,574
of data points, which could be verified.

250
00:15:30,965 --> 00:15:32,875
Understanding which are
the affected services.

251
00:15:33,560 --> 00:15:37,410
If there is a runtime, implication,
is there any implication on

252
00:15:37,870 --> 00:15:41,290
the service level objectives or
the service level agreements,

253
00:15:41,669 --> 00:15:43,370
which I comply with to my user?

254
00:15:43,750 --> 00:15:48,469
and eventually it helps us answering
real world important questions.

255
00:15:48,550 --> 00:15:52,229
Example, what does the service
really cost from resource?

256
00:15:52,785 --> 00:15:57,275
point of view, where there are changes
in the CPU consumption envelope, memory

257
00:15:57,275 --> 00:16:02,415
consumption envelope, what is eventually
the spin off cost of a service.

258
00:16:03,155 --> 00:16:07,525
The benefits are, of course, being able
to define, store stronger guardrails

259
00:16:07,545 --> 00:16:13,665
within the IDP based on real world data,
based on data driven checklists, and not

260
00:16:13,665 --> 00:16:18,265
based only on what we call the tribal
knowledge or based only on experience,

261
00:16:18,675 --> 00:16:20,899
which is, of course, bound to be true.

262
00:16:21,300 --> 00:16:22,440
are bound to be broken.

263
00:16:22,860 --> 00:16:24,770
people are making a lot
of software changes.

264
00:16:24,810 --> 00:16:26,820
People are making a lot
of infrastructure changes.

265
00:16:27,245 --> 00:16:28,795
And new deployments will fail.

266
00:16:28,935 --> 00:16:31,435
Even existing deployments
with updates will fail.

267
00:16:31,715 --> 00:16:35,504
And that is something which has to be
as dynamic as the runtime environment.

268
00:16:35,935 --> 00:16:40,804
real world example for something like that
could be a service which is deployed in

269
00:16:40,805 --> 00:16:43,145
a high volume transaction environment.

270
00:16:43,514 --> 00:16:47,815
during peak hours, we would assume to
see a lot of mechanism coming into play.

271
00:16:48,085 --> 00:16:54,905
Things like auto scaling or being, being,
consuming much more, Resources, and

272
00:16:54,905 --> 00:16:59,225
that often lead to incident by itself,
incidents which are related to memory

273
00:16:59,225 --> 00:17:05,815
overload or any, chain events like
impacting, downstream services, things

274
00:17:05,815 --> 00:17:11,275
like dashboards or front end or any, any
transaction, transactional environment.

275
00:17:11,655 --> 00:17:17,055
So being able to, foresee, do a loopback
from the runtime environment towards

276
00:17:17,105 --> 00:17:21,655
what's being presented in the IDP
can eventually both in a real time

277
00:17:21,655 --> 00:17:25,724
environment give you the right data,
but also the process of improvement

278
00:17:26,074 --> 00:17:30,024
allowed that to be, allowed that
to be incorporated within the IDP.

279
00:17:30,245 --> 00:17:35,680
So the guardrails really, identify and
the guardrail, really represent what's

280
00:17:35,680 --> 00:17:40,160
happening in the production environment,
and they're there for, much more,

281
00:17:40,260 --> 00:17:43,420
comforting or much more, much more, real.

282
00:17:44,605 --> 00:17:47,095
to what should be the, what
should be the guardrail in

283
00:17:47,095 --> 00:17:48,655
the, in the actual deployment.

284
00:17:50,145 --> 00:17:54,135
Another element is how we use that to
verify deployments in, in real time.

285
00:17:54,475 --> 00:17:59,755
as we said, IDPs often, the, often,
offer a developer guardrail, things like,

286
00:17:59,785 --> 00:18:03,995
limited memory usage, CPU usage, latency.

287
00:18:04,350 --> 00:18:09,530
budget or bandwidth budget, to ensure
eventually, the efficient running

288
00:18:09,550 --> 00:18:11,350
and reliable running of deployment.

289
00:18:11,690 --> 00:18:15,080
These are there to make sure that
even a faulty deployment won't bring

290
00:18:15,100 --> 00:18:19,400
down the entire system, but it will
be localized in a way so it doesn't,

291
00:18:19,430 --> 00:18:20,940
doesn't affect the rest of the services.

292
00:18:21,415 --> 00:18:25,105
but these are really in, in a lot
of times are set, during development

293
00:18:25,115 --> 00:18:30,855
phase and much more, sometimes they're
based on assumptions or they based on

294
00:18:31,295 --> 00:18:35,505
intuition, which is essentially the
message that we're trying to convey here.

295
00:18:35,875 --> 00:18:38,255
This is a lot of times the
source of many failures.

296
00:18:38,285 --> 00:18:42,895
This cannot be based on intuition, but
has to be, foreseen from the runtime

297
00:18:42,895 --> 00:18:46,665
environment, which will feedback,
which will values, and pushed into

298
00:18:46,665 --> 00:18:48,825
the IDP or integrated into the IDP.

299
00:18:49,005 --> 00:18:51,505
So that represents what's
really happening there.

300
00:18:51,865 --> 00:18:53,275
Could be two directions.

301
00:18:53,275 --> 00:18:55,805
It could be that I'm thinking
something which is too low,

302
00:18:56,025 --> 00:18:57,115
for the runtime environment.

303
00:18:57,155 --> 00:18:59,365
Could be too high for
the runtime environment.

304
00:18:59,615 --> 00:19:02,175
And that would be another aspect
of how efficient I want to be.

305
00:19:02,435 --> 00:19:05,765
In the runtime environment, as a
topology can provide this runtime

306
00:19:05,805 --> 00:19:11,775
monitoring of performance of deviations
from means or from any other metric,

307
00:19:12,345 --> 00:19:17,295
it could accelerate the remediation by
having enough data for the developer

308
00:19:17,315 --> 00:19:21,055
who is now trying to understand what's
going wrong or the platform team,

309
00:19:21,055 --> 00:19:22,399
which is trying to understand what.

310
00:19:22,770 --> 00:19:28,520
going on, and as we said, as the
continuous process of improvement also

311
00:19:28,520 --> 00:19:32,830
allowed these guardrails to go and
eventually converge towards reality.

312
00:19:33,170 --> 00:19:37,550
and when that's something which becomes
that, when that's something which becomes,

313
00:19:37,660 --> 00:19:41,950
a continuous process on the platform
engineering part on the development parts,

314
00:19:42,060 --> 00:19:44,060
eventually create a better methodology.

315
00:19:44,265 --> 00:19:47,005
to make sure that these things
which run, smoother and smoother.

316
00:19:47,385 --> 00:19:50,655
a real world example here, when
a new service is consuming more

317
00:19:50,655 --> 00:19:54,505
resources, example here could be
excessive CPU, but it could be memory

318
00:19:54,505 --> 00:19:56,995
or any other consumable resource.

319
00:19:57,235 --> 00:20:01,575
the real time topology with regards
to, the metrics, with regards to the

320
00:20:01,575 --> 00:20:04,005
log, with regards to other, evidences.

321
00:20:04,505 --> 00:20:09,645
can flag that immediately and can flag
that with the content of who's speaking

322
00:20:09,665 --> 00:20:13,275
to who or what's going on within the
dynamics, which is a valuable and

323
00:20:13,275 --> 00:20:18,555
crucial piece of information, which are
needed by, needed by the developers.

324
00:20:20,475 --> 00:20:22,475
Investigating and responding to issues.

325
00:20:22,705 --> 00:20:24,235
So we understand that I did.

326
00:20:24,385 --> 00:20:26,675
I did these support a lot of the time.

327
00:20:26,675 --> 00:20:28,235
The notions of incident.

328
00:20:28,245 --> 00:20:31,575
They support a lot of the time
the integration with observability

329
00:20:31,575 --> 00:20:35,665
tools, either on the infrastructure
layer or the observability layers.

330
00:20:35,665 --> 00:20:39,615
They're supporting integration
with third party or higher layer

331
00:20:39,805 --> 00:20:41,215
incident management platforms.

332
00:20:41,555 --> 00:20:42,385
So the data is.

333
00:20:43,035 --> 00:20:43,915
contextualized.

334
00:20:43,935 --> 00:20:46,365
The data is already meant to be there.

335
00:20:46,655 --> 00:20:50,505
the service catalog is a very valuable
asset for root cause analysis.

336
00:20:50,565 --> 00:20:53,945
It's essentially the building
blocks which I'm trying to look at.

337
00:20:54,375 --> 00:20:58,585
And the root cause or the source
of an issue is going to be most

338
00:20:58,585 --> 00:21:00,465
likely something within the catalog.

339
00:21:00,765 --> 00:21:02,305
There are caveats to that.

340
00:21:02,495 --> 00:21:06,415
the example that we gave about third
parties, but most likely if it's a,

341
00:21:06,455 --> 00:21:09,805
an issue and internal issue, it's
going to be an element, which is

342
00:21:09,895 --> 00:21:13,745
part of the catalog, the problem
or the element, which is missing.

343
00:21:14,475 --> 00:21:15,935
It's only extending through.

344
00:21:16,370 --> 00:21:20,310
Again, what I'm trying to configure,
what is my schema, what I'm trying to

345
00:21:20,310 --> 00:21:22,210
orchestrate into the runtime environment.

346
00:21:22,920 --> 00:21:28,180
If we bring in the information from
the runtime environment, now we have

347
00:21:28,300 --> 00:21:33,220
essentially the matching between the
catalog and the runtime catalog, if

348
00:21:33,220 --> 00:21:37,630
you will, and those crosses between
them are essentially a very important

349
00:21:37,640 --> 00:21:39,950
part in the root code analysis or.

350
00:21:40,755 --> 00:21:45,945
issue analysis that any engineering team
is going to run through, essentially

351
00:21:45,955 --> 00:21:50,595
trying to mark off elements which
are not relevant until they converge

352
00:21:50,605 --> 00:21:52,465
on the element which is faulty.

353
00:21:52,745 --> 00:21:57,085
So that is a very natural and
native behavior for teams to act

354
00:21:57,085 --> 00:22:01,465
with and the tools like the IDP has
to support it and has to bring in

355
00:22:01,985 --> 00:22:03,785
the data in order to enable that.

356
00:22:04,305 --> 00:22:10,225
A real world example here, I team needs to
identify whether a service, which is now

357
00:22:10,295 --> 00:22:15,285
a faulty, degrading toward the customer or
towards the internal customer, is related

358
00:22:15,285 --> 00:22:17,045
to issues with third party resource.

359
00:22:17,675 --> 00:22:21,205
That would be something which is
really hard to do just based on.

360
00:22:22,175 --> 00:22:26,365
Orchestration or just based on the
configuration part, we have to have

361
00:22:26,365 --> 00:22:29,395
more data in order to understand
the health of that service to

362
00:22:29,395 --> 00:22:35,295
understand the dynamic and use of that
service with 3rd party or external.

363
00:22:36,075 --> 00:22:38,605
Dependencies and that should be again.

364
00:22:38,975 --> 00:22:42,885
Presented towards the platform
engineering team towards the

365
00:22:42,895 --> 00:22:44,765
development to understand.

366
00:22:45,155 --> 00:22:51,455
We're not only where to look at, but
put, to put a focus or, to pinpoint the

367
00:22:51,455 --> 00:22:53,895
exact location of where it can start.

368
00:22:54,505 --> 00:22:58,205
And that's something which cannot be
achieved just by looking, just by looking

369
00:22:58,205 --> 00:23:02,025
at static schema or just looking at,
just looking at the service catalog.

370
00:23:02,295 --> 00:23:05,535
It has to come from somewhere else,
but it's very important to look at

371
00:23:05,565 --> 00:23:09,975
that with, with regards and with the
context of the elements in the system.

372
00:23:09,975 --> 00:23:10,035
Thank you.

373
00:23:11,945 --> 00:23:14,105
Common pitfalls and, how to avoid them.

374
00:23:14,525 --> 00:23:17,775
the maintenance, it's essentially,
true for a lot of things.

375
00:23:18,055 --> 00:23:22,105
but closing the loop between the service
catalog and runtime is only a first step.

376
00:23:22,555 --> 00:23:28,265
don't put, don't overlook the
resourcing or don't think it would

377
00:23:28,265 --> 00:23:32,645
be, a minor or a, a very small
engineering effort, to keep it properly

378
00:23:32,645 --> 00:23:35,205
maintained, to audit it, to service it.

379
00:23:35,535 --> 00:23:37,730
There's a lot of, there's
a lot of commitment.

380
00:23:38,325 --> 00:23:41,355
Which is needed here to make the
thing, to make these things run

381
00:23:41,485 --> 00:23:43,105
smoothly, to operate smoothly.

382
00:23:43,435 --> 00:23:47,295
But that is for sure an investment,
an investment, worthwhile of, doing.

383
00:23:48,115 --> 00:23:49,255
Incomplete runtime context.

384
00:23:50,125 --> 00:23:54,605
In order to do what we're speaking
about, you need enough context.

385
00:23:54,875 --> 00:23:59,115
And depending on the complexity of the
system, depending on the amount of,

386
00:23:59,585 --> 00:24:03,775
if you will, free variables, in the
system, which includes the resources,

387
00:24:03,795 --> 00:24:06,055
the APIs, the third party services.

388
00:24:06,575 --> 00:24:11,595
this thing is sometimes hard to bring,
not only in terms of actually having

389
00:24:11,605 --> 00:24:16,265
the data, but from the configuration
of the runtime tool set, from, the

390
00:24:16,265 --> 00:24:21,940
aspect of how much Investment is
needed from not only time perspective,

391
00:24:21,950 --> 00:24:26,390
but also tool price perspective to
having all the different connectors

392
00:24:26,400 --> 00:24:31,730
to the different layers in the runtime
environment and bring it all to the IDP.

393
00:24:32,270 --> 00:24:35,820
It's worth mentioning here that
technologies like EVPF technology

394
00:24:35,970 --> 00:24:39,330
can enable auto discovery of
the runtime environment, which

395
00:24:39,340 --> 00:24:42,250
can better and ease the toil.

396
00:24:42,715 --> 00:24:48,385
of exposing that data, without manually
going and configure a million type of

397
00:24:48,395 --> 00:24:52,185
dashboard, a million type of connection
point, could be very helpful here.

398
00:24:52,535 --> 00:24:53,870
static snapshot.

399
00:24:53,870 --> 00:24:57,370
so to be useful, the runtime
topology need to be continuously and

400
00:24:57,400 --> 00:24:59,480
automatically discovered and updated.

401
00:25:00,110 --> 00:25:02,264
Not only is a way to.

402
00:25:02,535 --> 00:25:09,425
Collect this data, analyze these data,
able to not use a lot of documentation,

403
00:25:09,745 --> 00:25:13,955
which is most of the time irrelevant
on the, on the day of writing it.

404
00:25:14,265 --> 00:25:20,345
so being able to actually get that,
as a continuous process, is super

405
00:25:20,345 --> 00:25:24,065
important and saves a lot of time
of trying to do it in any other way.

406
00:25:26,355 --> 00:25:27,455
Tips for getting started.

407
00:25:27,645 --> 00:25:28,825
building your topology.

408
00:25:28,925 --> 00:25:31,045
of course, observability tools can help.

409
00:25:31,465 --> 00:25:36,394
A lot of them has elements like, a lot of
them has elements like, runtime topology,

410
00:25:36,395 --> 00:25:38,985
usually based on things like, DNS.

411
00:25:39,485 --> 00:25:43,595
Or basic modes of, networking,
but they often require a lot of

412
00:25:43,595 --> 00:25:45,375
configuration around them to.

413
00:25:45,665 --> 00:25:47,315
Explore all the different, layers.

414
00:25:47,715 --> 00:25:53,105
there are platforms that offer auto
discovery, in real time or real mapping,

415
00:25:53,105 --> 00:25:54,325
if you will, of the environment.

416
00:25:54,635 --> 00:25:58,275
This is, as we said earlier, often with
the help of technologies like eBPF,

417
00:25:59,015 --> 00:26:03,135
which are exposing, the dynamics, not
only from a configuration point of

418
00:26:03,135 --> 00:26:09,650
view, Or, or not only from the tendency
point of view, but stemming from real

419
00:26:09,910 --> 00:26:13,470
networking elements, real interaction
between the different services.

420
00:26:14,070 --> 00:26:17,380
the integration of your, the integration
of the topology with the IDP.

421
00:26:17,590 --> 00:26:21,630
the IDP, already most of them offer
integration with observability

422
00:26:21,630 --> 00:26:23,190
and incident response platform.

423
00:26:23,470 --> 00:26:28,470
It would be very native, it would be very
native to integrate, the topology part.

424
00:26:28,905 --> 00:26:32,405
With the caveat we said, we spoke
about earlier, as good as the good.

425
00:26:32,615 --> 00:26:37,195
It'll only be as good as the topology,
exposed from, from the observability tool.

426
00:26:37,455 --> 00:26:42,225
but that is as a first step, even
bringing it front facing, towards the

427
00:26:42,225 --> 00:26:46,105
user of the IDP, is very important
to put all the needed data in one

428
00:26:46,105 --> 00:26:51,265
place, and have, and have this data
reachable, by the u by the users of

429
00:26:51,265 --> 00:26:54,030
the, IDP, prioritization of use cases.

430
00:26:54,520 --> 00:26:59,783
Prioritization is, naturally important, in
any engineering, in any engineering venue.

431
00:27:00,013 --> 00:27:02,413
but being able to identify the quick wins.

432
00:27:02,783 --> 00:27:04,043
Where are the hotspots?

433
00:27:04,813 --> 00:27:09,163
Where are the services which are more
tailored toward failure, which makes

434
00:27:09,173 --> 00:27:11,703
more, problems or makes more challenges?

435
00:27:12,103 --> 00:27:14,323
In the production
environment, focus on them.

436
00:27:14,523 --> 00:27:17,163
You don't need to solve the entire system.

437
00:27:17,303 --> 00:27:21,203
You won't be able to solve an entire
system, especially if the scalable,

438
00:27:21,363 --> 00:27:24,063
scalable one, but the ability to.

439
00:27:24,978 --> 00:27:28,668
minimize that look at the important
part, the important building blocks,

440
00:27:28,698 --> 00:27:32,388
whether they're internal, whether
they're a platform or infrastructure

441
00:27:32,408 --> 00:27:36,908
part or service elements or third
party elements, which are super

442
00:27:36,908 --> 00:27:39,418
important priorities based on them.

443
00:27:39,828 --> 00:27:43,098
And eventually, when the relevant
team is looking at the IDP or the

444
00:27:43,358 --> 00:27:45,148
relevant thing is using the IDP.

445
00:27:45,803 --> 00:27:49,873
If we can put this quick win to
where that specific team on the

446
00:27:49,873 --> 00:27:55,443
grand scheme of things, it's not only
net positive, largely net positive,

447
00:27:55,453 --> 00:27:58,903
because from the beginning, these
are the elements which are most, most

448
00:27:59,403 --> 00:28:01,123
likely to require that and use that.

449
00:28:01,703 --> 00:28:03,783
and the last element would
be to scale and expand.

450
00:28:04,163 --> 00:28:08,433
Very, very common if we're speaking
about the concept of quick wins, but you

451
00:28:08,433 --> 00:28:12,493
need to prove to the users of the IDP.

452
00:28:12,693 --> 00:28:13,963
This is a valuable tool.

453
00:28:14,363 --> 00:28:19,863
So using this early win and being able
to go step by step, building more or

454
00:28:19,863 --> 00:28:25,233
additional opportunities to weave in
or to put in the runtime context into

455
00:28:25,233 --> 00:28:31,908
the IDP are Not only valuable, but as a
process of internal con conveying, whereas

456
00:28:31,908 --> 00:28:34,363
the process of proving internally that.

457
00:28:35,768 --> 00:28:41,378
Winning mechanism are super important
and using this, strategy to build it in

458
00:28:41,378 --> 00:28:46,668
step, prove it in step and eventually
using it in step, are going to eventually

459
00:28:46,668 --> 00:28:52,248
affect the software development life
cycle, the deployment life cycle.

460
00:28:52,538 --> 00:28:56,538
All of that would be achieved,
improving in, in ways that,

461
00:28:56,778 --> 00:28:57,838
people can cope with that.

462
00:29:00,538 --> 00:29:03,718
I really hope that you enjoyed
that as much as we did.

463
00:29:04,048 --> 00:29:06,878
we think there's, A very
large room for collaboration.

464
00:29:07,178 --> 00:29:11,108
We're in large collaboration between
what's being done on the observability

465
00:29:11,118 --> 00:29:15,528
world between advances in, in,
the abilities in the observability

466
00:29:15,698 --> 00:29:20,938
world and how real time topologies
could be auto discovered, exposed,

467
00:29:21,068 --> 00:29:25,748
maintained by the tools themselves, and
integrating this data toward the IDP.

468
00:29:26,018 --> 00:29:30,218
eventually it becomes, only logical
that we're speaking about things like

469
00:29:30,468 --> 00:29:34,468
a continuous integration, continuous
development, and thinking about the

470
00:29:34,468 --> 00:29:39,158
software development lifecycle, deployment
lifecycle, those tools has to work

471
00:29:39,158 --> 00:29:43,338
in, have to work in, have to work in
conjunction, to water, to one another,

472
00:29:43,348 --> 00:29:45,588
they're complimenting one another.

473
00:29:45,878 --> 00:29:51,153
And each and every one of them is
depending on the other one from things

474
00:29:51,153 --> 00:29:56,333
like the IDP, which encompass the
organizational knowledge about what should

475
00:29:56,343 --> 00:29:59,753
be defined, how it should be orchestrated,
where it should be orchestrated.

476
00:30:00,013 --> 00:30:04,983
And eventually doing, the deployment,
doing the deployment or commanding the

477
00:30:04,983 --> 00:30:06,753
deployment, to the production environment.

478
00:30:07,063 --> 00:30:11,663
And of course, all the way through the
outer hand, which is the deployment

479
00:30:11,663 --> 00:30:16,533
environment or the runtime environment,
in reality, and those won't leave

480
00:30:16,843 --> 00:30:19,013
this cannot to cannot live in void.

481
00:30:19,293 --> 00:30:23,283
Eventually, they're dependent not
only with the teams which need to work

482
00:30:23,283 --> 00:30:27,843
together in order to solve issues or
to add capabilities to the system.

483
00:30:28,543 --> 00:30:32,663
But also, from technical perspective,
there is going to be a lot of

484
00:30:32,663 --> 00:30:37,263
convergence between the abilities of
those two on integration here is native.

485
00:30:37,663 --> 00:30:39,133
I really hope that you enjoyed it.

486
00:30:39,273 --> 00:30:44,493
we will be happy to answer any
question by email or by, by coming

487
00:30:44,493 --> 00:30:46,003
to us through, through the website.

488
00:30:46,413 --> 00:30:50,283
And I wish you very happy,
very, very productive day.

489
00:30:50,473 --> 00:30:50,923
Thank you.

