1
00:00:14,040 --> 00:00:16,979
Hello and welcome to comp 42.

2
00:00:16,979 --> 00:00:20,089
Today, we've got a really exciting
session for you talking about

3
00:00:20,089 --> 00:00:23,570
breaking down the principles of
platform engineering and talking about

4
00:00:23,570 --> 00:00:25,260
what platform as a service means.

5
00:00:25,299 --> 00:00:29,380
And with that, we've got two Really
cool interactive demos where we're

6
00:00:29,380 --> 00:00:34,430
going to be talking and taking a look
at virtualization, but also AI in the

7
00:00:34,430 --> 00:00:40,330
context of all platform engineering and
discussing how to empower the developer

8
00:00:40,330 --> 00:00:44,070
experience and minimize some of these
complexities that operations and

9
00:00:44,070 --> 00:00:46,130
developers teams are experiencing now.

10
00:00:46,565 --> 00:00:48,665
In this world of cloud native.

11
00:00:48,795 --> 00:00:52,695
So I want to give a big thank you to
the conference organizers and give

12
00:00:52,695 --> 00:00:58,504
a quick introduction to myself and
I'm joined by the lovely Valentina.

13
00:00:58,965 --> 00:01:02,504
Now, a little bit of background
about myself is that I've been very

14
00:01:02,504 --> 00:01:05,515
fortunate to always have worked
with containers and kubernetes.

15
00:01:05,515 --> 00:01:09,964
It's been a big privilege and
my experiences in that container

16
00:01:09,964 --> 00:01:13,415
tooling the projects podman and
podman desktop as an interface,

17
00:01:13,485 --> 00:01:15,315
I've helped, in the past with those.

18
00:01:15,735 --> 00:01:18,184
and I work as a developer
advocate at Red Hat.

19
00:01:18,195 --> 00:01:20,225
So Valentina, I'll pass it to you.

20
00:01:20,985 --> 00:01:21,355
Yes.

21
00:01:21,395 --> 00:01:23,705
I'm so excited about this session.

22
00:01:23,705 --> 00:01:25,595
So thank you so much for including me.

23
00:01:25,794 --> 00:01:30,044
I can't wait to share all the
agenda and demos that we have.

24
00:01:30,609 --> 00:01:31,369
for you today.

25
00:01:31,370 --> 00:01:32,879
So I'm Valentina Rodriguez.

26
00:01:32,949 --> 00:01:35,179
I'm a principal architect at Red Hat.

27
00:01:35,349 --> 00:01:37,609
I focus on everything Kubernetes.

28
00:01:37,889 --> 00:01:41,959
before that, not that long
ago, I was a developer myself.

29
00:01:42,089 --> 00:01:47,699
So I am so excited about this topic and
how we can bring the benefits of platform

30
00:01:47,699 --> 00:01:52,129
engineering and internal development
platforms into developers personas.

31
00:01:52,699 --> 00:01:56,159
So with that, I would like to
cover the agenda for today.

32
00:01:56,339 --> 00:01:57,469
we will go over this.

33
00:01:57,764 --> 00:02:01,404
Personas, the developer, we'll talk
about platform engineering and how they

34
00:02:01,404 --> 00:02:07,144
can work together, but also look into
platform as a product that we know is

35
00:02:07,214 --> 00:02:09,464
a hot topic right now in the industry.

36
00:02:09,464 --> 00:02:12,904
We want to understand how it works
and how we can take advantage of it.

37
00:02:13,414 --> 00:02:17,764
And with that, it really is
connected with the idea of internal

38
00:02:17,764 --> 00:02:19,724
developer portals and platforms.

39
00:02:20,014 --> 00:02:24,174
we will show you, we will talk about it,
but also we will do a couple of demos as.

40
00:02:24,589 --> 00:02:28,359
As Cedric mentioned, we'll go over
at the end with best practices

41
00:02:28,399 --> 00:02:30,059
and also reference architectures.

42
00:02:30,509 --> 00:02:35,509
but then now we're going to start
talking about what Cedric, I know you're

43
00:02:35,519 --> 00:02:38,349
working on an amazing application.

44
00:02:38,519 --> 00:02:40,219
I want to hear everything about it.

45
00:02:40,239 --> 00:02:41,599
So what can you tell me?

46
00:02:42,449 --> 00:02:43,609
Thanks so much, Valentina.

47
00:02:43,659 --> 00:02:47,909
I'm building out a, you might not think
it's exciting, but a very cool internal

48
00:02:47,909 --> 00:02:53,919
tool, and the first step, is, and I told
this is, how it's traditionally worked,

49
00:02:54,359 --> 00:02:59,099
is that all you'd have to do is pull out
your editor and get to coding, right?

50
00:02:59,129 --> 00:03:03,554
Maybe it's VS Code, maybe it's
Eclipse, IntelliJ, and figure out

51
00:03:03,554 --> 00:03:05,084
what framework I'm going to work with.

52
00:03:05,084 --> 00:03:06,584
Is it a Python application?

53
00:03:06,584 --> 00:03:07,664
Is it a Java app?

54
00:03:07,954 --> 00:03:10,464
and it used to be, much more simpler.

55
00:03:10,854 --> 00:03:14,254
But then we have to start thinking
about a couple more complexities.

56
00:03:14,314 --> 00:03:18,234
for example, with being cloud native, we
have to think about, Oh, what container

57
00:03:18,234 --> 00:03:22,055
runtime am I going to use to package
up my application and its dependencies

58
00:03:22,075 --> 00:03:23,465
and actually run it somewhere?

59
00:03:23,785 --> 00:03:24,575
Is it Podman?

60
00:03:24,585 --> 00:03:25,405
Is it Docker?

61
00:03:25,654 --> 00:03:27,765
Where are we going to store
those container images?

62
00:03:27,774 --> 00:03:30,005
What registry do we
have to put them there?

63
00:03:30,254 --> 00:03:31,744
where are we going to
run these containers?

64
00:03:31,744 --> 00:03:34,924
I'm hoping it's on a platform
like Kubernetes, or a

65
00:03:34,924 --> 00:03:36,515
distribution of Kubernetes.

66
00:03:37,014 --> 00:03:40,964
and then it doesn't stop there because
on top of that, we need to start thinking

67
00:03:40,964 --> 00:03:44,625
about the YAML that we need for these
deployments in order to run them.

68
00:03:45,000 --> 00:03:48,650
In order to take advantage of all the
benefits that we have with Kubernetes.

69
00:03:49,000 --> 00:03:52,689
the YAML that I as a developer
don't really understand because I'm

70
00:03:52,689 --> 00:03:54,770
concentrated on writing my application.

71
00:03:55,140 --> 00:03:57,100
Now I have to think
about these complexities.

72
00:03:57,530 --> 00:03:59,370
Where am I going to store the code?

73
00:03:59,480 --> 00:04:03,120
Is it, is it a remote IDE
that I need to start using?

74
00:04:03,120 --> 00:04:05,340
Do I need to think about CI and CD?

75
00:04:05,780 --> 00:04:06,879
Valentina, I don't know.

76
00:04:06,879 --> 00:04:07,850
Does it stop there?

77
00:04:09,240 --> 00:04:12,540
No, it really doesn't, but I
think you are in a great path.

78
00:04:12,609 --> 00:04:14,679
so you've started building locally, right?

79
00:04:14,679 --> 00:04:16,529
And that's been working well for you.

80
00:04:16,569 --> 00:04:20,729
But then as you mentioned, we need to
start looking into other practices and

81
00:04:20,949 --> 00:04:25,809
technologies and tools to really bring
all those capabilities into different

82
00:04:26,524 --> 00:04:30,164
Development environments and all
the different stages, and we want to

83
00:04:30,164 --> 00:04:32,814
make it with best practices security.

84
00:04:33,044 --> 00:04:37,024
So we need to feel like CICD
building the pipeline with Tecton.

85
00:04:37,054 --> 00:04:42,364
We need to look into something
that I really love with Argo.

86
00:04:42,364 --> 00:04:43,504
For example, when you have.

87
00:04:43,739 --> 00:04:47,859
One source of true, so you can have
all those YAML files really there.

88
00:04:48,189 --> 00:04:52,349
But then we'll start looking into, okay,
let's do this use home charts, right?

89
00:04:52,349 --> 00:04:56,429
It's a really nice practice, that you
can use, hunters for your applications

90
00:04:56,459 --> 00:05:01,189
when you can use the values files and
everything in there as a good practice to

91
00:05:01,229 --> 00:05:03,809
scale all those manifests and reuse them.

92
00:05:04,099 --> 00:05:08,429
But then also, how that will look if we
start looking into, It doesn't end there.

93
00:05:08,579 --> 00:05:11,579
As you said, from Grafana, we need
to start looking at observability.

94
00:05:12,409 --> 00:05:15,019
We need to start looking
into, is this a microservices?

95
00:05:15,629 --> 00:05:17,029
How we connect with Istio?

96
00:05:17,189 --> 00:05:18,129
What about Kafka?

97
00:05:18,129 --> 00:05:20,729
If you want to do some
even driving architectures?

98
00:05:20,999 --> 00:05:23,119
there are so many things
that we need to do.

99
00:05:23,299 --> 00:05:24,329
and this is just a start.

100
00:05:26,679 --> 00:05:32,769
Valentina, I must say it sounds, very
exciting and interesting, but I'm

101
00:05:32,769 --> 00:05:34,999
starting to feel a little bit overwhelmed.

102
00:05:35,109 --> 00:05:38,589
and you might feel like this guy
in the photo here, where you're

103
00:05:38,589 --> 00:05:42,769
looking at the CNCF landscape, and
it's just so overwhelming because

104
00:05:43,229 --> 00:05:45,049
it's exploded in the past few years.

105
00:05:45,049 --> 00:05:48,619
there is a specific project
for every specific use case.

106
00:05:49,299 --> 00:05:52,489
that your company might need and it's
great because it's all open source

107
00:05:52,569 --> 00:05:56,779
and we can all contribute to it But
as a developer i'm starting to be

108
00:05:56,789 --> 00:06:01,209
very overwhelmed And I think that
we can all agree that developers are

109
00:06:01,239 --> 00:06:03,719
under this immense amount of pressure.

110
00:06:04,219 --> 00:06:08,819
And with that, we have the consequence
of the productivity slowing down

111
00:06:08,829 --> 00:06:11,979
and the fact that there is more
bureaucracy, there are more processes,

112
00:06:12,199 --> 00:06:14,329
there are more cognitive overload.

113
00:06:14,734 --> 00:06:18,854
items that have taken me away from just
coding to now having to think about a

114
00:06:18,854 --> 00:06:25,264
lot more so from my day to day job of
just having to write application code.

115
00:06:25,264 --> 00:06:28,434
Now I'm having to think about
application modernization.

116
00:06:28,434 --> 00:06:33,024
And how do we actually translate our
application to a cloud native environment?

117
00:06:33,025 --> 00:06:37,234
And of course, learning new
technologies comes with that

118
00:06:37,234 --> 00:06:39,084
cognitive overload as well.

119
00:06:39,114 --> 00:06:42,954
And These are all part of the different,
benefits that we get from those

120
00:06:42,954 --> 00:06:46,944
technologies that you talked about,
Valentina, but now, if I'm just trying

121
00:06:46,944 --> 00:06:50,944
to focus on getting my application
to run, there's a lot of numbers that

122
00:06:50,944 --> 00:06:56,055
we've looked at and learned from papers
in the field and reports that kind

123
00:06:56,055 --> 00:07:00,905
of point to developer productivity
decreasing, and I think this kind of

124
00:07:00,905 --> 00:07:02,845
brings us to this wall of confusion.

125
00:07:03,995 --> 00:07:05,165
Yes, exactly.

126
00:07:05,165 --> 00:07:05,905
I understand.

127
00:07:06,325 --> 00:07:08,295
Yeah, it's a lot, right?

128
00:07:08,305 --> 00:07:09,025
To take in.

129
00:07:09,035 --> 00:07:12,975
And then we start thinking on what
is that you need to do, right?

130
00:07:13,015 --> 00:07:14,954
Do I need to write those YAML files?

131
00:07:14,954 --> 00:07:16,155
Do I need to learn how?

132
00:07:16,175 --> 00:07:17,424
Like, how that will work?

133
00:07:17,425 --> 00:07:18,505
is it operations?

134
00:07:18,535 --> 00:07:19,545
Is it developers?

135
00:07:19,915 --> 00:07:22,215
And it doesn't even end that, right?

136
00:07:22,545 --> 00:07:28,425
So if we go to the next slide, we also
look into DevOps and the culture and we

137
00:07:28,425 --> 00:07:32,845
want to bring that culture together that
we have seen through the different years

138
00:07:32,915 --> 00:07:35,754
and different use cases that's not enough.

139
00:07:36,044 --> 00:07:39,294
There are many things we need
to think of in the next slide.

140
00:07:39,674 --> 00:07:40,794
We look at.

141
00:07:41,634 --> 00:07:45,364
there's many things we need to start
looking into right from operations to

142
00:07:45,384 --> 00:07:51,244
have access into cluster networking to
have access from that application to

143
00:07:51,284 --> 00:07:56,324
ingress rigorous right into different
components inside outside the cluster.

144
00:07:56,644 --> 00:07:58,824
Security is important from the beginning.

145
00:07:58,825 --> 00:08:02,034
So how we can integrate
all the security within.

146
00:08:02,774 --> 00:08:05,624
my application and all the
components that are consuming.

147
00:08:05,914 --> 00:08:09,964
So there is a lot here that
is not only even technology.

148
00:08:10,284 --> 00:08:11,714
We are talking about processes.

149
00:08:11,744 --> 00:08:15,414
We are talking about people and
how everything combines together.

150
00:08:15,754 --> 00:08:18,214
So it's a lot to take in.

151
00:08:18,364 --> 00:08:19,374
I understand that.

152
00:08:19,534 --> 00:08:23,624
So if we go into the next slide,
I want to ask you like right now,

153
00:08:23,624 --> 00:08:27,194
if we start looking into those
complexities and those things, how

154
00:08:27,204 --> 00:08:29,944
you work right now with your platform.

155
00:08:30,124 --> 00:08:32,334
It's so far, this is,
it's working for you and.

156
00:08:32,874 --> 00:08:33,525
What is it?

157
00:08:33,525 --> 00:08:38,374
What are the process that you need to go
through to get access and requirements?

158
00:08:38,374 --> 00:08:40,954
And how is that been working
for you and the team?

159
00:08:42,234 --> 00:08:43,504
That's a great question, Valentina.

160
00:08:43,504 --> 00:08:46,634
so if I think about it, we're
taking a traditional approach

161
00:08:46,754 --> 00:08:48,835
to, working with the platform.

162
00:08:49,750 --> 00:08:53,110
Let's say, if I need a database
spun up, I make that ticket might

163
00:08:53,110 --> 00:08:55,080
take a little while to come back.

164
00:08:55,080 --> 00:08:56,820
And eventually I get that provision.

165
00:08:56,870 --> 00:09:00,449
we're defining our requirements
up front and going from there.

166
00:09:00,459 --> 00:09:01,799
And it's this happens.

167
00:09:02,299 --> 00:09:06,839
And then there's a response and, it's
slow to the changing needs that we,

168
00:09:06,849 --> 00:09:08,659
we have in a cloud native environment.

169
00:09:08,659 --> 00:09:10,899
And I'm wondering, is there
a different way to do things?

170
00:09:11,589 --> 00:09:13,046
Yes, there is.

171
00:09:13,046 --> 00:09:16,634
There is a different way
if we start looking into a

172
00:09:16,634 --> 00:09:18,265
platform as a product, right?

173
00:09:18,265 --> 00:09:19,569
When this is an.

174
00:09:19,949 --> 00:09:26,779
Always evolving product when we take
also the user's needs into consideration

175
00:09:26,779 --> 00:09:30,989
through surveys, receiving feedback and
meetings and try to understand what are

176
00:09:31,009 --> 00:09:33,499
really the needs and the business needs.

177
00:09:33,749 --> 00:09:38,154
we make these into an agile
way, so you don't need to start.

178
00:09:38,464 --> 00:09:42,564
Waiting for something to be fixed,
but rather just that will be

179
00:09:42,604 --> 00:09:47,304
taken into consideration and as a
product with that product mindset.

180
00:09:47,344 --> 00:09:51,404
It really is evolving that
platform really beyond right?

181
00:09:51,434 --> 00:09:55,584
We start looking into how we can
increase platform capabilities.

182
00:09:55,804 --> 00:09:58,114
What are the users doing to do next?

183
00:09:58,344 --> 00:10:01,884
So it really opens up to many
possibilities, not only to

184
00:10:01,944 --> 00:10:05,624
reduce all that friction and
time wasted, but so much more.

185
00:10:07,229 --> 00:10:08,839
Yeah, I think that's a great point.

186
00:10:09,479 --> 00:10:10,409
That sounds great, right?

187
00:10:11,449 --> 00:10:15,029
Yeah, and I think if we take a
step back, I want to look at what

188
00:10:15,059 --> 00:10:16,869
we have in our environment, right?

189
00:10:16,959 --> 00:10:20,359
We've got this really great app platform
that we were talking about before, right?

190
00:10:20,359 --> 00:10:23,489
With whatever operating system
we're running on top of, with

191
00:10:23,519 --> 00:10:28,049
features for developer tools to
increase my productivity, right?

192
00:10:28,049 --> 00:10:33,029
We've got capabilities for observability
with Prometheus and Grafana, tools for

193
00:10:33,049 --> 00:10:35,139
auditing and compliance and security.

194
00:10:35,139 --> 00:10:36,359
And so it's a great place.

195
00:10:36,909 --> 00:10:38,859
To deploy the applications, right?

196
00:10:39,199 --> 00:10:42,239
But on the other side, we've got
application developers like myself,

197
00:10:42,529 --> 00:10:44,189
creating the tools and the services.

198
00:10:44,609 --> 00:10:47,119
We've got front end back end engineers.

199
00:10:47,119 --> 00:10:50,099
We've got data scientists and data
engineers now that we're working

200
00:10:50,099 --> 00:10:51,639
with AI enabled applications.

201
00:10:52,069 --> 00:10:55,560
But I've feel like there's a bit of
a gap between the actual application

202
00:10:55,560 --> 00:11:00,110
platform where we're deploying our
applications and the people who are.

203
00:11:00,335 --> 00:11:04,605
Developing, consuming, and working with
the apps that will be deployed there.

204
00:11:05,075 --> 00:11:10,054
And so I think that we could connect
this in a way with platform engineers.

205
00:11:10,175 --> 00:11:14,374
And this is the way that Red Hat, along
with the community and industry, believes

206
00:11:14,904 --> 00:11:21,804
in a way to connect the gap between the
app platform and the users with all of

207
00:11:21,804 --> 00:11:25,054
the best practices and security in hand.

208
00:11:25,134 --> 00:11:28,269
And I think this has been
picking up quite a bit.

209
00:11:29,879 --> 00:11:30,209
yes.

210
00:11:30,379 --> 00:11:30,919
So platform.

211
00:11:31,199 --> 00:11:34,729
So that's great that you mentioned that
because platform engineering even has

212
00:11:34,729 --> 00:11:40,789
been named by Gartner as one of the top 10
strategic technology trends for this year.

213
00:11:41,629 --> 00:11:47,619
IDC also predicts by like in two
years, let's say, 70 percent of

214
00:11:47,649 --> 00:11:52,199
enterprise will be adopting a
composable internal facing architecture.

215
00:11:52,514 --> 00:11:55,504
Application platform to really
empower those developers, right?

216
00:11:55,504 --> 00:11:59,434
Because we know that developers
are the last line of defense.

217
00:11:59,474 --> 00:12:03,084
So being that value into the
business with their applications.

218
00:12:03,444 --> 00:12:06,624
So removing all that
friction, it really helps.

219
00:12:06,664 --> 00:12:10,544
So having that platform engineering
concept and practices around

220
00:12:10,544 --> 00:12:14,644
companies, it really helps with
innovation, reducing friction and

221
00:12:14,644 --> 00:12:16,184
everything we have discussed before.

222
00:12:16,694 --> 00:12:21,164
as you said, it's not only, as there are
many, research that are proving this,

223
00:12:21,164 --> 00:12:25,586
and companies are taking, advantage
of this platform as a product idea.

224
00:12:25,586 --> 00:12:30,484
And with that, we want to, yeah, talk
about really platform as a product.

225
00:12:30,664 --> 00:12:34,814
as I mentioned, it's this idea of really
bringing those capabilities right into

226
00:12:34,814 --> 00:12:39,594
the end user and thinking in a way that
we can build this in an interactive

227
00:12:39,634 --> 00:12:42,354
and also iteration way that is agile.

228
00:12:43,314 --> 00:12:46,954
And brings all those capabilities
to the end users to really enable

229
00:12:46,954 --> 00:12:48,744
them to build applications.

230
00:12:50,764 --> 00:12:51,774
I have a question.

231
00:12:51,944 --> 00:12:53,954
what is a platform though?

232
00:12:54,824 --> 00:12:55,334
Yeah.

233
00:12:55,614 --> 00:12:59,664
So according to Evan Botcher, digital
platform is a foundation of self

234
00:12:59,664 --> 00:13:04,394
services, APIs, tools, services,
knowledge, and support, which are

235
00:13:04,444 --> 00:13:06,754
arranged as a compelling internal product.

236
00:13:07,374 --> 00:13:09,704
So APIs, tools, services, and knowledge.

237
00:13:09,754 --> 00:13:13,744
Those are the key components that are
critical to build a digital platform.

238
00:13:15,499 --> 00:13:17,129
And what does this kind of look like?

239
00:13:17,129 --> 00:13:20,389
I know there's this kind of
analogy of the iceberg, right?

240
00:13:21,119 --> 00:13:21,539
Yeah.

241
00:13:21,569 --> 00:13:27,179
So if you're familiar with the tip of the
iceberg concept, if you, yeah, advance

242
00:13:27,179 --> 00:13:30,459
one more, that is so much on a platform.

243
00:13:30,479 --> 00:13:33,799
We know how much platform
is capable of, right?

244
00:13:33,799 --> 00:13:38,189
If we start really at the bottom,
What we need is all the configurations

245
00:13:38,189 --> 00:13:42,889
managers in order to enable this
platform and capabilities to have

246
00:13:42,909 --> 00:13:47,229
as much as self service as possible,
but we need networking, we need a

247
00:13:47,229 --> 00:13:51,689
storage, we need authentication,
artifact builder, all of that.

248
00:13:51,699 --> 00:13:56,159
So all of that, we really want to
hear that from that complexity from

249
00:13:56,159 --> 00:13:58,299
the end user and really focus on.

250
00:13:59,094 --> 00:14:00,754
The creating a great experience.

251
00:14:00,754 --> 00:14:04,434
So at the top, we start with
internal developer platform, which is

252
00:14:04,464 --> 00:14:07,054
backstage, which allows to work with.

253
00:14:07,374 --> 00:14:11,544
for development templates and provides
these developer experience that I

254
00:14:11,544 --> 00:14:14,594
can access different environments
and different applications

255
00:14:14,594 --> 00:14:16,894
capabilities, but it really is just.

256
00:14:18,059 --> 00:14:22,069
Given that complexity, but
given the capabilities that the

257
00:14:22,069 --> 00:14:23,699
platform has to the end users.

258
00:14:23,729 --> 00:14:29,429
So it really focused on enable the users
and bring in a fantastic user experience.

259
00:14:31,719 --> 00:14:37,459
I noticed that, you talked about the APIs,
the tools, the services, the knowledge.

260
00:14:37,489 --> 00:14:42,289
So I also saw at the bottom of
the quote, it's arranged as a

261
00:14:42,319 --> 00:14:43,759
compelling internal product.

262
00:14:43,789 --> 00:14:46,069
So what kind of, what do you mean by that?

263
00:14:47,479 --> 00:14:47,819
Yeah.

264
00:14:47,929 --> 00:14:51,975
So There are, has been defined about
internal development platform, right?

265
00:14:51,975 --> 00:14:53,865
And what are the things
that are important?

266
00:14:53,865 --> 00:14:57,055
And this I have seen also
when working with customers.

267
00:14:57,065 --> 00:15:01,915
So first we need to enable those
end users to have a quick and easy

268
00:15:01,915 --> 00:15:05,785
access into the platform so they
can start building faster, and

269
00:15:05,785 --> 00:15:07,235
building faster into the market.

270
00:15:07,265 --> 00:15:09,945
We really want to reduce
that Time to the market.

271
00:15:10,205 --> 00:15:14,095
so having that stream like
process, it's really critical.

272
00:15:14,355 --> 00:15:18,215
I have seen that sometimes, a
customer had sometimes months waiting

273
00:15:18,265 --> 00:15:20,025
just to have access to a cluster.

274
00:15:20,285 --> 00:15:25,005
So they really, the idea is really
how we can, take that, the company

275
00:15:25,005 --> 00:15:28,765
guidelines, best practices, securities
that are required, but do it in a

276
00:15:28,775 --> 00:15:32,845
way that is really more extreme life
for those end users and they can have

277
00:15:32,845 --> 00:15:34,795
quick access so they kind of stuff.

278
00:15:35,080 --> 00:15:38,650
building those applications and
coding, we want to code also

279
00:15:38,650 --> 00:15:40,570
in a fast, reliable in a loop.

280
00:15:40,570 --> 00:15:44,320
And we want to create that consistency
across different environments.

281
00:15:45,010 --> 00:15:48,770
To promote all those applications
into the different development

282
00:15:48,780 --> 00:15:50,750
stages, but also runtime, right?

283
00:15:50,760 --> 00:15:51,910
Thinking on how we can.

284
00:15:52,540 --> 00:15:57,210
Create that in a stable way,
scalable with secure best practices.

285
00:15:57,630 --> 00:16:00,770
And including monitoring and logging,
which are critical to understand,

286
00:16:00,770 --> 00:16:02,450
what's going on with my application.

287
00:16:02,450 --> 00:16:07,900
So having all of that really set
up, it's really a success for having

288
00:16:07,920 --> 00:16:09,570
that internal development platform.

289
00:16:11,950 --> 00:16:15,340
And speaking of internal
development platforms, I heard

290
00:16:15,470 --> 00:16:17,120
there's a project called Backstage.

291
00:16:18,095 --> 00:16:23,855
Yeah, so Backstage is this, open platform,
that allow us to build developer portals.

292
00:16:24,575 --> 00:16:29,805
So it was created by Spotify, it's part
of the Cloud Native Computing Foundation,

293
00:16:29,815 --> 00:16:34,265
and it really allows developers to focus
on what they want, which is cool, right?

294
00:16:34,265 --> 00:16:37,545
You were saying, Hey, I want to
build my app, and right now I

295
00:16:37,545 --> 00:16:39,085
need to learn all these things.

296
00:16:39,435 --> 00:16:43,535
And when it ends, because now what you
need, not only to learn, but keep your

297
00:16:43,535 --> 00:16:45,815
skillset today, what we disordered.

298
00:16:46,130 --> 00:16:49,200
Teams and, request access
to the environment.

299
00:16:49,240 --> 00:16:51,160
So there are many things
that you need to learn.

300
00:16:51,690 --> 00:16:55,420
The idea is to really create in that
single pane of glass when you can

301
00:16:55,430 --> 00:16:59,990
have everything in one place and
giving you that abstraction layer.

302
00:17:00,000 --> 00:17:02,560
So you can just focus
on what you love, right?

303
00:17:02,580 --> 00:17:06,875
Building the applications, it really
unlocks the developer productivity.

304
00:17:07,385 --> 00:17:09,735
So with that.

305
00:17:09,960 --> 00:17:15,050
Yes, there are many backstage adopters
and every day there are more and more.

306
00:17:15,210 --> 00:17:17,080
So it's a really great community.

307
00:17:17,530 --> 00:17:21,530
The next one looks like, but
what really is what backstage

308
00:17:21,540 --> 00:17:23,560
is composed by five components.

309
00:17:23,960 --> 00:17:26,440
So we have the centralized
software catalog.

310
00:17:26,470 --> 00:17:32,405
That is really all the, made a data and
application ownership for all the software

311
00:17:32,405 --> 00:17:36,915
and uses that you can create within
backstage services, website libraries,

312
00:17:37,195 --> 00:17:38,875
pipelines, everything within there.

313
00:17:39,165 --> 00:17:44,355
The plugins is what really enables
all the capabilities from the platform

314
00:17:44,375 --> 00:17:49,605
integrating with backstage to enable like
CS, CP, monitoring, and so much more.

315
00:17:50,165 --> 00:17:51,465
And then software templates.

316
00:17:51,795 --> 00:17:56,915
These are the critical pieces
because that is what it really

317
00:17:57,405 --> 00:18:01,615
defines all the manifests to create
your components within Backstage.

318
00:18:01,635 --> 00:18:06,085
Either it's an application, a virtual
machine, or an AI application.

319
00:18:06,545 --> 00:18:10,800
The idea is to create those
Templates using best practices,

320
00:18:10,800 --> 00:18:14,510
the company guidelines, security,
everything within there.

321
00:18:14,840 --> 00:18:20,650
So it's in a one single source through in
a repository and everyone can reuse that.

322
00:18:21,050 --> 00:18:23,790
So you can ensure that also
you have version control.

323
00:18:24,050 --> 00:18:25,870
Everyone can, can access.

324
00:18:26,150 --> 00:18:27,449
You can, update, templates.

325
00:18:27,710 --> 00:18:30,030
Frequently, you have all the information.

326
00:18:30,030 --> 00:18:35,040
So it's a really nice way to really
adapt all those best practices without

327
00:18:35,040 --> 00:18:38,840
you needed to learn all the complexity
from what we were saying, right?

328
00:18:38,840 --> 00:18:42,510
All the gators, the hunters, the
CICD, the TACDON, all of that.

329
00:18:43,030 --> 00:18:45,370
And tech docs, of course,
is a critical piece.

330
00:18:45,400 --> 00:18:49,810
If we want to have a centralized place to
learn about technical documentation, it's

331
00:18:50,260 --> 00:18:54,680
really important because as the idea of
writing documentation is really great, but

332
00:18:54,680 --> 00:18:57,185
then It's difficult to maintain, right?

333
00:18:57,185 --> 00:18:59,385
And we have many places and documentation.

334
00:18:59,425 --> 00:19:00,755
Sometimes it's duplicated.

335
00:19:01,285 --> 00:19:05,525
So bringing that it within
backstage is really a nice way

336
00:19:05,575 --> 00:19:06,785
to solve all those problems.

337
00:19:07,175 --> 00:19:11,105
and then the search is just, enable
us to search and look for any

338
00:19:11,105 --> 00:19:13,205
option that is within backstage.

339
00:19:13,815 --> 00:19:16,135
Yeah, with that, I'm going
to go to the next one.

340
00:19:16,495 --> 00:19:22,535
We have, amazing community, that has
built more than 190 community plugins.

341
00:19:22,565 --> 00:19:27,655
So the Red Hat, we are, building
fantastic plugins as well.

342
00:19:27,655 --> 00:19:31,775
You will see some of them, But we
do have a lot of different plugins

343
00:19:31,775 --> 00:19:35,165
that you can take advantage of
to increase that capabilities.

344
00:19:35,225 --> 00:19:38,265
As I mentioned from CICD
monitoring security as well.

345
00:19:38,665 --> 00:19:43,045
So there are so many that you can
reuse, with that, yes, next one.

346
00:19:43,355 --> 00:19:49,195
Now we have the demo to show you how
well, but really is backstage and how

347
00:19:49,215 --> 00:19:52,125
that works within our Red Hat products.

348
00:19:52,185 --> 00:19:55,015
So at Red Hat, I will
start sharing my screen.

349
00:19:55,335 --> 00:20:00,225
So now, as you can see, I am here in
Red Hat Developer Hub, which is based

350
00:20:00,245 --> 00:20:05,025
on Backstage, but we have created an
enterprise grade, internal developer

351
00:20:05,055 --> 00:20:09,175
portal for you, integrated with, Red
Hat plugins and also community plugins

352
00:20:09,615 --> 00:20:11,515
to bring you the best experience.

353
00:20:12,055 --> 00:20:15,155
So here, what you can see is the homepage.

354
00:20:15,225 --> 00:20:19,045
In the homepage, I can customize
everything that I'm seeing right now.

355
00:20:19,450 --> 00:20:25,630
And I now I can access like community
tools, developer tools, CICD,

356
00:20:25,980 --> 00:20:30,640
everything, OpenShift, clusters,
everything that I want here from

357
00:20:30,640 --> 00:20:32,410
my internal developer portal.

358
00:20:32,880 --> 00:20:33,920
This is the homepage.

359
00:20:33,960 --> 00:20:35,960
I also have access to the catalog.

360
00:20:36,010 --> 00:20:39,980
So the catalog, remember, is the place
where I can access everything that's

361
00:20:39,980 --> 00:20:42,330
been created within, developer hub.

362
00:20:42,830 --> 00:20:45,100
So here I have applications.

363
00:20:45,430 --> 00:20:48,280
I have also a virtual
machine created already.

364
00:20:48,620 --> 00:20:53,750
I have, I can see who created this,
what type of application is it, What

365
00:20:53,760 --> 00:20:57,950
type of life cycle we are in with that
application and also I can add some tags.

366
00:20:58,320 --> 00:21:02,290
The tags will help me
to, to start, filtering.

367
00:21:02,300 --> 00:21:03,810
I can also filter by type.

368
00:21:04,110 --> 00:21:06,360
I can also filter by different components.

369
00:21:06,610 --> 00:21:08,474
I can filter here with the different tags.

370
00:21:08,475 --> 00:21:11,775
this is a nice way that I can
just see whatever is going on.

371
00:21:12,085 --> 00:21:15,235
you may wondering wait a second,
would I will see everything?

372
00:21:15,315 --> 00:21:19,395
we have an RBAC, functionality
that you can use in order to

373
00:21:19,445 --> 00:21:21,785
filter and decide who see what.

374
00:21:22,115 --> 00:21:25,865
the idea is you probably don't want,
All the teams seeing everything or

375
00:21:25,875 --> 00:21:30,045
accessing everything, so you can
filter directly just to specific teams.

376
00:21:30,505 --> 00:21:32,925
I also have the APIs access.

377
00:21:32,965 --> 00:21:35,955
right now, I don't have anything
created, but if you are a developer,

378
00:21:35,955 --> 00:21:40,595
you want to see what is available
for you to consume, what are the APIs

379
00:21:40,645 --> 00:21:42,645
that are right now being exposed?

380
00:21:42,865 --> 00:21:43,705
It's a nice way.

381
00:21:43,705 --> 00:21:43,935
I know.

382
00:21:43,935 --> 00:21:47,245
So we'll allows you to look
into the APIs contract.

383
00:21:47,785 --> 00:21:49,305
then we have landing pads.

384
00:21:49,545 --> 00:21:52,705
It's a nice thing that I can just,
I want to learn something new.

385
00:21:52,815 --> 00:21:53,985
So this is my favorite place.

386
00:21:53,985 --> 00:21:59,355
I can just go here and click and it will
be sending me to the specific landing pad.

387
00:22:00,395 --> 00:22:01,945
then we have the TIC radar.

388
00:22:01,975 --> 00:22:03,465
This is an industry standard.

389
00:22:04,025 --> 00:22:07,765
So here it's just, an organization
can set up the maturity level

390
00:22:07,955 --> 00:22:09,225
with their applications.

391
00:22:09,235 --> 00:22:11,125
And this is customizable as well.

392
00:22:11,815 --> 00:22:12,875
So with that.

393
00:22:13,120 --> 00:22:14,250
this is the tool, right?

394
00:22:14,250 --> 00:22:18,840
This is, Red Hat Developer Hub, but also
I want to, take a step back and tell

395
00:22:18,850 --> 00:22:20,630
you again about the software template.

396
00:22:20,680 --> 00:22:24,820
So we said that software templates
are this powerful tool that allow us

397
00:22:24,890 --> 00:22:29,885
to really standardize how we create
any components from applications,

398
00:22:29,885 --> 00:22:32,180
AIs, and even business machines.

399
00:22:32,560 --> 00:22:38,170
So I can create one repository And I can
connect that with the developer hub and

400
00:22:38,170 --> 00:22:42,800
that will allows me to see it here and
it will bring to the developer really a

401
00:22:42,800 --> 00:22:45,560
great experience, with just a few clicks.

402
00:22:45,580 --> 00:22:47,280
I can create 1 option.

403
00:22:47,280 --> 00:22:52,510
And what will happen is that option
will be created in my case in, I'm using

404
00:22:52,540 --> 00:22:54,840
open shift, the application platform.

405
00:22:56,625 --> 00:22:59,525
Can, do you want to see
what I have to show you?

406
00:22:59,665 --> 00:22:59,865
Yes.

407
00:23:00,645 --> 00:23:00,835
Okay.

408
00:23:00,835 --> 00:23:01,885
I would love to see it.

409
00:23:01,895 --> 00:23:02,335
Yeah.

410
00:23:03,045 --> 00:23:03,475
Yeah.

411
00:23:03,485 --> 00:23:03,855
Great.

412
00:23:04,025 --> 00:23:07,095
So right now, what I have is here
on the different, I have different

413
00:23:07,095 --> 00:23:08,965
templates that I could use.

414
00:23:09,015 --> 00:23:11,575
I have a Spring Boot
application, a frontend.

415
00:23:12,065 --> 00:23:16,645
A Java gateway, but also I do have,
I have an AI application, but I

416
00:23:16,735 --> 00:23:18,435
also have these virtual machines.

417
00:23:18,865 --> 00:23:21,585
So this is a great solution.

418
00:23:21,615 --> 00:23:24,985
Imagine that you are a developer,
but you also are working on these

419
00:23:25,095 --> 00:23:26,715
applications, legacy applications.

420
00:23:26,765 --> 00:23:29,415
And you need to access a virtual machine.

421
00:23:29,715 --> 00:23:33,075
So how you can do it in,
in a self service approach.

422
00:23:33,555 --> 00:23:35,915
I can just, select really
a built in machine.

423
00:23:35,915 --> 00:23:39,055
I have here a Microsoft
Windows, built in machine.

424
00:23:39,055 --> 00:23:43,125
I have a RHEL VM large,
and then I have the medium.

425
00:23:43,175 --> 00:23:45,595
So I will just choose
this one, the medium size.

426
00:23:46,715 --> 00:23:49,415
and see this is all customizable.

427
00:23:49,775 --> 00:23:54,735
So if you operations are watching
this, platform engineering and you are

428
00:23:54,735 --> 00:24:00,285
wondering, like, how much power I can
give when I, I give this service approach

429
00:24:00,365 --> 00:24:02,525
to developers to build those machines.

430
00:24:02,805 --> 00:24:03,665
It's up to you.

431
00:24:04,015 --> 00:24:07,195
You can define how much
a developer can change.

432
00:24:07,425 --> 00:24:10,345
So in this case, I am setting
up, okay, what is the GitHub

433
00:24:10,345 --> 00:24:12,565
repository that I am doing?

434
00:24:12,575 --> 00:24:14,725
What is the organization from that?

435
00:24:15,005 --> 00:24:17,025
What is the cluster that I am in?

436
00:24:17,525 --> 00:24:20,925
And then I am, setting up my user.

437
00:24:20,955 --> 00:24:23,205
The namespace is given by default.

438
00:24:23,645 --> 00:24:29,340
And then I, the only thing I can really
do here is just, change my, the name,

439
00:24:29,340 --> 00:24:31,290
decide the name of my built in machine.

440
00:24:31,330 --> 00:24:34,010
So I am not deciding the storage.

441
00:24:34,040 --> 00:24:36,320
I am not deciding the size.

442
00:24:36,770 --> 00:24:38,480
I am not deciding anything.

443
00:24:38,950 --> 00:24:40,350
everything is given to me.

444
00:24:40,400 --> 00:24:44,550
So as a developer, I just want to, I
don't know, test, and then I want to

445
00:24:44,550 --> 00:24:46,630
create this, and then I will create it.

446
00:24:47,370 --> 00:24:51,890
Right now, what it's doing is really
building that virtual machine.

447
00:24:52,220 --> 00:24:54,190
what is happening behind the scenes?

448
00:24:54,660 --> 00:24:56,320
we'll show you in a second.

449
00:24:56,440 --> 00:24:57,220
I can build this.

450
00:24:57,250 --> 00:24:58,850
It may take a second to load.

451
00:24:59,190 --> 00:25:01,640
But I am using OpenShift virtualization.

452
00:25:01,680 --> 00:25:04,520
I have it already installed
in my OpenShift cluster.

453
00:25:04,520 --> 00:25:07,840
I already have everything I need
from the infrastructure perspective.

454
00:25:08,330 --> 00:25:09,715
But what I can do, I can build.

455
00:25:10,555 --> 00:25:15,875
Is when we go to, this 1, I have
everything from here that I can

456
00:25:15,875 --> 00:25:17,375
explore from the virtual machine.

457
00:25:17,455 --> 00:25:20,295
I will have accessibility
to the topology view.

458
00:25:20,295 --> 00:25:23,705
So I can explore the virtual
machine, but also I can add.

459
00:25:23,735 --> 00:25:25,495
This is all customizable as well.

460
00:25:25,495 --> 00:25:29,225
I can add a link to the virtual
machine itself within the cluster.

461
00:25:29,455 --> 00:25:32,335
So I can see all the details
from the virtual machine.

462
00:25:32,625 --> 00:25:33,175
I can also.

463
00:25:34,015 --> 00:25:37,955
Click here and I can access the VNC
console from the virtual machine

464
00:25:37,955 --> 00:25:39,885
and this is all customizable.

465
00:25:39,955 --> 00:25:42,005
So I can give as much access as I want.

466
00:25:42,525 --> 00:25:48,375
So this is really a powerful tool
that allows me just to with 1

467
00:25:48,395 --> 00:25:50,075
click to build a virtual machine.

468
00:25:50,875 --> 00:25:53,425
it's amazing, the power of Red
Hat Developer Hub, it's not

469
00:25:53,435 --> 00:25:55,055
only for building applications.

470
00:25:55,055 --> 00:25:57,845
I want to show you, I have
another application here created.

471
00:25:57,845 --> 00:26:00,565
So this is just an application
that is just built.

472
00:26:01,555 --> 00:26:03,225
With a pipeline, right?

473
00:26:03,275 --> 00:26:05,195
So you can do applications.

474
00:26:05,195 --> 00:26:09,845
You can do provision built on machines,
but also you can build, applications.

475
00:26:09,925 --> 00:26:12,885
I know you want to show
us something about that.

476
00:26:13,465 --> 00:26:14,865
Yeah, thanks so much Valentina.

477
00:26:14,895 --> 00:26:19,447
So speaking of that, it's not just
applications or virtual machines.

478
00:26:19,447 --> 00:26:21,704
It's also in the age of AI.

479
00:26:22,075 --> 00:26:26,725
different AI embedded applications
or projects that we want to, to

480
00:26:26,775 --> 00:26:29,935
essentially scaffold out and start
working from, with all the best

481
00:26:29,935 --> 00:26:31,395
practices of our organization.

482
00:26:31,395 --> 00:26:34,605
So I want to show you this reference
architecture, of what you're going to see

483
00:26:34,605 --> 00:26:36,555
here in the demo for in just a second.

484
00:26:36,985 --> 00:26:39,825
Essentially, we've got data
scientists here on the top that have

485
00:26:39,825 --> 00:26:41,075
been working at Jupyter notebooks.

486
00:26:41,685 --> 00:26:43,135
They've done some model fine tuning.

487
00:26:43,135 --> 00:26:44,125
They've tested their model.

488
00:26:44,480 --> 00:26:48,250
And the model is being served on
our Kubernetes cluster with kserv.

489
00:26:48,380 --> 00:26:53,150
so we can monitor that entire MLOps
process with Kubernetes as well.

490
00:26:53,150 --> 00:26:56,550
But when it actually comes to the
applications that are being developed,

491
00:26:56,840 --> 00:27:02,230
that are inferencing this model that's
being served, I think the developer hub,

492
00:27:02,430 --> 00:27:06,960
portal is a great way to scaffold that
out so that I, as a developer, can focus

493
00:27:06,960 --> 00:27:09,840
on the code, and then the applications.

494
00:27:10,335 --> 00:27:16,105
deployment, the pipelines, the GitOps
can all be handled by the backstage

495
00:27:16,105 --> 00:27:18,435
and developer hub portal itself.

496
00:27:18,435 --> 00:27:22,045
So let's go ahead and head over there
and, and check that out as well.

497
00:27:23,535 --> 00:27:28,775
So I'm here at my team's different
Red Hat developer hub instance

498
00:27:28,885 --> 00:27:33,915
and Valentina kind of showed you
a little bit through the platform.

499
00:27:33,965 --> 00:27:37,925
I've got a little bit of a
different environment here.

500
00:27:37,925 --> 00:27:41,715
We've got a lot of different services
that have been stood up by all of the

501
00:27:41,715 --> 00:27:43,565
different members of our organization.

502
00:27:44,075 --> 00:27:51,285
so I can check those out and see
GitHub depend upon and all of these

503
00:27:51,305 --> 00:27:53,155
plugins that we've talked about before.

504
00:27:53,205 --> 00:27:56,885
I've got a couple more installed here
that I'll walk you through on, but

505
00:27:56,895 --> 00:28:01,940
the kind of, golden path template
that I'm going to instantiate is

506
00:28:01,960 --> 00:28:07,060
actually a Python application that's
going to be, essentially inferencing

507
00:28:07,070 --> 00:28:09,510
a model that we have on the cluster.

508
00:28:09,660 --> 00:28:12,110
And I'll show you how this works
in the, in the background is

509
00:28:12,110 --> 00:28:13,850
that we're using a template.

510
00:28:13,850 --> 00:28:18,020
yaml to essentially set up that template
that Valentina walked you through.

511
00:28:18,240 --> 00:28:20,500
We can preset different parameters.

512
00:28:20,960 --> 00:28:23,470
we can show all of the different
steps that will be instantiated,

513
00:28:24,220 --> 00:28:28,070
such as generating the source
code repository from a skeleton.

514
00:28:28,710 --> 00:28:32,930
Publishing that they're, generating,
deployment resources and artifacts

515
00:28:32,980 --> 00:28:37,940
for, for GitOps and publishing that,
and also using pipelines as well.

516
00:28:37,940 --> 00:28:42,000
So all of this is customizable
and walk through this specific

517
00:28:42,000 --> 00:28:43,260
template that we have here.

518
00:28:43,590 --> 00:28:47,350
What I'll show you is one that we've
already set up so that the pipelines

519
00:28:47,350 --> 00:28:49,120
have ran and this has been deployed.

520
00:28:49,785 --> 00:28:51,385
to the cluster itself.

521
00:28:51,445 --> 00:28:57,095
So here I can see a view into
my Kubernetes cluster, view the

522
00:28:57,095 --> 00:28:59,125
different Kubernetes resources here.

523
00:28:59,165 --> 00:29:03,175
So it looks like that our
deployment here is running with the

524
00:29:03,175 --> 00:29:06,975
application that has been included
with the GoldenPath template.

525
00:29:07,025 --> 00:29:08,275
So it looks okay to me.

526
00:29:08,945 --> 00:29:12,805
We can view the different pipelines that
have ran or succeeded when I made changes.

527
00:29:13,245 --> 00:29:17,395
The API, so it looks like I'm consuming
this photo generator API and we can

528
00:29:17,445 --> 00:29:21,685
view the relationship graphing, which
is pretty cool or the swagger UI.

529
00:29:21,685 --> 00:29:25,445
And so it's just so customizable
so that I don't have to worry

530
00:29:25,575 --> 00:29:27,405
about things as a developer.

531
00:29:27,405 --> 00:29:32,885
I get the abstraction, which helps me
to focus on the actual code itself.

532
00:29:32,915 --> 00:29:35,905
So let's go ahead and see that in action.

533
00:29:36,355 --> 00:29:40,175
This application is, as I said before,
a Python flask application, that's

534
00:29:40,225 --> 00:29:44,815
going to make calls to A model that we
have, on the Kubernetes, environment,

535
00:29:44,825 --> 00:29:49,795
or it could be a remote one late chat
GPT or LLAMA, and for this, I will,

536
00:29:50,035 --> 00:29:56,845
generate photos of Teddy on the beach,
and we'll go ahead and, run this.

537
00:29:57,530 --> 00:30:01,570
Give it a little bit of time and
we'll have a couple of different

538
00:30:01,570 --> 00:30:04,130
photos of Teddy here on the beach.

539
00:30:06,650 --> 00:30:07,290
Love it.

540
00:30:08,190 --> 00:30:09,070
That was amazing.

541
00:30:09,070 --> 00:30:10,060
I really love it.

542
00:30:10,080 --> 00:30:14,570
The power of really internal
developer portals and with Red

543
00:30:14,580 --> 00:30:16,670
Hat developer hub is incredible.

544
00:30:16,850 --> 00:30:18,640
But also what about security, right?

545
00:30:18,640 --> 00:30:21,650
We need to, this concept
of shift left, right?

546
00:30:21,910 --> 00:30:23,430
So try to bring security.

547
00:30:23,945 --> 00:30:27,675
Sooner as possible, really
right into the developer.

548
00:30:27,735 --> 00:30:32,115
So the developer can make
changes really quickly and avoid

549
00:30:32,275 --> 00:30:33,955
finding issues into production.

550
00:30:34,365 --> 00:30:37,575
but we do have many open source
brushes that you can take advantage

551
00:30:37,575 --> 00:30:40,055
of to really, manage like key clock.

552
00:30:40,095 --> 00:30:42,415
You can manage the identity access.

553
00:30:42,455 --> 00:30:43,855
So before even access.

554
00:30:44,260 --> 00:30:45,750
Developer have a backstage.

555
00:30:46,100 --> 00:30:50,420
You are looking into those
person really have access or not.

556
00:30:50,770 --> 00:30:54,850
You also can look into the 6th store
to really secure and sign and verify

557
00:30:55,100 --> 00:30:56,760
all the different software artifacts.

558
00:30:57,040 --> 00:31:01,460
With KubeLinter, you can have
static analysis that runs within

559
00:31:01,470 --> 00:31:03,090
the Kubernetes YAML files.

560
00:31:03,620 --> 00:31:08,550
What really allows you to aggregate
all that software security made a

561
00:31:08,550 --> 00:31:13,030
data and to allows you to really
have visibility on what's going on.

562
00:31:13,260 --> 00:31:16,790
We take the chains and conflicts,
of course, is part of the building

563
00:31:16,790 --> 00:31:18,520
process, making it secure.

564
00:31:18,800 --> 00:31:24,240
and with that, you can integrate with
open policy agent as well to include many

565
00:31:24,240 --> 00:31:29,390
policies as you require to ensure that the
policies are that when you are building.

566
00:31:29,640 --> 00:31:33,790
All that, container image application,
and you will be running it after that

567
00:31:34,170 --> 00:31:37,860
clear, of course, allows you to have
the stability as well into the container

568
00:31:37,890 --> 00:31:43,050
image status, stack rocks helps you with,
build and deploy front end container and

569
00:31:43,050 --> 00:31:47,800
doing risk analysis and vulnerability
scanning that are critical before running

570
00:31:47,810 --> 00:31:50,320
that container image in any environment.

571
00:31:50,610 --> 00:31:52,850
project way, of course, allows you to.

572
00:31:52,920 --> 00:31:55,670
Protect the data and
also provides the image.

573
00:31:56,090 --> 00:31:57,080
Vulnerability is scanning.

574
00:31:57,470 --> 00:32:03,690
Argo CD monitors that actual state
versus the desired cell configuration

575
00:32:03,700 --> 00:32:07,400
that if in case there are any
changes with Falco, it's really

576
00:32:07,510 --> 00:32:09,820
streaming that detection at run time.

577
00:32:10,030 --> 00:32:14,950
here we have a really compelling different
open source products, projects that you

578
00:32:14,950 --> 00:32:17,470
can take advantage of in order to secure.

579
00:32:17,725 --> 00:32:21,545
Your applications with the next slide.

580
00:32:21,965 --> 00:32:25,835
What we will see is what are the best
practices of really shifting left and

581
00:32:25,835 --> 00:32:29,945
security as I mentioned, bringing that
security as early as possible fund your

582
00:32:29,945 --> 00:32:34,445
personas fund your champions status small
with tech talks evolve it into software

583
00:32:34,445 --> 00:32:39,004
templates and keep one portal consistency
across your organization is critical.

584
00:32:39,285 --> 00:32:41,655
And then next, thank you
so much for listening.

585
00:32:42,605 --> 00:32:43,535
Please connect with us.

586
00:32:44,805 --> 00:32:48,125
Yes, and we want to point
you to the slides as well.

587
00:32:48,165 --> 00:32:49,355
So if you follow that link.

588
00:32:49,750 --> 00:32:53,980
You can learn about the slides and also
solution patterns of already built out,

589
00:32:54,290 --> 00:32:57,880
essentially reference architectures
like what we've just showed today with

590
00:32:57,880 --> 00:33:00,430
the virtualization and also the AI.

591
00:33:00,450 --> 00:33:03,340
And if you'd like to connect with us
on LinkedIn, please feel free to do

592
00:33:03,340 --> 00:33:05,480
the Red Hat booth is the virtual booth.

593
00:33:05,550 --> 00:33:06,470
It's the website.

594
00:33:06,490 --> 00:33:10,480
So if you have any questions, we
also want to point you to developers.

595
00:33:10,500 --> 00:33:11,150
redhat.

596
00:33:11,390 --> 00:33:15,180
com, where you can learn about
more projects and products that

597
00:33:15,180 --> 00:33:19,170
we work on, learn about platform
engineering, you can try out developer

598
00:33:19,170 --> 00:33:22,230
hub on your, machine for free.

599
00:33:22,530 --> 00:33:24,240
completely cloud hosted.

600
00:33:24,300 --> 00:33:28,290
You can just try it out, completely
free and get your hands on working

601
00:33:28,290 --> 00:33:30,279
with platform as a product.

602
00:33:30,280 --> 00:33:34,350
And, we want to thank you so much
for coming to our presentation,

603
00:33:34,370 --> 00:33:38,310
for sticking around, watching
the demos on behalf of myself.

604
00:33:39,650 --> 00:33:44,310
And, Valentina, we'd like to say thanks
so much and enjoy the rest of your day.

605
00:33:44,700 --> 00:33:45,170
Bye bye.

606
00:33:45,910 --> 00:33:46,370
Thank you.

607
00:33:46,390 --> 00:33:46,550
Bye bye.

