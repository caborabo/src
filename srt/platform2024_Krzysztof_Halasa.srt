1
00:00:15,160 --> 00:00:19,310
Today, I will tell you how to save
more than 1, 000, 000 yearly on IT.

2
00:00:19,310 --> 00:00:24,240
1, 000, 000 is enough
to buy 20 Tesla Model 3.

3
00:00:24,880 --> 00:00:30,190
1, 000, 000 in cash, if you put
it 100 bills next to each other.

4
00:00:30,870 --> 00:00:36,800
The resulting line will stretch from
one and a half kilometer, or one mile,

5
00:00:36,850 --> 00:00:38,850
if you're from the United States.

6
00:00:39,529 --> 00:00:40,450
Oh my god!

7
00:00:42,430 --> 00:00:42,449
Wow!

8
00:00:43,339 --> 00:00:47,669
It's a lot of money, because I've
calculated it for a company which

9
00:00:47,680 --> 00:00:49,874
spends about five million dollars on IT.

10
00:00:50,185 --> 00:00:56,725
So we are talking about savings around 20
percent and this scales up the bigger the

11
00:00:56,725 --> 00:00:59,095
company, the bigger the saving will be.

12
00:01:00,895 --> 00:01:04,714
Okay, so let's begin by understanding
what platform engineering is all about.

13
00:01:05,325 --> 00:01:10,754
It's a relatively new IT field
that evolved from DevOps, aimed

14
00:01:10,935 --> 00:01:15,135
at boosting developer team
productivity, incorporating security,

15
00:01:15,135 --> 00:01:16,194
compliance, cost, and reliability.

16
00:01:16,195 --> 00:01:19,095
Runtime observability, and other elements.

17
00:01:19,524 --> 00:01:22,195
The idea is to abstract those elements.

18
00:01:22,345 --> 00:01:26,375
So the developers can, for example,
launch new working environment

19
00:01:26,384 --> 00:01:31,004
within seconds without worrying about
technology integration or application

20
00:01:31,014 --> 00:01:33,065
integration with observability tools.

21
00:01:34,064 --> 00:01:38,315
In simple words, if you treat your
developers as you normally treat your

22
00:01:38,315 --> 00:01:43,585
clients, and think about how to serve
those developers, how to simplify the

23
00:01:43,585 --> 00:01:48,390
process of building and maintaining
applications, So the developers and

24
00:01:48,420 --> 00:01:52,980
ops guys can do better their job,
which is delivering business value.

25
00:01:53,620 --> 00:01:55,690
You will become a platform engineer.

26
00:01:57,920 --> 00:02:02,010
Okay, so platform engineering
isn't merely about technology.

27
00:02:02,450 --> 00:02:05,030
It's fundamentally an
organizational change.

28
00:02:05,670 --> 00:02:10,220
It's about how various IT teams
collaborate with developer teams

29
00:02:10,250 --> 00:02:11,620
and business application teams.

30
00:02:12,430 --> 00:02:14,162
Why is it mainly an organizational change?

31
00:02:14,162 --> 00:02:18,782
because of need to establish a
platform in the organization.

32
00:02:20,122 --> 00:02:22,472
You need to meet several conditions.

33
00:02:22,782 --> 00:02:26,212
First of all, you need to have
clear responsibilities, which

34
00:02:26,212 --> 00:02:29,562
must be defined for the platform
team and for the other teams.

35
00:02:29,602 --> 00:02:31,292
This is an organizational stuff.

36
00:02:31,312 --> 00:02:35,583
Secondly, the platform team needs to have
the authority To define and implement

37
00:02:35,613 --> 00:02:41,913
those responsibilities across DevOps tool
set, ensuring that responsibilities are

38
00:02:41,943 --> 00:02:44,713
not duplicated across multiple teams.

39
00:02:45,193 --> 00:02:48,183
Those are purely organizational stuff.

40
00:02:48,303 --> 00:02:52,863
In terms of technology, you need to
organize the SecOps tools, you need to put

41
00:02:53,073 --> 00:02:59,043
orchestrators and you need to have fitting
DevOps tools into your platform services.

42
00:03:00,403 --> 00:03:03,833
So the service oriented
approach and product mindset

43
00:03:03,853 --> 00:03:05,213
in a platform team is crucial.

44
00:03:06,258 --> 00:03:09,568
Platforms should give a space for
developers to communicate their

45
00:03:09,568 --> 00:03:14,398
needs and the platform needs to
provide it in an organized way.

46
00:03:15,228 --> 00:03:20,138
This shift is also technological,
since it requires a structured approach

47
00:03:20,268 --> 00:03:25,108
to DevOps tools, to automation,
orchestration, and to avoid chaos and

48
00:03:25,218 --> 00:03:27,538
enforce those clear responsibilities.

49
00:03:28,073 --> 00:03:32,973
Within the rules, within the permission
rules, rule set in those tools, you can

50
00:03:32,983 --> 00:03:38,993
think about platforms as building a system
to build and maintain other systems.

51
00:03:39,383 --> 00:03:45,013
And to build such a system platform,
a platform team needs to have certain

52
00:03:45,033 --> 00:03:50,253
organizational and technological
power enhanced in your company.

53
00:03:51,188 --> 00:03:53,548
Okay, so how do you approach
platform engineering?

54
00:03:54,878 --> 00:03:58,128
It should be treated like any
other product development.

55
00:03:58,508 --> 00:04:02,498
You start by analyzing user
needs, in this case the developers

56
00:04:02,498 --> 00:04:06,938
are your users, and tailor the
platform to fit the organization

57
00:04:06,988 --> 00:04:08,898
rather than the other way around.

58
00:04:09,198 --> 00:04:11,888
You shouldn't tailor
organization to fit the platform.

59
00:04:12,448 --> 00:04:16,398
This includes planning the platform
architecture, defining services,

60
00:04:16,458 --> 00:04:21,738
Migration tools and deciding on
user interfaces for the platform.

61
00:04:21,958 --> 00:04:27,538
Like whatever a JIRA or internal developer
portal you will use for interacting

62
00:04:27,538 --> 00:04:29,768
with your developers as a platform team.

63
00:04:30,398 --> 00:04:35,848
Ultimately, the deployment phase is
involve changing team structure, setting

64
00:04:35,858 --> 00:04:41,178
business metrics to measure benefits and
defining service level agreements, SLAs.

65
00:04:42,098 --> 00:04:47,338
Maintenance then focuses on delivering
services to developers and ensuring

66
00:04:47,338 --> 00:04:52,148
the platform adds business value,
assessed through SLA and the feedback.

67
00:04:53,148 --> 00:04:59,338
In summary, while the technological
aspects are really essential, the analysis

68
00:04:59,338 --> 00:05:05,853
phase is crucial and it defines how the
platform team integrates and operates

69
00:05:05,873 --> 00:05:11,063
within the organization, ensuring that
platform effectiveness and alignment is

70
00:05:11,203 --> 00:05:12,933
with the business goal of the platform.

71
00:05:13,543 --> 00:05:17,733
Platform engineers, in simple words, are
not focusing on DevOps tools, but they

72
00:05:17,733 --> 00:05:19,273
are focusing on the developers needs.

73
00:05:20,143 --> 00:05:21,983
Okay, does it look complicated?

74
00:05:22,693 --> 00:05:26,403
Yeah, if you do it for the first time,
it is complicated, but don't worry.

75
00:05:26,878 --> 00:05:31,898
You can catch like four years experience
in this matter just within a few hours.

76
00:05:32,898 --> 00:05:38,458
I've spent four years building internal
developer platforms as a manager of

77
00:05:38,648 --> 00:05:42,738
several platforms and advisor to the
people who did it for the first time.

78
00:05:43,458 --> 00:05:48,338
Recently, I've released an online course
on platform engineering for managers.

79
00:05:48,708 --> 00:05:49,557
In this course.

80
00:05:50,008 --> 00:05:54,478
I provide you with end to end guidance
how to approach internal developer

81
00:05:54,498 --> 00:05:58,768
platform, starting with cognitive load
analysis through platform services and

82
00:05:58,768 --> 00:06:02,888
architecture design, ending up with
success measures, case studies, and

83
00:06:02,888 --> 00:06:08,108
selling points so you can convince
your organization that platform should

84
00:06:08,138 --> 00:06:09,878
be built and should be invested in.

85
00:06:10,808 --> 00:06:12,468
Okay, let's go back to the topic.

86
00:06:14,648 --> 00:06:20,938
so how will our IT work after
introduction of platform engineering

87
00:06:20,938 --> 00:06:22,408
principles and building your platform?

88
00:06:23,173 --> 00:06:27,093
We'll review it from two
perspectives, which we are addressing.

89
00:06:27,153 --> 00:06:31,263
First is organizational perspective
and organizational results,

90
00:06:31,923 --> 00:06:33,053
and the technology behind.

91
00:06:34,213 --> 00:06:40,603
So as organizational result, first,
and the most important one, Stream

92
00:06:40,603 --> 00:06:45,173
aligned teams can finally focus
fully on delivering business value.

93
00:06:45,663 --> 00:06:49,383
They do not wait for resources
necessary for SDLC process.

94
00:06:49,513 --> 00:06:51,783
They are provisioned with
the tools within a minute.

95
00:06:52,453 --> 00:06:56,363
They also don't need to configure
those tools on or understand

96
00:06:56,373 --> 00:06:57,743
how they work in details.

97
00:06:58,313 --> 00:07:02,383
They simply use those tools
without fighting at the high

98
00:07:02,483 --> 00:07:04,483
entry, high level entry barrier.

99
00:07:04,963 --> 00:07:08,663
are being forced to manage
those tools by themselves.

100
00:07:09,543 --> 00:07:13,893
We also know exactly who is responsible
for what in software delivery lifecycle.

101
00:07:13,973 --> 00:07:17,383
We have communication channels
planned, and we have defined services

102
00:07:17,813 --> 00:07:22,613
provisioned by platform team, addressing
the very cognitive load that the

103
00:07:22,613 --> 00:07:26,973
stream aligned team may have, both
organizational and technical ones.

104
00:07:27,853 --> 00:07:31,213
If it sounds too theoretical
right now, yeah, you're right.

105
00:07:31,493 --> 00:07:35,053
So time for an example how the
things may look like if you

106
00:07:35,093 --> 00:07:37,173
have a nicely done platform.

107
00:07:38,158 --> 00:07:41,188
so imagine we have a new stream
aligned team in a company.

108
00:07:41,708 --> 00:07:45,048
Our existing team wants to
deliver a new application.

109
00:07:45,898 --> 00:07:51,198
Having a platform, they can simply express
their need through a dedicated channel.

110
00:07:51,308 --> 00:07:53,558
Hey, we are going to build a new software.

111
00:07:53,988 --> 00:07:55,758
The software will be created in Java.

112
00:07:55,798 --> 00:07:59,128
There will be a data storage
needed and exposition to open

113
00:07:59,128 --> 00:08:00,568
network to our end users.

114
00:08:01,018 --> 00:08:04,708
We are going to integrate our app
with core banking system, regulatory

115
00:08:04,708 --> 00:08:09,918
system, So on, and we will be
handling like thousand transactions

116
00:08:09,978 --> 00:08:12,428
daily, mostly from Polish locations.

117
00:08:13,408 --> 00:08:15,008
This is what they say for the portal.

118
00:08:15,008 --> 00:08:19,228
And based on such requests for
a dedicated channel, it can be

119
00:08:19,228 --> 00:08:20,858
portal, it can be other way around.

120
00:08:23,178 --> 00:08:26,068
It's time for Platform Team to
provision the Stream Aligned

121
00:08:26,088 --> 00:08:30,388
team with all the resources and
capabilities to create, release,

122
00:08:30,418 --> 00:08:32,768
and maintain their new application.

123
00:08:33,568 --> 00:08:37,128
So in this matter, Platform Team
is responsible for to ensure

124
00:08:37,128 --> 00:08:40,958
that all the team members of the
StreamAlign team have access to the

125
00:08:40,958 --> 00:08:42,738
repository of their new application.

126
00:08:43,188 --> 00:08:46,178
In this repository, they will
find a demo service with the

127
00:08:46,178 --> 00:08:49,618
language they provided that they
are going to use building the app.

128
00:08:50,168 --> 00:08:55,508
This demo service has already to use CICD
pipelines, which are deploying this demo

129
00:08:55,508 --> 00:09:00,898
application into their dedicated space
or dedicated environments in Kubernetes.

130
00:09:00,908 --> 00:09:04,108
It can be namespace, it can be
dedicated clusters, sometimes

131
00:09:04,108 --> 00:09:05,638
it can be even virtual machine.

132
00:09:05,638 --> 00:09:10,278
music ends And this demo service
are already integrated with all the

133
00:09:10,278 --> 00:09:14,738
observability capabilities, logging,
monitoring, tracing, where the users

134
00:09:14,738 --> 00:09:19,568
can simply go in, log, and define their
own dashboards in a very simple way.

135
00:09:19,958 --> 00:09:21,568
Alerts, filters, things like that.

136
00:09:22,198 --> 00:09:25,438
This demo service is already
connected to the database.

137
00:09:25,468 --> 00:09:28,008
This demo service is
already exposing some API.

138
00:09:28,028 --> 00:09:31,478
This demo service is already
publishing and consuming some topics.

139
00:09:32,128 --> 00:09:38,018
And finally, the team members receive a
detailed instruction how to use all of

140
00:09:38,018 --> 00:09:42,268
those tools in order to build applications
starting from this demo service.

141
00:09:43,398 --> 00:09:47,448
What is crucial that all this
is done in a matter of minutes

142
00:09:48,238 --> 00:09:49,878
through platform orchestrators.

143
00:09:50,438 --> 00:09:54,488
Mature Platforms has all of this
automated and triggered, simply

144
00:09:54,658 --> 00:09:56,818
triggered by the request on the portal.

145
00:09:57,088 --> 00:09:59,638
So the platform engineers
are not even present.

146
00:10:00,148 --> 00:10:05,658
Like in person, in this, in the
service provisioning, having

147
00:10:05,688 --> 00:10:12,058
everything provisioned at once,
a StreamAligned team can focus

148
00:10:12,058 --> 00:10:13,648
fully on the application delivery.

149
00:10:13,728 --> 00:10:17,398
They can create the application
and publish it to end users

150
00:10:17,528 --> 00:10:18,858
from the very first day.

151
00:10:19,538 --> 00:10:23,188
They don't need to spend time
on configuring environment.

152
00:10:23,198 --> 00:10:26,668
They don't need to spend time
on specifying how network

153
00:10:26,678 --> 00:10:27,838
connections should look like.

154
00:10:27,878 --> 00:10:29,648
No, nothing like that happens.

155
00:10:30,808 --> 00:10:35,568
Because on those areas, developers
may not be experts and getting all

156
00:10:35,588 --> 00:10:40,888
the requirements and collect all
of this data and gather wrap all

157
00:10:40,888 --> 00:10:43,508
the tools is simply time consuming.

158
00:10:43,538 --> 00:10:44,638
So platform should do it.

159
00:10:45,328 --> 00:10:48,668
Okay, so a quick look on
technology perspective right now.

160
00:10:49,688 --> 00:10:54,048
First, at the bottom layer,
there is DevSecOps layer.

161
00:10:54,588 --> 00:11:00,188
We have, here we have an order, like no
duplicating technologies and capabilities.

162
00:11:01,083 --> 00:11:03,723
Covering each step of
software delivery lifecycle.

163
00:11:04,223 --> 00:11:07,083
This is what most of the
companies already have.

164
00:11:07,583 --> 00:11:09,373
Maybe not always organized.

165
00:11:09,433 --> 00:11:11,453
Not always non duplicating.

166
00:11:11,753 --> 00:11:12,983
Not always automated.

167
00:11:12,993 --> 00:11:14,723
But this is what you are going to

168
00:11:16,963 --> 00:11:18,993
find in most of the big companies.

169
00:11:19,383 --> 00:11:24,322
What platform engineering introduces
is orchestration and interface layer.

170
00:11:24,892 --> 00:11:28,562
In orchestration, you will find a
definition of platform services and

171
00:11:29,352 --> 00:11:34,852
scripts, which makes changes in each tool
on the bottom layer, on DevSecOps layer.

172
00:11:35,402 --> 00:11:38,372
to provide a managed
service to StreamAlign team.

173
00:11:38,892 --> 00:11:44,202
If you take the previous example, the
provisioning example, for those will be

174
00:11:44,202 --> 00:11:48,152
a script making changes in Kubernetes
namespaces, creating databases,

175
00:11:48,152 --> 00:11:53,682
creating indexes in observability,
creating a repository, moving the demo

176
00:11:53,682 --> 00:11:55,782
service to the repository, and so on.

177
00:11:56,302 --> 00:12:01,802
At the top level, we have an interface
layer, where you can find either a portal,

178
00:12:02,832 --> 00:12:08,252
It's a specified channel which developers
can state their needs in a structured

179
00:12:08,252 --> 00:12:11,302
way and expect a structured outcome.

180
00:12:11,822 --> 00:12:14,442
It does not always need to
be a backstage instance.

181
00:12:15,262 --> 00:12:16,822
It does not need to be a portal.

182
00:12:16,902 --> 00:12:20,912
Sometimes simple APIs or even
simple JIRA tickets are enough.

183
00:12:21,392 --> 00:12:24,572
However, it's better to use tools
which are dedicated to it because

184
00:12:24,572 --> 00:12:28,692
they have more capabilities once
the platform grows its maturity.

185
00:12:29,532 --> 00:12:34,152
And probably we are going to see
AI and chatbots here in this layer

186
00:12:34,492 --> 00:12:39,512
very soon from platform engineering,
community, I already know that things

187
00:12:39,512 --> 00:12:40,962
like that are already happening.

188
00:12:43,202 --> 00:12:44,672
Okay, but a million dollar?

189
00:12:44,722 --> 00:12:45,252
Really?

190
00:12:45,322 --> 00:12:45,682
Huh?

191
00:12:45,932 --> 00:12:50,542
20 percent of IT budget can be
saved using those principles?

192
00:12:51,132 --> 00:12:51,472
Yeah.

193
00:12:51,902 --> 00:12:52,782
Let me prove it.

194
00:12:54,482 --> 00:12:58,672
Okay, so imagine you have 10
application teams in your company.

195
00:12:58,673 --> 00:12:58,687
Okay.

196
00:12:59,127 --> 00:13:01,837
Each team has more or less six developers.

197
00:13:02,757 --> 00:13:06,987
Average salary of one
developer is like 50 an hour.

198
00:13:07,077 --> 00:13:11,767
Juniors are going to be paid
less, seniors, probably more,

199
00:13:12,507 --> 00:13:15,977
and each team is creating one
application release per month.

200
00:13:15,977 --> 00:13:21,187
So we have 12 application releases
every year and releasing this

201
00:13:21,187 --> 00:13:26,377
application takes one week of the
team involvement on the technical

202
00:13:26,377 --> 00:13:32,017
stuff, like creating environments,
connecting application to observability

203
00:13:32,017 --> 00:13:33,997
tools, securing the application.

204
00:13:34,332 --> 00:13:39,602
implementing, network integration with
other systems, testing if it works,

205
00:13:40,412 --> 00:13:46,372
running on the whole company to find
right people to create your database, to

206
00:13:46,372 --> 00:13:48,552
create your Kafka topic, things like that.

207
00:13:49,802 --> 00:13:53,782
More or less bootstrapping
all the SDLC tool set.

208
00:13:54,152 --> 00:13:58,062
For applications which are quite
a long time in the company,

209
00:13:58,072 --> 00:13:59,252
it will be less than one week.

210
00:13:59,472 --> 00:14:03,252
But for applications which are new,
Or the teams, which are new, it

211
00:14:03,252 --> 00:14:04,612
will be much more than one week.

212
00:14:04,612 --> 00:14:10,552
So blended together, it will be one week
and because of no platform services.

213
00:14:10,562 --> 00:14:16,682
So because the teams need to configure
technical things every time before the

214
00:14:16,682 --> 00:14:29,722
release, the overall cost, because of lack
of platform is 1, 440, 000 every year.

215
00:14:30,277 --> 00:14:35,737
In this case, it's 15, 20 percent of
overall budget in such a company on IT.

216
00:14:37,467 --> 00:14:38,617
Yeah, it's a lot of money.

217
00:14:38,617 --> 00:14:41,897
So the game is really worth to play.

218
00:14:44,227 --> 00:14:49,417
Okay, let me know how much your
platforms saved you time and money.

219
00:14:50,107 --> 00:14:56,477
And if your developers are happy
about your current DevSecOps

220
00:14:56,478 --> 00:14:59,467
toolset responsibilities and
things, if they are not bottleneck.

221
00:14:59,647 --> 00:15:03,737
And if they do, let me know
because maybe I will be able

222
00:15:03,737 --> 00:15:04,857
to help you with the platform.

223
00:15:05,257 --> 00:15:05,617
Bye.

