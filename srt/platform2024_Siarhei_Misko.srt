1
00:00:14,110 --> 00:00:17,119
Hi, my name is Roger Misko
and welcome to building

2
00:00:17,119 --> 00:00:19,590
observability in iOS applications.

3
00:00:20,450 --> 00:00:24,990
Today I will briefly tell you about
observability in mobile applications

4
00:00:25,070 --> 00:00:30,410
and then we'll tell you what you can
do in your iOS applications to make

5
00:00:30,419 --> 00:00:32,649
implementation of observability easier.

6
00:00:34,060 --> 00:00:38,740
I am a US team lead with more than 80
years of experience in development,

7
00:00:38,860 --> 00:00:40,600
especially iOS applications.

8
00:00:41,130 --> 00:00:46,490
I worked for different projects
from local to worldwide user bases.

9
00:00:47,049 --> 00:00:52,590
So I would say that observability is my
good friend now that helps me to improve

10
00:00:52,590 --> 00:00:54,640
quality of projects I'm working on.

11
00:00:56,500 --> 00:01:00,610
How do we ensure that our application
is stable and functioning properly?

12
00:01:01,085 --> 00:01:02,075
We test it.

13
00:01:02,755 --> 00:01:07,515
More often, this is done by the QA
team using various test cases, test

14
00:01:07,515 --> 00:01:09,835
environments, and specific devices.

15
00:01:11,045 --> 00:01:16,615
But such checks are inherently
synthetic, and don't always

16
00:01:16,615 --> 00:01:18,425
reflect the real world scenario.

17
00:01:18,890 --> 00:01:23,930
In reality, things are much more
complex, and observability can

18
00:01:24,050 --> 00:01:26,440
help organize real time testing.

19
00:01:27,580 --> 00:01:31,100
Observability is a term that
originated from the fields of

20
00:01:31,150 --> 00:01:33,160
engineering and system analysis.

21
00:01:33,860 --> 00:01:38,490
In the context of software development,
especially mobile applications,

22
00:01:38,770 --> 00:01:44,164
observability can be described as
the ability of a system to provide

23
00:01:44,164 --> 00:01:48,804
information about its general or
its internal state and operation.

24
00:01:49,464 --> 00:01:54,485
Simply put, it's a property of a
system like to stability or security.

25
00:01:56,140 --> 00:02:00,800
We need to design the system in
such a way that it benefits from

26
00:02:00,800 --> 00:02:06,410
observability, meaning the system
itself reports its state and provides

27
00:02:06,459 --> 00:02:08,639
details in case of incidents.

28
00:02:10,350 --> 00:02:14,570
It's important to understand
that traces, metrics, and logs by

29
00:02:14,580 --> 00:02:16,100
themselves are not observability.

30
00:02:16,100 --> 00:02:18,400
These are just examples.

31
00:02:18,680 --> 00:02:22,170
tools that can help achieve this property.

32
00:02:22,880 --> 00:02:27,370
True observability is built upon
aggregating all collected information

33
00:02:27,460 --> 00:02:33,310
in one place where it can be analyzed,
visualized through graphs and dashboards,

34
00:02:33,870 --> 00:02:39,449
and where alerts can be set up to trigger
when the number of incidents increases.

35
00:02:39,450 --> 00:02:46,310
Good observability allows a team not only
to quickly respond to emerging issues.

36
00:02:46,534 --> 00:02:48,185
but also to anticipate them.

37
00:02:48,905 --> 00:02:53,675
This means the system itself
hints at what is wrong and helps

38
00:02:53,725 --> 00:02:55,945
identify the cause immediately.

39
00:02:56,645 --> 00:03:00,355
Imagine not having to figure
out where exactly an error

40
00:03:00,374 --> 00:03:02,064
occurred and what caused it.

41
00:03:02,475 --> 00:03:05,144
The system directly
informs you about that.

42
00:03:06,394 --> 00:03:09,575
Observability is a key tool
for creating reliable and

43
00:03:09,575 --> 00:03:11,395
resilient mobile applications.

44
00:03:11,885 --> 00:03:15,804
It minimizes the time needed
to detect and fix issues.

45
00:03:16,180 --> 00:03:18,910
thereby improving the overall experience.

46
00:03:20,490 --> 00:03:23,840
You can learn about a problem
from users when they start

47
00:03:23,880 --> 00:03:29,070
complaining, but observability
helps solve two crucial aspects.

48
00:03:30,185 --> 00:03:34,525
First, you learn about the problem
before it becomes critical.

49
00:03:35,255 --> 00:03:40,414
And the second, you have complete
information and can immediately start

50
00:03:40,455 --> 00:03:45,424
resolving the issue without needing
to gather data from various sources.

51
00:03:46,234 --> 00:03:51,065
To summarize, with good observability
in your project, you don't just find

52
00:03:51,065 --> 00:03:55,594
out that Oh, a problem occurred,
but you immediately get all

53
00:03:55,594 --> 00:03:57,605
necessary information to solve it.

54
00:03:58,635 --> 00:04:03,784
The system fully reports its state
and causes of any issues, allowing

55
00:04:03,784 --> 00:04:05,974
you to take an action promptly.

56
00:04:06,765 --> 00:04:10,964
However, it is important to
remember that observability does not

57
00:04:11,014 --> 00:04:13,924
replace testing synthetic checks.

58
00:04:16,034 --> 00:04:16,885
I made a mistake.

59
00:04:17,885 --> 00:04:21,364
However, it is important to
remember that observability does

60
00:04:21,375 --> 00:04:23,085
not replace classic testing.

61
00:04:23,705 --> 00:04:25,815
Synthetic checks are still necessary.

62
00:04:28,510 --> 00:04:31,260
What observability can look
like in a mobile application?

63
00:04:32,030 --> 00:04:36,110
The topic of observability
is widely known among backend

64
00:04:36,110 --> 00:04:38,219
developers and DevOps engineers.

65
00:04:38,990 --> 00:04:43,160
However, in mobile development,
this topic is often overlooked.

66
00:04:43,950 --> 00:04:49,619
Even though many teams and projects have
already made steps towards observability,

67
00:04:49,620 --> 00:04:51,920
perhaps we without even realizing it.

68
00:04:53,190 --> 00:04:57,859
Let's imagine a hypothetical
project, an iOS application.

69
00:04:58,420 --> 00:05:04,339
The team that developed it didn't
integrate analytics, login,

70
00:05:04,339 --> 00:05:06,089
crashlytics, or other monitoring tools.

71
00:05:06,849 --> 00:05:09,669
So it's just a project
with a set of features.

72
00:05:10,629 --> 00:05:15,700
After releasing the new version, users
began to report that the app isn't

73
00:05:15,729 --> 00:05:22,060
working, or it crashes by itself, or when
I open the second screen, the app crashes.

74
00:05:24,345 --> 00:05:29,215
Indicates that something
went wrong, but don't provide

75
00:05:29,305 --> 00:05:32,875
clarity on what exactly and why.

76
00:05:34,044 --> 00:05:38,934
The team tried to reproduce the
problem but found nothing unusual.

77
00:05:39,225 --> 00:05:45,755
The app seemed to work fine in their
environment, and however user continued

78
00:05:45,785 --> 00:05:52,765
to complain, suggesting a possible crash,
but since the team couldn't reproduce it.

79
00:05:53,435 --> 00:05:58,685
They were left to work blindly, release
a new version, and hope this helps.

80
00:06:00,345 --> 00:06:05,940
As example, this situation could be Could
have been easily solved if the app had

81
00:06:05,940 --> 00:06:11,070
been set up with Crashlytics to catch
crashes and Send information about them.

82
00:06:12,010 --> 00:06:16,689
In the world of iOS development Apple
already provides such functionality

83
00:06:16,750 --> 00:06:22,580
out of the box, but with certain
limitations For greater flexibility,

84
00:06:22,660 --> 00:06:27,130
developers often turn to third party
services like Firebase Crashlytics.

85
00:06:28,050 --> 00:06:32,210
Today, collecting crash information has
become a standard practice that allows

86
00:06:32,330 --> 00:06:38,759
teams to learn about issues before users
start complaining in large numbers, while

87
00:06:38,839 --> 00:06:45,220
also providing data on the causes of
these issues, such as stack traces and

88
00:06:45,220 --> 00:06:46,870
technical information about the device.

89
00:06:48,130 --> 00:06:52,650
By working with Crashlytics,
teams are already taking that

90
00:06:52,670 --> 00:06:54,349
step toward observability.

91
00:06:55,779 --> 00:07:00,729
However, crashes are far from the
only problems that can lead to

92
00:07:00,729 --> 00:07:06,099
user complaints, or worse, cause
a drop in key metrics and revenue.

93
00:07:07,229 --> 00:07:12,179
The more complex a system becomes, the
more dependent parameters it includes,

94
00:07:12,299 --> 00:07:19,100
the more diverse the devices and OS
versions it supports, The less transparent

95
00:07:19,300 --> 00:07:24,530
it becomes in understanding how the
app behaves in real world conditions.

96
00:07:25,770 --> 00:07:30,600
For example, if a project uses feature
flags to manage the availability

97
00:07:30,650 --> 00:07:34,690
of features and the configuration
system doesn't validate changes,

98
00:07:35,420 --> 00:07:39,510
a product manager or business
analyst could accidentally make

99
00:07:39,510 --> 00:07:44,650
an error, such as miscast the data
format or skip an important field.

100
00:07:45,439 --> 00:07:49,559
This could result in users not
receiving certain functionalities.

101
00:07:49,895 --> 00:07:54,905
even though the server and
Crashlytics don't register any issues.

102
00:07:56,015 --> 00:08:01,445
Moreover, given the complexity of modern
systems, it's impossible to test and

103
00:08:01,445 --> 00:08:04,295
simulate every possible usage scenario.

104
00:08:05,094 --> 00:08:09,614
For example, you might release
several new features simultaneously.

105
00:08:10,154 --> 00:08:14,655
Everything works fine in the test
environment, so you release the update.

106
00:08:15,414 --> 00:08:19,974
However, on real devices, under
certain conditions, such as a

107
00:08:19,974 --> 00:08:25,744
specific phone model, iOS version,
or internal app settings, many

108
00:08:25,744 --> 00:08:28,454
users might experience issues.

109
00:08:29,205 --> 00:08:34,885
For instance, App may take a long
time to load, or critical flows

110
00:08:34,944 --> 00:08:37,405
like registration may start to fail.

111
00:08:37,905 --> 00:08:42,135
And you will see nothing on Crashlytics,
because there are no crashes.

112
00:08:43,554 --> 00:08:49,964
So just like the crashes, you need
to build metrics for other aspects of

113
00:08:49,964 --> 00:08:52,065
the app's performance and stability.

114
00:08:52,754 --> 00:08:56,385
To determine where to start
building metrics, I suggest

115
00:08:56,415 --> 00:08:58,795
focusing on three key aspects.

116
00:08:59,304 --> 00:09:01,944
So first is important user stories.

117
00:09:02,524 --> 00:09:09,385
Examples like registration, login, payment
processing, sending messages, generating

118
00:09:09,484 --> 00:09:12,244
resources, search results, and etc.

119
00:09:13,075 --> 00:09:18,525
It's important to consider not only
whether these flows are functioning,

120
00:09:18,994 --> 00:09:21,345
but also how well they're performing.

121
00:09:21,915 --> 00:09:26,915
For example, how quickly payments
are processed or messages are sent.

122
00:09:28,325 --> 00:09:34,540
Then, Paths, flows, or features
that depend heavily on frequently

123
00:09:34,550 --> 00:09:36,180
changing system parameters.

124
00:09:36,819 --> 00:09:41,869
It's crucial to account for dynamic
changes that can affect app behavior.

125
00:09:42,909 --> 00:09:47,829
And flows, features, stories
dependent on external systems.

126
00:09:48,400 --> 00:09:52,030
This could be a third party
APIs or services as well as

127
00:09:52,079 --> 00:09:56,690
internal systems developed by
another team within your company.

128
00:09:57,730 --> 00:10:02,310
It's not guaranteed that these
themes consider potential issues

129
00:10:02,409 --> 00:10:07,050
that might affect your specific app,
as opposed to the entire system.

130
00:10:08,234 --> 00:10:12,905
To achieve deeper data integration,
additional systems should be used to

131
00:10:12,915 --> 00:10:18,585
build charts based on the data and
provide breakdowns by key parameters.

132
00:10:20,165 --> 00:10:24,025
This part of the talk provides a
general idea of what observability

133
00:10:24,684 --> 00:10:26,795
can look like in a mobile application.

134
00:10:27,414 --> 00:10:31,675
In the next sections, we'll
explore architectural solutions

135
00:10:31,734 --> 00:10:35,654
on the iOS side that can help you
implement observability in your app.

136
00:10:36,855 --> 00:10:41,944
I recommend exploring articles, talks,
and other materials, not limiting

137
00:10:41,944 --> 00:10:43,534
yourself to mobile development.

138
00:10:44,105 --> 00:10:48,645
The experiences and approaches
of DevOps and backend developers

139
00:10:48,744 --> 00:10:50,754
can be incredibly valuable.

140
00:10:52,145 --> 00:10:56,534
Achieving good observability means
not only knowing that a problem

141
00:10:56,584 --> 00:10:58,144
has occurred in your system.

142
00:10:58,585 --> 00:11:02,775
But also providing details that
explain what exactly went wrong.

143
00:11:03,554 --> 00:11:07,334
One way to gather such
information is by using logs.

144
00:11:08,385 --> 00:11:14,494
While metrics provide a general overview
of the system state, logs collect detailed

145
00:11:14,544 --> 00:11:19,774
information about what happened on the
user device, what actions they took,

146
00:11:20,054 --> 00:11:22,635
and what might have caused the problem.

147
00:11:23,415 --> 00:11:27,625
It's crucial to remember that Any
tool for achieving observability

148
00:11:27,704 --> 00:11:29,655
adds overhead to your application.

149
00:11:30,145 --> 00:11:33,744
And logs are likely one
of the heaviest tools.

150
00:11:35,254 --> 00:11:37,875
So let's see what strategies
for collecting and

151
00:11:37,875 --> 00:11:39,435
delivering logs we can have.

152
00:11:40,254 --> 00:11:43,694
For the log delivery, we can
have live or online mode.

153
00:11:44,354 --> 00:11:46,374
Logs are sent immediately.

154
00:11:46,704 --> 00:11:50,504
right after they are recorded
in the application in real time.

155
00:11:51,315 --> 00:11:55,474
This is often used in the backend
development, but may not be the

156
00:11:55,484 --> 00:11:57,694
best option for mobile applications.

157
00:11:58,225 --> 00:12:03,535
as you'll receive logs even when
everything is working fine for the user.

158
00:12:04,335 --> 00:12:08,285
This creates a large amount of
unnecessary data which can be

159
00:12:08,285 --> 00:12:10,125
difficult to process and store.

160
00:12:11,085 --> 00:12:15,915
However, it's possible to configure
the system so that logs are only sent

161
00:12:15,925 --> 00:12:21,385
when a specific flag is activated in
the app or when a trigger event occurs.

162
00:12:22,504 --> 00:12:26,535
It's essential to test this logic
to avoid errors that could lead

163
00:12:26,785 --> 00:12:31,835
to either losing all logs or being
overwhelmed with unnecessary data.

164
00:12:32,704 --> 00:12:35,415
Next, we can have on demand delivering.

165
00:12:35,964 --> 00:12:41,254
And there are two sub approaches,
automatic, through a login flag, which

166
00:12:41,284 --> 00:12:43,839
the user receives upon entering the app.

167
00:12:44,139 --> 00:12:49,089
indicating that logs should be sent
or via push notifications that prompts

168
00:12:49,139 --> 00:12:52,399
the app to send logs and also manual.

169
00:12:52,890 --> 00:12:56,380
The user can select an option
in the menu to send logs upon

170
00:12:56,439 --> 00:12:59,405
your request and Triggered.

171
00:13:00,035 --> 00:13:04,585
Logs are automatically sent when a
specific event occurs in the application,

172
00:13:04,734 --> 00:13:07,484
such as a crash or a critical error.

173
00:13:08,175 --> 00:13:09,585
And the log collection.

174
00:13:10,275 --> 00:13:12,054
We can have continuous collection.

175
00:13:13,335 --> 00:13:17,944
There logs are recorded continuously
and it's important to consider.

176
00:13:18,685 --> 00:13:24,325
So that you should avoid recording too
many logs at once, to prevent overloading

177
00:13:24,335 --> 00:13:26,915
the disk with read write operations.

178
00:13:27,635 --> 00:13:32,174
But if you still want to write a
lot of logs per second to a file,

179
00:13:32,344 --> 00:13:36,554
for example, for very detailed
debug or trace, you should

180
00:13:36,554 --> 00:13:39,225
implement buffering writing to file.

181
00:13:40,055 --> 00:13:44,775
So instead of opening, writing, closing
files for every log line, it's better

182
00:13:44,775 --> 00:13:47,345
to write accumulated buffer of lines.

183
00:13:47,839 --> 00:13:51,240
In this case, performance
will significantly speed up.

184
00:13:52,660 --> 00:13:55,980
Also, you should implement
log file rotation to prevent

185
00:13:55,990 --> 00:13:57,940
them from becoming too large.

186
00:13:58,379 --> 00:14:03,810
For example, you can set a file size
limit of 20 megabytes, after which old

187
00:14:03,819 --> 00:14:07,079
data is either cleared or overwritten.

188
00:14:08,149 --> 00:14:11,139
And you should carefully
manage login levels.

189
00:14:11,800 --> 00:14:16,490
Debug logs, which are useful for
testing and beta versions, should

190
00:14:16,500 --> 00:14:20,419
not be included in continuous
logging for release versions.

191
00:14:22,020 --> 00:14:24,119
Also on demand, collecting.

192
00:14:24,579 --> 00:14:28,149
Log collection can be activated
manually by the user through

193
00:14:28,169 --> 00:14:32,489
settings or automatically via
logging flag or push notification.

194
00:14:33,519 --> 00:14:34,629
And trigger it.

195
00:14:35,419 --> 00:14:40,519
Just like with the delivery, a trigger
event can start the log recording process.

196
00:14:41,560 --> 00:14:44,849
The last two approaches are
quite convenient, especially

197
00:14:44,849 --> 00:14:49,000
when dealing with specific issues
encountered by individual users.

198
00:14:49,550 --> 00:14:51,920
However, these methods have drawbacks.

199
00:14:52,619 --> 00:14:56,480
For example, you might miss the
initial problem because the logs

200
00:14:56,480 --> 00:15:02,010
will only start recording after you
have identified the issue and ask

201
00:15:02,060 --> 00:15:04,050
the user to enable log collection.

202
00:15:04,520 --> 00:15:07,329
In such cases, the root cause
of the problem may be lost.

203
00:15:08,964 --> 00:15:12,555
But, you can implement a
combination of logging approaches.

204
00:15:12,995 --> 00:15:17,375
For example, logging at error,
warning, and critical levels can

205
00:15:17,435 --> 00:15:22,395
happen continuously, while more
detailed logs, like info and notice,

206
00:15:22,484 --> 00:15:24,815
can be enabled when a trigger occurs.

207
00:15:25,304 --> 00:15:28,294
upon user request or via a login flag.

208
00:15:29,104 --> 00:15:32,744
This approach helps maintain a
balance between having detailed

209
00:15:32,744 --> 00:15:36,984
information and optimizing the cost
of storing and processing logs.

210
00:15:38,645 --> 00:15:41,284
But how you can write logs in iOS devices?

211
00:15:41,710 --> 00:15:43,920
First, it's Apple's OS lock.

212
00:15:44,550 --> 00:15:49,260
Apple offers OS lock, a powerful
tool that includes many optimizations

213
00:15:49,270 --> 00:15:53,240
for fast performance with deep
integration into the operating system

214
00:15:53,530 --> 00:15:55,879
and support for user privacy tools.

215
00:15:56,889 --> 00:16:00,629
However, for our purposes,
it may be inconvenient.

216
00:16:01,089 --> 00:16:03,659
These locks can be difficult to access.

217
00:16:04,204 --> 00:16:05,994
There are three ways for iOS.

218
00:16:06,825 --> 00:16:10,254
First, connect the phone to a
computer and view the console.

219
00:16:11,045 --> 00:16:15,454
Second, collect a sys diagnose
of the entire device, which takes

220
00:16:15,545 --> 00:16:20,844
up to 15 minutes and results in
more than 200 megabytes archive.

221
00:16:22,444 --> 00:16:23,324
And the last.

222
00:16:24,819 --> 00:16:26,200
problematically from the app.

223
00:16:26,800 --> 00:16:28,660
But there is a significant drawback.

224
00:16:29,259 --> 00:16:31,959
You can only get logs
from the current process.

225
00:16:32,119 --> 00:16:38,209
This means you can't retrieve logs
from extensions or from previous

226
00:16:38,209 --> 00:16:39,670
launches of the application.

227
00:16:42,140 --> 00:16:44,390
Next, we can write logs to a text file.

228
00:16:45,560 --> 00:16:50,540
You can start by using an existing
framework, such as Swifty Beaver,

229
00:16:51,030 --> 00:16:53,300
which writes logs to a file.

230
00:16:53,540 --> 00:16:58,979
Later, when you become more familiar with
logging and understand your needs, you

231
00:16:58,979 --> 00:17:02,040
can modify it, since it's open source.

232
00:17:02,879 --> 00:17:07,829
Or implement your own solution, as it's
quite simple, it's just writing to a file.

233
00:17:08,980 --> 00:17:13,250
And also you can write logs to
Firebase Crash Lytics by default.

234
00:17:13,250 --> 00:17:18,449
Firebase Crash Lytics is used to catch
crashes and send stack traces and

235
00:17:18,449 --> 00:17:23,449
device information, but you can also
log additional data, such as information

236
00:17:23,449 --> 00:17:25,579
about subscriptions or user rules.

237
00:17:26,089 --> 00:17:30,649
This allows you to more accurately
identify the context in which the

238
00:17:30,649 --> 00:17:34,310
error occurred and potentially
find solution more quickly.

239
00:17:35,235 --> 00:17:39,504
You can also write logs to Firebase
Crashlytics, which will be sent

240
00:17:39,564 --> 00:17:41,324
along with the crash report.

241
00:17:42,764 --> 00:17:47,354
You can also send a non fatal event
that includes all this information.

242
00:17:47,915 --> 00:17:52,214
However, since Firebase is a free
service, it has limitations, such

243
00:17:52,214 --> 00:17:57,794
as data sampling, not all events
are saved, and a limited number of

244
00:17:57,804 --> 00:18:00,374
logs lines before an error occurs.

245
00:18:01,334 --> 00:18:07,639
Additionally, you cannot run SQL queries
to retrieve the specific data you need.

246
00:18:08,429 --> 00:18:12,439
Therefore, it's not advisable to
rely on free services for too long.

247
00:18:12,789 --> 00:18:18,429
You should consider more specialized
solutions or build your own.

248
00:18:19,129 --> 00:18:23,259
However, Firebase Crashlytics
can be sufficient for a start.

249
00:18:24,504 --> 00:18:28,915
If you choose the second method,
writing logs to a text file, you

250
00:18:28,915 --> 00:18:30,534
should consider the following tips.

251
00:18:31,324 --> 00:18:35,465
Define a logging policy and use
logging levels appropriately.

252
00:18:36,034 --> 00:18:40,395
It's important to consider how these
levels will be used and to monitor the

253
00:18:40,445 --> 00:18:43,254
amount of logging during code review.

254
00:18:43,844 --> 00:18:47,834
This helps prevent situations where
too many logs are recorded at once.

255
00:18:48,569 --> 00:18:51,269
Which can negatively impact
the system and the disk.

256
00:18:52,070 --> 00:18:56,489
This task is as crucial as
controlling the number of network

257
00:18:56,489 --> 00:19:01,099
requests or database queries as the
application functionality grows.

258
00:19:02,259 --> 00:19:05,820
To prevent locks from being included
in release builds and causing

259
00:19:05,899 --> 00:19:10,070
unnecessary overhead, you can use
preprocessor directives like ifdef.

260
00:19:11,509 --> 00:19:15,899
Instead of adding ifdef to every
login statement, you can optimize

261
00:19:15,899 --> 00:19:17,360
the login function itself.

262
00:19:17,959 --> 00:19:22,339
If the ifdef directive is enabled,
the login code is executed.

263
00:19:22,649 --> 00:19:24,969
If not, the function remains empty.

264
00:19:25,499 --> 00:19:27,919
For example, this can be
done for the debug level.

265
00:19:28,499 --> 00:19:33,189
This allows Swift compiler to exclude
unnecessary calls in the release

266
00:19:33,219 --> 00:19:35,559
build, ensuring high performance.

267
00:19:37,580 --> 00:19:41,240
In your login functions, specify
the argument that passes the

268
00:19:41,250 --> 00:19:43,210
log text as auto closure.

269
00:19:43,830 --> 00:19:49,280
This allows you to delay the evaluation of
the argument until it's actually needed.

270
00:19:50,290 --> 00:19:53,470
If debugging is not enabled,
the evaluation of debug

271
00:19:53,500 --> 00:19:54,930
descriptions will not occur.

272
00:19:56,160 --> 00:19:57,320
reducing the system load.

273
00:19:59,379 --> 00:20:04,050
While logs indeed provide a lot
of useful information, they can be

274
00:20:04,070 --> 00:20:06,539
cumbersome due to their big volume.

275
00:20:07,169 --> 00:20:10,560
Therefore, it's important to
consider virus optimization.

276
00:20:11,379 --> 00:20:14,630
One such approach is to
transmit a detailed state of the

277
00:20:14,649 --> 00:20:16,779
application instead of full logs.

278
00:20:17,570 --> 00:20:21,329
For example, you could send
information about which screens

279
00:20:21,490 --> 00:20:23,220
the user navigated through.

280
00:20:23,649 --> 00:20:25,790
Which API requests were made?

281
00:20:26,100 --> 00:20:30,929
What settings were configured and which
key business logic flags were set?

282
00:20:31,919 --> 00:20:36,520
Let's consider an example of
notification service extension in iOS.

283
00:20:37,630 --> 00:20:40,910
This extension is triggered
when a push notification with

284
00:20:40,910 --> 00:20:42,420
a specific flag is received.

285
00:20:43,165 --> 00:20:47,314
The system then allows us to modify
the content of this notification,

286
00:20:47,665 --> 00:20:51,455
or even generate multiple
notifications instead of one.

287
00:20:52,445 --> 00:20:58,205
For our business logic, we make an
HTTP request to our API, query a

288
00:20:58,364 --> 00:21:01,004
database, save changes, and much more.

289
00:21:01,555 --> 00:21:03,134
However, there is a catch.

290
00:21:03,645 --> 00:21:07,375
iOS strictly enforces a 24MB RAM limit.

291
00:21:07,554 --> 00:21:09,604
limit for your extension.

292
00:21:09,985 --> 00:21:14,084
If you exceeded this limit, the
system will immediately terminate

293
00:21:14,115 --> 00:21:16,544
your process without any notification.

294
00:21:17,264 --> 00:21:22,224
This means the user won't even
know that something went wrong and

295
00:21:22,224 --> 00:21:26,905
no events will be locked in your
metrics or crash reporting tools.

296
00:21:27,340 --> 00:21:30,189
Knowing that the notification
service extension is not

297
00:21:30,189 --> 00:21:32,260
fully executing is not enough.

298
00:21:32,510 --> 00:21:35,519
It's crucial to know at
which stage it fails.

299
00:21:35,989 --> 00:21:41,470
So we need to track every step of
our process, send some kind of result

300
00:21:41,500 --> 00:21:47,240
and ensure that we don't introduce so
much overhead that we ourselves become

301
00:21:47,320 --> 00:21:49,169
the cause of exceeding the RAM limit.

302
00:21:50,500 --> 00:21:55,429
A simple solution is to use an option
set, where each bit represents a

303
00:21:55,429 --> 00:22:00,000
specific step in the notification
service extension process, and one of

304
00:22:00,000 --> 00:22:05,899
these bits indicates that the extension
has reached its logical conclusion.

305
00:22:06,540 --> 00:22:10,239
If we complete a step, we
set a corresponding bit to 1.

306
00:22:10,729 --> 00:22:15,139
Each time a change occurs, we should
save the option set value to disk.

307
00:22:16,469 --> 00:22:21,320
Then on next launch, we can check the
value of the last option set to determine

308
00:22:21,499 --> 00:22:28,509
whether all necessary steps were completed
and if the process reached It's end.

309
00:22:29,419 --> 00:22:32,579
If we detect any deviation,
we can send a metric.

310
00:22:33,099 --> 00:22:37,859
This way you can see if your extension
frequently encounters error or

311
00:22:37,899 --> 00:22:41,269
is being terminated by the system
due to exceeding the RAM limit.

312
00:22:42,129 --> 00:22:47,530
Those, instead of large volume of
logs, you can focus on capturing

313
00:22:47,530 --> 00:22:49,514
specific key events and states.

314
00:22:49,894 --> 00:22:54,784
which will not only save resources,
but also simplify data analysis.

315
00:22:56,574 --> 00:22:59,985
With a well structured architecture
in your application, implementing

316
00:23:00,054 --> 00:23:02,654
various metrics becomes much easier.

317
00:23:03,245 --> 00:23:06,404
Honestly, there is nothing
fundamentally new here.

318
00:23:06,684 --> 00:23:10,834
It's important to follow established
patterns, with an emphasis on

319
00:23:11,084 --> 00:23:12,574
adhering to solid principles.

320
00:23:13,134 --> 00:23:15,954
Especially the single
responsibility principle.

321
00:23:16,925 --> 00:23:22,074
This will help you better monitor the
areas in your code that require attention.

322
00:23:22,934 --> 00:23:27,374
For example, let's consider how the
coordinator pattern can help us.

323
00:23:28,304 --> 00:23:33,134
Using the coordinating pattern for
navigation allows you to clearly

324
00:23:33,164 --> 00:23:37,314
track the user path through the
scenes and their current state.

325
00:23:38,114 --> 00:23:39,215
Each coordinator.

326
00:23:39,449 --> 00:23:44,919
calls another, and those you can easily
compile all the information about the

327
00:23:44,919 --> 00:23:50,409
user's journey into the optimized string,
such as registration, intercode, main

328
00:23:50,419 --> 00:23:57,489
screen, more screen settings, or even
minimize it to something like this,

329
00:23:58,149 --> 00:24:02,749
where each designation represents
a specific screen or transition.

330
00:24:03,530 --> 00:24:06,270
This data can be easily
decoded for analysis.

331
00:24:06,854 --> 00:24:10,764
You can also use the coordinator
pattern to determine the last screen

332
00:24:10,774 --> 00:24:13,364
the user was on before closing the app.

333
00:24:14,394 --> 00:24:20,604
You can send such a metric based on the
hypothesis that if many users close the

334
00:24:20,665 --> 00:24:25,654
app while on a specific screen, there
is likely something wrong with it, or

335
00:24:25,654 --> 00:24:30,549
users are unable to exit the screen,
prompting them to restart the app.

336
00:24:31,049 --> 00:24:35,099
To achieve this, you simply need
to identify the active coordinator

337
00:24:35,149 --> 00:24:40,769
in the application build terminate
method of the AppDelegate, ask it

338
00:24:40,779 --> 00:24:44,530
for the current screen, log this
information, and then send it to

339
00:24:44,629 --> 00:24:46,559
Analytics on the next app launch.

340
00:24:47,169 --> 00:24:51,350
With the coordinator pattern,
this can be done quite easily

341
00:24:51,419 --> 00:24:52,989
while keeping your code clean.

342
00:24:53,739 --> 00:24:59,139
We can also build an app start time
metric based on how quickly the user gains

343
00:24:59,169 --> 00:25:01,310
access to the app after launching it.

344
00:25:01,929 --> 00:25:05,979
Again, using the coordinator, you
can measure the time difference

345
00:25:05,989 --> 00:25:10,499
from your app startup to when the
app reaches to a specific state

346
00:25:10,540 --> 00:25:12,330
according to your business logic.

347
00:25:12,949 --> 00:25:17,779
Similarly, you can monitor how quickly
users complete important flows in

348
00:25:17,779 --> 00:25:19,669
your application, such as payments.

349
00:25:20,239 --> 00:25:24,509
If users suddenly start taking
significantly longer to complete a payment

350
00:25:24,509 --> 00:25:26,729
flow, you will notice it right away.

351
00:25:27,959 --> 00:25:31,929
Additionally, you can work
with the API layer by recording

352
00:25:32,009 --> 00:25:36,539
which requests were made during
AppStartup or during its operation.

353
00:25:37,159 --> 00:25:41,339
This data can be useful for understanding
the sequence of user actions and

354
00:25:41,369 --> 00:25:46,019
identifying potential issues, as well as
spotting bottlenecks during AppStartup.

355
00:25:47,409 --> 00:25:50,870
This will be easy to implement
if you have clearly defined

356
00:25:50,889 --> 00:25:52,800
your API and network entities.

357
00:25:53,699 --> 00:25:57,929
Another interesting and useful
metric I recommend is Annoyed Tab.

358
00:25:58,439 --> 00:26:03,939
This metric tracks situations where
the user repeatedly taps on the same UI

359
00:26:03,969 --> 00:26:08,469
element, which may indicate frustration
due to something not working properly.

360
00:26:09,309 --> 00:26:14,510
Such a metric will be easy to implement
if you have a clearly defined entity that

361
00:26:14,559 --> 00:26:16,959
handles the business logic of the screen.

362
00:26:17,439 --> 00:26:21,280
Such as Interactor controller,
view model, and at sra.

363
00:26:22,090 --> 00:26:23,169
That's it for today.

364
00:26:23,590 --> 00:26:26,590
Thank you for your time
and interest in the topic.

365
00:26:26,969 --> 00:26:32,199
I hope you get a better understanding
of how to implement observability

366
00:26:32,260 --> 00:26:34,030
in your IUS applications.

367
00:26:34,540 --> 00:26:37,870
Best of luck with your huge
developments and thank you once

368
00:26:37,870 --> 00:26:39,490
again for being here today.

369
00:26:39,490 --> 00:26:40,000
Bye-Bye.

